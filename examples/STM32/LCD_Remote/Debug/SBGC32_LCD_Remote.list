
SBGC32_LCD_Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0800d7b8  0800d7b8  0001d7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e14c  0800e14c  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  0800e14c  0800e14c  0001e14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e154  0800e154  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e154  0800e154  0001e154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e158  0800e158  0001e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800e15c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000360  0800e4bc  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  0800e4bc  00020718  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e2c  00000000  00000000  0002038e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec3  00000000  00000000  000421ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00046080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00047848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbd7  00000000  00000000  00048e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc03  00000000  00000000  000759ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109836  00000000  00000000  00091602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  0019ae38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075fc  00000000  00000000  0019ae84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000360 	.word	0x20000360
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d7a0 	.word	0x0800d7a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000364 	.word	0x20000364
 800023c:	0800d7a0 	.word	0x0800d7a0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <begin>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;

  begin(16, 2);
}

void begin(uint8_t cols, uint8_t lines) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	4613      	mov	r3, r2
 80009ea:	71bb      	strb	r3, [r7, #6]
  /* Get CPU frequency */
  SystemCoreClockUpdate();
 80009ec:	f001 fc44 	bl	8002278 <SystemCoreClockUpdate>
  _fcpu_mp = SystemCoreClock / 1000000;
 80009f0:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <begin+0x130>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <begin+0x134>)
 80009f6:	fba2 2303 	umull	r2, r3, r2, r3
 80009fa:	0c9b      	lsrs	r3, r3, #18
 80009fc:	4a45      	ldr	r2, [pc, #276]	; (8000b14 <begin+0x138>)
 80009fe:	6013      	str	r3, [r2, #0]

  if (lines > 1) {
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d906      	bls.n	8000a14 <begin+0x38>
    _displayfunction |= LCD_2LINE;
 8000a06:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <begin+0x13c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b41      	ldr	r3, [pc, #260]	; (8000b18 <begin+0x13c>)
 8000a12:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000a14:	4a41      	ldr	r2, [pc, #260]	; (8000b1c <begin+0x140>)
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	3340      	adds	r3, #64	; 0x40
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f886 	bl	8000b34 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <begin+0x144>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d009      	beq.n	8000a44 <begin+0x68>
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d106      	bne.n	8000a44 <begin+0x68>
    _displayfunction |= LCD_5x10DOTS;
 8000a36:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <begin+0x13c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <begin+0x13c>)
 8000a42:	701a      	strb	r2, [r3, #0]
//
//  if (_rw_pin != 255) {
//    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
//  }
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_RS(0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	4836      	ldr	r0, [pc, #216]	; (8000b24 <begin+0x148>)
 8000a4c:	f002 ff1c 	bl	8003888 <HAL_GPIO_WritePin>
  LCD_SET_EN(0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a56:	4834      	ldr	r0, [pc, #208]	; (8000b28 <begin+0x14c>)
 8000a58:	f002 ff16 	bl	8003888 <HAL_GPIO_WritePin>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <begin+0x13c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d115      	bne.n	8000a94 <begin+0xb8>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f999 	bl	8000da0 <write4bits>
    DELAY_MS(5); // wait min 4.1ms
 8000a6e:	2005      	movs	r0, #5
 8000a70:	f001 fe9c 	bl	80027ac <HAL_Delay>

    // second try
    write4bits(0x03);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f993 	bl	8000da0 <write4bits>
    DELAY_MS(5); // wait min 4.1ms
 8000a7a:	2005      	movs	r0, #5
 8000a7c:	f001 fe96 	bl	80027ac <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f98d 	bl	8000da0 <write4bits>
    DELAY_MS(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f001 fe90 	bl	80027ac <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f000 f987 	bl	8000da0 <write4bits>
 8000a92:	e01d      	b.n	8000ad0 <begin+0xf4>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <begin+0x13c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f8f3 	bl	8000c8a <command>
    DELAY_MS(5);  // wait more than 4.1ms
 8000aa4:	2005      	movs	r0, #5
 8000aa6:	f001 fe81 	bl	80027ac <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <begin+0x13c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f8e8 	bl	8000c8a <command>
    DELAY_MS(1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f001 fe76 	bl	80027ac <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <begin+0x13c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	f043 0320 	orr.w	r3, r3, #32
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f8dd 	bl	8000c8a <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <begin+0x13c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f8d5 	bl	8000c8a <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <begin+0x150>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	701a      	strb	r2, [r3, #0]
  display();
 8000ae6:	f000 f881 	bl	8000bec <display>

  // clear it off
  clear();
 8000aea:	f000 f843 	bl	8000b74 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <begin+0x154>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <begin+0x154>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f8c3 	bl	8000c8a <command>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000180 	.word	0x20000180
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	20000388 	.word	0x20000388
 8000b18:	2000037d 	.word	0x2000037d
 8000b1c:	20000380 	.word	0x20000380
 8000b20:	2000037c 	.word	0x2000037c
 8000b24:	40021400 	.word	0x40021400
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	2000037e 	.word	0x2000037e
 8000b30:	2000037f 	.word	0x2000037f

08000b34 <setRowOffsets>:
//
//  // if you have a port that is not listed add it below the other else ifs
//}

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <setRowOffsets+0x3c>)
 8000b48:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <setRowOffsets+0x3c>)
 8000b50:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <setRowOffsets+0x3c>)
 8000b58:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <setRowOffsets+0x3c>)
 8000b60:	70da      	strb	r2, [r3, #3]
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000384 	.word	0x20000384

08000b74 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 f886 	bl	8000c8a <command>
  DELAY_MS(2);  // this command takes a long time!
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f001 fe14 	bl	80027ac <HAL_Delay>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  DELAY_MS(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000b98:	2304      	movs	r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d803      	bhi.n	8000bac <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <setCursor+0x5c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d303      	bcc.n	8000bbe <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <setCursor+0x5c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <setCursor+0x60>)
 8000bc2:	5cd2      	ldrb	r2, [r2, r3]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f858 	bl	8000c8a <command>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000380 	.word	0x20000380
 8000be8:	20000384 	.word	0x20000384

08000bec <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <display+0x28>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <display+0x28>)
 8000bfc:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <display+0x28>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f83e 	bl	8000c8a <command>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000037e 	.word	0x2000037e

08000c18 <print_str>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
uint32_t print_str(const char str[]) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <print_str+0x12>
 8000c26:	2300      	movs	r3, #0
 8000c28:	e01d      	b.n	8000c66 <print_str+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fb06 	bl	8000240 <strlen>
 8000c34:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000c3a:	e00c      	b.n	8000c56 <print_str+0x3e>
    if (write(*buffer++)) n++;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	617a      	str	r2, [r7, #20]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f82e 	bl	8000ca6 <write>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d008      	beq.n	8000c62 <print_str+0x4a>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	613a      	str	r2, [r7, #16]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1ed      	bne.n	8000c3c <print_str+0x24>
 8000c60:	e000      	b.n	8000c64 <print_str+0x4c>
    else break;
 8000c62:	bf00      	nop
  }
  return n;
 8000c64:	68fb      	ldr	r3, [r7, #12]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <print_char>:

uint32_t print_char(const char simb) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  write(simb);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f813 	bl	8000ca6 <write>
  return 1;
 8000c80:	2301      	movs	r3, #1
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f813 	bl	8000cc4 <send>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <write>:

inline uint32_t write(uint8_t value) {
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
  send(value, 1);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f805 	bl	8000cc4 <send>
  return 1; // assume success
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, uint8_t mode) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
//  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, _rs_pin, mode);
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_RS(mode);
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <send+0x50>)
 8000cde:	f002 fdd3 	bl	8003888 <HAL_GPIO_WritePin>
  // if there is a RW pin indicated, set it low to Write
//  if (_rw_pin != 255) {
//    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
//  }

  if (_displayfunction & LCD_8BITMODE) {
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <send+0x54>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d004      	beq.n	8000cf8 <send+0x34>
    write8bits(value);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f893 	bl	8000e1c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000cf6:	e009      	b.n	8000d0c <send+0x48>
    write4bits(value>>4);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f84e 	bl	8000da0 <write4bits>
    write4bits(value);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f84a 	bl	8000da0 <write4bits>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021400 	.word	0x40021400
 8000d18:	2000037d 	.word	0x2000037d

08000d1c <pulseEnable>:

void pulseEnable(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, _enable_pin, GPIO_PIN_SET);
//  HAL_Delay(1);    // enable pulse must be >450ns
//  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, _enable_pin, GPIO_PIN_RESET);
//  HAL_Delay(1);   // commands need > 37us to settle
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_EN(0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	481b      	ldr	r0, [pc, #108]	; (8000d98 <pulseEnable+0x7c>)
 8000d2a:	f002 fdad 	bl	8003888 <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	e003      	b.n	8000d3c <pulseEnable+0x20>
 8000d34:	bf00      	nop
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <pulseEnable+0x80>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3f6      	bcc.n	8000d34 <pulseEnable+0x18>
  LCD_SET_EN(1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4c:	4812      	ldr	r0, [pc, #72]	; (8000d98 <pulseEnable+0x7c>)
 8000d4e:	f002 fd9b 	bl	8003888 <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	e003      	b.n	8000d60 <pulseEnable+0x44>
 8000d58:	bf00      	nop
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <pulseEnable+0x80>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3f6      	bcc.n	8000d58 <pulseEnable+0x3c>
  LCD_SET_EN(0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <pulseEnable+0x7c>)
 8000d72:	f002 fd89 	bl	8003888 <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	e003      	b.n	8000d84 <pulseEnable+0x68>
 8000d7c:	bf00      	nop
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3301      	adds	r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <pulseEnable+0x80>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3f6      	bcc.n	8000d7c <pulseEnable+0x60>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	20000388 	.word	0x20000388

08000da0 <write4bits>:

void write4bits(uint8_t value) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
//  for (int i = 0; i < 4; i++) {
//    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
//  }
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
	LCD_SET_D4(((value >> 0) & 1) ? 1 : 0);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db8:	4816      	ldr	r0, [pc, #88]	; (8000e14 <write4bits+0x74>)
 8000dba:	f002 fd65 	bl	8003888 <HAL_GPIO_WritePin>
	LCD_SET_D5(((value >> 1) & 1) ? 1 : 0);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd0:	4811      	ldr	r0, [pc, #68]	; (8000e18 <write4bits+0x78>)
 8000dd2:	f002 fd59 	bl	8003888 <HAL_GPIO_WritePin>
	LCD_SET_D6(((value >> 2) & 1) ? 1 : 0);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <write4bits+0x78>)
 8000dea:	f002 fd4d 	bl	8003888 <HAL_GPIO_WritePin>
	LCD_SET_D7(((value >> 3) & 1) ? 1 : 0);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <write4bits+0x74>)
 8000e02:	f002 fd41 	bl	8003888 <HAL_GPIO_WritePin>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

  pulseEnable();
 8000e06:	f7ff ff89 	bl	8000d1c <pulseEnable>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021400 	.word	0x40021400
 8000e18:	40021000 	.word	0x40021000

08000e1c <write8bits>:

void write8bits(uint8_t value) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
//  for (int i = 0; i < 8; i++) {
//    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
//  }
//
//  pulseEnable();
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e48:	4a2f      	ldr	r2, [pc, #188]	; (8000f08 <MX_ADC1_Init+0xd4>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e76:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <MX_ADC1_Init+0xd8>)
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e96:	f001 fcad 	bl	80027f4 <HAL_ADC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea0:	f001 f80e 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000eac:	2307      	movs	r3, #7
 8000eae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000eb6:	f001 ff25 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec0:	f000 fffe 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000ed2:	f001 ff17 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000edc:	f000 fff0 	bl	8001ec0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ee0:	2306      	movs	r3, #6
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000eee:	f001 ff09 	bl	8002d04 <HAL_ADC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ef8:	f000 ffe2 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000038c 	.word	0x2000038c
 8000f08:	40012000 	.word	0x40012000
 8000f0c:	0f000001 	.word	0x0f000001

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_ADC_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12b      	bne.n	8000f8a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a18      	ldr	r2, [pc, #96]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8000f62:	2368      	movs	r3, #104	; 0x68
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <HAL_ADC_MspInit+0x8c>)
 8000f76:	f002 fac3 	bl	8003500 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2107      	movs	r1, #7
 8000f7e:	2012      	movs	r0, #18
 8000f80:	f002 f9f5 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f84:	2012      	movs	r0, #18
 8000f86:	f002 fa0e 	bl	80033a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40012000 	.word	0x40012000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <AverageValue>:
	averageValue->avgRes = 0;
}


static inline void AverageValue (AverageValue_t *averageValue, i16 value)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
	averageValue->avgBuff += (i32)value - (i32)averageValue->avgRes;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000fba:	1a5b      	subs	r3, r3, r1
 8000fbc:	441a      	add	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = (i16)(averageValue->avgBuff >> averageValue->_factor);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	7992      	ldrb	r2, [r2, #6]
 8000fca:	4113      	asrs	r3, r2
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	809a      	strh	r2, [r3, #4]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <LCD_PrintProgress>:


static inline void LCD_PrintProgress (LCD_RemoteGeneral_t *LCD_RemoteGeneral, ui8 cursor_pos)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	for (ui8 i = 0; i < 3; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e01a      	b.n	8001028 <LCD_PrintProgress+0x48>
		cursor_pos += print_char(((ui8)(LCD_RemoteGeneral->currentTimeMs / 1000)) % 4 > i ? '.' : ' ');
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <LCD_PrintProgress+0x58>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	429a      	cmp	r2, r3
 800100a:	d201      	bcs.n	8001010 <LCD_PrintProgress+0x30>
 800100c:	232e      	movs	r3, #46	; 0x2e
 800100e:	e000      	b.n	8001012 <LCD_PrintProgress+0x32>
 8001010:	2320      	movs	r3, #32
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fe2b 	bl	8000c6e <print_char>
 8001018:	4603      	mov	r3, r0
 800101a:	b2da      	uxtb	r2, r3
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	4413      	add	r3, r2
 8001020:	70fb      	strb	r3, [r7, #3]
	for (ui8 i = 0; i < 3; i++)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d9e1      	bls.n	8000ff2 <LCD_PrintProgress+0x12>
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	10624dd3 	.word	0x10624dd3

0800103c <LCD_FillSpace>:


static inline void LCD_FillSpace (ui8 *cursor_pos, ui8 to_pos)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	while (*cursor_pos < to_pos)
 8001048:	e008      	b.n	800105c <LCD_FillSpace+0x20>
	{
		print_char(' ');
 800104a:	2020      	movs	r0, #32
 800104c:	f7ff fe0f 	bl	8000c6e <print_char>
		(*cursor_pos)++;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	701a      	strb	r2, [r3, #0]
	while (*cursor_pos < to_pos)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	78fa      	ldrb	r2, [r7, #3]
 8001062:	429a      	cmp	r2, r3
 8001064:	d8f1      	bhi.n	800104a <LCD_FillSpace+0xe>
	}
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <ProcessHandler>:
 */
/* Process incoming commands. Call it as frequently as possible,
   to prevent overrun of serial input buffer */
void ProcessHandler (GeneralSBGC_t *generalSBGC, LCD_RemoteGeneral_t *LCD_RemoteGeneral,
					 RealTimeData_t *realTimeData, AdjVarsGeneral_t *adjVarGeneral)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
	if (generalSBGC->_ParserCurrentStatus == TX_RX_OK)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001084:	2b00      	cmp	r3, #0
 8001086:	d14e      	bne.n	8001126 <ProcessHandler+0xb6>
	{
		if (LCD_RemoteGeneral->connectFlag == 0)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10a      	bne.n	80010a8 <ProcessHandler+0x38>
		{
			LCD_RemoteGeneral->connectFlag = 1;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			SBGC32_GetAdjVarValues(generalSBGC, adjVarGeneral, LCD_RemoteGeneral->adjVarQuan);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	7f5b      	ldrb	r3, [r3, #29]
 800109e:	461a      	mov	r2, r3
 80010a0:	6839      	ldr	r1, [r7, #0]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f006 fb96 	bl	80077d4 <SBGC32_GetAdjVarValues>
		}

		ui32 err = (ui32)(abs(realTimeData->IMU_Angle[ROLL] - realTimeData->targetAngle[ROLL])
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
				 + abs(realTimeData->IMU_Angle[PITCH] - realTimeData->targetAngle[PITCH])
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfb8      	it	lt
 80010dc:	425b      	neglt	r3, r3
 80010de:	441a      	add	r2, r3
				 + abs(realTimeData->IMU_Angle[YAW] - realTimeData->targetAngle[YAW])) * (ui32)(ANGLE_DEGREE_SCALE * 1000);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	1acb      	subs	r3, r1, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bfb8      	it	lt
 80010f8:	425b      	neglt	r3, r3
 80010fa:	4413      	add	r3, r2
		ui32 err = (ui32)(abs(realTimeData->IMU_Angle[ROLL] - realTimeData->targetAngle[ROLL])
 80010fc:	461a      	mov	r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	00da      	lsls	r2, r3, #3
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]

		 AverageValue(&LCD_RemoteGeneral->TargetErrorAverage, CONSTRAINT(err, 0, 999));
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f103 0210 	add.w	r2, r3, #16
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001116:	428b      	cmp	r3, r1
 8001118:	bf28      	it	cs
 800111a:	460b      	movcs	r3, r1
 800111c:	b21b      	sxth	r3, r3
 800111e:	4619      	mov	r1, r3
 8001120:	4610      	mov	r0, r2
 8001122:	f7ff ff3d 	bl	8000fa0 <AverageValue>
	}

	/* If no commands for a long time, set connected state to false */
	if (LCD_RemoteGeneral->connectFlag && (LCD_RemoteGeneral->currentTimeMs - LCD_RemoteGeneral->rtReqCmdTimeMs) > MAX_WAIT_TIME_MS)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <ProcessHandler+0xd8>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800113e:	d903      	bls.n	8001148 <ProcessHandler+0xd8>
		LCD_RemoteGeneral->connectFlag = 0; // last_bt_connect_ms = currentTimeMs;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <DebounceNavigationButton>:

/* De-bounce button: it should keep it's state for a given period
   of time, specified in the BTN_BOUNCE_THRESHOLD_MS returns 1
   if LCD_RemoteGeneral->....triggerState is changed. */
ui8 DebounceNavigationButton (LCD_RemoteGeneral_t *LCD_RemoteGeneral, ButtonDirection_t newState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	if (newState != LCD_RemoteGeneral->NavButton.state)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e9b      	ldrb	r3, [r3, #26]
 8001160:	78fa      	ldrb	r2, [r7, #3]
 8001162:	429a      	cmp	r2, r3
 8001164:	d008      	beq.n	8001178 <DebounceNavigationButton+0x28>
	{
		LCD_RemoteGeneral->NavButton.state = newState;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	78fa      	ldrb	r2, [r7, #3]
 800116a:	769a      	strb	r2, [r3, #26]
		LCD_RemoteGeneral->NavButton.lastTimeMs = LCD_RemoteGeneral->currentTimeMs;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	831a      	strh	r2, [r3, #24]
 8001176:	e014      	b.n	80011a2 <DebounceNavigationButton+0x52>
	}

	else if (LCD_RemoteGeneral->NavButton.triggerState != LCD_RemoteGeneral->NavButton.state &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7eda      	ldrb	r2, [r3, #27]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7e9b      	ldrb	r3, [r3, #26]
 8001180:	429a      	cmp	r2, r3
 8001182:	d00e      	beq.n	80011a2 <DebounceNavigationButton+0x52>
	  		(ui16)(LCD_RemoteGeneral->currentTimeMs - LCD_RemoteGeneral->NavButton.lastTimeMs) > SOFTWARE_ANTI_BOUNCE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	8b1b      	ldrh	r3, [r3, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b29b      	uxth	r3, r3
	else if (LCD_RemoteGeneral->NavButton.triggerState != LCD_RemoteGeneral->NavButton.state &&
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d905      	bls.n	80011a2 <DebounceNavigationButton+0x52>
	{
		LCD_RemoteGeneral->NavButton.triggerState = LCD_RemoteGeneral->NavButton.state;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7e9a      	ldrb	r2, [r3, #26]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	76da      	strb	r2, [r3, #27]
		return 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <DebounceNavigationButton+0x54>
	}

	return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <ReadNavigationButtonState>:


/* Reads the state of buttons */
ButtonDirection_t ReadNavigationButtonState (InputsInfo_t *inputsInfo)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	ReadADC_Inputs(inputsInfo);  // start next conversions
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f96e 	bl	800149a <ReadADC_Inputs>

	ui16 navBtnLevel = inputsInfo->ADC_INx[ADC_NAV];
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	81fb      	strh	r3, [r7, #14]

	if (navBtnLevel >= 3600)
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80011ca:	d301      	bcc.n	80011d0 <ReadNavigationButtonState+0x20>
		return NAV_BTN_RELEASED;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e025      	b.n	800121c <ReadNavigationButtonState+0x6c>

	if (navBtnLevel < 150)
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	2b95      	cmp	r3, #149	; 0x95
 80011d4:	d801      	bhi.n	80011da <ReadNavigationButtonState+0x2a>
		return NAV_BTN_LEFT;
 80011d6:	2304      	movs	r3, #4
 80011d8:	e020      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 600)
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80011e0:	d201      	bcs.n	80011e6 <ReadNavigationButtonState+0x36>
		return NAV_BTN_UP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	e01a      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 1300)
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	f240 5213 	movw	r2, #1299	; 0x513
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d801      	bhi.n	80011f4 <ReadNavigationButtonState+0x44>
		return NAV_BTN_RIGHT;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e013      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 2000)
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011fa:	d201      	bcs.n	8001200 <ReadNavigationButtonState+0x50>
		return NAV_BTN_SELECT;
 80011fc:	2305      	movs	r3, #5
 80011fe:	e00d      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 2900)
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	f640 3253 	movw	r2, #2899	; 0xb53
 8001206:	4293      	cmp	r3, r2
 8001208:	d801      	bhi.n	800120e <ReadNavigationButtonState+0x5e>
		return NAV_BTN_DOWN;
 800120a:	2303      	movs	r3, #3
 800120c:	e006      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 3600)
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001214:	d201      	bcs.n	800121a <ReadNavigationButtonState+0x6a>
		return NAV_BTN_ENCODER_SELECT;
 8001216:	2306      	movs	r3, #6
 8001218:	e000      	b.n	800121c <ReadNavigationButtonState+0x6c>

	return NAV_BTN_RELEASED;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <UpdateDisplay>:


/* Re-paint display */
void UpdateDisplay (GeneralSBGC_t *generalSBGC, LCD_RemoteGeneral_t *LCD_RemoteGeneral,
					RealTimeData_t *realTimeData, AdjVarsGeneral_t *adjVarGeneral)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08d      	sub	sp, #52	; 0x34
 8001228:	af02      	add	r7, sp, #8
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
	/* First raw */
	setCursor(0, 0);
 8001232:	2100      	movs	r1, #0
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fca7 	bl	8000b88 <setCursor>

	char buf [17];

	ui8 pos = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	74fb      	strb	r3, [r7, #19]

	LCD_RemoteGeneral->currentPage = (LCD_RemoteGeneral->currentPage + 50) % 5;  // Should be in the range of available pages
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001244:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001248:	4b7c      	ldr	r3, [pc, #496]	; (800143c <UpdateDisplay+0x218>)
 800124a:	fb83 1302 	smull	r1, r3, r3, r2
 800124e:	1059      	asrs	r1, r3, #1
 8001250:	17d3      	asrs	r3, r2, #31
 8001252:	1ac9      	subs	r1, r1, r3
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	1ad1      	subs	r1, r2, r3
 800125c:	b24a      	sxtb	r2, r1
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	switch (LCD_RemoteGeneral->currentPage)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 800126a:	2b04      	cmp	r3, #4
 800126c:	d873      	bhi.n	8001356 <UpdateDisplay+0x132>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <UpdateDisplay+0x50>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	08001289 	.word	0x08001289
 8001278:	080012f9 	.word	0x080012f9
 800127c:	0800130d 	.word	0x0800130d
 8001280:	08001327 	.word	0x08001327
 8001284:	08001341 	.word	0x08001341
	{
		case 0 : /* PAGE 0 */
			if (LCD_RemoteGeneral->connectFlag)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800128e:	2b00      	cmp	r3, #0
 8001290:	d028      	beq.n	80012e4 <UpdateDisplay+0xc0>
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8b3 3037 	ldrh.w	r3, [r3, #55]	; 0x37
 8001298:	b29b      	uxth	r3, r3
 800129a:	4a69      	ldr	r2, [pc, #420]	; (8001440 <UpdateDisplay+0x21c>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	095b      	lsrs	r3, r3, #5
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461c      	mov	r4, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8b3 3037 	ldrh.w	r3, [r3, #55]	; 0x37
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4a64      	ldr	r2, [pc, #400]	; (8001440 <UpdateDisplay+0x21c>)
 80012b0:	fba2 1203 	umull	r1, r2, r2, r3
 80012b4:	0952      	lsrs	r2, r2, #5
 80012b6:	2164      	movs	r1, #100	; 0x64
 80012b8:	fb01 f202 	mul.w	r2, r1, r2
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4619      	mov	r1, r3
						realTimeData->curProfile + 1, LCD_RemoteGeneral->TargetErrorAverage.avgRes);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 80012c8:	3301      	adds	r3, #1
						realTimeData->curProfile + 1, LCD_RemoteGeneral->TargetErrorAverage.avgRes);
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 80012d0:	f107 0014 	add.w	r0, r7, #20
 80012d4:	9201      	str	r2, [sp, #4]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	4622      	mov	r2, r4
 80012dc:	4959      	ldr	r1, [pc, #356]	; (8001444 <UpdateDisplay+0x220>)
 80012de:	f008 fe4d 	bl	8009f7c <siprintf>

			else
				LCD_PrintProgress(LCD_RemoteGeneral, print_str("CONNECTING"));

			break;
 80012e2:	e038      	b.n	8001356 <UpdateDisplay+0x132>
				LCD_PrintProgress(LCD_RemoteGeneral, print_str("CONNECTING"));
 80012e4:	4858      	ldr	r0, [pc, #352]	; (8001448 <UpdateDisplay+0x224>)
 80012e6:	f7ff fc97 	bl	8000c18 <print_str>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4619      	mov	r1, r3
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f7ff fe75 	bl	8000fe0 <LCD_PrintProgress>
			break;
 80012f6:	e02e      	b.n	8001356 <UpdateDisplay+0x132>

		case 1 :  /* PAGE 1 */
			sprintf(buf, "SE: %03d FM:", generalSBGC->_rxErrorsCount);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	461a      	mov	r2, r3
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4952      	ldr	r1, [pc, #328]	; (800144c <UpdateDisplay+0x228>)
 8001304:	4618      	mov	r0, r3
 8001306:	f008 fe39 	bl	8009f7c <siprintf>
			break;
 800130a:	e024      	b.n	8001356 <UpdateDisplay+0x132>

		case 2 :  /* PAGE 2 */
			sprintf(buf, " D1:%3d  D2:%3d", LCD_RemoteGeneral->debug1, LCD_RemoteGeneral->debug2);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001312:	461a      	mov	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800131a:	f107 0014 	add.w	r0, r7, #20
 800131e:	494c      	ldr	r1, [pc, #304]	; (8001450 <UpdateDisplay+0x22c>)
 8001320:	f008 fe2c 	bl	8009f7c <siprintf>
			break;
 8001324:	e017      	b.n	8001356 <UpdateDisplay+0x132>

		case 3 :  /* PAGE 3 */
			sprintf(buf, " D3:%3d  D4:%3d", LCD_RemoteGeneral->debug3, LCD_RemoteGeneral->debug4);
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800132c:	461a      	mov	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001334:	f107 0014 	add.w	r0, r7, #20
 8001338:	4946      	ldr	r1, [pc, #280]	; (8001454 <UpdateDisplay+0x230>)
 800133a:	f008 fe1f 	bl	8009f7c <siprintf>
			break;
 800133e:	e00a      	b.n	8001356 <UpdateDisplay+0x132>

		case 4 :  /* PAGE 4 */
			sprintf(buf, "I2C_ERRORS: %03d", realTimeData->I2C_ErrorCount);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4942      	ldr	r1, [pc, #264]	; (8001458 <UpdateDisplay+0x234>)
 800134e:	4618      	mov	r0, r3
 8001350:	f008 fe14 	bl	8009f7c <siprintf>
			break;
 8001354:	bf00      	nop
	}

	pos = print_str(buf);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fc5c 	bl	8000c18 <print_str>
 8001360:	4603      	mov	r3, r0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	74fb      	strb	r3, [r7, #19]

	LCD_FillSpace(&pos, LCD_COLS);
 8001366:	f107 0313 	add.w	r3, r7, #19
 800136a:	2110      	movs	r1, #16
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe65 	bl	800103c <LCD_FillSpace>

	/* Second raw */
	setCursor(0, 1);
 8001372:	2101      	movs	r1, #1
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fc07 	bl	8000b88 <setCursor>

	#ifdef SBGC_DEBUG_MODE

		/* Currently selected adj. variable name and value */
		for (pos = 0; pos < ADJ_VAR_NAME_MAX_LENGTH; pos++)
 800137a:	2300      	movs	r3, #0
 800137c:	74fb      	strb	r3, [r7, #19]
 800137e:	e02a      	b.n	80013d6 <UpdateDisplay+0x1b2>
		{
			if (!(adjVarGeneral[LCD_RemoteGeneral->currentAdjVarIndex].name[pos + 8]))
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	7f1b      	ldrb	r3, [r3, #28]
 8001384:	461a      	mov	r2, r3
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	461a      	mov	r2, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	441a      	add	r2, r3
 8001394:	7cfb      	ldrb	r3, [r7, #19]
 8001396:	3308      	adds	r3, #8
 8001398:	4413      	add	r3, r2
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01e      	beq.n	80013de <UpdateDisplay+0x1ba>
				break;

			sprintf(&buf[pos], "%c", adjVarGeneral[LCD_RemoteGeneral->currentAdjVarIndex].name[pos + 8]);  // offset due to ADJ_VAR_ (+ 8)
 80013a0:	7cfb      	ldrb	r3, [r7, #19]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	1898      	adds	r0, r3, r2
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	7f1b      	ldrb	r3, [r3, #28]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	461a      	mov	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	441a      	add	r2, r3
 80013be:	7cfb      	ldrb	r3, [r7, #19]
 80013c0:	3308      	adds	r3, #8
 80013c2:	4413      	add	r3, r2
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4924      	ldr	r1, [pc, #144]	; (800145c <UpdateDisplay+0x238>)
 80013ca:	f008 fdd7 	bl	8009f7c <siprintf>
		for (pos = 0; pos < ADJ_VAR_NAME_MAX_LENGTH; pos++)
 80013ce:	7cfb      	ldrb	r3, [r7, #19]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	74fb      	strb	r3, [r7, #19]
 80013d6:	7cfb      	ldrb	r3, [r7, #19]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d9d1      	bls.n	8001380 <UpdateDisplay+0x15c>
 80013dc:	e000      	b.n	80013e0 <UpdateDisplay+0x1bc>
				break;
 80013de:	bf00      	nop
		}

	#endif

	sprintf(&buf[pos], ":%li", adjVarGeneral[LCD_RemoteGeneral->currentAdjVarIndex].value);
 80013e0:	7cfb      	ldrb	r3, [r7, #19]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	1898      	adds	r0, r3, r2
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	7f1b      	ldrb	r3, [r3, #28]
 80013ee:	461a      	mov	r2, r3
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	461a      	mov	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	461a      	mov	r2, r3
 8001402:	4917      	ldr	r1, [pc, #92]	; (8001460 <UpdateDisplay+0x23c>)
 8001404:	f008 fdba 	bl	8009f7c <siprintf>
	pos = print_str(buf);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fc03 	bl	8000c18 <print_str>
 8001412:	4603      	mov	r3, r0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	74fb      	strb	r3, [r7, #19]

	LCD_FillSpace(&pos, LCD_COLS);
 8001418:	f107 0313 	add.w	r3, r7, #19
 800141c:	2110      	movs	r1, #16
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe0c 	bl	800103c <LCD_FillSpace>

	LCD_RemoteGeneral->lowRateTimeMs = LCD_RemoteGeneral->currentTimeMs;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
	LCD_RemoteGeneral->updateDisplayFlag = DISPLAY_UPDATED;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8001434:	bf00      	nop
 8001436:	372c      	adds	r7, #44	; 0x2c
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	66666667 	.word	0x66666667
 8001440:	51eb851f 	.word	0x51eb851f
 8001444:	0800d7b8 	.word	0x0800d7b8
 8001448:	0800d7d0 	.word	0x0800d7d0
 800144c:	0800d7dc 	.word	0x0800d7dc
 8001450:	0800d7ec 	.word	0x0800d7ec
 8001454:	0800d7fc 	.word	0x0800d7fc
 8001458:	0800d80c 	.word	0x0800d80c
 800145c:	0800d820 	.word	0x0800d820
 8001460:	0800d824 	.word	0x0800d824

08001464 <InitADC>:

/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 *													 Low-Layer Functions
 */
void InitADC (InputsInfo_t *inputsInfo, __ADC_STRUCT)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	inputsInfo->adc = adc;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	605a      	str	r2, [r3, #4]
	DISABLE_ADC_CR1_EOCIE(inputsInfo->adc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0220 	bic.w	r2, r2, #32
 8001486:	605a      	str	r2, [r3, #4]

	inputsInfo->_curChannel = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	709a      	strb	r2, [r3, #2]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <ReadADC_Inputs>:


void ReadADC_Inputs (InputsInfo_t *inputsInfo)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	START_ADC(inputsInfo->adc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 f9e8 	bl	800287c <HAL_ADC_Start_IT>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <ADC_DRV_EndConvCallBack>:


void ADC_DRV_EndConvCallBack (InputsInfo_t *inputsInfo)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	inputsInfo->ADC_INx[inputsInfo->_curChannel++] = GET_ADC_CONV_DATA(inputsInfo->adc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	b2d0      	uxtb	r0, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	7090      	strb	r0, [r2, #2]
 80014d0:	461a      	mov	r2, r3
 80014d2:	b289      	uxth	r1, r1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if (inputsInfo->_curChannel >= ADC_CHANNELS_QUAN)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	789b      	ldrb	r3, [r3, #2]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <ADC_DRV_EndConvCallBack+0x3e>
	{
		inputsInfo->_curChannel = 0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	709a      	strb	r2, [r3, #2]
		STOP_ADC(inputsInfo->adc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fa9d 	bl	8002a2c <HAL_ADC_Stop_IT>
	}
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <ReadButtonState>:


ui8 ReadButtonState (__GPIO_STRUCT, ui16 pin)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
	return READ_PIN(gpio, pin);
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f002 f9a4 	bl	8003858 <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <EXTI_DRV_FallingCallBack>:


void EXTI_DRV_FallingCallBack (InputsInfo_t *inputsInfo, ui16 pin)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]
	if (pin == ENC_A_Pin)
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152c:	d109      	bne.n	8001542 <EXTI_DRV_FallingCallBack+0x28>
		inputsInfo->KE_CurrentValue++;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	3301      	adds	r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b25a      	sxtb	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	751a      	strb	r2, [r3, #20]

	else
		inputsInfo->KE_CurrentValue--;
}
 8001540:	e008      	b.n	8001554 <EXTI_DRV_FallingCallBack+0x3a>
		inputsInfo->KE_CurrentValue--;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b25a      	sxtb	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	751a      	strb	r2, [r3, #20]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <InitI2C>:


void InitI2C (InputsInfo_t *inputsInfo, __I2C_STRUCT)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	inputsInfo->i2c = i2c;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	611a      	str	r2, [r3, #16]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <GetEncoderAngles>:


void GetEncoderAngles (InputsInfo_t *inputsInfo)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
 8001582:	6078      	str	r0, [r7, #4]
	ui8 regAddr [2] = {ENCODER_ANGLE_REG_MB, ENCODER_ANGLE_REG_LB};
 8001584:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001588:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Master_Transmit(ENCODER_I2C, ENCODER_I2C_ADDRES, regAddr, 2, 10);
 800158a:	f107 020c 	add.w	r2, r7, #12
 800158e:	230a      	movs	r3, #10
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2302      	movs	r3, #2
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	4811      	ldr	r0, [pc, #68]	; (80015dc <GetEncoderAngles+0x60>)
 8001598:	f002 fa44 	bl	8003a24 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ENCODER_I2C, ENCODER_I2C_ADDRES, inputsInfo->I2C_Buff, 2, 10);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f103 0208 	add.w	r2, r3, #8
 80015a2:	230a      	movs	r3, #10
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2302      	movs	r3, #2
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <GetEncoderAngles+0x60>)
 80015ac:	f002 fb2e 	bl	8003c0c <HAL_I2C_Master_Receive>

	inputsInfo->FE_CurrentAngle = (((ui16)inputsInfo->I2C_Buff[0] << 6) & 0x3FC0) | ((ui16)inputsInfo->I2C_Buff[1] & 0x00C0);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	7a1b      	ldrb	r3, [r3, #8]
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 80015bc:	b21a      	sxth	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7a5b      	ldrb	r3, [r3, #9]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	815a      	strh	r2, [r3, #10]
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200003d4 	.word	0x200003d4

080015e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08c      	sub	sp, #48	; 0x30
 80015e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b68      	ldr	r3, [pc, #416]	; (8001798 <MX_GPIO_Init+0x1b8>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a67      	ldr	r2, [pc, #412]	; (8001798 <MX_GPIO_Init+0x1b8>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b62      	ldr	r3, [pc, #392]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a61      	ldr	r2, [pc, #388]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a5b      	ldr	r2, [pc, #364]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b59      	ldr	r3, [pc, #356]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163e:	4b56      	ldr	r3, [pc, #344]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a55      	ldr	r2, [pc, #340]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001656:	4b50      	ldr	r3, [pc, #320]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a4f      	ldr	r2, [pc, #316]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800165c:	f043 0310 	orr.w	r3, r3, #16
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a49      	ldr	r2, [pc, #292]	; (8001798 <MX_GPIO_Init+0x1b8>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <MX_GPIO_Init+0x1b8>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f242 0101 	movw	r1, #8193	; 0x2001
 800168c:	4843      	ldr	r0, [pc, #268]	; (800179c <MX_GPIO_Init+0x1bc>)
 800168e:	f002 f8fb 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RS_Pin|LCD_D7_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001698:	4841      	ldr	r0, [pc, #260]	; (80017a0 <MX_GPIO_Init+0x1c0>)
 800169a:	f002 f8f5 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D6_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80016a4:	483f      	ldr	r0, [pc, #252]	; (80017a4 <MX_GPIO_Init+0x1c4>)
 80016a6:	f002 f8ef 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|LCD_EN_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80016b0:	483d      	ldr	r0, [pc, #244]	; (80017a8 <MX_GPIO_Init+0x1c8>)
 80016b2:	f002 f8e9 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin|JOY_BTN_Pin;
 80016b6:	f242 0302 	movw	r3, #8194	; 0x2002
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016c0:	2302      	movs	r3, #2
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	4838      	ldr	r0, [pc, #224]	; (80017ac <MX_GPIO_Init+0x1cc>)
 80016cc:	f001 ff18 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|BT_EN_Pin;
 80016d0:	f242 0301 	movw	r3, #8193	; 0x2001
 80016d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	482c      	ldr	r0, [pc, #176]	; (800179c <MX_GPIO_Init+0x1bc>)
 80016ea:	f001 ff09 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_D7_Pin|LCD_D4_Pin;
 80016ee:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016f8:	2302      	movs	r3, #2
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fc:	2302      	movs	r3, #2
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4826      	ldr	r0, [pc, #152]	; (80017a0 <MX_GPIO_Init+0x1c0>)
 8001708:	f001 fefa 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 800170c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001712:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001718:	2301      	movs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	481f      	ldr	r0, [pc, #124]	; (80017a0 <MX_GPIO_Init+0x1c0>)
 8001724:	f001 feec 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin;
 8001728:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001732:	2302      	movs	r3, #2
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2302      	movs	r3, #2
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	4818      	ldr	r0, [pc, #96]	; (80017a4 <MX_GPIO_Init+0x1c4>)
 8001742:	f001 fedd 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_A_Pin;
 8001746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800174c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001752:	2301      	movs	r3, #1
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	4811      	ldr	r0, [pc, #68]	; (80017a4 <MX_GPIO_Init+0x1c4>)
 800175e:	f001 fecf 	bl	8003500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_EN_Pin;
 8001762:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800176c:	2302      	movs	r3, #2
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001770:	2302      	movs	r3, #2
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	480b      	ldr	r0, [pc, #44]	; (80017a8 <MX_GPIO_Init+0x1c8>)
 800177c:	f001 fec0 	bl	8003500 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2028      	movs	r0, #40	; 0x28
 8001786:	f001 fdf2 	bl	800336e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800178a:	2028      	movs	r0, #40	; 0x28
 800178c:	f001 fe0b 	bl	80033a6 <HAL_NVIC_EnableIRQ>

}
 8001790:	bf00      	nop
 8001792:	3730      	adds	r7, #48	; 0x30
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40023800 	.word	0x40023800
 800179c:	40020400 	.word	0x40020400
 80017a0:	40021400 	.word	0x40021400
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40020c00 	.word	0x40020c00
 80017ac:	40020800 	.word	0x40020800

080017b0 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_I2C4_Init+0x74>)
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <MX_I2C4_Init+0x78>)
 80017b8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00A01B56;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_I2C4_Init+0x74>)
 80017bc:	4a1b      	ldr	r2, [pc, #108]	; (800182c <MX_I2C4_Init+0x7c>)
 80017be:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_I2C4_Init+0x74>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_I2C4_Init+0x74>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_I2C4_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_I2C4_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_I2C4_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <MX_I2C4_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e4:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <MX_I2C4_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <MX_I2C4_Init+0x74>)
 80017ec:	f002 f88a 	bl	8003904 <HAL_I2C_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80017f6:	f000 fb63 	bl	8001ec0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fa:	2100      	movs	r1, #0
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <MX_I2C4_Init+0x74>)
 80017fe:	f002 fd73 	bl	80042e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001808:	f000 fb5a 	bl	8001ec0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_I2C4_Init+0x74>)
 8001810:	f002 fdb5 	bl	800437e <HAL_I2CEx_ConfigDigitalFilter>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800181a:	f000 fb51 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200003d4 	.word	0x200003d4
 8001828:	40006000 	.word	0x40006000
 800182c:	00a01b56 	.word	0x00a01b56

08001830 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ae      	sub	sp, #184	; 0xb8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2290      	movs	r2, #144	; 0x90
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f007 fc4b 	bl	80090ec <memset>
  if(i2cHandle->Instance==I2C4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_I2C_MspInit+0xb4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d13d      	bne.n	80018dc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001864:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fab5 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800187c:	f000 fb20 	bl	8001ec0 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_I2C_MspInit+0xb8>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <HAL_I2C_MspInit+0xb8>)
 8001886:	f043 0308 	orr.w	r3, r3, #8
 800188a:	6313      	str	r3, [r2, #48]	; 0x30
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_I2C_MspInit+0xb8>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001898:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800189c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a0:	2312      	movs	r3, #18
 80018a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ac:	2303      	movs	r3, #3
 80018ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80018b2:	2304      	movs	r3, #4
 80018b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018bc:	4619      	mov	r1, r3
 80018be:	480b      	ldr	r0, [pc, #44]	; (80018ec <HAL_I2C_MspInit+0xbc>)
 80018c0:	f001 fe1e 	bl	8003500 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_I2C_MspInit+0xb8>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_I2C_MspInit+0xb8>)
 80018ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ce:	6413      	str	r3, [r2, #64]	; 0x40
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_I2C_MspInit+0xb8>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80018dc:	bf00      	nop
 80018de:	37b8      	adds	r7, #184	; 0xb8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40006000 	.word	0x40006000
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020c00 	.word	0x40020c00

080018f0 <AverageInit>:
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	460b      	mov	r3, r1
 80018fa:	70fb      	strb	r3, [r7, #3]
	averageValue->_factor = factor;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	719a      	strb	r2, [r3, #6]
	averageValue->avgBuff = 0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = 0;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	809a      	strh	r2, [r3, #4]
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	0000      	movs	r0, r0
 800191c:	0000      	movs	r0, r0
	...

08001920 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001926:	f000 fee4 	bl	80026f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800192a:	f000 fa5b 	bl	8001de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800192e:	f7ff fe57 	bl	80015e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001932:	f7ff fa7f 	bl	8000e34 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001936:	f000 fd1f 	bl	8002378 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800193a:	f000 fd8f 	bl	800245c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800193e:	f000 fdbd 	bl	80024bc <MX_USART2_UART_Init>
  MX_I2C4_Init();
 8001942:	f7ff ff35 	bl	80017b0 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  	begin(16, 2);  // LCD Init
 8001946:	2102      	movs	r1, #2
 8001948:	2010      	movs	r0, #16
 800194a:	f7ff f847 	bl	80009dc <begin>
  	WRITE_PIN(LCD_BL_GPIO_Port, LCD_BL_Pin, 1);  // LCD Backlight ON
 800194e:	2201      	movs	r2, #1
 8001950:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001954:	48b0      	ldr	r0, [pc, #704]	; (8001c18 <main+0x2f8>)
 8001956:	f001 ff97 	bl	8003888 <HAL_GPIO_WritePin>

  	InitADC(&InputsInfo, JOYSTICK_ADC);
 800195a:	49b0      	ldr	r1, [pc, #704]	; (8001c1c <main+0x2fc>)
 800195c:	48b0      	ldr	r0, [pc, #704]	; (8001c20 <main+0x300>)
 800195e:	f7ff fd81 	bl	8001464 <InitADC>
  	InitI2C(&InputsInfo, ENCODER_I2C);
 8001962:	49b0      	ldr	r1, [pc, #704]	; (8001c24 <main+0x304>)
 8001964:	48ae      	ldr	r0, [pc, #696]	; (8001c20 <main+0x300>)
 8001966:	f7ff fdfb 	bl	8001560 <InitI2C>


  	/*  - - - - - - - - SBGC Hardware-Software Init - - - - - - - - - */

  	/* Driver Init */
  	SBGC_1.Drv = malloc(sizeof(Driver_t));
 800196a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800196e:	f007 fba7 	bl	80090c0 <malloc>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4bac      	ldr	r3, [pc, #688]	; (8001c28 <main+0x308>)
 8001978:	601a      	str	r2, [r3, #0]
  	DriverInit(SBGC_1.Drv, SBGC_SERIAL_PORT, INTERNAL_MAIN_TIMER);
 800197a:	4bab      	ldr	r3, [pc, #684]	; (8001c28 <main+0x308>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4aab      	ldr	r2, [pc, #684]	; (8001c2c <main+0x30c>)
 8001980:	49ab      	ldr	r1, [pc, #684]	; (8001c30 <main+0x310>)
 8001982:	4618      	mov	r0, r3
 8001984:	f005 fc1e 	bl	80071c4 <DriverInit>

  	/* SimpleBGC32 Init */
  	SBGC32_DefaultInit(&SBGC_1, UartTransmitData, UartReceiveByte, GetAvailableBytes,
 8001988:	2324      	movs	r3, #36	; 0x24
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	4ba9      	ldr	r3, [pc, #676]	; (8001c34 <main+0x314>)
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	4ba9      	ldr	r3, [pc, #676]	; (8001c38 <main+0x318>)
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4ba9      	ldr	r3, [pc, #676]	; (8001c3c <main+0x31c>)
 8001996:	4aaa      	ldr	r2, [pc, #680]	; (8001c40 <main+0x320>)
 8001998:	49aa      	ldr	r1, [pc, #680]	; (8001c44 <main+0x324>)
 800199a:	48a3      	ldr	r0, [pc, #652]	; (8001c28 <main+0x308>)
 800199c:	f006 fd2e 	bl	80083fc <SBGC32_DefaultInit>
		HAL_Delay(BLUETOOTH_CONNECT_WAITING * 1000);

	#endif


  	Control.controlMode[ROLL] = CtrlM_MODE_ANGLE;
 80019a0:	4ba9      	ldr	r3, [pc, #676]	; (8001c48 <main+0x328>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
  	Control.controlMode[PITCH] = CtrlM_MODE_ANGLE;
 80019a6:	4ba8      	ldr	r3, [pc, #672]	; (8001c48 <main+0x328>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	705a      	strb	r2, [r3, #1]
  	Control.controlMode[YAW] = CtrlM_MODE_ANGLE;
 80019ac:	4ba6      	ldr	r3, [pc, #664]	; (8001c48 <main+0x328>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	709a      	strb	r2, [r3, #2]

	Control.AxisC[ROLL].angle = 0;
 80019b2:	4ba5      	ldr	r3, [pc, #660]	; (8001c48 <main+0x328>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	715a      	strb	r2, [r3, #5]
 80019b8:	2200      	movs	r2, #0
 80019ba:	719a      	strb	r2, [r3, #6]
	Control.AxisC[PITCH].angle = 0;
 80019bc:	4ba2      	ldr	r3, [pc, #648]	; (8001c48 <main+0x328>)
 80019be:	2200      	movs	r2, #0
 80019c0:	725a      	strb	r2, [r3, #9]
 80019c2:	2200      	movs	r2, #0
 80019c4:	729a      	strb	r2, [r3, #10]

	Control.AxisC[ROLL].speed = 0;
 80019c6:	4ba0      	ldr	r3, [pc, #640]	; (8001c48 <main+0x328>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	70da      	strb	r2, [r3, #3]
 80019cc:	2200      	movs	r2, #0
 80019ce:	711a      	strb	r2, [r3, #4]
	Control.AxisC[PITCH].speed = 0;
 80019d0:	4b9d      	ldr	r3, [pc, #628]	; (8001c48 <main+0x328>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	71da      	strb	r2, [r3, #7]
 80019d6:	2200      	movs	r2, #0
 80019d8:	721a      	strb	r2, [r3, #8]
	Control.AxisC[YAW].speed = 0;
 80019da:	4b9b      	ldr	r3, [pc, #620]	; (8001c48 <main+0x328>)
 80019dc:	2200      	movs	r2, #0
 80019de:	72da      	strb	r2, [r3, #11]
 80019e0:	2200      	movs	r2, #0
 80019e2:	731a      	strb	r2, [r3, #12]

	#ifdef FLYWHEEL_CONTROL

		GetEncoderAngles(&InputsInfo);
 80019e4:	488e      	ldr	r0, [pc, #568]	; (8001c20 <main+0x300>)
 80019e6:	f7ff fdc9 	bl	800157c <GetEncoderAngles>
		InputsInfo.FE_OldAngle = InputsInfo.FE_CurrentAngle;
 80019ea:	4b8d      	ldr	r3, [pc, #564]	; (8001c20 <main+0x300>)
 80019ec:	895a      	ldrh	r2, [r3, #10]
 80019ee:	4b8c      	ldr	r3, [pc, #560]	; (8001c20 <main+0x300>)
 80019f0:	819a      	strh	r2, [r3, #12]

	#endif

	ControlConfig.flags = RTCCF_CONTROL_CONFIG_FLAG_NO_CONFIRM;
 80019f2:	4b96      	ldr	r3, [pc, #600]	; (8001c4c <main+0x32c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	775a      	strb	r2, [r3, #29]
 80019fc:	2200      	movs	r2, #0
 80019fe:	779a      	strb	r2, [r3, #30]

	AverageInit(&LCD_RemoteGeneral.TargetErrorAverage, TARGET_LOW_PASS_FACTOR);
 8001a00:	2106      	movs	r1, #6
 8001a02:	4893      	ldr	r0, [pc, #588]	; (8001c50 <main+0x330>)
 8001a04:	f7ff ff74 	bl	80018f0 <AverageInit>
	AverageInit(&LCD_RemoteGeneral.JoystickAverage[0], JOY_LOW_PASS_FACTOR);
 8001a08:	210b      	movs	r1, #11
 8001a0a:	4892      	ldr	r0, [pc, #584]	; (8001c54 <main+0x334>)
 8001a0c:	f7ff ff70 	bl	80018f0 <AverageInit>
	AverageInit(&LCD_RemoteGeneral.JoystickAverage[1], JOY_LOW_PASS_FACTOR);
 8001a10:	210b      	movs	r1, #11
 8001a12:	4891      	ldr	r0, [pc, #580]	; (8001c58 <main+0x338>)
 8001a14:	f7ff ff6c 	bl	80018f0 <AverageInit>

	LCD_RemoteGeneral.adjVarQuan = countof(AdjVarsGeneral);
 8001a18:	4b8e      	ldr	r3, [pc, #568]	; (8001c54 <main+0x334>)
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	775a      	strb	r2, [r3, #29]
	LCD_RemoteGeneral.currentAdjVarIndex = 0;
 8001a1e:	4b8d      	ldr	r3, [pc, #564]	; (8001c54 <main+0x334>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	771a      	strb	r2, [r3, #28]

	LCD_RemoteGeneral.currentTimeMs = 0;
 8001a24:	4b8b      	ldr	r3, [pc, #556]	; (8001c54 <main+0x334>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
	LCD_RemoteGeneral.rtReqCmdTimeMs = 0;
 8001a2a:	4b8a      	ldr	r3, [pc, #552]	; (8001c54 <main+0x334>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_RemoteGeneral.connectFlag = 0;
 8001a30:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <main+0x334>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LCD_RemoteGeneral.currentPage = 0;
 8001a38:	4b86      	ldr	r3, [pc, #536]	; (8001c54 <main+0x334>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LCD_RemoteGeneral.updateDisplayFlagEnable = DISPLAY_UPDATE_ENABLED;
 8001a40:	4b84      	ldr	r3, [pc, #528]	; (8001c54 <main+0x334>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	LCD_RemoteGeneral.motorsCurrentState = MOTORS_ON;
 8001a48:	4b82      	ldr	r3, [pc, #520]	; (8001c54 <main+0x334>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


	/*  - - - - - - - - - Initializing commands - - - - - - - - - - - */

	SBGC32_ControlConfig(&SBGC_1, &ControlConfig, &Confirm);
 8001a50:	4a82      	ldr	r2, [pc, #520]	; (8001c5c <main+0x33c>)
 8001a52:	497e      	ldr	r1, [pc, #504]	; (8001c4c <main+0x32c>)
 8001a54:	4874      	ldr	r0, [pc, #464]	; (8001c28 <main+0x308>)
 8001a56:	f007 f9df 	bl	8008e18 <SBGC32_ControlConfig>

	SBGC32_GetAnglesExt(&SBGC_1, &GetAnglesExt);
 8001a5a:	4981      	ldr	r1, [pc, #516]	; (8001c60 <main+0x340>)
 8001a5c:	4872      	ldr	r0, [pc, #456]	; (8001c28 <main+0x308>)
 8001a5e:	f007 fa75 	bl	8008f4c <SBGC32_GetAnglesExt>
	Control.AxisC[YAW].angle = (i16)GetAnglesExt.AxisGAE[AXIS_Z].frameCamAngle;
 8001a62:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <main+0x340>)
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b77      	ldr	r3, [pc, #476]	; (8001c48 <main+0x328>)
 8001a6a:	f8a3 200d 	strh.w	r2, [r3, #13]
	  	/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ */
		/*                     Start Worker Cycle                     */
		/* __________________________________________________________ */

	  	/* Getting current time */
	  	LCD_RemoteGeneral.currentTimeMs = SBGC_1.GetTimeFunc(SBGC_1.Drv);
 8001a6e:	4b6e      	ldr	r3, [pc, #440]	; (8001c28 <main+0x308>)
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	4a6d      	ldr	r2, [pc, #436]	; (8001c28 <main+0x308>)
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	4610      	mov	r0, r2
 8001a78:	4798      	blx	r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a75      	ldr	r2, [pc, #468]	; (8001c54 <main+0x334>)
 8001a7e:	6213      	str	r3, [r2, #32]

	  	/*  - - - - - - - - - Controllers Handler - - - - - - - - - - */

	  	if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.controlPause > MOTORS_ON_CONTROL_PAUSE) &&
 8001a80:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <main+0x334>)
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4b73      	ldr	r3, [pc, #460]	; (8001c54 <main+0x334>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d948      	bls.n	8001b24 <main+0x204>
	  		(LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON))
 8001a92:	4b70      	ldr	r3, [pc, #448]	; (8001c54 <main+0x334>)
 8001a94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
	  	if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.controlPause > MOTORS_ON_CONTROL_PAUSE) &&
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d143      	bne.n	8001b24 <main+0x204>
	  	{
			#ifdef FLYWHEEL_CONTROL

				GetEncoderAngles(&InputsInfo);
 8001a9c:	4860      	ldr	r0, [pc, #384]	; (8001c20 <main+0x300>)
 8001a9e:	f7ff fd6d 	bl	800157c <GetEncoderAngles>

				InputsInfo.deltaFW = InputsInfo.FE_CurrentAngle - InputsInfo.FE_OldAngle;
 8001aa2:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <main+0x300>)
 8001aa4:	895a      	ldrh	r2, [r3, #10]
 8001aa6:	4b5e      	ldr	r3, [pc, #376]	; (8001c20 <main+0x300>)
 8001aa8:	899b      	ldrh	r3, [r3, #12]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b21a      	sxth	r2, r3
 8001ab0:	4b5b      	ldr	r3, [pc, #364]	; (8001c20 <main+0x300>)
 8001ab2:	81da      	strh	r2, [r3, #14]

				if (abs(InputsInfo.deltaFW) > FLYWHEEL_ERROR)
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <main+0x300>)
 8001ab6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bfb8      	it	lt
 8001abe:	425b      	neglt	r3, r3
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d92e      	bls.n	8001b24 <main+0x204>
				{
					if (abs(InputsInfo.deltaFW) < 2048)
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <main+0x300>)
 8001ac8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bfb8      	it	lt
 8001ad0:	425b      	neglt	r3, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ad8:	d21c      	bcs.n	8001b14 <main+0x1f4>
						Control.AxisC[YAW].angle += InputsInfo.deltaFW * FLYWHEEL_SENSITIVITY;
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <main+0x328>)
 8001adc:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 8001ae0:	b21b      	sxth	r3, r3
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001aea:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <main+0x300>)
 8001aec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001af8:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001c10 <main+0x2f0>
 8001afc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b04:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b08:	ee17 3a90 	vmov	r3, s15
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <main+0x328>)
 8001b10:	f8a3 200d 	strh.w	r2, [r3, #13]

					InputsInfo.FE_OldAngle = InputsInfo.FE_CurrentAngle;
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <main+0x300>)
 8001b16:	895a      	ldrh	r2, [r3, #10]
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <main+0x300>)
 8001b1a:	819a      	strh	r2, [r3, #12]
					SBGC32_Control(&SBGC_1, &Control);
 8001b1c:	494a      	ldr	r1, [pc, #296]	; (8001c48 <main+0x328>)
 8001b1e:	4842      	ldr	r0, [pc, #264]	; (8001c28 <main+0x308>)
 8001b20:	f007 f946 	bl	8008db0 <SBGC32_Control>
			#endif
	  	}

	  	/* - - - - - - - - - - Knob Encoder Handler - - - - - - - - - */

		if (InputsInfo.KE_CurrentValue != 0)
 8001b24:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <main+0x300>)
 8001b26:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d02e      	beq.n	8001b8c <main+0x26c>
		{
			EditAdjVarValue(&AdjVarsGeneral[LCD_RemoteGeneral.currentAdjVarIndex],
 8001b2e:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <main+0x334>)
 8001b30:	7f1b      	ldrb	r3, [r3, #28]
 8001b32:	461a      	mov	r2, r3
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	011b      	lsls	r3, r3, #4
 8001b3c:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <main+0x344>)
 8001b3e:	441a      	add	r2, r3
						   (AdjVarsGeneral[LCD_RemoteGeneral.currentAdjVarIndex].value + (InputsInfo.KE_CurrentValue * ADJ_VAR_STEP)));
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <main+0x334>)
 8001b42:	7f1b      	ldrb	r3, [r3, #28]
 8001b44:	4618      	mov	r0, r3
 8001b46:	4947      	ldr	r1, [pc, #284]	; (8001c64 <main+0x344>)
 8001b48:	4603      	mov	r3, r0
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4403      	add	r3, r0
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	440b      	add	r3, r1
 8001b52:	3328      	adds	r3, #40	; 0x28
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b5e:	4b30      	ldr	r3, [pc, #192]	; (8001c20 <main+0x300>)
 8001b60:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b6c:	ee36 7b07 	vadd.f64	d7, d6, d7
			EditAdjVarValue(&AdjVarsGeneral[LCD_RemoteGeneral.currentAdjVarIndex],
 8001b70:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b74:	ee17 1a90 	vmov	r1, s15
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f005 fd25 	bl	80075c8 <EditAdjVarValue>

			InputsInfo.KE_CurrentValue = 0;
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <main+0x300>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	751a      	strb	r2, [r3, #20]

			LCD_RemoteGeneral.updateDisplayFlag = DISPLAY_NOT_UPDATED;
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <main+0x334>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f


	  	/* - - - - - - - - - - - Menu Handler - - - - - - - - - - - - */

	  	/* Process navigation */
	  	if (DebounceNavigationButton(&LCD_RemoteGeneral, ReadNavigationButtonState(&InputsInfo)))
 8001b8c:	4824      	ldr	r0, [pc, #144]	; (8001c20 <main+0x300>)
 8001b8e:	f7ff fb0f 	bl	80011b0 <ReadNavigationButtonState>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4619      	mov	r1, r3
 8001b96:	482f      	ldr	r0, [pc, #188]	; (8001c54 <main+0x334>)
 8001b98:	f7ff fada 	bl	8001150 <DebounceNavigationButton>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a5 	beq.w	8001cee <main+0x3ce>
	  	{
	  		switch (LCD_RemoteGeneral.NavButton.triggerState)
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <main+0x334>)
 8001ba6:	7edb      	ldrb	r3, [r3, #27]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	f200 8098 	bhi.w	8001ce0 <main+0x3c0>
 8001bb0:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <main+0x298>)
 8001bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb6:	bf00      	nop
 8001bb8:	08001bd1 	.word	0x08001bd1
 8001bbc:	08001c69 	.word	0x08001c69
 8001bc0:	08001c7f 	.word	0x08001c7f
 8001bc4:	08001bed 	.word	0x08001bed
 8001bc8:	08001c95 	.word	0x08001c95
 8001bcc:	08001cd1 	.word	0x08001cd1
	  		{
	  			case NAV_BTN_RIGHT :
	  				LCD_RemoteGeneral.currentAdjVarIndex =
	  						(LCD_RemoteGeneral.currentAdjVarIndex + 1) % LCD_RemoteGeneral.adjVarQuan;
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <main+0x334>)
 8001bd2:	7f1b      	ldrb	r3, [r3, #28]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <main+0x334>)
 8001bd8:	7f52      	ldrb	r2, [r2, #29]
 8001bda:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bde:	fb01 f202 	mul.w	r2, r1, r2
 8001be2:	1a9b      	subs	r3, r3, r2
	  				LCD_RemoteGeneral.currentAdjVarIndex =
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <main+0x334>)
 8001be8:	771a      	strb	r2, [r3, #28]
	  				break;
 8001bea:	e07c      	b.n	8001ce6 <main+0x3c6>

	  			case NAV_BTN_LEFT :  /* Select prev adj. var */
	  				LCD_RemoteGeneral.currentAdjVarIndex =
	  						(LCD_RemoteGeneral.currentAdjVarIndex + (LCD_RemoteGeneral.adjVarQuan - 1)) % LCD_RemoteGeneral.adjVarQuan;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <main+0x334>)
 8001bee:	7f1b      	ldrb	r3, [r3, #28]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <main+0x334>)
 8001bf4:	7f5b      	ldrb	r3, [r3, #29]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a16      	ldr	r2, [pc, #88]	; (8001c54 <main+0x334>)
 8001bfc:	7f52      	ldrb	r2, [r2, #29]
 8001bfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c02:	fb01 f202 	mul.w	r2, r1, r2
 8001c06:	1a9b      	subs	r3, r3, r2
	  				LCD_RemoteGeneral.currentAdjVarIndex =
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <main+0x334>)
 8001c0c:	771a      	strb	r2, [r3, #28]
	  				break;
 8001c0e:	e06a      	b.n	8001ce6 <main+0x3c6>
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	3fa99999 	.word	0x3fa99999
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	2000038c 	.word	0x2000038c
 8001c20:	20000594 	.word	0x20000594
 8001c24:	200003d4 	.word	0x200003d4
 8001c28:	20000420 	.word	0x20000420
 8001c2c:	200005b0 	.word	0x200005b0
 8001c30:	200005fc 	.word	0x200005fc
 8001c34:	0800724f 	.word	0x0800724f
 8001c38:	080075a5 	.word	0x080075a5
 8001c3c:	080073fb 	.word	0x080073fb
 8001c40:	0800745b 	.word	0x0800745b
 8001c44:	0800728d 	.word	0x0800728d
 8001c48:	20000454 	.word	0x20000454
 8001c4c:	20000464 	.word	0x20000464
 8001c50:	2000055c 	.word	0x2000055c
 8001c54:	2000054c 	.word	0x2000054c
 8001c58:	20000554 	.word	0x20000554
 8001c5c:	20000544 	.word	0x20000544
 8001c60:	2000050c 	.word	0x2000050c
 8001c64:	20000000 	.word	0x20000000

	  			case NAV_BTN_UP :  /* Select next page */
	  				LCD_RemoteGeneral.currentPage++;
 8001c68:	4b57      	ldr	r3, [pc, #348]	; (8001dc8 <main+0x4a8>)
 8001c6a:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3301      	adds	r3, #1
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	b25a      	sxtb	r2, r3
 8001c76:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <main+0x4a8>)
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	  				break;
 8001c7c:	e033      	b.n	8001ce6 <main+0x3c6>

	  			case NAV_BTN_DOWN :  /* Select prev page */
	  				LCD_RemoteGeneral.currentPage--;
 8001c7e:	4b52      	ldr	r3, [pc, #328]	; (8001dc8 <main+0x4a8>)
 8001c80:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	b25a      	sxtb	r2, r3
 8001c8c:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <main+0x4a8>)
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	  				break;
 8001c92:	e028      	b.n	8001ce6 <main+0x3c6>

	  			case NAV_BTN_SELECT:  /* Turn motors ON/OFF */
	  				if (SBGC32_ExecuteMenu(&SBGC_1, MENU_CMD_MOTOR_TOGGLE, &Confirm) == TX_RX_OK)
 8001c94:	4a4d      	ldr	r2, [pc, #308]	; (8001dcc <main+0x4ac>)
 8001c96:	210a      	movs	r1, #10
 8001c98:	484d      	ldr	r0, [pc, #308]	; (8001dd0 <main+0x4b0>)
 8001c9a:	f007 f99b 	bl	8008fd4 <SBGC32_ExecuteMenu>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11f      	bne.n	8001ce4 <main+0x3c4>
	  				{
	  					LCD_RemoteGeneral.motorsCurrentState = (LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON) ? MOTORS_OFF : MOTORS_ON;
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <main+0x4a8>)
 8001ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	bf0c      	ite	eq
 8001cae:	2301      	moveq	r3, #1
 8001cb0:	2300      	movne	r3, #0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b44      	ldr	r3, [pc, #272]	; (8001dc8 <main+0x4a8>)
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  					if (LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON)
 8001cbc:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <main+0x4a8>)
 8001cbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10e      	bne.n	8001ce4 <main+0x3c4>
	  						LCD_RemoteGeneral.controlPause = LCD_RemoteGeneral.currentTimeMs;
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <main+0x4a8>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <main+0x4a8>)
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
	  				}
	  				break;
 8001cce:	e009      	b.n	8001ce4 <main+0x3c4>

	  			case NAV_BTN_ENCODER_SELECT:
	  				SBGC32_SaveAdjVarsToEEPROM(&SBGC_1, AdjVarsGeneral, LCD_RemoteGeneral.adjVarQuan, &Confirm);
 8001cd0:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <main+0x4a8>)
 8001cd2:	7f5a      	ldrb	r2, [r3, #29]
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <main+0x4ac>)
 8001cd6:	493f      	ldr	r1, [pc, #252]	; (8001dd4 <main+0x4b4>)
 8001cd8:	483d      	ldr	r0, [pc, #244]	; (8001dd0 <main+0x4b0>)
 8001cda:	f005 fe95 	bl	8007a08 <SBGC32_SaveAdjVarsToEEPROM>
	  				break;
 8001cde:	e002      	b.n	8001ce6 <main+0x3c6>

	  			default:
	  				break;
 8001ce0:	bf00      	nop
 8001ce2:	e000      	b.n	8001ce6 <main+0x3c6>
	  				break;
 8001ce4:	bf00      	nop
	  		}

	  		/* Update display immediately to reduce lag */
	  		LCD_RemoteGeneral.updateDisplayFlag = DISPLAY_NOT_UPDATED;
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <main+0x4a8>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	  	}

	  	/*  - - - - - - - - - - Buttons Handling - - - - - - - - - - */
	  	/* Menu Button */
		if (ReadButtonState(MENU_BTN_PORT, MENU_BTN_PIN))
 8001cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf2:	4839      	ldr	r0, [pc, #228]	; (8001dd8 <main+0x4b8>)
 8001cf4:	f7ff fc01 	bl	80014fa <ReadButtonState>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d01e      	beq.n	8001d3c <main+0x41c>
		{
			if (InputsInfo.menuBtn == BTN_RELEASED)
 8001cfe:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <main+0x4bc>)
 8001d00:	7d5b      	ldrb	r3, [r3, #21]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <main+0x3f4>
			{
				LCD_RemoteGeneral.btnTimeMs = LCD_RemoteGeneral.currentTimeMs;
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <main+0x4a8>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <main+0x4a8>)
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
				InputsInfo.menuBtn = BTN_PRESSED;
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <main+0x4bc>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	755a      	strb	r2, [r3, #21]
			}

			if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d14:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <main+0x4a8>)
 8001d16:	6a1a      	ldr	r2, [r3, #32]
 8001d18:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <main+0x4a8>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d91a      	bls.n	8001d58 <main+0x438>
				(InputsInfo.menuBtn != BTN_POST_PRESSED))
 8001d22:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <main+0x4bc>)
 8001d24:	7d5b      	ldrb	r3, [r3, #21]
			if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d016      	beq.n	8001d58 <main+0x438>
			{
				SBGC32_ExecuteMenu(&SBGC_1, MENU_BUTTON_IS_PRESSED, &Confirm);
 8001d2a:	4a28      	ldr	r2, [pc, #160]	; (8001dcc <main+0x4ac>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	4828      	ldr	r0, [pc, #160]	; (8001dd0 <main+0x4b0>)
 8001d30:	f007 f950 	bl	8008fd4 <SBGC32_ExecuteMenu>
				InputsInfo.menuBtn = BTN_POST_PRESSED;
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <main+0x4bc>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	755a      	strb	r2, [r3, #21]
 8001d3a:	e00d      	b.n	8001d58 <main+0x438>
			}
		}

		else if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <main+0x4a8>)
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <main+0x4a8>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d906      	bls.n	8001d58 <main+0x438>
				 (InputsInfo.menuBtn != BTN_RELEASED))
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <main+0x4bc>)
 8001d4c:	7d5b      	ldrb	r3, [r3, #21]
		else if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <main+0x438>
			InputsInfo.menuBtn = BTN_RELEASED;
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <main+0x4bc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	755a      	strb	r2, [r3, #21]


	  	/* - - - - - - - - - AdjVarsGeneral Handler - - - - - - - - - */

	  	/* Send the value of updated adjvars to the board */
	  	SBGC32_SetAdjVarValues(&SBGC_1, AdjVarsGeneral, LCD_RemoteGeneral.adjVarQuan, &Confirm);
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <main+0x4a8>)
 8001d5a:	7f5a      	ldrb	r2, [r3, #29]
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <main+0x4ac>)
 8001d5e:	491d      	ldr	r1, [pc, #116]	; (8001dd4 <main+0x4b4>)
 8001d60:	481b      	ldr	r0, [pc, #108]	; (8001dd0 <main+0x4b0>)
 8001d62:	f005 fc61 	bl	8007628 <SBGC32_SetAdjVarValues>


		/* - - - - - - - - - - - SBGC Handler - - - - - - - - - - - - */

		ProcessHandler(&SBGC_1, &LCD_RemoteGeneral, &RealTimeData, AdjVarsGeneral);
 8001d66:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <main+0x4b4>)
 8001d68:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <main+0x4c0>)
 8001d6a:	4917      	ldr	r1, [pc, #92]	; (8001dc8 <main+0x4a8>)
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <main+0x4b0>)
 8001d6e:	f7ff f97f 	bl	8001070 <ProcessHandler>

		/* Request realtime data with the fixed rate */
		if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.rtReqCmdTimeMs) > REALTIME_DATA_REQUEST_INTERAL_MS)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <main+0x4a8>)
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <main+0x4a8>)
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d80:	d907      	bls.n	8001d92 <main+0x472>
		{
			SBGC32_ReadRealTimeData4(&SBGC_1, &RealTimeData);
 8001d82:	4917      	ldr	r1, [pc, #92]	; (8001de0 <main+0x4c0>)
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <main+0x4b0>)
 8001d86:	f007 f89d 	bl	8008ec4 <SBGC32_ReadRealTimeData4>
			LCD_RemoteGeneral.rtReqCmdTimeMs = LCD_RemoteGeneral.currentTimeMs;
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <main+0x4a8>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <main+0x4a8>)
 8001d90:	6293      	str	r3, [r2, #40]	; 0x28


	  	/* - - - - - - - - - - Display Updating - - - - - - - - - - - */

	  	/* Low-rate tasks */
	  	if (((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.lowRateTimeMs) > LOW_RATE_TASK_INTERVAL ||
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <main+0x4a8>)
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <main+0x4a8>)
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001da0:	d805      	bhi.n	8001dae <main+0x48e>
	  		  LCD_RemoteGeneral.updateDisplayFlag) && !LCD_RemoteGeneral.updateDisplayFlagEnable)
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <main+0x4a8>)
 8001da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
	  	if (((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.lowRateTimeMs) > LOW_RATE_TASK_INTERVAL ||
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f43f ae60 	beq.w	8001a6e <main+0x14e>
	  		  LCD_RemoteGeneral.updateDisplayFlag) && !LCD_RemoteGeneral.updateDisplayFlagEnable)
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <main+0x4a8>)
 8001db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f47f ae5a 	bne.w	8001a6e <main+0x14e>
	  		UpdateDisplay(&SBGC_1, &LCD_RemoteGeneral, &RealTimeData, AdjVarsGeneral);  // Update LCD to display animation and state
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <main+0x4b4>)
 8001dbc:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <main+0x4c0>)
 8001dbe:	4902      	ldr	r1, [pc, #8]	; (8001dc8 <main+0x4a8>)
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <main+0x4b0>)
 8001dc2:	f7ff fa2f 	bl	8001224 <UpdateDisplay>
	  	LCD_RemoteGeneral.currentTimeMs = SBGC_1.GetTimeFunc(SBGC_1.Drv);
 8001dc6:	e652      	b.n	8001a6e <main+0x14e>
 8001dc8:	2000054c 	.word	0x2000054c
 8001dcc:	20000544 	.word	0x20000544
 8001dd0:	20000420 	.word	0x20000420
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	20000594 	.word	0x20000594
 8001de0:	20000490 	.word	0x20000490

08001de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b094      	sub	sp, #80	; 0x50
 8001de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	2234      	movs	r2, #52	; 0x34
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f007 f97a 	bl	80090ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df8:	f107 0308 	add.w	r3, r7, #8
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e08:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <SystemClock_Config+0xd4>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <SystemClock_Config+0xd4>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <SystemClock_Config+0xd4>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <SystemClock_Config+0xd8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <SystemClock_Config+0xd8>)
 8001e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <SystemClock_Config+0xd8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e40:	2310      	movs	r3, #16
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e44:	2302      	movs	r3, #2
 8001e46:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e50:	23d8      	movs	r3, #216	; 0xd8
 8001e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 fb27 	bl	80044b8 <HAL_RCC_OscConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e70:	f000 f826 	bl	8001ec0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e74:	f002 fad0 	bl	8004418 <HAL_PWREx_EnableOverDrive>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e7e:	f000 f81f 	bl	8001ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e82:	230f      	movs	r3, #15
 8001e84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e86:	2302      	movs	r3, #2
 8001e88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e98:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2107      	movs	r1, #7
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f002 fdb7 	bl	8004a14 <HAL_RCC_ClockConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001eac:	f000 f808 	bl	8001ec0 <Error_Handler>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3750      	adds	r7, #80	; 0x50
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40007000 	.word	0x40007000

08001ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <Error_Handler+0x8>
	...

08001ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_MspInit+0x44>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_MspInit+0x44>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_MspInit+0x44>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a08      	ldr	r2, [pc, #32]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_MspInit+0x44>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <NMI_Handler+0x4>

08001f1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f1e:	e7fe      	b.n	8001f1e <HardFault_Handler+0x4>

08001f20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <MemManage_Handler+0x4>

08001f26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <BusFault_Handler+0x4>

08001f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <UsageFault_Handler+0x4>

08001f32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f60:	f000 fc04 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	/*  - - - - - ADC1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <ADC_IRQHandler+0x30>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d109      	bne.n	8001f8e <ADC_IRQHandler+0x26>
		GET_FLAG_ADC_CR1_EOCIE(JOYSTICK_ADC))
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <ADC_IRQHandler+0x30>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d102      	bne.n	8001f8e <ADC_IRQHandler+0x26>
		ADC_DRV_EndConvCallBack(&InputsInfo);
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <ADC_IRQHandler+0x34>)
 8001f8a:	f7ff fa93 	bl	80014b4 <ADC_DRV_EndConvCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <ADC_IRQHandler+0x30>)
 8001f90:	f000 fd8a 	bl	8002aa8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	2000038c 	.word	0x2000038c
 8001f9c:	20000594 	.word	0x20000594

08001fa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/*  - - - - - TIM2 Interrupt Flags Check - - - - - */

	if (GET_FLAG_TIM_SR_UIF(INTERNAL_MAIN_TIMER) &&
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <TIM2_IRQHandler+0x34>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10b      	bne.n	8001fca <TIM2_IRQHandler+0x2a>
		GET_FLAG_TIM_DIER_UIE(INTERNAL_MAIN_TIMER))
 8001fb2:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <TIM2_IRQHandler+0x34>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
	if (GET_FLAG_TIM_SR_UIF(INTERNAL_MAIN_TIMER) &&
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d104      	bne.n	8001fca <TIM2_IRQHandler+0x2a>
		TimerDRV_CallBack(SBGC_1.Drv);
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <TIM2_IRQHandler+0x38>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f005 f950 	bl	800726a <TimerDRV_CallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fca:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM2_IRQHandler+0x34>)
 8001fcc:	f003 fc00 	bl	80057d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	200005b0 	.word	0x200005b0
 8001fd8:	20000420 	.word	0x20000420

08001fdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/* - - - - - UART1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <USART1_IRQHandler+0x70>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d10b      	bne.n	8002006 <USART1_IRQHandler+0x2a>
		GET_FLAG_UART_CR1_TCIE(SBGC_SERIAL_PORT))
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <USART1_IRQHandler+0x70>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <USART1_IRQHandler+0x2a>
		UART_DRV_TxCallBack(SBGC_1.Drv);
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <USART1_IRQHandler+0x74>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f005 f9a5 	bl	8007350 <UART_DRV_TxCallBack>

	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 8002006:	4b11      	ldr	r3, [pc, #68]	; (800204c <USART1_IRQHandler+0x70>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b20      	cmp	r3, #32
 8002012:	d10b      	bne.n	800202c <USART1_IRQHandler+0x50>
		GET_FLAG_UART_CR1_RXNEIE(SBGC_SERIAL_PORT))
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <USART1_IRQHandler+0x70>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <USART1_IRQHandler+0x50>
		UART_DRV_RxCallBack(SBGC_1.Drv);
 8002022:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <USART1_IRQHandler+0x74>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f005 fa50 	bl	80074cc <UART_DRV_RxCallBack>

	if (GET_FLAG_UART_ISR_ORE(SBGC_SERIAL_PORT))
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <USART1_IRQHandler+0x70>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d103      	bne.n	8002042 <USART1_IRQHandler+0x66>
		CLEAR_UART_ORE(SBGC_SERIAL_PORT);
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <USART1_IRQHandler+0x70>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2208      	movs	r2, #8
 8002040:	621a      	str	r2, [r3, #32]

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002042:	4802      	ldr	r0, [pc, #8]	; (800204c <USART1_IRQHandler+0x70>)
 8002044:	f004 f8fe 	bl	8006244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200005fc 	.word	0x200005fc
 8002050:	20000420 	.word	0x20000420

08002054 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if (GET_FLAG_EXTI_ENC(ENC_A_Pin) &&
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <EXTI15_10_IRQHandler+0x64>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00c      	beq.n	800207e <EXTI15_10_IRQHandler+0x2a>
		READ_PIN(ENC_B_GPIO_Port, ENC_B_Pin))
 8002064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002068:	4814      	ldr	r0, [pc, #80]	; (80020bc <EXTI15_10_IRQHandler+0x68>)
 800206a:	f001 fbf5 	bl	8003858 <HAL_GPIO_ReadPin>
 800206e:	4603      	mov	r3, r0
	if (GET_FLAG_EXTI_ENC(ENC_A_Pin) &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	d004      	beq.n	800207e <EXTI15_10_IRQHandler+0x2a>
		EXTI_DRV_FallingCallBack(&InputsInfo, ENC_A_Pin);
 8002074:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002078:	4811      	ldr	r0, [pc, #68]	; (80020c0 <EXTI15_10_IRQHandler+0x6c>)
 800207a:	f7ff fa4e 	bl	800151a <EXTI_DRV_FallingCallBack>

	if (GET_FLAG_EXTI_ENC(ENC_B_Pin) &&
 800207e:	4b0e      	ldr	r3, [pc, #56]	; (80020b8 <EXTI15_10_IRQHandler+0x64>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <EXTI15_10_IRQHandler+0x50>
		READ_PIN(ENC_A_GPIO_Port, ENC_A_Pin))
 800208a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800208e:	480d      	ldr	r0, [pc, #52]	; (80020c4 <EXTI15_10_IRQHandler+0x70>)
 8002090:	f001 fbe2 	bl	8003858 <HAL_GPIO_ReadPin>
 8002094:	4603      	mov	r3, r0
	if (GET_FLAG_EXTI_ENC(ENC_B_Pin) &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d004      	beq.n	80020a4 <EXTI15_10_IRQHandler+0x50>
		EXTI_DRV_FallingCallBack(&InputsInfo, ENC_B_Pin);
 800209a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800209e:	4808      	ldr	r0, [pc, #32]	; (80020c0 <EXTI15_10_IRQHandler+0x6c>)
 80020a0:	f7ff fa3b 	bl	800151a <EXTI_DRV_FallingCallBack>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 80020a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020a8:	f001 fc08 	bl	80038bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 80020ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020b0:	f001 fc04 	bl	80038bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40013c00 	.word	0x40013c00
 80020bc:	40021400 	.word	0x40021400
 80020c0:	20000594 	.word	0x20000594
 80020c4:	40021000 	.word	0x40021000

080020c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_kill>:

int _kill(int pid, int sig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020e2:	f006 ffc3 	bl	800906c <__errno>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2216      	movs	r2, #22
 80020ea:	601a      	str	r2, [r3, #0]
	return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <_exit>:

void _exit (int status)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002100:	f04f 31ff 	mov.w	r1, #4294967295
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ffe7 	bl	80020d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800210a:	e7fe      	b.n	800210a <_exit+0x12>

0800210c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	e00a      	b.n	8002134 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800211e:	f3af 8000 	nop.w
 8002122:	4601      	mov	r1, r0
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	b2ca      	uxtb	r2, r1
 800212c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	dbf0      	blt.n	800211e <_read+0x12>
	}

return len;
 800213c:	687b      	ldr	r3, [r7, #4]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e009      	b.n	800216c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	60ba      	str	r2, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf1      	blt.n	8002158 <_write+0x12>
	}
	return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_close>:

int _close(int file)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
	return -1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021a6:	605a      	str	r2, [r3, #4]
	return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_isatty>:

int _isatty(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return 1;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
	return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <_sbrk+0x5c>)
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <_sbrk+0x60>)
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d102      	bne.n	800220a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <_sbrk+0x64>)
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <_sbrk+0x68>)
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	429a      	cmp	r2, r3
 8002216:	d207      	bcs.n	8002228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002218:	f006 ff28 	bl	800906c <__errno>
 800221c:	4603      	mov	r3, r0
 800221e:	220c      	movs	r2, #12
 8002220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002222:	f04f 33ff 	mov.w	r3, #4294967295
 8002226:	e009      	b.n	800223c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002228:	4b08      	ldr	r3, [pc, #32]	; (800224c <_sbrk+0x64>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <_sbrk+0x64>)
 8002238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223a:	68fb      	ldr	r3, [r7, #12]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20080000 	.word	0x20080000
 8002248:	00000400 	.word	0x00000400
 800224c:	200005ac 	.word	0x200005ac
 8002250:	20000718 	.word	0x20000718

08002254 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SystemInit+0x20>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <SystemInit+0x20>)
 8002260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2302      	movs	r3, #2
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	2302      	movs	r3, #2
 8002290:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <SystemCoreClockUpdate+0xec>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d011      	beq.n	80022c6 <SystemCoreClockUpdate+0x4e>
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d844      	bhi.n	8002332 <SystemCoreClockUpdate+0xba>
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <SystemCoreClockUpdate+0x3e>
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d004      	beq.n	80022be <SystemCoreClockUpdate+0x46>
 80022b4:	e03d      	b.n	8002332 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80022b6:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <SystemCoreClockUpdate+0xf0>)
 80022b8:	4a2c      	ldr	r2, [pc, #176]	; (800236c <SystemCoreClockUpdate+0xf4>)
 80022ba:	601a      	str	r2, [r3, #0]
      break;
 80022bc:	e03d      	b.n	800233a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <SystemCoreClockUpdate+0xf0>)
 80022c0:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <SystemCoreClockUpdate+0xf8>)
 80022c2:	601a      	str	r2, [r3, #0]
      break;
 80022c4:	e039      	b.n	800233a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80022c6:	4b27      	ldr	r3, [pc, #156]	; (8002364 <SystemCoreClockUpdate+0xec>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0d9b      	lsrs	r3, r3, #22
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <SystemCoreClockUpdate+0xec>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022da:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00c      	beq.n	80022fc <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <SystemCoreClockUpdate+0xf8>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <SystemCoreClockUpdate+0xec>)
 80022ec:	6852      	ldr	r2, [r2, #4]
 80022ee:	0992      	lsrs	r2, r2, #6
 80022f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e00b      	b.n	8002314 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <SystemCoreClockUpdate+0xf4>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	fbb2 f3f3 	udiv	r3, r2, r3
 8002304:	4a17      	ldr	r2, [pc, #92]	; (8002364 <SystemCoreClockUpdate+0xec>)
 8002306:	6852      	ldr	r2, [r2, #4]
 8002308:	0992      	lsrs	r2, r2, #6
 800230a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800230e:	fb02 f303 	mul.w	r3, r2, r3
 8002312:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <SystemCoreClockUpdate+0xec>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	0c1b      	lsrs	r3, r3, #16
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	3301      	adds	r3, #1
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <SystemCoreClockUpdate+0xf0>)
 800232e:	6013      	str	r3, [r2, #0]
      break;
 8002330:	e003      	b.n	800233a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <SystemCoreClockUpdate+0xf0>)
 8002334:	4a0d      	ldr	r2, [pc, #52]	; (800236c <SystemCoreClockUpdate+0xf4>)
 8002336:	601a      	str	r2, [r3, #0]
      break;
 8002338:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800233a:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <SystemCoreClockUpdate+0xec>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <SystemCoreClockUpdate+0xfc>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <SystemCoreClockUpdate+0xf0>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <SystemCoreClockUpdate+0xf0>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40023800 	.word	0x40023800
 8002368:	20000180 	.word	0x20000180
 800236c:	00f42400 	.word	0x00f42400
 8002370:	017d7840 	.word	0x017d7840
 8002374:	0800dc24 	.word	0x0800dc24

08002378 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	f107 0310 	add.w	r3, r7, #16
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <MX_TIM2_Init+0x98>)
 8002398:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800239c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <MX_TIM2_Init+0x98>)
 80023a0:	226b      	movs	r2, #107	; 0x6b
 80023a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_TIM2_Init+0x98>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <MX_TIM2_Init+0x98>)
 80023ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_TIM2_Init+0x98>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b8:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_TIM2_Init+0x98>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023be:	4814      	ldr	r0, [pc, #80]	; (8002410 <MX_TIM2_Init+0x98>)
 80023c0:	f003 f936 	bl	8005630 <HAL_TIM_Base_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023ca:	f7ff fd79 	bl	8001ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023d4:	f107 0310 	add.w	r3, r7, #16
 80023d8:	4619      	mov	r1, r3
 80023da:	480d      	ldr	r0, [pc, #52]	; (8002410 <MX_TIM2_Init+0x98>)
 80023dc:	f003 fb18 	bl	8005a10 <HAL_TIM_ConfigClockSource>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80023e6:	f7ff fd6b 	bl	8001ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023ea:	2320      	movs	r3, #32
 80023ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	4619      	mov	r1, r3
 80023f6:	4806      	ldr	r0, [pc, #24]	; (8002410 <MX_TIM2_Init+0x98>)
 80023f8:	f003 fd40 	bl	8005e7c <HAL_TIMEx_MasterConfigSynchronization>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002402:	f7ff fd5d 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200005b0 	.word	0x200005b0

08002414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d113      	bne.n	800244e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_TIM_Base_MspInit+0x44>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <HAL_TIM_Base_MspInit+0x44>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6413      	str	r3, [r2, #64]	; 0x40
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_TIM_Base_MspInit+0x44>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2103      	movs	r1, #3
 8002442:	201c      	movs	r0, #28
 8002444:	f000 ff93 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002448:	201c      	movs	r0, #28
 800244a:	f000 ffac 	bl	80033a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800

0800245c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 8002462:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <MX_USART1_UART_Init+0x5c>)
 8002464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 800248e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002492:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 8002496:	2200      	movs	r2, #0
 8002498:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 800249c:	2200      	movs	r2, #0
 800249e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_USART1_UART_Init+0x58>)
 80024a2:	f003 fd97 	bl	8005fd4 <HAL_UART_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80024ac:	f7ff fd08 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200005fc 	.word	0x200005fc
 80024b8:	40011000 	.word	0x40011000

080024bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <MX_USART2_UART_Init+0x5c>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024f2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f4:	4b07      	ldr	r3, [pc, #28]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <MX_USART2_UART_Init+0x58>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <MX_USART2_UART_Init+0x58>)
 8002502:	f003 fdb5 	bl	8006070 <HAL_HalfDuplex_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 800250c:	f7ff fcd8 	bl	8001ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000680 	.word	0x20000680
 8002518:	40004400 	.word	0x40004400

0800251c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0b0      	sub	sp, #192	; 0xc0
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002534:	f107 031c 	add.w	r3, r7, #28
 8002538:	2290      	movs	r2, #144	; 0x90
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f006 fdd5 	bl	80090ec <memset>
  if(uartHandle->Instance==USART1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a51      	ldr	r2, [pc, #324]	; (800268c <HAL_UART_MspInit+0x170>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d15a      	bne.n	8002602 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800254c:	2340      	movs	r3, #64	; 0x40
 800254e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002550:	2300      	movs	r3, #0
 8002552:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4618      	mov	r0, r3
 800255a:	f002 fc41 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002564:	f7ff fcac 	bl	8001ec0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002568:	4b49      	ldr	r3, [pc, #292]	; (8002690 <HAL_UART_MspInit+0x174>)
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	4a48      	ldr	r2, [pc, #288]	; (8002690 <HAL_UART_MspInit+0x174>)
 800256e:	f043 0310 	orr.w	r3, r3, #16
 8002572:	6453      	str	r3, [r2, #68]	; 0x44
 8002574:	4b46      	ldr	r3, [pc, #280]	; (8002690 <HAL_UART_MspInit+0x174>)
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	61bb      	str	r3, [r7, #24]
 800257e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_UART_MspInit+0x174>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	4a42      	ldr	r2, [pc, #264]	; (8002690 <HAL_UART_MspInit+0x174>)
 8002586:	f043 0302 	orr.w	r3, r3, #2
 800258a:	6313      	str	r3, [r2, #48]	; 0x30
 800258c:	4b40      	ldr	r3, [pc, #256]	; (8002690 <HAL_UART_MspInit+0x174>)
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002598:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800259c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ac:	2303      	movs	r3, #3
 80025ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025b2:	2304      	movs	r3, #4
 80025b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025bc:	4619      	mov	r1, r3
 80025be:	4835      	ldr	r0, [pc, #212]	; (8002694 <HAL_UART_MspInit+0x178>)
 80025c0:	f000 ff9e 	bl	8003500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025de:	2304      	movs	r3, #4
 80025e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025e8:	4619      	mov	r1, r3
 80025ea:	482a      	ldr	r0, [pc, #168]	; (8002694 <HAL_UART_MspInit+0x178>)
 80025ec:	f000 ff88 	bl	8003500 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2101      	movs	r1, #1
 80025f4:	2025      	movs	r0, #37	; 0x25
 80025f6:	f000 feba 	bl	800336e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025fa:	2025      	movs	r0, #37	; 0x25
 80025fc:	f000 fed3 	bl	80033a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002600:	e03f      	b.n	8002682 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <HAL_UART_MspInit+0x17c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d13a      	bne.n	8002682 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002610:	2300      	movs	r3, #0
 8002612:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4618      	mov	r0, r3
 800261a:	f002 fbe1 	bl	8004de0 <HAL_RCCEx_PeriphCLKConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8002624:	f7ff fc4c 	bl	8001ec0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_UART_MspInit+0x174>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_UART_MspInit+0x174>)
 800262e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002632:	6413      	str	r3, [r2, #64]	; 0x40
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_UART_MspInit+0x174>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_UART_MspInit+0x174>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	4a12      	ldr	r2, [pc, #72]	; (8002690 <HAL_UART_MspInit+0x174>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6313      	str	r3, [r2, #48]	; 0x30
 800264c:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_UART_MspInit+0x174>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002658:	2304      	movs	r3, #4
 800265a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800265e:	2312      	movs	r3, #18
 8002660:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002670:	2307      	movs	r3, #7
 8002672:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800267a:	4619      	mov	r1, r3
 800267c:	4807      	ldr	r0, [pc, #28]	; (800269c <HAL_UART_MspInit+0x180>)
 800267e:	f000 ff3f 	bl	8003500 <HAL_GPIO_Init>
}
 8002682:	bf00      	nop
 8002684:	37c0      	adds	r7, #192	; 0xc0
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40011000 	.word	0x40011000
 8002690:	40023800 	.word	0x40023800
 8002694:	40020400 	.word	0x40020400
 8002698:	40004400 	.word	0x40004400
 800269c:	40020000 	.word	0x40020000

080026a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a4:	480d      	ldr	r0, [pc, #52]	; (80026dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026a6:	490e      	ldr	r1, [pc, #56]	; (80026e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026a8:	4a0e      	ldr	r2, [pc, #56]	; (80026e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026bc:	4c0b      	ldr	r4, [pc, #44]	; (80026ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ca:	f7ff fdc3 	bl	8002254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ce:	f006 fcd3 	bl	8009078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d2:	f7ff f925 	bl	8001920 <main>
  bx  lr    
 80026d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026d8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80026e4:	0800e15c 	.word	0x0800e15c
  ldr r2, =_sbss
 80026e8:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80026ec:	20000718 	.word	0x20000718

080026f0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <CAN1_RX0_IRQHandler>

080026f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f6:	2003      	movs	r0, #3
 80026f8:	f000 fe2e 	bl	8003358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026fc:	200f      	movs	r0, #15
 80026fe:	f000 f805 	bl	800270c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002702:	f7ff fbe3 	bl	8001ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_InitTick+0x54>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x58>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	fbb3 f3f1 	udiv	r3, r3, r1
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fe49 	bl	80033c2 <HAL_SYSTICK_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00e      	b.n	8002758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d80a      	bhi.n	8002756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f000 fe11 	bl	800336e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800274c:	4a06      	ldr	r2, [pc, #24]	; (8002768 <HAL_InitTick+0x5c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20000180 	.word	0x20000180
 8002764:	20000188 	.word	0x20000188
 8002768:	20000184 	.word	0x20000184

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002770:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_IncTick+0x20>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x24>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_IncTick+0x24>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000188 	.word	0x20000188
 8002790:	20000704 	.word	0x20000704

08002794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return uwTick;
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <HAL_GetTick+0x14>)
 800279a:	681b      	ldr	r3, [r3, #0]
}
 800279c:	4618      	mov	r0, r3
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000704 	.word	0x20000704

080027ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff ffee 	bl	8002794 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d005      	beq.n	80027d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027c6:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <HAL_Delay+0x44>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4413      	add	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d2:	bf00      	nop
 80027d4:	f7ff ffde 	bl	8002794 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d8f7      	bhi.n	80027d4 <HAL_Delay+0x28>
  {
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000188 	.word	0x20000188

080027f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e031      	b.n	800286e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fb7c 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_ADC_Init+0x84>)
 8002838:	4013      	ands	r3, r2
 800283a:	f043 0202 	orr.w	r2, r3, #2
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fbb4 	bl	8002fb0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40
 800285e:	e001      	b.n	8002864 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	ffffeefd 	.word	0xffffeefd

0800287c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Start_IT+0x1a>
 8002892:	2302      	movs	r3, #2
 8002894:	e0b5      	b.n	8002a02 <HAL_ADC_Start_IT+0x186>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d018      	beq.n	80028de <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80028bc:	4b54      	ldr	r3, [pc, #336]	; (8002a10 <HAL_ADC_Start_IT+0x194>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a54      	ldr	r2, [pc, #336]	; (8002a14 <HAL_ADC_Start_IT+0x198>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	0c9a      	lsrs	r2, r3, #18
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80028d0:	e002      	b.n	80028d8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f9      	bne.n	80028d2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d17d      	bne.n	80029e8 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f0:	4b49      	ldr	r3, [pc, #292]	; (8002a18 <HAL_ADC_Start_IT+0x19c>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002912:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002926:	d106      	bne.n	8002936 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292c:	f023 0206 	bic.w	r2, r3, #6
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	645a      	str	r2, [r3, #68]	; 0x44
 8002934:	e002      	b.n	800293c <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800294c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6859      	ldr	r1, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_ADC_Start_IT+0x1a0>)
 800295a:	430b      	orrs	r3, r1
 800295c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800295e:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <HAL_ADC_Start_IT+0x1a4>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10f      	bne.n	800298a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d143      	bne.n	8002a00 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	e03a      	b.n	8002a00 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <HAL_ADC_Start_IT+0x1a8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d10e      	bne.n	80029b2 <HAL_ADC_Start_IT+0x136>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d107      	bne.n	80029b2 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029b0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_ADC_Start_IT+0x1a4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d120      	bne.n	8002a00 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_ADC_Start_IT+0x1ac>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d11b      	bne.n	8002a00 <HAL_ADC_Start_IT+0x184>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d114      	bne.n	8002a00 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e4:	609a      	str	r2, [r3, #8]
 80029e6:	e00b      	b.n	8002a00 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0210 	orr.w	r2, r3, #16
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000180 	.word	0x20000180
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	fffff8fe 	.word	0xfffff8fe
 8002a1c:	04000020 	.word	0x04000020
 8002a20:	40012300 	.word	0x40012300
 8002a24:	40012000 	.word	0x40012000
 8002a28:	40012200 	.word	0x40012200

08002a2c <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_Stop_IT+0x16>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e027      	b.n	8002a92 <HAL_ADC_Stop_IT+0x66>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10f      	bne.n	8002a88 <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_ADC_Stop_IT+0x74>)
 8002a74:	400b      	ands	r3, r1
 8002a76:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_ADC_Stop_IT+0x78>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	fbffffdf 	.word	0xfbffffdf
 8002aa4:	ffffeefe 	.word	0xffffeefe

08002aa8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0320 	and.w	r3, r3, #32
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d049      	beq.n	8002b72 <HAL_ADC_IRQHandler+0xca>
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d046      	beq.n	8002b72 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d12b      	bne.n	8002b62 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d127      	bne.n	8002b62 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d119      	bne.n	8002b62 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0220 	bic.w	r2, r2, #32
 8002b3c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8b0 	bl	8002cc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0212 	mvn.w	r2, #18
 8002b70:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d057      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x190>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d054      	beq.n	8002c38 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0310 	and.w	r3, r3, #16
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d139      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d12b      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d124      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11d      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d119      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 fabb 	bl	80031a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f06f 020c 	mvn.w	r2, #12
 8002c36:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d017      	beq.n	8002c7e <HAL_ADC_IRQHandler+0x1d6>
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d014      	beq.n	8002c7e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10d      	bne.n	8002c7e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f834 	bl	8002cdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0201 	mvn.w	r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0320 	and.w	r3, r3, #32
 8002c84:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c8c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d015      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x218>
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d012      	beq.n	8002cc0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f043 0202 	orr.w	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f06f 0220 	mvn.w	r2, #32
 8002cae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f81d 	bl	8002cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f06f 0220 	mvn.w	r2, #32
 8002cbe:	601a      	str	r2, [r3, #0]
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1c>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e136      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x28a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	d93a      	bls.n	8002da6 <HAL_ADC_ConfigChannel+0xa2>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d38:	d035      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68d9      	ldr	r1, [r3, #12]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b1e      	subs	r3, #30
 8002d50:	2207      	movs	r2, #7
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a8d      	ldr	r2, [pc, #564]	; (8002f9c <HAL_ADC_ConfigChannel+0x298>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10a      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68d9      	ldr	r1, [r3, #12]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	061a      	lsls	r2, r3, #24
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d7e:	e035      	b.n	8002dec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68d9      	ldr	r1, [r3, #12]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4403      	add	r3, r0
 8002d98:	3b1e      	subs	r3, #30
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da4:	e022      	b.n	8002dec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6919      	ldr	r1, [r3, #16]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	2207      	movs	r2, #7
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	400a      	ands	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4603      	mov	r3, r0
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4403      	add	r3, r0
 8002de2:	409a      	lsls	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b06      	cmp	r3, #6
 8002df2:	d824      	bhi.n	8002e3e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	3b05      	subs	r3, #5
 8002e06:	221f      	movs	r2, #31
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	400a      	ands	r2, r1
 8002e14:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b05      	subs	r3, #5
 8002e30:	fa00 f203 	lsl.w	r2, r0, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e3c:	e04c      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d824      	bhi.n	8002e90 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b23      	subs	r3, #35	; 0x23
 8002e58:	221f      	movs	r2, #31
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	400a      	ands	r2, r1
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b23      	subs	r3, #35	; 0x23
 8002e82:	fa00 f203 	lsl.w	r2, r0, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8e:	e023      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b41      	subs	r3, #65	; 0x41
 8002ea2:	221f      	movs	r2, #31
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	400a      	ands	r2, r1
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b41      	subs	r3, #65	; 0x41
 8002ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a30      	ldr	r2, [pc, #192]	; (8002fa0 <HAL_ADC_ConfigChannel+0x29c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10a      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eea:	d105      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002eec:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a2c      	ldr	r2, [pc, #176]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002ef6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <HAL_ADC_ConfigChannel+0x29c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10f      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x21e>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b12      	cmp	r3, #18
 8002f08:	d10b      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f0a:	4b26      	ldr	r3, [pc, #152]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a25      	ldr	r2, [pc, #148]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f14:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f20:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_ADC_ConfigChannel+0x29c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d12b      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x280>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1a      	ldr	r2, [pc, #104]	; (8002f9c <HAL_ADC_ConfigChannel+0x298>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d003      	beq.n	8002f3e <HAL_ADC_ConfigChannel+0x23a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b11      	cmp	r3, #17
 8002f3c:	d122      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f48:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f54:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <HAL_ADC_ConfigChannel+0x298>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d111      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a11      	ldr	r2, [pc, #68]	; (8002fac <HAL_ADC_ConfigChannel+0x2a8>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0c9a      	lsrs	r2, r3, #18
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f76:	e002      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1f9      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	10000012 	.word	0x10000012
 8002fa0:	40012000 	.word	0x40012000
 8002fa4:	40012300 	.word	0x40012300
 8002fa8:	20000180 	.word	0x20000180
 8002fac:	431bde83 	.word	0x431bde83

08002fb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fb8:	4b78      	ldr	r3, [pc, #480]	; (800319c <ADC_Init+0x1ec>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a77      	ldr	r2, [pc, #476]	; (800319c <ADC_Init+0x1ec>)
 8002fbe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fc2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fc4:	4b75      	ldr	r3, [pc, #468]	; (800319c <ADC_Init+0x1ec>)
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	4973      	ldr	r1, [pc, #460]	; (800319c <ADC_Init+0x1ec>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	021a      	lsls	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6899      	ldr	r1, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <ADC_Init+0x1f0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d022      	beq.n	800308a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003052:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	e00f      	b.n	80030aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0202 	bic.w	r2, r2, #2
 80030b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	005a      	lsls	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01b      	beq.n	8003110 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	3b01      	subs	r3, #1
 8003104:	035a      	lsls	r2, r3, #13
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	e007      	b.n	8003120 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800311e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800312e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	3b01      	subs	r3, #1
 800313c:	051a      	lsls	r2, r3, #20
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003154:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6899      	ldr	r1, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003162:	025a      	lsls	r2, r3, #9
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6899      	ldr	r1, [r3, #8]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	029a      	lsls	r2, r3, #10
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40012300 	.word	0x40012300
 80031a0:	0f000001 	.word	0x0f000001

080031a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <__NVIC_SetPriorityGrouping+0x40>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d4:	4013      	ands	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031e6:	4a04      	ldr	r2, [pc, #16]	; (80031f8 <__NVIC_SetPriorityGrouping+0x40>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	60d3      	str	r3, [r2, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	e000ed00 	.word	0xe000ed00
 80031fc:	05fa0000 	.word	0x05fa0000

08003200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003204:	4b04      	ldr	r3, [pc, #16]	; (8003218 <__NVIC_GetPriorityGrouping+0x18>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	f003 0307 	and.w	r3, r3, #7
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	db0b      	blt.n	8003246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	f003 021f 	and.w	r2, r3, #31
 8003234:	4907      	ldr	r1, [pc, #28]	; (8003254 <__NVIC_EnableIRQ+0x38>)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	2001      	movs	r0, #1
 800323e:	fa00 f202 	lsl.w	r2, r0, r2
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	e000e100 	.word	0xe000e100

08003258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	2b00      	cmp	r3, #0
 800326a:	db0a      	blt.n	8003282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	490c      	ldr	r1, [pc, #48]	; (80032a4 <__NVIC_SetPriority+0x4c>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003280:	e00a      	b.n	8003298 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4908      	ldr	r1, [pc, #32]	; (80032a8 <__NVIC_SetPriority+0x50>)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3b04      	subs	r3, #4
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	440b      	add	r3, r1
 8003296:	761a      	strb	r2, [r3, #24]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f1c3 0307 	rsb	r3, r3, #7
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf28      	it	cs
 80032ca:	2304      	movcs	r3, #4
 80032cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	d902      	bls.n	80032dc <NVIC_EncodePriority+0x30>
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3b03      	subs	r3, #3
 80032da:	e000      	b.n	80032de <NVIC_EncodePriority+0x32>
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	401a      	ands	r2, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f4:	f04f 31ff 	mov.w	r1, #4294967295
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa01 f303 	lsl.w	r3, r1, r3
 80032fe:	43d9      	mvns	r1, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	4313      	orrs	r3, r2
         );
}
 8003306:	4618      	mov	r0, r3
 8003308:	3724      	adds	r7, #36	; 0x24
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003324:	d301      	bcc.n	800332a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003326:	2301      	movs	r3, #1
 8003328:	e00f      	b.n	800334a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <SysTick_Config+0x40>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003332:	210f      	movs	r1, #15
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f7ff ff8e 	bl	8003258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <SysTick_Config+0x40>)
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003342:	4b04      	ldr	r3, [pc, #16]	; (8003354 <SysTick_Config+0x40>)
 8003344:	2207      	movs	r2, #7
 8003346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	e000e010 	.word	0xe000e010

08003358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7ff ff29 	bl	80031b8 <__NVIC_SetPriorityGrouping>
}
 8003366:	bf00      	nop
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	4603      	mov	r3, r0
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003380:	f7ff ff3e 	bl	8003200 <__NVIC_GetPriorityGrouping>
 8003384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	6978      	ldr	r0, [r7, #20]
 800338c:	f7ff ff8e 	bl	80032ac <NVIC_EncodePriority>
 8003390:	4602      	mov	r2, r0
 8003392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff5d 	bl	8003258 <__NVIC_SetPriority>
}
 800339e:	bf00      	nop
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff31 	bl	800321c <__NVIC_EnableIRQ>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ffa2 	bl	8003314 <SysTick_Config>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033e8:	f7ff f9d4 	bl	8002794 <HAL_GetTick>
 80033ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d008      	beq.n	800340c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e052      	b.n	80034b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0216 	bic.w	r2, r2, #22
 800341a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	695a      	ldr	r2, [r3, #20]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d103      	bne.n	800343c <HAL_DMA_Abort+0x62>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0208 	bic.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0201 	bic.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800345c:	e013      	b.n	8003486 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800345e:	f7ff f999 	bl	8002794 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b05      	cmp	r3, #5
 800346a:	d90c      	bls.n	8003486 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2220      	movs	r2, #32
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2203      	movs	r2, #3
 8003476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e015      	b.n	80034b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e4      	bne.n	800345e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d004      	beq.n	80034d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e00c      	b.n	80034f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2205      	movs	r2, #5
 80034dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003500:	b480      	push	{r7}
 8003502:	b089      	sub	sp, #36	; 0x24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	e175      	b.n	800380c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003520:	2201      	movs	r2, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	429a      	cmp	r2, r3
 800353a:	f040 8164 	bne.w	8003806 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b01      	cmp	r3, #1
 8003548:	d005      	beq.n	8003556 <HAL_GPIO_Init+0x56>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d130      	bne.n	80035b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	2203      	movs	r2, #3
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800358c:	2201      	movs	r2, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 0201 	and.w	r2, r3, #1
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d017      	beq.n	80035f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	2203      	movs	r2, #3
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 0303 	and.w	r3, r3, #3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d123      	bne.n	8003648 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	08da      	lsrs	r2, r3, #3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3208      	adds	r2, #8
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	220f      	movs	r2, #15
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	08da      	lsrs	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3208      	adds	r2, #8
 8003642:	69b9      	ldr	r1, [r7, #24]
 8003644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	2203      	movs	r2, #3
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0203 	and.w	r2, r3, #3
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80be 	beq.w	8003806 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368a:	4b66      	ldr	r3, [pc, #408]	; (8003824 <HAL_GPIO_Init+0x324>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	4a65      	ldr	r2, [pc, #404]	; (8003824 <HAL_GPIO_Init+0x324>)
 8003690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003694:	6453      	str	r3, [r2, #68]	; 0x44
 8003696:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_GPIO_Init+0x324>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036a2:	4a61      	ldr	r2, [pc, #388]	; (8003828 <HAL_GPIO_Init+0x328>)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a58      	ldr	r2, [pc, #352]	; (800382c <HAL_GPIO_Init+0x32c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d037      	beq.n	800373e <HAL_GPIO_Init+0x23e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a57      	ldr	r2, [pc, #348]	; (8003830 <HAL_GPIO_Init+0x330>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d031      	beq.n	800373a <HAL_GPIO_Init+0x23a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a56      	ldr	r2, [pc, #344]	; (8003834 <HAL_GPIO_Init+0x334>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02b      	beq.n	8003736 <HAL_GPIO_Init+0x236>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a55      	ldr	r2, [pc, #340]	; (8003838 <HAL_GPIO_Init+0x338>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d025      	beq.n	8003732 <HAL_GPIO_Init+0x232>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a54      	ldr	r2, [pc, #336]	; (800383c <HAL_GPIO_Init+0x33c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d01f      	beq.n	800372e <HAL_GPIO_Init+0x22e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a53      	ldr	r2, [pc, #332]	; (8003840 <HAL_GPIO_Init+0x340>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d019      	beq.n	800372a <HAL_GPIO_Init+0x22a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a52      	ldr	r2, [pc, #328]	; (8003844 <HAL_GPIO_Init+0x344>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d013      	beq.n	8003726 <HAL_GPIO_Init+0x226>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a51      	ldr	r2, [pc, #324]	; (8003848 <HAL_GPIO_Init+0x348>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00d      	beq.n	8003722 <HAL_GPIO_Init+0x222>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a50      	ldr	r2, [pc, #320]	; (800384c <HAL_GPIO_Init+0x34c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <HAL_GPIO_Init+0x21e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4f      	ldr	r2, [pc, #316]	; (8003850 <HAL_GPIO_Init+0x350>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_GPIO_Init+0x21a>
 8003716:	2309      	movs	r3, #9
 8003718:	e012      	b.n	8003740 <HAL_GPIO_Init+0x240>
 800371a:	230a      	movs	r3, #10
 800371c:	e010      	b.n	8003740 <HAL_GPIO_Init+0x240>
 800371e:	2308      	movs	r3, #8
 8003720:	e00e      	b.n	8003740 <HAL_GPIO_Init+0x240>
 8003722:	2307      	movs	r3, #7
 8003724:	e00c      	b.n	8003740 <HAL_GPIO_Init+0x240>
 8003726:	2306      	movs	r3, #6
 8003728:	e00a      	b.n	8003740 <HAL_GPIO_Init+0x240>
 800372a:	2305      	movs	r3, #5
 800372c:	e008      	b.n	8003740 <HAL_GPIO_Init+0x240>
 800372e:	2304      	movs	r3, #4
 8003730:	e006      	b.n	8003740 <HAL_GPIO_Init+0x240>
 8003732:	2303      	movs	r3, #3
 8003734:	e004      	b.n	8003740 <HAL_GPIO_Init+0x240>
 8003736:	2302      	movs	r3, #2
 8003738:	e002      	b.n	8003740 <HAL_GPIO_Init+0x240>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x240>
 800373e:	2300      	movs	r3, #0
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	f002 0203 	and.w	r2, r2, #3
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	4093      	lsls	r3, r2
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003750:	4935      	ldr	r1, [pc, #212]	; (8003828 <HAL_GPIO_Init+0x328>)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_GPIO_Init+0x354>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003782:	4a34      	ldr	r2, [pc, #208]	; (8003854 <HAL_GPIO_Init+0x354>)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003788:	4b32      	ldr	r3, [pc, #200]	; (8003854 <HAL_GPIO_Init+0x354>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037ac:	4a29      	ldr	r2, [pc, #164]	; (8003854 <HAL_GPIO_Init+0x354>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037b2:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_GPIO_Init+0x354>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037d6:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <HAL_GPIO_Init+0x354>)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <HAL_GPIO_Init+0x354>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <HAL_GPIO_Init+0x354>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b0f      	cmp	r3, #15
 8003810:	f67f ae86 	bls.w	8003520 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3724      	adds	r7, #36	; 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40013800 	.word	0x40013800
 800382c:	40020000 	.word	0x40020000
 8003830:	40020400 	.word	0x40020400
 8003834:	40020800 	.word	0x40020800
 8003838:	40020c00 	.word	0x40020c00
 800383c:	40021000 	.word	0x40021000
 8003840:	40021400 	.word	0x40021400
 8003844:	40021800 	.word	0x40021800
 8003848:	40021c00 	.word	0x40021c00
 800384c:	40022000 	.word	0x40022000
 8003850:	40022400 	.word	0x40022400
 8003854:	40013c00 	.word	0x40013c00

08003858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	e001      	b.n	800387a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
 8003894:	4613      	mov	r3, r2
 8003896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003898:	787b      	ldrb	r3, [r7, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80038a4:	e003      	b.n	80038ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	619a      	str	r2, [r3, #24]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038d2:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f806 	bl	80038ec <HAL_GPIO_EXTI_Callback>
  }
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40013c00 	.word	0x40013c00

080038ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd ff80 	bl	8001830 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	; 0x24
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003954:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003964:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d107      	bne.n	800397e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800397a:	609a      	str	r2, [r3, #8]
 800397c:	e006      	b.n	800398c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800398a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d104      	bne.n	800399e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800399c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_I2C_Init+0x11c>)
 80039aa:	430b      	orrs	r3, r1
 80039ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69d9      	ldr	r1, [r3, #28]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	02008000 	.word	0x02008000

08003a24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	460b      	mov	r3, r1
 8003a32:	817b      	strh	r3, [r7, #10]
 8003a34:	4613      	mov	r3, r2
 8003a36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	f040 80da 	bne.w	8003bfa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2C_Master_Transmit+0x30>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e0d3      	b.n	8003bfc <HAL_I2C_Master_Transmit+0x1d8>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a5c:	f7fe fe9a 	bl	8002794 <HAL_GetTick>
 8003a60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2319      	movs	r3, #25
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f9e6 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0be      	b.n	8003bfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2221      	movs	r2, #33	; 0x21
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	893a      	ldrh	r2, [r7, #8]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2bff      	cmp	r3, #255	; 0xff
 8003aae:	d90e      	bls.n	8003ace <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	22ff      	movs	r2, #255	; 0xff
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	8979      	ldrh	r1, [r7, #10]
 8003abe:	4b51      	ldr	r3, [pc, #324]	; (8003c04 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fbdc 	bl	8004284 <I2C_TransferConfig>
 8003acc:	e06c      	b.n	8003ba8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	4b48      	ldr	r3, [pc, #288]	; (8003c04 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fbcb 	bl	8004284 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003aee:	e05b      	b.n	8003ba8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	6a39      	ldr	r1, [r7, #32]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f9e3 	bl	8003ec0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e07b      	b.n	8003bfc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d034      	beq.n	8003ba8 <HAL_I2C_Master_Transmit+0x184>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d130      	bne.n	8003ba8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f975 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e04d      	b.n	8003bfc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2bff      	cmp	r3, #255	; 0xff
 8003b68:	d90e      	bls.n	8003b88 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	8979      	ldrh	r1, [r7, #10]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb7f 	bl	8004284 <I2C_TransferConfig>
 8003b86:	e00f      	b.n	8003ba8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	8979      	ldrh	r1, [r7, #10]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fb6e 	bl	8004284 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d19e      	bne.n	8003af0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6a39      	ldr	r1, [r7, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f9c2 	bl	8003f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e01a      	b.n	8003bfc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_I2C_Master_Transmit+0x1e4>)
 8003bda:	400b      	ands	r3, r1
 8003bdc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	80002000 	.word	0x80002000
 8003c08:	fe00e800 	.word	0xfe00e800

08003c0c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	460b      	mov	r3, r1
 8003c1a:	817b      	strh	r3, [r7, #10]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	f040 80db 	bne.w	8003de4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_I2C_Master_Receive+0x30>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e0d4      	b.n	8003de6 <HAL_I2C_Master_Receive+0x1da>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c44:	f7fe fda6 	bl	8002794 <HAL_GetTick>
 8003c48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	2319      	movs	r3, #25
 8003c50:	2201      	movs	r2, #1
 8003c52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 f8f2 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e0bf      	b.n	8003de6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2222      	movs	r2, #34	; 0x22
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2210      	movs	r2, #16
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	893a      	ldrh	r2, [r7, #8]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2bff      	cmp	r3, #255	; 0xff
 8003c96:	d90e      	bls.n	8003cb6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	22ff      	movs	r2, #255	; 0xff
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8979      	ldrh	r1, [r7, #10]
 8003ca6:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <HAL_I2C_Master_Receive+0x1e4>)
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 fae8 	bl	8004284 <I2C_TransferConfig>
 8003cb4:	e06d      	b.n	8003d92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	8979      	ldrh	r1, [r7, #10]
 8003cc8:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <HAL_I2C_Master_Receive+0x1e4>)
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fad7 	bl	8004284 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003cd6:	e05c      	b.n	8003d92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	6a39      	ldr	r1, [r7, #32]
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f96b 	bl	8003fb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e07c      	b.n	8003de6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d034      	beq.n	8003d92 <HAL_I2C_Master_Receive+0x186>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d130      	bne.n	8003d92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2180      	movs	r1, #128	; 0x80
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f880 	bl	8003e40 <I2C_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e04d      	b.n	8003de6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2bff      	cmp	r3, #255	; 0xff
 8003d52:	d90e      	bls.n	8003d72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	22ff      	movs	r2, #255	; 0xff
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	8979      	ldrh	r1, [r7, #10]
 8003d62:	2300      	movs	r3, #0
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 fa8a 	bl	8004284 <I2C_TransferConfig>
 8003d70:	e00f      	b.n	8003d92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	8979      	ldrh	r1, [r7, #10]
 8003d84:	2300      	movs	r3, #0
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fa79 	bl	8004284 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d19d      	bne.n	8003cd8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	6a39      	ldr	r1, [r7, #32]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f8cd 	bl	8003f40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e01a      	b.n	8003de6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2220      	movs	r2, #32
 8003db6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <HAL_I2C_Master_Receive+0x1e8>)
 8003dc4:	400b      	ands	r3, r1
 8003dc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	e000      	b.n	8003de6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
  }
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	80002400 	.word	0x80002400
 8003df4:	fe00e800 	.word	0xfe00e800

08003df8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d103      	bne.n	8003e16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d007      	beq.n	8003e34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	619a      	str	r2, [r3, #24]
  }
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e50:	e022      	b.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d01e      	beq.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5a:	f7fe fc9b 	bl	8002794 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d302      	bcc.n	8003e70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d113      	bne.n	8003e98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f043 0220 	orr.w	r2, r3, #32
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e00f      	b.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d0cd      	beq.n	8003e52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ecc:	e02c      	b.n	8003f28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f8ea 	bl	80040ac <I2C_IsErrorOccurred>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e02a      	b.n	8003f38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d01e      	beq.n	8003f28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eea:	f7fe fc53 	bl	8002794 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d113      	bne.n	8003f28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e007      	b.n	8003f38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d1cb      	bne.n	8003ece <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f4c:	e028      	b.n	8003fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f8aa 	bl	80040ac <I2C_IsErrorOccurred>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e026      	b.n	8003fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fe fc17 	bl	8002794 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d113      	bne.n	8003fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	f043 0220 	orr.w	r2, r3, #32
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e007      	b.n	8003fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d1cf      	bne.n	8003f4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc4:	e064      	b.n	8004090 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	68b9      	ldr	r1, [r7, #8]
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f86e 	bl	80040ac <I2C_IsErrorOccurred>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e062      	b.n	80040a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0320 	and.w	r3, r3, #32
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d138      	bne.n	800405a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d105      	bne.n	8004002 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e04e      	b.n	80040a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f003 0310 	and.w	r3, r3, #16
 800400c:	2b10      	cmp	r3, #16
 800400e:	d107      	bne.n	8004020 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2210      	movs	r2, #16
 8004016:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2204      	movs	r2, #4
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
 800401e:	e002      	b.n	8004026 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2220      	movs	r2, #32
 800402c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6859      	ldr	r1, [r3, #4]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800403a:	400b      	ands	r3, r1
 800403c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e022      	b.n	80040a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405a:	f7fe fb9b 	bl	8002794 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10f      	bne.n	8004090 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e007      	b.n	80040a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b04      	cmp	r3, #4
 800409c:	d193      	bne.n	8003fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	fe00e800 	.word	0xfe00e800

080040ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d075      	beq.n	80041c4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2210      	movs	r2, #16
 80040de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040e0:	e056      	b.n	8004190 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e8:	d052      	beq.n	8004190 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040ea:	f7fe fb53 	bl	8002794 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d302      	bcc.n	8004100 <I2C_IsErrorOccurred+0x54>
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d147      	bne.n	8004190 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004112:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800411e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004122:	d12e      	bne.n	8004182 <I2C_IsErrorOccurred+0xd6>
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412a:	d02a      	beq.n	8004182 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	2b20      	cmp	r3, #32
 8004130:	d027      	beq.n	8004182 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004140:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004142:	f7fe fb27 	bl	8002794 <HAL_GetTick>
 8004146:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004148:	e01b      	b.n	8004182 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800414a:	f7fe fb23 	bl	8002794 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b19      	cmp	r3, #25
 8004156:	d914      	bls.n	8004182 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0320 	and.w	r3, r3, #32
 800418c:	2b20      	cmp	r3, #32
 800418e:	d1dc      	bne.n	800414a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	2b20      	cmp	r3, #32
 800419c:	d003      	beq.n	80041a6 <I2C_IsErrorOccurred+0xfa>
 800419e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d09d      	beq.n	80040e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2220      	movs	r2, #32
 80041b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f043 0304 	orr.w	r3, r3, #4
 80041bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00b      	beq.n	8004210 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f043 0308 	orr.w	r3, r3, #8
 80041fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004208:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800422a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01c      	beq.n	8004274 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff fddc 	bl	8003df8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <I2C_IsErrorOccurred+0x1d4>)
 800424c:	400b      	ands	r3, r1
 800424e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	431a      	orrs	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004278:	4618      	mov	r0, r3
 800427a:	3728      	adds	r7, #40	; 0x28
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	fe00e800 	.word	0xfe00e800

08004284 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	460b      	mov	r3, r1
 8004290:	817b      	strh	r3, [r7, #10]
 8004292:	4613      	mov	r3, r2
 8004294:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004296:	897b      	ldrh	r3, [r7, #10]
 8004298:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800429c:	7a7b      	ldrb	r3, [r7, #9]
 800429e:	041b      	lsls	r3, r3, #16
 80042a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042a4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	0d5b      	lsrs	r3, r3, #21
 80042be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <I2C_TransferConfig+0x60>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	43db      	mvns	r3, r3
 80042c8:	ea02 0103 	and.w	r1, r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	03ff63ff 	.word	0x03ff63ff

080042e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d138      	bne.n	8004370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004308:	2302      	movs	r3, #2
 800430a:	e032      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	; 0x24
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800433a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b20      	cmp	r3, #32
 8004392:	d139      	bne.n	8004408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800439e:	2302      	movs	r3, #2
 80043a0:	e033      	b.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2224      	movs	r2, #36	; 0x24
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
	...

08004418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004422:	4b23      	ldr	r3, [pc, #140]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	603b      	str	r3, [r7, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1d      	ldr	r2, [pc, #116]	; (80044b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004446:	f7fe f9a5 	bl	8002794 <HAL_GetTick>
 800444a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800444c:	e009      	b.n	8004462 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800444e:	f7fe f9a1 	bl	8002794 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800445c:	d901      	bls.n	8004462 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e022      	b.n	80044a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004462:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d1ee      	bne.n	800444e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a0f      	ldr	r2, [pc, #60]	; (80044b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800447c:	f7fe f98a 	bl	8002794 <HAL_GetTick>
 8004480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004482:	e009      	b.n	8004498 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004484:	f7fe f986 	bl	8002794 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004492:	d901      	bls.n	8004498 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e007      	b.n	80044a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004498:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a4:	d1ee      	bne.n	8004484 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40007000 	.word	0x40007000

080044b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044c0:	2300      	movs	r3, #0
 80044c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e29b      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8087 	beq.w	80045ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044dc:	4b96      	ldr	r3, [pc, #600]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d00c      	beq.n	8004502 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e8:	4b93      	ldr	r3, [pc, #588]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d112      	bne.n	800451a <HAL_RCC_OscConfig+0x62>
 80044f4:	4b90      	ldr	r3, [pc, #576]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004500:	d10b      	bne.n	800451a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004502:	4b8d      	ldr	r3, [pc, #564]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d06c      	beq.n	80045e8 <HAL_RCC_OscConfig+0x130>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d168      	bne.n	80045e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e275      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x7a>
 8004524:	4b84      	ldr	r3, [pc, #528]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a83      	ldr	r2, [pc, #524]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e02e      	b.n	8004590 <HAL_RCC_OscConfig+0xd8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x9c>
 800453a:	4b7f      	ldr	r3, [pc, #508]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7e      	ldr	r2, [pc, #504]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b7c      	ldr	r3, [pc, #496]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a7b      	ldr	r2, [pc, #492]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800454c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e01d      	b.n	8004590 <HAL_RCC_OscConfig+0xd8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800455c:	d10c      	bne.n	8004578 <HAL_RCC_OscConfig+0xc0>
 800455e:	4b76      	ldr	r3, [pc, #472]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a75      	ldr	r2, [pc, #468]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	4b73      	ldr	r3, [pc, #460]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a72      	ldr	r2, [pc, #456]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e00b      	b.n	8004590 <HAL_RCC_OscConfig+0xd8>
 8004578:	4b6f      	ldr	r3, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a6e      	ldr	r2, [pc, #440]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800457e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a6b      	ldr	r2, [pc, #428]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800458a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d013      	beq.n	80045c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe f8fc 	bl	8002794 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fe f8f8 	bl	8002794 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e229      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	4b61      	ldr	r3, [pc, #388]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0xe8>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fe f8e8 	bl	8002794 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c8:	f7fe f8e4 	bl	8002794 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b64      	cmp	r3, #100	; 0x64
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e215      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	4b57      	ldr	r3, [pc, #348]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x110>
 80045e6:	e000      	b.n	80045ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d069      	beq.n	80046ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045f6:	4b50      	ldr	r3, [pc, #320]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004602:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b08      	cmp	r3, #8
 800460c:	d11c      	bne.n	8004648 <HAL_RCC_OscConfig+0x190>
 800460e:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d116      	bne.n	8004648 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461a:	4b47      	ldr	r3, [pc, #284]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_RCC_OscConfig+0x17a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d001      	beq.n	8004632 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e1e9      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004632:	4b41      	ldr	r3, [pc, #260]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	493d      	ldr	r1, [pc, #244]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004642:	4313      	orrs	r3, r2
 8004644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	e040      	b.n	80046ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d023      	beq.n	8004698 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004650:	4b39      	ldr	r3, [pc, #228]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a38      	ldr	r2, [pc, #224]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fe f89a 	bl	8002794 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004664:	f7fe f896 	bl	8002794 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e1c7      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004676:	4b30      	ldr	r3, [pc, #192]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004682:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4929      	ldr	r1, [pc, #164]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004692:	4313      	orrs	r3, r2
 8004694:	600b      	str	r3, [r1, #0]
 8004696:	e018      	b.n	80046ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a26      	ldr	r2, [pc, #152]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 800469e:	f023 0301 	bic.w	r3, r3, #1
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe f876 	bl	8002794 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ac:	f7fe f872 	bl	8002794 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1a3      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d038      	beq.n	8004748 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d019      	beq.n	8004712 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80046e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fe f853 	bl	8002794 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fe f84f 	bl	8002794 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e180      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x23a>
 8004710:	e01a      	b.n	8004748 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004716:	4a08      	ldr	r2, [pc, #32]	; (8004738 <HAL_RCC_OscConfig+0x280>)
 8004718:	f023 0301 	bic.w	r3, r3, #1
 800471c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471e:	f7fe f839 	bl	8002794 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004724:	e00a      	b.n	800473c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004726:	f7fe f835 	bl	8002794 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d903      	bls.n	800473c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e166      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
 8004738:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473c:	4b92      	ldr	r3, [pc, #584]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 800473e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ee      	bne.n	8004726 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 80a4 	beq.w	800489e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004756:	4b8c      	ldr	r3, [pc, #560]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10d      	bne.n	800477e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	4b89      	ldr	r3, [pc, #548]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	4a88      	ldr	r2, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	6413      	str	r3, [r2, #64]	; 0x40
 800476e:	4b86      	ldr	r3, [pc, #536]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477a:	2301      	movs	r3, #1
 800477c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477e:	4b83      	ldr	r3, [pc, #524]	; (800498c <HAL_RCC_OscConfig+0x4d4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d118      	bne.n	80047bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800478a:	4b80      	ldr	r3, [pc, #512]	; (800498c <HAL_RCC_OscConfig+0x4d4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a7f      	ldr	r2, [pc, #508]	; (800498c <HAL_RCC_OscConfig+0x4d4>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004796:	f7fd fffd 	bl	8002794 <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479e:	f7fd fff9 	bl	8002794 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	; 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e12a      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b0:	4b76      	ldr	r3, [pc, #472]	; (800498c <HAL_RCC_OscConfig+0x4d4>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d106      	bne.n	80047d2 <HAL_RCC_OscConfig+0x31a>
 80047c4:	4b70      	ldr	r3, [pc, #448]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80047c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c8:	4a6f      	ldr	r2, [pc, #444]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6713      	str	r3, [r2, #112]	; 0x70
 80047d0:	e02d      	b.n	800482e <HAL_RCC_OscConfig+0x376>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x33c>
 80047da:	4b6b      	ldr	r3, [pc, #428]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047de:	4a6a      	ldr	r2, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	6713      	str	r3, [r2, #112]	; 0x70
 80047e6:	4b68      	ldr	r3, [pc, #416]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80047e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ea:	4a67      	ldr	r2, [pc, #412]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80047ec:	f023 0304 	bic.w	r3, r3, #4
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70
 80047f2:	e01c      	b.n	800482e <HAL_RCC_OscConfig+0x376>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d10c      	bne.n	8004816 <HAL_RCC_OscConfig+0x35e>
 80047fc:	4b62      	ldr	r3, [pc, #392]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004800:	4a61      	ldr	r2, [pc, #388]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	6713      	str	r3, [r2, #112]	; 0x70
 8004808:	4b5f      	ldr	r3, [pc, #380]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480c:	4a5e      	ldr	r2, [pc, #376]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6713      	str	r3, [r2, #112]	; 0x70
 8004814:	e00b      	b.n	800482e <HAL_RCC_OscConfig+0x376>
 8004816:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4a5b      	ldr	r2, [pc, #364]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	6713      	str	r3, [r2, #112]	; 0x70
 8004822:	4b59      	ldr	r3, [pc, #356]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a58      	ldr	r2, [pc, #352]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004828:	f023 0304 	bic.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d015      	beq.n	8004862 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fd ffad 	bl	8002794 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fd ffa9 	bl	8002794 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0d8      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004854:	4b4c      	ldr	r3, [pc, #304]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ee      	beq.n	800483e <HAL_RCC_OscConfig+0x386>
 8004860:	e014      	b.n	800488c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004862:	f7fd ff97 	bl	8002794 <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004868:	e00a      	b.n	8004880 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fd ff93 	bl	8002794 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e0c2      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004880:	4b41      	ldr	r3, [pc, #260]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1ee      	bne.n	800486a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d105      	bne.n	800489e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004892:	4b3d      	ldr	r3, [pc, #244]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	4a3c      	ldr	r2, [pc, #240]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 80ae 	beq.w	8004a04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a8:	4b37      	ldr	r3, [pc, #220]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d06d      	beq.n	8004990 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d14b      	bne.n	8004954 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048bc:	4b32      	ldr	r3, [pc, #200]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a31      	ldr	r2, [pc, #196]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80048c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c8:	f7fd ff64 	bl	8002794 <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d0:	f7fd ff60 	bl	8002794 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e091      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	4b29      	ldr	r3, [pc, #164]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f0      	bne.n	80048d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	3b01      	subs	r3, #1
 8004908:	041b      	lsls	r3, r3, #16
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	071b      	lsls	r3, r3, #28
 800491a:	491b      	ldr	r1, [pc, #108]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a18      	ldr	r2, [pc, #96]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800492a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fd ff32 	bl	8002794 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004934:	f7fd ff2e 	bl	8002794 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e05f      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0x47c>
 8004952:	e057      	b.n	8004a04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0b      	ldr	r2, [pc, #44]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 800495a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fd ff18 	bl	8002794 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7fd ff14 	bl	8002794 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e045      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_RCC_OscConfig+0x4d0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x4b0>
 8004986:	e03d      	b.n	8004a04 <HAL_RCC_OscConfig+0x54c>
 8004988:	40023800 	.word	0x40023800
 800498c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004990:	4b1f      	ldr	r3, [pc, #124]	; (8004a10 <HAL_RCC_OscConfig+0x558>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d030      	beq.n	8004a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d129      	bne.n	8004a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d122      	bne.n	8004a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d119      	bne.n	8004a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d10f      	bne.n	8004a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800

08004a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0d0      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b6a      	ldr	r3, [pc, #424]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d910      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b67      	ldr	r3, [pc, #412]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 020f 	bic.w	r2, r3, #15
 8004a42:	4965      	ldr	r1, [pc, #404]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0b8      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d020      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a74:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a58      	ldr	r2, [pc, #352]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a52      	ldr	r2, [pc, #328]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b50      	ldr	r3, [pc, #320]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	494d      	ldr	r1, [pc, #308]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d040      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b47      	ldr	r3, [pc, #284]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d115      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07f      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e073      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06b      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4936      	ldr	r1, [pc, #216]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fd fe44 	bl	8002794 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fd fe40 	bl	8002794 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e053      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d210      	bcs.n	8004b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 020f 	bic.w	r2, r3, #15
 8004b4e:	4922      	ldr	r1, [pc, #136]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e032      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4916      	ldr	r1, [pc, #88]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	490e      	ldr	r1, [pc, #56]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba6:	f000 f821 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004baa:	4602      	mov	r2, r0
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	490a      	ldr	r1, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x1cc>)
 8004bb8:	5ccb      	ldrb	r3, [r1, r3]
 8004bba:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbe:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <HAL_RCC_ClockConfig+0x1d0>)
 8004bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <HAL_RCC_ClockConfig+0x1d4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fd fda0 	bl	800270c <HAL_InitTick>

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023c00 	.word	0x40023c00
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	0800dc24 	.word	0x0800dc24
 8004be4:	20000180 	.word	0x20000180
 8004be8:	20000184 	.word	0x20000184

08004bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b090      	sub	sp, #64	; 0x40
 8004bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d00d      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x40>
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	f200 80a1 	bhi.w	8004d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x34>
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c1e:	e09b      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b53      	ldr	r3, [pc, #332]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c24:	e09b      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c26:	4b53      	ldr	r3, [pc, #332]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c2a:	e098      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c2c:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c36:	4b4d      	ldr	r3, [pc, #308]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d028      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4b4a      	ldr	r3, [pc, #296]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	2200      	movs	r2, #0
 8004c4a:	623b      	str	r3, [r7, #32]
 8004c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c54:	2100      	movs	r1, #0
 8004c56:	4b47      	ldr	r3, [pc, #284]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c58:	fb03 f201 	mul.w	r2, r3, r1
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	fb00 f303 	mul.w	r3, r0, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	4a43      	ldr	r2, [pc, #268]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c66:	fba0 1202 	umull	r1, r2, r0, r2
 8004c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c72:	4413      	add	r3, r2
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c78:	2200      	movs	r2, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	61fa      	str	r2, [r7, #28]
 8004c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c86:	f7fb fcef 	bl	8000668 <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4613      	mov	r3, r2
 8004c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c92:	e053      	b.n	8004d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c94:	4b35      	ldr	r3, [pc, #212]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	099b      	lsrs	r3, r3, #6
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	617a      	str	r2, [r7, #20]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ca6:	f04f 0b00 	mov.w	fp, #0
 8004caa:	4652      	mov	r2, sl
 8004cac:	465b      	mov	r3, fp
 8004cae:	f04f 0000 	mov.w	r0, #0
 8004cb2:	f04f 0100 	mov.w	r1, #0
 8004cb6:	0159      	lsls	r1, r3, #5
 8004cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cbc:	0150      	lsls	r0, r2, #5
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8004cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cde:	ebb2 0408 	subs.w	r4, r2, r8
 8004ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	00eb      	lsls	r3, r5, #3
 8004cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cf4:	00e2      	lsls	r2, r4, #3
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	461d      	mov	r5, r3
 8004cfa:	eb14 030a 	adds.w	r3, r4, sl
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	eb45 030b 	adc.w	r3, r5, fp
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d12:	4629      	mov	r1, r5
 8004d14:	028b      	lsls	r3, r1, #10
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	028a      	lsls	r2, r1, #10
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d26:	2200      	movs	r2, #0
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	60fa      	str	r2, [r7, #12]
 8004d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d30:	f7fb fc9a 	bl	8000668 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d3c:	4b0b      	ldr	r3, [pc, #44]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d56:	e002      	b.n	8004d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3740      	adds	r7, #64	; 0x40
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	00f42400 	.word	0x00f42400
 8004d74:	017d7840 	.word	0x017d7840

08004d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000180 	.word	0x20000180

08004d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d94:	f7ff fff0 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0a9b      	lsrs	r3, r3, #10
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	; (8004db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	0800dc34 	.word	0x0800dc34

08004db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dbc:	f7ff ffdc 	bl	8004d78 <HAL_RCC_GetHCLKFreq>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	0b5b      	lsrs	r3, r3, #13
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	4903      	ldr	r1, [pc, #12]	; (8004ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dce:	5ccb      	ldrb	r3, [r1, r3]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	0800dc34 	.word	0x0800dc34

08004de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004df4:	2300      	movs	r3, #0
 8004df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e08:	4b69      	ldr	r3, [pc, #420]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	4a68      	ldr	r2, [pc, #416]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e12:	6093      	str	r3, [r2, #8]
 8004e14:	4b66      	ldr	r3, [pc, #408]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	4964      	ldr	r1, [pc, #400]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d017      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e3a:	4b5d      	ldr	r3, [pc, #372]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e48:	4959      	ldr	r1, [pc, #356]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e58:	d101      	bne.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e66:	2301      	movs	r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d017      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e76:	4b4e      	ldr	r3, [pc, #312]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	494a      	ldr	r1, [pc, #296]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e94:	d101      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e96:	2301      	movs	r3, #1
 8004e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 808b 	beq.w	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ec4:	4b3a      	ldr	r3, [pc, #232]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	4a39      	ldr	r2, [pc, #228]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ece:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed0:	4b37      	ldr	r3, [pc, #220]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed8:	60bb      	str	r3, [r7, #8]
 8004eda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004edc:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a34      	ldr	r2, [pc, #208]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee8:	f7fd fc54 	bl	8002794 <HAL_GetTick>
 8004eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef0:	f7fd fc50 	bl	8002794 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	; 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e38f      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f02:	4b2c      	ldr	r3, [pc, #176]	; (8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f0e:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d035      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d02e      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f2c:	4b20      	ldr	r3, [pc, #128]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f36:	4b1e      	ldr	r3, [pc, #120]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	4a1d      	ldr	r2, [pc, #116]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f4e:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f54:	4b16      	ldr	r3, [pc, #88]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d114      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fd fc18 	bl	8002794 <HAL_GetTick>
 8004f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f66:	e00a      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f68:	f7fd fc14 	bl	8002794 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e351      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f7e:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ee      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f96:	d111      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fa4:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fa6:	400b      	ands	r3, r1
 8004fa8:	4901      	ldr	r1, [pc, #4]	; (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	e00b      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	40007000 	.word	0x40007000
 8004fb8:	0ffffcff 	.word	0x0ffffcff
 8004fbc:	4bac      	ldr	r3, [pc, #688]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4aab      	ldr	r2, [pc, #684]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fc6:	6093      	str	r3, [r2, #8]
 8004fc8:	4ba9      	ldr	r3, [pc, #676]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd4:	49a6      	ldr	r1, [pc, #664]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fe6:	4ba2      	ldr	r3, [pc, #648]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fec:	4aa0      	ldr	r2, [pc, #640]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ff6:	4b9e      	ldr	r3, [pc, #632]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	499b      	ldr	r1, [pc, #620]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00a      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005014:	4b96      	ldr	r3, [pc, #600]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005022:	4993      	ldr	r1, [pc, #588]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005036:	4b8e      	ldr	r3, [pc, #568]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005044:	498a      	ldr	r1, [pc, #552]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005058:	4b85      	ldr	r3, [pc, #532]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005066:	4982      	ldr	r1, [pc, #520]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800507a:	4b7d      	ldr	r3, [pc, #500]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	4979      	ldr	r1, [pc, #484]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800509c:	4b74      	ldr	r3, [pc, #464]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a2:	f023 0203 	bic.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	4971      	ldr	r1, [pc, #452]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050be:	4b6c      	ldr	r3, [pc, #432]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	f023 020c 	bic.w	r2, r3, #12
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050cc:	4968      	ldr	r1, [pc, #416]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00a      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050e0:	4b63      	ldr	r3, [pc, #396]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ee:	4960      	ldr	r1, [pc, #384]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00a      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005102:	4b5b      	ldr	r3, [pc, #364]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005108:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	4957      	ldr	r1, [pc, #348]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005124:	4b52      	ldr	r3, [pc, #328]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005132:	494f      	ldr	r1, [pc, #316]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005146:	4b4a      	ldr	r3, [pc, #296]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005154:	4946      	ldr	r1, [pc, #280]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00a      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005168:	4b41      	ldr	r3, [pc, #260]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005176:	493e      	ldr	r1, [pc, #248]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00a      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800518a:	4b39      	ldr	r3, [pc, #228]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005190:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005198:	4935      	ldr	r1, [pc, #212]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051ac:	4b30      	ldr	r3, [pc, #192]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051ba:	492d      	ldr	r1, [pc, #180]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051ce:	4b28      	ldr	r3, [pc, #160]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051dc:	4924      	ldr	r1, [pc, #144]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ec:	d101      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051ee:	2301      	movs	r3, #1
 80051f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051fe:	2301      	movs	r3, #1
 8005200:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800520e:	4b18      	ldr	r3, [pc, #96]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005214:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800521c:	4914      	ldr	r1, [pc, #80]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005240:	490b      	ldr	r1, [pc, #44]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00f      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005264:	4902      	ldr	r1, [pc, #8]	; (8005270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800526c:	e002      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800526e:	bf00      	nop
 8005270:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005280:	4b8a      	ldr	r3, [pc, #552]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005286:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	4986      	ldr	r1, [pc, #536]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80052a4:	4b81      	ldr	r3, [pc, #516]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b4:	497d      	ldr	r1, [pc, #500]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d006      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80d6 	beq.w	800547c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052d0:	4b76      	ldr	r3, [pc, #472]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a75      	ldr	r2, [pc, #468]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052dc:	f7fd fa5a 	bl	8002794 <HAL_GetTick>
 80052e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052e4:	f7fd fa56 	bl	8002794 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b64      	cmp	r3, #100	; 0x64
 80052f0:	d901      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e195      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052f6:	4b6d      	ldr	r3, [pc, #436]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d021      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	2b00      	cmp	r3, #0
 8005314:	d11d      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005316:	4b65      	ldr	r3, [pc, #404]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800531c:	0c1b      	lsrs	r3, r3, #16
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005324:	4b61      	ldr	r3, [pc, #388]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532a:	0e1b      	lsrs	r3, r3, #24
 800532c:	f003 030f 	and.w	r3, r3, #15
 8005330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	019a      	lsls	r2, r3, #6
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	431a      	orrs	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	4958      	ldr	r1, [pc, #352]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005366:	d00a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02e      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800537c:	d129      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800537e:	4b4b      	ldr	r3, [pc, #300]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800538c:	4b47      	ldr	r3, [pc, #284]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005392:	0f1b      	lsrs	r3, r3, #28
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	019a      	lsls	r2, r3, #6
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	061b      	lsls	r3, r3, #24
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	071b      	lsls	r3, r3, #28
 80053b2:	493e      	ldr	r1, [pc, #248]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053ba:	4b3c      	ldr	r3, [pc, #240]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c0:	f023 021f 	bic.w	r2, r3, #31
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	3b01      	subs	r3, #1
 80053ca:	4938      	ldr	r1, [pc, #224]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01d      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053de:	4b33      	ldr	r3, [pc, #204]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053e4:	0e1b      	lsrs	r3, r3, #24
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053ec:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f2:	0f1b      	lsrs	r3, r3, #28
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	019a      	lsls	r2, r3, #6
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	431a      	orrs	r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	061b      	lsls	r3, r3, #24
 800540c:	431a      	orrs	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	071b      	lsls	r3, r3, #28
 8005412:	4926      	ldr	r1, [pc, #152]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d011      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	019a      	lsls	r2, r3, #6
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	071b      	lsls	r3, r3, #28
 8005442:	491a      	ldr	r1, [pc, #104]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800544a:	4b18      	ldr	r3, [pc, #96]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a17      	ldr	r2, [pc, #92]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005456:	f7fd f99d 	bl	8002794 <HAL_GetTick>
 800545a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800545c:	e008      	b.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800545e:	f7fd f999 	bl	8002794 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b64      	cmp	r3, #100	; 0x64
 800546a:	d901      	bls.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e0d8      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005470:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0f0      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b01      	cmp	r3, #1
 8005480:	f040 80ce 	bne.w	8005620 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a08      	ldr	r2, [pc, #32]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800548a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800548e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005490:	f7fd f980 	bl	8002794 <HAL_GetTick>
 8005494:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005496:	e00b      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005498:	f7fd f97c 	bl	8002794 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b64      	cmp	r3, #100	; 0x64
 80054a4:	d904      	bls.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0bb      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80054aa:	bf00      	nop
 80054ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054b0:	4b5e      	ldr	r3, [pc, #376]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054bc:	d0ec      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d009      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d02e      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d12a      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054e6:	4b51      	ldr	r3, [pc, #324]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054f4:	4b4d      	ldr	r3, [pc, #308]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	0f1b      	lsrs	r3, r3, #28
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	019a      	lsls	r2, r3, #6
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	041b      	lsls	r3, r3, #16
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	061b      	lsls	r3, r3, #24
 8005514:	431a      	orrs	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	071b      	lsls	r3, r3, #28
 800551a:	4944      	ldr	r1, [pc, #272]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800551c:	4313      	orrs	r3, r2
 800551e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005522:	4b42      	ldr	r3, [pc, #264]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005528:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	3b01      	subs	r3, #1
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	493d      	ldr	r1, [pc, #244]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d022      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800554c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005550:	d11d      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005552:	4b36      	ldr	r3, [pc, #216]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	0e1b      	lsrs	r3, r3, #24
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005560:	4b32      	ldr	r3, [pc, #200]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	0f1b      	lsrs	r3, r3, #28
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	019a      	lsls	r2, r3, #6
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	431a      	orrs	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	061b      	lsls	r3, r3, #24
 8005580:	431a      	orrs	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	071b      	lsls	r3, r3, #28
 8005586:	4929      	ldr	r1, [pc, #164]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d028      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800559c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a0:	0e1b      	lsrs	r3, r3, #24
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055a8:	4b20      	ldr	r3, [pc, #128]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ae:	0c1b      	lsrs	r3, r3, #16
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	019a      	lsls	r2, r3, #6
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	041b      	lsls	r3, r3, #16
 80055c0:	431a      	orrs	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	071b      	lsls	r3, r3, #28
 80055ce:	4917      	ldr	r1, [pc, #92]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055d6:	4b15      	ldr	r3, [pc, #84]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	4911      	ldr	r1, [pc, #68]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055ec:	4b0f      	ldr	r3, [pc, #60]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a0e      	ldr	r2, [pc, #56]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055f8:	f7fd f8cc 	bl	8002794 <HAL_GetTick>
 80055fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055fe:	e008      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005600:	f7fd f8c8 	bl	8002794 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	; 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e007      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800561a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561e:	d1ef      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40023800 	.word	0x40023800

08005630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e049      	b.n	80056d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fc fedc 	bl	8002414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f000 faca 	bl	8005c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d001      	beq.n	80056f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e054      	b.n	80057a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d022      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005722:	d01d      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d018      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d013      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <HAL_TIM_Base_Start_IT+0xdc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d00e      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d009      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x80>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d115      	bne.n	800578c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	4b19      	ldr	r3, [pc, #100]	; (80057cc <HAL_TIM_Base_Start_IT+0xec>)
 8005768:	4013      	ands	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b06      	cmp	r3, #6
 8005770:	d015      	beq.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005778:	d011      	beq.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578a:	e008      	b.n	800579e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e000      	b.n	80057a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40010000 	.word	0x40010000
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00
 80057c0:	40010400 	.word	0x40010400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40001800 	.word	0x40001800
 80057cc:	00010007 	.word	0x00010007

080057d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0202 	mvn.w	r2, #2
 80057fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9da 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f9cc 	bl	8005bb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f9dd 	bl	8005be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b04      	cmp	r3, #4
 8005838:	d122      	bne.n	8005880 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b04      	cmp	r3, #4
 8005846:	d11b      	bne.n	8005880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0204 	mvn.w	r2, #4
 8005850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2202      	movs	r2, #2
 8005856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f9b0 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 800586c:	e005      	b.n	800587a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f9a2 	bl	8005bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f9b3 	bl	8005be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b08      	cmp	r3, #8
 800588c:	d122      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b08      	cmp	r3, #8
 800589a:	d11b      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0208 	mvn.w	r2, #8
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2204      	movs	r2, #4
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f986 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f978 	bl	8005bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f989 	bl	8005be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	f003 0310 	and.w	r3, r3, #16
 80058de:	2b10      	cmp	r3, #16
 80058e0:	d122      	bne.n	8005928 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b10      	cmp	r3, #16
 80058ee:	d11b      	bne.n	8005928 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0210 	mvn.w	r2, #16
 80058f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2208      	movs	r2, #8
 80058fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f95c 	bl	8005bcc <HAL_TIM_IC_CaptureCallback>
 8005914:	e005      	b.n	8005922 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f94e 	bl	8005bb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f95f 	bl	8005be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b01      	cmp	r3, #1
 8005934:	d10e      	bne.n	8005954 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	2b01      	cmp	r3, #1
 8005942:	d107      	bne.n	8005954 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0201 	mvn.w	r2, #1
 800594c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f928 	bl	8005ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596c:	2b80      	cmp	r3, #128	; 0x80
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fb16 	bl	8005fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598e:	d10e      	bne.n	80059ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d107      	bne.n	80059ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fb09 	bl	8005fc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d10e      	bne.n	80059da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b40      	cmp	r3, #64	; 0x40
 80059c8:	d107      	bne.n	80059da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f90d 	bl	8005bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0320 	and.w	r3, r3, #32
 80059e4:	2b20      	cmp	r3, #32
 80059e6:	d10e      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0320 	and.w	r3, r3, #32
 80059f2:	2b20      	cmp	r3, #32
 80059f4:	d107      	bne.n	8005a06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f06f 0220 	mvn.w	r2, #32
 80059fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fac9 	bl	8005f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIM_ConfigClockSource+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e0b4      	b.n	8005b96 <HAL_TIM_ConfigClockSource+0x186>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	4b56      	ldr	r3, [pc, #344]	; (8005ba0 <HAL_TIM_ConfigClockSource+0x190>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a64:	d03e      	beq.n	8005ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6a:	f200 8087 	bhi.w	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a72:	f000 8086 	beq.w	8005b82 <HAL_TIM_ConfigClockSource+0x172>
 8005a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7a:	d87f      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b70      	cmp	r3, #112	; 0x70
 8005a7e:	d01a      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8005a80:	2b70      	cmp	r3, #112	; 0x70
 8005a82:	d87b      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a84:	2b60      	cmp	r3, #96	; 0x60
 8005a86:	d050      	beq.n	8005b2a <HAL_TIM_ConfigClockSource+0x11a>
 8005a88:	2b60      	cmp	r3, #96	; 0x60
 8005a8a:	d877      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a8c:	2b50      	cmp	r3, #80	; 0x50
 8005a8e:	d03c      	beq.n	8005b0a <HAL_TIM_ConfigClockSource+0xfa>
 8005a90:	2b50      	cmp	r3, #80	; 0x50
 8005a92:	d873      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a94:	2b40      	cmp	r3, #64	; 0x40
 8005a96:	d058      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0x13a>
 8005a98:	2b40      	cmp	r3, #64	; 0x40
 8005a9a:	d86f      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d064      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15a>
 8005aa0:	2b30      	cmp	r3, #48	; 0x30
 8005aa2:	d86b      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d060      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15a>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	d867      	bhi.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d05c      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d05a      	beq.n	8005b6a <HAL_TIM_ConfigClockSource+0x15a>
 8005ab4:	e062      	b.n	8005b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6899      	ldr	r1, [r3, #8]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f000 f9b9 	bl	8005e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	609a      	str	r2, [r3, #8]
      break;
 8005ae2:	e04f      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6899      	ldr	r1, [r3, #8]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f000 f9a2 	bl	8005e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b06:	609a      	str	r2, [r3, #8]
      break;
 8005b08:	e03c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f000 f916 	bl	8005d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2150      	movs	r1, #80	; 0x50
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f96f 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005b28:	e02c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	6859      	ldr	r1, [r3, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	461a      	mov	r2, r3
 8005b38:	f000 f935 	bl	8005da6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2160      	movs	r1, #96	; 0x60
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f95f 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005b48:	e01c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6859      	ldr	r1, [r3, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	461a      	mov	r2, r3
 8005b58:	f000 f8f6 	bl	8005d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2140      	movs	r1, #64	; 0x40
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f94f 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005b68:	e00c      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4610      	mov	r0, r2
 8005b76:	f000 f946 	bl	8005e06 <TIM_ITRx_SetConfig>
      break;
 8005b7a:	e003      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	e000      	b.n	8005b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	fffeff88 	.word	0xfffeff88

08005ba4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a40      	ldr	r2, [pc, #256]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c26:	d00f      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a3d      	ldr	r2, [pc, #244]	; (8005d20 <TIM_Base_SetConfig+0x118>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00b      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3c      	ldr	r2, [pc, #240]	; (8005d24 <TIM_Base_SetConfig+0x11c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3b      	ldr	r2, [pc, #236]	; (8005d28 <TIM_Base_SetConfig+0x120>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a3a      	ldr	r2, [pc, #232]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d108      	bne.n	8005c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2f      	ldr	r2, [pc, #188]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d027      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2c      	ldr	r2, [pc, #176]	; (8005d20 <TIM_Base_SetConfig+0x118>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d023      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2b      	ldr	r2, [pc, #172]	; (8005d24 <TIM_Base_SetConfig+0x11c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01f      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2a      	ldr	r2, [pc, #168]	; (8005d28 <TIM_Base_SetConfig+0x120>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d01b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a29      	ldr	r2, [pc, #164]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d017      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <TIM_Base_SetConfig+0x128>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d013      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a27      	ldr	r2, [pc, #156]	; (8005d34 <TIM_Base_SetConfig+0x12c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00f      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a26      	ldr	r2, [pc, #152]	; (8005d38 <TIM_Base_SetConfig+0x130>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00b      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a25      	ldr	r2, [pc, #148]	; (8005d3c <TIM_Base_SetConfig+0x134>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d007      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a24      	ldr	r2, [pc, #144]	; (8005d40 <TIM_Base_SetConfig+0x138>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d003      	beq.n	8005cba <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a23      	ldr	r2, [pc, #140]	; (8005d44 <TIM_Base_SetConfig+0x13c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d108      	bne.n	8005ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <TIM_Base_SetConfig+0x114>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d003      	beq.n	8005d00 <TIM_Base_SetConfig+0xf8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <TIM_Base_SetConfig+0x124>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d103      	bne.n	8005d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	615a      	str	r2, [r3, #20]
}
 8005d0e:	bf00      	nop
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	40010000 	.word	0x40010000
 8005d20:	40000400 	.word	0x40000400
 8005d24:	40000800 	.word	0x40000800
 8005d28:	40000c00 	.word	0x40000c00
 8005d2c:	40010400 	.word	0x40010400
 8005d30:	40014000 	.word	0x40014000
 8005d34:	40014400 	.word	0x40014400
 8005d38:	40014800 	.word	0x40014800
 8005d3c:	40001800 	.word	0x40001800
 8005d40:	40001c00 	.word	0x40001c00
 8005d44:	40002000 	.word	0x40002000

08005d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f023 0201 	bic.w	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f023 030a 	bic.w	r3, r3, #10
 8005d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	621a      	str	r2, [r3, #32]
}
 8005d9a:	bf00      	nop
 8005d9c:	371c      	adds	r7, #28
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b087      	sub	sp, #28
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0210 	bic.w	r2, r3, #16
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	031b      	lsls	r3, r3, #12
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	621a      	str	r2, [r3, #32]
}
 8005dfa:	bf00      	nop
 8005dfc:	371c      	adds	r7, #28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	f043 0307 	orr.w	r3, r3, #7
 8005e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	609a      	str	r2, [r3, #8]
}
 8005e30:	bf00      	nop
 8005e32:	3714      	adds	r7, #20
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	021a      	lsls	r2, r3, #8
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	609a      	str	r2, [r3, #8]
}
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e06d      	b.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a30      	ldr	r2, [pc, #192]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d004      	beq.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a2f      	ldr	r2, [pc, #188]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d108      	bne.n	8005eda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ece:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a20      	ldr	r2, [pc, #128]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d022      	beq.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f06:	d01d      	beq.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d018      	beq.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d013      	beq.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1a      	ldr	r2, [pc, #104]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00e      	beq.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a16      	ldr	r2, [pc, #88]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d10c      	bne.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	40010000 	.word	0x40010000
 8005f80:	40010400 	.word	0x40010400
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000800 	.word	0x40000800
 8005f8c:	40000c00 	.word	0x40000c00
 8005f90:	40014000 	.word	0x40014000
 8005f94:	40001800 	.word	0x40001800

08005f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e040      	b.n	8006068 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc fa90 	bl	800251c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2224      	movs	r2, #36	; 0x24
 8006000:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fc20 	bl	8006858 <UART_SetConfig>
 8006018:	4603      	mov	r3, r0
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e022      	b.n	8006068 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d002      	beq.n	8006030 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fe78 	bl	8006d20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800603e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689a      	ldr	r2, [r3, #8]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800604e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 feff 	bl	8006e64 <UART_CheckIdleState>
 8006066:	4603      	mov	r3, r0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e048      	b.n	8006114 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc fa42 	bl	800251c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2224      	movs	r2, #36	; 0x24
 800609c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fbd2 	bl	8006858 <UART_SetConfig>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e02a      	b.n	8006114 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fe2a 	bl	8006d20 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80060ea:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0208 	orr.w	r2, r2, #8
 80060fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fea9 	bl	8006e64 <UART_CheckIdleState>
 8006112:	4603      	mov	r3, r0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	; 0x28
 8006120:	af02      	add	r7, sp, #8
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	4613      	mov	r3, r2
 800612a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006130:	2b20      	cmp	r3, #32
 8006132:	f040 8081 	bne.w	8006238 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <HAL_UART_Transmit+0x26>
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e079      	b.n	800623a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800614c:	2b01      	cmp	r3, #1
 800614e:	d101      	bne.n	8006154 <HAL_UART_Transmit+0x38>
 8006150:	2302      	movs	r3, #2
 8006152:	e072      	b.n	800623a <HAL_UART_Transmit+0x11e>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2221      	movs	r2, #33	; 0x21
 8006168:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800616a:	f7fc fb13 	bl	8002794 <HAL_GetTick>
 800616e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006188:	d108      	bne.n	800619c <HAL_UART_Transmit+0x80>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e003      	b.n	80061a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061ac:	e02c      	b.n	8006208 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2180      	movs	r1, #128	; 0x80
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fe9c 	bl	8006ef6 <UART_WaitOnFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e038      	b.n	800623a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	3302      	adds	r3, #2
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e007      	b.n	80061f6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	3301      	adds	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1cc      	bne.n	80061ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2200      	movs	r2, #0
 800621c:	2140      	movs	r1, #64	; 0x40
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 fe69 	bl	8006ef6 <UART_WaitOnFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e005      	b.n	800623a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	e000      	b.n	800623a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006238:	2302      	movs	r3, #2
  }
}
 800623a:	4618      	mov	r0, r3
 800623c:	3720      	adds	r7, #32
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
	...

08006244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b0ba      	sub	sp, #232	; 0xe8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800626a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800626e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006272:	4013      	ands	r3, r2
 8006274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d115      	bne.n	80062ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00f      	beq.n	80062ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 82a4 	beq.w	80067ea <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
      }
      return;
 80062aa:	e29e      	b.n	80067ea <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 8117 	beq.w	80064e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80062c6:	4b85      	ldr	r3, [pc, #532]	; (80064dc <HAL_UART_IRQHandler+0x298>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 810a 	beq.w	80064e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d011      	beq.n	8006300 <HAL_UART_IRQHandler+0xbc>
 80062dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00b      	beq.n	8006300 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2201      	movs	r2, #1
 80062ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f6:	f043 0201 	orr.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d011      	beq.n	8006330 <HAL_UART_IRQHandler+0xec>
 800630c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2202      	movs	r2, #2
 800631e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006326:	f043 0204 	orr.w	r2, r3, #4
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d011      	beq.n	8006360 <HAL_UART_IRQHandler+0x11c>
 800633c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2204      	movs	r2, #4
 800634e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006356:	f043 0202 	orr.w	r2, r3, #2
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d017      	beq.n	800639c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800636c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006370:	f003 0320 	and.w	r3, r3, #32
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2208      	movs	r2, #8
 800638a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006392:	f043 0208 	orr.w	r2, r3, #8
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800639c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <HAL_UART_IRQHandler+0x18a>
 80063a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00c      	beq.n	80063ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c4:	f043 0220 	orr.w	r2, r3, #32
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 820a 	beq.w	80067ee <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00d      	beq.n	8006402 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006408:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d005      	beq.n	8006426 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800641a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800641e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04f      	beq.n	80064c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fe29 	bl	800707e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d141      	bne.n	80064be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3308      	adds	r3, #8
 8006440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006454:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006466:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800646a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006472:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800647e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1d9      	bne.n	800643a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	2b00      	cmp	r3, #0
 800648c:	d013      	beq.n	80064b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006492:	4a13      	ldr	r2, [pc, #76]	; (80064e0 <HAL_UART_IRQHandler+0x29c>)
 8006494:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649a:	4618      	mov	r0, r3
 800649c:	f7fd f80d 	bl	80034ba <HAL_DMA_Abort_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d017      	beq.n	80064d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80064b0:	4610      	mov	r0, r2
 80064b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	e00f      	b.n	80064d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f9ae 	bl	8006818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	e00b      	b.n	80064d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f9aa 	bl	8006818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c4:	e007      	b.n	80064d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f9a6 	bl	8006818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80064d4:	e18b      	b.n	80067ee <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d6:	bf00      	nop
    return;
 80064d8:	e189      	b.n	80067ee <HAL_UART_IRQHandler+0x5aa>
 80064da:	bf00      	nop
 80064dc:	04000120 	.word	0x04000120
 80064e0:	08007145 	.word	0x08007145

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	f040 8144 	bne.w	8006776 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 813d 	beq.w	8006776 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 8136 	beq.w	8006776 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2210      	movs	r2, #16
 8006510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	f040 80b2 	bne.w	8006686 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800652e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 815d 	beq.w	80067f2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800653e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006542:	429a      	cmp	r2, r3
 8006544:	f080 8155 	bcs.w	80067f2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800654e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	69db      	ldr	r3, [r3, #28]
 8006558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655c:	f000 8085 	beq.w	800666a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006574:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800657c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800658a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800658e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006596:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80065a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1da      	bne.n	8006560 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80065ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065bc:	f023 0301 	bic.w	r3, r3, #1
 80065c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3308      	adds	r3, #8
 80065ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80065ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80065d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e1      	bne.n	80065aa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3308      	adds	r3, #8
 80065ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3308      	adds	r3, #8
 8006606:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800660a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800660c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006610:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e3      	bne.n	80065e6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2220      	movs	r2, #32
 8006622:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800663a:	f023 0310 	bic.w	r3, r3, #16
 800663e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800664c:	65bb      	str	r3, [r7, #88]	; 0x58
 800664e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800665a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e4      	bne.n	800662a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	4618      	mov	r0, r3
 8006666:	f7fc feb8 	bl	80033da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006676:	b29b      	uxth	r3, r3
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	b29b      	uxth	r3, r3
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f8d4 	bl	800682c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006684:	e0b5      	b.n	80067f2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006692:	b29b      	uxth	r3, r3
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80a7 	beq.w	80067f6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80066a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 80a2 	beq.w	80067f6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d4:	647b      	str	r3, [r7, #68]	; 0x44
 80066d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e4      	bne.n	80066b2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3308      	adds	r3, #8
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	e853 3f00 	ldrex	r3, [r3]
 80066f6:	623b      	str	r3, [r7, #32]
   return(result);
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	f023 0301 	bic.w	r3, r3, #1
 80066fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800670c:	633a      	str	r2, [r7, #48]	; 0x30
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e3      	bne.n	80066e8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	e853 3f00 	ldrex	r3, [r3]
 800673e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0310 	bic.w	r3, r3, #16
 8006746:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006754:	61fb      	str	r3, [r7, #28]
 8006756:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006758:	69b9      	ldr	r1, [r7, #24]
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	e841 2300 	strex	r3, r2, [r1]
 8006760:	617b      	str	r3, [r7, #20]
   return(result);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1e4      	bne.n	8006732 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006768:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f85c 	bl	800682c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006774:	e03f      	b.n	80067f6 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800677a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <HAL_UART_IRQHandler+0x55c>
 8006782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d008      	beq.n	80067a0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006796:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f853 	bl	8006844 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800679e:	e02d      	b.n	80067fc <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00e      	beq.n	80067ca <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01c      	beq.n	80067fa <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
    }
    return;
 80067c8:	e017      	b.n	80067fa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d012      	beq.n	80067fc <HAL_UART_IRQHandler+0x5b8>
 80067d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00c      	beq.n	80067fc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fcc4 	bl	8007170 <UART_EndTransmit_IT>
    return;
 80067e8:	e008      	b.n	80067fc <HAL_UART_IRQHandler+0x5b8>
      return;
 80067ea:	bf00      	nop
 80067ec:	e006      	b.n	80067fc <HAL_UART_IRQHandler+0x5b8>
    return;
 80067ee:	bf00      	nop
 80067f0:	e004      	b.n	80067fc <HAL_UART_IRQHandler+0x5b8>
      return;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <HAL_UART_IRQHandler+0x5b8>
      return;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <HAL_UART_IRQHandler+0x5b8>
    return;
 80067fa:	bf00      	nop
  }

}
 80067fc:	37e8      	adds	r7, #232	; 0xe8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop

08006804 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	431a      	orrs	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4ba6      	ldr	r3, [pc, #664]	; (8006b1c <UART_SetConfig+0x2c4>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	6979      	ldr	r1, [r7, #20]
 800688c:	430b      	orrs	r3, r1
 800688e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a94      	ldr	r2, [pc, #592]	; (8006b20 <UART_SetConfig+0x2c8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d120      	bne.n	8006916 <UART_SetConfig+0xbe>
 80068d4:	4b93      	ldr	r3, [pc, #588]	; (8006b24 <UART_SetConfig+0x2cc>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d816      	bhi.n	8006910 <UART_SetConfig+0xb8>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <UART_SetConfig+0x90>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	080068f9 	.word	0x080068f9
 80068ec:	08006905 	.word	0x08006905
 80068f0:	080068ff 	.word	0x080068ff
 80068f4:	0800690b 	.word	0x0800690b
 80068f8:	2301      	movs	r3, #1
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e150      	b.n	8006ba0 <UART_SetConfig+0x348>
 80068fe:	2302      	movs	r3, #2
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e14d      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006904:	2304      	movs	r3, #4
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e14a      	b.n	8006ba0 <UART_SetConfig+0x348>
 800690a:	2308      	movs	r3, #8
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e147      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006910:	2310      	movs	r3, #16
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e144      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a83      	ldr	r2, [pc, #524]	; (8006b28 <UART_SetConfig+0x2d0>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d132      	bne.n	8006986 <UART_SetConfig+0x12e>
 8006920:	4b80      	ldr	r3, [pc, #512]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b0c      	cmp	r3, #12
 800692c:	d828      	bhi.n	8006980 <UART_SetConfig+0x128>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0xdc>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006969 	.word	0x08006969
 8006938:	08006981 	.word	0x08006981
 800693c:	08006981 	.word	0x08006981
 8006940:	08006981 	.word	0x08006981
 8006944:	08006975 	.word	0x08006975
 8006948:	08006981 	.word	0x08006981
 800694c:	08006981 	.word	0x08006981
 8006950:	08006981 	.word	0x08006981
 8006954:	0800696f 	.word	0x0800696f
 8006958:	08006981 	.word	0x08006981
 800695c:	08006981 	.word	0x08006981
 8006960:	08006981 	.word	0x08006981
 8006964:	0800697b 	.word	0x0800697b
 8006968:	2300      	movs	r3, #0
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e118      	b.n	8006ba0 <UART_SetConfig+0x348>
 800696e:	2302      	movs	r3, #2
 8006970:	77fb      	strb	r3, [r7, #31]
 8006972:	e115      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006974:	2304      	movs	r3, #4
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e112      	b.n	8006ba0 <UART_SetConfig+0x348>
 800697a:	2308      	movs	r3, #8
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e10f      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006980:	2310      	movs	r3, #16
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e10c      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a68      	ldr	r2, [pc, #416]	; (8006b2c <UART_SetConfig+0x2d4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d120      	bne.n	80069d2 <UART_SetConfig+0x17a>
 8006990:	4b64      	ldr	r3, [pc, #400]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006996:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800699a:	2b30      	cmp	r3, #48	; 0x30
 800699c:	d013      	beq.n	80069c6 <UART_SetConfig+0x16e>
 800699e:	2b30      	cmp	r3, #48	; 0x30
 80069a0:	d814      	bhi.n	80069cc <UART_SetConfig+0x174>
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d009      	beq.n	80069ba <UART_SetConfig+0x162>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d810      	bhi.n	80069cc <UART_SetConfig+0x174>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <UART_SetConfig+0x15c>
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d006      	beq.n	80069c0 <UART_SetConfig+0x168>
 80069b2:	e00b      	b.n	80069cc <UART_SetConfig+0x174>
 80069b4:	2300      	movs	r3, #0
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	e0f2      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069ba:	2302      	movs	r3, #2
 80069bc:	77fb      	strb	r3, [r7, #31]
 80069be:	e0ef      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069c0:	2304      	movs	r3, #4
 80069c2:	77fb      	strb	r3, [r7, #31]
 80069c4:	e0ec      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069c6:	2308      	movs	r3, #8
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e0e9      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069cc:	2310      	movs	r3, #16
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e0e6      	b.n	8006ba0 <UART_SetConfig+0x348>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a56      	ldr	r2, [pc, #344]	; (8006b30 <UART_SetConfig+0x2d8>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d120      	bne.n	8006a1e <UART_SetConfig+0x1c6>
 80069dc:	4b51      	ldr	r3, [pc, #324]	; (8006b24 <UART_SetConfig+0x2cc>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069e6:	2bc0      	cmp	r3, #192	; 0xc0
 80069e8:	d013      	beq.n	8006a12 <UART_SetConfig+0x1ba>
 80069ea:	2bc0      	cmp	r3, #192	; 0xc0
 80069ec:	d814      	bhi.n	8006a18 <UART_SetConfig+0x1c0>
 80069ee:	2b80      	cmp	r3, #128	; 0x80
 80069f0:	d009      	beq.n	8006a06 <UART_SetConfig+0x1ae>
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d810      	bhi.n	8006a18 <UART_SetConfig+0x1c0>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <UART_SetConfig+0x1a8>
 80069fa:	2b40      	cmp	r3, #64	; 0x40
 80069fc:	d006      	beq.n	8006a0c <UART_SetConfig+0x1b4>
 80069fe:	e00b      	b.n	8006a18 <UART_SetConfig+0x1c0>
 8006a00:	2300      	movs	r3, #0
 8006a02:	77fb      	strb	r3, [r7, #31]
 8006a04:	e0cc      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a06:	2302      	movs	r3, #2
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e0c9      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a0c:	2304      	movs	r3, #4
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e0c6      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a12:	2308      	movs	r3, #8
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e0c3      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a18:	2310      	movs	r3, #16
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e0c0      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a44      	ldr	r2, [pc, #272]	; (8006b34 <UART_SetConfig+0x2dc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d125      	bne.n	8006a74 <UART_SetConfig+0x21c>
 8006a28:	4b3e      	ldr	r3, [pc, #248]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a36:	d017      	beq.n	8006a68 <UART_SetConfig+0x210>
 8006a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3c:	d817      	bhi.n	8006a6e <UART_SetConfig+0x216>
 8006a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a42:	d00b      	beq.n	8006a5c <UART_SetConfig+0x204>
 8006a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a48:	d811      	bhi.n	8006a6e <UART_SetConfig+0x216>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <UART_SetConfig+0x1fe>
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a52:	d006      	beq.n	8006a62 <UART_SetConfig+0x20a>
 8006a54:	e00b      	b.n	8006a6e <UART_SetConfig+0x216>
 8006a56:	2300      	movs	r3, #0
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e0a1      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e09e      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a62:	2304      	movs	r3, #4
 8006a64:	77fb      	strb	r3, [r7, #31]
 8006a66:	e09b      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a68:	2308      	movs	r3, #8
 8006a6a:	77fb      	strb	r3, [r7, #31]
 8006a6c:	e098      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a6e:	2310      	movs	r3, #16
 8006a70:	77fb      	strb	r3, [r7, #31]
 8006a72:	e095      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2f      	ldr	r2, [pc, #188]	; (8006b38 <UART_SetConfig+0x2e0>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d125      	bne.n	8006aca <UART_SetConfig+0x272>
 8006a7e:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a8c:	d017      	beq.n	8006abe <UART_SetConfig+0x266>
 8006a8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a92:	d817      	bhi.n	8006ac4 <UART_SetConfig+0x26c>
 8006a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a98:	d00b      	beq.n	8006ab2 <UART_SetConfig+0x25a>
 8006a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a9e:	d811      	bhi.n	8006ac4 <UART_SetConfig+0x26c>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <UART_SetConfig+0x254>
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa8:	d006      	beq.n	8006ab8 <UART_SetConfig+0x260>
 8006aaa:	e00b      	b.n	8006ac4 <UART_SetConfig+0x26c>
 8006aac:	2301      	movs	r3, #1
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e076      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e073      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006ab8:	2304      	movs	r3, #4
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e070      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006abe:	2308      	movs	r3, #8
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e06d      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e06a      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1b      	ldr	r2, [pc, #108]	; (8006b3c <UART_SetConfig+0x2e4>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d138      	bne.n	8006b46 <UART_SetConfig+0x2ee>
 8006ad4:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <UART_SetConfig+0x2cc>)
 8006ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ada:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006ade:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae2:	d017      	beq.n	8006b14 <UART_SetConfig+0x2bc>
 8006ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae8:	d82a      	bhi.n	8006b40 <UART_SetConfig+0x2e8>
 8006aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aee:	d00b      	beq.n	8006b08 <UART_SetConfig+0x2b0>
 8006af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af4:	d824      	bhi.n	8006b40 <UART_SetConfig+0x2e8>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <UART_SetConfig+0x2aa>
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	d006      	beq.n	8006b0e <UART_SetConfig+0x2b6>
 8006b00:	e01e      	b.n	8006b40 <UART_SetConfig+0x2e8>
 8006b02:	2300      	movs	r3, #0
 8006b04:	77fb      	strb	r3, [r7, #31]
 8006b06:	e04b      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b08:	2302      	movs	r3, #2
 8006b0a:	77fb      	strb	r3, [r7, #31]
 8006b0c:	e048      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b0e:	2304      	movs	r3, #4
 8006b10:	77fb      	strb	r3, [r7, #31]
 8006b12:	e045      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b14:	2308      	movs	r3, #8
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e042      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b1a:	bf00      	nop
 8006b1c:	efff69f3 	.word	0xefff69f3
 8006b20:	40011000 	.word	0x40011000
 8006b24:	40023800 	.word	0x40023800
 8006b28:	40004400 	.word	0x40004400
 8006b2c:	40004800 	.word	0x40004800
 8006b30:	40004c00 	.word	0x40004c00
 8006b34:	40005000 	.word	0x40005000
 8006b38:	40011400 	.word	0x40011400
 8006b3c:	40007800 	.word	0x40007800
 8006b40:	2310      	movs	r3, #16
 8006b42:	77fb      	strb	r3, [r7, #31]
 8006b44:	e02c      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a72      	ldr	r2, [pc, #456]	; (8006d14 <UART_SetConfig+0x4bc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d125      	bne.n	8006b9c <UART_SetConfig+0x344>
 8006b50:	4b71      	ldr	r3, [pc, #452]	; (8006d18 <UART_SetConfig+0x4c0>)
 8006b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b5e:	d017      	beq.n	8006b90 <UART_SetConfig+0x338>
 8006b60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b64:	d817      	bhi.n	8006b96 <UART_SetConfig+0x33e>
 8006b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6a:	d00b      	beq.n	8006b84 <UART_SetConfig+0x32c>
 8006b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b70:	d811      	bhi.n	8006b96 <UART_SetConfig+0x33e>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <UART_SetConfig+0x326>
 8006b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b7a:	d006      	beq.n	8006b8a <UART_SetConfig+0x332>
 8006b7c:	e00b      	b.n	8006b96 <UART_SetConfig+0x33e>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e00d      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b84:	2302      	movs	r3, #2
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e00a      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b8a:	2304      	movs	r3, #4
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e007      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b90:	2308      	movs	r3, #8
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e004      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b96:	2310      	movs	r3, #16
 8006b98:	77fb      	strb	r3, [r7, #31]
 8006b9a:	e001      	b.n	8006ba0 <UART_SetConfig+0x348>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ba8:	d15b      	bne.n	8006c62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006baa:	7ffb      	ldrb	r3, [r7, #31]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d828      	bhi.n	8006c02 <UART_SetConfig+0x3aa>
 8006bb0:	a201      	add	r2, pc, #4	; (adr r2, 8006bb8 <UART_SetConfig+0x360>)
 8006bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb6:	bf00      	nop
 8006bb8:	08006bdd 	.word	0x08006bdd
 8006bbc:	08006be5 	.word	0x08006be5
 8006bc0:	08006bed 	.word	0x08006bed
 8006bc4:	08006c03 	.word	0x08006c03
 8006bc8:	08006bf3 	.word	0x08006bf3
 8006bcc:	08006c03 	.word	0x08006c03
 8006bd0:	08006c03 	.word	0x08006c03
 8006bd4:	08006c03 	.word	0x08006c03
 8006bd8:	08006bfb 	.word	0x08006bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bdc:	f7fe f8d8 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8006be0:	61b8      	str	r0, [r7, #24]
        break;
 8006be2:	e013      	b.n	8006c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006be4:	f7fe f8e8 	bl	8004db8 <HAL_RCC_GetPCLK2Freq>
 8006be8:	61b8      	str	r0, [r7, #24]
        break;
 8006bea:	e00f      	b.n	8006c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bec:	4b4b      	ldr	r3, [pc, #300]	; (8006d1c <UART_SetConfig+0x4c4>)
 8006bee:	61bb      	str	r3, [r7, #24]
        break;
 8006bf0:	e00c      	b.n	8006c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fd fffb 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8006bf6:	61b8      	str	r0, [r7, #24]
        break;
 8006bf8:	e008      	b.n	8006c0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bfe:	61bb      	str	r3, [r7, #24]
        break;
 8006c00:	e004      	b.n	8006c0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	77bb      	strb	r3, [r7, #30]
        break;
 8006c0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d074      	beq.n	8006cfc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	005a      	lsls	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	085b      	lsrs	r3, r3, #1
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b0f      	cmp	r3, #15
 8006c2c:	d916      	bls.n	8006c5c <UART_SetConfig+0x404>
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c34:	d212      	bcs.n	8006c5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f023 030f 	bic.w	r3, r3, #15
 8006c3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	89fb      	ldrh	r3, [r7, #14]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	89fa      	ldrh	r2, [r7, #14]
 8006c58:	60da      	str	r2, [r3, #12]
 8006c5a:	e04f      	b.n	8006cfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77bb      	strb	r3, [r7, #30]
 8006c60:	e04c      	b.n	8006cfc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c62:	7ffb      	ldrb	r3, [r7, #31]
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d828      	bhi.n	8006cba <UART_SetConfig+0x462>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <UART_SetConfig+0x418>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006c9d 	.word	0x08006c9d
 8006c78:	08006ca5 	.word	0x08006ca5
 8006c7c:	08006cbb 	.word	0x08006cbb
 8006c80:	08006cab 	.word	0x08006cab
 8006c84:	08006cbb 	.word	0x08006cbb
 8006c88:	08006cbb 	.word	0x08006cbb
 8006c8c:	08006cbb 	.word	0x08006cbb
 8006c90:	08006cb3 	.word	0x08006cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c94:	f7fe f87c 	bl	8004d90 <HAL_RCC_GetPCLK1Freq>
 8006c98:	61b8      	str	r0, [r7, #24]
        break;
 8006c9a:	e013      	b.n	8006cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c9c:	f7fe f88c 	bl	8004db8 <HAL_RCC_GetPCLK2Freq>
 8006ca0:	61b8      	str	r0, [r7, #24]
        break;
 8006ca2:	e00f      	b.n	8006cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <UART_SetConfig+0x4c4>)
 8006ca6:	61bb      	str	r3, [r7, #24]
        break;
 8006ca8:	e00c      	b.n	8006cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006caa:	f7fd ff9f 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8006cae:	61b8      	str	r0, [r7, #24]
        break;
 8006cb0:	e008      	b.n	8006cc4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb6:	61bb      	str	r3, [r7, #24]
        break;
 8006cb8:	e004      	b.n	8006cc4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006cc2:	bf00      	nop
    }

    if (pclk != 0U)
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d018      	beq.n	8006cfc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	085a      	lsrs	r2, r3, #1
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	441a      	add	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cdc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d909      	bls.n	8006cf8 <UART_SetConfig+0x4a0>
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cea:	d205      	bcs.n	8006cf8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60da      	str	r2, [r3, #12]
 8006cf6:	e001      	b.n	8006cfc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d08:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40007c00 	.word	0x40007c00
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	00f42400 	.word	0x00f42400

08006d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00a      	beq.n	8006d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	f003 0310 	and.w	r3, r3, #16
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00a      	beq.n	8006df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d01a      	beq.n	8006e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1e:	d10a      	bne.n	8006e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e74:	f7fb fc8e 	bl	8002794 <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0308 	and.w	r3, r3, #8
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d10e      	bne.n	8006ea6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f82d 	bl	8006ef6 <UART_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e023      	b.n	8006eee <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	d10e      	bne.n	8006ed2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f817 	bl	8006ef6 <UART_WaitOnFlagUntilTimeout>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e00d      	b.n	8006eee <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b09c      	sub	sp, #112	; 0x70
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	603b      	str	r3, [r7, #0]
 8006f02:	4613      	mov	r3, r2
 8006f04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f06:	e0a5      	b.n	8007054 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0e:	f000 80a1 	beq.w	8007054 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f12:	f7fb fc3f 	bl	8002794 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d302      	bcc.n	8006f28 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d13e      	bne.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f3c:	667b      	str	r3, [r7, #100]	; 0x64
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	461a      	mov	r2, r3
 8006f44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f48:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e6      	bne.n	8006f28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6c:	f023 0301 	bic.w	r3, r3, #1
 8006f70:	663b      	str	r3, [r7, #96]	; 0x60
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	3308      	adds	r3, #8
 8006f78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e5      	bne.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2220      	movs	r2, #32
 8006f92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2220      	movs	r2, #32
 8006f98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e067      	b.n	8007076 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d04f      	beq.n	8007054 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc2:	d147      	bne.n	8007054 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fcc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fec:	637b      	str	r3, [r7, #52]	; 0x34
 8006fee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e6      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	613b      	str	r3, [r7, #16]
   return(result);
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	66bb      	str	r3, [r7, #104]	; 0x68
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007020:	623a      	str	r2, [r7, #32]
 8007022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	69f9      	ldr	r1, [r7, #28]
 8007026:	6a3a      	ldr	r2, [r7, #32]
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	61bb      	str	r3, [r7, #24]
   return(result);
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e5      	bne.n	8007000 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2220      	movs	r2, #32
 8007038:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2220      	movs	r2, #32
 800703e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2220      	movs	r2, #32
 8007044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e010      	b.n	8007076 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	69da      	ldr	r2, [r3, #28]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4013      	ands	r3, r2
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	429a      	cmp	r2, r3
 8007062:	bf0c      	ite	eq
 8007064:	2301      	moveq	r3, #1
 8007066:	2300      	movne	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	429a      	cmp	r2, r3
 8007070:	f43f af4a 	beq.w	8006f08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3770      	adds	r7, #112	; 0x70
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800707e:	b480      	push	{r7}
 8007080:	b095      	sub	sp, #84	; 0x54
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800709a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	461a      	mov	r2, r3
 80070a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a4:	643b      	str	r3, [r7, #64]	; 0x40
 80070a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e6      	bne.n	8007086 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d118      	bne.n	8007126 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	60bb      	str	r3, [r7, #8]
   return(result);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f023 0310 	bic.w	r3, r3, #16
 8007108:	647b      	str	r3, [r7, #68]	; 0x44
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007112:	61bb      	str	r3, [r7, #24]
 8007114:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007116:	6979      	ldr	r1, [r7, #20]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	e841 2300 	strex	r3, r2, [r1]
 800711e:	613b      	str	r3, [r7, #16]
   return(result);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e6      	bne.n	80070f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2220      	movs	r2, #32
 800712a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007138:	bf00      	nop
 800713a:	3754      	adds	r7, #84	; 0x54
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff fb58 	bl	8006818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	60bb      	str	r3, [r7, #8]
   return(result);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719a:	6979      	ldr	r1, [r7, #20]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	e841 2300 	strex	r3, r2, [r1]
 80071a2:	613b      	str	r3, [r7, #16]
   return(result);
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e6      	bne.n	8007178 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff fb24 	bl	8006804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071bc:	bf00      	nop
 80071be:	3720      	adds	r7, #32
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <DriverInit>:
 *	@param	*Driver - main hardware driver object
 *	@param	__UART_STRUCT - (aka *uart) user defined UART object
 *	@param	__TIMER_STRUCT - (aka *tim) user defined timer object
 */
void DriverInit (void *Driver, __UART_STRUCT, __TIMER_STRUCT)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	617b      	str	r3, [r7, #20]

	drv->tim = tim;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	605a      	str	r2, [r3, #4]
	drv->timCount = 0;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]


	drv->uart = uart;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	ClearTxBuff(drv);
 80071e8:	6978      	ldr	r0, [r7, #20]
 80071ea:	f000 f8ec 	bl	80073c6 <ClearTxBuff>
	ClearRxBuff(drv);
 80071ee:	6978      	ldr	r0, [r7, #20]
 80071f0:	f000 f9b8 	bl	8007564 <ClearRxBuff>

	DISABLE_UART_CR1_TCIE(drv->uart);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800720a:	601a      	str	r2, [r3, #0]
	ENABLE_UART_CR1_RXNEIE(drv->uart);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0220 	orr.w	r2, r2, #32
 8007222:	601a      	str	r2, [r3, #0]
	DISABLE_UART_CR1_IDLEIE(drv->uart);
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f022 0210 	bic.w	r2, r2, #16
 800723a:	601a      	str	r2, [r3, #0]


	START_TIMER(drv->tim);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fa4d 	bl	80056e0 <HAL_TIM_Base_Start_IT>
}
 8007246:	bf00      	nop
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <GetTimeMs>:
 *	@param	*Driver - main hardware driver object
 *
 *	@return	Current time
 */
ui32 GetTimeMs (void *Driver)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	60fb      	str	r3, [r7, #12]

	return drv->timCount;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <TimerDRV_CallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void TimerDRV_CallBack (void *Driver)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	601a      	str	r2, [r3, #0]

	#ifndef HAL_TIM_MODULE_ENABLED
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 8007280:	bf00      	nop
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx overflow status (1 - ERROR | 0 - OK)
 */
ui8 UartTransmitData (void *Driver, ui8 *data, ui16 size)
{
 800728c:	b480      	push	{r7}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
	Driver_t *drv = (Driver_t*)Driver;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	61bb      	str	r3, [r7, #24]

	/* Free space check */
	ui16 txHead = drv->TxHead;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80072a4:	83fb      	strh	r3, [r7, #30]
	ui16 txTail = drv->TxTail;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80072ac:	82fb      	strh	r3, [r7, #22]

	ui16 count = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	83bb      	strh	r3, [r7, #28]
	while (txHead != txTail)
 80072b2:	e00b      	b.n	80072cc <UartTransmitData+0x40>
	{
		if (!txHead)
 80072b4:	8bfb      	ldrh	r3, [r7, #30]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <UartTransmitData+0x34>
			txHead = TX_BUFFER_SIZE;
 80072ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072be:	83fb      	strh	r3, [r7, #30]

		txHead--;
 80072c0:	8bfb      	ldrh	r3, [r7, #30]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	83fb      	strh	r3, [r7, #30]
		count++;
 80072c6:	8bbb      	ldrh	r3, [r7, #28]
 80072c8:	3301      	adds	r3, #1
 80072ca:	83bb      	strh	r3, [r7, #28]
	while (txHead != txTail)
 80072cc:	8bfa      	ldrh	r2, [r7, #30]
 80072ce:	8afb      	ldrh	r3, [r7, #22]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d1ef      	bne.n	80072b4 <UartTransmitData+0x28>
	}

	if (TX_BUFFER_SIZE - count < size)
 80072d4:	8bbb      	ldrh	r3, [r7, #28]
 80072d6:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	429a      	cmp	r2, r3
 80072de:	da01      	bge.n	80072e4 <UartTransmitData+0x58>
	{
		/* - - - - User TxBuffer Overflow Handler - - - - -*/

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
		return 1;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e02f      	b.n	8007344 <UartTransmitData+0xb8>
	}

	count = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	83bb      	strh	r3, [r7, #28]
	while (count < size)
 80072e8:	e01b      	b.n	8007322 <UartTransmitData+0x96>
	{
		drv->TxBuffer[drv->TxHead++] = data[count++];
 80072ea:	8bbb      	ldrh	r3, [r7, #28]
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	83ba      	strh	r2, [r7, #28]
 80072f0:	461a      	mov	r2, r3
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	441a      	add	r2, r3
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80072fc:	1c59      	adds	r1, r3, #1
 80072fe:	b288      	uxth	r0, r1
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	f8a1 010a 	strh.w	r0, [r1, #266]	; 0x10a
 8007306:	4619      	mov	r1, r3
 8007308:	7812      	ldrb	r2, [r2, #0]
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	440b      	add	r3, r1
 800730e:	721a      	strb	r2, [r3, #8]

		if (drv->TxHead >= TX_BUFFER_SIZE)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8007316:	2bff      	cmp	r3, #255	; 0xff
 8007318:	d903      	bls.n	8007322 <UartTransmitData+0x96>
			drv->TxHead = 0;
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	2200      	movs	r2, #0
 800731e:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	while (count < size)
 8007322:	8bba      	ldrh	r2, [r7, #28]
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	429a      	cmp	r2, r3
 8007328:	d3df      	bcc.n	80072ea <UartTransmitData+0x5e>
	}

	ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007340:	601a      	str	r2, [r3, #0]

	return 0;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	3724      	adds	r7, #36	; 0x24
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <UART_DRV_TxCallBack>:
/**	@brief	UART transfer completion interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void UART_DRV_TxCallBack (void *Driver)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	60fb      	str	r3, [r7, #12]

	WRITE_UART_BYTE(drv->uart, drv->TxBuffer[drv->TxTail++] & (ui32)0xFF);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	b291      	uxth	r1, r2
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	f8a2 1108 	strh.w	r1, [r2, #264]	; 0x108
 800736c:	461a      	mov	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	4413      	add	r3, r2
 8007372:	7a1a      	ldrb	r2, [r3, #8]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	629a      	str	r2, [r3, #40]	; 0x28

	if (drv->TxTail == TX_BUFFER_SIZE)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8007384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007388:	d103      	bne.n	8007392 <UART_DRV_TxCallBack+0x42>
		drv->TxTail = 0;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108

	if (drv->TxTail == drv->TxHead)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800739e:	429a      	cmp	r2, r3
 80073a0:	d10b      	bne.n	80073ba <UART_DRV_TxCallBack+0x6a>
	{
		DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b8:	601a      	str	r2, [r3, #0]

		/*  - - - - User Complete Transmit Handler - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
	}
}
 80073ba:	bf00      	nop
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*Driver - main hardware driver object
 */
void ClearTxBuff (void *Driver)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]

	memset(drv->TxBuffer, 0, TX_BUFFER_SIZE);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3308      	adds	r3, #8
 80073d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073da:	2100      	movs	r1, #0
 80073dc:	4618      	mov	r0, r3
 80073de:	f001 fe85 	bl	80090ec <memset>
	drv->TxTail = 0;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	drv->TxHead = 0;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
}
 80073f2:	bf00      	nop
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <GetAvailableBytes>:
 *	@param	*Driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 GetAvailableBytes (void *Driver)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b087      	sub	sp, #28
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	613b      	str	r3, [r7, #16]

	if (drv->RxOverflowFlag)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <GetAvailableBytes+0x1c>
		return 0xFFFF;
 8007410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007414:	e01b      	b.n	800744e <GetAvailableBytes+0x54>

	ui16 rxHead = drv->RxHead;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800741c:	82fb      	strh	r3, [r7, #22]
	ui16 rxTail = drv->RxTail;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8007424:	81fb      	strh	r3, [r7, #14]

	ui16 count = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	82bb      	strh	r3, [r7, #20]
	while (rxHead != rxTail)
 800742a:	e00b      	b.n	8007444 <GetAvailableBytes+0x4a>
	{
		if (!rxHead)
 800742c:	8afb      	ldrh	r3, [r7, #22]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d102      	bne.n	8007438 <GetAvailableBytes+0x3e>
			rxHead = RX_BUFFER_SIZE;
 8007432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007436:	82fb      	strh	r3, [r7, #22]

		rxHead--;
 8007438:	8afb      	ldrh	r3, [r7, #22]
 800743a:	3b01      	subs	r3, #1
 800743c:	82fb      	strh	r3, [r7, #22]
		count++;
 800743e:	8abb      	ldrh	r3, [r7, #20]
 8007440:	3301      	adds	r3, #1
 8007442:	82bb      	strh	r3, [r7, #20]
	while (rxHead != rxTail)
 8007444:	8afa      	ldrh	r2, [r7, #22]
 8007446:	89fb      	ldrh	r3, [r7, #14]
 8007448:	429a      	cmp	r2, r3
 800744a:	d1ef      	bne.n	800742c <GetAvailableBytes+0x32>
	}

	return count;
 800744c:	8abb      	ldrh	r3, [r7, #20]
}
 800744e:	4618      	mov	r0, r3
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Receipt status (0 - receiving in progress | 1 - receive completed)
 */
ui8 UartReceiveByte (void *Driver, ui8 *data)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
	Driver_t *drv = (Driver_t*)Driver;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60fb      	str	r3, [r7, #12]

	if (drv->RxTail == drv->RxHead)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8b3 220c 	ldrh.w	r2, [r3, #524]	; 0x20c
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007474:	429a      	cmp	r2, r3
 8007476:	d101      	bne.n	800747c <UartReceiveByte+0x22>
	{
		/* - - - - User Complete Receive Handler - - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
		return 1;
 8007478:	2301      	movs	r3, #1
 800747a:	e021      	b.n	80074c0 <UartReceiveByte+0x66>
	}

	*data = drv->RxBuffer[drv->RxTail++];
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	b291      	uxth	r1, r2
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	f8a2 120c 	strh.w	r1, [r2, #524]	; 0x20c
 800748c:	461a      	mov	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	701a      	strb	r2, [r3, #0]

	if (drv->RxTail >= RX_BUFFER_SIZE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80074a0:	2bff      	cmp	r3, #255	; 0xff
 80074a2:	d903      	bls.n	80074ac <UartReceiveByte+0x52>
	   drv->RxTail = 0;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c

	if (drv->RxOverflowFlag == 1)  // Reset the overflow flag
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d103      	bne.n	80074be <UartReceiveByte+0x64>
		drv->RxOverflowFlag = 0;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

	return 0;	// Rx ring buffer isn't empty
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <UART_DRV_RxCallBack>:
/**	@brief	UART receive completion interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void UART_DRV_RxCallBack (void *Driver)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60fb      	str	r3, [r7, #12]

	if ((drv->RxHead - drv->RxTail == RX_BUFFER_SIZE - 1) ||
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80074de:	461a      	mov	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2bff      	cmp	r3, #255	; 0xff
 80074ea:	d009      	beq.n	8007500 <UART_DRV_RxCallBack+0x34>
		(drv->RxTail - drv->RxHead == 1))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80074f2:	461a      	mov	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80074fa:	1ad3      	subs	r3, r2, r3
	if ((drv->RxHead - drv->RxTail == RX_BUFFER_SIZE - 1) ||
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d10e      	bne.n	800751e <UART_DRV_RxCallBack+0x52>
	{
		/*  - - - - User RxBuffer Overflow Handler - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */

		(void)READ_UART_BYTE(drv->uart);  // Prevents overflow error (USART_ISR_ORE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		if (drv->RxOverflowFlag == 0)  // Set the overflow flag
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8007510:	2b00      	cmp	r3, #0
 8007512:	d121      	bne.n	8007558 <UART_DRV_RxCallBack+0x8c>
			drv->RxOverflowFlag = 1;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

		return;
 800751c:	e01c      	b.n	8007558 <UART_DRV_RxCallBack+0x8c>
	}

	drv->RxBuffer[drv->RxHead++] = READ_UART_BYTE(drv->uart);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	b291      	uxth	r1, r2
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007538:	4619      	mov	r1, r3
 800753a:	b2c2      	uxtb	r2, r0
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	440b      	add	r3, r1
 8007540:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

	if (drv->RxHead >= RX_BUFFER_SIZE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800754a:	2bff      	cmp	r3, #255	; 0xff
 800754c:	d905      	bls.n	800755a <UART_DRV_RxCallBack+0x8e>
		drv->RxHead = 0;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 8007556:	e000      	b.n	800755a <UART_DRV_RxCallBack+0x8e>
		return;
 8007558:	bf00      	nop
}
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*Driver - main hardware driver object
 */
void ClearRxBuff (void *Driver)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	60fb      	str	r3, [r7, #12]

	memset(drv->RxBuffer, 0, RX_BUFFER_SIZE);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8007576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800757a:	2100      	movs	r1, #0
 800757c:	4618      	mov	r0, r3
 800757e:	f001 fdb5 	bl	80090ec <memset>
	drv->RxTail = 0;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	drv->RxHead = 0;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	drv->RxOverflowFlag = 0;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
}
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <UartTransmitDebugData>:
	 *
	 *	@param	*data - debug data
	 *	@param	length - size of debug data
	 */
	void UartTransmitDebugData (char *data, ui16 length)
	{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	807b      	strh	r3, [r7, #2]
		HAL_UART_Transmit(DEBUG_SERIAL_PORT, (ui8*)data, length, 100);
 80075b0:	887a      	ldrh	r2, [r7, #2]
 80075b2:	2364      	movs	r3, #100	; 0x64
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4803      	ldr	r0, [pc, #12]	; (80075c4 <UartTransmitDebugData+0x20>)
 80075b8:	f7fe fdb0 	bl	800611c <HAL_UART_Transmit>
	}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20000680 	.word	0x20000680

080075c8 <EditAdjVarValue>:
 *
 *	@param 	*adjVarsGeneral - general adjustable variables structure
 *	@param	value - new value of adjustable variable
 */
void EditAdjVarValue (AdjVarsGeneral_t *adjVarsGeneral, i32 value)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
	/* Values border checking */
	value = CONSTRAINT(value, adjVarsGeneral->minValue, adjVarsGeneral->maxValue);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80075d8:	461a      	mov	r2, r3
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	4293      	cmp	r3, r2
 80075de:	da03      	bge.n	80075e8 <EditAdjVarValue+0x20>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80075e6:	e007      	b.n	80075f8 <EditAdjVarValue+0x30>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80075ee:	461a      	mov	r2, r3
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	4293      	cmp	r3, r2
 80075f4:	bfa8      	it	ge
 80075f6:	4613      	movge	r3, r2
 80075f8:	603b      	str	r3, [r7, #0]

	if (adjVarsGeneral->value == value)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d00b      	beq.n	800761c <EditAdjVarValue+0x54>
		return;

	adjVarsGeneral->value = value;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	629a      	str	r2, [r3, #40]	; 0x28
	adjVarsGeneral->changeFlag = CHANGED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	adjVarsGeneral->saveFlag = NOT_SAVED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800761a:	e000      	b.n	800761e <EditAdjVarValue+0x56>
		return;
 800761c:	bf00      	nop
}
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <SBGC32_SetAdjVarValues>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_SetAdjVarValues (GeneralSBGC_t *generalSBGC, AdjVarsGeneral_t *adjVarsGeneral, ui8 adjVarQuan, ConfirmationState_t *confirmationState)
{
 8007628:	b590      	push	{r4, r7, lr}
 800762a:	b0c9      	sub	sp, #292	; 0x124
 800762c:	af00      	add	r7, sp, #0
 800762e:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8007632:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8007636:	6020      	str	r0, [r4, #0]
 8007638:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800763c:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8007640:	6001      	str	r1, [r0, #0]
 8007642:	4611      	mov	r1, r2
 8007644:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8007648:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007652:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8007656:	460a      	mov	r2, r1
 8007658:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_SET_ADJ_VARS_VAL);
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	211f      	movs	r1, #31
 8007660:	4618      	mov	r0, r3
 8007662:	f000 feb8 	bl	80083d6 <InitCmdWrite>

	ui8 numParams = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	WriteByte(&cmd, numParams);  // temporary offset
 800766c:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8007670:	f107 0314 	add.w	r3, r7, #20
 8007674:	4611      	mov	r1, r2
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fde8 	bl	800824c <WriteByte>

	FOR_(i, adjVarQuan)
 800767c:	2300      	movs	r3, #0
 800767e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007682:	e063      	b.n	800774c <SBGC32_SetAdjVarValues+0x124>
		if (adjVarsGeneral[i].changeFlag == CHANGED)
 8007684:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007688:	4613      	mov	r3, r2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	4413      	add	r3, r2
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	461a      	mov	r2, r3
 8007692:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007696:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4413      	add	r3, r2
 800769e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d14d      	bne.n	8007742 <SBGC32_SetAdjVarValues+0x11a>
		{
			WriteByte(&cmd, adjVarsGeneral[i].ID);
 80076a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80076aa:	4613      	mov	r3, r2
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	4413      	add	r3, r2
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	461a      	mov	r2, r3
 80076b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80076b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4413      	add	r3, r2
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	f107 0314 	add.w	r3, r7, #20
 80076c6:	4611      	mov	r1, r2
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fdbf 	bl	800824c <WriteByte>
			WriteLong(&cmd, adjVarsGeneral[i].value);
 80076ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80076d2:	4613      	mov	r3, r2
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	461a      	mov	r2, r3
 80076dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80076e0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4413      	add	r3, r2
 80076e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ea:	461a      	mov	r2, r3
 80076ec:	f107 0314 	add.w	r3, r7, #20
 80076f0:	4611      	mov	r1, r2
 80076f2:	4618      	mov	r0, r3
 80076f4:	f000 fe1a 	bl	800832c <WriteLong>

			adjVarsGeneral[i].changeFlag = NOT_CHANGED;
 80076f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80076fc:	4613      	mov	r3, r2
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	4413      	add	r3, r2
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	461a      	mov	r2, r3
 8007706:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800770a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4413      	add	r3, r2
 8007712:	2200      	movs	r2, #0
 8007714:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			adjVarsGeneral[i].saveFlag = NOT_SAVED;
 8007718:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800771c:	4613      	mov	r3, r2
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	4413      	add	r3, r2
 8007722:	011b      	lsls	r3, r3, #4
 8007724:	461a      	mov	r2, r3
 8007726:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800772a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4413      	add	r3, r2
 8007732:	2201      	movs	r2, #1
 8007734:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			numParams++;
 8007738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800773c:	3301      	adds	r3, #1
 800773e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	FOR_(i, adjVarQuan)
 8007742:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007746:	3301      	adds	r3, #1
 8007748:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800774c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007750:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800775a:	429a      	cmp	r2, r3
 800775c:	db92      	blt.n	8007684 <SBGC32_SetAdjVarValues+0x5c>
		}

	if (numParams == 0)  // No variables changed
 800775e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007762:	2b00      	cmp	r3, #0
 8007764:	d107      	bne.n	8007776 <SBGC32_SetAdjVarValues+0x14e>
		return generalSBGC->_ParserCurrentStatus;
 8007766:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800776a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007774:	e028      	b.n	80077c8 <SBGC32_SetAdjVarValues+0x1a0>

	cmd.payload[0] = numParams;  // re-writing numParams
 8007776:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800777a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800777e:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8007782:	705a      	strb	r2, [r3, #1]
	SBGC32_TX(generalSBGC, &cmd);
 8007784:	f107 0214 	add.w	r2, r7, #20
 8007788:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800778c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007790:	4611      	mov	r1, r2
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	f000 f9ef 	bl	8007b76 <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 8007798:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800779c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80077a6:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80077aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80077ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80077b2:	6809      	ldr	r1, [r1, #0]
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	f000 ff77 	bl	80086a8 <SBGC32_CheckConfirmation>
	return generalSBGC->_ParserCurrentStatus;
 80077ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80077be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd90      	pop	{r4, r7, pc}
	...

080077d4 <SBGC32_GetAdjVarValues>:
 *	@param	adjVarQuan - number of adjustable variables
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_GetAdjVarValues (GeneralSBGC_t *generalSBGC, AdjVarsGeneral_t *adjVarsGeneral, ui8 adjVarQuan)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b0c8      	sub	sp, #288	; 0x120
 80077d8:	af00      	add	r7, sp, #0
 80077da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80077de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80077e2:	6018      	str	r0, [r3, #0]
 80077e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80077e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80077ec:	6019      	str	r1, [r3, #0]
 80077ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80077f2:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80077f6:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_GET_ADJ_VARS_VAL);
 80077f8:	f107 0310 	add.w	r3, r7, #16
 80077fc:	2140      	movs	r1, #64	; 0x40
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fde9 	bl	80083d6 <InitCmdWrite>

	ui8 firstGroupQuan = (adjVarQuan > 40) ? 40 : adjVarQuan;
 8007804:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007808:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b28      	cmp	r3, #40	; 0x28
 8007810:	bf28      	it	cs
 8007812:	2328      	movcs	r3, #40	; 0x28
 8007814:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	WriteByte(&cmd, firstGroupQuan);  // numParams
 8007818:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 800781c:	f107 0310 	add.w	r3, r7, #16
 8007820:	4611      	mov	r1, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fd12 	bl	800824c <WriteByte>

	ui8 count = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	while (count < firstGroupQuan)
 800782e:	e017      	b.n	8007860 <SBGC32_GetAdjVarValues+0x8c>
		WriteByte(&cmd, adjVarsGeneral[count++].ID);
 8007830:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
 800783a:	461a      	mov	r2, r3
 800783c:	4613      	mov	r3, r2
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	4413      	add	r3, r2
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	461a      	mov	r2, r3
 8007846:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800784a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4413      	add	r3, r2
 8007852:	781a      	ldrb	r2, [r3, #0]
 8007854:	f107 0310 	add.w	r3, r7, #16
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f000 fcf6 	bl	800824c <WriteByte>
	while (count < firstGroupQuan)
 8007860:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8007864:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8007868:	429a      	cmp	r2, r3
 800786a:	d3e1      	bcc.n	8007830 <SBGC32_GetAdjVarValues+0x5c>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_SET_ADJ_VARS_VAL), "Adj Var Values vol. 1:") == TX_RX_OK)
 800786c:	f107 0110 	add.w	r1, r7, #16
 8007870:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007874:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007878:	221f      	movs	r2, #31
 800787a:	6818      	ldr	r0, [r3, #0]
 800787c:	f000 fbf0 	bl	8008060 <SBGC32_TX_RX>
 8007880:	4603      	mov	r3, r0
 8007882:	4619      	mov	r1, r3
 8007884:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007888:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800788c:	4a5c      	ldr	r2, [pc, #368]	; (8007a00 <SBGC32_GetAdjVarValues+0x22c>)
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	f001 f886 	bl	80089a0 <CheckReceipt>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	f040 80a6 	bne.w	80079e8 <SBGC32_GetAdjVarValues+0x214>
	{
		SkipBytes(&cmd, 1);  // skip ui8 numParams
 800789c:	f107 0310 	add.w	r3, r7, #16
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 fd82 	bl	80083ac <SkipBytes>

		FOR_(i, firstGroupQuan)
 80078a8:	2300      	movs	r3, #0
 80078aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078ae:	e01f      	b.n	80078f0 <SBGC32_GetAdjVarValues+0x11c>
		{
			SkipBytes(&cmd, 1);  // skip ui8 ID
 80078b0:	f107 0310 	add.w	r3, r7, #16
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fd78 	bl	80083ac <SkipBytes>
			adjVarsGeneral[i].value = ReadLong(&cmd);
 80078bc:	f107 0310 	add.w	r3, r7, #16
 80078c0:	4618      	mov	r0, r3
 80078c2:	f000 fd55 	bl	8008370 <ReadLong>
 80078c6:	4601      	mov	r1, r0
 80078c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80078cc:	4613      	mov	r3, r2
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	4413      	add	r3, r2
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	461a      	mov	r2, r3
 80078d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80078da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4413      	add	r3, r2
 80078e2:	460a      	mov	r2, r1
 80078e4:	629a      	str	r2, [r3, #40]	; 0x28
		FOR_(i, firstGroupQuan)
 80078e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078ea:	3301      	adds	r3, #1
 80078ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078f0:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 80078f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80078f8:	429a      	cmp	r2, r3
 80078fa:	dbd9      	blt.n	80078b0 <SBGC32_GetAdjVarValues+0xdc>
		}

		if (adjVarQuan > 40)
 80078fc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007900:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b28      	cmp	r3, #40	; 0x28
 8007908:	d96e      	bls.n	80079e8 <SBGC32_GetAdjVarValues+0x214>
		{
			InitCmdWrite(&cmd, CMD_GET_ADJ_VARS_VAL);  // command re-init
 800790a:	f107 0310 	add.w	r3, r7, #16
 800790e:	2140      	movs	r1, #64	; 0x40
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fd60 	bl	80083d6 <InitCmdWrite>
			WriteByte(&cmd, adjVarQuan - 40);
 8007916:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800791a:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	3b28      	subs	r3, #40	; 0x28
 8007922:	b2da      	uxtb	r2, r3
 8007924:	f107 0310 	add.w	r3, r7, #16
 8007928:	4611      	mov	r1, r2
 800792a:	4618      	mov	r0, r3
 800792c:	f000 fc8e 	bl	800824c <WriteByte>

			while (count < (adjVarQuan - 40))
 8007930:	e00a      	b.n	8007948 <SBGC32_GetAdjVarValues+0x174>
				WriteByte(&cmd, count++);
 8007932:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
 800793c:	f107 0210 	add.w	r2, r7, #16
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f000 fc82 	bl	800824c <WriteByte>
			while (count < (adjVarQuan - 40))
 8007948:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 800794c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007950:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	3b28      	subs	r3, #40	; 0x28
 8007958:	429a      	cmp	r2, r3
 800795a:	dbea      	blt.n	8007932 <SBGC32_GetAdjVarValues+0x15e>

			if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_SET_ADJ_VARS_VAL), "Adj Var Values vol. 2:") == TX_RX_OK)
 800795c:	f107 0110 	add.w	r1, r7, #16
 8007960:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007964:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007968:	221f      	movs	r2, #31
 800796a:	6818      	ldr	r0, [r3, #0]
 800796c:	f000 fb78 	bl	8008060 <SBGC32_TX_RX>
 8007970:	4603      	mov	r3, r0
 8007972:	4619      	mov	r1, r3
 8007974:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007978:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800797c:	4a21      	ldr	r2, [pc, #132]	; (8007a04 <SBGC32_GetAdjVarValues+0x230>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	f001 f80e 	bl	80089a0 <CheckReceipt>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d12e      	bne.n	80079e8 <SBGC32_GetAdjVarValues+0x214>
				FOR_(i, adjVarQuan - 40)
 800798a:	2300      	movs	r3, #0
 800798c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007990:	e020      	b.n	80079d4 <SBGC32_GetAdjVarValues+0x200>
				{
					SkipBytes(&cmd, 1);  // skip ui8 ID
 8007992:	f107 0310 	add.w	r3, r7, #16
 8007996:	2101      	movs	r1, #1
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fd07 	bl	80083ac <SkipBytes>
					adjVarsGeneral[i + 40].value = ReadLong(&cmd);
 800799e:	f107 0310 	add.w	r3, r7, #16
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fce4 	bl	8008370 <ReadLong>
 80079a8:	4601      	mov	r1, r0
 80079aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80079ae:	4613      	mov	r3, r2
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4413      	add	r3, r2
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80079ba:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80079be:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	460a      	mov	r2, r1
 80079c8:	629a      	str	r2, [r3, #40]	; 0x28
				FOR_(i, adjVarQuan - 40)
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ce:	3301      	adds	r3, #1
 80079d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80079d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80079d8:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	3b28      	subs	r3, #40	; 0x28
 80079e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80079e4:	429a      	cmp	r2, r3
 80079e6:	dbd4      	blt.n	8007992 <SBGC32_GetAdjVarValues+0x1be>
				}
		}
	}

	return generalSBGC->_ParserCurrentStatus;
 80079e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80079ec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	0800d900 	.word	0x0800d900
 8007a04:	0800d918 	.word	0x0800d918

08007a08 <SBGC32_SaveAdjVarsToEEPROM>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_SaveAdjVarsToEEPROM (GeneralSBGC_t *generalSBGC, AdjVarsGeneral_t *adjVarsGeneral, ui8 adjVarQuan, ConfirmationState_t *confirmationState)
{
 8007a08:	b590      	push	{r4, r7, lr}
 8007a0a:	b0c9      	sub	sp, #292	; 0x124
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8007a12:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8007a1c:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8007a20:	6001      	str	r1, [r0, #0]
 8007a22:	4611      	mov	r1, r2
 8007a24:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8007a28:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007a32:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8007a36:	460a      	mov	r2, r1
 8007a38:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_SAVE_PARAMS_3);
 8007a3a:	f107 0314 	add.w	r3, r7, #20
 8007a3e:	2120      	movs	r1, #32
 8007a40:	4618      	mov	r0, r3
 8007a42:	f000 fcc8 	bl	80083d6 <InitCmdWrite>

	FOR_(i, adjVarQuan)
 8007a46:	2300      	movs	r3, #0
 8007a48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a4c:	e029      	b.n	8007aa2 <SBGC32_SaveAdjVarsToEEPROM+0x9a>
		if (adjVarsGeneral[i].saveFlag == NOT_SAVED)
 8007a4e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007a52:	4613      	mov	r3, r2
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4413      	add	r3, r2
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007a60:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4413      	add	r3, r2
 8007a68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d113      	bne.n	8007a98 <SBGC32_SaveAdjVarsToEEPROM+0x90>
			WriteByte(&cmd, adjVarsGeneral[i].ID);
 8007a70:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007a74:	4613      	mov	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4413      	add	r3, r2
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007a82:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4413      	add	r3, r2
 8007a8a:	781a      	ldrb	r2, [r3, #0]
 8007a8c:	f107 0314 	add.w	r3, r7, #20
 8007a90:	4611      	mov	r1, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	f000 fbda 	bl	800824c <WriteByte>
	FOR_(i, adjVarQuan)
 8007a98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007aa2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007aa6:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	dbcc      	blt.n	8007a4e <SBGC32_SaveAdjVarsToEEPROM+0x46>

	if (cmd.payloadSize == 0)  // nothing to save
 8007ab4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ab8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007abc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d107      	bne.n	8007ad4 <SBGC32_SaveAdjVarsToEEPROM+0xcc>
		return generalSBGC->_ParserCurrentStatus;
 8007ac4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007ac8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007ad2:	e04b      	b.n	8007b6c <SBGC32_SaveAdjVarsToEEPROM+0x164>

	SBGC32_TX(generalSBGC, &cmd);
 8007ad4:	f107 0214 	add.w	r2, r7, #20
 8007ad8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007adc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	6818      	ldr	r0, [r3, #0]
 8007ae4:	f000 f847 	bl	8007b76 <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 8007ae8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007aec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007af0:	781a      	ldrb	r2, [r3, #0]
 8007af2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007af6:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8007afa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007afe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007b02:	6809      	ldr	r1, [r1, #0]
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	f000 fdcf 	bl	80086a8 <SBGC32_CheckConfirmation>

	if (confirmationState->cmdID == CMD_SAVE_PARAMS_3)
 8007b0a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007b0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b20      	cmp	r3, #32
 8007b18:	d121      	bne.n	8007b5e <SBGC32_SaveAdjVarsToEEPROM+0x156>
		FOR_(i, adjVarQuan)
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b20:	e014      	b.n	8007b4c <SBGC32_SaveAdjVarsToEEPROM+0x144>
			adjVarsGeneral[i].saveFlag = SAVED;
 8007b22:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007b26:	4613      	mov	r3, r2
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	4413      	add	r3, r2
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007b34:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		FOR_(i, adjVarQuan)
 8007b42:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b46:	3301      	adds	r3, #1
 8007b48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b4c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007b50:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	dbe1      	blt.n	8007b22 <SBGC32_SaveAdjVarsToEEPROM+0x11a>

	return generalSBGC->_ParserCurrentStatus;
 8007b5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8007b62:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd90      	pop	{r4, r7, pc}

08007b76 <SBGC32_TX>:
 *  		to be transmitted
 *
 *  @return	Transmission status
 */
TxRxStatus_t SBGC32_TX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
{
 8007b76:	b590      	push	{r4, r7, lr}
 8007b78:	b0c5      	sub	sp, #276	; 0x114
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b80:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b84:	6018      	str	r0, [r3, #0]
 8007b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b8a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007b8e:	6019      	str	r1, [r3, #0]
	ui8 buff [MAX_BUFF_SIZE];
	ui32 currentTime;

    buff[0] = generalSBGC->protocolVersion;
 8007b90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	7e1a      	ldrb	r2, [r3, #24]
 8007b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ba4:	701a      	strb	r2, [r3, #0]
    buff[1] = serialCommand->commandID;
 8007ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007baa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	781a      	ldrb	r2, [r3, #0]
 8007bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bba:	705a      	strb	r2, [r3, #1]
    buff[2] = serialCommand->payloadSize;
 8007bbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8007bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bd2:	709a      	strb	r2, [r3, #2]
    buff[3] = buff[1] + buff[2];
 8007bd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bdc:	785a      	ldrb	r2, [r3, #1]
 8007bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007be6:	789b      	ldrb	r3, [r3, #2]
 8007be8:	4413      	add	r3, r2
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf4:	70da      	strb	r2, [r3, #3]

    memcpy(&buff[4], serialCommand->payload, serialCommand->payloadSize);
 8007bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bfa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	1c59      	adds	r1, r3, #1
 8007c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007c10:	461a      	mov	r2, r3
 8007c12:	f107 0308 	add.w	r3, r7, #8
 8007c16:	3304      	adds	r3, #4
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 fa59 	bl	80090d0 <memcpy>

    /* ui8 size = real size current serialCommand */
    ui8 size = serialCommand->payloadSize + 4 + (generalSBGC->protocolVersion == PR2_START_CHARACTER ? 2 : 1);
 8007c1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007c2c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007c30:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007c34:	6812      	ldr	r2, [r2, #0]
 8007c36:	7e12      	ldrb	r2, [r2, #24]
 8007c38:	2a24      	cmp	r2, #36	; 0x24
 8007c3a:	d101      	bne.n	8007c40 <SBGC32_TX+0xca>
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	e000      	b.n	8007c42 <SBGC32_TX+0xcc>
 8007c40:	2201      	movs	r2, #1
 8007c42:	4413      	add	r3, r2
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	3304      	adds	r3, #4
 8007c48:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

    if (generalSBGC->protocolVersion == PR1_START_CHARACTER)
 8007c4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	7e1b      	ldrb	r3, [r3, #24]
 8007c58:	2b3e      	cmp	r3, #62	; 0x3e
 8007c5a:	d120      	bne.n	8007c9e <SBGC32_TX+0x128>
    	buff[4 + serialCommand->payloadSize] = Modulo256_Calculate(serialCommand->payload, serialCommand->payloadSize);
 8007c5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007c76:	b299      	uxth	r1, r3
 8007c78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007c86:	1d1c      	adds	r4, r3, #4
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f000 ff37 	bl	8008afc <Modulo256_Calculate>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	461a      	mov	r2, r3
 8007c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9a:	551a      	strb	r2, [r3, r4]
 8007c9c:	e035      	b.n	8007d0a <SBGC32_TX+0x194>

    else
    {
    	ui16 CRC16_Res = CRC16_Calculate(&buff[1], (4 + serialCommand->payloadSize - 1));
 8007c9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ca2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3303      	adds	r3, #3
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	4611      	mov	r1, r2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 ff45 	bl	8008b4a <CRC16_Calculate>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    	buff[4 + serialCommand->payloadSize] = CRC16_Res & 0x00FF;
 8007cc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8007cda:	b2d1      	uxtb	r1, r2
 8007cdc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007ce0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007ce4:	54d1      	strb	r1, [r2, r3]
    	buff[5 + serialCommand->payloadSize] = (CRC16_Res >> 8) & 0x00FF;
 8007ce6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cf2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007cfc:	3305      	adds	r3, #5
 8007cfe:	b2d1      	uxtb	r1, r2
 8007d00:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007d04:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007d08:	54d1      	strb	r1, [r2, r3]
    }

    currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8007d0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007d1a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	4610      	mov	r0, r2
 8007d24:	4798      	blx	r3
 8007d26:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8007d2a:	e029      	b.n	8007d80 <SBGC32_TX+0x20a>
    {
    	if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txTimeout)
 8007d2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007d3c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007d40:	6812      	ldr	r2, [r2, #0]
 8007d42:	6812      	ldr	r2, [r2, #0]
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	4602      	mov	r2, r0
 8007d4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007d4e:	1ad2      	subs	r2, r2, r3
 8007d50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d30f      	bcc.n	8007d80 <SBGC32_TX+0x20a>
    	{
    		generalSBGC->_txErrorsCount++;
 8007d60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	851a      	strh	r2, [r3, #40]	; 0x28
    		return TX_BUFFER_OVERFLOW_ERROR;  // aka timeout error
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e015      	b.n	8007dac <SBGC32_TX+0x236>
    while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8007d80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007d90:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	6810      	ldr	r0, [r2, #0]
 8007d98:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8007d9c:	b292      	uxth	r2, r2
 8007d9e:	f107 0108 	add.w	r1, r7, #8
 8007da2:	4798      	blx	r3
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1c0      	bne.n	8007d2c <SBGC32_TX+0x1b6>
    	}
    }

	return TX_RX_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd90      	pop	{r4, r7, pc}

08007db6 <SBGC32_RX>:
 *   		time for receiving one whole SerialCommand
 *
 *  @return	TX_RX_OK or last state of lastParserError variable
 */
TxRxStatus_t SBGC32_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, ui32 timeout)
{
 8007db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dba:	b08e      	sub	sp, #56	; 0x38
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
	ui8 startSim;
	ui8 headBuff [3];  /* Header buffer:
	headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */
	ui16 availableBytes;

	TxRxStatus_t lastParserError = RX_START_PARSE;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	ParserStates_t parserState = STATE_IDLE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Launching timer */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6812      	ldr	r2, [r2, #0]
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	62b8      	str	r0, [r7, #40]	; 0x28

	serialCommand->readPos = 0;  // Prepare for reading
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

	while (1)
	{
		switch (parserState)
 8007de6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d063      	beq.n	8007eb6 <SBGC32_RX+0x100>
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	f300 8122 	bgt.w	8008038 <SBGC32_RX+0x282>
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	dc02      	bgt.n	8007dfe <SBGC32_RX+0x48>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	da03      	bge.n	8007e04 <SBGC32_RX+0x4e>
 8007dfc:	e11c      	b.n	8008038 <SBGC32_RX+0x282>
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d01f      	beq.n	8007e42 <SBGC32_RX+0x8c>
 8007e02:	e119      	b.n	8008038 <SBGC32_RX+0x282>
		{
			/* Waiting start byte */
			case STATE_IDLE :
			case STATE_RESYNC :
			{
				startSim = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]

				if (generalSBGC->RxFunc(generalSBGC->Drv, &startSim) &&
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	6812      	ldr	r2, [r2, #0]
 8007e10:	f107 0117 	add.w	r1, r7, #23
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d007      	beq.n	8007e2e <SBGC32_RX+0x78>
 8007e1e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d103      	bne.n	8007e2e <SBGC32_RX+0x78>
					lastParserError == RX_START_PARSE)
					lastParserError = RX_EMPTY_BUFF_ERROR;
 8007e26:	2303      	movs	r3, #3
 8007e28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

				else if (startSim == generalSBGC->protocolVersion)
					parserState = STATE_CHECK_HEADER;

				break;  // Passing to next state
 8007e2c:	e103      	b.n	8008036 <SBGC32_RX+0x280>
				else if (startSim == generalSBGC->protocolVersion)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	7e1a      	ldrb	r2, [r3, #24]
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	f040 80fe 	bne.w	8008036 <SBGC32_RX+0x280>
					parserState = STATE_CHECK_HEADER;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;  // Passing to next state
 8007e40:	e0f9      	b.n	8008036 <SBGC32_RX+0x280>
			}

			/* Waiting whole header */
			case STATE_CHECK_HEADER :
			{
				availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	4798      	blx	r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	837b      	strh	r3, [r7, #26]

				if ((availableBytes >= 3) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8007e52:	8b7b      	ldrh	r3, [r7, #26]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d918      	bls.n	8007e8a <SBGC32_RX+0xd4>
 8007e58:	8b7b      	ldrh	r3, [r7, #26]
 8007e5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d013      	beq.n	8007e8a <SBGC32_RX+0xd4>
					FOR_(i, 3)
 8007e62:	2300      	movs	r3, #0
 8007e64:	633b      	str	r3, [r7, #48]	; 0x30
 8007e66:	e00c      	b.n	8007e82 <SBGC32_RX+0xcc>
						generalSBGC->RxFunc(generalSBGC->Drv, &headBuff[i]);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	6810      	ldr	r0, [r2, #0]
 8007e70:	f107 0114 	add.w	r1, r7, #20
 8007e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e76:	440a      	add	r2, r1
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4798      	blx	r3
					FOR_(i, 3)
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	3301      	adds	r3, #1
 8007e80:	633b      	str	r3, [r7, #48]	; 0x30
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	ddef      	ble.n	8007e68 <SBGC32_RX+0xb2>
 8007e88:	e003      	b.n	8007e92 <SBGC32_RX+0xdc>

				else
				{
					lastParserError = RX_BUFFER_REALTIME_ERROR;
 8007e8a:	2304      	movs	r3, #4
 8007e8c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8007e90:	e0d2      	b.n	8008038 <SBGC32_RX+0x282>
				}

				if ((headBuff[0] + headBuff[1]) % 256 != headBuff[2])  // % 256 necessary needed here
 8007e92:	7d3a      	ldrb	r2, [r7, #20]
 8007e94:	7d7b      	ldrb	r3, [r7, #21]
 8007e96:	4413      	add	r3, r2
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	7dbb      	ldrb	r3, [r7, #22]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d006      	beq.n	8007eae <SBGC32_RX+0xf8>
				{
					lastParserError = RX_HEADER_CHECKSUM_ERROR;
 8007ea0:	2305      	movs	r3, #5
 8007ea2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					parserState = STATE_RESYNC;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8007eac:	e0c4      	b.n	8008038 <SBGC32_RX+0x282>
				}

				parserState = STATE_CHECK_PAYLOAD;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;  // Passing to next state
 8007eb4:	e0c0      	b.n	8008038 <SBGC32_RX+0x282>
			}

			/* Waiting whole payload and checksum */
			case STATE_CHECK_PAYLOAD :
			{
 8007eb6:	466b      	mov	r3, sp
 8007eb8:	469a      	mov	sl, r3
				ui8 checksumSize = (generalSBGC->protocolVersion == PR2_START_CHARACTER ? 2 : 1);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	7e1b      	ldrb	r3, [r3, #24]
 8007ebe:	2b24      	cmp	r3, #36	; 0x24
 8007ec0:	d101      	bne.n	8007ec6 <SBGC32_RX+0x110>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e000      	b.n	8007ec8 <SBGC32_RX+0x112>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				ui8 complexBuff [3 + headBuff[1] + checksumSize];  // (Header + payload + checksum) buffer
 8007ecc:	7d7b      	ldrb	r3, [r7, #21]
 8007ece:	1cda      	adds	r2, r3, #3
 8007ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ed4:	18d1      	adds	r1, r2, r3
 8007ed6:	1e4b      	subs	r3, r1, #1
 8007ed8:	623b      	str	r3, [r7, #32]
 8007eda:	460a      	mov	r2, r1
 8007edc:	2300      	movs	r3, #0
 8007ede:	4614      	mov	r4, r2
 8007ee0:	461d      	mov	r5, r3
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	00eb      	lsls	r3, r5, #3
 8007eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ef0:	00e2      	lsls	r2, r4, #3
 8007ef2:	460a      	mov	r2, r1
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4690      	mov	r8, r2
 8007ef8:	4699      	mov	r9, r3
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f0e:	460b      	mov	r3, r1
 8007f10:	3307      	adds	r3, #7
 8007f12:	08db      	lsrs	r3, r3, #3
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	ebad 0d03 	sub.w	sp, sp, r3
 8007f1a:	466b      	mov	r3, sp
 8007f1c:	3300      	adds	r3, #0
 8007f1e:	61fb      	str	r3, [r7, #28]

				availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	837b      	strh	r3, [r7, #26]

				if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8007f30:	8b7a      	ldrh	r2, [r7, #26]
 8007f32:	7d7b      	ldrb	r3, [r7, #21]
 8007f34:	4619      	mov	r1, r3
 8007f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f3a:	440b      	add	r3, r1
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	db1d      	blt.n	8007f7c <SBGC32_RX+0x1c6>
 8007f40:	8b7b      	ldrh	r3, [r7, #26]
 8007f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d018      	beq.n	8007f7c <SBGC32_RX+0x1c6>
					FOR_(i, headBuff[1] + checksumSize)
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f4e:	e00c      	b.n	8007f6a <SBGC32_RX+0x1b4>
						generalSBGC->RxFunc(generalSBGC->Drv, &complexBuff[i + 3]);  // Offset from header space
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	6810      	ldr	r0, [r2, #0]
 8007f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f5a:	3203      	adds	r2, #3
 8007f5c:	69f9      	ldr	r1, [r7, #28]
 8007f5e:	440a      	add	r2, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	4798      	blx	r3
					FOR_(i, headBuff[1] + checksumSize)
 8007f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f66:	3301      	adds	r3, #1
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f6a:	7d7b      	ldrb	r3, [r7, #21]
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f72:	4413      	add	r3, r2
 8007f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f76:	429a      	cmp	r2, r3
 8007f78:	dbea      	blt.n	8007f50 <SBGC32_RX+0x19a>
 8007f7a:	e003      	b.n	8007f84 <SBGC32_RX+0x1ce>

				else
				{
					lastParserError = RX_BUFFER_REALTIME_ERROR;
 8007f7c:	2304      	movs	r3, #4
 8007f7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8007f82:	e056      	b.n	8008032 <SBGC32_RX+0x27c>
				}

				/* Checksum checking */
				if (!(checksumSize - 1))  // If SBGC_PROTOCOL_V1
 8007f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d115      	bne.n	8007fb8 <SBGC32_RX+0x202>
				{
					if (complexBuff[3 + headBuff[1]] != Modulo256_Calculate(&complexBuff[3], headBuff[1]))
 8007f8c:	7d7b      	ldrb	r3, [r7, #21]
 8007f8e:	3303      	adds	r3, #3
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	5cd6      	ldrb	r6, [r2, r3]
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	3303      	adds	r3, #3
 8007f98:	7d7a      	ldrb	r2, [r7, #21]
 8007f9a:	b292      	uxth	r2, r2
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fdac 	bl	8008afc <Modulo256_Calculate>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	429e      	cmp	r6, r3
 8007fa8:	d031      	beq.n	800800e <SBGC32_RX+0x258>
					{
						lastParserError = RX_PAYLOAD_CHECKSUM_ERROR;
 8007faa:	2306      	movs	r3, #6
 8007fac:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						parserState = STATE_RESYNC;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8007fb6:	e03c      	b.n	8008032 <SBGC32_RX+0x27c>
					}
				}

				else
				{
					memcpy(complexBuff, headBuff, 3);
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	8819      	ldrh	r1, [r3, #0]
 8007fc2:	789b      	ldrb	r3, [r3, #2]
 8007fc4:	8011      	strh	r1, [r2, #0]
 8007fc6:	7093      	strb	r3, [r2, #2]
					ui16 CRC_Res = CRC16_Calculate(complexBuff, headBuff[1] + 3);
 8007fc8:	7d7b      	ldrb	r3, [r7, #21]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3303      	adds	r3, #3
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	69f8      	ldr	r0, [r7, #28]
 8007fd4:	f000 fdb9 	bl	8008b4a <CRC16_Calculate>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	833b      	strh	r3, [r7, #24]

					if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8007fdc:	8b3b      	ldrh	r3, [r7, #24]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	7d7a      	ldrb	r2, [r7, #21]
 8007fe2:	3203      	adds	r2, #3
 8007fe4:	69f9      	ldr	r1, [r7, #28]
 8007fe6:	5c8a      	ldrb	r2, [r1, r2]
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d010      	beq.n	800800e <SBGC32_RX+0x258>
					   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 8007fec:	8b3b      	ldrh	r3, [r7, #24]
 8007fee:	0a1b      	lsrs	r3, r3, #8
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	7d7a      	ldrb	r2, [r7, #21]
 8007ff6:	3204      	adds	r2, #4
 8007ff8:	69f9      	ldr	r1, [r7, #28]
 8007ffa:	5c8a      	ldrb	r2, [r1, r2]
					if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d006      	beq.n	800800e <SBGC32_RX+0x258>
					{
						lastParserError = RX_PAYLOAD_CHECKSUM_ERROR;
 8008000:	2306      	movs	r3, #6
 8008002:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						parserState = STATE_RESYNC;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 800800c:	e011      	b.n	8008032 <SBGC32_RX+0x27c>
					}
				}

				/* Data passed all checks. Filling the serialCommand struct */
				serialCommand->commandID = headBuff[0];
 800800e:	7d3a      	ldrb	r2, [r7, #20]
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	701a      	strb	r2, [r3, #0]
				memcpy(serialCommand->payload, &complexBuff[3], headBuff[1]);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	1c58      	adds	r0, r3, #1
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	3303      	adds	r3, #3
 800801c:	7d7a      	ldrb	r2, [r7, #21]
 800801e:	4619      	mov	r1, r3
 8008020:	f001 f856 	bl	80090d0 <memcpy>
				serialCommand->payloadSize = headBuff[1];
 8008024:	7d7a      	ldrb	r2, [r7, #21]
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

				return TX_RX_OK;  // Incoming command was received fine
 800802c:	2300      	movs	r3, #0
 800802e:	46d5      	mov	sp, sl
 8008030:	e011      	b.n	8008056 <SBGC32_RX+0x2a0>
 8008032:	46d5      	mov	sp, sl
 8008034:	e000      	b.n	8008038 <SBGC32_RX+0x282>
				break;  // Passing to next state
 8008036:	bf00      	nop
			}
		}

		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= timeout)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	6812      	ldr	r2, [r2, #0]
 8008040:	4610      	mov	r0, r2
 8008042:	4798      	blx	r3
 8008044:	4602      	mov	r2, r0
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	f63f aeca 	bhi.w	8007de6 <SBGC32_RX+0x30>
			return lastParserError;
 8008052:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
	}
}
 8008056:	4618      	mov	r0, r3
 8008058:	3738      	adds	r7, #56	; 0x38
 800805a:	46bd      	mov	sp, r7
 800805c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008060 <SBGC32_TX_RX>:
 *  @param	cmdID - SBGC32 command identifier
 *
 *  @return	Request response result
 */
TxRxStatus_t SBGC32_TX_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, SBGC_Commands_t cmdID)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	71fb      	strb	r3, [r7, #7]
	if (SBGC32_TX(generalSBGC, serialCommand))
 800806e:	68b9      	ldr	r1, [r7, #8]
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f7ff fd80 	bl	8007b76 <SBGC32_TX>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <SBGC32_TX_RX+0x20>
		return TX_BUFFER_OVERFLOW_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e038      	b.n	80080f2 <SBGC32_TX_RX+0x92>

	else
	{
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	6812      	ldr	r2, [r2, #0]
 8008088:	4610      	mov	r0, r2
 800808a:	4798      	blx	r3
 800808c:	6178      	str	r0, [r7, #20]

		while (1)
		{
			TxRxStatus_t lastParserStatus = SBGC32_RX(generalSBGC, serialCommand, generalSBGC->rxTimeout);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	461a      	mov	r2, r3
 8008094:	68b9      	ldr	r1, [r7, #8]
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f7ff fe8d 	bl	8007db6 <SBGC32_RX>
 800809c:	4603      	mov	r3, r0
 800809e:	74fb      	strb	r3, [r7, #19]

			if (lastParserStatus == TX_RX_OK &&
 80080a0:	7cfb      	ldrb	r3, [r7, #19]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d109      	bne.n	80080ba <SBGC32_TX_RX+0x5a>
			   (serialCommand->commandID == cmdID || cmdID == 0))
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	781b      	ldrb	r3, [r3, #0]
			if (lastParserStatus == TX_RX_OK &&
 80080aa:	79fa      	ldrb	r2, [r7, #7]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d002      	beq.n	80080b6 <SBGC32_TX_RX+0x56>
			   (serialCommand->commandID == cmdID || cmdID == 0))
 80080b0:	79fb      	ldrb	r3, [r7, #7]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <SBGC32_TX_RX+0x5a>
				return lastParserStatus;
 80080b6:	7cfb      	ldrb	r3, [r7, #19]
 80080b8:	e01b      	b.n	80080f2 <SBGC32_TX_RX+0x92>

			else if (lastParserStatus == TX_RX_OK &&
 80080ba:	7cfb      	ldrb	r3, [r7, #19]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <SBGC32_TX_RX+0x76>
					(serialCommand->commandID != cmdID))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	781b      	ldrb	r3, [r3, #0]
			else if (lastParserStatus == TX_RX_OK &&
 80080c4:	79fa      	ldrb	r2, [r7, #7]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d005      	beq.n	80080d6 <SBGC32_TX_RX+0x76>
				generalSBGC->_missedCommandCount++;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ce:	3301      	adds	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	859a      	strh	r2, [r3, #44]	; 0x2c

			if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	6812      	ldr	r2, [r2, #0]
 80080de:	4610      	mov	r0, r2
 80080e0:	4798      	blx	r3
 80080e2:	4602      	mov	r2, r0
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d3ce      	bcc.n	800808e <SBGC32_TX_RX+0x2e>
				return lastParserStatus;  // or return RX_TIMEOUT_ERROR;
 80080f0:	7cfb      	ldrb	r3, [r7, #19]
		}
	}
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <WriteBuff>:
 * 	@param	*buff - write data
 * 	@param	size - write data size
 * 	@param	parserMap - data type required for correct parsing
 */
void WriteBuff (SerialCommand_t *cmd, const void *buff, ui8 size, ParserMap_t parserMap)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	4611      	mov	r1, r2
 8008106:	461a      	mov	r2, r3
 8008108:	460b      	mov	r3, r1
 800810a:	71fb      	strb	r3, [r7, #7]
 800810c:	4613      	mov	r3, r2
 800810e:	71bb      	strb	r3, [r7, #6]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - size)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008116:	461a      	mov	r2, r3
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800811e:	429a      	cmp	r2, r3
 8008120:	dc1b      	bgt.n	800815a <WriteBuff+0x60>
	{
		memcpy(&cmd->payload[cmd->payloadSize], buff, size);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008128:	461a      	mov	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4413      	add	r3, r2
 800812e:	3301      	adds	r3, #1
 8008130:	79fa      	ldrb	r2, [r7, #7]
 8008132:	68b9      	ldr	r1, [r7, #8]
 8008134:	4618      	mov	r0, r3
 8008136:	f000 ffcb 	bl	80090d0 <memcpy>
		SwapBytesInStruct(cmd->payload, size, parserMap);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	79ba      	ldrb	r2, [r7, #6]
 8008140:	79f9      	ldrb	r1, [r7, #7]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 f840 	bl	80081c8 <SwapBytesInStruct>
		cmd->payloadSize += size;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	4413      	add	r3, r2
 8008152:	b2da      	uxtb	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <ReadBuff>:
 *	@param	*buff - read data buffer
 *	@param	size - read data size
 *	@param	parserMap - data type required for correct parsing
 */
void ReadBuff (SerialCommand_t *cmd, void *buff, ui8 size, ParserMap_t parserMap)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b084      	sub	sp, #16
 8008166:	af00      	add	r7, sp, #0
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	4611      	mov	r1, r2
 800816e:	461a      	mov	r2, r3
 8008170:	460b      	mov	r3, r1
 8008172:	71fb      	strb	r3, [r7, #7]
 8008174:	4613      	mov	r3, r2
 8008176:	71bb      	strb	r3, [r7, #6]
    if (size <= (MAX_BUFF_SIZE - cmd->readPos))
 8008178:	79fa      	ldrb	r2, [r7, #7]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008180:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008184:	429a      	cmp	r2, r3
 8008186:	dc1b      	bgt.n	80081c0 <ReadBuff+0x5e>
    {
		SwapBytesInStruct(cmd->payload, size, parserMap);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3301      	adds	r3, #1
 800818c:	79ba      	ldrb	r2, [r7, #6]
 800818e:	79f9      	ldrb	r1, [r7, #7]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f819 	bl	80081c8 <SwapBytesInStruct>
		memcpy(buff, &cmd->payload[cmd->readPos], size);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800819c:	461a      	mov	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4413      	add	r3, r2
 80081a2:	3301      	adds	r3, #1
 80081a4:	79fa      	ldrb	r2, [r7, #7]
 80081a6:	4619      	mov	r1, r3
 80081a8:	68b8      	ldr	r0, [r7, #8]
 80081aa:	f000 ff91 	bl	80090d0 <memcpy>
		cmd->readPos += size;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	4413      	add	r3, r2
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <SwapBytesInStruct>:
 *	@param 	*structure - structure buffer to bytes rearrange
 *	@param	size - structure buffer size
 *	@param	parserMap - data type required for correct parsing
 */
void SwapBytesInStruct (ui8 *structure, ui8 size, ParserMap_t parserMap)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70fb      	strb	r3, [r7, #3]
 80081d4:	4613      	mov	r3, r2
 80081d6:	70bb      	strb	r3, [r7, #2]
				}
			}
		}

	#endif
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
void ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	d80b      	bhi.n	8008210 <ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d101      	bne.n	8008202 <ToLittleEndian+0x1e>
 80081fe:	2304      	movs	r3, #4
 8008200:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	461a      	mov	r2, r3
 8008206:	68f9      	ldr	r1, [r7, #12]
 8008208:	68b8      	ldr	r0, [r7, #8]
 800820a:	f000 ff61 	bl	80090d0 <memcpy>
 800820e:	e000      	b.n	8008212 <ToLittleEndian+0x2e>
	if (size > 4) return;
 8008210:	bf00      	nop

		FOR_(i, size / 2)
			SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
void FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	2b04      	cmp	r3, #4
 800822a:	d80b      	bhi.n	8008244 <FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 800822c:	79fb      	ldrb	r3, [r7, #7]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d101      	bne.n	8008236 <FromLittleEndian+0x1e>
 8008232:	2304      	movs	r3, #4
 8008234:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	461a      	mov	r2, r3
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f000 ff47 	bl	80090d0 <memcpy>
 8008242:	e000      	b.n	8008246 <FromLittleEndian+0x2e>
	if (size > 4) return;
 8008244:	bf00      	nop

		FOR_(i, size / 2)
			SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <WriteByte>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	byte - byte to write
 */
void WriteByte (SerialCommand_t *cmd, const ui8 byte)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
	if (cmd->payloadSize < MAX_BUFF_SIZE)
		cmd->payload[cmd->payloadSize++] = byte;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	b2d1      	uxtb	r1, r2
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 8008268:	461a      	mov	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	705a      	strb	r2, [r3, #1]
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <ReadByte>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Byte read
 */
ui8 ReadByte (SerialCommand_t *cmd)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
	return cmd->payload[cmd->readPos++];
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	b2d1      	uxtb	r1, r2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	f882 1102 	strb.w	r1, [r2, #258]	; 0x102
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4413      	add	r3, r2
 800829c:	785b      	ldrb	r3, [r3, #1]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <WriteWord>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	word - two bytes to write
 */
void WriteWord (SerialCommand_t *cmd, const ui16 word)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b082      	sub	sp, #8
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	807b      	strh	r3, [r7, #2]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 2)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80082bc:	2bff      	cmp	r3, #255	; 0xff
 80082be:	d013      	beq.n	80082e8 <WriteWord+0x3e>
	{
		ToLittleEndian(&word, &cmd->payload[cmd->payloadSize], 2);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	1c59      	adds	r1, r3, #1
 80082ce:	1cbb      	adds	r3, r7, #2
 80082d0:	2202      	movs	r2, #2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff ff86 	bl	80081e4 <ToLittleEndian>
		cmd->payloadSize += 2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80082de:	3302      	adds	r3, #2
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <ReadWord>:
 *	@param 	*cmd - SerialCommand
 *
 *	@return	Word read
 */
ui16 ReadWord (SerialCommand_t *cmd)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
	ui16 word;
	FromLittleEndian(&word, &cmd->payload[cmd->readPos], 2);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80082fe:	461a      	mov	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4413      	add	r3, r2
 8008304:	1c59      	adds	r1, r3, #1
 8008306:	f107 030e 	add.w	r3, r7, #14
 800830a:	2202      	movs	r2, #2
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff ff83 	bl	8008218 <FromLittleEndian>
	cmd->readPos += 2;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008318:	3302      	adds	r3, #2
 800831a:	b2da      	uxtb	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return word;
 8008322:	89fb      	ldrh	r3, [r7, #14]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3710      	adds	r7, #16
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <WriteLong>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	dword - four bytes to write
 */
void WriteLong (SerialCommand_t *cmd, const ui32 dword)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 4)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800833c:	2bfc      	cmp	r3, #252	; 0xfc
 800833e:	d813      	bhi.n	8008368 <WriteLong+0x3c>
	{
		ToLittleEndian(&dword, &cmd->payload[cmd->payloadSize], 4);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008346:	461a      	mov	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4413      	add	r3, r2
 800834c:	1c59      	adds	r1, r3, #1
 800834e:	463b      	mov	r3, r7
 8008350:	2204      	movs	r2, #4
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff ff46 	bl	80081e4 <ToLittleEndian>
		cmd->payloadSize += 4;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800835e:	3304      	adds	r3, #4
 8008360:	b2da      	uxtb	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <ReadLong>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Long read
 */
ui32 ReadLong (SerialCommand_t *cmd)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	ui32 dword;
	FromLittleEndian(&dword, &cmd->payload[cmd->readPos], 4);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4413      	add	r3, r2
 8008384:	1c59      	adds	r1, r3, #1
 8008386:	f107 030c 	add.w	r3, r7, #12
 800838a:	2204      	movs	r2, #4
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff ff43 	bl	8008218 <FromLittleEndian>
	cmd->readPos += 4;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008398:	3304      	adds	r3, #4
 800839a:	b2da      	uxtb	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return dword;
 80083a2:	68fb      	ldr	r3, [r7, #12]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <SkipBytes>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	size - size of skipped data
 */
void SkipBytes (SerialCommand_t *cmd, ui8 size)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
	cmd->readPos += size;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 80083be:	78fb      	ldrb	r3, [r7, #3]
 80083c0:	4413      	add	r3, r2
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <InitCmdWrite>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	cmdID - SBGC32 command identifier
 */
void InitCmdWrite (SerialCommand_t *cmd, SBGC_Commands_t cmdID)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b083      	sub	sp, #12
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
	cmd->commandID = cmdID;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	701a      	strb	r2, [r3, #0]
	cmd->payloadSize = 0;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <SBGC32_DefaultInit>:
 *	@return Communication status
 */
TxRxStatus_t SBGC32_DefaultInit (GeneralSBGC_t *generalSBGC, TxFunc_t TxFunc, RxFunc_t RxFunc,
								 AvailableBytesFunc_t AvailableBytesFunc, TxDebugFunc_t TxDebugFunc,
								 GetTimeFunc_t GetTimeFunc, SBGC_ProtocolVersion_t protocolVersion)
{
 80083fc:	b590      	push	{r4, r7, lr}
 80083fe:	b0c7      	sub	sp, #284	; 0x11c
 8008400:	af00      	add	r7, sp, #0
 8008402:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8008406:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 800840a:	6020      	str	r0, [r4, #0]
 800840c:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8008410:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 8008414:	6001      	str	r1, [r0, #0]
 8008416:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800841a:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 800841e:	600a      	str	r2, [r1, #0]
 8008420:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008424:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008428:	6013      	str	r3, [r2, #0]
	generalSBGC->TxFunc = TxFunc;
 800842a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800842e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008438:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800843c:	6812      	ldr	r2, [r2, #0]
 800843e:	605a      	str	r2, [r3, #4]
	generalSBGC->RxFunc = RxFunc;
 8008440:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008444:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800844e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8008452:	6812      	ldr	r2, [r2, #0]
 8008454:	609a      	str	r2, [r3, #8]
	generalSBGC->AvailableBytesFunc = AvailableBytesFunc;
 8008456:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800845a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008464:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8008468:	6812      	ldr	r2, [r2, #0]
 800846a:	60da      	str	r2, [r3, #12]
	generalSBGC->TxDebugFunc = TxDebugFunc;
 800846c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008470:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800847a:	611a      	str	r2, [r3, #16]
	generalSBGC->GetTimeFunc = GetTimeFunc;
 800847c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008480:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800848a:	615a      	str	r2, [r3, #20]

	generalSBGC->protocolVersion = protocolVersion;
 800848c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008490:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f897 2130 	ldrb.w	r2, [r7, #304]	; 0x130
 800849a:	761a      	strb	r2, [r3, #24]
	generalSBGC->txTimeout = SBGC_TX_WAITING;
 800849c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2264      	movs	r2, #100	; 0x64
 80084a8:	61da      	str	r2, [r3, #28]
	generalSBGC->rxTimeout = SBGC_RX_WAITING;
 80084aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80084b8:	621a      	str	r2, [r3, #32]
	generalSBGC->txrxTimeout = SBGC_RX_WAITING;
 80084ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80084c8:	625a      	str	r2, [r3, #36]	; 0x24

	generalSBGC->_txErrorsCount = 0;
 80084ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2200      	movs	r2, #0
 80084d6:	851a      	strh	r2, [r3, #40]	; 0x28
	generalSBGC->_rxErrorsCount = 0;
 80084d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	855a      	strh	r2, [r3, #42]	; 0x2a

	/* Startup Delay */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 80084e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80084ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80084f6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80084fa:	6812      	ldr	r2, [r2, #0]
 80084fc:	6812      	ldr	r2, [r2, #0]
 80084fe:	4610      	mov	r0, r2
 8008500:	4798      	blx	r3
 8008502:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
	while ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) < SBGC_STARTUP_DELAY);
 8008506:	bf00      	nop
 8008508:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800850c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8008518:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800851c:	6812      	ldr	r2, [r2, #0]
 800851e:	6812      	ldr	r2, [r2, #0]
 8008520:	4610      	mov	r0, r2
 8008522:	4798      	blx	r3
 8008524:	4602      	mov	r2, r0
 8008526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008530:	d3ea      	bcc.n	8008508 <SBGC32_DefaultInit+0x10c>

	/* Getting board information */
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO);
 8008532:	f107 0310 	add.w	r3, r7, #16
 8008536:	2156      	movs	r1, #86	; 0x56
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff ff4c 	bl	80083d6 <InitCmdWrite>
	WriteWord(&cmd, 0);  // cfg = 0
 800853e:	f107 0310 	add.w	r3, r7, #16
 8008542:	2100      	movs	r1, #0
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff feb0 	bl	80082aa <WriteWord>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO), "Board Info:") == TX_RX_OK)
 800854a:	f107 0110 	add.w	r1, r7, #16
 800854e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008552:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008556:	2256      	movs	r2, #86	; 0x56
 8008558:	6818      	ldr	r0, [r3, #0]
 800855a:	f7ff fd81 	bl	8008060 <SBGC32_TX_RX>
 800855e:	4603      	mov	r3, r0
 8008560:	4619      	mov	r1, r3
 8008562:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008566:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800856a:	4a47      	ldr	r2, [pc, #284]	; (8008688 <SBGC32_DefaultInit+0x28c>)
 800856c:	6818      	ldr	r0, [r3, #0]
 800856e:	f000 fa17 	bl	80089a0 <CheckReceipt>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d119      	bne.n	80085ac <SBGC32_DefaultInit+0x1b0>
	{
		generalSBGC->_boardVersion = cmd.payload[0];
 8008578:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800857c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008580:	785a      	ldrb	r2, [r3, #1]
 8008582:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		FromLittleEndian(&generalSBGC->_firmwareVersion, &cmd.payload[1], 2);
 8008590:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008594:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800859e:	f107 0310 	add.w	r3, r7, #16
 80085a2:	3302      	adds	r3, #2
 80085a4:	2202      	movs	r2, #2
 80085a6:	4619      	mov	r1, r3
 80085a8:	f7ff fe36 	bl	8008218 <FromLittleEndian>
	}

	#ifdef SBGC_DEBUG_MODE

		PrintMessage(generalSBGC, TEXT_SIZE_(" \n"));
 80085ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085b4:	2202      	movs	r2, #2
 80085b6:	4935      	ldr	r1, [pc, #212]	; (800868c <SBGC32_DefaultInit+0x290>)
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	f000 fb07 	bl	8008bcc <PrintMessage>
		PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n"));
 80085be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085c6:	221f      	movs	r2, #31
 80085c8:	4931      	ldr	r1, [pc, #196]	; (8008690 <SBGC32_DefaultInit+0x294>)
 80085ca:	6818      	ldr	r0, [r3, #0]
 80085cc:	f000 fafe 	bl	8008bcc <PrintMessage>

		if (generalSBGC->_ParserCurrentStatus == TX_RX_OK)
 80085d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d133      	bne.n	800864a <SBGC32_DefaultInit+0x24e>
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("The system is ready to go!\n"));
 80085e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085ea:	221b      	movs	r2, #27
 80085ec:	4929      	ldr	r1, [pc, #164]	; (8008694 <SBGC32_DefaultInit+0x298>)
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	f000 faec 	bl	8008bcc <PrintMessage>
			PrintStructElement(generalSBGC, generalSBGC->_boardVersion, "Board Version: ", _UNSIGNED_CHAR_);
 80085f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80085f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008602:	4619      	mov	r1, r3
 8008604:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008608:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 800860c:	2301      	movs	r3, #1
 800860e:	4a22      	ldr	r2, [pc, #136]	; (8008698 <SBGC32_DefaultInit+0x29c>)
 8008610:	6800      	ldr	r0, [r0, #0]
 8008612:	f000 faed 	bl	8008bf0 <PrintStructElement>
			PrintStructElement(generalSBGC, generalSBGC->_firmwareVersion, "Firmware Version: ", _UNSIGNED_SHORT_);
 8008616:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800861a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008622:	4619      	mov	r1, r3
 8008624:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008628:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 800862c:	2303      	movs	r3, #3
 800862e:	4a1b      	ldr	r2, [pc, #108]	; (800869c <SBGC32_DefaultInit+0x2a0>)
 8008630:	6800      	ldr	r0, [r0, #0]
 8008632:	f000 fadd 	bl	8008bf0 <PrintStructElement>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\r"));
 8008636:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800863a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800863e:	2220      	movs	r2, #32
 8008640:	4917      	ldr	r1, [pc, #92]	; (80086a0 <SBGC32_DefaultInit+0x2a4>)
 8008642:	6818      	ldr	r0, [r3, #0]
 8008644:	f000 fac2 	bl	8008bcc <PrintMessage>
 8008648:	e011      	b.n	800866e <SBGC32_DefaultInit+0x272>
		}

		else
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("Communication Error!\n"));
 800864a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800864e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008652:	2215      	movs	r2, #21
 8008654:	4913      	ldr	r1, [pc, #76]	; (80086a4 <SBGC32_DefaultInit+0x2a8>)
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	f000 fab8 	bl	8008bcc <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\r"));
 800865c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008660:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008664:	2220      	movs	r2, #32
 8008666:	490e      	ldr	r1, [pc, #56]	; (80086a0 <SBGC32_DefaultInit+0x2a4>)
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	f000 faaf 	bl	8008bcc <PrintMessage>
		}

	#endif

	return generalSBGC->_ParserCurrentStatus;
 800866e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008672:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 800867c:	4618      	mov	r0, r3
 800867e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8008682:	46bd      	mov	sp, r7
 8008684:	bd90      	pop	{r4, r7, pc}
 8008686:	bf00      	nop
 8008688:	0800d968 	.word	0x0800d968
 800868c:	0800d974 	.word	0x0800d974
 8008690:	0800d978 	.word	0x0800d978
 8008694:	0800d998 	.word	0x0800d998
 8008698:	0800d9b4 	.word	0x0800d9b4
 800869c:	0800d9c4 	.word	0x0800d9c4
 80086a0:	0800d9d8 	.word	0x0800d9d8
 80086a4:	0800d9fc 	.word	0x0800d9fc

080086a8 <SBGC32_CheckConfirmation>:
 *	@param	cmdID - identifier of the SerialCommand being confirmed
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_CheckConfirmation (GeneralSBGC_t *generalSBGC, ConfirmationState_t *confirmationState, SBGC_Commands_t cmdID)
{
 80086a8:	b590      	push	{r4, r7, lr}
 80086aa:	b0cf      	sub	sp, #316	; 0x13c
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086b6:	6018      	str	r0, [r3, #0]
 80086b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c0:	6019      	str	r1, [r3, #0]
 80086c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086c6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80086ca:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 80086cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80086dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80086e0:	6812      	ldr	r2, [r2, #0]
 80086e2:	6812      	ldr	r2, [r2, #0]
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
		char debugStr [30];
	#endif

	while (1)
	{
		TxRxStatus_t lastParserStatus = SBGC32_RX(generalSBGC, &cmd, generalSBGC->txrxTimeout);
 80086ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086f8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80086fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	f7ff fb56 	bl	8007db6 <SBGC32_RX>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133

		if (lastParserStatus == TX_RX_OK &&
 8008710:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008714:	2b00      	cmp	r3, #0
 8008716:	f040 80a2 	bne.w	800885e <SBGC32_CheckConfirmation+0x1b6>
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 800871a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800871e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008722:	781b      	ldrb	r3, [r3, #0]
		if (lastParserStatus == TX_RX_OK &&
 8008724:	2b43      	cmp	r3, #67	; 0x43
 8008726:	d10b      	bne.n	8008740 <SBGC32_CheckConfirmation+0x98>
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 8008728:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800872c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008736:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800873a:	7812      	ldrb	r2, [r2, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d007      	beq.n	8008750 <SBGC32_CheckConfirmation+0xa8>
			(cmd.commandID == CMD_RESET)))
 8008740:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008748:	781b      	ldrb	r3, [r3, #0]
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 800874a:	2b72      	cmp	r3, #114	; 0x72
 800874c:	f040 8087 	bne.w	800885e <SBGC32_CheckConfirmation+0x1b6>
		{
			confirmationState->cmdID = ReadByte(&cmd);
 8008750:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008754:	4618      	mov	r0, r3
 8008756:	f7ff fd92 	bl	800827e <ReadByte>
 800875a:	4603      	mov	r3, r0
 800875c:	461a      	mov	r2, r3
 800875e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	701a      	strb	r2, [r3, #0]

			if (cmd.payloadSize == 2)
 800876a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800876e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008772:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008776:	2b02      	cmp	r3, #2
 8008778:	d10e      	bne.n	8008798 <SBGC32_CheckConfirmation+0xf0>
				confirmationState->cmdData = ReadByte(&cmd);
 800877a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800877e:	4618      	mov	r0, r3
 8008780:	f7ff fd7d 	bl	800827e <ReadByte>
 8008784:	4603      	mov	r3, r0
 8008786:	b29a      	uxth	r2, r3
 8008788:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800878c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8a3 2001 	strh.w	r2, [r3, #1]
 8008796:	e015      	b.n	80087c4 <SBGC32_CheckConfirmation+0x11c>
			else if (cmd.payloadSize == 3)
 8008798:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800879c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80087a4:	2b03      	cmp	r3, #3
 80087a6:	d10d      	bne.n	80087c4 <SBGC32_CheckConfirmation+0x11c>
				confirmationState->cmdData = ReadWord(&cmd);
 80087a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fd9f 	bl	80082f0 <ReadWord>
 80087b2:	4603      	mov	r3, r0
 80087b4:	461a      	mov	r2, r3
 80087b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80087ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8a3 2001 	strh.w	r2, [r3, #1]

			#ifdef SBGC_DEBUG_MODE
				/* - - - - - - - User Confirm Handler - - - - - - - - */
				if (cmd.payloadSize <= 1)
 80087c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80087c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087cc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d80d      	bhi.n	80087f0 <SBGC32_CheckConfirmation+0x148>
					sprintf(debugStr, "CMD_CONFIRM #%d\n", confirmationState->cmdID);
 80087d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80087d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	f107 0310 	add.w	r3, r7, #16
 80087e6:	496a      	ldr	r1, [pc, #424]	; (8008990 <SBGC32_CheckConfirmation+0x2e8>)
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 fbc7 	bl	8009f7c <siprintf>
 80087ee:	e013      	b.n	8008818 <SBGC32_CheckConfirmation+0x170>
				else
					sprintf(debugStr, "CMD_CONFIRM #%d (%u)\n", confirmationState->cmdID, confirmationState->cmdData);
 80087f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80087f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800880c:	b29b      	uxth	r3, r3
 800880e:	f107 0010 	add.w	r0, r7, #16
 8008812:	4960      	ldr	r1, [pc, #384]	; (8008994 <SBGC32_CheckConfirmation+0x2ec>)
 8008814:	f001 fbb2 	bl	8009f7c <siprintf>

				generalSBGC->TxDebugFunc(debugStr, strlen(debugStr));
 8008818:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800881c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	691c      	ldr	r4, [r3, #16]
 8008824:	f107 0310 	add.w	r3, r7, #16
 8008828:	4618      	mov	r0, r3
 800882a:	f7f7 fd09 	bl	8000240 <strlen>
 800882e:	4603      	mov	r3, r0
 8008830:	b29a      	uxth	r2, r3
 8008832:	f107 0310 	add.w	r3, r7, #16
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	47a0      	blx	r4
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = lastParserStatus;
 800883c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800884a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 800884e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800885c:	e093      	b.n	8008986 <SBGC32_CheckConfirmation+0x2de>
		}

		else if (lastParserStatus == TX_RX_OK && (cmd.commandID == CMD_ERROR))
 800885e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8008862:	2b00      	cmp	r3, #0
 8008864:	d15c      	bne.n	8008920 <SBGC32_CheckConfirmation+0x278>
 8008866:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800886a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2bff      	cmp	r3, #255	; 0xff
 8008872:	d155      	bne.n	8008920 <SBGC32_CheckConfirmation+0x278>
		{
			confirmationState->errCode = ReadByte(&cmd);
 8008874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff fd00 	bl	800827e <ReadByte>
 800887e:	4603      	mov	r3, r0
 8008880:	461a      	mov	r2, r3
 8008882:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	70da      	strb	r2, [r3, #3]

			if (cmd.payloadSize > 1)
 800888e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008896:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800889a:	2b01      	cmp	r3, #1
 800889c:	d90b      	bls.n	80088b6 <SBGC32_CheckConfirmation+0x20e>
				ReadBuff(&cmd, &confirmationState->errData, 4, PM_DEFAULT_8BIT);
 800889e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	1d19      	adds	r1, r3, #4
 80088aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80088ae:	2300      	movs	r3, #0
 80088b0:	2204      	movs	r2, #4
 80088b2:	f7ff fc56 	bl	8008162 <ReadBuff>

			#ifdef SBGC_DEBUG_MODE
				/* - - - - - - - - User Error Handler - - - - - - - - */
				sprintf(debugStr, "CMD_ERROR: #%d (%s)\n", confirmationState->errCode, confirmationState->errData);
 80088b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	78db      	ldrb	r3, [r3, #3]
 80088c2:	461a      	mov	r2, r3
 80088c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3304      	adds	r3, #4
 80088d0:	f107 0010 	add.w	r0, r7, #16
 80088d4:	4930      	ldr	r1, [pc, #192]	; (8008998 <SBGC32_CheckConfirmation+0x2f0>)
 80088d6:	f001 fb51 	bl	8009f7c <siprintf>
				generalSBGC->TxDebugFunc(debugStr, strlen(debugStr));
 80088da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80088de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	691c      	ldr	r4, [r3, #16]
 80088e6:	f107 0310 	add.w	r3, r7, #16
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7f7 fca8 	bl	8000240 <strlen>
 80088f0:	4603      	mov	r3, r0
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	f107 0310 	add.w	r3, r7, #16
 80088f8:	4611      	mov	r1, r2
 80088fa:	4618      	mov	r0, r3
 80088fc:	47a0      	blx	r4
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = lastParserStatus;
 80088fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008902:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800890c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 8008910:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800891e:	e032      	b.n	8008986 <SBGC32_CheckConfirmation+0x2de>
		}

		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 8008920:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008930:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008934:	6812      	ldr	r2, [r2, #0]
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	4610      	mov	r0, r2
 800893a:	4798      	blx	r3
 800893c:	4602      	mov	r2, r0
 800893e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008942:	1ad2      	subs	r2, r2, r3
 8008944:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008948:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	429a      	cmp	r2, r3
 8008952:	f4ff aecb 	bcc.w	80086ec <SBGC32_CheckConfirmation+0x44>
		{
			#ifdef SBGC_DEBUG_MODE
				/*  - - - - - - User Wait-Error Handler - - - - - - - */
				PrintMessage(generalSBGC, TEXT_SIZE_("CONFIRM_TIMEOUT_ERROR!\n"));
 8008956:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800895a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800895e:	2217      	movs	r2, #23
 8008960:	490e      	ldr	r1, [pc, #56]	; (800899c <SBGC32_CheckConfirmation+0x2f4>)
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	f000 f932 	bl	8008bcc <PrintMessage>
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = RX_TIMEOUT_ERROR;
 8008968:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800896c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2208      	movs	r2, #8
 8008974:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 8008978:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800897c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
		}
	}
}
 8008986:	4618      	mov	r0, r3
 8008988:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800898c:	46bd      	mov	sp, r7
 800898e:	bd90      	pop	{r4, r7, pc}
 8008990:	0800da14 	.word	0x0800da14
 8008994:	0800da28 	.word	0x0800da28
 8008998:	0800da40 	.word	0x0800da40
 800899c:	0800da58 	.word	0x0800da58

080089a0 <CheckReceipt>:
 *	@param 	*message - debug info string
 *
 *	@return Communication status
 */
TxRxStatus_t CheckReceipt (GeneralSBGC_t *generalSBGC, TxRxStatus_t receiveStatus, char *message)
{
 80089a0:	b590      	push	{r4, r7, lr}
 80089a2:	b095      	sub	sp, #84	; 0x54
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	460b      	mov	r3, r1
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	72fb      	strb	r3, [r7, #11]
	generalSBGC->_ParserCurrentStatus = receiveStatus;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	7afa      	ldrb	r2, [r7, #11]
 80089b2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (generalSBGC->_ParserCurrentStatus != TX_RX_OK)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <CheckReceipt+0x2c>
		generalSBGC->_rxErrorsCount++;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c4:	3301      	adds	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	855a      	strh	r2, [r3, #42]	; 0x2a

	#ifdef SBGC_DEBUG_MODE

		char totalStr [60];
		ui8 pos = 0;
 80089cc:	2300      	movs	r3, #0
 80089ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (generalSBGC->_ParserCurrentStatus != TX_RX_OK)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d044      	beq.n	8008a66 <CheckReceipt+0xc6>
		{
			/* - - - - - - - - User RX Errors Handler - - - - - - - - */
			memcpy(totalStr, TEXT_SIZE_(message));
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7f7 fc2f 	bl	8000240 <strlen>
 80089e2:	4602      	mov	r2, r0
 80089e4:	f107 0310 	add.w	r3, r7, #16
 80089e8:	6879      	ldr	r1, [r7, #4]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 fb70 	bl	80090d0 <memcpy>
			pos += strlen(message);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f7f7 fc25 	bl	8000240 <strlen>
 80089f6:	4603      	mov	r3, r0
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80089fe:	4413      	add	r3, r2
 8008a00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive Error: "));
 8008a04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a08:	f107 0210 	add.w	r2, r7, #16
 8008a0c:	4413      	add	r3, r2
 8008a0e:	2210      	movs	r2, #16
 8008a10:	4938      	ldr	r1, [pc, #224]	; (8008af4 <CheckReceipt+0x154>)
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fb5c 	bl	80090d0 <memcpy>
			pos += strlen(" Receive Error: ");
 8008a18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a1c:	3310      	adds	r3, #16
 8008a1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pos += ConvertErrorToString(generalSBGC->_ParserCurrentStatus, &totalStr[pos]);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 8008a28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a2c:	f107 0210 	add.w	r2, r7, #16
 8008a30:	4413      	add	r3, r2
 8008a32:	4619      	mov	r1, r3
 8008a34:	f000 f93c 	bl	8008cb0 <ConvertErrorToString>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a40:	4413      	add	r3, r2
 8008a42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8008a46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a4a:	3350      	adds	r3, #80	; 0x50
 8008a4c:	443b      	add	r3, r7
 8008a4e:	220a      	movs	r2, #10
 8008a50:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8008a54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a58:	3301      	adds	r3, #1
 8008a5a:	3350      	adds	r3, #80	; 0x50
 8008a5c:	443b      	add	r3, r7
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f803 2c40 	strb.w	r2, [r3, #-64]
 8008a64:	e031      	b.n	8008aca <CheckReceipt+0x12a>
		}

		else
		{
			/*  - - - - - - - User RX Success Handler - - - - - - - - */
			memcpy(totalStr, TEXT_SIZE_(message));
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7f7 fbea 	bl	8000240 <strlen>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	f107 0310 	add.w	r3, r7, #16
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fb2b 	bl	80090d0 <memcpy>
			pos += strlen(message);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7f7 fbe0 	bl	8000240 <strlen>
 8008a80:	4603      	mov	r3, r0
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a88:	4413      	add	r3, r2
 8008a8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive OK!"));
 8008a8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008a92:	f107 0210 	add.w	r2, r7, #16
 8008a96:	4413      	add	r3, r2
 8008a98:	220c      	movs	r2, #12
 8008a9a:	4917      	ldr	r1, [pc, #92]	; (8008af8 <CheckReceipt+0x158>)
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 fb17 	bl	80090d0 <memcpy>
			pos += strlen(" Receive OK!");
 8008aa2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008aa6:	330c      	adds	r3, #12
 8008aa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8008aac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008ab0:	3350      	adds	r3, #80	; 0x50
 8008ab2:	443b      	add	r3, r7
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8008aba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008abe:	3301      	adds	r3, #1
 8008ac0:	3350      	adds	r3, #80	; 0x50
 8008ac2:	443b      	add	r3, r7
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f803 2c40 	strb.w	r2, [r3, #-64]
			/*  - - - - - - - - - - - - - - - - - - - - - - - - - - - */
		}

		generalSBGC->TxDebugFunc(TEXT_SIZE_(totalStr));
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	691c      	ldr	r4, [r3, #16]
 8008ace:	f107 0310 	add.w	r3, r7, #16
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f7 fbb4 	bl	8000240 <strlen>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	f107 0310 	add.w	r3, r7, #16
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	47a0      	blx	r4

	#endif

	return generalSBGC->_ParserCurrentStatus;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3754      	adds	r7, #84	; 0x54
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd90      	pop	{r4, r7, pc}
 8008af4:	0800da70 	.word	0x0800da70
 8008af8:	0800da84 	.word	0x0800da84

08008afc <Modulo256_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui8 Modulo256_Calculate (ui8 *data, ui16 length)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
    i32 totalSum = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]

    ui16 count = 0;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	817b      	strh	r3, [r7, #10]
    while (count < length)
 8008b10:	e00a      	b.n	8008b28 <Modulo256_Calculate+0x2c>
        totalSum += data[count++];
 8008b12:	897b      	ldrh	r3, [r7, #10]
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	817a      	strh	r2, [r7, #10]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	4413      	add	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
    while (count < length)
 8008b28:	897a      	ldrh	r2, [r7, #10]
 8008b2a:	887b      	ldrh	r3, [r7, #2]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d3f0      	bcc.n	8008b12 <Modulo256_Calculate+0x16>

    return totalSum % 256;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	425a      	negs	r2, r3
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	bf58      	it	pl
 8008b3a:	4253      	negpl	r3, r2
 8008b3c:	b2db      	uxtb	r3, r3
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui16 CRC16_Calculate (ui8 *data, ui16 length)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b087      	sub	sp, #28
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	807b      	strh	r3, [r7, #2]
    ui16 CRC_Register = 0;
 8008b56:	2300      	movs	r3, #0
 8008b58:	82fb      	strh	r3, [r7, #22]
    ui16 polynom = 0x8005;
 8008b5a:	f248 0305 	movw	r3, #32773	; 0x8005
 8008b5e:	823b      	strh	r3, [r7, #16]
    ui8  shiftRegister,
    	 dataBit,
		 CRC_Bit;

    for (ui16 i = 0; i < length; i++)
 8008b60:	2300      	movs	r3, #0
 8008b62:	827b      	strh	r3, [r7, #18]
 8008b64:	e027      	b.n	8008bb6 <CRC16_Calculate+0x6c>
    {
        for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8008b66:	2301      	movs	r3, #1
 8008b68:	757b      	strb	r3, [r7, #21]
 8008b6a:	e01e      	b.n	8008baa <CRC16_Calculate+0x60>
        {
        	dataBit = (data[i] & shiftRegister) ? 1 : 0;
 8008b6c:	8a7b      	ldrh	r3, [r7, #18]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	4413      	add	r3, r2
 8008b72:	781a      	ldrb	r2, [r3, #0]
 8008b74:	7d7b      	ldrb	r3, [r7, #21]
 8008b76:	4013      	ands	r3, r2
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	bf14      	ite	ne
 8008b7e:	2301      	movne	r3, #1
 8008b80:	2300      	moveq	r3, #0
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	73fb      	strb	r3, [r7, #15]
            CRC_Bit = CRC_Register >> 15;
 8008b86:	8afb      	ldrh	r3, [r7, #22]
 8008b88:	0bdb      	lsrs	r3, r3, #15
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	73bb      	strb	r3, [r7, #14]
            CRC_Register <<= 1;
 8008b8e:	8afb      	ldrh	r3, [r7, #22]
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	82fb      	strh	r3, [r7, #22]

            if (dataBit != CRC_Bit)
 8008b94:	7bfa      	ldrb	r2, [r7, #15]
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d003      	beq.n	8008ba4 <CRC16_Calculate+0x5a>
            	CRC_Register ^= polynom;
 8008b9c:	8afa      	ldrh	r2, [r7, #22]
 8008b9e:	8a3b      	ldrh	r3, [r7, #16]
 8008ba0:	4053      	eors	r3, r2
 8008ba2:	82fb      	strh	r3, [r7, #22]
        for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8008ba4:	7d7b      	ldrb	r3, [r7, #21]
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	757b      	strb	r3, [r7, #21]
 8008baa:	7d7b      	ldrb	r3, [r7, #21]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1dd      	bne.n	8008b6c <CRC16_Calculate+0x22>
    for (ui16 i = 0; i < length; i++)
 8008bb0:	8a7b      	ldrh	r3, [r7, #18]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	827b      	strh	r3, [r7, #18]
 8008bb6:	8a7a      	ldrh	r2, [r7, #18]
 8008bb8:	887b      	ldrh	r3, [r7, #2]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d3d3      	bcc.n	8008b66 <CRC16_Calculate+0x1c>
        }
    }

    return CRC_Register;
 8008bbe:	8afb      	ldrh	r3, [r7, #22]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <PrintMessage>:
	 *	@param	*generalSBGC - serial connection descriptor
	 *	@param	*data - printable data
	 *	@param	length - printable data size
	 */
	void PrintMessage (GeneralSBGC_t *generalSBGC, char *data, ui16 length)
	{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
		generalSBGC->TxDebugFunc(data, length);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	88fa      	ldrh	r2, [r7, #6]
 8008be0:	4611      	mov	r1, r2
 8008be2:	68b8      	ldr	r0, [r7, #8]
 8008be4:	4798      	blx	r3
	}
 8008be6:	bf00      	nop
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <PrintStructElement>:
	 *	@param	*data - printable variable
	 *	@param	*str - debug info string
	 *	@param	vType - type of variable
	 */
	void PrintStructElement (GeneralSBGC_t *generalSBGC, i32 data, char *str, VarTypes_t vType)
	{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b094      	sub	sp, #80	; 0x50
 8008bf4:	af02      	add	r7, sp, #8
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	70fb      	strb	r3, [r7, #3]
		char debugStr [50];
		ui8 debugStrLength;

		switch (vType)
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	3b01      	subs	r3, #1
 8008c02:	2b06      	cmp	r3, #6
 8008c04:	d831      	bhi.n	8008c6a <PrintStructElement+0x7a>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <PrintStructElement+0x1c>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c29 	.word	0x08008c29
 8008c10:	08008c39 	.word	0x08008c39
 8008c14:	08008c29 	.word	0x08008c29
 8008c18:	08008c39 	.word	0x08008c39
 8008c1c:	08008c29 	.word	0x08008c29
 8008c20:	08008c39 	.word	0x08008c39
 8008c24:	08008c49 	.word	0x08008c49
			case _UNSIGNED_INT_ :

				#ifdef _L32__
					sprintf(debugStr, "%s %u\n", str, (ui32)data);
				#else
					sprintf(debugStr, "%s %lu\n", str, (ui32)data);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f107 0014 	add.w	r0, r7, #20
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	491c      	ldr	r1, [pc, #112]	; (8008ca4 <PrintStructElement+0xb4>)
 8008c32:	f001 f9a3 	bl	8009f7c <siprintf>
				#endif

				break;
 8008c36:	e020      	b.n	8008c7a <PrintStructElement+0x8a>
			case _SIGNED_INT_ :

				#ifdef _L32__
					sprintf(debugStr, "%s %i\n", str, data);
				#else
					sprintf(debugStr, "%s %li\n", str, data);
 8008c38:	f107 0014 	add.w	r0, r7, #20
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	4919      	ldr	r1, [pc, #100]	; (8008ca8 <PrintStructElement+0xb8>)
 8008c42:	f001 f99b 	bl	8009f7c <siprintf>
				#endif

				break;
 8008c46:	e018      	b.n	8008c7a <PrintStructElement+0x8a>

			case _FLOAT_ :
				sprintf(debugStr, "FLOAT %s %f\n", str, (float)data);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	ee07 3a90 	vmov	s15, r3
 8008c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008c56:	f107 0314 	add.w	r3, r7, #20
 8008c5a:	ed8d 7b00 	vstr	d7, [sp]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	4912      	ldr	r1, [pc, #72]	; (8008cac <PrintStructElement+0xbc>)
 8008c62:	4618      	mov	r0, r3
 8008c64:	f001 f98a 	bl	8009f7c <siprintf>
				break;
 8008c68:	e007      	b.n	8008c7a <PrintStructElement+0x8a>
			default :

				#ifdef _L32__
					sprintf(debugStr, "%s %u\n", str, (ui32)data);
				#else
					sprintf(debugStr, "%s %lu\n", str, (ui32)data);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f107 0014 	add.w	r0, r7, #20
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	490c      	ldr	r1, [pc, #48]	; (8008ca4 <PrintStructElement+0xb4>)
 8008c74:	f001 f982 	bl	8009f7c <siprintf>
				#endif

				break;
 8008c78:	bf00      	nop
		}

		debugStrLength = strlen(debugStr);
 8008c7a:	f107 0314 	add.w	r3, r7, #20
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7f7 fade 	bl	8000240 <strlen>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		PrintMessage(generalSBGC, debugStr, debugStrLength);
 8008c8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	f107 0314 	add.w	r3, r7, #20
 8008c94:	4619      	mov	r1, r3
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f7ff ff98 	bl	8008bcc <PrintMessage>
	}
 8008c9c:	bf00      	nop
 8008c9e:	3748      	adds	r7, #72	; 0x48
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	0800da94 	.word	0x0800da94
 8008ca8:	0800da9c 	.word	0x0800da9c
 8008cac:	0800daa4 	.word	0x0800daa4

08008cb0 <ConvertErrorToString>:
	 *	@param	*str - writable buffer
	 *
	 *	@return	Length of a writable string
	 */
	ui8 ConvertErrorToString (TxRxStatus_t txRxStatus, char *str)
	{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	6039      	str	r1, [r7, #0]
 8008cba:	71fb      	strb	r3, [r7, #7]
		switch (txRxStatus)
 8008cbc:	79fb      	ldrb	r3, [r7, #7]
 8008cbe:	2b09      	cmp	r3, #9
 8008cc0:	d85c      	bhi.n	8008d7c <ConvertErrorToString+0xcc>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <ConvertErrorToString+0x18>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008cf1 	.word	0x08008cf1
 8008ccc:	08008cff 	.word	0x08008cff
 8008cd0:	08008d0d 	.word	0x08008d0d
 8008cd4:	08008d1b 	.word	0x08008d1b
 8008cd8:	08008d29 	.word	0x08008d29
 8008cdc:	08008d37 	.word	0x08008d37
 8008ce0:	08008d45 	.word	0x08008d45
 8008ce4:	08008d53 	.word	0x08008d53
 8008ce8:	08008d61 	.word	0x08008d61
 8008cec:	08008d6f 	.word	0x08008d6f
		{
			case TX_RX_OK :
				memcpy(str, TEXT_SIZE_(nameof(TX_RX_OK)));
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	4925      	ldr	r1, [pc, #148]	; (8008d88 <ConvertErrorToString+0xd8>)
 8008cf4:	6838      	ldr	r0, [r7, #0]
 8008cf6:	f000 f9eb 	bl	80090d0 <memcpy>
				return strlen(nameof(TX_RX_OK));
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	e03f      	b.n	8008d7e <ConvertErrorToString+0xce>

						case TX_BUFFER_OVERFLOW_ERROR :
							memcpy(str, TEXT_SIZE_(nameof(TX_BUFFER_OVERFLOW_ERROR)));
 8008cfe:	2218      	movs	r2, #24
 8008d00:	4922      	ldr	r1, [pc, #136]	; (8008d8c <ConvertErrorToString+0xdc>)
 8008d02:	6838      	ldr	r0, [r7, #0]
 8008d04:	f000 f9e4 	bl	80090d0 <memcpy>
							return strlen(nameof(TX_BUFFER_OVERFLOW_ERROR));
 8008d08:	2318      	movs	r3, #24
 8008d0a:	e038      	b.n	8008d7e <ConvertErrorToString+0xce>

			case RX_START_PARSE :
				memcpy(str, TEXT_SIZE_(nameof(RX_START_PARSE)));
 8008d0c:	220e      	movs	r2, #14
 8008d0e:	4920      	ldr	r1, [pc, #128]	; (8008d90 <ConvertErrorToString+0xe0>)
 8008d10:	6838      	ldr	r0, [r7, #0]
 8008d12:	f000 f9dd 	bl	80090d0 <memcpy>
				return strlen(nameof(RX_START_PARSE));
 8008d16:	230e      	movs	r3, #14
 8008d18:	e031      	b.n	8008d7e <ConvertErrorToString+0xce>

						case RX_EMPTY_BUFF_ERROR :
							memcpy(str, TEXT_SIZE_(nameof(RX_EMPTY_BUFF_ERROR)));
 8008d1a:	2213      	movs	r2, #19
 8008d1c:	491d      	ldr	r1, [pc, #116]	; (8008d94 <ConvertErrorToString+0xe4>)
 8008d1e:	6838      	ldr	r0, [r7, #0]
 8008d20:	f000 f9d6 	bl	80090d0 <memcpy>
							return strlen(nameof(RX_EMPTY_BUFF_ERROR));
 8008d24:	2313      	movs	r3, #19
 8008d26:	e02a      	b.n	8008d7e <ConvertErrorToString+0xce>

			case RX_BUFFER_REALTIME_ERROR :
				memcpy(str, TEXT_SIZE_(nameof(RX_BUFFER_REALTIME_ERROR)));
 8008d28:	2218      	movs	r2, #24
 8008d2a:	491b      	ldr	r1, [pc, #108]	; (8008d98 <ConvertErrorToString+0xe8>)
 8008d2c:	6838      	ldr	r0, [r7, #0]
 8008d2e:	f000 f9cf 	bl	80090d0 <memcpy>
				return strlen(nameof(RX_BUFFER_REALTIME_ERROR));
 8008d32:	2318      	movs	r3, #24
 8008d34:	e023      	b.n	8008d7e <ConvertErrorToString+0xce>

						case RX_HEADER_CHECKSUM_ERROR :
							memcpy(str, TEXT_SIZE_(nameof(RX_HEADER_CHECKSUM_ERROR)));
 8008d36:	2218      	movs	r2, #24
 8008d38:	4918      	ldr	r1, [pc, #96]	; (8008d9c <ConvertErrorToString+0xec>)
 8008d3a:	6838      	ldr	r0, [r7, #0]
 8008d3c:	f000 f9c8 	bl	80090d0 <memcpy>
							return strlen(nameof(RX_HEADER_CHECKSUM_ERROR));
 8008d40:	2318      	movs	r3, #24
 8008d42:	e01c      	b.n	8008d7e <ConvertErrorToString+0xce>

			case RX_PAYLOAD_CHECKSUM_ERROR :
				memcpy(str, TEXT_SIZE_(nameof(RX_PAYLOAD_CHECKSUM_ERROR)));
 8008d44:	2219      	movs	r2, #25
 8008d46:	4916      	ldr	r1, [pc, #88]	; (8008da0 <ConvertErrorToString+0xf0>)
 8008d48:	6838      	ldr	r0, [r7, #0]
 8008d4a:	f000 f9c1 	bl	80090d0 <memcpy>
				return strlen(nameof(RX_PAYLOAD_CHECKSUM_ERROR));
 8008d4e:	2319      	movs	r3, #25
 8008d50:	e015      	b.n	8008d7e <ConvertErrorToString+0xce>

						case RX_BUFFER_OVERFLOW_ERROR :
							memcpy(str, TEXT_SIZE_(nameof(RX_BUFFER_OVERFLOW_ERROR)));
 8008d52:	2218      	movs	r2, #24
 8008d54:	4913      	ldr	r1, [pc, #76]	; (8008da4 <ConvertErrorToString+0xf4>)
 8008d56:	6838      	ldr	r0, [r7, #0]
 8008d58:	f000 f9ba 	bl	80090d0 <memcpy>
							return strlen(nameof(RX_BUFFER_OVERFLOW_ERROR));
 8008d5c:	2318      	movs	r3, #24
 8008d5e:	e00e      	b.n	8008d7e <ConvertErrorToString+0xce>

			case RX_TIMEOUT_ERROR :
				memcpy(str, TEXT_SIZE_(nameof(RX_TIMEOUT_ERROR)));
 8008d60:	2210      	movs	r2, #16
 8008d62:	4911      	ldr	r1, [pc, #68]	; (8008da8 <ConvertErrorToString+0xf8>)
 8008d64:	6838      	ldr	r0, [r7, #0]
 8008d66:	f000 f9b3 	bl	80090d0 <memcpy>
				return strlen(nameof(RX_TIMEOUT_ERROR));
 8008d6a:	2310      	movs	r3, #16
 8008d6c:	e007      	b.n	8008d7e <ConvertErrorToString+0xce>

						case NOT_SUPPORTED_BY_FIRMWARE :
							memcpy(str, TEXT_SIZE_(nameof(NOT_SUPPORTED_BY_FIRMWARE)));
 8008d6e:	2219      	movs	r2, #25
 8008d70:	490e      	ldr	r1, [pc, #56]	; (8008dac <ConvertErrorToString+0xfc>)
 8008d72:	6838      	ldr	r0, [r7, #0]
 8008d74:	f000 f9ac 	bl	80090d0 <memcpy>
							return strlen(nameof(NOT_SUPPORTED_BY_FIRMWARE));
 8008d78:	2319      	movs	r3, #25
 8008d7a:	e000      	b.n	8008d7e <ConvertErrorToString+0xce>
		}

		return 0;
 8008d7c:	2300      	movs	r3, #0
	}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	0800dab4 	.word	0x0800dab4
 8008d8c:	0800dac0 	.word	0x0800dac0
 8008d90:	0800dadc 	.word	0x0800dadc
 8008d94:	0800daec 	.word	0x0800daec
 8008d98:	0800db00 	.word	0x0800db00
 8008d9c:	0800db1c 	.word	0x0800db1c
 8008da0:	0800db38 	.word	0x0800db38
 8008da4:	0800db54 	.word	0x0800db54
 8008da8:	0800db70 	.word	0x0800db70
 8008dac:	0800db84 	.word	0x0800db84

08008db0 <SBGC32_Control>:
 * 	@param 	*control - structure containing gimbal control data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_Control (GeneralSBGC_t *generalSBGC, const Control_t *control)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b0c4      	sub	sp, #272	; 0x110
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008dbe:	6018      	str	r0, [r3, #0]
 8008dc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008dc8:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL);
 8008dca:	f107 030c 	add.w	r3, r7, #12
 8008dce:	2143      	movs	r1, #67	; 0x43
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff fb00 	bl	80083d6 <InitCmdWrite>
	WriteBuff(&cmd, control, sizeof(Control_t), PM_CONTROL);
 8008dd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dda:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8008dde:	f107 000c 	add.w	r0, r7, #12
 8008de2:	2301      	movs	r3, #1
 8008de4:	220f      	movs	r2, #15
 8008de6:	6809      	ldr	r1, [r1, #0]
 8008de8:	f7ff f987 	bl	80080fa <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8008dec:	f107 020c 	add.w	r2, r7, #12
 8008df0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008df4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008df8:	4611      	mov	r1, r2
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	f7fe febb 	bl	8007b76 <SBGC32_TX>
	/** When setting the ControlConfig_t.flags, may send confirmation */
	return generalSBGC->_ParserCurrentStatus;
 8008e00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <SBGC32_ControlConfig>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ControlConfig (GeneralSBGC_t *generalSBGC, const ControlConfig_t *controlConfig, ConfirmationState_t *confirmationState)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b0c6      	sub	sp, #280	; 0x118
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e26:	6018      	str	r0, [r3, #0]
 8008e28:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008e30:	6019      	str	r1, [r3, #0]
 8008e32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008e3a:	601a      	str	r2, [r3, #0]
	if (generalSBGC->_firmwareVersion < 2610)
 8008e3c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e40:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8008e48:	f640 2231 	movw	r2, #2609	; 0xa31
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d801      	bhi.n	8008e54 <SBGC32_ControlConfig+0x3c>
		return NOT_SUPPORTED_BY_FIRMWARE;
 8008e50:	2309      	movs	r3, #9
 8008e52:	e032      	b.n	8008eba <SBGC32_ControlConfig+0xa2>

	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL_CONFIG);
 8008e54:	f107 0314 	add.w	r3, r7, #20
 8008e58:	215a      	movs	r1, #90	; 0x5a
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fabb 	bl	80083d6 <InitCmdWrite>
	WriteBuff(&cmd, controlConfig, sizeof(ControlConfig_t), PM_CONTROL_CONFIG);
 8008e60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e64:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8008e68:	f107 0014 	add.w	r0, r7, #20
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	2229      	movs	r2, #41	; 0x29
 8008e70:	6809      	ldr	r1, [r1, #0]
 8008e72:	f7ff f942 	bl	80080fa <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8008e76:	f107 0214 	add.w	r2, r7, #20
 8008e7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008e82:	4611      	mov	r1, r2
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f7fe fe76 	bl	8007b76 <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 8008e8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e92:	781a      	ldrb	r2, [r3, #0]
 8008e94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008e98:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8008e9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008ea0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ea4:	6809      	ldr	r1, [r1, #0]
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	f7ff fbfe 	bl	80086a8 <SBGC32_CheckConfirmation>
	return generalSBGC->_ParserCurrentStatus;
 8008eac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008eb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <SBGC32_ReadRealTimeData4>:
 * 	@param 	*realTimeData - structure for storing real-time data
 *
 * 	@return Communication status
 */
TxRxStatus_t SBGC32_ReadRealTimeData4 (GeneralSBGC_t *generalSBGC, RealTimeData_t *realTimeData)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b0c4      	sub	sp, #272	; 0x110
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ece:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ed2:	6018      	str	r0, [r3, #0]
 8008ed4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ed8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008edc:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_REALTIME_DATA_4);
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	2119      	movs	r1, #25
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fa76 	bl	80083d6 <InitCmdWrite>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_REALTIME_DATA_4), "Real-Time Data 4:") == TX_RX_OK)
 8008eea:	f107 010c 	add.w	r1, r7, #12
 8008eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ef2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008ef6:	2219      	movs	r2, #25
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	f7ff f8b1 	bl	8008060 <SBGC32_TX_RX>
 8008efe:	4603      	mov	r3, r0
 8008f00:	4619      	mov	r1, r3
 8008f02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f0a:	4a0f      	ldr	r2, [pc, #60]	; (8008f48 <SBGC32_ReadRealTimeData4+0x84>)
 8008f0c:	6818      	ldr	r0, [r3, #0]
 8008f0e:	f7ff fd47 	bl	80089a0 <CheckReceipt>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <SBGC32_ReadRealTimeData4+0x6a>
		ReadBuff(&cmd, realTimeData, sizeof(RealTimeData_t), PM_REALTIME_DATA_4);
 8008f18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f1c:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8008f20:	f107 000c 	add.w	r0, r7, #12
 8008f24:	2309      	movs	r3, #9
 8008f26:	227c      	movs	r2, #124	; 0x7c
 8008f28:	6809      	ldr	r1, [r1, #0]
 8008f2a:	f7ff f91a 	bl	8008162 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 8008f2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	0800dbcc 	.word	0x0800dbcc

08008f4c <SBGC32_GetAnglesExt>:
 * 			angles state in different format
 *
 * 	@return Communication status
 */
TxRxStatus_t SBGC32_GetAnglesExt (GeneralSBGC_t *generalSBGC, GetAnglesExt_t *getAnglesExt)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b0c4      	sub	sp, #272	; 0x110
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f5a:	6018      	str	r0, [r3, #0]
 8008f5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008f64:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_GET_ANGLES_EXT);
 8008f66:	f107 030c 	add.w	r3, r7, #12
 8008f6a:	213d      	movs	r1, #61	; 0x3d
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7ff fa32 	bl	80083d6 <InitCmdWrite>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_GET_ANGLES_EXT), "Angles Ext:") == TX_RX_OK)
 8008f72:	f107 010c 	add.w	r1, r7, #12
 8008f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f7a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f7e:	223d      	movs	r2, #61	; 0x3d
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f7ff f86d 	bl	8008060 <SBGC32_TX_RX>
 8008f86:	4603      	mov	r3, r0
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008f92:	4a0f      	ldr	r2, [pc, #60]	; (8008fd0 <SBGC32_GetAnglesExt+0x84>)
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	f7ff fd03 	bl	80089a0 <CheckReceipt>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <SBGC32_GetAnglesExt+0x6a>
		ReadBuff(&cmd, getAnglesExt, sizeof(GetAnglesExt_t), PM_GET_ANGLES_EXT);
 8008fa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fa4:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8008fa8:	f107 000c 	add.w	r0, r7, #12
 8008fac:	230b      	movs	r3, #11
 8008fae:	2236      	movs	r2, #54	; 0x36
 8008fb0:	6809      	ldr	r1, [r1, #0]
 8008fb2:	f7ff f8d6 	bl	8008162 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 8008fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	0800dbe8 	.word	0x0800dbe8

08008fd4 <SBGC32_ExecuteMenu>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ExecuteMenu (GeneralSBGC_t *generalSBGC, MenuCommands_t cmdID, ConfirmationState_t *confirmationState)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b0c6      	sub	sp, #280	; 0x118
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008fde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008fe2:	6018      	str	r0, [r3, #0]
 8008fe4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008fe8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008fec:	601a      	str	r2, [r3, #0]
 8008fee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008ff2:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8008ff6:	460a      	mov	r2, r1
 8008ff8:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_EXECUTE_MENU);
 8008ffa:	f107 0314 	add.w	r3, r7, #20
 8008ffe:	2145      	movs	r1, #69	; 0x45
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff f9e8 	bl	80083d6 <InitCmdWrite>
	WriteByte(&cmd, cmdID);
 8009006:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800900a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800900e:	781a      	ldrb	r2, [r3, #0]
 8009010:	f107 0314 	add.w	r3, r7, #20
 8009014:	4611      	mov	r1, r2
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff f918 	bl	800824c <WriteByte>
	SBGC32_TX(generalSBGC, &cmd);
 800901c:	f107 0214 	add.w	r2, r7, #20
 8009020:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009024:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009028:	4611      	mov	r1, r2
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	f7fe fda3 	bl	8007b76 <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 8009030:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009038:	781a      	ldrb	r2, [r3, #0]
 800903a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800903e:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8009042:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009046:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800904a:	6809      	ldr	r1, [r1, #0]
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	f7ff fb2b 	bl	80086a8 <SBGC32_CheckConfirmation>
	return generalSBGC->_ParserCurrentStatus;
 8009052:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009056:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8009060:	4618      	mov	r0, r3
 8009062:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <__errno>:
 800906c:	4b01      	ldr	r3, [pc, #4]	; (8009074 <__errno+0x8>)
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	2000018c 	.word	0x2000018c

08009078 <__libc_init_array>:
 8009078:	b570      	push	{r4, r5, r6, lr}
 800907a:	4d0d      	ldr	r5, [pc, #52]	; (80090b0 <__libc_init_array+0x38>)
 800907c:	4c0d      	ldr	r4, [pc, #52]	; (80090b4 <__libc_init_array+0x3c>)
 800907e:	1b64      	subs	r4, r4, r5
 8009080:	10a4      	asrs	r4, r4, #2
 8009082:	2600      	movs	r6, #0
 8009084:	42a6      	cmp	r6, r4
 8009086:	d109      	bne.n	800909c <__libc_init_array+0x24>
 8009088:	4d0b      	ldr	r5, [pc, #44]	; (80090b8 <__libc_init_array+0x40>)
 800908a:	4c0c      	ldr	r4, [pc, #48]	; (80090bc <__libc_init_array+0x44>)
 800908c:	f004 fb88 	bl	800d7a0 <_init>
 8009090:	1b64      	subs	r4, r4, r5
 8009092:	10a4      	asrs	r4, r4, #2
 8009094:	2600      	movs	r6, #0
 8009096:	42a6      	cmp	r6, r4
 8009098:	d105      	bne.n	80090a6 <__libc_init_array+0x2e>
 800909a:	bd70      	pop	{r4, r5, r6, pc}
 800909c:	f855 3b04 	ldr.w	r3, [r5], #4
 80090a0:	4798      	blx	r3
 80090a2:	3601      	adds	r6, #1
 80090a4:	e7ee      	b.n	8009084 <__libc_init_array+0xc>
 80090a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090aa:	4798      	blx	r3
 80090ac:	3601      	adds	r6, #1
 80090ae:	e7f2      	b.n	8009096 <__libc_init_array+0x1e>
 80090b0:	0800e154 	.word	0x0800e154
 80090b4:	0800e154 	.word	0x0800e154
 80090b8:	0800e154 	.word	0x0800e154
 80090bc:	0800e158 	.word	0x0800e158

080090c0 <malloc>:
 80090c0:	4b02      	ldr	r3, [pc, #8]	; (80090cc <malloc+0xc>)
 80090c2:	4601      	mov	r1, r0
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	f000 b885 	b.w	80091d4 <_malloc_r>
 80090ca:	bf00      	nop
 80090cc:	2000018c 	.word	0x2000018c

080090d0 <memcpy>:
 80090d0:	440a      	add	r2, r1
 80090d2:	4291      	cmp	r1, r2
 80090d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80090d8:	d100      	bne.n	80090dc <memcpy+0xc>
 80090da:	4770      	bx	lr
 80090dc:	b510      	push	{r4, lr}
 80090de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090e6:	4291      	cmp	r1, r2
 80090e8:	d1f9      	bne.n	80090de <memcpy+0xe>
 80090ea:	bd10      	pop	{r4, pc}

080090ec <memset>:
 80090ec:	4402      	add	r2, r0
 80090ee:	4603      	mov	r3, r0
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d100      	bne.n	80090f6 <memset+0xa>
 80090f4:	4770      	bx	lr
 80090f6:	f803 1b01 	strb.w	r1, [r3], #1
 80090fa:	e7f9      	b.n	80090f0 <memset+0x4>

080090fc <_free_r>:
 80090fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090fe:	2900      	cmp	r1, #0
 8009100:	d044      	beq.n	800918c <_free_r+0x90>
 8009102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009106:	9001      	str	r0, [sp, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f1a1 0404 	sub.w	r4, r1, #4
 800910e:	bfb8      	it	lt
 8009110:	18e4      	addlt	r4, r4, r3
 8009112:	f002 ff2d 	bl	800bf70 <__malloc_lock>
 8009116:	4a1e      	ldr	r2, [pc, #120]	; (8009190 <_free_r+0x94>)
 8009118:	9801      	ldr	r0, [sp, #4]
 800911a:	6813      	ldr	r3, [r2, #0]
 800911c:	b933      	cbnz	r3, 800912c <_free_r+0x30>
 800911e:	6063      	str	r3, [r4, #4]
 8009120:	6014      	str	r4, [r2, #0]
 8009122:	b003      	add	sp, #12
 8009124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009128:	f002 bf28 	b.w	800bf7c <__malloc_unlock>
 800912c:	42a3      	cmp	r3, r4
 800912e:	d908      	bls.n	8009142 <_free_r+0x46>
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	1961      	adds	r1, r4, r5
 8009134:	428b      	cmp	r3, r1
 8009136:	bf01      	itttt	eq
 8009138:	6819      	ldreq	r1, [r3, #0]
 800913a:	685b      	ldreq	r3, [r3, #4]
 800913c:	1949      	addeq	r1, r1, r5
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	e7ed      	b.n	800911e <_free_r+0x22>
 8009142:	461a      	mov	r2, r3
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	b10b      	cbz	r3, 800914c <_free_r+0x50>
 8009148:	42a3      	cmp	r3, r4
 800914a:	d9fa      	bls.n	8009142 <_free_r+0x46>
 800914c:	6811      	ldr	r1, [r2, #0]
 800914e:	1855      	adds	r5, r2, r1
 8009150:	42a5      	cmp	r5, r4
 8009152:	d10b      	bne.n	800916c <_free_r+0x70>
 8009154:	6824      	ldr	r4, [r4, #0]
 8009156:	4421      	add	r1, r4
 8009158:	1854      	adds	r4, r2, r1
 800915a:	42a3      	cmp	r3, r4
 800915c:	6011      	str	r1, [r2, #0]
 800915e:	d1e0      	bne.n	8009122 <_free_r+0x26>
 8009160:	681c      	ldr	r4, [r3, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	6053      	str	r3, [r2, #4]
 8009166:	4421      	add	r1, r4
 8009168:	6011      	str	r1, [r2, #0]
 800916a:	e7da      	b.n	8009122 <_free_r+0x26>
 800916c:	d902      	bls.n	8009174 <_free_r+0x78>
 800916e:	230c      	movs	r3, #12
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	e7d6      	b.n	8009122 <_free_r+0x26>
 8009174:	6825      	ldr	r5, [r4, #0]
 8009176:	1961      	adds	r1, r4, r5
 8009178:	428b      	cmp	r3, r1
 800917a:	bf04      	itt	eq
 800917c:	6819      	ldreq	r1, [r3, #0]
 800917e:	685b      	ldreq	r3, [r3, #4]
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	bf04      	itt	eq
 8009184:	1949      	addeq	r1, r1, r5
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	6054      	str	r4, [r2, #4]
 800918a:	e7ca      	b.n	8009122 <_free_r+0x26>
 800918c:	b003      	add	sp, #12
 800918e:	bd30      	pop	{r4, r5, pc}
 8009190:	20000708 	.word	0x20000708

08009194 <sbrk_aligned>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4e0e      	ldr	r6, [pc, #56]	; (80091d0 <sbrk_aligned+0x3c>)
 8009198:	460c      	mov	r4, r1
 800919a:	6831      	ldr	r1, [r6, #0]
 800919c:	4605      	mov	r5, r0
 800919e:	b911      	cbnz	r1, 80091a6 <sbrk_aligned+0x12>
 80091a0:	f000 fed6 	bl	8009f50 <_sbrk_r>
 80091a4:	6030      	str	r0, [r6, #0]
 80091a6:	4621      	mov	r1, r4
 80091a8:	4628      	mov	r0, r5
 80091aa:	f000 fed1 	bl	8009f50 <_sbrk_r>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d00a      	beq.n	80091c8 <sbrk_aligned+0x34>
 80091b2:	1cc4      	adds	r4, r0, #3
 80091b4:	f024 0403 	bic.w	r4, r4, #3
 80091b8:	42a0      	cmp	r0, r4
 80091ba:	d007      	beq.n	80091cc <sbrk_aligned+0x38>
 80091bc:	1a21      	subs	r1, r4, r0
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 fec6 	bl	8009f50 <_sbrk_r>
 80091c4:	3001      	adds	r0, #1
 80091c6:	d101      	bne.n	80091cc <sbrk_aligned+0x38>
 80091c8:	f04f 34ff 	mov.w	r4, #4294967295
 80091cc:	4620      	mov	r0, r4
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	2000070c 	.word	0x2000070c

080091d4 <_malloc_r>:
 80091d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d8:	1ccd      	adds	r5, r1, #3
 80091da:	f025 0503 	bic.w	r5, r5, #3
 80091de:	3508      	adds	r5, #8
 80091e0:	2d0c      	cmp	r5, #12
 80091e2:	bf38      	it	cc
 80091e4:	250c      	movcc	r5, #12
 80091e6:	2d00      	cmp	r5, #0
 80091e8:	4607      	mov	r7, r0
 80091ea:	db01      	blt.n	80091f0 <_malloc_r+0x1c>
 80091ec:	42a9      	cmp	r1, r5
 80091ee:	d905      	bls.n	80091fc <_malloc_r+0x28>
 80091f0:	230c      	movs	r3, #12
 80091f2:	603b      	str	r3, [r7, #0]
 80091f4:	2600      	movs	r6, #0
 80091f6:	4630      	mov	r0, r6
 80091f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fc:	4e2e      	ldr	r6, [pc, #184]	; (80092b8 <_malloc_r+0xe4>)
 80091fe:	f002 feb7 	bl	800bf70 <__malloc_lock>
 8009202:	6833      	ldr	r3, [r6, #0]
 8009204:	461c      	mov	r4, r3
 8009206:	bb34      	cbnz	r4, 8009256 <_malloc_r+0x82>
 8009208:	4629      	mov	r1, r5
 800920a:	4638      	mov	r0, r7
 800920c:	f7ff ffc2 	bl	8009194 <sbrk_aligned>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	4604      	mov	r4, r0
 8009214:	d14d      	bne.n	80092b2 <_malloc_r+0xde>
 8009216:	6834      	ldr	r4, [r6, #0]
 8009218:	4626      	mov	r6, r4
 800921a:	2e00      	cmp	r6, #0
 800921c:	d140      	bne.n	80092a0 <_malloc_r+0xcc>
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	4631      	mov	r1, r6
 8009222:	4638      	mov	r0, r7
 8009224:	eb04 0803 	add.w	r8, r4, r3
 8009228:	f000 fe92 	bl	8009f50 <_sbrk_r>
 800922c:	4580      	cmp	r8, r0
 800922e:	d13a      	bne.n	80092a6 <_malloc_r+0xd2>
 8009230:	6821      	ldr	r1, [r4, #0]
 8009232:	3503      	adds	r5, #3
 8009234:	1a6d      	subs	r5, r5, r1
 8009236:	f025 0503 	bic.w	r5, r5, #3
 800923a:	3508      	adds	r5, #8
 800923c:	2d0c      	cmp	r5, #12
 800923e:	bf38      	it	cc
 8009240:	250c      	movcc	r5, #12
 8009242:	4629      	mov	r1, r5
 8009244:	4638      	mov	r0, r7
 8009246:	f7ff ffa5 	bl	8009194 <sbrk_aligned>
 800924a:	3001      	adds	r0, #1
 800924c:	d02b      	beq.n	80092a6 <_malloc_r+0xd2>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	442b      	add	r3, r5
 8009252:	6023      	str	r3, [r4, #0]
 8009254:	e00e      	b.n	8009274 <_malloc_r+0xa0>
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	1b52      	subs	r2, r2, r5
 800925a:	d41e      	bmi.n	800929a <_malloc_r+0xc6>
 800925c:	2a0b      	cmp	r2, #11
 800925e:	d916      	bls.n	800928e <_malloc_r+0xba>
 8009260:	1961      	adds	r1, r4, r5
 8009262:	42a3      	cmp	r3, r4
 8009264:	6025      	str	r5, [r4, #0]
 8009266:	bf18      	it	ne
 8009268:	6059      	strne	r1, [r3, #4]
 800926a:	6863      	ldr	r3, [r4, #4]
 800926c:	bf08      	it	eq
 800926e:	6031      	streq	r1, [r6, #0]
 8009270:	5162      	str	r2, [r4, r5]
 8009272:	604b      	str	r3, [r1, #4]
 8009274:	4638      	mov	r0, r7
 8009276:	f104 060b 	add.w	r6, r4, #11
 800927a:	f002 fe7f 	bl	800bf7c <__malloc_unlock>
 800927e:	f026 0607 	bic.w	r6, r6, #7
 8009282:	1d23      	adds	r3, r4, #4
 8009284:	1af2      	subs	r2, r6, r3
 8009286:	d0b6      	beq.n	80091f6 <_malloc_r+0x22>
 8009288:	1b9b      	subs	r3, r3, r6
 800928a:	50a3      	str	r3, [r4, r2]
 800928c:	e7b3      	b.n	80091f6 <_malloc_r+0x22>
 800928e:	6862      	ldr	r2, [r4, #4]
 8009290:	42a3      	cmp	r3, r4
 8009292:	bf0c      	ite	eq
 8009294:	6032      	streq	r2, [r6, #0]
 8009296:	605a      	strne	r2, [r3, #4]
 8009298:	e7ec      	b.n	8009274 <_malloc_r+0xa0>
 800929a:	4623      	mov	r3, r4
 800929c:	6864      	ldr	r4, [r4, #4]
 800929e:	e7b2      	b.n	8009206 <_malloc_r+0x32>
 80092a0:	4634      	mov	r4, r6
 80092a2:	6876      	ldr	r6, [r6, #4]
 80092a4:	e7b9      	b.n	800921a <_malloc_r+0x46>
 80092a6:	230c      	movs	r3, #12
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4638      	mov	r0, r7
 80092ac:	f002 fe66 	bl	800bf7c <__malloc_unlock>
 80092b0:	e7a1      	b.n	80091f6 <_malloc_r+0x22>
 80092b2:	6025      	str	r5, [r4, #0]
 80092b4:	e7de      	b.n	8009274 <_malloc_r+0xa0>
 80092b6:	bf00      	nop
 80092b8:	20000708 	.word	0x20000708

080092bc <__cvt>:
 80092bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092be:	ed2d 8b02 	vpush	{d8}
 80092c2:	eeb0 8b40 	vmov.f64	d8, d0
 80092c6:	b085      	sub	sp, #20
 80092c8:	4617      	mov	r7, r2
 80092ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80092cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80092ce:	ee18 2a90 	vmov	r2, s17
 80092d2:	f025 0520 	bic.w	r5, r5, #32
 80092d6:	2a00      	cmp	r2, #0
 80092d8:	bfb6      	itet	lt
 80092da:	222d      	movlt	r2, #45	; 0x2d
 80092dc:	2200      	movge	r2, #0
 80092de:	eeb1 8b40 	vneglt.f64	d8, d0
 80092e2:	2d46      	cmp	r5, #70	; 0x46
 80092e4:	460c      	mov	r4, r1
 80092e6:	701a      	strb	r2, [r3, #0]
 80092e8:	d004      	beq.n	80092f4 <__cvt+0x38>
 80092ea:	2d45      	cmp	r5, #69	; 0x45
 80092ec:	d100      	bne.n	80092f0 <__cvt+0x34>
 80092ee:	3401      	adds	r4, #1
 80092f0:	2102      	movs	r1, #2
 80092f2:	e000      	b.n	80092f6 <__cvt+0x3a>
 80092f4:	2103      	movs	r1, #3
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	9301      	str	r3, [sp, #4]
 80092fa:	ab02      	add	r3, sp, #8
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	4622      	mov	r2, r4
 8009300:	4633      	mov	r3, r6
 8009302:	eeb0 0b48 	vmov.f64	d0, d8
 8009306:	f001 fd3f 	bl	800ad88 <_dtoa_r>
 800930a:	2d47      	cmp	r5, #71	; 0x47
 800930c:	d101      	bne.n	8009312 <__cvt+0x56>
 800930e:	07fb      	lsls	r3, r7, #31
 8009310:	d51a      	bpl.n	8009348 <__cvt+0x8c>
 8009312:	2d46      	cmp	r5, #70	; 0x46
 8009314:	eb00 0204 	add.w	r2, r0, r4
 8009318:	d10c      	bne.n	8009334 <__cvt+0x78>
 800931a:	7803      	ldrb	r3, [r0, #0]
 800931c:	2b30      	cmp	r3, #48	; 0x30
 800931e:	d107      	bne.n	8009330 <__cvt+0x74>
 8009320:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009328:	bf1c      	itt	ne
 800932a:	f1c4 0401 	rsbne	r4, r4, #1
 800932e:	6034      	strne	r4, [r6, #0]
 8009330:	6833      	ldr	r3, [r6, #0]
 8009332:	441a      	add	r2, r3
 8009334:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933c:	bf08      	it	eq
 800933e:	9203      	streq	r2, [sp, #12]
 8009340:	2130      	movs	r1, #48	; 0x30
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	4293      	cmp	r3, r2
 8009346:	d307      	bcc.n	8009358 <__cvt+0x9c>
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800934c:	1a1b      	subs	r3, r3, r0
 800934e:	6013      	str	r3, [r2, #0]
 8009350:	b005      	add	sp, #20
 8009352:	ecbd 8b02 	vpop	{d8}
 8009356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009358:	1c5c      	adds	r4, r3, #1
 800935a:	9403      	str	r4, [sp, #12]
 800935c:	7019      	strb	r1, [r3, #0]
 800935e:	e7f0      	b.n	8009342 <__cvt+0x86>

08009360 <__exponent>:
 8009360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009362:	4603      	mov	r3, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	bfb8      	it	lt
 8009368:	4249      	neglt	r1, r1
 800936a:	f803 2b02 	strb.w	r2, [r3], #2
 800936e:	bfb4      	ite	lt
 8009370:	222d      	movlt	r2, #45	; 0x2d
 8009372:	222b      	movge	r2, #43	; 0x2b
 8009374:	2909      	cmp	r1, #9
 8009376:	7042      	strb	r2, [r0, #1]
 8009378:	dd2a      	ble.n	80093d0 <__exponent+0x70>
 800937a:	f10d 0407 	add.w	r4, sp, #7
 800937e:	46a4      	mov	ip, r4
 8009380:	270a      	movs	r7, #10
 8009382:	46a6      	mov	lr, r4
 8009384:	460a      	mov	r2, r1
 8009386:	fb91 f6f7 	sdiv	r6, r1, r7
 800938a:	fb07 1516 	mls	r5, r7, r6, r1
 800938e:	3530      	adds	r5, #48	; 0x30
 8009390:	2a63      	cmp	r2, #99	; 0x63
 8009392:	f104 34ff 	add.w	r4, r4, #4294967295
 8009396:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800939a:	4631      	mov	r1, r6
 800939c:	dcf1      	bgt.n	8009382 <__exponent+0x22>
 800939e:	3130      	adds	r1, #48	; 0x30
 80093a0:	f1ae 0502 	sub.w	r5, lr, #2
 80093a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093a8:	1c44      	adds	r4, r0, #1
 80093aa:	4629      	mov	r1, r5
 80093ac:	4561      	cmp	r1, ip
 80093ae:	d30a      	bcc.n	80093c6 <__exponent+0x66>
 80093b0:	f10d 0209 	add.w	r2, sp, #9
 80093b4:	eba2 020e 	sub.w	r2, r2, lr
 80093b8:	4565      	cmp	r5, ip
 80093ba:	bf88      	it	hi
 80093bc:	2200      	movhi	r2, #0
 80093be:	4413      	add	r3, r2
 80093c0:	1a18      	subs	r0, r3, r0
 80093c2:	b003      	add	sp, #12
 80093c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80093ce:	e7ed      	b.n	80093ac <__exponent+0x4c>
 80093d0:	2330      	movs	r3, #48	; 0x30
 80093d2:	3130      	adds	r1, #48	; 0x30
 80093d4:	7083      	strb	r3, [r0, #2]
 80093d6:	70c1      	strb	r1, [r0, #3]
 80093d8:	1d03      	adds	r3, r0, #4
 80093da:	e7f1      	b.n	80093c0 <__exponent+0x60>
 80093dc:	0000      	movs	r0, r0
	...

080093e0 <_printf_float>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	b08b      	sub	sp, #44	; 0x2c
 80093e6:	460c      	mov	r4, r1
 80093e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80093ec:	4616      	mov	r6, r2
 80093ee:	461f      	mov	r7, r3
 80093f0:	4605      	mov	r5, r0
 80093f2:	f002 fda7 	bl	800bf44 <_localeconv_r>
 80093f6:	f8d0 b000 	ldr.w	fp, [r0]
 80093fa:	4658      	mov	r0, fp
 80093fc:	f7f6 ff20 	bl	8000240 <strlen>
 8009400:	2300      	movs	r3, #0
 8009402:	9308      	str	r3, [sp, #32]
 8009404:	f8d8 3000 	ldr.w	r3, [r8]
 8009408:	f894 9018 	ldrb.w	r9, [r4, #24]
 800940c:	6822      	ldr	r2, [r4, #0]
 800940e:	3307      	adds	r3, #7
 8009410:	f023 0307 	bic.w	r3, r3, #7
 8009414:	f103 0108 	add.w	r1, r3, #8
 8009418:	f8c8 1000 	str.w	r1, [r8]
 800941c:	4682      	mov	sl, r0
 800941e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009422:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009426:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009688 <_printf_float+0x2a8>
 800942a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800942e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009432:	eeb4 6b47 	vcmp.f64	d6, d7
 8009436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943a:	dd24      	ble.n	8009486 <_printf_float+0xa6>
 800943c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009444:	d502      	bpl.n	800944c <_printf_float+0x6c>
 8009446:	232d      	movs	r3, #45	; 0x2d
 8009448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800944c:	4b90      	ldr	r3, [pc, #576]	; (8009690 <_printf_float+0x2b0>)
 800944e:	4891      	ldr	r0, [pc, #580]	; (8009694 <_printf_float+0x2b4>)
 8009450:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009454:	bf94      	ite	ls
 8009456:	4698      	movls	r8, r3
 8009458:	4680      	movhi	r8, r0
 800945a:	2303      	movs	r3, #3
 800945c:	6123      	str	r3, [r4, #16]
 800945e:	f022 0204 	bic.w	r2, r2, #4
 8009462:	2300      	movs	r3, #0
 8009464:	6022      	str	r2, [r4, #0]
 8009466:	9304      	str	r3, [sp, #16]
 8009468:	9700      	str	r7, [sp, #0]
 800946a:	4633      	mov	r3, r6
 800946c:	aa09      	add	r2, sp, #36	; 0x24
 800946e:	4621      	mov	r1, r4
 8009470:	4628      	mov	r0, r5
 8009472:	f000 f9d3 	bl	800981c <_printf_common>
 8009476:	3001      	adds	r0, #1
 8009478:	f040 808a 	bne.w	8009590 <_printf_float+0x1b0>
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	b00b      	add	sp, #44	; 0x2c
 8009482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009486:	eeb4 0b40 	vcmp.f64	d0, d0
 800948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948e:	d709      	bvc.n	80094a4 <_printf_float+0xc4>
 8009490:	ee10 3a90 	vmov	r3, s1
 8009494:	2b00      	cmp	r3, #0
 8009496:	bfbc      	itt	lt
 8009498:	232d      	movlt	r3, #45	; 0x2d
 800949a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800949e:	487e      	ldr	r0, [pc, #504]	; (8009698 <_printf_float+0x2b8>)
 80094a0:	4b7e      	ldr	r3, [pc, #504]	; (800969c <_printf_float+0x2bc>)
 80094a2:	e7d5      	b.n	8009450 <_printf_float+0x70>
 80094a4:	6863      	ldr	r3, [r4, #4]
 80094a6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80094aa:	9104      	str	r1, [sp, #16]
 80094ac:	1c59      	adds	r1, r3, #1
 80094ae:	d13c      	bne.n	800952a <_printf_float+0x14a>
 80094b0:	2306      	movs	r3, #6
 80094b2:	6063      	str	r3, [r4, #4]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9303      	str	r3, [sp, #12]
 80094b8:	ab08      	add	r3, sp, #32
 80094ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80094be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094c2:	ab07      	add	r3, sp, #28
 80094c4:	6861      	ldr	r1, [r4, #4]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	6022      	str	r2, [r4, #0]
 80094ca:	f10d 031b 	add.w	r3, sp, #27
 80094ce:	4628      	mov	r0, r5
 80094d0:	f7ff fef4 	bl	80092bc <__cvt>
 80094d4:	9b04      	ldr	r3, [sp, #16]
 80094d6:	9907      	ldr	r1, [sp, #28]
 80094d8:	2b47      	cmp	r3, #71	; 0x47
 80094da:	4680      	mov	r8, r0
 80094dc:	d108      	bne.n	80094f0 <_printf_float+0x110>
 80094de:	1cc8      	adds	r0, r1, #3
 80094e0:	db02      	blt.n	80094e8 <_printf_float+0x108>
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	4299      	cmp	r1, r3
 80094e6:	dd41      	ble.n	800956c <_printf_float+0x18c>
 80094e8:	f1a9 0902 	sub.w	r9, r9, #2
 80094ec:	fa5f f989 	uxtb.w	r9, r9
 80094f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80094f4:	d820      	bhi.n	8009538 <_printf_float+0x158>
 80094f6:	3901      	subs	r1, #1
 80094f8:	464a      	mov	r2, r9
 80094fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80094fe:	9107      	str	r1, [sp, #28]
 8009500:	f7ff ff2e 	bl	8009360 <__exponent>
 8009504:	9a08      	ldr	r2, [sp, #32]
 8009506:	9004      	str	r0, [sp, #16]
 8009508:	1813      	adds	r3, r2, r0
 800950a:	2a01      	cmp	r2, #1
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	dc02      	bgt.n	8009516 <_printf_float+0x136>
 8009510:	6822      	ldr	r2, [r4, #0]
 8009512:	07d2      	lsls	r2, r2, #31
 8009514:	d501      	bpl.n	800951a <_printf_float+0x13a>
 8009516:	3301      	adds	r3, #1
 8009518:	6123      	str	r3, [r4, #16]
 800951a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0a2      	beq.n	8009468 <_printf_float+0x88>
 8009522:	232d      	movs	r3, #45	; 0x2d
 8009524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009528:	e79e      	b.n	8009468 <_printf_float+0x88>
 800952a:	9904      	ldr	r1, [sp, #16]
 800952c:	2947      	cmp	r1, #71	; 0x47
 800952e:	d1c1      	bne.n	80094b4 <_printf_float+0xd4>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1bf      	bne.n	80094b4 <_printf_float+0xd4>
 8009534:	2301      	movs	r3, #1
 8009536:	e7bc      	b.n	80094b2 <_printf_float+0xd2>
 8009538:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800953c:	d118      	bne.n	8009570 <_printf_float+0x190>
 800953e:	2900      	cmp	r1, #0
 8009540:	6863      	ldr	r3, [r4, #4]
 8009542:	dd0b      	ble.n	800955c <_printf_float+0x17c>
 8009544:	6121      	str	r1, [r4, #16]
 8009546:	b913      	cbnz	r3, 800954e <_printf_float+0x16e>
 8009548:	6822      	ldr	r2, [r4, #0]
 800954a:	07d0      	lsls	r0, r2, #31
 800954c:	d502      	bpl.n	8009554 <_printf_float+0x174>
 800954e:	3301      	adds	r3, #1
 8009550:	440b      	add	r3, r1
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	2300      	movs	r3, #0
 8009556:	65a1      	str	r1, [r4, #88]	; 0x58
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	e7de      	b.n	800951a <_printf_float+0x13a>
 800955c:	b913      	cbnz	r3, 8009564 <_printf_float+0x184>
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	07d2      	lsls	r2, r2, #31
 8009562:	d501      	bpl.n	8009568 <_printf_float+0x188>
 8009564:	3302      	adds	r3, #2
 8009566:	e7f4      	b.n	8009552 <_printf_float+0x172>
 8009568:	2301      	movs	r3, #1
 800956a:	e7f2      	b.n	8009552 <_printf_float+0x172>
 800956c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009570:	9b08      	ldr	r3, [sp, #32]
 8009572:	4299      	cmp	r1, r3
 8009574:	db05      	blt.n	8009582 <_printf_float+0x1a2>
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	6121      	str	r1, [r4, #16]
 800957a:	07d8      	lsls	r0, r3, #31
 800957c:	d5ea      	bpl.n	8009554 <_printf_float+0x174>
 800957e:	1c4b      	adds	r3, r1, #1
 8009580:	e7e7      	b.n	8009552 <_printf_float+0x172>
 8009582:	2900      	cmp	r1, #0
 8009584:	bfd4      	ite	le
 8009586:	f1c1 0202 	rsble	r2, r1, #2
 800958a:	2201      	movgt	r2, #1
 800958c:	4413      	add	r3, r2
 800958e:	e7e0      	b.n	8009552 <_printf_float+0x172>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	055a      	lsls	r2, r3, #21
 8009594:	d407      	bmi.n	80095a6 <_printf_float+0x1c6>
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	4642      	mov	r2, r8
 800959a:	4631      	mov	r1, r6
 800959c:	4628      	mov	r0, r5
 800959e:	47b8      	blx	r7
 80095a0:	3001      	adds	r0, #1
 80095a2:	d12a      	bne.n	80095fa <_printf_float+0x21a>
 80095a4:	e76a      	b.n	800947c <_printf_float+0x9c>
 80095a6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80095aa:	f240 80e2 	bls.w	8009772 <_printf_float+0x392>
 80095ae:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80095b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ba:	d133      	bne.n	8009624 <_printf_float+0x244>
 80095bc:	4a38      	ldr	r2, [pc, #224]	; (80096a0 <_printf_float+0x2c0>)
 80095be:	2301      	movs	r3, #1
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	f43f af58 	beq.w	800947c <_printf_float+0x9c>
 80095cc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	db02      	blt.n	80095da <_printf_float+0x1fa>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	07d8      	lsls	r0, r3, #31
 80095d8:	d50f      	bpl.n	80095fa <_printf_float+0x21a>
 80095da:	4653      	mov	r3, sl
 80095dc:	465a      	mov	r2, fp
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	f43f af49 	beq.w	800947c <_printf_float+0x9c>
 80095ea:	f04f 0800 	mov.w	r8, #0
 80095ee:	f104 091a 	add.w	r9, r4, #26
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	4543      	cmp	r3, r8
 80095f8:	dc09      	bgt.n	800960e <_printf_float+0x22e>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	079b      	lsls	r3, r3, #30
 80095fe:	f100 8108 	bmi.w	8009812 <_printf_float+0x432>
 8009602:	68e0      	ldr	r0, [r4, #12]
 8009604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009606:	4298      	cmp	r0, r3
 8009608:	bfb8      	it	lt
 800960a:	4618      	movlt	r0, r3
 800960c:	e738      	b.n	8009480 <_printf_float+0xa0>
 800960e:	2301      	movs	r3, #1
 8009610:	464a      	mov	r2, r9
 8009612:	4631      	mov	r1, r6
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	f43f af2f 	beq.w	800947c <_printf_float+0x9c>
 800961e:	f108 0801 	add.w	r8, r8, #1
 8009622:	e7e6      	b.n	80095f2 <_printf_float+0x212>
 8009624:	9b07      	ldr	r3, [sp, #28]
 8009626:	2b00      	cmp	r3, #0
 8009628:	dc3c      	bgt.n	80096a4 <_printf_float+0x2c4>
 800962a:	4a1d      	ldr	r2, [pc, #116]	; (80096a0 <_printf_float+0x2c0>)
 800962c:	2301      	movs	r3, #1
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	f43f af21 	beq.w	800947c <_printf_float+0x9c>
 800963a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800963e:	4313      	orrs	r3, r2
 8009640:	d102      	bne.n	8009648 <_printf_float+0x268>
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	07d9      	lsls	r1, r3, #31
 8009646:	d5d8      	bpl.n	80095fa <_printf_float+0x21a>
 8009648:	4653      	mov	r3, sl
 800964a:	465a      	mov	r2, fp
 800964c:	4631      	mov	r1, r6
 800964e:	4628      	mov	r0, r5
 8009650:	47b8      	blx	r7
 8009652:	3001      	adds	r0, #1
 8009654:	f43f af12 	beq.w	800947c <_printf_float+0x9c>
 8009658:	f04f 0900 	mov.w	r9, #0
 800965c:	f104 0a1a 	add.w	sl, r4, #26
 8009660:	9b07      	ldr	r3, [sp, #28]
 8009662:	425b      	negs	r3, r3
 8009664:	454b      	cmp	r3, r9
 8009666:	dc01      	bgt.n	800966c <_printf_float+0x28c>
 8009668:	9b08      	ldr	r3, [sp, #32]
 800966a:	e795      	b.n	8009598 <_printf_float+0x1b8>
 800966c:	2301      	movs	r3, #1
 800966e:	4652      	mov	r2, sl
 8009670:	4631      	mov	r1, r6
 8009672:	4628      	mov	r0, r5
 8009674:	47b8      	blx	r7
 8009676:	3001      	adds	r0, #1
 8009678:	f43f af00 	beq.w	800947c <_printf_float+0x9c>
 800967c:	f109 0901 	add.w	r9, r9, #1
 8009680:	e7ee      	b.n	8009660 <_printf_float+0x280>
 8009682:	bf00      	nop
 8009684:	f3af 8000 	nop.w
 8009688:	ffffffff 	.word	0xffffffff
 800968c:	7fefffff 	.word	0x7fefffff
 8009690:	0800dc40 	.word	0x0800dc40
 8009694:	0800dc44 	.word	0x0800dc44
 8009698:	0800dc4c 	.word	0x0800dc4c
 800969c:	0800dc48 	.word	0x0800dc48
 80096a0:	0800dc50 	.word	0x0800dc50
 80096a4:	9a08      	ldr	r2, [sp, #32]
 80096a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096a8:	429a      	cmp	r2, r3
 80096aa:	bfa8      	it	ge
 80096ac:	461a      	movge	r2, r3
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	4691      	mov	r9, r2
 80096b2:	dc38      	bgt.n	8009726 <_printf_float+0x346>
 80096b4:	2300      	movs	r3, #0
 80096b6:	9305      	str	r3, [sp, #20]
 80096b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096bc:	f104 021a 	add.w	r2, r4, #26
 80096c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096c2:	9905      	ldr	r1, [sp, #20]
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	eba3 0309 	sub.w	r3, r3, r9
 80096ca:	428b      	cmp	r3, r1
 80096cc:	dc33      	bgt.n	8009736 <_printf_float+0x356>
 80096ce:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	db3c      	blt.n	8009750 <_printf_float+0x370>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	07da      	lsls	r2, r3, #31
 80096da:	d439      	bmi.n	8009750 <_printf_float+0x370>
 80096dc:	9b08      	ldr	r3, [sp, #32]
 80096de:	9a04      	ldr	r2, [sp, #16]
 80096e0:	9907      	ldr	r1, [sp, #28]
 80096e2:	1a9a      	subs	r2, r3, r2
 80096e4:	eba3 0901 	sub.w	r9, r3, r1
 80096e8:	4591      	cmp	r9, r2
 80096ea:	bfa8      	it	ge
 80096ec:	4691      	movge	r9, r2
 80096ee:	f1b9 0f00 	cmp.w	r9, #0
 80096f2:	dc35      	bgt.n	8009760 <_printf_float+0x380>
 80096f4:	f04f 0800 	mov.w	r8, #0
 80096f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096fc:	f104 0a1a 	add.w	sl, r4, #26
 8009700:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009704:	1a9b      	subs	r3, r3, r2
 8009706:	eba3 0309 	sub.w	r3, r3, r9
 800970a:	4543      	cmp	r3, r8
 800970c:	f77f af75 	ble.w	80095fa <_printf_float+0x21a>
 8009710:	2301      	movs	r3, #1
 8009712:	4652      	mov	r2, sl
 8009714:	4631      	mov	r1, r6
 8009716:	4628      	mov	r0, r5
 8009718:	47b8      	blx	r7
 800971a:	3001      	adds	r0, #1
 800971c:	f43f aeae 	beq.w	800947c <_printf_float+0x9c>
 8009720:	f108 0801 	add.w	r8, r8, #1
 8009724:	e7ec      	b.n	8009700 <_printf_float+0x320>
 8009726:	4613      	mov	r3, r2
 8009728:	4631      	mov	r1, r6
 800972a:	4642      	mov	r2, r8
 800972c:	4628      	mov	r0, r5
 800972e:	47b8      	blx	r7
 8009730:	3001      	adds	r0, #1
 8009732:	d1bf      	bne.n	80096b4 <_printf_float+0x2d4>
 8009734:	e6a2      	b.n	800947c <_printf_float+0x9c>
 8009736:	2301      	movs	r3, #1
 8009738:	4631      	mov	r1, r6
 800973a:	4628      	mov	r0, r5
 800973c:	9204      	str	r2, [sp, #16]
 800973e:	47b8      	blx	r7
 8009740:	3001      	adds	r0, #1
 8009742:	f43f ae9b 	beq.w	800947c <_printf_float+0x9c>
 8009746:	9b05      	ldr	r3, [sp, #20]
 8009748:	9a04      	ldr	r2, [sp, #16]
 800974a:	3301      	adds	r3, #1
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	e7b7      	b.n	80096c0 <_printf_float+0x2e0>
 8009750:	4653      	mov	r3, sl
 8009752:	465a      	mov	r2, fp
 8009754:	4631      	mov	r1, r6
 8009756:	4628      	mov	r0, r5
 8009758:	47b8      	blx	r7
 800975a:	3001      	adds	r0, #1
 800975c:	d1be      	bne.n	80096dc <_printf_float+0x2fc>
 800975e:	e68d      	b.n	800947c <_printf_float+0x9c>
 8009760:	9a04      	ldr	r2, [sp, #16]
 8009762:	464b      	mov	r3, r9
 8009764:	4442      	add	r2, r8
 8009766:	4631      	mov	r1, r6
 8009768:	4628      	mov	r0, r5
 800976a:	47b8      	blx	r7
 800976c:	3001      	adds	r0, #1
 800976e:	d1c1      	bne.n	80096f4 <_printf_float+0x314>
 8009770:	e684      	b.n	800947c <_printf_float+0x9c>
 8009772:	9a08      	ldr	r2, [sp, #32]
 8009774:	2a01      	cmp	r2, #1
 8009776:	dc01      	bgt.n	800977c <_printf_float+0x39c>
 8009778:	07db      	lsls	r3, r3, #31
 800977a:	d537      	bpl.n	80097ec <_printf_float+0x40c>
 800977c:	2301      	movs	r3, #1
 800977e:	4642      	mov	r2, r8
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f ae78 	beq.w	800947c <_printf_float+0x9c>
 800978c:	4653      	mov	r3, sl
 800978e:	465a      	mov	r2, fp
 8009790:	4631      	mov	r1, r6
 8009792:	4628      	mov	r0, r5
 8009794:	47b8      	blx	r7
 8009796:	3001      	adds	r0, #1
 8009798:	f43f ae70 	beq.w	800947c <_printf_float+0x9c>
 800979c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80097a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80097a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a8:	d01b      	beq.n	80097e2 <_printf_float+0x402>
 80097aa:	9b08      	ldr	r3, [sp, #32]
 80097ac:	f108 0201 	add.w	r2, r8, #1
 80097b0:	3b01      	subs	r3, #1
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	d10e      	bne.n	80097da <_printf_float+0x3fa>
 80097bc:	e65e      	b.n	800947c <_printf_float+0x9c>
 80097be:	2301      	movs	r3, #1
 80097c0:	464a      	mov	r2, r9
 80097c2:	4631      	mov	r1, r6
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b8      	blx	r7
 80097c8:	3001      	adds	r0, #1
 80097ca:	f43f ae57 	beq.w	800947c <_printf_float+0x9c>
 80097ce:	f108 0801 	add.w	r8, r8, #1
 80097d2:	9b08      	ldr	r3, [sp, #32]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	4543      	cmp	r3, r8
 80097d8:	dcf1      	bgt.n	80097be <_printf_float+0x3de>
 80097da:	9b04      	ldr	r3, [sp, #16]
 80097dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80097e0:	e6db      	b.n	800959a <_printf_float+0x1ba>
 80097e2:	f04f 0800 	mov.w	r8, #0
 80097e6:	f104 091a 	add.w	r9, r4, #26
 80097ea:	e7f2      	b.n	80097d2 <_printf_float+0x3f2>
 80097ec:	2301      	movs	r3, #1
 80097ee:	4642      	mov	r2, r8
 80097f0:	e7df      	b.n	80097b2 <_printf_float+0x3d2>
 80097f2:	2301      	movs	r3, #1
 80097f4:	464a      	mov	r2, r9
 80097f6:	4631      	mov	r1, r6
 80097f8:	4628      	mov	r0, r5
 80097fa:	47b8      	blx	r7
 80097fc:	3001      	adds	r0, #1
 80097fe:	f43f ae3d 	beq.w	800947c <_printf_float+0x9c>
 8009802:	f108 0801 	add.w	r8, r8, #1
 8009806:	68e3      	ldr	r3, [r4, #12]
 8009808:	9909      	ldr	r1, [sp, #36]	; 0x24
 800980a:	1a5b      	subs	r3, r3, r1
 800980c:	4543      	cmp	r3, r8
 800980e:	dcf0      	bgt.n	80097f2 <_printf_float+0x412>
 8009810:	e6f7      	b.n	8009602 <_printf_float+0x222>
 8009812:	f04f 0800 	mov.w	r8, #0
 8009816:	f104 0919 	add.w	r9, r4, #25
 800981a:	e7f4      	b.n	8009806 <_printf_float+0x426>

0800981c <_printf_common>:
 800981c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009820:	4616      	mov	r6, r2
 8009822:	4699      	mov	r9, r3
 8009824:	688a      	ldr	r2, [r1, #8]
 8009826:	690b      	ldr	r3, [r1, #16]
 8009828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800982c:	4293      	cmp	r3, r2
 800982e:	bfb8      	it	lt
 8009830:	4613      	movlt	r3, r2
 8009832:	6033      	str	r3, [r6, #0]
 8009834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009838:	4607      	mov	r7, r0
 800983a:	460c      	mov	r4, r1
 800983c:	b10a      	cbz	r2, 8009842 <_printf_common+0x26>
 800983e:	3301      	adds	r3, #1
 8009840:	6033      	str	r3, [r6, #0]
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	0699      	lsls	r1, r3, #26
 8009846:	bf42      	ittt	mi
 8009848:	6833      	ldrmi	r3, [r6, #0]
 800984a:	3302      	addmi	r3, #2
 800984c:	6033      	strmi	r3, [r6, #0]
 800984e:	6825      	ldr	r5, [r4, #0]
 8009850:	f015 0506 	ands.w	r5, r5, #6
 8009854:	d106      	bne.n	8009864 <_printf_common+0x48>
 8009856:	f104 0a19 	add.w	sl, r4, #25
 800985a:	68e3      	ldr	r3, [r4, #12]
 800985c:	6832      	ldr	r2, [r6, #0]
 800985e:	1a9b      	subs	r3, r3, r2
 8009860:	42ab      	cmp	r3, r5
 8009862:	dc26      	bgt.n	80098b2 <_printf_common+0x96>
 8009864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009868:	1e13      	subs	r3, r2, #0
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	bf18      	it	ne
 800986e:	2301      	movne	r3, #1
 8009870:	0692      	lsls	r2, r2, #26
 8009872:	d42b      	bmi.n	80098cc <_printf_common+0xb0>
 8009874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009878:	4649      	mov	r1, r9
 800987a:	4638      	mov	r0, r7
 800987c:	47c0      	blx	r8
 800987e:	3001      	adds	r0, #1
 8009880:	d01e      	beq.n	80098c0 <_printf_common+0xa4>
 8009882:	6823      	ldr	r3, [r4, #0]
 8009884:	68e5      	ldr	r5, [r4, #12]
 8009886:	6832      	ldr	r2, [r6, #0]
 8009888:	f003 0306 	and.w	r3, r3, #6
 800988c:	2b04      	cmp	r3, #4
 800988e:	bf08      	it	eq
 8009890:	1aad      	subeq	r5, r5, r2
 8009892:	68a3      	ldr	r3, [r4, #8]
 8009894:	6922      	ldr	r2, [r4, #16]
 8009896:	bf0c      	ite	eq
 8009898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800989c:	2500      	movne	r5, #0
 800989e:	4293      	cmp	r3, r2
 80098a0:	bfc4      	itt	gt
 80098a2:	1a9b      	subgt	r3, r3, r2
 80098a4:	18ed      	addgt	r5, r5, r3
 80098a6:	2600      	movs	r6, #0
 80098a8:	341a      	adds	r4, #26
 80098aa:	42b5      	cmp	r5, r6
 80098ac:	d11a      	bne.n	80098e4 <_printf_common+0xc8>
 80098ae:	2000      	movs	r0, #0
 80098b0:	e008      	b.n	80098c4 <_printf_common+0xa8>
 80098b2:	2301      	movs	r3, #1
 80098b4:	4652      	mov	r2, sl
 80098b6:	4649      	mov	r1, r9
 80098b8:	4638      	mov	r0, r7
 80098ba:	47c0      	blx	r8
 80098bc:	3001      	adds	r0, #1
 80098be:	d103      	bne.n	80098c8 <_printf_common+0xac>
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c8:	3501      	adds	r5, #1
 80098ca:	e7c6      	b.n	800985a <_printf_common+0x3e>
 80098cc:	18e1      	adds	r1, r4, r3
 80098ce:	1c5a      	adds	r2, r3, #1
 80098d0:	2030      	movs	r0, #48	; 0x30
 80098d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098d6:	4422      	add	r2, r4
 80098d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098e0:	3302      	adds	r3, #2
 80098e2:	e7c7      	b.n	8009874 <_printf_common+0x58>
 80098e4:	2301      	movs	r3, #1
 80098e6:	4622      	mov	r2, r4
 80098e8:	4649      	mov	r1, r9
 80098ea:	4638      	mov	r0, r7
 80098ec:	47c0      	blx	r8
 80098ee:	3001      	adds	r0, #1
 80098f0:	d0e6      	beq.n	80098c0 <_printf_common+0xa4>
 80098f2:	3601      	adds	r6, #1
 80098f4:	e7d9      	b.n	80098aa <_printf_common+0x8e>
	...

080098f8 <_printf_i>:
 80098f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098fc:	7e0f      	ldrb	r7, [r1, #24]
 80098fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009900:	2f78      	cmp	r7, #120	; 0x78
 8009902:	4691      	mov	r9, r2
 8009904:	4680      	mov	r8, r0
 8009906:	460c      	mov	r4, r1
 8009908:	469a      	mov	sl, r3
 800990a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800990e:	d807      	bhi.n	8009920 <_printf_i+0x28>
 8009910:	2f62      	cmp	r7, #98	; 0x62
 8009912:	d80a      	bhi.n	800992a <_printf_i+0x32>
 8009914:	2f00      	cmp	r7, #0
 8009916:	f000 80d8 	beq.w	8009aca <_printf_i+0x1d2>
 800991a:	2f58      	cmp	r7, #88	; 0x58
 800991c:	f000 80a3 	beq.w	8009a66 <_printf_i+0x16e>
 8009920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009928:	e03a      	b.n	80099a0 <_printf_i+0xa8>
 800992a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800992e:	2b15      	cmp	r3, #21
 8009930:	d8f6      	bhi.n	8009920 <_printf_i+0x28>
 8009932:	a101      	add	r1, pc, #4	; (adr r1, 8009938 <_printf_i+0x40>)
 8009934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009938:	08009991 	.word	0x08009991
 800993c:	080099a5 	.word	0x080099a5
 8009940:	08009921 	.word	0x08009921
 8009944:	08009921 	.word	0x08009921
 8009948:	08009921 	.word	0x08009921
 800994c:	08009921 	.word	0x08009921
 8009950:	080099a5 	.word	0x080099a5
 8009954:	08009921 	.word	0x08009921
 8009958:	08009921 	.word	0x08009921
 800995c:	08009921 	.word	0x08009921
 8009960:	08009921 	.word	0x08009921
 8009964:	08009ab1 	.word	0x08009ab1
 8009968:	080099d5 	.word	0x080099d5
 800996c:	08009a93 	.word	0x08009a93
 8009970:	08009921 	.word	0x08009921
 8009974:	08009921 	.word	0x08009921
 8009978:	08009ad3 	.word	0x08009ad3
 800997c:	08009921 	.word	0x08009921
 8009980:	080099d5 	.word	0x080099d5
 8009984:	08009921 	.word	0x08009921
 8009988:	08009921 	.word	0x08009921
 800998c:	08009a9b 	.word	0x08009a9b
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	1d1a      	adds	r2, r3, #4
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	602a      	str	r2, [r5, #0]
 8009998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800999c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099a0:	2301      	movs	r3, #1
 80099a2:	e0a3      	b.n	8009aec <_printf_i+0x1f4>
 80099a4:	6820      	ldr	r0, [r4, #0]
 80099a6:	6829      	ldr	r1, [r5, #0]
 80099a8:	0606      	lsls	r6, r0, #24
 80099aa:	f101 0304 	add.w	r3, r1, #4
 80099ae:	d50a      	bpl.n	80099c6 <_printf_i+0xce>
 80099b0:	680e      	ldr	r6, [r1, #0]
 80099b2:	602b      	str	r3, [r5, #0]
 80099b4:	2e00      	cmp	r6, #0
 80099b6:	da03      	bge.n	80099c0 <_printf_i+0xc8>
 80099b8:	232d      	movs	r3, #45	; 0x2d
 80099ba:	4276      	negs	r6, r6
 80099bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099c0:	485e      	ldr	r0, [pc, #376]	; (8009b3c <_printf_i+0x244>)
 80099c2:	230a      	movs	r3, #10
 80099c4:	e019      	b.n	80099fa <_printf_i+0x102>
 80099c6:	680e      	ldr	r6, [r1, #0]
 80099c8:	602b      	str	r3, [r5, #0]
 80099ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099ce:	bf18      	it	ne
 80099d0:	b236      	sxthne	r6, r6
 80099d2:	e7ef      	b.n	80099b4 <_printf_i+0xbc>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	6820      	ldr	r0, [r4, #0]
 80099d8:	1d19      	adds	r1, r3, #4
 80099da:	6029      	str	r1, [r5, #0]
 80099dc:	0601      	lsls	r1, r0, #24
 80099de:	d501      	bpl.n	80099e4 <_printf_i+0xec>
 80099e0:	681e      	ldr	r6, [r3, #0]
 80099e2:	e002      	b.n	80099ea <_printf_i+0xf2>
 80099e4:	0646      	lsls	r6, r0, #25
 80099e6:	d5fb      	bpl.n	80099e0 <_printf_i+0xe8>
 80099e8:	881e      	ldrh	r6, [r3, #0]
 80099ea:	4854      	ldr	r0, [pc, #336]	; (8009b3c <_printf_i+0x244>)
 80099ec:	2f6f      	cmp	r7, #111	; 0x6f
 80099ee:	bf0c      	ite	eq
 80099f0:	2308      	moveq	r3, #8
 80099f2:	230a      	movne	r3, #10
 80099f4:	2100      	movs	r1, #0
 80099f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099fa:	6865      	ldr	r5, [r4, #4]
 80099fc:	60a5      	str	r5, [r4, #8]
 80099fe:	2d00      	cmp	r5, #0
 8009a00:	bfa2      	ittt	ge
 8009a02:	6821      	ldrge	r1, [r4, #0]
 8009a04:	f021 0104 	bicge.w	r1, r1, #4
 8009a08:	6021      	strge	r1, [r4, #0]
 8009a0a:	b90e      	cbnz	r6, 8009a10 <_printf_i+0x118>
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	d04d      	beq.n	8009aac <_printf_i+0x1b4>
 8009a10:	4615      	mov	r5, r2
 8009a12:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a16:	fb03 6711 	mls	r7, r3, r1, r6
 8009a1a:	5dc7      	ldrb	r7, [r0, r7]
 8009a1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a20:	4637      	mov	r7, r6
 8009a22:	42bb      	cmp	r3, r7
 8009a24:	460e      	mov	r6, r1
 8009a26:	d9f4      	bls.n	8009a12 <_printf_i+0x11a>
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d10b      	bne.n	8009a44 <_printf_i+0x14c>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	07de      	lsls	r6, r3, #31
 8009a30:	d508      	bpl.n	8009a44 <_printf_i+0x14c>
 8009a32:	6923      	ldr	r3, [r4, #16]
 8009a34:	6861      	ldr	r1, [r4, #4]
 8009a36:	4299      	cmp	r1, r3
 8009a38:	bfde      	ittt	le
 8009a3a:	2330      	movle	r3, #48	; 0x30
 8009a3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a44:	1b52      	subs	r2, r2, r5
 8009a46:	6122      	str	r2, [r4, #16]
 8009a48:	f8cd a000 	str.w	sl, [sp]
 8009a4c:	464b      	mov	r3, r9
 8009a4e:	aa03      	add	r2, sp, #12
 8009a50:	4621      	mov	r1, r4
 8009a52:	4640      	mov	r0, r8
 8009a54:	f7ff fee2 	bl	800981c <_printf_common>
 8009a58:	3001      	adds	r0, #1
 8009a5a:	d14c      	bne.n	8009af6 <_printf_i+0x1fe>
 8009a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a60:	b004      	add	sp, #16
 8009a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a66:	4835      	ldr	r0, [pc, #212]	; (8009b3c <_printf_i+0x244>)
 8009a68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a6c:	6829      	ldr	r1, [r5, #0]
 8009a6e:	6823      	ldr	r3, [r4, #0]
 8009a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a74:	6029      	str	r1, [r5, #0]
 8009a76:	061d      	lsls	r5, r3, #24
 8009a78:	d514      	bpl.n	8009aa4 <_printf_i+0x1ac>
 8009a7a:	07df      	lsls	r7, r3, #31
 8009a7c:	bf44      	itt	mi
 8009a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8009a82:	6023      	strmi	r3, [r4, #0]
 8009a84:	b91e      	cbnz	r6, 8009a8e <_printf_i+0x196>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	f023 0320 	bic.w	r3, r3, #32
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	2310      	movs	r3, #16
 8009a90:	e7b0      	b.n	80099f4 <_printf_i+0xfc>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	f043 0320 	orr.w	r3, r3, #32
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	2378      	movs	r3, #120	; 0x78
 8009a9c:	4828      	ldr	r0, [pc, #160]	; (8009b40 <_printf_i+0x248>)
 8009a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aa2:	e7e3      	b.n	8009a6c <_printf_i+0x174>
 8009aa4:	0659      	lsls	r1, r3, #25
 8009aa6:	bf48      	it	mi
 8009aa8:	b2b6      	uxthmi	r6, r6
 8009aaa:	e7e6      	b.n	8009a7a <_printf_i+0x182>
 8009aac:	4615      	mov	r5, r2
 8009aae:	e7bb      	b.n	8009a28 <_printf_i+0x130>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	6826      	ldr	r6, [r4, #0]
 8009ab4:	6961      	ldr	r1, [r4, #20]
 8009ab6:	1d18      	adds	r0, r3, #4
 8009ab8:	6028      	str	r0, [r5, #0]
 8009aba:	0635      	lsls	r5, r6, #24
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	d501      	bpl.n	8009ac4 <_printf_i+0x1cc>
 8009ac0:	6019      	str	r1, [r3, #0]
 8009ac2:	e002      	b.n	8009aca <_printf_i+0x1d2>
 8009ac4:	0670      	lsls	r0, r6, #25
 8009ac6:	d5fb      	bpl.n	8009ac0 <_printf_i+0x1c8>
 8009ac8:	8019      	strh	r1, [r3, #0]
 8009aca:	2300      	movs	r3, #0
 8009acc:	6123      	str	r3, [r4, #16]
 8009ace:	4615      	mov	r5, r2
 8009ad0:	e7ba      	b.n	8009a48 <_printf_i+0x150>
 8009ad2:	682b      	ldr	r3, [r5, #0]
 8009ad4:	1d1a      	adds	r2, r3, #4
 8009ad6:	602a      	str	r2, [r5, #0]
 8009ad8:	681d      	ldr	r5, [r3, #0]
 8009ada:	6862      	ldr	r2, [r4, #4]
 8009adc:	2100      	movs	r1, #0
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f7f6 fbb6 	bl	8000250 <memchr>
 8009ae4:	b108      	cbz	r0, 8009aea <_printf_i+0x1f2>
 8009ae6:	1b40      	subs	r0, r0, r5
 8009ae8:	6060      	str	r0, [r4, #4]
 8009aea:	6863      	ldr	r3, [r4, #4]
 8009aec:	6123      	str	r3, [r4, #16]
 8009aee:	2300      	movs	r3, #0
 8009af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af4:	e7a8      	b.n	8009a48 <_printf_i+0x150>
 8009af6:	6923      	ldr	r3, [r4, #16]
 8009af8:	462a      	mov	r2, r5
 8009afa:	4649      	mov	r1, r9
 8009afc:	4640      	mov	r0, r8
 8009afe:	47d0      	blx	sl
 8009b00:	3001      	adds	r0, #1
 8009b02:	d0ab      	beq.n	8009a5c <_printf_i+0x164>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	079b      	lsls	r3, r3, #30
 8009b08:	d413      	bmi.n	8009b32 <_printf_i+0x23a>
 8009b0a:	68e0      	ldr	r0, [r4, #12]
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	4298      	cmp	r0, r3
 8009b10:	bfb8      	it	lt
 8009b12:	4618      	movlt	r0, r3
 8009b14:	e7a4      	b.n	8009a60 <_printf_i+0x168>
 8009b16:	2301      	movs	r3, #1
 8009b18:	4632      	mov	r2, r6
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	47d0      	blx	sl
 8009b20:	3001      	adds	r0, #1
 8009b22:	d09b      	beq.n	8009a5c <_printf_i+0x164>
 8009b24:	3501      	adds	r5, #1
 8009b26:	68e3      	ldr	r3, [r4, #12]
 8009b28:	9903      	ldr	r1, [sp, #12]
 8009b2a:	1a5b      	subs	r3, r3, r1
 8009b2c:	42ab      	cmp	r3, r5
 8009b2e:	dcf2      	bgt.n	8009b16 <_printf_i+0x21e>
 8009b30:	e7eb      	b.n	8009b0a <_printf_i+0x212>
 8009b32:	2500      	movs	r5, #0
 8009b34:	f104 0619 	add.w	r6, r4, #25
 8009b38:	e7f5      	b.n	8009b26 <_printf_i+0x22e>
 8009b3a:	bf00      	nop
 8009b3c:	0800dc52 	.word	0x0800dc52
 8009b40:	0800dc63 	.word	0x0800dc63

08009b44 <_scanf_float>:
 8009b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b48:	b087      	sub	sp, #28
 8009b4a:	4617      	mov	r7, r2
 8009b4c:	9303      	str	r3, [sp, #12]
 8009b4e:	688b      	ldr	r3, [r1, #8]
 8009b50:	1e5a      	subs	r2, r3, #1
 8009b52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009b56:	bf83      	ittte	hi
 8009b58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009b5c:	195b      	addhi	r3, r3, r5
 8009b5e:	9302      	strhi	r3, [sp, #8]
 8009b60:	2300      	movls	r3, #0
 8009b62:	bf86      	itte	hi
 8009b64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009b68:	608b      	strhi	r3, [r1, #8]
 8009b6a:	9302      	strls	r3, [sp, #8]
 8009b6c:	680b      	ldr	r3, [r1, #0]
 8009b6e:	468b      	mov	fp, r1
 8009b70:	2500      	movs	r5, #0
 8009b72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009b76:	f84b 3b1c 	str.w	r3, [fp], #28
 8009b7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009b7e:	4680      	mov	r8, r0
 8009b80:	460c      	mov	r4, r1
 8009b82:	465e      	mov	r6, fp
 8009b84:	46aa      	mov	sl, r5
 8009b86:	46a9      	mov	r9, r5
 8009b88:	9501      	str	r5, [sp, #4]
 8009b8a:	68a2      	ldr	r2, [r4, #8]
 8009b8c:	b152      	cbz	r2, 8009ba4 <_scanf_float+0x60>
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	2b4e      	cmp	r3, #78	; 0x4e
 8009b94:	d864      	bhi.n	8009c60 <_scanf_float+0x11c>
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d83c      	bhi.n	8009c14 <_scanf_float+0xd0>
 8009b9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009b9e:	b2c8      	uxtb	r0, r1
 8009ba0:	280e      	cmp	r0, #14
 8009ba2:	d93a      	bls.n	8009c1a <_scanf_float+0xd6>
 8009ba4:	f1b9 0f00 	cmp.w	r9, #0
 8009ba8:	d003      	beq.n	8009bb2 <_scanf_float+0x6e>
 8009baa:	6823      	ldr	r3, [r4, #0]
 8009bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bb6:	f1ba 0f01 	cmp.w	sl, #1
 8009bba:	f200 8113 	bhi.w	8009de4 <_scanf_float+0x2a0>
 8009bbe:	455e      	cmp	r6, fp
 8009bc0:	f200 8105 	bhi.w	8009dce <_scanf_float+0x28a>
 8009bc4:	2501      	movs	r5, #1
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	b007      	add	sp, #28
 8009bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009bd2:	2a0d      	cmp	r2, #13
 8009bd4:	d8e6      	bhi.n	8009ba4 <_scanf_float+0x60>
 8009bd6:	a101      	add	r1, pc, #4	; (adr r1, 8009bdc <_scanf_float+0x98>)
 8009bd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009bdc:	08009d1b 	.word	0x08009d1b
 8009be0:	08009ba5 	.word	0x08009ba5
 8009be4:	08009ba5 	.word	0x08009ba5
 8009be8:	08009ba5 	.word	0x08009ba5
 8009bec:	08009d7b 	.word	0x08009d7b
 8009bf0:	08009d53 	.word	0x08009d53
 8009bf4:	08009ba5 	.word	0x08009ba5
 8009bf8:	08009ba5 	.word	0x08009ba5
 8009bfc:	08009d29 	.word	0x08009d29
 8009c00:	08009ba5 	.word	0x08009ba5
 8009c04:	08009ba5 	.word	0x08009ba5
 8009c08:	08009ba5 	.word	0x08009ba5
 8009c0c:	08009ba5 	.word	0x08009ba5
 8009c10:	08009ce1 	.word	0x08009ce1
 8009c14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009c18:	e7db      	b.n	8009bd2 <_scanf_float+0x8e>
 8009c1a:	290e      	cmp	r1, #14
 8009c1c:	d8c2      	bhi.n	8009ba4 <_scanf_float+0x60>
 8009c1e:	a001      	add	r0, pc, #4	; (adr r0, 8009c24 <_scanf_float+0xe0>)
 8009c20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009c24:	08009cd3 	.word	0x08009cd3
 8009c28:	08009ba5 	.word	0x08009ba5
 8009c2c:	08009cd3 	.word	0x08009cd3
 8009c30:	08009d67 	.word	0x08009d67
 8009c34:	08009ba5 	.word	0x08009ba5
 8009c38:	08009c81 	.word	0x08009c81
 8009c3c:	08009cbd 	.word	0x08009cbd
 8009c40:	08009cbd 	.word	0x08009cbd
 8009c44:	08009cbd 	.word	0x08009cbd
 8009c48:	08009cbd 	.word	0x08009cbd
 8009c4c:	08009cbd 	.word	0x08009cbd
 8009c50:	08009cbd 	.word	0x08009cbd
 8009c54:	08009cbd 	.word	0x08009cbd
 8009c58:	08009cbd 	.word	0x08009cbd
 8009c5c:	08009cbd 	.word	0x08009cbd
 8009c60:	2b6e      	cmp	r3, #110	; 0x6e
 8009c62:	d809      	bhi.n	8009c78 <_scanf_float+0x134>
 8009c64:	2b60      	cmp	r3, #96	; 0x60
 8009c66:	d8b2      	bhi.n	8009bce <_scanf_float+0x8a>
 8009c68:	2b54      	cmp	r3, #84	; 0x54
 8009c6a:	d077      	beq.n	8009d5c <_scanf_float+0x218>
 8009c6c:	2b59      	cmp	r3, #89	; 0x59
 8009c6e:	d199      	bne.n	8009ba4 <_scanf_float+0x60>
 8009c70:	2d07      	cmp	r5, #7
 8009c72:	d197      	bne.n	8009ba4 <_scanf_float+0x60>
 8009c74:	2508      	movs	r5, #8
 8009c76:	e029      	b.n	8009ccc <_scanf_float+0x188>
 8009c78:	2b74      	cmp	r3, #116	; 0x74
 8009c7a:	d06f      	beq.n	8009d5c <_scanf_float+0x218>
 8009c7c:	2b79      	cmp	r3, #121	; 0x79
 8009c7e:	e7f6      	b.n	8009c6e <_scanf_float+0x12a>
 8009c80:	6821      	ldr	r1, [r4, #0]
 8009c82:	05c8      	lsls	r0, r1, #23
 8009c84:	d51a      	bpl.n	8009cbc <_scanf_float+0x178>
 8009c86:	9b02      	ldr	r3, [sp, #8]
 8009c88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009c8c:	6021      	str	r1, [r4, #0]
 8009c8e:	f109 0901 	add.w	r9, r9, #1
 8009c92:	b11b      	cbz	r3, 8009c9c <_scanf_float+0x158>
 8009c94:	3b01      	subs	r3, #1
 8009c96:	3201      	adds	r2, #1
 8009c98:	9302      	str	r3, [sp, #8]
 8009c9a:	60a2      	str	r2, [r4, #8]
 8009c9c:	68a3      	ldr	r3, [r4, #8]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	6923      	ldr	r3, [r4, #16]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	6123      	str	r3, [r4, #16]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	607b      	str	r3, [r7, #4]
 8009cb0:	f340 8084 	ble.w	8009dbc <_scanf_float+0x278>
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	603b      	str	r3, [r7, #0]
 8009cba:	e766      	b.n	8009b8a <_scanf_float+0x46>
 8009cbc:	eb1a 0f05 	cmn.w	sl, r5
 8009cc0:	f47f af70 	bne.w	8009ba4 <_scanf_float+0x60>
 8009cc4:	6822      	ldr	r2, [r4, #0]
 8009cc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009cca:	6022      	str	r2, [r4, #0]
 8009ccc:	f806 3b01 	strb.w	r3, [r6], #1
 8009cd0:	e7e4      	b.n	8009c9c <_scanf_float+0x158>
 8009cd2:	6822      	ldr	r2, [r4, #0]
 8009cd4:	0610      	lsls	r0, r2, #24
 8009cd6:	f57f af65 	bpl.w	8009ba4 <_scanf_float+0x60>
 8009cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cde:	e7f4      	b.n	8009cca <_scanf_float+0x186>
 8009ce0:	f1ba 0f00 	cmp.w	sl, #0
 8009ce4:	d10e      	bne.n	8009d04 <_scanf_float+0x1c0>
 8009ce6:	f1b9 0f00 	cmp.w	r9, #0
 8009cea:	d10e      	bne.n	8009d0a <_scanf_float+0x1c6>
 8009cec:	6822      	ldr	r2, [r4, #0]
 8009cee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009cf2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009cf6:	d108      	bne.n	8009d0a <_scanf_float+0x1c6>
 8009cf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009cfc:	6022      	str	r2, [r4, #0]
 8009cfe:	f04f 0a01 	mov.w	sl, #1
 8009d02:	e7e3      	b.n	8009ccc <_scanf_float+0x188>
 8009d04:	f1ba 0f02 	cmp.w	sl, #2
 8009d08:	d055      	beq.n	8009db6 <_scanf_float+0x272>
 8009d0a:	2d01      	cmp	r5, #1
 8009d0c:	d002      	beq.n	8009d14 <_scanf_float+0x1d0>
 8009d0e:	2d04      	cmp	r5, #4
 8009d10:	f47f af48 	bne.w	8009ba4 <_scanf_float+0x60>
 8009d14:	3501      	adds	r5, #1
 8009d16:	b2ed      	uxtb	r5, r5
 8009d18:	e7d8      	b.n	8009ccc <_scanf_float+0x188>
 8009d1a:	f1ba 0f01 	cmp.w	sl, #1
 8009d1e:	f47f af41 	bne.w	8009ba4 <_scanf_float+0x60>
 8009d22:	f04f 0a02 	mov.w	sl, #2
 8009d26:	e7d1      	b.n	8009ccc <_scanf_float+0x188>
 8009d28:	b97d      	cbnz	r5, 8009d4a <_scanf_float+0x206>
 8009d2a:	f1b9 0f00 	cmp.w	r9, #0
 8009d2e:	f47f af3c 	bne.w	8009baa <_scanf_float+0x66>
 8009d32:	6822      	ldr	r2, [r4, #0]
 8009d34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009d38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009d3c:	f47f af39 	bne.w	8009bb2 <_scanf_float+0x6e>
 8009d40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d44:	6022      	str	r2, [r4, #0]
 8009d46:	2501      	movs	r5, #1
 8009d48:	e7c0      	b.n	8009ccc <_scanf_float+0x188>
 8009d4a:	2d03      	cmp	r5, #3
 8009d4c:	d0e2      	beq.n	8009d14 <_scanf_float+0x1d0>
 8009d4e:	2d05      	cmp	r5, #5
 8009d50:	e7de      	b.n	8009d10 <_scanf_float+0x1cc>
 8009d52:	2d02      	cmp	r5, #2
 8009d54:	f47f af26 	bne.w	8009ba4 <_scanf_float+0x60>
 8009d58:	2503      	movs	r5, #3
 8009d5a:	e7b7      	b.n	8009ccc <_scanf_float+0x188>
 8009d5c:	2d06      	cmp	r5, #6
 8009d5e:	f47f af21 	bne.w	8009ba4 <_scanf_float+0x60>
 8009d62:	2507      	movs	r5, #7
 8009d64:	e7b2      	b.n	8009ccc <_scanf_float+0x188>
 8009d66:	6822      	ldr	r2, [r4, #0]
 8009d68:	0591      	lsls	r1, r2, #22
 8009d6a:	f57f af1b 	bpl.w	8009ba4 <_scanf_float+0x60>
 8009d6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009d72:	6022      	str	r2, [r4, #0]
 8009d74:	f8cd 9004 	str.w	r9, [sp, #4]
 8009d78:	e7a8      	b.n	8009ccc <_scanf_float+0x188>
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009d80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009d84:	d006      	beq.n	8009d94 <_scanf_float+0x250>
 8009d86:	0550      	lsls	r0, r2, #21
 8009d88:	f57f af0c 	bpl.w	8009ba4 <_scanf_float+0x60>
 8009d8c:	f1b9 0f00 	cmp.w	r9, #0
 8009d90:	f43f af0f 	beq.w	8009bb2 <_scanf_float+0x6e>
 8009d94:	0591      	lsls	r1, r2, #22
 8009d96:	bf58      	it	pl
 8009d98:	9901      	ldrpl	r1, [sp, #4]
 8009d9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009d9e:	bf58      	it	pl
 8009da0:	eba9 0101 	subpl.w	r1, r9, r1
 8009da4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009da8:	bf58      	it	pl
 8009daa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009dae:	6022      	str	r2, [r4, #0]
 8009db0:	f04f 0900 	mov.w	r9, #0
 8009db4:	e78a      	b.n	8009ccc <_scanf_float+0x188>
 8009db6:	f04f 0a03 	mov.w	sl, #3
 8009dba:	e787      	b.n	8009ccc <_scanf_float+0x188>
 8009dbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	4798      	blx	r3
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	f43f aedf 	beq.w	8009b8a <_scanf_float+0x46>
 8009dcc:	e6ea      	b.n	8009ba4 <_scanf_float+0x60>
 8009dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009dd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009dd6:	463a      	mov	r2, r7
 8009dd8:	4640      	mov	r0, r8
 8009dda:	4798      	blx	r3
 8009ddc:	6923      	ldr	r3, [r4, #16]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	6123      	str	r3, [r4, #16]
 8009de2:	e6ec      	b.n	8009bbe <_scanf_float+0x7a>
 8009de4:	1e6b      	subs	r3, r5, #1
 8009de6:	2b06      	cmp	r3, #6
 8009de8:	d825      	bhi.n	8009e36 <_scanf_float+0x2f2>
 8009dea:	2d02      	cmp	r5, #2
 8009dec:	d836      	bhi.n	8009e5c <_scanf_float+0x318>
 8009dee:	455e      	cmp	r6, fp
 8009df0:	f67f aee8 	bls.w	8009bc4 <_scanf_float+0x80>
 8009df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009df8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009dfc:	463a      	mov	r2, r7
 8009dfe:	4640      	mov	r0, r8
 8009e00:	4798      	blx	r3
 8009e02:	6923      	ldr	r3, [r4, #16]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	6123      	str	r3, [r4, #16]
 8009e08:	e7f1      	b.n	8009dee <_scanf_float+0x2aa>
 8009e0a:	9802      	ldr	r0, [sp, #8]
 8009e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009e14:	9002      	str	r0, [sp, #8]
 8009e16:	463a      	mov	r2, r7
 8009e18:	4640      	mov	r0, r8
 8009e1a:	4798      	blx	r3
 8009e1c:	6923      	ldr	r3, [r4, #16]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	6123      	str	r3, [r4, #16]
 8009e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e26:	fa5f fa8a 	uxtb.w	sl, sl
 8009e2a:	f1ba 0f02 	cmp.w	sl, #2
 8009e2e:	d1ec      	bne.n	8009e0a <_scanf_float+0x2c6>
 8009e30:	3d03      	subs	r5, #3
 8009e32:	b2ed      	uxtb	r5, r5
 8009e34:	1b76      	subs	r6, r6, r5
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	05da      	lsls	r2, r3, #23
 8009e3a:	d52f      	bpl.n	8009e9c <_scanf_float+0x358>
 8009e3c:	055b      	lsls	r3, r3, #21
 8009e3e:	d510      	bpl.n	8009e62 <_scanf_float+0x31e>
 8009e40:	455e      	cmp	r6, fp
 8009e42:	f67f aebf 	bls.w	8009bc4 <_scanf_float+0x80>
 8009e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009e4e:	463a      	mov	r2, r7
 8009e50:	4640      	mov	r0, r8
 8009e52:	4798      	blx	r3
 8009e54:	6923      	ldr	r3, [r4, #16]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	e7f1      	b.n	8009e40 <_scanf_float+0x2fc>
 8009e5c:	46aa      	mov	sl, r5
 8009e5e:	9602      	str	r6, [sp, #8]
 8009e60:	e7df      	b.n	8009e22 <_scanf_float+0x2de>
 8009e62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	2965      	cmp	r1, #101	; 0x65
 8009e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009e72:	6123      	str	r3, [r4, #16]
 8009e74:	d00c      	beq.n	8009e90 <_scanf_float+0x34c>
 8009e76:	2945      	cmp	r1, #69	; 0x45
 8009e78:	d00a      	beq.n	8009e90 <_scanf_float+0x34c>
 8009e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e7e:	463a      	mov	r2, r7
 8009e80:	4640      	mov	r0, r8
 8009e82:	4798      	blx	r3
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	1eb5      	subs	r5, r6, #2
 8009e8e:	6123      	str	r3, [r4, #16]
 8009e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009e94:	463a      	mov	r2, r7
 8009e96:	4640      	mov	r0, r8
 8009e98:	4798      	blx	r3
 8009e9a:	462e      	mov	r6, r5
 8009e9c:	6825      	ldr	r5, [r4, #0]
 8009e9e:	f015 0510 	ands.w	r5, r5, #16
 8009ea2:	d14e      	bne.n	8009f42 <_scanf_float+0x3fe>
 8009ea4:	7035      	strb	r5, [r6, #0]
 8009ea6:	6823      	ldr	r3, [r4, #0]
 8009ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009eb0:	d119      	bne.n	8009ee6 <_scanf_float+0x3a2>
 8009eb2:	9b01      	ldr	r3, [sp, #4]
 8009eb4:	454b      	cmp	r3, r9
 8009eb6:	eba3 0209 	sub.w	r2, r3, r9
 8009eba:	d121      	bne.n	8009f00 <_scanf_float+0x3bc>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4659      	mov	r1, fp
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	f000 fe4b 	bl	800ab5c <_strtod_r>
 8009ec6:	6822      	ldr	r2, [r4, #0]
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	f012 0f02 	tst.w	r2, #2
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	d021      	beq.n	8009f16 <_scanf_float+0x3d2>
 8009ed2:	9903      	ldr	r1, [sp, #12]
 8009ed4:	1d1a      	adds	r2, r3, #4
 8009ed6:	600a      	str	r2, [r1, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	ed83 0b00 	vstr	d0, [r3]
 8009ede:	68e3      	ldr	r3, [r4, #12]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	60e3      	str	r3, [r4, #12]
 8009ee4:	e66f      	b.n	8009bc6 <_scanf_float+0x82>
 8009ee6:	9b04      	ldr	r3, [sp, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d0e7      	beq.n	8009ebc <_scanf_float+0x378>
 8009eec:	9905      	ldr	r1, [sp, #20]
 8009eee:	230a      	movs	r3, #10
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	3101      	adds	r1, #1
 8009ef4:	4640      	mov	r0, r8
 8009ef6:	f000 feb9 	bl	800ac6c <_strtol_r>
 8009efa:	9b04      	ldr	r3, [sp, #16]
 8009efc:	9e05      	ldr	r6, [sp, #20]
 8009efe:	1ac2      	subs	r2, r0, r3
 8009f00:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009f04:	429e      	cmp	r6, r3
 8009f06:	bf28      	it	cs
 8009f08:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009f0c:	490e      	ldr	r1, [pc, #56]	; (8009f48 <_scanf_float+0x404>)
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f000 f834 	bl	8009f7c <siprintf>
 8009f14:	e7d2      	b.n	8009ebc <_scanf_float+0x378>
 8009f16:	9903      	ldr	r1, [sp, #12]
 8009f18:	f012 0f04 	tst.w	r2, #4
 8009f1c:	f103 0204 	add.w	r2, r3, #4
 8009f20:	600a      	str	r2, [r1, #0]
 8009f22:	d1d9      	bne.n	8009ed8 <_scanf_float+0x394>
 8009f24:	eeb4 0b40 	vcmp.f64	d0, d0
 8009f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f2c:	681e      	ldr	r6, [r3, #0]
 8009f2e:	d705      	bvc.n	8009f3c <_scanf_float+0x3f8>
 8009f30:	4806      	ldr	r0, [pc, #24]	; (8009f4c <_scanf_float+0x408>)
 8009f32:	f000 f81d 	bl	8009f70 <nanf>
 8009f36:	ed86 0a00 	vstr	s0, [r6]
 8009f3a:	e7d0      	b.n	8009ede <_scanf_float+0x39a>
 8009f3c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009f40:	e7f9      	b.n	8009f36 <_scanf_float+0x3f2>
 8009f42:	2500      	movs	r5, #0
 8009f44:	e63f      	b.n	8009bc6 <_scanf_float+0x82>
 8009f46:	bf00      	nop
 8009f48:	0800dc74 	.word	0x0800dc74
 8009f4c:	0800e0e8 	.word	0x0800e0e8

08009f50 <_sbrk_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d06      	ldr	r5, [pc, #24]	; (8009f6c <_sbrk_r+0x1c>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	f7f8 f944 	bl	80021e8 <_sbrk>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_sbrk_r+0x1a>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_sbrk_r+0x1a>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20000710 	.word	0x20000710

08009f70 <nanf>:
 8009f70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009f78 <nanf+0x8>
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	7fc00000 	.word	0x7fc00000

08009f7c <siprintf>:
 8009f7c:	b40e      	push	{r1, r2, r3}
 8009f7e:	b500      	push	{lr}
 8009f80:	b09c      	sub	sp, #112	; 0x70
 8009f82:	ab1d      	add	r3, sp, #116	; 0x74
 8009f84:	9002      	str	r0, [sp, #8]
 8009f86:	9006      	str	r0, [sp, #24]
 8009f88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f8c:	4809      	ldr	r0, [pc, #36]	; (8009fb4 <siprintf+0x38>)
 8009f8e:	9107      	str	r1, [sp, #28]
 8009f90:	9104      	str	r1, [sp, #16]
 8009f92:	4909      	ldr	r1, [pc, #36]	; (8009fb8 <siprintf+0x3c>)
 8009f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f98:	9105      	str	r1, [sp, #20]
 8009f9a:	6800      	ldr	r0, [r0, #0]
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	a902      	add	r1, sp, #8
 8009fa0:	f002 fd22 	bl	800c9e8 <_svfiprintf_r>
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	b01c      	add	sp, #112	; 0x70
 8009fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb0:	b003      	add	sp, #12
 8009fb2:	4770      	bx	lr
 8009fb4:	2000018c 	.word	0x2000018c
 8009fb8:	ffff0208 	.word	0xffff0208

08009fbc <sulp>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	460d      	mov	r5, r1
 8009fc2:	4616      	mov	r6, r2
 8009fc4:	ec45 4b10 	vmov	d0, r4, r5
 8009fc8:	f002 fb50 	bl	800c66c <__ulp>
 8009fcc:	b17e      	cbz	r6, 8009fee <sulp+0x32>
 8009fce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	dd09      	ble.n	8009fee <sulp+0x32>
 8009fda:	051b      	lsls	r3, r3, #20
 8009fdc:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8009fe6:	ec41 0b17 	vmov	d7, r0, r1
 8009fea:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009fee:	bd70      	pop	{r4, r5, r6, pc}

08009ff0 <_strtod_l>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	ed2d 8b0e 	vpush	{d8-d14}
 8009ff8:	b097      	sub	sp, #92	; 0x5c
 8009ffa:	461f      	mov	r7, r3
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9312      	str	r3, [sp, #72]	; 0x48
 800a000:	4ba1      	ldr	r3, [pc, #644]	; (800a288 <_strtod_l+0x298>)
 800a002:	920d      	str	r2, [sp, #52]	; 0x34
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	4604      	mov	r4, r0
 800a00a:	4618      	mov	r0, r3
 800a00c:	468b      	mov	fp, r1
 800a00e:	f7f6 f917 	bl	8000240 <strlen>
 800a012:	f04f 0800 	mov.w	r8, #0
 800a016:	4605      	mov	r5, r0
 800a018:	f04f 0900 	mov.w	r9, #0
 800a01c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a020:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a022:	7813      	ldrb	r3, [r2, #0]
 800a024:	2b2b      	cmp	r3, #43	; 0x2b
 800a026:	d04d      	beq.n	800a0c4 <_strtod_l+0xd4>
 800a028:	d83a      	bhi.n	800a0a0 <_strtod_l+0xb0>
 800a02a:	2b0d      	cmp	r3, #13
 800a02c:	d833      	bhi.n	800a096 <_strtod_l+0xa6>
 800a02e:	2b08      	cmp	r3, #8
 800a030:	d833      	bhi.n	800a09a <_strtod_l+0xaa>
 800a032:	2b00      	cmp	r3, #0
 800a034:	d03d      	beq.n	800a0b2 <_strtod_l+0xc2>
 800a036:	2300      	movs	r3, #0
 800a038:	9308      	str	r3, [sp, #32]
 800a03a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a03c:	7833      	ldrb	r3, [r6, #0]
 800a03e:	2b30      	cmp	r3, #48	; 0x30
 800a040:	f040 80b0 	bne.w	800a1a4 <_strtod_l+0x1b4>
 800a044:	7873      	ldrb	r3, [r6, #1]
 800a046:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a04a:	2b58      	cmp	r3, #88	; 0x58
 800a04c:	d167      	bne.n	800a11e <_strtod_l+0x12e>
 800a04e:	9b08      	ldr	r3, [sp, #32]
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	ab12      	add	r3, sp, #72	; 0x48
 800a054:	9702      	str	r7, [sp, #8]
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	4a8c      	ldr	r2, [pc, #560]	; (800a28c <_strtod_l+0x29c>)
 800a05a:	ab13      	add	r3, sp, #76	; 0x4c
 800a05c:	a911      	add	r1, sp, #68	; 0x44
 800a05e:	4620      	mov	r0, r4
 800a060:	f001 fc68 	bl	800b934 <__gethex>
 800a064:	f010 0507 	ands.w	r5, r0, #7
 800a068:	4607      	mov	r7, r0
 800a06a:	d005      	beq.n	800a078 <_strtod_l+0x88>
 800a06c:	2d06      	cmp	r5, #6
 800a06e:	d12b      	bne.n	800a0c8 <_strtod_l+0xd8>
 800a070:	3601      	adds	r6, #1
 800a072:	2300      	movs	r3, #0
 800a074:	9611      	str	r6, [sp, #68]	; 0x44
 800a076:	9308      	str	r3, [sp, #32]
 800a078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f040 854e 	bne.w	800ab1c <_strtod_l+0xb2c>
 800a080:	9b08      	ldr	r3, [sp, #32]
 800a082:	b1e3      	cbz	r3, 800a0be <_strtod_l+0xce>
 800a084:	ec49 8b17 	vmov	d7, r8, r9
 800a088:	eeb1 0b47 	vneg.f64	d0, d7
 800a08c:	b017      	add	sp, #92	; 0x5c
 800a08e:	ecbd 8b0e 	vpop	{d8-d14}
 800a092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a096:	2b20      	cmp	r3, #32
 800a098:	d1cd      	bne.n	800a036 <_strtod_l+0x46>
 800a09a:	3201      	adds	r2, #1
 800a09c:	9211      	str	r2, [sp, #68]	; 0x44
 800a09e:	e7bf      	b.n	800a020 <_strtod_l+0x30>
 800a0a0:	2b2d      	cmp	r3, #45	; 0x2d
 800a0a2:	d1c8      	bne.n	800a036 <_strtod_l+0x46>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	9308      	str	r3, [sp, #32]
 800a0a8:	1c53      	adds	r3, r2, #1
 800a0aa:	9311      	str	r3, [sp, #68]	; 0x44
 800a0ac:	7853      	ldrb	r3, [r2, #1]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1c3      	bne.n	800a03a <_strtod_l+0x4a>
 800a0b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f040 852d 	bne.w	800ab18 <_strtod_l+0xb28>
 800a0be:	ec49 8b10 	vmov	d0, r8, r9
 800a0c2:	e7e3      	b.n	800a08c <_strtod_l+0x9c>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	e7ee      	b.n	800a0a6 <_strtod_l+0xb6>
 800a0c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0ca:	b13a      	cbz	r2, 800a0dc <_strtod_l+0xec>
 800a0cc:	2135      	movs	r1, #53	; 0x35
 800a0ce:	a814      	add	r0, sp, #80	; 0x50
 800a0d0:	f002 fbd4 	bl	800c87c <__copybits>
 800a0d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a0d6:	4620      	mov	r0, r4
 800a0d8:	f001 ff96 	bl	800c008 <_Bfree>
 800a0dc:	3d01      	subs	r5, #1
 800a0de:	2d04      	cmp	r5, #4
 800a0e0:	d806      	bhi.n	800a0f0 <_strtod_l+0x100>
 800a0e2:	e8df f005 	tbb	[pc, r5]
 800a0e6:	030a      	.short	0x030a
 800a0e8:	1714      	.short	0x1714
 800a0ea:	0a          	.byte	0x0a
 800a0eb:	00          	.byte	0x00
 800a0ec:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a0f0:	073f      	lsls	r7, r7, #28
 800a0f2:	d5c1      	bpl.n	800a078 <_strtod_l+0x88>
 800a0f4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a0f8:	e7be      	b.n	800a078 <_strtod_l+0x88>
 800a0fa:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a0fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a100:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a104:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a108:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a10c:	e7f0      	b.n	800a0f0 <_strtod_l+0x100>
 800a10e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800a290 <_strtod_l+0x2a0>
 800a112:	e7ed      	b.n	800a0f0 <_strtod_l+0x100>
 800a114:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a118:	f04f 38ff 	mov.w	r8, #4294967295
 800a11c:	e7e8      	b.n	800a0f0 <_strtod_l+0x100>
 800a11e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	9211      	str	r2, [sp, #68]	; 0x44
 800a124:	785b      	ldrb	r3, [r3, #1]
 800a126:	2b30      	cmp	r3, #48	; 0x30
 800a128:	d0f9      	beq.n	800a11e <_strtod_l+0x12e>
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0a4      	beq.n	800a078 <_strtod_l+0x88>
 800a12e:	2301      	movs	r3, #1
 800a130:	f04f 0a00 	mov.w	sl, #0
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a138:	930a      	str	r3, [sp, #40]	; 0x28
 800a13a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a13e:	f8cd a018 	str.w	sl, [sp, #24]
 800a142:	220a      	movs	r2, #10
 800a144:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a146:	7807      	ldrb	r7, [r0, #0]
 800a148:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a14c:	b2d9      	uxtb	r1, r3
 800a14e:	2909      	cmp	r1, #9
 800a150:	d92a      	bls.n	800a1a8 <_strtod_l+0x1b8>
 800a152:	9907      	ldr	r1, [sp, #28]
 800a154:	462a      	mov	r2, r5
 800a156:	f002 fd4f 	bl	800cbf8 <strncmp>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d033      	beq.n	800a1c6 <_strtod_l+0x1d6>
 800a15e:	2000      	movs	r0, #0
 800a160:	9b06      	ldr	r3, [sp, #24]
 800a162:	463a      	mov	r2, r7
 800a164:	4601      	mov	r1, r0
 800a166:	4607      	mov	r7, r0
 800a168:	2a65      	cmp	r2, #101	; 0x65
 800a16a:	d001      	beq.n	800a170 <_strtod_l+0x180>
 800a16c:	2a45      	cmp	r2, #69	; 0x45
 800a16e:	d117      	bne.n	800a1a0 <_strtod_l+0x1b0>
 800a170:	b91b      	cbnz	r3, 800a17a <_strtod_l+0x18a>
 800a172:	9b04      	ldr	r3, [sp, #16]
 800a174:	4303      	orrs	r3, r0
 800a176:	d09c      	beq.n	800a0b2 <_strtod_l+0xc2>
 800a178:	2300      	movs	r3, #0
 800a17a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a17e:	f10b 0201 	add.w	r2, fp, #1
 800a182:	9211      	str	r2, [sp, #68]	; 0x44
 800a184:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800a188:	2a2b      	cmp	r2, #43	; 0x2b
 800a18a:	d071      	beq.n	800a270 <_strtod_l+0x280>
 800a18c:	2a2d      	cmp	r2, #45	; 0x2d
 800a18e:	d077      	beq.n	800a280 <_strtod_l+0x290>
 800a190:	f04f 0e00 	mov.w	lr, #0
 800a194:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a198:	2d09      	cmp	r5, #9
 800a19a:	d97f      	bls.n	800a29c <_strtod_l+0x2ac>
 800a19c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a1a0:	2500      	movs	r5, #0
 800a1a2:	e09b      	b.n	800a2dc <_strtod_l+0x2ec>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	e7c3      	b.n	800a130 <_strtod_l+0x140>
 800a1a8:	9906      	ldr	r1, [sp, #24]
 800a1aa:	2908      	cmp	r1, #8
 800a1ac:	bfdd      	ittte	le
 800a1ae:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a1b0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a1b4:	9309      	strle	r3, [sp, #36]	; 0x24
 800a1b6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a1ba:	9b06      	ldr	r3, [sp, #24]
 800a1bc:	3001      	adds	r0, #1
 800a1be:	3301      	adds	r3, #1
 800a1c0:	9306      	str	r3, [sp, #24]
 800a1c2:	9011      	str	r0, [sp, #68]	; 0x44
 800a1c4:	e7be      	b.n	800a144 <_strtod_l+0x154>
 800a1c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1c8:	195a      	adds	r2, r3, r5
 800a1ca:	9211      	str	r2, [sp, #68]	; 0x44
 800a1cc:	5d5a      	ldrb	r2, [r3, r5]
 800a1ce:	9b06      	ldr	r3, [sp, #24]
 800a1d0:	b3a3      	cbz	r3, 800a23c <_strtod_l+0x24c>
 800a1d2:	4607      	mov	r7, r0
 800a1d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a1d8:	2909      	cmp	r1, #9
 800a1da:	d912      	bls.n	800a202 <_strtod_l+0x212>
 800a1dc:	2101      	movs	r1, #1
 800a1de:	e7c3      	b.n	800a168 <_strtod_l+0x178>
 800a1e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	9211      	str	r2, [sp, #68]	; 0x44
 800a1e6:	785a      	ldrb	r2, [r3, #1]
 800a1e8:	3001      	adds	r0, #1
 800a1ea:	2a30      	cmp	r2, #48	; 0x30
 800a1ec:	d0f8      	beq.n	800a1e0 <_strtod_l+0x1f0>
 800a1ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a1f2:	2b08      	cmp	r3, #8
 800a1f4:	f200 8497 	bhi.w	800ab26 <_strtod_l+0xb36>
 800a1f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	2000      	movs	r0, #0
 800a200:	4603      	mov	r3, r0
 800a202:	3a30      	subs	r2, #48	; 0x30
 800a204:	f100 0101 	add.w	r1, r0, #1
 800a208:	d012      	beq.n	800a230 <_strtod_l+0x240>
 800a20a:	440f      	add	r7, r1
 800a20c:	eb00 0c03 	add.w	ip, r0, r3
 800a210:	4619      	mov	r1, r3
 800a212:	250a      	movs	r5, #10
 800a214:	4561      	cmp	r1, ip
 800a216:	d113      	bne.n	800a240 <_strtod_l+0x250>
 800a218:	1819      	adds	r1, r3, r0
 800a21a:	2908      	cmp	r1, #8
 800a21c:	f103 0301 	add.w	r3, r3, #1
 800a220:	4403      	add	r3, r0
 800a222:	dc1c      	bgt.n	800a25e <_strtod_l+0x26e>
 800a224:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a226:	210a      	movs	r1, #10
 800a228:	fb01 2200 	mla	r2, r1, r0, r2
 800a22c:	9209      	str	r2, [sp, #36]	; 0x24
 800a22e:	2100      	movs	r1, #0
 800a230:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a232:	1c50      	adds	r0, r2, #1
 800a234:	9011      	str	r0, [sp, #68]	; 0x44
 800a236:	7852      	ldrb	r2, [r2, #1]
 800a238:	4608      	mov	r0, r1
 800a23a:	e7cb      	b.n	800a1d4 <_strtod_l+0x1e4>
 800a23c:	9806      	ldr	r0, [sp, #24]
 800a23e:	e7d4      	b.n	800a1ea <_strtod_l+0x1fa>
 800a240:	2908      	cmp	r1, #8
 800a242:	dc04      	bgt.n	800a24e <_strtod_l+0x25e>
 800a244:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a246:	436e      	muls	r6, r5
 800a248:	9609      	str	r6, [sp, #36]	; 0x24
 800a24a:	3101      	adds	r1, #1
 800a24c:	e7e2      	b.n	800a214 <_strtod_l+0x224>
 800a24e:	f101 0e01 	add.w	lr, r1, #1
 800a252:	f1be 0f10 	cmp.w	lr, #16
 800a256:	bfd8      	it	le
 800a258:	fb05 fa0a 	mulle.w	sl, r5, sl
 800a25c:	e7f5      	b.n	800a24a <_strtod_l+0x25a>
 800a25e:	2b10      	cmp	r3, #16
 800a260:	bfdc      	itt	le
 800a262:	210a      	movle	r1, #10
 800a264:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800a268:	e7e1      	b.n	800a22e <_strtod_l+0x23e>
 800a26a:	2700      	movs	r7, #0
 800a26c:	2101      	movs	r1, #1
 800a26e:	e780      	b.n	800a172 <_strtod_l+0x182>
 800a270:	f04f 0e00 	mov.w	lr, #0
 800a274:	f10b 0202 	add.w	r2, fp, #2
 800a278:	9211      	str	r2, [sp, #68]	; 0x44
 800a27a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800a27e:	e789      	b.n	800a194 <_strtod_l+0x1a4>
 800a280:	f04f 0e01 	mov.w	lr, #1
 800a284:	e7f6      	b.n	800a274 <_strtod_l+0x284>
 800a286:	bf00      	nop
 800a288:	0800df0c 	.word	0x0800df0c
 800a28c:	0800dc7c 	.word	0x0800dc7c
 800a290:	7ff00000 	.word	0x7ff00000
 800a294:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a296:	1c55      	adds	r5, r2, #1
 800a298:	9511      	str	r5, [sp, #68]	; 0x44
 800a29a:	7852      	ldrb	r2, [r2, #1]
 800a29c:	2a30      	cmp	r2, #48	; 0x30
 800a29e:	d0f9      	beq.n	800a294 <_strtod_l+0x2a4>
 800a2a0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800a2a4:	2d08      	cmp	r5, #8
 800a2a6:	f63f af7b 	bhi.w	800a1a0 <_strtod_l+0x1b0>
 800a2aa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a2ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2b0:	9207      	str	r2, [sp, #28]
 800a2b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2b4:	1c55      	adds	r5, r2, #1
 800a2b6:	9511      	str	r5, [sp, #68]	; 0x44
 800a2b8:	7852      	ldrb	r2, [r2, #1]
 800a2ba:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a2be:	2e09      	cmp	r6, #9
 800a2c0:	d937      	bls.n	800a332 <_strtod_l+0x342>
 800a2c2:	9e07      	ldr	r6, [sp, #28]
 800a2c4:	1bad      	subs	r5, r5, r6
 800a2c6:	2d08      	cmp	r5, #8
 800a2c8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a2cc:	dc02      	bgt.n	800a2d4 <_strtod_l+0x2e4>
 800a2ce:	4565      	cmp	r5, ip
 800a2d0:	bfa8      	it	ge
 800a2d2:	4665      	movge	r5, ip
 800a2d4:	f1be 0f00 	cmp.w	lr, #0
 800a2d8:	d000      	beq.n	800a2dc <_strtod_l+0x2ec>
 800a2da:	426d      	negs	r5, r5
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d14d      	bne.n	800a37c <_strtod_l+0x38c>
 800a2e0:	9b04      	ldr	r3, [sp, #16]
 800a2e2:	4303      	orrs	r3, r0
 800a2e4:	f47f aec8 	bne.w	800a078 <_strtod_l+0x88>
 800a2e8:	2900      	cmp	r1, #0
 800a2ea:	f47f aee2 	bne.w	800a0b2 <_strtod_l+0xc2>
 800a2ee:	2a69      	cmp	r2, #105	; 0x69
 800a2f0:	d027      	beq.n	800a342 <_strtod_l+0x352>
 800a2f2:	dc24      	bgt.n	800a33e <_strtod_l+0x34e>
 800a2f4:	2a49      	cmp	r2, #73	; 0x49
 800a2f6:	d024      	beq.n	800a342 <_strtod_l+0x352>
 800a2f8:	2a4e      	cmp	r2, #78	; 0x4e
 800a2fa:	f47f aeda 	bne.w	800a0b2 <_strtod_l+0xc2>
 800a2fe:	4996      	ldr	r1, [pc, #600]	; (800a558 <_strtod_l+0x568>)
 800a300:	a811      	add	r0, sp, #68	; 0x44
 800a302:	f001 fd6f 	bl	800bde4 <__match>
 800a306:	2800      	cmp	r0, #0
 800a308:	f43f aed3 	beq.w	800a0b2 <_strtod_l+0xc2>
 800a30c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b28      	cmp	r3, #40	; 0x28
 800a312:	d12d      	bne.n	800a370 <_strtod_l+0x380>
 800a314:	4991      	ldr	r1, [pc, #580]	; (800a55c <_strtod_l+0x56c>)
 800a316:	aa14      	add	r2, sp, #80	; 0x50
 800a318:	a811      	add	r0, sp, #68	; 0x44
 800a31a:	f001 fd77 	bl	800be0c <__hexnan>
 800a31e:	2805      	cmp	r0, #5
 800a320:	d126      	bne.n	800a370 <_strtod_l+0x380>
 800a322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a324:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a328:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a32c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a330:	e6a2      	b.n	800a078 <_strtod_l+0x88>
 800a332:	250a      	movs	r5, #10
 800a334:	fb05 250c 	mla	r5, r5, ip, r2
 800a338:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800a33c:	e7b9      	b.n	800a2b2 <_strtod_l+0x2c2>
 800a33e:	2a6e      	cmp	r2, #110	; 0x6e
 800a340:	e7db      	b.n	800a2fa <_strtod_l+0x30a>
 800a342:	4987      	ldr	r1, [pc, #540]	; (800a560 <_strtod_l+0x570>)
 800a344:	a811      	add	r0, sp, #68	; 0x44
 800a346:	f001 fd4d 	bl	800bde4 <__match>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	f43f aeb1 	beq.w	800a0b2 <_strtod_l+0xc2>
 800a350:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a352:	4984      	ldr	r1, [pc, #528]	; (800a564 <_strtod_l+0x574>)
 800a354:	3b01      	subs	r3, #1
 800a356:	a811      	add	r0, sp, #68	; 0x44
 800a358:	9311      	str	r3, [sp, #68]	; 0x44
 800a35a:	f001 fd43 	bl	800bde4 <__match>
 800a35e:	b910      	cbnz	r0, 800a366 <_strtod_l+0x376>
 800a360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a362:	3301      	adds	r3, #1
 800a364:	9311      	str	r3, [sp, #68]	; 0x44
 800a366:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800a578 <_strtod_l+0x588>
 800a36a:	f04f 0800 	mov.w	r8, #0
 800a36e:	e683      	b.n	800a078 <_strtod_l+0x88>
 800a370:	487d      	ldr	r0, [pc, #500]	; (800a568 <_strtod_l+0x578>)
 800a372:	f002 fc39 	bl	800cbe8 <nan>
 800a376:	ec59 8b10 	vmov	r8, r9, d0
 800a37a:	e67d      	b.n	800a078 <_strtod_l+0x88>
 800a37c:	1bea      	subs	r2, r5, r7
 800a37e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800a382:	9207      	str	r2, [sp, #28]
 800a384:	9a06      	ldr	r2, [sp, #24]
 800a386:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	bf08      	it	eq
 800a38e:	461a      	moveq	r2, r3
 800a390:	2b10      	cmp	r3, #16
 800a392:	9206      	str	r2, [sp, #24]
 800a394:	461a      	mov	r2, r3
 800a396:	bfa8      	it	ge
 800a398:	2210      	movge	r2, #16
 800a39a:	2b09      	cmp	r3, #9
 800a39c:	ec59 8b17 	vmov	r8, r9, d7
 800a3a0:	dd0c      	ble.n	800a3bc <_strtod_l+0x3cc>
 800a3a2:	4972      	ldr	r1, [pc, #456]	; (800a56c <_strtod_l+0x57c>)
 800a3a4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a3a8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800a3ac:	ee06 aa90 	vmov	s13, sl
 800a3b0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a3b4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a3b8:	ec59 8b16 	vmov	r8, r9, d6
 800a3bc:	2b0f      	cmp	r3, #15
 800a3be:	dc36      	bgt.n	800a42e <_strtod_l+0x43e>
 800a3c0:	9907      	ldr	r1, [sp, #28]
 800a3c2:	2900      	cmp	r1, #0
 800a3c4:	f43f ae58 	beq.w	800a078 <_strtod_l+0x88>
 800a3c8:	dd23      	ble.n	800a412 <_strtod_l+0x422>
 800a3ca:	2916      	cmp	r1, #22
 800a3cc:	dc0b      	bgt.n	800a3e6 <_strtod_l+0x3f6>
 800a3ce:	4b67      	ldr	r3, [pc, #412]	; (800a56c <_strtod_l+0x57c>)
 800a3d0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a3d4:	ed93 7b00 	vldr	d7, [r3]
 800a3d8:	ec49 8b16 	vmov	d6, r8, r9
 800a3dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a3e0:	ec59 8b17 	vmov	r8, r9, d7
 800a3e4:	e648      	b.n	800a078 <_strtod_l+0x88>
 800a3e6:	9807      	ldr	r0, [sp, #28]
 800a3e8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800a3ec:	4281      	cmp	r1, r0
 800a3ee:	db1e      	blt.n	800a42e <_strtod_l+0x43e>
 800a3f0:	4a5e      	ldr	r2, [pc, #376]	; (800a56c <_strtod_l+0x57c>)
 800a3f2:	f1c3 030f 	rsb	r3, r3, #15
 800a3f6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a3fa:	ed91 7b00 	vldr	d7, [r1]
 800a3fe:	ec49 8b16 	vmov	d6, r8, r9
 800a402:	1ac3      	subs	r3, r0, r3
 800a404:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a408:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a40c:	ed92 6b00 	vldr	d6, [r2]
 800a410:	e7e4      	b.n	800a3dc <_strtod_l+0x3ec>
 800a412:	9907      	ldr	r1, [sp, #28]
 800a414:	3116      	adds	r1, #22
 800a416:	db0a      	blt.n	800a42e <_strtod_l+0x43e>
 800a418:	4b54      	ldr	r3, [pc, #336]	; (800a56c <_strtod_l+0x57c>)
 800a41a:	1b7d      	subs	r5, r7, r5
 800a41c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a420:	ed95 7b00 	vldr	d7, [r5]
 800a424:	ec49 8b16 	vmov	d6, r8, r9
 800a428:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a42c:	e7d8      	b.n	800a3e0 <_strtod_l+0x3f0>
 800a42e:	9907      	ldr	r1, [sp, #28]
 800a430:	1a9a      	subs	r2, r3, r2
 800a432:	440a      	add	r2, r1
 800a434:	2a00      	cmp	r2, #0
 800a436:	dd6f      	ble.n	800a518 <_strtod_l+0x528>
 800a438:	f012 000f 	ands.w	r0, r2, #15
 800a43c:	d00a      	beq.n	800a454 <_strtod_l+0x464>
 800a43e:	494b      	ldr	r1, [pc, #300]	; (800a56c <_strtod_l+0x57c>)
 800a440:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a444:	ed91 7b00 	vldr	d7, [r1]
 800a448:	ec49 8b16 	vmov	d6, r8, r9
 800a44c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a450:	ec59 8b17 	vmov	r8, r9, d7
 800a454:	f032 020f 	bics.w	r2, r2, #15
 800a458:	d04f      	beq.n	800a4fa <_strtod_l+0x50a>
 800a45a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800a45e:	dd22      	ble.n	800a4a6 <_strtod_l+0x4b6>
 800a460:	2500      	movs	r5, #0
 800a462:	462e      	mov	r6, r5
 800a464:	9506      	str	r5, [sp, #24]
 800a466:	462f      	mov	r7, r5
 800a468:	2322      	movs	r3, #34	; 0x22
 800a46a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800a578 <_strtod_l+0x588>
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	f04f 0800 	mov.w	r8, #0
 800a474:	9b06      	ldr	r3, [sp, #24]
 800a476:	2b00      	cmp	r3, #0
 800a478:	f43f adfe 	beq.w	800a078 <_strtod_l+0x88>
 800a47c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a47e:	4620      	mov	r0, r4
 800a480:	f001 fdc2 	bl	800c008 <_Bfree>
 800a484:	4639      	mov	r1, r7
 800a486:	4620      	mov	r0, r4
 800a488:	f001 fdbe 	bl	800c008 <_Bfree>
 800a48c:	4631      	mov	r1, r6
 800a48e:	4620      	mov	r0, r4
 800a490:	f001 fdba 	bl	800c008 <_Bfree>
 800a494:	9906      	ldr	r1, [sp, #24]
 800a496:	4620      	mov	r0, r4
 800a498:	f001 fdb6 	bl	800c008 <_Bfree>
 800a49c:	4629      	mov	r1, r5
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f001 fdb2 	bl	800c008 <_Bfree>
 800a4a4:	e5e8      	b.n	800a078 <_strtod_l+0x88>
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	ec49 8b17 	vmov	d7, r8, r9
 800a4ac:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800a570 <_strtod_l+0x580>
 800a4b0:	1112      	asrs	r2, r2, #4
 800a4b2:	4601      	mov	r1, r0
 800a4b4:	2a01      	cmp	r2, #1
 800a4b6:	dc23      	bgt.n	800a500 <_strtod_l+0x510>
 800a4b8:	b108      	cbz	r0, 800a4be <_strtod_l+0x4ce>
 800a4ba:	ec59 8b17 	vmov	r8, r9, d7
 800a4be:	4a2c      	ldr	r2, [pc, #176]	; (800a570 <_strtod_l+0x580>)
 800a4c0:	482c      	ldr	r0, [pc, #176]	; (800a574 <_strtod_l+0x584>)
 800a4c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a4c6:	ed92 7b00 	vldr	d7, [r2]
 800a4ca:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a4ce:	ec49 8b16 	vmov	d6, r8, r9
 800a4d2:	4a29      	ldr	r2, [pc, #164]	; (800a578 <_strtod_l+0x588>)
 800a4d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4d8:	ee17 1a90 	vmov	r1, s15
 800a4dc:	400a      	ands	r2, r1
 800a4de:	4282      	cmp	r2, r0
 800a4e0:	ec59 8b17 	vmov	r8, r9, d7
 800a4e4:	d8bc      	bhi.n	800a460 <_strtod_l+0x470>
 800a4e6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800a4ea:	4282      	cmp	r2, r0
 800a4ec:	bf86      	itte	hi
 800a4ee:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800a57c <_strtod_l+0x58c>
 800a4f2:	f04f 38ff 	movhi.w	r8, #4294967295
 800a4f6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	9204      	str	r2, [sp, #16]
 800a4fe:	e078      	b.n	800a5f2 <_strtod_l+0x602>
 800a500:	07d6      	lsls	r6, r2, #31
 800a502:	d504      	bpl.n	800a50e <_strtod_l+0x51e>
 800a504:	ed9c 6b00 	vldr	d6, [ip]
 800a508:	2001      	movs	r0, #1
 800a50a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a50e:	3101      	adds	r1, #1
 800a510:	1052      	asrs	r2, r2, #1
 800a512:	f10c 0c08 	add.w	ip, ip, #8
 800a516:	e7cd      	b.n	800a4b4 <_strtod_l+0x4c4>
 800a518:	d0ef      	beq.n	800a4fa <_strtod_l+0x50a>
 800a51a:	4252      	negs	r2, r2
 800a51c:	f012 000f 	ands.w	r0, r2, #15
 800a520:	d00a      	beq.n	800a538 <_strtod_l+0x548>
 800a522:	4912      	ldr	r1, [pc, #72]	; (800a56c <_strtod_l+0x57c>)
 800a524:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a528:	ed91 7b00 	vldr	d7, [r1]
 800a52c:	ec49 8b16 	vmov	d6, r8, r9
 800a530:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a534:	ec59 8b17 	vmov	r8, r9, d7
 800a538:	1112      	asrs	r2, r2, #4
 800a53a:	d0de      	beq.n	800a4fa <_strtod_l+0x50a>
 800a53c:	2a1f      	cmp	r2, #31
 800a53e:	dd1f      	ble.n	800a580 <_strtod_l+0x590>
 800a540:	2500      	movs	r5, #0
 800a542:	462e      	mov	r6, r5
 800a544:	9506      	str	r5, [sp, #24]
 800a546:	462f      	mov	r7, r5
 800a548:	2322      	movs	r3, #34	; 0x22
 800a54a:	f04f 0800 	mov.w	r8, #0
 800a54e:	f04f 0900 	mov.w	r9, #0
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	e78e      	b.n	800a474 <_strtod_l+0x484>
 800a556:	bf00      	nop
 800a558:	0800dc4d 	.word	0x0800dc4d
 800a55c:	0800dc90 	.word	0x0800dc90
 800a560:	0800dc45 	.word	0x0800dc45
 800a564:	0800ddd4 	.word	0x0800ddd4
 800a568:	0800e0e8 	.word	0x0800e0e8
 800a56c:	0800dfc8 	.word	0x0800dfc8
 800a570:	0800dfa0 	.word	0x0800dfa0
 800a574:	7ca00000 	.word	0x7ca00000
 800a578:	7ff00000 	.word	0x7ff00000
 800a57c:	7fefffff 	.word	0x7fefffff
 800a580:	f012 0110 	ands.w	r1, r2, #16
 800a584:	bf18      	it	ne
 800a586:	216a      	movne	r1, #106	; 0x6a
 800a588:	9104      	str	r1, [sp, #16]
 800a58a:	ec49 8b17 	vmov	d7, r8, r9
 800a58e:	49be      	ldr	r1, [pc, #760]	; (800a888 <_strtod_l+0x898>)
 800a590:	2000      	movs	r0, #0
 800a592:	07d6      	lsls	r6, r2, #31
 800a594:	d504      	bpl.n	800a5a0 <_strtod_l+0x5b0>
 800a596:	ed91 6b00 	vldr	d6, [r1]
 800a59a:	2001      	movs	r0, #1
 800a59c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5a0:	1052      	asrs	r2, r2, #1
 800a5a2:	f101 0108 	add.w	r1, r1, #8
 800a5a6:	d1f4      	bne.n	800a592 <_strtod_l+0x5a2>
 800a5a8:	b108      	cbz	r0, 800a5ae <_strtod_l+0x5be>
 800a5aa:	ec59 8b17 	vmov	r8, r9, d7
 800a5ae:	9a04      	ldr	r2, [sp, #16]
 800a5b0:	b1c2      	cbz	r2, 800a5e4 <_strtod_l+0x5f4>
 800a5b2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800a5b6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800a5ba:	2a00      	cmp	r2, #0
 800a5bc:	4648      	mov	r0, r9
 800a5be:	dd11      	ble.n	800a5e4 <_strtod_l+0x5f4>
 800a5c0:	2a1f      	cmp	r2, #31
 800a5c2:	f340 812e 	ble.w	800a822 <_strtod_l+0x832>
 800a5c6:	2a34      	cmp	r2, #52	; 0x34
 800a5c8:	bfde      	ittt	le
 800a5ca:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800a5ce:	f04f 32ff 	movle.w	r2, #4294967295
 800a5d2:	fa02 f101 	lslle.w	r1, r2, r1
 800a5d6:	f04f 0800 	mov.w	r8, #0
 800a5da:	bfcc      	ite	gt
 800a5dc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a5e0:	ea01 0900 	andle.w	r9, r1, r0
 800a5e4:	ec49 8b17 	vmov	d7, r8, r9
 800a5e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f0:	d0a6      	beq.n	800a540 <_strtod_l+0x550>
 800a5f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5f4:	9200      	str	r2, [sp, #0]
 800a5f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a5f8:	9a06      	ldr	r2, [sp, #24]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f001 fd6c 	bl	800c0d8 <__s2b>
 800a600:	9006      	str	r0, [sp, #24]
 800a602:	2800      	cmp	r0, #0
 800a604:	f43f af2c 	beq.w	800a460 <_strtod_l+0x470>
 800a608:	9b07      	ldr	r3, [sp, #28]
 800a60a:	1b7d      	subs	r5, r7, r5
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	bfb4      	ite	lt
 800a610:	462b      	movlt	r3, r5
 800a612:	2300      	movge	r3, #0
 800a614:	9309      	str	r3, [sp, #36]	; 0x24
 800a616:	9b07      	ldr	r3, [sp, #28]
 800a618:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800a868 <_strtod_l+0x878>
 800a61c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800a870 <_strtod_l+0x880>
 800a620:	ed9f bb95 	vldr	d11, [pc, #596]	; 800a878 <_strtod_l+0x888>
 800a624:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a628:	2500      	movs	r5, #0
 800a62a:	930c      	str	r3, [sp, #48]	; 0x30
 800a62c:	462e      	mov	r6, r5
 800a62e:	9b06      	ldr	r3, [sp, #24]
 800a630:	4620      	mov	r0, r4
 800a632:	6859      	ldr	r1, [r3, #4]
 800a634:	f001 fca8 	bl	800bf88 <_Balloc>
 800a638:	4607      	mov	r7, r0
 800a63a:	2800      	cmp	r0, #0
 800a63c:	f43f af14 	beq.w	800a468 <_strtod_l+0x478>
 800a640:	9b06      	ldr	r3, [sp, #24]
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	3202      	adds	r2, #2
 800a646:	f103 010c 	add.w	r1, r3, #12
 800a64a:	0092      	lsls	r2, r2, #2
 800a64c:	300c      	adds	r0, #12
 800a64e:	f7fe fd3f 	bl	80090d0 <memcpy>
 800a652:	ec49 8b10 	vmov	d0, r8, r9
 800a656:	aa14      	add	r2, sp, #80	; 0x50
 800a658:	a913      	add	r1, sp, #76	; 0x4c
 800a65a:	4620      	mov	r0, r4
 800a65c:	f002 f882 	bl	800c764 <__d2b>
 800a660:	ec49 8b18 	vmov	d8, r8, r9
 800a664:	9012      	str	r0, [sp, #72]	; 0x48
 800a666:	2800      	cmp	r0, #0
 800a668:	f43f aefe 	beq.w	800a468 <_strtod_l+0x478>
 800a66c:	2101      	movs	r1, #1
 800a66e:	4620      	mov	r0, r4
 800a670:	f001 fdcc 	bl	800c20c <__i2b>
 800a674:	4606      	mov	r6, r0
 800a676:	2800      	cmp	r0, #0
 800a678:	f43f aef6 	beq.w	800a468 <_strtod_l+0x478>
 800a67c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a67e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a680:	2b00      	cmp	r3, #0
 800a682:	bfab      	itete	ge
 800a684:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800a686:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800a688:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800a68c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800a690:	bfac      	ite	ge
 800a692:	eb03 0b02 	addge.w	fp, r3, r2
 800a696:	eba2 0a03 	sublt.w	sl, r2, r3
 800a69a:	9a04      	ldr	r2, [sp, #16]
 800a69c:	1a9b      	subs	r3, r3, r2
 800a69e:	440b      	add	r3, r1
 800a6a0:	4a7a      	ldr	r2, [pc, #488]	; (800a88c <_strtod_l+0x89c>)
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800a6aa:	f280 80cd 	bge.w	800a848 <_strtod_l+0x858>
 800a6ae:	1ad2      	subs	r2, r2, r3
 800a6b0:	2a1f      	cmp	r2, #31
 800a6b2:	eba1 0102 	sub.w	r1, r1, r2
 800a6b6:	f04f 0001 	mov.w	r0, #1
 800a6ba:	f300 80b9 	bgt.w	800a830 <_strtod_l+0x840>
 800a6be:	fa00 f302 	lsl.w	r3, r0, r2
 800a6c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a6c8:	eb0b 0301 	add.w	r3, fp, r1
 800a6cc:	9a04      	ldr	r2, [sp, #16]
 800a6ce:	459b      	cmp	fp, r3
 800a6d0:	448a      	add	sl, r1
 800a6d2:	4492      	add	sl, r2
 800a6d4:	465a      	mov	r2, fp
 800a6d6:	bfa8      	it	ge
 800a6d8:	461a      	movge	r2, r3
 800a6da:	4552      	cmp	r2, sl
 800a6dc:	bfa8      	it	ge
 800a6de:	4652      	movge	r2, sl
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	bfc2      	ittt	gt
 800a6e4:	1a9b      	subgt	r3, r3, r2
 800a6e6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800a6ea:	ebab 0b02 	subgt.w	fp, fp, r2
 800a6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f0:	2a00      	cmp	r2, #0
 800a6f2:	dd18      	ble.n	800a726 <_strtod_l+0x736>
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6fa:	f001 fe47 	bl	800c38c <__pow5mult>
 800a6fe:	4606      	mov	r6, r0
 800a700:	2800      	cmp	r0, #0
 800a702:	f43f aeb1 	beq.w	800a468 <_strtod_l+0x478>
 800a706:	4601      	mov	r1, r0
 800a708:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a70a:	4620      	mov	r0, r4
 800a70c:	f001 fd94 	bl	800c238 <__multiply>
 800a710:	900e      	str	r0, [sp, #56]	; 0x38
 800a712:	2800      	cmp	r0, #0
 800a714:	f43f aea8 	beq.w	800a468 <_strtod_l+0x478>
 800a718:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a71a:	4620      	mov	r0, r4
 800a71c:	f001 fc74 	bl	800c008 <_Bfree>
 800a720:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a724:	9212      	str	r2, [sp, #72]	; 0x48
 800a726:	2b00      	cmp	r3, #0
 800a728:	f300 8093 	bgt.w	800a852 <_strtod_l+0x862>
 800a72c:	9b07      	ldr	r3, [sp, #28]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd08      	ble.n	800a744 <_strtod_l+0x754>
 800a732:	4639      	mov	r1, r7
 800a734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a736:	4620      	mov	r0, r4
 800a738:	f001 fe28 	bl	800c38c <__pow5mult>
 800a73c:	4607      	mov	r7, r0
 800a73e:	2800      	cmp	r0, #0
 800a740:	f43f ae92 	beq.w	800a468 <_strtod_l+0x478>
 800a744:	f1ba 0f00 	cmp.w	sl, #0
 800a748:	dd08      	ble.n	800a75c <_strtod_l+0x76c>
 800a74a:	4639      	mov	r1, r7
 800a74c:	4652      	mov	r2, sl
 800a74e:	4620      	mov	r0, r4
 800a750:	f001 fe76 	bl	800c440 <__lshift>
 800a754:	4607      	mov	r7, r0
 800a756:	2800      	cmp	r0, #0
 800a758:	f43f ae86 	beq.w	800a468 <_strtod_l+0x478>
 800a75c:	f1bb 0f00 	cmp.w	fp, #0
 800a760:	dd08      	ble.n	800a774 <_strtod_l+0x784>
 800a762:	4631      	mov	r1, r6
 800a764:	465a      	mov	r2, fp
 800a766:	4620      	mov	r0, r4
 800a768:	f001 fe6a 	bl	800c440 <__lshift>
 800a76c:	4606      	mov	r6, r0
 800a76e:	2800      	cmp	r0, #0
 800a770:	f43f ae7a 	beq.w	800a468 <_strtod_l+0x478>
 800a774:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a776:	463a      	mov	r2, r7
 800a778:	4620      	mov	r0, r4
 800a77a:	f001 feed 	bl	800c558 <__mdiff>
 800a77e:	4605      	mov	r5, r0
 800a780:	2800      	cmp	r0, #0
 800a782:	f43f ae71 	beq.w	800a468 <_strtod_l+0x478>
 800a786:	2300      	movs	r3, #0
 800a788:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a78c:	60c3      	str	r3, [r0, #12]
 800a78e:	4631      	mov	r1, r6
 800a790:	f001 fec6 	bl	800c520 <__mcmp>
 800a794:	2800      	cmp	r0, #0
 800a796:	da7d      	bge.n	800a894 <_strtod_l+0x8a4>
 800a798:	ea5a 0308 	orrs.w	r3, sl, r8
 800a79c:	f040 80a3 	bne.w	800a8e6 <_strtod_l+0x8f6>
 800a7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f040 809e 	bne.w	800a8e6 <_strtod_l+0x8f6>
 800a7aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7ae:	0d1b      	lsrs	r3, r3, #20
 800a7b0:	051b      	lsls	r3, r3, #20
 800a7b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a7b6:	f240 8096 	bls.w	800a8e6 <_strtod_l+0x8f6>
 800a7ba:	696b      	ldr	r3, [r5, #20]
 800a7bc:	b91b      	cbnz	r3, 800a7c6 <_strtod_l+0x7d6>
 800a7be:	692b      	ldr	r3, [r5, #16]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	f340 8090 	ble.w	800a8e6 <_strtod_l+0x8f6>
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f001 fe38 	bl	800c440 <__lshift>
 800a7d0:	4631      	mov	r1, r6
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	f001 fea4 	bl	800c520 <__mcmp>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	f340 8084 	ble.w	800a8e6 <_strtod_l+0x8f6>
 800a7de:	9904      	ldr	r1, [sp, #16]
 800a7e0:	4a2b      	ldr	r2, [pc, #172]	; (800a890 <_strtod_l+0x8a0>)
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	f000 809d 	beq.w	800a924 <_strtod_l+0x934>
 800a7ea:	ea02 0109 	and.w	r1, r2, r9
 800a7ee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a7f2:	f300 8097 	bgt.w	800a924 <_strtod_l+0x934>
 800a7f6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a7fa:	f77f aea5 	ble.w	800a548 <_strtod_l+0x558>
 800a7fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800a880 <_strtod_l+0x890>
 800a802:	ec49 8b16 	vmov	d6, r8, r9
 800a806:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a80a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a80e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800a812:	4313      	orrs	r3, r2
 800a814:	bf08      	it	eq
 800a816:	2322      	moveq	r3, #34	; 0x22
 800a818:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a81c:	bf08      	it	eq
 800a81e:	6023      	streq	r3, [r4, #0]
 800a820:	e62c      	b.n	800a47c <_strtod_l+0x48c>
 800a822:	f04f 31ff 	mov.w	r1, #4294967295
 800a826:	fa01 f202 	lsl.w	r2, r1, r2
 800a82a:	ea02 0808 	and.w	r8, r2, r8
 800a82e:	e6d9      	b.n	800a5e4 <_strtod_l+0x5f4>
 800a830:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800a834:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800a838:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800a83c:	33e2      	adds	r3, #226	; 0xe2
 800a83e:	fa00 f303 	lsl.w	r3, r0, r3
 800a842:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800a846:	e73f      	b.n	800a6c8 <_strtod_l+0x6d8>
 800a848:	2200      	movs	r2, #0
 800a84a:	2301      	movs	r3, #1
 800a84c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a850:	e73a      	b.n	800a6c8 <_strtod_l+0x6d8>
 800a852:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a854:	461a      	mov	r2, r3
 800a856:	4620      	mov	r0, r4
 800a858:	f001 fdf2 	bl	800c440 <__lshift>
 800a85c:	9012      	str	r0, [sp, #72]	; 0x48
 800a85e:	2800      	cmp	r0, #0
 800a860:	f47f af64 	bne.w	800a72c <_strtod_l+0x73c>
 800a864:	e600      	b.n	800a468 <_strtod_l+0x478>
 800a866:	bf00      	nop
 800a868:	94a03595 	.word	0x94a03595
 800a86c:	3fcfffff 	.word	0x3fcfffff
 800a870:	94a03595 	.word	0x94a03595
 800a874:	3fdfffff 	.word	0x3fdfffff
 800a878:	35afe535 	.word	0x35afe535
 800a87c:	3fe00000 	.word	0x3fe00000
 800a880:	00000000 	.word	0x00000000
 800a884:	39500000 	.word	0x39500000
 800a888:	0800dca8 	.word	0x0800dca8
 800a88c:	fffffc02 	.word	0xfffffc02
 800a890:	7ff00000 	.word	0x7ff00000
 800a894:	46cb      	mov	fp, r9
 800a896:	d15f      	bne.n	800a958 <_strtod_l+0x968>
 800a898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a89c:	f1ba 0f00 	cmp.w	sl, #0
 800a8a0:	d02a      	beq.n	800a8f8 <_strtod_l+0x908>
 800a8a2:	4aa7      	ldr	r2, [pc, #668]	; (800ab40 <_strtod_l+0xb50>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d12b      	bne.n	800a900 <_strtod_l+0x910>
 800a8a8:	9b04      	ldr	r3, [sp, #16]
 800a8aa:	4642      	mov	r2, r8
 800a8ac:	b1fb      	cbz	r3, 800a8ee <_strtod_l+0x8fe>
 800a8ae:	4ba5      	ldr	r3, [pc, #660]	; (800ab44 <_strtod_l+0xb54>)
 800a8b0:	ea09 0303 	and.w	r3, r9, r3
 800a8b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a8b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a8bc:	d81a      	bhi.n	800a8f4 <_strtod_l+0x904>
 800a8be:	0d1b      	lsrs	r3, r3, #20
 800a8c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d119      	bne.n	800a900 <_strtod_l+0x910>
 800a8cc:	4b9e      	ldr	r3, [pc, #632]	; (800ab48 <_strtod_l+0xb58>)
 800a8ce:	459b      	cmp	fp, r3
 800a8d0:	d102      	bne.n	800a8d8 <_strtod_l+0x8e8>
 800a8d2:	3201      	adds	r2, #1
 800a8d4:	f43f adc8 	beq.w	800a468 <_strtod_l+0x478>
 800a8d8:	4b9a      	ldr	r3, [pc, #616]	; (800ab44 <_strtod_l+0xb54>)
 800a8da:	ea0b 0303 	and.w	r3, fp, r3
 800a8de:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a8e2:	f04f 0800 	mov.w	r8, #0
 800a8e6:	9b04      	ldr	r3, [sp, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d188      	bne.n	800a7fe <_strtod_l+0x80e>
 800a8ec:	e5c6      	b.n	800a47c <_strtod_l+0x48c>
 800a8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f2:	e7e9      	b.n	800a8c8 <_strtod_l+0x8d8>
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	e7e7      	b.n	800a8c8 <_strtod_l+0x8d8>
 800a8f8:	ea53 0308 	orrs.w	r3, r3, r8
 800a8fc:	f43f af6f 	beq.w	800a7de <_strtod_l+0x7ee>
 800a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a902:	b1cb      	cbz	r3, 800a938 <_strtod_l+0x948>
 800a904:	ea13 0f0b 	tst.w	r3, fp
 800a908:	d0ed      	beq.n	800a8e6 <_strtod_l+0x8f6>
 800a90a:	9a04      	ldr	r2, [sp, #16]
 800a90c:	4640      	mov	r0, r8
 800a90e:	4649      	mov	r1, r9
 800a910:	f1ba 0f00 	cmp.w	sl, #0
 800a914:	d014      	beq.n	800a940 <_strtod_l+0x950>
 800a916:	f7ff fb51 	bl	8009fbc <sulp>
 800a91a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800a91e:	ec59 8b17 	vmov	r8, r9, d7
 800a922:	e7e0      	b.n	800a8e6 <_strtod_l+0x8f6>
 800a924:	4013      	ands	r3, r2
 800a926:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a92a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a92e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a932:	f04f 38ff 	mov.w	r8, #4294967295
 800a936:	e7d6      	b.n	800a8e6 <_strtod_l+0x8f6>
 800a938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93a:	ea13 0f08 	tst.w	r3, r8
 800a93e:	e7e3      	b.n	800a908 <_strtod_l+0x918>
 800a940:	f7ff fb3c 	bl	8009fbc <sulp>
 800a944:	ee38 0b40 	vsub.f64	d0, d8, d0
 800a948:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a950:	ec59 8b10 	vmov	r8, r9, d0
 800a954:	d1c7      	bne.n	800a8e6 <_strtod_l+0x8f6>
 800a956:	e5f7      	b.n	800a548 <_strtod_l+0x558>
 800a958:	4631      	mov	r1, r6
 800a95a:	4628      	mov	r0, r5
 800a95c:	f001 ff5e 	bl	800c81c <__ratio>
 800a960:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800a964:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a96c:	d865      	bhi.n	800aa3a <_strtod_l+0xa4a>
 800a96e:	f1ba 0f00 	cmp.w	sl, #0
 800a972:	d042      	beq.n	800a9fa <_strtod_l+0xa0a>
 800a974:	4b75      	ldr	r3, [pc, #468]	; (800ab4c <_strtod_l+0xb5c>)
 800a976:	2200      	movs	r2, #0
 800a978:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800a97c:	4871      	ldr	r0, [pc, #452]	; (800ab44 <_strtod_l+0xb54>)
 800a97e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800ab58 <_strtod_l+0xb68>
 800a982:	ea0b 0100 	and.w	r1, fp, r0
 800a986:	4561      	cmp	r1, ip
 800a988:	f040 808e 	bne.w	800aaa8 <_strtod_l+0xab8>
 800a98c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800a990:	ec49 8b10 	vmov	d0, r8, r9
 800a994:	ec43 2b1c 	vmov	d12, r2, r3
 800a998:	910a      	str	r1, [sp, #40]	; 0x28
 800a99a:	f001 fe67 	bl	800c66c <__ulp>
 800a99e:	ec49 8b1e 	vmov	d14, r8, r9
 800a9a2:	4868      	ldr	r0, [pc, #416]	; (800ab44 <_strtod_l+0xb54>)
 800a9a4:	eeac eb00 	vfma.f64	d14, d12, d0
 800a9a8:	ee1e 3a90 	vmov	r3, s29
 800a9ac:	4a68      	ldr	r2, [pc, #416]	; (800ab50 <_strtod_l+0xb60>)
 800a9ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9b0:	4018      	ands	r0, r3
 800a9b2:	4290      	cmp	r0, r2
 800a9b4:	ec59 8b1e 	vmov	r8, r9, d14
 800a9b8:	d94e      	bls.n	800aa58 <_strtod_l+0xa68>
 800a9ba:	ee18 3a90 	vmov	r3, s17
 800a9be:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d104      	bne.n	800a9d0 <_strtod_l+0x9e0>
 800a9c6:	ee18 3a10 	vmov	r3, s16
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	f43f ad4c 	beq.w	800a468 <_strtod_l+0x478>
 800a9d0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800ab48 <_strtod_l+0xb58>
 800a9d4:	f04f 38ff 	mov.w	r8, #4294967295
 800a9d8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f001 fb14 	bl	800c008 <_Bfree>
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f001 fb10 	bl	800c008 <_Bfree>
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f001 fb0c 	bl	800c008 <_Bfree>
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f001 fb08 	bl	800c008 <_Bfree>
 800a9f8:	e619      	b.n	800a62e <_strtod_l+0x63e>
 800a9fa:	f1b8 0f00 	cmp.w	r8, #0
 800a9fe:	d112      	bne.n	800aa26 <_strtod_l+0xa36>
 800aa00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa04:	b9b3      	cbnz	r3, 800aa34 <_strtod_l+0xa44>
 800aa06:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800aa0a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa12:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800aa16:	bf58      	it	pl
 800aa18:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800aa1c:	eeb1 7b4d 	vneg.f64	d7, d13
 800aa20:	ec53 2b17 	vmov	r2, r3, d7
 800aa24:	e7aa      	b.n	800a97c <_strtod_l+0x98c>
 800aa26:	f1b8 0f01 	cmp.w	r8, #1
 800aa2a:	d103      	bne.n	800aa34 <_strtod_l+0xa44>
 800aa2c:	f1b9 0f00 	cmp.w	r9, #0
 800aa30:	f43f ad8a 	beq.w	800a548 <_strtod_l+0x558>
 800aa34:	4b47      	ldr	r3, [pc, #284]	; (800ab54 <_strtod_l+0xb64>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	e79e      	b.n	800a978 <_strtod_l+0x988>
 800aa3a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800aa3e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800aa42:	f1ba 0f00 	cmp.w	sl, #0
 800aa46:	d104      	bne.n	800aa52 <_strtod_l+0xa62>
 800aa48:	eeb1 7b4d 	vneg.f64	d7, d13
 800aa4c:	ec53 2b17 	vmov	r2, r3, d7
 800aa50:	e794      	b.n	800a97c <_strtod_l+0x98c>
 800aa52:	eeb0 7b4d 	vmov.f64	d7, d13
 800aa56:	e7f9      	b.n	800aa4c <_strtod_l+0xa5c>
 800aa58:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800aa5c:	9b04      	ldr	r3, [sp, #16]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1ba      	bne.n	800a9d8 <_strtod_l+0x9e8>
 800aa62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa66:	0d1b      	lsrs	r3, r3, #20
 800aa68:	051b      	lsls	r3, r3, #20
 800aa6a:	4299      	cmp	r1, r3
 800aa6c:	d1b4      	bne.n	800a9d8 <_strtod_l+0x9e8>
 800aa6e:	ec51 0b1d 	vmov	r0, r1, d13
 800aa72:	f7f5 fe11 	bl	8000698 <__aeabi_d2lz>
 800aa76:	f7f5 fdc9 	bl	800060c <__aeabi_l2d>
 800aa7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa7e:	ec41 0b17 	vmov	d7, r0, r1
 800aa82:	ea43 0308 	orr.w	r3, r3, r8
 800aa86:	ea53 030a 	orrs.w	r3, r3, sl
 800aa8a:	ee3d db47 	vsub.f64	d13, d13, d7
 800aa8e:	d03c      	beq.n	800ab0a <_strtod_l+0xb1a>
 800aa90:	eeb4 dbca 	vcmpe.f64	d13, d10
 800aa94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa98:	f53f acf0 	bmi.w	800a47c <_strtod_l+0x48c>
 800aa9c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800aaa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa4:	dd98      	ble.n	800a9d8 <_strtod_l+0x9e8>
 800aaa6:	e4e9      	b.n	800a47c <_strtod_l+0x48c>
 800aaa8:	9804      	ldr	r0, [sp, #16]
 800aaaa:	b1f0      	cbz	r0, 800aaea <_strtod_l+0xafa>
 800aaac:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800aab0:	d81b      	bhi.n	800aaea <_strtod_l+0xafa>
 800aab2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ab38 <_strtod_l+0xb48>
 800aab6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800aaba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aabe:	d811      	bhi.n	800aae4 <_strtod_l+0xaf4>
 800aac0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800aac4:	ee1d 3a10 	vmov	r3, s26
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	bf38      	it	cc
 800aacc:	2301      	movcc	r3, #1
 800aace:	ee0d 3a10 	vmov	s26, r3
 800aad2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800aad6:	f1ba 0f00 	cmp.w	sl, #0
 800aada:	d113      	bne.n	800ab04 <_strtod_l+0xb14>
 800aadc:	eeb1 7b4d 	vneg.f64	d7, d13
 800aae0:	ec53 2b17 	vmov	r2, r3, d7
 800aae4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800aae8:	1a43      	subs	r3, r0, r1
 800aaea:	eeb0 0b48 	vmov.f64	d0, d8
 800aaee:	ec43 2b1c 	vmov	d12, r2, r3
 800aaf2:	910a      	str	r1, [sp, #40]	; 0x28
 800aaf4:	f001 fdba 	bl	800c66c <__ulp>
 800aaf8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aafa:	eeac 8b00 	vfma.f64	d8, d12, d0
 800aafe:	ec59 8b18 	vmov	r8, r9, d8
 800ab02:	e7ab      	b.n	800aa5c <_strtod_l+0xa6c>
 800ab04:	eeb0 7b4d 	vmov.f64	d7, d13
 800ab08:	e7ea      	b.n	800aae0 <_strtod_l+0xaf0>
 800ab0a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ab0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab12:	f57f af61 	bpl.w	800a9d8 <_strtod_l+0x9e8>
 800ab16:	e4b1      	b.n	800a47c <_strtod_l+0x48c>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9308      	str	r3, [sp, #32]
 800ab1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	f7ff baad 	b.w	800a080 <_strtod_l+0x90>
 800ab26:	2a65      	cmp	r2, #101	; 0x65
 800ab28:	f43f ab9f 	beq.w	800a26a <_strtod_l+0x27a>
 800ab2c:	2a45      	cmp	r2, #69	; 0x45
 800ab2e:	f43f ab9c 	beq.w	800a26a <_strtod_l+0x27a>
 800ab32:	2101      	movs	r1, #1
 800ab34:	f7ff bbd4 	b.w	800a2e0 <_strtod_l+0x2f0>
 800ab38:	ffc00000 	.word	0xffc00000
 800ab3c:	41dfffff 	.word	0x41dfffff
 800ab40:	000fffff 	.word	0x000fffff
 800ab44:	7ff00000 	.word	0x7ff00000
 800ab48:	7fefffff 	.word	0x7fefffff
 800ab4c:	3ff00000 	.word	0x3ff00000
 800ab50:	7c9fffff 	.word	0x7c9fffff
 800ab54:	bff00000 	.word	0xbff00000
 800ab58:	7fe00000 	.word	0x7fe00000

0800ab5c <_strtod_r>:
 800ab5c:	4b01      	ldr	r3, [pc, #4]	; (800ab64 <_strtod_r+0x8>)
 800ab5e:	f7ff ba47 	b.w	8009ff0 <_strtod_l>
 800ab62:	bf00      	nop
 800ab64:	200001f4 	.word	0x200001f4

0800ab68 <_strtol_l.constprop.0>:
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6e:	d001      	beq.n	800ab74 <_strtol_l.constprop.0+0xc>
 800ab70:	2b24      	cmp	r3, #36	; 0x24
 800ab72:	d906      	bls.n	800ab82 <_strtol_l.constprop.0+0x1a>
 800ab74:	f7fe fa7a 	bl	800906c <__errno>
 800ab78:	2316      	movs	r3, #22
 800ab7a:	6003      	str	r3, [r0, #0]
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac68 <_strtol_l.constprop.0+0x100>
 800ab86:	460d      	mov	r5, r1
 800ab88:	462e      	mov	r6, r5
 800ab8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ab92:	f017 0708 	ands.w	r7, r7, #8
 800ab96:	d1f7      	bne.n	800ab88 <_strtol_l.constprop.0+0x20>
 800ab98:	2c2d      	cmp	r4, #45	; 0x2d
 800ab9a:	d132      	bne.n	800ac02 <_strtol_l.constprop.0+0x9a>
 800ab9c:	782c      	ldrb	r4, [r5, #0]
 800ab9e:	2701      	movs	r7, #1
 800aba0:	1cb5      	adds	r5, r6, #2
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d05b      	beq.n	800ac5e <_strtol_l.constprop.0+0xf6>
 800aba6:	2b10      	cmp	r3, #16
 800aba8:	d109      	bne.n	800abbe <_strtol_l.constprop.0+0x56>
 800abaa:	2c30      	cmp	r4, #48	; 0x30
 800abac:	d107      	bne.n	800abbe <_strtol_l.constprop.0+0x56>
 800abae:	782c      	ldrb	r4, [r5, #0]
 800abb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abb4:	2c58      	cmp	r4, #88	; 0x58
 800abb6:	d14d      	bne.n	800ac54 <_strtol_l.constprop.0+0xec>
 800abb8:	786c      	ldrb	r4, [r5, #1]
 800abba:	2310      	movs	r3, #16
 800abbc:	3502      	adds	r5, #2
 800abbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800abc6:	f04f 0c00 	mov.w	ip, #0
 800abca:	fbb8 f9f3 	udiv	r9, r8, r3
 800abce:	4666      	mov	r6, ip
 800abd0:	fb03 8a19 	mls	sl, r3, r9, r8
 800abd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800abd8:	f1be 0f09 	cmp.w	lr, #9
 800abdc:	d816      	bhi.n	800ac0c <_strtol_l.constprop.0+0xa4>
 800abde:	4674      	mov	r4, lr
 800abe0:	42a3      	cmp	r3, r4
 800abe2:	dd24      	ble.n	800ac2e <_strtol_l.constprop.0+0xc6>
 800abe4:	f1bc 0f00 	cmp.w	ip, #0
 800abe8:	db1e      	blt.n	800ac28 <_strtol_l.constprop.0+0xc0>
 800abea:	45b1      	cmp	r9, r6
 800abec:	d31c      	bcc.n	800ac28 <_strtol_l.constprop.0+0xc0>
 800abee:	d101      	bne.n	800abf4 <_strtol_l.constprop.0+0x8c>
 800abf0:	45a2      	cmp	sl, r4
 800abf2:	db19      	blt.n	800ac28 <_strtol_l.constprop.0+0xc0>
 800abf4:	fb06 4603 	mla	r6, r6, r3, r4
 800abf8:	f04f 0c01 	mov.w	ip, #1
 800abfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac00:	e7e8      	b.n	800abd4 <_strtol_l.constprop.0+0x6c>
 800ac02:	2c2b      	cmp	r4, #43	; 0x2b
 800ac04:	bf04      	itt	eq
 800ac06:	782c      	ldrbeq	r4, [r5, #0]
 800ac08:	1cb5      	addeq	r5, r6, #2
 800ac0a:	e7ca      	b.n	800aba2 <_strtol_l.constprop.0+0x3a>
 800ac0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ac10:	f1be 0f19 	cmp.w	lr, #25
 800ac14:	d801      	bhi.n	800ac1a <_strtol_l.constprop.0+0xb2>
 800ac16:	3c37      	subs	r4, #55	; 0x37
 800ac18:	e7e2      	b.n	800abe0 <_strtol_l.constprop.0+0x78>
 800ac1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ac1e:	f1be 0f19 	cmp.w	lr, #25
 800ac22:	d804      	bhi.n	800ac2e <_strtol_l.constprop.0+0xc6>
 800ac24:	3c57      	subs	r4, #87	; 0x57
 800ac26:	e7db      	b.n	800abe0 <_strtol_l.constprop.0+0x78>
 800ac28:	f04f 3cff 	mov.w	ip, #4294967295
 800ac2c:	e7e6      	b.n	800abfc <_strtol_l.constprop.0+0x94>
 800ac2e:	f1bc 0f00 	cmp.w	ip, #0
 800ac32:	da05      	bge.n	800ac40 <_strtol_l.constprop.0+0xd8>
 800ac34:	2322      	movs	r3, #34	; 0x22
 800ac36:	6003      	str	r3, [r0, #0]
 800ac38:	4646      	mov	r6, r8
 800ac3a:	b942      	cbnz	r2, 800ac4e <_strtol_l.constprop.0+0xe6>
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	e79e      	b.n	800ab7e <_strtol_l.constprop.0+0x16>
 800ac40:	b107      	cbz	r7, 800ac44 <_strtol_l.constprop.0+0xdc>
 800ac42:	4276      	negs	r6, r6
 800ac44:	2a00      	cmp	r2, #0
 800ac46:	d0f9      	beq.n	800ac3c <_strtol_l.constprop.0+0xd4>
 800ac48:	f1bc 0f00 	cmp.w	ip, #0
 800ac4c:	d000      	beq.n	800ac50 <_strtol_l.constprop.0+0xe8>
 800ac4e:	1e69      	subs	r1, r5, #1
 800ac50:	6011      	str	r1, [r2, #0]
 800ac52:	e7f3      	b.n	800ac3c <_strtol_l.constprop.0+0xd4>
 800ac54:	2430      	movs	r4, #48	; 0x30
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1b1      	bne.n	800abbe <_strtol_l.constprop.0+0x56>
 800ac5a:	2308      	movs	r3, #8
 800ac5c:	e7af      	b.n	800abbe <_strtol_l.constprop.0+0x56>
 800ac5e:	2c30      	cmp	r4, #48	; 0x30
 800ac60:	d0a5      	beq.n	800abae <_strtol_l.constprop.0+0x46>
 800ac62:	230a      	movs	r3, #10
 800ac64:	e7ab      	b.n	800abbe <_strtol_l.constprop.0+0x56>
 800ac66:	bf00      	nop
 800ac68:	0800dcd1 	.word	0x0800dcd1

0800ac6c <_strtol_r>:
 800ac6c:	f7ff bf7c 	b.w	800ab68 <_strtol_l.constprop.0>

0800ac70 <quorem>:
 800ac70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	6903      	ldr	r3, [r0, #16]
 800ac76:	690c      	ldr	r4, [r1, #16]
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	4607      	mov	r7, r0
 800ac7c:	f2c0 8081 	blt.w	800ad82 <quorem+0x112>
 800ac80:	3c01      	subs	r4, #1
 800ac82:	f101 0814 	add.w	r8, r1, #20
 800ac86:	f100 0514 	add.w	r5, r0, #20
 800ac8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aca0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aca4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aca8:	d331      	bcc.n	800ad0e <quorem+0x9e>
 800acaa:	f04f 0e00 	mov.w	lr, #0
 800acae:	4640      	mov	r0, r8
 800acb0:	46ac      	mov	ip, r5
 800acb2:	46f2      	mov	sl, lr
 800acb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800acb8:	b293      	uxth	r3, r2
 800acba:	fb06 e303 	mla	r3, r6, r3, lr
 800acbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	ebaa 0303 	sub.w	r3, sl, r3
 800acc8:	f8dc a000 	ldr.w	sl, [ip]
 800accc:	0c12      	lsrs	r2, r2, #16
 800acce:	fa13 f38a 	uxtah	r3, r3, sl
 800acd2:	fb06 e202 	mla	r2, r6, r2, lr
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	9b00      	ldr	r3, [sp, #0]
 800acda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800acde:	b292      	uxth	r2, r2
 800ace0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ace4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ace8:	f8bd 3000 	ldrh.w	r3, [sp]
 800acec:	4581      	cmp	r9, r0
 800acee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acf2:	f84c 3b04 	str.w	r3, [ip], #4
 800acf6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800acfa:	d2db      	bcs.n	800acb4 <quorem+0x44>
 800acfc:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad00:	b92b      	cbnz	r3, 800ad0e <quorem+0x9e>
 800ad02:	9b01      	ldr	r3, [sp, #4]
 800ad04:	3b04      	subs	r3, #4
 800ad06:	429d      	cmp	r5, r3
 800ad08:	461a      	mov	r2, r3
 800ad0a:	d32e      	bcc.n	800ad6a <quorem+0xfa>
 800ad0c:	613c      	str	r4, [r7, #16]
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f001 fc06 	bl	800c520 <__mcmp>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	db24      	blt.n	800ad62 <quorem+0xf2>
 800ad18:	3601      	adds	r6, #1
 800ad1a:	4628      	mov	r0, r5
 800ad1c:	f04f 0c00 	mov.w	ip, #0
 800ad20:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad24:	f8d0 e000 	ldr.w	lr, [r0]
 800ad28:	b293      	uxth	r3, r2
 800ad2a:	ebac 0303 	sub.w	r3, ip, r3
 800ad2e:	0c12      	lsrs	r2, r2, #16
 800ad30:	fa13 f38e 	uxtah	r3, r3, lr
 800ad34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad42:	45c1      	cmp	r9, r8
 800ad44:	f840 3b04 	str.w	r3, [r0], #4
 800ad48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ad4c:	d2e8      	bcs.n	800ad20 <quorem+0xb0>
 800ad4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad56:	b922      	cbnz	r2, 800ad62 <quorem+0xf2>
 800ad58:	3b04      	subs	r3, #4
 800ad5a:	429d      	cmp	r5, r3
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	d30a      	bcc.n	800ad76 <quorem+0x106>
 800ad60:	613c      	str	r4, [r7, #16]
 800ad62:	4630      	mov	r0, r6
 800ad64:	b003      	add	sp, #12
 800ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6a:	6812      	ldr	r2, [r2, #0]
 800ad6c:	3b04      	subs	r3, #4
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	d1cc      	bne.n	800ad0c <quorem+0x9c>
 800ad72:	3c01      	subs	r4, #1
 800ad74:	e7c7      	b.n	800ad06 <quorem+0x96>
 800ad76:	6812      	ldr	r2, [r2, #0]
 800ad78:	3b04      	subs	r3, #4
 800ad7a:	2a00      	cmp	r2, #0
 800ad7c:	d1f0      	bne.n	800ad60 <quorem+0xf0>
 800ad7e:	3c01      	subs	r4, #1
 800ad80:	e7eb      	b.n	800ad5a <quorem+0xea>
 800ad82:	2000      	movs	r0, #0
 800ad84:	e7ee      	b.n	800ad64 <quorem+0xf4>
	...

0800ad88 <_dtoa_r>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	ed2d 8b02 	vpush	{d8}
 800ad90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad92:	b091      	sub	sp, #68	; 0x44
 800ad94:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ad98:	ec59 8b10 	vmov	r8, r9, d0
 800ad9c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ad9e:	9106      	str	r1, [sp, #24]
 800ada0:	4606      	mov	r6, r0
 800ada2:	9208      	str	r2, [sp, #32]
 800ada4:	930c      	str	r3, [sp, #48]	; 0x30
 800ada6:	b975      	cbnz	r5, 800adc6 <_dtoa_r+0x3e>
 800ada8:	2010      	movs	r0, #16
 800adaa:	f7fe f989 	bl	80090c0 <malloc>
 800adae:	4602      	mov	r2, r0
 800adb0:	6270      	str	r0, [r6, #36]	; 0x24
 800adb2:	b920      	cbnz	r0, 800adbe <_dtoa_r+0x36>
 800adb4:	4baa      	ldr	r3, [pc, #680]	; (800b060 <_dtoa_r+0x2d8>)
 800adb6:	21ea      	movs	r1, #234	; 0xea
 800adb8:	48aa      	ldr	r0, [pc, #680]	; (800b064 <_dtoa_r+0x2dc>)
 800adba:	f001 ff3f 	bl	800cc3c <__assert_func>
 800adbe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800adc2:	6005      	str	r5, [r0, #0]
 800adc4:	60c5      	str	r5, [r0, #12]
 800adc6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800adc8:	6819      	ldr	r1, [r3, #0]
 800adca:	b151      	cbz	r1, 800ade2 <_dtoa_r+0x5a>
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	604a      	str	r2, [r1, #4]
 800add0:	2301      	movs	r3, #1
 800add2:	4093      	lsls	r3, r2
 800add4:	608b      	str	r3, [r1, #8]
 800add6:	4630      	mov	r0, r6
 800add8:	f001 f916 	bl	800c008 <_Bfree>
 800addc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800adde:	2200      	movs	r2, #0
 800ade0:	601a      	str	r2, [r3, #0]
 800ade2:	f1b9 0300 	subs.w	r3, r9, #0
 800ade6:	bfbb      	ittet	lt
 800ade8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800adec:	9303      	strlt	r3, [sp, #12]
 800adee:	2300      	movge	r3, #0
 800adf0:	2201      	movlt	r2, #1
 800adf2:	bfac      	ite	ge
 800adf4:	6023      	strge	r3, [r4, #0]
 800adf6:	6022      	strlt	r2, [r4, #0]
 800adf8:	4b9b      	ldr	r3, [pc, #620]	; (800b068 <_dtoa_r+0x2e0>)
 800adfa:	9c03      	ldr	r4, [sp, #12]
 800adfc:	43a3      	bics	r3, r4
 800adfe:	d11c      	bne.n	800ae3a <_dtoa_r+0xb2>
 800ae00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae02:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae06:	6013      	str	r3, [r2, #0]
 800ae08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ae0c:	ea53 0308 	orrs.w	r3, r3, r8
 800ae10:	f000 84fd 	beq.w	800b80e <_dtoa_r+0xa86>
 800ae14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae16:	b963      	cbnz	r3, 800ae32 <_dtoa_r+0xaa>
 800ae18:	4b94      	ldr	r3, [pc, #592]	; (800b06c <_dtoa_r+0x2e4>)
 800ae1a:	e01f      	b.n	800ae5c <_dtoa_r+0xd4>
 800ae1c:	4b94      	ldr	r3, [pc, #592]	; (800b070 <_dtoa_r+0x2e8>)
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	3308      	adds	r3, #8
 800ae22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ae24:	6013      	str	r3, [r2, #0]
 800ae26:	9801      	ldr	r0, [sp, #4]
 800ae28:	b011      	add	sp, #68	; 0x44
 800ae2a:	ecbd 8b02 	vpop	{d8}
 800ae2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae32:	4b8e      	ldr	r3, [pc, #568]	; (800b06c <_dtoa_r+0x2e4>)
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	3303      	adds	r3, #3
 800ae38:	e7f3      	b.n	800ae22 <_dtoa_r+0x9a>
 800ae3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ae3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ae42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae46:	d10b      	bne.n	800ae60 <_dtoa_r+0xd8>
 800ae48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	6013      	str	r3, [r2, #0]
 800ae4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 84d9 	beq.w	800b808 <_dtoa_r+0xa80>
 800ae56:	4887      	ldr	r0, [pc, #540]	; (800b074 <_dtoa_r+0x2ec>)
 800ae58:	6018      	str	r0, [r3, #0]
 800ae5a:	1e43      	subs	r3, r0, #1
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	e7e2      	b.n	800ae26 <_dtoa_r+0x9e>
 800ae60:	a90f      	add	r1, sp, #60	; 0x3c
 800ae62:	aa0e      	add	r2, sp, #56	; 0x38
 800ae64:	4630      	mov	r0, r6
 800ae66:	eeb0 0b48 	vmov.f64	d0, d8
 800ae6a:	f001 fc7b 	bl	800c764 <__d2b>
 800ae6e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ae72:	4605      	mov	r5, r0
 800ae74:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ae76:	2900      	cmp	r1, #0
 800ae78:	d046      	beq.n	800af08 <_dtoa_r+0x180>
 800ae7a:	ee18 4a90 	vmov	r4, s17
 800ae7e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ae82:	ec53 2b18 	vmov	r2, r3, d8
 800ae86:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ae8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ae92:	2400      	movs	r4, #0
 800ae94:	ec43 2b16 	vmov	d6, r2, r3
 800ae98:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ae9c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b048 <_dtoa_r+0x2c0>
 800aea0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aea4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800b050 <_dtoa_r+0x2c8>
 800aea8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aeac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b058 <_dtoa_r+0x2d0>
 800aeb0:	ee07 1a90 	vmov	s15, r1
 800aeb4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800aeb8:	eeb0 7b46 	vmov.f64	d7, d6
 800aebc:	eea4 7b05 	vfma.f64	d7, d4, d5
 800aec0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800aec4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800aec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aecc:	ee16 ba90 	vmov	fp, s13
 800aed0:	940a      	str	r4, [sp, #40]	; 0x28
 800aed2:	d508      	bpl.n	800aee6 <_dtoa_r+0x15e>
 800aed4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aed8:	eeb4 6b47 	vcmp.f64	d6, d7
 800aedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee0:	bf18      	it	ne
 800aee2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800aee6:	f1bb 0f16 	cmp.w	fp, #22
 800aeea:	d82f      	bhi.n	800af4c <_dtoa_r+0x1c4>
 800aeec:	4b62      	ldr	r3, [pc, #392]	; (800b078 <_dtoa_r+0x2f0>)
 800aeee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aef2:	ed93 7b00 	vldr	d7, [r3]
 800aef6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aefe:	d501      	bpl.n	800af04 <_dtoa_r+0x17c>
 800af00:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af04:	2300      	movs	r3, #0
 800af06:	e022      	b.n	800af4e <_dtoa_r+0x1c6>
 800af08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af0a:	4401      	add	r1, r0
 800af0c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800af10:	2b20      	cmp	r3, #32
 800af12:	bfc1      	itttt	gt
 800af14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af18:	fa04 f303 	lslgt.w	r3, r4, r3
 800af1c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800af20:	fa28 f804 	lsrgt.w	r8, r8, r4
 800af24:	bfd6      	itet	le
 800af26:	f1c3 0320 	rsble	r3, r3, #32
 800af2a:	ea43 0808 	orrgt.w	r8, r3, r8
 800af2e:	fa08 f803 	lslle.w	r8, r8, r3
 800af32:	ee07 8a90 	vmov	s15, r8
 800af36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800af3a:	3901      	subs	r1, #1
 800af3c:	ee17 4a90 	vmov	r4, s15
 800af40:	ec53 2b17 	vmov	r2, r3, d7
 800af44:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800af48:	2401      	movs	r4, #1
 800af4a:	e7a3      	b.n	800ae94 <_dtoa_r+0x10c>
 800af4c:	2301      	movs	r3, #1
 800af4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af50:	1a43      	subs	r3, r0, r1
 800af52:	1e5a      	subs	r2, r3, #1
 800af54:	bf45      	ittet	mi
 800af56:	f1c3 0301 	rsbmi	r3, r3, #1
 800af5a:	9304      	strmi	r3, [sp, #16]
 800af5c:	2300      	movpl	r3, #0
 800af5e:	2300      	movmi	r3, #0
 800af60:	9205      	str	r2, [sp, #20]
 800af62:	bf54      	ite	pl
 800af64:	9304      	strpl	r3, [sp, #16]
 800af66:	9305      	strmi	r3, [sp, #20]
 800af68:	f1bb 0f00 	cmp.w	fp, #0
 800af6c:	db18      	blt.n	800afa0 <_dtoa_r+0x218>
 800af6e:	9b05      	ldr	r3, [sp, #20]
 800af70:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800af74:	445b      	add	r3, fp
 800af76:	9305      	str	r3, [sp, #20]
 800af78:	2300      	movs	r3, #0
 800af7a:	9a06      	ldr	r2, [sp, #24]
 800af7c:	2a09      	cmp	r2, #9
 800af7e:	d849      	bhi.n	800b014 <_dtoa_r+0x28c>
 800af80:	2a05      	cmp	r2, #5
 800af82:	bfc4      	itt	gt
 800af84:	3a04      	subgt	r2, #4
 800af86:	9206      	strgt	r2, [sp, #24]
 800af88:	9a06      	ldr	r2, [sp, #24]
 800af8a:	f1a2 0202 	sub.w	r2, r2, #2
 800af8e:	bfcc      	ite	gt
 800af90:	2400      	movgt	r4, #0
 800af92:	2401      	movle	r4, #1
 800af94:	2a03      	cmp	r2, #3
 800af96:	d848      	bhi.n	800b02a <_dtoa_r+0x2a2>
 800af98:	e8df f002 	tbb	[pc, r2]
 800af9c:	3a2c2e0b 	.word	0x3a2c2e0b
 800afa0:	9b04      	ldr	r3, [sp, #16]
 800afa2:	2200      	movs	r2, #0
 800afa4:	eba3 030b 	sub.w	r3, r3, fp
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	9209      	str	r2, [sp, #36]	; 0x24
 800afac:	f1cb 0300 	rsb	r3, fp, #0
 800afb0:	e7e3      	b.n	800af7a <_dtoa_r+0x1f2>
 800afb2:	2200      	movs	r2, #0
 800afb4:	9207      	str	r2, [sp, #28]
 800afb6:	9a08      	ldr	r2, [sp, #32]
 800afb8:	2a00      	cmp	r2, #0
 800afba:	dc39      	bgt.n	800b030 <_dtoa_r+0x2a8>
 800afbc:	f04f 0a01 	mov.w	sl, #1
 800afc0:	46d1      	mov	r9, sl
 800afc2:	4652      	mov	r2, sl
 800afc4:	f8cd a020 	str.w	sl, [sp, #32]
 800afc8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800afca:	2100      	movs	r1, #0
 800afcc:	6079      	str	r1, [r7, #4]
 800afce:	2004      	movs	r0, #4
 800afd0:	f100 0c14 	add.w	ip, r0, #20
 800afd4:	4594      	cmp	ip, r2
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	d92f      	bls.n	800b03a <_dtoa_r+0x2b2>
 800afda:	4630      	mov	r0, r6
 800afdc:	930d      	str	r3, [sp, #52]	; 0x34
 800afde:	f000 ffd3 	bl	800bf88 <_Balloc>
 800afe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afe4:	9001      	str	r0, [sp, #4]
 800afe6:	4602      	mov	r2, r0
 800afe8:	2800      	cmp	r0, #0
 800afea:	d149      	bne.n	800b080 <_dtoa_r+0x2f8>
 800afec:	4b23      	ldr	r3, [pc, #140]	; (800b07c <_dtoa_r+0x2f4>)
 800afee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aff2:	e6e1      	b.n	800adb8 <_dtoa_r+0x30>
 800aff4:	2201      	movs	r2, #1
 800aff6:	e7dd      	b.n	800afb4 <_dtoa_r+0x22c>
 800aff8:	2200      	movs	r2, #0
 800affa:	9207      	str	r2, [sp, #28]
 800affc:	9a08      	ldr	r2, [sp, #32]
 800affe:	eb0b 0a02 	add.w	sl, fp, r2
 800b002:	f10a 0901 	add.w	r9, sl, #1
 800b006:	464a      	mov	r2, r9
 800b008:	2a01      	cmp	r2, #1
 800b00a:	bfb8      	it	lt
 800b00c:	2201      	movlt	r2, #1
 800b00e:	e7db      	b.n	800afc8 <_dtoa_r+0x240>
 800b010:	2201      	movs	r2, #1
 800b012:	e7f2      	b.n	800affa <_dtoa_r+0x272>
 800b014:	2401      	movs	r4, #1
 800b016:	2200      	movs	r2, #0
 800b018:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b01c:	f04f 3aff 	mov.w	sl, #4294967295
 800b020:	2100      	movs	r1, #0
 800b022:	46d1      	mov	r9, sl
 800b024:	2212      	movs	r2, #18
 800b026:	9108      	str	r1, [sp, #32]
 800b028:	e7ce      	b.n	800afc8 <_dtoa_r+0x240>
 800b02a:	2201      	movs	r2, #1
 800b02c:	9207      	str	r2, [sp, #28]
 800b02e:	e7f5      	b.n	800b01c <_dtoa_r+0x294>
 800b030:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b034:	46d1      	mov	r9, sl
 800b036:	4652      	mov	r2, sl
 800b038:	e7c6      	b.n	800afc8 <_dtoa_r+0x240>
 800b03a:	3101      	adds	r1, #1
 800b03c:	6079      	str	r1, [r7, #4]
 800b03e:	0040      	lsls	r0, r0, #1
 800b040:	e7c6      	b.n	800afd0 <_dtoa_r+0x248>
 800b042:	bf00      	nop
 800b044:	f3af 8000 	nop.w
 800b048:	636f4361 	.word	0x636f4361
 800b04c:	3fd287a7 	.word	0x3fd287a7
 800b050:	8b60c8b3 	.word	0x8b60c8b3
 800b054:	3fc68a28 	.word	0x3fc68a28
 800b058:	509f79fb 	.word	0x509f79fb
 800b05c:	3fd34413 	.word	0x3fd34413
 800b060:	0800ddde 	.word	0x0800ddde
 800b064:	0800ddf5 	.word	0x0800ddf5
 800b068:	7ff00000 	.word	0x7ff00000
 800b06c:	0800ddda 	.word	0x0800ddda
 800b070:	0800ddd1 	.word	0x0800ddd1
 800b074:	0800dc51 	.word	0x0800dc51
 800b078:	0800dfc8 	.word	0x0800dfc8
 800b07c:	0800de73 	.word	0x0800de73
 800b080:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b082:	9901      	ldr	r1, [sp, #4]
 800b084:	6011      	str	r1, [r2, #0]
 800b086:	f1b9 0f0e 	cmp.w	r9, #14
 800b08a:	d86c      	bhi.n	800b166 <_dtoa_r+0x3de>
 800b08c:	2c00      	cmp	r4, #0
 800b08e:	d06a      	beq.n	800b166 <_dtoa_r+0x3de>
 800b090:	f1bb 0f00 	cmp.w	fp, #0
 800b094:	f340 80a0 	ble.w	800b1d8 <_dtoa_r+0x450>
 800b098:	49c1      	ldr	r1, [pc, #772]	; (800b3a0 <_dtoa_r+0x618>)
 800b09a:	f00b 020f 	and.w	r2, fp, #15
 800b09e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b0a2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b0a6:	ed92 7b00 	vldr	d7, [r2]
 800b0aa:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b0ae:	f000 8087 	beq.w	800b1c0 <_dtoa_r+0x438>
 800b0b2:	4abc      	ldr	r2, [pc, #752]	; (800b3a4 <_dtoa_r+0x61c>)
 800b0b4:	ed92 6b08 	vldr	d6, [r2, #32]
 800b0b8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b0bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b0c0:	f001 010f 	and.w	r1, r1, #15
 800b0c4:	2203      	movs	r2, #3
 800b0c6:	48b7      	ldr	r0, [pc, #732]	; (800b3a4 <_dtoa_r+0x61c>)
 800b0c8:	2900      	cmp	r1, #0
 800b0ca:	d17b      	bne.n	800b1c4 <_dtoa_r+0x43c>
 800b0cc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b0d0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b0d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b0d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0da:	2900      	cmp	r1, #0
 800b0dc:	f000 80a2 	beq.w	800b224 <_dtoa_r+0x49c>
 800b0e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b0e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f0:	f140 8098 	bpl.w	800b224 <_dtoa_r+0x49c>
 800b0f4:	f1b9 0f00 	cmp.w	r9, #0
 800b0f8:	f000 8094 	beq.w	800b224 <_dtoa_r+0x49c>
 800b0fc:	f1ba 0f00 	cmp.w	sl, #0
 800b100:	dd2f      	ble.n	800b162 <_dtoa_r+0x3da>
 800b102:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b106:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b10a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b10e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b112:	3201      	adds	r2, #1
 800b114:	4650      	mov	r0, sl
 800b116:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b11a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b11e:	ee07 2a90 	vmov	s15, r2
 800b122:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b126:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b12a:	ee15 4a90 	vmov	r4, s11
 800b12e:	ec52 1b15 	vmov	r1, r2, d5
 800b132:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b136:	2800      	cmp	r0, #0
 800b138:	d177      	bne.n	800b22a <_dtoa_r+0x4a2>
 800b13a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b13e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b142:	ec42 1b17 	vmov	d7, r1, r2
 800b146:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14e:	f300 8263 	bgt.w	800b618 <_dtoa_r+0x890>
 800b152:	eeb1 7b47 	vneg.f64	d7, d7
 800b156:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15e:	f100 8258 	bmi.w	800b612 <_dtoa_r+0x88a>
 800b162:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b168:	2a00      	cmp	r2, #0
 800b16a:	f2c0 811d 	blt.w	800b3a8 <_dtoa_r+0x620>
 800b16e:	f1bb 0f0e 	cmp.w	fp, #14
 800b172:	f300 8119 	bgt.w	800b3a8 <_dtoa_r+0x620>
 800b176:	4b8a      	ldr	r3, [pc, #552]	; (800b3a0 <_dtoa_r+0x618>)
 800b178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b17c:	ed93 6b00 	vldr	d6, [r3]
 800b180:	9b08      	ldr	r3, [sp, #32]
 800b182:	2b00      	cmp	r3, #0
 800b184:	f280 80b7 	bge.w	800b2f6 <_dtoa_r+0x56e>
 800b188:	f1b9 0f00 	cmp.w	r9, #0
 800b18c:	f300 80b3 	bgt.w	800b2f6 <_dtoa_r+0x56e>
 800b190:	f040 823f 	bne.w	800b612 <_dtoa_r+0x88a>
 800b194:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b198:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b19c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a8:	464c      	mov	r4, r9
 800b1aa:	464f      	mov	r7, r9
 800b1ac:	f280 8215 	bge.w	800b5da <_dtoa_r+0x852>
 800b1b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b1b4:	2331      	movs	r3, #49	; 0x31
 800b1b6:	f808 3b01 	strb.w	r3, [r8], #1
 800b1ba:	f10b 0b01 	add.w	fp, fp, #1
 800b1be:	e211      	b.n	800b5e4 <_dtoa_r+0x85c>
 800b1c0:	2202      	movs	r2, #2
 800b1c2:	e780      	b.n	800b0c6 <_dtoa_r+0x33e>
 800b1c4:	07cc      	lsls	r4, r1, #31
 800b1c6:	d504      	bpl.n	800b1d2 <_dtoa_r+0x44a>
 800b1c8:	ed90 6b00 	vldr	d6, [r0]
 800b1cc:	3201      	adds	r2, #1
 800b1ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b1d2:	1049      	asrs	r1, r1, #1
 800b1d4:	3008      	adds	r0, #8
 800b1d6:	e777      	b.n	800b0c8 <_dtoa_r+0x340>
 800b1d8:	d022      	beq.n	800b220 <_dtoa_r+0x498>
 800b1da:	f1cb 0100 	rsb	r1, fp, #0
 800b1de:	4a70      	ldr	r2, [pc, #448]	; (800b3a0 <_dtoa_r+0x618>)
 800b1e0:	f001 000f 	and.w	r0, r1, #15
 800b1e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b1e8:	ed92 7b00 	vldr	d7, [r2]
 800b1ec:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b1f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1f4:	486b      	ldr	r0, [pc, #428]	; (800b3a4 <_dtoa_r+0x61c>)
 800b1f6:	1109      	asrs	r1, r1, #4
 800b1f8:	2400      	movs	r4, #0
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	b929      	cbnz	r1, 800b20a <_dtoa_r+0x482>
 800b1fe:	2c00      	cmp	r4, #0
 800b200:	f43f af6a 	beq.w	800b0d8 <_dtoa_r+0x350>
 800b204:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b208:	e766      	b.n	800b0d8 <_dtoa_r+0x350>
 800b20a:	07cf      	lsls	r7, r1, #31
 800b20c:	d505      	bpl.n	800b21a <_dtoa_r+0x492>
 800b20e:	ed90 6b00 	vldr	d6, [r0]
 800b212:	3201      	adds	r2, #1
 800b214:	2401      	movs	r4, #1
 800b216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b21a:	1049      	asrs	r1, r1, #1
 800b21c:	3008      	adds	r0, #8
 800b21e:	e7ed      	b.n	800b1fc <_dtoa_r+0x474>
 800b220:	2202      	movs	r2, #2
 800b222:	e759      	b.n	800b0d8 <_dtoa_r+0x350>
 800b224:	465f      	mov	r7, fp
 800b226:	4648      	mov	r0, r9
 800b228:	e775      	b.n	800b116 <_dtoa_r+0x38e>
 800b22a:	ec42 1b17 	vmov	d7, r1, r2
 800b22e:	4a5c      	ldr	r2, [pc, #368]	; (800b3a0 <_dtoa_r+0x618>)
 800b230:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b234:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b238:	9a01      	ldr	r2, [sp, #4]
 800b23a:	1814      	adds	r4, r2, r0
 800b23c:	9a07      	ldr	r2, [sp, #28]
 800b23e:	b352      	cbz	r2, 800b296 <_dtoa_r+0x50e>
 800b240:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b244:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b248:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b24c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b250:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b254:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b258:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b25c:	ee14 2a90 	vmov	r2, s9
 800b260:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b264:	3230      	adds	r2, #48	; 0x30
 800b266:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b26a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b272:	f808 2b01 	strb.w	r2, [r8], #1
 800b276:	d439      	bmi.n	800b2ec <_dtoa_r+0x564>
 800b278:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b27c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b284:	d472      	bmi.n	800b36c <_dtoa_r+0x5e4>
 800b286:	45a0      	cmp	r8, r4
 800b288:	f43f af6b 	beq.w	800b162 <_dtoa_r+0x3da>
 800b28c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b290:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b294:	e7e0      	b.n	800b258 <_dtoa_r+0x4d0>
 800b296:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b29a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b29e:	4621      	mov	r1, r4
 800b2a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b2a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b2a8:	ee14 2a90 	vmov	r2, s9
 800b2ac:	3230      	adds	r2, #48	; 0x30
 800b2ae:	f808 2b01 	strb.w	r2, [r8], #1
 800b2b2:	45a0      	cmp	r8, r4
 800b2b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b2b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b2bc:	d118      	bne.n	800b2f0 <_dtoa_r+0x568>
 800b2be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b2c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b2c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ce:	dc4d      	bgt.n	800b36c <_dtoa_r+0x5e4>
 800b2d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b2d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2dc:	f57f af41 	bpl.w	800b162 <_dtoa_r+0x3da>
 800b2e0:	4688      	mov	r8, r1
 800b2e2:	3901      	subs	r1, #1
 800b2e4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b2e8:	2b30      	cmp	r3, #48	; 0x30
 800b2ea:	d0f9      	beq.n	800b2e0 <_dtoa_r+0x558>
 800b2ec:	46bb      	mov	fp, r7
 800b2ee:	e02a      	b.n	800b346 <_dtoa_r+0x5be>
 800b2f0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b2f4:	e7d6      	b.n	800b2a4 <_dtoa_r+0x51c>
 800b2f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2fa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b2fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b302:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b306:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b30a:	ee15 3a10 	vmov	r3, s10
 800b30e:	3330      	adds	r3, #48	; 0x30
 800b310:	f808 3b01 	strb.w	r3, [r8], #1
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	eba8 0303 	sub.w	r3, r8, r3
 800b31a:	4599      	cmp	r9, r3
 800b31c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b320:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b324:	d133      	bne.n	800b38e <_dtoa_r+0x606>
 800b326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b32a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b332:	dc1a      	bgt.n	800b36a <_dtoa_r+0x5e2>
 800b334:	eeb4 7b46 	vcmp.f64	d7, d6
 800b338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33c:	d103      	bne.n	800b346 <_dtoa_r+0x5be>
 800b33e:	ee15 3a10 	vmov	r3, s10
 800b342:	07d9      	lsls	r1, r3, #31
 800b344:	d411      	bmi.n	800b36a <_dtoa_r+0x5e2>
 800b346:	4629      	mov	r1, r5
 800b348:	4630      	mov	r0, r6
 800b34a:	f000 fe5d 	bl	800c008 <_Bfree>
 800b34e:	2300      	movs	r3, #0
 800b350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b352:	f888 3000 	strb.w	r3, [r8]
 800b356:	f10b 0301 	add.w	r3, fp, #1
 800b35a:	6013      	str	r3, [r2, #0]
 800b35c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f43f ad61 	beq.w	800ae26 <_dtoa_r+0x9e>
 800b364:	f8c3 8000 	str.w	r8, [r3]
 800b368:	e55d      	b.n	800ae26 <_dtoa_r+0x9e>
 800b36a:	465f      	mov	r7, fp
 800b36c:	4643      	mov	r3, r8
 800b36e:	4698      	mov	r8, r3
 800b370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b374:	2a39      	cmp	r2, #57	; 0x39
 800b376:	d106      	bne.n	800b386 <_dtoa_r+0x5fe>
 800b378:	9a01      	ldr	r2, [sp, #4]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d1f7      	bne.n	800b36e <_dtoa_r+0x5e6>
 800b37e:	9901      	ldr	r1, [sp, #4]
 800b380:	2230      	movs	r2, #48	; 0x30
 800b382:	3701      	adds	r7, #1
 800b384:	700a      	strb	r2, [r1, #0]
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	3201      	adds	r2, #1
 800b38a:	701a      	strb	r2, [r3, #0]
 800b38c:	e7ae      	b.n	800b2ec <_dtoa_r+0x564>
 800b38e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b392:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39a:	d1b2      	bne.n	800b302 <_dtoa_r+0x57a>
 800b39c:	e7d3      	b.n	800b346 <_dtoa_r+0x5be>
 800b39e:	bf00      	nop
 800b3a0:	0800dfc8 	.word	0x0800dfc8
 800b3a4:	0800dfa0 	.word	0x0800dfa0
 800b3a8:	9907      	ldr	r1, [sp, #28]
 800b3aa:	2900      	cmp	r1, #0
 800b3ac:	f000 80d0 	beq.w	800b550 <_dtoa_r+0x7c8>
 800b3b0:	9906      	ldr	r1, [sp, #24]
 800b3b2:	2901      	cmp	r1, #1
 800b3b4:	f300 80b4 	bgt.w	800b520 <_dtoa_r+0x798>
 800b3b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3ba:	2900      	cmp	r1, #0
 800b3bc:	f000 80ac 	beq.w	800b518 <_dtoa_r+0x790>
 800b3c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b3c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b3c8:	461c      	mov	r4, r3
 800b3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	9304      	str	r3, [sp, #16]
 800b3d2:	9b05      	ldr	r3, [sp, #20]
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	4413      	add	r3, r2
 800b3d8:	4630      	mov	r0, r6
 800b3da:	9305      	str	r3, [sp, #20]
 800b3dc:	f000 ff16 	bl	800c20c <__i2b>
 800b3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	f1b8 0f00 	cmp.w	r8, #0
 800b3e8:	dd0d      	ble.n	800b406 <_dtoa_r+0x67e>
 800b3ea:	9a05      	ldr	r2, [sp, #20]
 800b3ec:	2a00      	cmp	r2, #0
 800b3ee:	dd0a      	ble.n	800b406 <_dtoa_r+0x67e>
 800b3f0:	4542      	cmp	r2, r8
 800b3f2:	9904      	ldr	r1, [sp, #16]
 800b3f4:	bfa8      	it	ge
 800b3f6:	4642      	movge	r2, r8
 800b3f8:	1a89      	subs	r1, r1, r2
 800b3fa:	9104      	str	r1, [sp, #16]
 800b3fc:	9905      	ldr	r1, [sp, #20]
 800b3fe:	eba8 0802 	sub.w	r8, r8, r2
 800b402:	1a8a      	subs	r2, r1, r2
 800b404:	9205      	str	r2, [sp, #20]
 800b406:	b303      	cbz	r3, 800b44a <_dtoa_r+0x6c2>
 800b408:	9a07      	ldr	r2, [sp, #28]
 800b40a:	2a00      	cmp	r2, #0
 800b40c:	f000 80a5 	beq.w	800b55a <_dtoa_r+0x7d2>
 800b410:	2c00      	cmp	r4, #0
 800b412:	dd13      	ble.n	800b43c <_dtoa_r+0x6b4>
 800b414:	4639      	mov	r1, r7
 800b416:	4622      	mov	r2, r4
 800b418:	4630      	mov	r0, r6
 800b41a:	930d      	str	r3, [sp, #52]	; 0x34
 800b41c:	f000 ffb6 	bl	800c38c <__pow5mult>
 800b420:	462a      	mov	r2, r5
 800b422:	4601      	mov	r1, r0
 800b424:	4607      	mov	r7, r0
 800b426:	4630      	mov	r0, r6
 800b428:	f000 ff06 	bl	800c238 <__multiply>
 800b42c:	4629      	mov	r1, r5
 800b42e:	900a      	str	r0, [sp, #40]	; 0x28
 800b430:	4630      	mov	r0, r6
 800b432:	f000 fde9 	bl	800c008 <_Bfree>
 800b436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b43a:	4615      	mov	r5, r2
 800b43c:	1b1a      	subs	r2, r3, r4
 800b43e:	d004      	beq.n	800b44a <_dtoa_r+0x6c2>
 800b440:	4629      	mov	r1, r5
 800b442:	4630      	mov	r0, r6
 800b444:	f000 ffa2 	bl	800c38c <__pow5mult>
 800b448:	4605      	mov	r5, r0
 800b44a:	2101      	movs	r1, #1
 800b44c:	4630      	mov	r0, r6
 800b44e:	f000 fedd 	bl	800c20c <__i2b>
 800b452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b454:	2b00      	cmp	r3, #0
 800b456:	4604      	mov	r4, r0
 800b458:	f340 8081 	ble.w	800b55e <_dtoa_r+0x7d6>
 800b45c:	461a      	mov	r2, r3
 800b45e:	4601      	mov	r1, r0
 800b460:	4630      	mov	r0, r6
 800b462:	f000 ff93 	bl	800c38c <__pow5mult>
 800b466:	9b06      	ldr	r3, [sp, #24]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	4604      	mov	r4, r0
 800b46c:	dd7a      	ble.n	800b564 <_dtoa_r+0x7dc>
 800b46e:	2300      	movs	r3, #0
 800b470:	930a      	str	r3, [sp, #40]	; 0x28
 800b472:	6922      	ldr	r2, [r4, #16]
 800b474:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b478:	6910      	ldr	r0, [r2, #16]
 800b47a:	f000 fe77 	bl	800c16c <__hi0bits>
 800b47e:	f1c0 0020 	rsb	r0, r0, #32
 800b482:	9b05      	ldr	r3, [sp, #20]
 800b484:	4418      	add	r0, r3
 800b486:	f010 001f 	ands.w	r0, r0, #31
 800b48a:	f000 808c 	beq.w	800b5a6 <_dtoa_r+0x81e>
 800b48e:	f1c0 0220 	rsb	r2, r0, #32
 800b492:	2a04      	cmp	r2, #4
 800b494:	f340 8085 	ble.w	800b5a2 <_dtoa_r+0x81a>
 800b498:	f1c0 001c 	rsb	r0, r0, #28
 800b49c:	9b04      	ldr	r3, [sp, #16]
 800b49e:	4403      	add	r3, r0
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	9b05      	ldr	r3, [sp, #20]
 800b4a4:	4403      	add	r3, r0
 800b4a6:	4480      	add	r8, r0
 800b4a8:	9305      	str	r3, [sp, #20]
 800b4aa:	9b04      	ldr	r3, [sp, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	dd05      	ble.n	800b4bc <_dtoa_r+0x734>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f000 ffc3 	bl	800c440 <__lshift>
 800b4ba:	4605      	mov	r5, r0
 800b4bc:	9b05      	ldr	r3, [sp, #20]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	dd05      	ble.n	800b4ce <_dtoa_r+0x746>
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f000 ffba 	bl	800c440 <__lshift>
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d06a      	beq.n	800b5aa <_dtoa_r+0x822>
 800b4d4:	4621      	mov	r1, r4
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f001 f822 	bl	800c520 <__mcmp>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	da64      	bge.n	800b5aa <_dtoa_r+0x822>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	220a      	movs	r2, #10
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	f000 fdb0 	bl	800c04c <__multadd>
 800b4ec:	9b07      	ldr	r3, [sp, #28]
 800b4ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 8191 	beq.w	800b81c <_dtoa_r+0xa94>
 800b4fa:	4639      	mov	r1, r7
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	220a      	movs	r2, #10
 800b500:	4630      	mov	r0, r6
 800b502:	f000 fda3 	bl	800c04c <__multadd>
 800b506:	f1ba 0f00 	cmp.w	sl, #0
 800b50a:	4607      	mov	r7, r0
 800b50c:	f300 808d 	bgt.w	800b62a <_dtoa_r+0x8a2>
 800b510:	9b06      	ldr	r3, [sp, #24]
 800b512:	2b02      	cmp	r3, #2
 800b514:	dc50      	bgt.n	800b5b8 <_dtoa_r+0x830>
 800b516:	e088      	b.n	800b62a <_dtoa_r+0x8a2>
 800b518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b51a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b51e:	e751      	b.n	800b3c4 <_dtoa_r+0x63c>
 800b520:	f109 34ff 	add.w	r4, r9, #4294967295
 800b524:	42a3      	cmp	r3, r4
 800b526:	bfbf      	itttt	lt
 800b528:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800b52a:	1ae3      	sublt	r3, r4, r3
 800b52c:	18d2      	addlt	r2, r2, r3
 800b52e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800b530:	bfb6      	itet	lt
 800b532:	4623      	movlt	r3, r4
 800b534:	1b1c      	subge	r4, r3, r4
 800b536:	2400      	movlt	r4, #0
 800b538:	f1b9 0f00 	cmp.w	r9, #0
 800b53c:	bfb5      	itete	lt
 800b53e:	9a04      	ldrlt	r2, [sp, #16]
 800b540:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b544:	eba2 0809 	sublt.w	r8, r2, r9
 800b548:	464a      	movge	r2, r9
 800b54a:	bfb8      	it	lt
 800b54c:	2200      	movlt	r2, #0
 800b54e:	e73c      	b.n	800b3ca <_dtoa_r+0x642>
 800b550:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b554:	9f07      	ldr	r7, [sp, #28]
 800b556:	461c      	mov	r4, r3
 800b558:	e744      	b.n	800b3e4 <_dtoa_r+0x65c>
 800b55a:	461a      	mov	r2, r3
 800b55c:	e770      	b.n	800b440 <_dtoa_r+0x6b8>
 800b55e:	9b06      	ldr	r3, [sp, #24]
 800b560:	2b01      	cmp	r3, #1
 800b562:	dc18      	bgt.n	800b596 <_dtoa_r+0x80e>
 800b564:	9b02      	ldr	r3, [sp, #8]
 800b566:	b9b3      	cbnz	r3, 800b596 <_dtoa_r+0x80e>
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b56e:	b9a2      	cbnz	r2, 800b59a <_dtoa_r+0x812>
 800b570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b574:	0d12      	lsrs	r2, r2, #20
 800b576:	0512      	lsls	r2, r2, #20
 800b578:	b18a      	cbz	r2, 800b59e <_dtoa_r+0x816>
 800b57a:	9b04      	ldr	r3, [sp, #16]
 800b57c:	3301      	adds	r3, #1
 800b57e:	9304      	str	r3, [sp, #16]
 800b580:	9b05      	ldr	r3, [sp, #20]
 800b582:	3301      	adds	r3, #1
 800b584:	9305      	str	r3, [sp, #20]
 800b586:	2301      	movs	r3, #1
 800b588:	930a      	str	r3, [sp, #40]	; 0x28
 800b58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f47f af70 	bne.w	800b472 <_dtoa_r+0x6ea>
 800b592:	2001      	movs	r0, #1
 800b594:	e775      	b.n	800b482 <_dtoa_r+0x6fa>
 800b596:	2300      	movs	r3, #0
 800b598:	e7f6      	b.n	800b588 <_dtoa_r+0x800>
 800b59a:	9b02      	ldr	r3, [sp, #8]
 800b59c:	e7f4      	b.n	800b588 <_dtoa_r+0x800>
 800b59e:	920a      	str	r2, [sp, #40]	; 0x28
 800b5a0:	e7f3      	b.n	800b58a <_dtoa_r+0x802>
 800b5a2:	d082      	beq.n	800b4aa <_dtoa_r+0x722>
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	301c      	adds	r0, #28
 800b5a8:	e778      	b.n	800b49c <_dtoa_r+0x714>
 800b5aa:	f1b9 0f00 	cmp.w	r9, #0
 800b5ae:	dc37      	bgt.n	800b620 <_dtoa_r+0x898>
 800b5b0:	9b06      	ldr	r3, [sp, #24]
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	dd34      	ble.n	800b620 <_dtoa_r+0x898>
 800b5b6:	46ca      	mov	sl, r9
 800b5b8:	f1ba 0f00 	cmp.w	sl, #0
 800b5bc:	d10d      	bne.n	800b5da <_dtoa_r+0x852>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4653      	mov	r3, sl
 800b5c2:	2205      	movs	r2, #5
 800b5c4:	4630      	mov	r0, r6
 800b5c6:	f000 fd41 	bl	800c04c <__multadd>
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f000 ffa6 	bl	800c520 <__mcmp>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	f73f adeb 	bgt.w	800b1b0 <_dtoa_r+0x428>
 800b5da:	9b08      	ldr	r3, [sp, #32]
 800b5dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b5e0:	ea6f 0b03 	mvn.w	fp, r3
 800b5e4:	f04f 0900 	mov.w	r9, #0
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f000 fd0c 	bl	800c008 <_Bfree>
 800b5f0:	2f00      	cmp	r7, #0
 800b5f2:	f43f aea8 	beq.w	800b346 <_dtoa_r+0x5be>
 800b5f6:	f1b9 0f00 	cmp.w	r9, #0
 800b5fa:	d005      	beq.n	800b608 <_dtoa_r+0x880>
 800b5fc:	45b9      	cmp	r9, r7
 800b5fe:	d003      	beq.n	800b608 <_dtoa_r+0x880>
 800b600:	4649      	mov	r1, r9
 800b602:	4630      	mov	r0, r6
 800b604:	f000 fd00 	bl	800c008 <_Bfree>
 800b608:	4639      	mov	r1, r7
 800b60a:	4630      	mov	r0, r6
 800b60c:	f000 fcfc 	bl	800c008 <_Bfree>
 800b610:	e699      	b.n	800b346 <_dtoa_r+0x5be>
 800b612:	2400      	movs	r4, #0
 800b614:	4627      	mov	r7, r4
 800b616:	e7e0      	b.n	800b5da <_dtoa_r+0x852>
 800b618:	46bb      	mov	fp, r7
 800b61a:	4604      	mov	r4, r0
 800b61c:	4607      	mov	r7, r0
 800b61e:	e5c7      	b.n	800b1b0 <_dtoa_r+0x428>
 800b620:	9b07      	ldr	r3, [sp, #28]
 800b622:	46ca      	mov	sl, r9
 800b624:	2b00      	cmp	r3, #0
 800b626:	f000 8100 	beq.w	800b82a <_dtoa_r+0xaa2>
 800b62a:	f1b8 0f00 	cmp.w	r8, #0
 800b62e:	dd05      	ble.n	800b63c <_dtoa_r+0x8b4>
 800b630:	4639      	mov	r1, r7
 800b632:	4642      	mov	r2, r8
 800b634:	4630      	mov	r0, r6
 800b636:	f000 ff03 	bl	800c440 <__lshift>
 800b63a:	4607      	mov	r7, r0
 800b63c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d05d      	beq.n	800b6fe <_dtoa_r+0x976>
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	4630      	mov	r0, r6
 800b646:	f000 fc9f 	bl	800bf88 <_Balloc>
 800b64a:	4680      	mov	r8, r0
 800b64c:	b928      	cbnz	r0, 800b65a <_dtoa_r+0x8d2>
 800b64e:	4b82      	ldr	r3, [pc, #520]	; (800b858 <_dtoa_r+0xad0>)
 800b650:	4602      	mov	r2, r0
 800b652:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b656:	f7ff bbaf 	b.w	800adb8 <_dtoa_r+0x30>
 800b65a:	693a      	ldr	r2, [r7, #16]
 800b65c:	3202      	adds	r2, #2
 800b65e:	0092      	lsls	r2, r2, #2
 800b660:	f107 010c 	add.w	r1, r7, #12
 800b664:	300c      	adds	r0, #12
 800b666:	f7fd fd33 	bl	80090d0 <memcpy>
 800b66a:	2201      	movs	r2, #1
 800b66c:	4641      	mov	r1, r8
 800b66e:	4630      	mov	r0, r6
 800b670:	f000 fee6 	bl	800c440 <__lshift>
 800b674:	9b01      	ldr	r3, [sp, #4]
 800b676:	3301      	adds	r3, #1
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	9b01      	ldr	r3, [sp, #4]
 800b67c:	4453      	add	r3, sl
 800b67e:	9308      	str	r3, [sp, #32]
 800b680:	9b02      	ldr	r3, [sp, #8]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	46b9      	mov	r9, r7
 800b688:	9307      	str	r3, [sp, #28]
 800b68a:	4607      	mov	r7, r0
 800b68c:	9b04      	ldr	r3, [sp, #16]
 800b68e:	4621      	mov	r1, r4
 800b690:	3b01      	subs	r3, #1
 800b692:	4628      	mov	r0, r5
 800b694:	9302      	str	r3, [sp, #8]
 800b696:	f7ff faeb 	bl	800ac70 <quorem>
 800b69a:	4603      	mov	r3, r0
 800b69c:	3330      	adds	r3, #48	; 0x30
 800b69e:	9005      	str	r0, [sp, #20]
 800b6a0:	4649      	mov	r1, r9
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a6:	f000 ff3b 	bl	800c520 <__mcmp>
 800b6aa:	463a      	mov	r2, r7
 800b6ac:	4682      	mov	sl, r0
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	f000 ff51 	bl	800c558 <__mdiff>
 800b6b6:	68c2      	ldr	r2, [r0, #12]
 800b6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ba:	4680      	mov	r8, r0
 800b6bc:	bb0a      	cbnz	r2, 800b702 <_dtoa_r+0x97a>
 800b6be:	4601      	mov	r1, r0
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f000 ff2d 	bl	800c520 <__mcmp>
 800b6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	4641      	mov	r1, r8
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b6d2:	f000 fc99 	bl	800c008 <_Bfree>
 800b6d6:	9b06      	ldr	r3, [sp, #24]
 800b6d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b6de:	ea43 0102 	orr.w	r1, r3, r2
 800b6e2:	9b07      	ldr	r3, [sp, #28]
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e8:	d10d      	bne.n	800b706 <_dtoa_r+0x97e>
 800b6ea:	2b39      	cmp	r3, #57	; 0x39
 800b6ec:	d029      	beq.n	800b742 <_dtoa_r+0x9ba>
 800b6ee:	f1ba 0f00 	cmp.w	sl, #0
 800b6f2:	dd01      	ble.n	800b6f8 <_dtoa_r+0x970>
 800b6f4:	9b05      	ldr	r3, [sp, #20]
 800b6f6:	3331      	adds	r3, #49	; 0x31
 800b6f8:	9a02      	ldr	r2, [sp, #8]
 800b6fa:	7013      	strb	r3, [r2, #0]
 800b6fc:	e774      	b.n	800b5e8 <_dtoa_r+0x860>
 800b6fe:	4638      	mov	r0, r7
 800b700:	e7b8      	b.n	800b674 <_dtoa_r+0x8ec>
 800b702:	2201      	movs	r2, #1
 800b704:	e7e1      	b.n	800b6ca <_dtoa_r+0x942>
 800b706:	f1ba 0f00 	cmp.w	sl, #0
 800b70a:	db06      	blt.n	800b71a <_dtoa_r+0x992>
 800b70c:	9906      	ldr	r1, [sp, #24]
 800b70e:	ea41 0a0a 	orr.w	sl, r1, sl
 800b712:	9907      	ldr	r1, [sp, #28]
 800b714:	ea5a 0101 	orrs.w	r1, sl, r1
 800b718:	d120      	bne.n	800b75c <_dtoa_r+0x9d4>
 800b71a:	2a00      	cmp	r2, #0
 800b71c:	ddec      	ble.n	800b6f8 <_dtoa_r+0x970>
 800b71e:	4629      	mov	r1, r5
 800b720:	2201      	movs	r2, #1
 800b722:	4630      	mov	r0, r6
 800b724:	9304      	str	r3, [sp, #16]
 800b726:	f000 fe8b 	bl	800c440 <__lshift>
 800b72a:	4621      	mov	r1, r4
 800b72c:	4605      	mov	r5, r0
 800b72e:	f000 fef7 	bl	800c520 <__mcmp>
 800b732:	2800      	cmp	r0, #0
 800b734:	9b04      	ldr	r3, [sp, #16]
 800b736:	dc02      	bgt.n	800b73e <_dtoa_r+0x9b6>
 800b738:	d1de      	bne.n	800b6f8 <_dtoa_r+0x970>
 800b73a:	07da      	lsls	r2, r3, #31
 800b73c:	d5dc      	bpl.n	800b6f8 <_dtoa_r+0x970>
 800b73e:	2b39      	cmp	r3, #57	; 0x39
 800b740:	d1d8      	bne.n	800b6f4 <_dtoa_r+0x96c>
 800b742:	9a02      	ldr	r2, [sp, #8]
 800b744:	2339      	movs	r3, #57	; 0x39
 800b746:	7013      	strb	r3, [r2, #0]
 800b748:	4643      	mov	r3, r8
 800b74a:	4698      	mov	r8, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b752:	2a39      	cmp	r2, #57	; 0x39
 800b754:	d051      	beq.n	800b7fa <_dtoa_r+0xa72>
 800b756:	3201      	adds	r2, #1
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	e745      	b.n	800b5e8 <_dtoa_r+0x860>
 800b75c:	2a00      	cmp	r2, #0
 800b75e:	dd03      	ble.n	800b768 <_dtoa_r+0x9e0>
 800b760:	2b39      	cmp	r3, #57	; 0x39
 800b762:	d0ee      	beq.n	800b742 <_dtoa_r+0x9ba>
 800b764:	3301      	adds	r3, #1
 800b766:	e7c7      	b.n	800b6f8 <_dtoa_r+0x970>
 800b768:	9a04      	ldr	r2, [sp, #16]
 800b76a:	9908      	ldr	r1, [sp, #32]
 800b76c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b770:	428a      	cmp	r2, r1
 800b772:	d02b      	beq.n	800b7cc <_dtoa_r+0xa44>
 800b774:	4629      	mov	r1, r5
 800b776:	2300      	movs	r3, #0
 800b778:	220a      	movs	r2, #10
 800b77a:	4630      	mov	r0, r6
 800b77c:	f000 fc66 	bl	800c04c <__multadd>
 800b780:	45b9      	cmp	r9, r7
 800b782:	4605      	mov	r5, r0
 800b784:	f04f 0300 	mov.w	r3, #0
 800b788:	f04f 020a 	mov.w	r2, #10
 800b78c:	4649      	mov	r1, r9
 800b78e:	4630      	mov	r0, r6
 800b790:	d107      	bne.n	800b7a2 <_dtoa_r+0xa1a>
 800b792:	f000 fc5b 	bl	800c04c <__multadd>
 800b796:	4681      	mov	r9, r0
 800b798:	4607      	mov	r7, r0
 800b79a:	9b04      	ldr	r3, [sp, #16]
 800b79c:	3301      	adds	r3, #1
 800b79e:	9304      	str	r3, [sp, #16]
 800b7a0:	e774      	b.n	800b68c <_dtoa_r+0x904>
 800b7a2:	f000 fc53 	bl	800c04c <__multadd>
 800b7a6:	4639      	mov	r1, r7
 800b7a8:	4681      	mov	r9, r0
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	220a      	movs	r2, #10
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	f000 fc4c 	bl	800c04c <__multadd>
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	e7f0      	b.n	800b79a <_dtoa_r+0xa12>
 800b7b8:	f1ba 0f00 	cmp.w	sl, #0
 800b7bc:	9a01      	ldr	r2, [sp, #4]
 800b7be:	bfcc      	ite	gt
 800b7c0:	46d0      	movgt	r8, sl
 800b7c2:	f04f 0801 	movle.w	r8, #1
 800b7c6:	4490      	add	r8, r2
 800b7c8:	f04f 0900 	mov.w	r9, #0
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	9302      	str	r3, [sp, #8]
 800b7d4:	f000 fe34 	bl	800c440 <__lshift>
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4605      	mov	r5, r0
 800b7dc:	f000 fea0 	bl	800c520 <__mcmp>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	dcb1      	bgt.n	800b748 <_dtoa_r+0x9c0>
 800b7e4:	d102      	bne.n	800b7ec <_dtoa_r+0xa64>
 800b7e6:	9b02      	ldr	r3, [sp, #8]
 800b7e8:	07db      	lsls	r3, r3, #31
 800b7ea:	d4ad      	bmi.n	800b748 <_dtoa_r+0x9c0>
 800b7ec:	4643      	mov	r3, r8
 800b7ee:	4698      	mov	r8, r3
 800b7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7f4:	2a30      	cmp	r2, #48	; 0x30
 800b7f6:	d0fa      	beq.n	800b7ee <_dtoa_r+0xa66>
 800b7f8:	e6f6      	b.n	800b5e8 <_dtoa_r+0x860>
 800b7fa:	9a01      	ldr	r2, [sp, #4]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d1a4      	bne.n	800b74a <_dtoa_r+0x9c2>
 800b800:	f10b 0b01 	add.w	fp, fp, #1
 800b804:	2331      	movs	r3, #49	; 0x31
 800b806:	e778      	b.n	800b6fa <_dtoa_r+0x972>
 800b808:	4b14      	ldr	r3, [pc, #80]	; (800b85c <_dtoa_r+0xad4>)
 800b80a:	f7ff bb27 	b.w	800ae5c <_dtoa_r+0xd4>
 800b80e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b810:	2b00      	cmp	r3, #0
 800b812:	f47f ab03 	bne.w	800ae1c <_dtoa_r+0x94>
 800b816:	4b12      	ldr	r3, [pc, #72]	; (800b860 <_dtoa_r+0xad8>)
 800b818:	f7ff bb20 	b.w	800ae5c <_dtoa_r+0xd4>
 800b81c:	f1ba 0f00 	cmp.w	sl, #0
 800b820:	dc03      	bgt.n	800b82a <_dtoa_r+0xaa2>
 800b822:	9b06      	ldr	r3, [sp, #24]
 800b824:	2b02      	cmp	r3, #2
 800b826:	f73f aec7 	bgt.w	800b5b8 <_dtoa_r+0x830>
 800b82a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b82e:	4621      	mov	r1, r4
 800b830:	4628      	mov	r0, r5
 800b832:	f7ff fa1d 	bl	800ac70 <quorem>
 800b836:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b83a:	f808 3b01 	strb.w	r3, [r8], #1
 800b83e:	9a01      	ldr	r2, [sp, #4]
 800b840:	eba8 0202 	sub.w	r2, r8, r2
 800b844:	4592      	cmp	sl, r2
 800b846:	ddb7      	ble.n	800b7b8 <_dtoa_r+0xa30>
 800b848:	4629      	mov	r1, r5
 800b84a:	2300      	movs	r3, #0
 800b84c:	220a      	movs	r2, #10
 800b84e:	4630      	mov	r0, r6
 800b850:	f000 fbfc 	bl	800c04c <__multadd>
 800b854:	4605      	mov	r5, r0
 800b856:	e7ea      	b.n	800b82e <_dtoa_r+0xaa6>
 800b858:	0800de73 	.word	0x0800de73
 800b85c:	0800dc50 	.word	0x0800dc50
 800b860:	0800ddd1 	.word	0x0800ddd1

0800b864 <rshift>:
 800b864:	6903      	ldr	r3, [r0, #16]
 800b866:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b86a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b86e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b872:	f100 0414 	add.w	r4, r0, #20
 800b876:	dd45      	ble.n	800b904 <rshift+0xa0>
 800b878:	f011 011f 	ands.w	r1, r1, #31
 800b87c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b880:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b884:	d10c      	bne.n	800b8a0 <rshift+0x3c>
 800b886:	f100 0710 	add.w	r7, r0, #16
 800b88a:	4629      	mov	r1, r5
 800b88c:	42b1      	cmp	r1, r6
 800b88e:	d334      	bcc.n	800b8fa <rshift+0x96>
 800b890:	1a9b      	subs	r3, r3, r2
 800b892:	009b      	lsls	r3, r3, #2
 800b894:	1eea      	subs	r2, r5, #3
 800b896:	4296      	cmp	r6, r2
 800b898:	bf38      	it	cc
 800b89a:	2300      	movcc	r3, #0
 800b89c:	4423      	add	r3, r4
 800b89e:	e015      	b.n	800b8cc <rshift+0x68>
 800b8a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b8a4:	f1c1 0820 	rsb	r8, r1, #32
 800b8a8:	40cf      	lsrs	r7, r1
 800b8aa:	f105 0e04 	add.w	lr, r5, #4
 800b8ae:	46a1      	mov	r9, r4
 800b8b0:	4576      	cmp	r6, lr
 800b8b2:	46f4      	mov	ip, lr
 800b8b4:	d815      	bhi.n	800b8e2 <rshift+0x7e>
 800b8b6:	1a9a      	subs	r2, r3, r2
 800b8b8:	0092      	lsls	r2, r2, #2
 800b8ba:	3a04      	subs	r2, #4
 800b8bc:	3501      	adds	r5, #1
 800b8be:	42ae      	cmp	r6, r5
 800b8c0:	bf38      	it	cc
 800b8c2:	2200      	movcc	r2, #0
 800b8c4:	18a3      	adds	r3, r4, r2
 800b8c6:	50a7      	str	r7, [r4, r2]
 800b8c8:	b107      	cbz	r7, 800b8cc <rshift+0x68>
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	1b1a      	subs	r2, r3, r4
 800b8ce:	42a3      	cmp	r3, r4
 800b8d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8d4:	bf08      	it	eq
 800b8d6:	2300      	moveq	r3, #0
 800b8d8:	6102      	str	r2, [r0, #16]
 800b8da:	bf08      	it	eq
 800b8dc:	6143      	streq	r3, [r0, #20]
 800b8de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8e2:	f8dc c000 	ldr.w	ip, [ip]
 800b8e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b8ea:	ea4c 0707 	orr.w	r7, ip, r7
 800b8ee:	f849 7b04 	str.w	r7, [r9], #4
 800b8f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b8f6:	40cf      	lsrs	r7, r1
 800b8f8:	e7da      	b.n	800b8b0 <rshift+0x4c>
 800b8fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800b8fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800b902:	e7c3      	b.n	800b88c <rshift+0x28>
 800b904:	4623      	mov	r3, r4
 800b906:	e7e1      	b.n	800b8cc <rshift+0x68>

0800b908 <__hexdig_fun>:
 800b908:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b90c:	2b09      	cmp	r3, #9
 800b90e:	d802      	bhi.n	800b916 <__hexdig_fun+0xe>
 800b910:	3820      	subs	r0, #32
 800b912:	b2c0      	uxtb	r0, r0
 800b914:	4770      	bx	lr
 800b916:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	d801      	bhi.n	800b922 <__hexdig_fun+0x1a>
 800b91e:	3847      	subs	r0, #71	; 0x47
 800b920:	e7f7      	b.n	800b912 <__hexdig_fun+0xa>
 800b922:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b926:	2b05      	cmp	r3, #5
 800b928:	d801      	bhi.n	800b92e <__hexdig_fun+0x26>
 800b92a:	3827      	subs	r0, #39	; 0x27
 800b92c:	e7f1      	b.n	800b912 <__hexdig_fun+0xa>
 800b92e:	2000      	movs	r0, #0
 800b930:	4770      	bx	lr
	...

0800b934 <__gethex>:
 800b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b938:	ed2d 8b02 	vpush	{d8}
 800b93c:	b089      	sub	sp, #36	; 0x24
 800b93e:	ee08 0a10 	vmov	s16, r0
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	4bb4      	ldr	r3, [pc, #720]	; (800bc18 <__gethex+0x2e4>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	9301      	str	r3, [sp, #4]
 800b94a:	4618      	mov	r0, r3
 800b94c:	468b      	mov	fp, r1
 800b94e:	4690      	mov	r8, r2
 800b950:	f7f4 fc76 	bl	8000240 <strlen>
 800b954:	9b01      	ldr	r3, [sp, #4]
 800b956:	f8db 2000 	ldr.w	r2, [fp]
 800b95a:	4403      	add	r3, r0
 800b95c:	4682      	mov	sl, r0
 800b95e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b962:	9305      	str	r3, [sp, #20]
 800b964:	1c93      	adds	r3, r2, #2
 800b966:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b96a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b96e:	32fe      	adds	r2, #254	; 0xfe
 800b970:	18d1      	adds	r1, r2, r3
 800b972:	461f      	mov	r7, r3
 800b974:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b978:	9100      	str	r1, [sp, #0]
 800b97a:	2830      	cmp	r0, #48	; 0x30
 800b97c:	d0f8      	beq.n	800b970 <__gethex+0x3c>
 800b97e:	f7ff ffc3 	bl	800b908 <__hexdig_fun>
 800b982:	4604      	mov	r4, r0
 800b984:	2800      	cmp	r0, #0
 800b986:	d13a      	bne.n	800b9fe <__gethex+0xca>
 800b988:	9901      	ldr	r1, [sp, #4]
 800b98a:	4652      	mov	r2, sl
 800b98c:	4638      	mov	r0, r7
 800b98e:	f001 f933 	bl	800cbf8 <strncmp>
 800b992:	4605      	mov	r5, r0
 800b994:	2800      	cmp	r0, #0
 800b996:	d168      	bne.n	800ba6a <__gethex+0x136>
 800b998:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b99c:	eb07 060a 	add.w	r6, r7, sl
 800b9a0:	f7ff ffb2 	bl	800b908 <__hexdig_fun>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d062      	beq.n	800ba6e <__gethex+0x13a>
 800b9a8:	4633      	mov	r3, r6
 800b9aa:	7818      	ldrb	r0, [r3, #0]
 800b9ac:	2830      	cmp	r0, #48	; 0x30
 800b9ae:	461f      	mov	r7, r3
 800b9b0:	f103 0301 	add.w	r3, r3, #1
 800b9b4:	d0f9      	beq.n	800b9aa <__gethex+0x76>
 800b9b6:	f7ff ffa7 	bl	800b908 <__hexdig_fun>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	fab0 f480 	clz	r4, r0
 800b9c0:	0964      	lsrs	r4, r4, #5
 800b9c2:	4635      	mov	r5, r6
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	463a      	mov	r2, r7
 800b9c8:	4616      	mov	r6, r2
 800b9ca:	3201      	adds	r2, #1
 800b9cc:	7830      	ldrb	r0, [r6, #0]
 800b9ce:	f7ff ff9b 	bl	800b908 <__hexdig_fun>
 800b9d2:	2800      	cmp	r0, #0
 800b9d4:	d1f8      	bne.n	800b9c8 <__gethex+0x94>
 800b9d6:	9901      	ldr	r1, [sp, #4]
 800b9d8:	4652      	mov	r2, sl
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f001 f90c 	bl	800cbf8 <strncmp>
 800b9e0:	b980      	cbnz	r0, 800ba04 <__gethex+0xd0>
 800b9e2:	b94d      	cbnz	r5, 800b9f8 <__gethex+0xc4>
 800b9e4:	eb06 050a 	add.w	r5, r6, sl
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	4616      	mov	r6, r2
 800b9ec:	3201      	adds	r2, #1
 800b9ee:	7830      	ldrb	r0, [r6, #0]
 800b9f0:	f7ff ff8a 	bl	800b908 <__hexdig_fun>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	d1f8      	bne.n	800b9ea <__gethex+0xb6>
 800b9f8:	1bad      	subs	r5, r5, r6
 800b9fa:	00ad      	lsls	r5, r5, #2
 800b9fc:	e004      	b.n	800ba08 <__gethex+0xd4>
 800b9fe:	2400      	movs	r4, #0
 800ba00:	4625      	mov	r5, r4
 800ba02:	e7e0      	b.n	800b9c6 <__gethex+0x92>
 800ba04:	2d00      	cmp	r5, #0
 800ba06:	d1f7      	bne.n	800b9f8 <__gethex+0xc4>
 800ba08:	7833      	ldrb	r3, [r6, #0]
 800ba0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba0e:	2b50      	cmp	r3, #80	; 0x50
 800ba10:	d13b      	bne.n	800ba8a <__gethex+0x156>
 800ba12:	7873      	ldrb	r3, [r6, #1]
 800ba14:	2b2b      	cmp	r3, #43	; 0x2b
 800ba16:	d02c      	beq.n	800ba72 <__gethex+0x13e>
 800ba18:	2b2d      	cmp	r3, #45	; 0x2d
 800ba1a:	d02e      	beq.n	800ba7a <__gethex+0x146>
 800ba1c:	1c71      	adds	r1, r6, #1
 800ba1e:	f04f 0900 	mov.w	r9, #0
 800ba22:	7808      	ldrb	r0, [r1, #0]
 800ba24:	f7ff ff70 	bl	800b908 <__hexdig_fun>
 800ba28:	1e43      	subs	r3, r0, #1
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	2b18      	cmp	r3, #24
 800ba2e:	d82c      	bhi.n	800ba8a <__gethex+0x156>
 800ba30:	f1a0 0210 	sub.w	r2, r0, #16
 800ba34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba38:	f7ff ff66 	bl	800b908 <__hexdig_fun>
 800ba3c:	1e43      	subs	r3, r0, #1
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b18      	cmp	r3, #24
 800ba42:	d91d      	bls.n	800ba80 <__gethex+0x14c>
 800ba44:	f1b9 0f00 	cmp.w	r9, #0
 800ba48:	d000      	beq.n	800ba4c <__gethex+0x118>
 800ba4a:	4252      	negs	r2, r2
 800ba4c:	4415      	add	r5, r2
 800ba4e:	f8cb 1000 	str.w	r1, [fp]
 800ba52:	b1e4      	cbz	r4, 800ba8e <__gethex+0x15a>
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bf14      	ite	ne
 800ba5a:	2700      	movne	r7, #0
 800ba5c:	2706      	moveq	r7, #6
 800ba5e:	4638      	mov	r0, r7
 800ba60:	b009      	add	sp, #36	; 0x24
 800ba62:	ecbd 8b02 	vpop	{d8}
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	463e      	mov	r6, r7
 800ba6c:	4625      	mov	r5, r4
 800ba6e:	2401      	movs	r4, #1
 800ba70:	e7ca      	b.n	800ba08 <__gethex+0xd4>
 800ba72:	f04f 0900 	mov.w	r9, #0
 800ba76:	1cb1      	adds	r1, r6, #2
 800ba78:	e7d3      	b.n	800ba22 <__gethex+0xee>
 800ba7a:	f04f 0901 	mov.w	r9, #1
 800ba7e:	e7fa      	b.n	800ba76 <__gethex+0x142>
 800ba80:	230a      	movs	r3, #10
 800ba82:	fb03 0202 	mla	r2, r3, r2, r0
 800ba86:	3a10      	subs	r2, #16
 800ba88:	e7d4      	b.n	800ba34 <__gethex+0x100>
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	e7df      	b.n	800ba4e <__gethex+0x11a>
 800ba8e:	1bf3      	subs	r3, r6, r7
 800ba90:	3b01      	subs	r3, #1
 800ba92:	4621      	mov	r1, r4
 800ba94:	2b07      	cmp	r3, #7
 800ba96:	dc0b      	bgt.n	800bab0 <__gethex+0x17c>
 800ba98:	ee18 0a10 	vmov	r0, s16
 800ba9c:	f000 fa74 	bl	800bf88 <_Balloc>
 800baa0:	4604      	mov	r4, r0
 800baa2:	b940      	cbnz	r0, 800bab6 <__gethex+0x182>
 800baa4:	4b5d      	ldr	r3, [pc, #372]	; (800bc1c <__gethex+0x2e8>)
 800baa6:	4602      	mov	r2, r0
 800baa8:	21de      	movs	r1, #222	; 0xde
 800baaa:	485d      	ldr	r0, [pc, #372]	; (800bc20 <__gethex+0x2ec>)
 800baac:	f001 f8c6 	bl	800cc3c <__assert_func>
 800bab0:	3101      	adds	r1, #1
 800bab2:	105b      	asrs	r3, r3, #1
 800bab4:	e7ee      	b.n	800ba94 <__gethex+0x160>
 800bab6:	f100 0914 	add.w	r9, r0, #20
 800baba:	f04f 0b00 	mov.w	fp, #0
 800babe:	f1ca 0301 	rsb	r3, sl, #1
 800bac2:	f8cd 9008 	str.w	r9, [sp, #8]
 800bac6:	f8cd b000 	str.w	fp, [sp]
 800baca:	9306      	str	r3, [sp, #24]
 800bacc:	42b7      	cmp	r7, r6
 800bace:	d340      	bcc.n	800bb52 <__gethex+0x21e>
 800bad0:	9802      	ldr	r0, [sp, #8]
 800bad2:	9b00      	ldr	r3, [sp, #0]
 800bad4:	f840 3b04 	str.w	r3, [r0], #4
 800bad8:	eba0 0009 	sub.w	r0, r0, r9
 800badc:	1080      	asrs	r0, r0, #2
 800bade:	0146      	lsls	r6, r0, #5
 800bae0:	6120      	str	r0, [r4, #16]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f000 fb42 	bl	800c16c <__hi0bits>
 800bae8:	1a30      	subs	r0, r6, r0
 800baea:	f8d8 6000 	ldr.w	r6, [r8]
 800baee:	42b0      	cmp	r0, r6
 800baf0:	dd63      	ble.n	800bbba <__gethex+0x286>
 800baf2:	1b87      	subs	r7, r0, r6
 800baf4:	4639      	mov	r1, r7
 800baf6:	4620      	mov	r0, r4
 800baf8:	f000 fee3 	bl	800c8c2 <__any_on>
 800bafc:	4682      	mov	sl, r0
 800bafe:	b1a8      	cbz	r0, 800bb2c <__gethex+0x1f8>
 800bb00:	1e7b      	subs	r3, r7, #1
 800bb02:	1159      	asrs	r1, r3, #5
 800bb04:	f003 021f 	and.w	r2, r3, #31
 800bb08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bb0c:	f04f 0a01 	mov.w	sl, #1
 800bb10:	fa0a f202 	lsl.w	r2, sl, r2
 800bb14:	420a      	tst	r2, r1
 800bb16:	d009      	beq.n	800bb2c <__gethex+0x1f8>
 800bb18:	4553      	cmp	r3, sl
 800bb1a:	dd05      	ble.n	800bb28 <__gethex+0x1f4>
 800bb1c:	1eb9      	subs	r1, r7, #2
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f000 fecf 	bl	800c8c2 <__any_on>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d145      	bne.n	800bbb4 <__gethex+0x280>
 800bb28:	f04f 0a02 	mov.w	sl, #2
 800bb2c:	4639      	mov	r1, r7
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f7ff fe98 	bl	800b864 <rshift>
 800bb34:	443d      	add	r5, r7
 800bb36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb3a:	42ab      	cmp	r3, r5
 800bb3c:	da4c      	bge.n	800bbd8 <__gethex+0x2a4>
 800bb3e:	ee18 0a10 	vmov	r0, s16
 800bb42:	4621      	mov	r1, r4
 800bb44:	f000 fa60 	bl	800c008 <_Bfree>
 800bb48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	6013      	str	r3, [r2, #0]
 800bb4e:	27a3      	movs	r7, #163	; 0xa3
 800bb50:	e785      	b.n	800ba5e <__gethex+0x12a>
 800bb52:	1e73      	subs	r3, r6, #1
 800bb54:	9a05      	ldr	r2, [sp, #20]
 800bb56:	9303      	str	r3, [sp, #12]
 800bb58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d019      	beq.n	800bb94 <__gethex+0x260>
 800bb60:	f1bb 0f20 	cmp.w	fp, #32
 800bb64:	d107      	bne.n	800bb76 <__gethex+0x242>
 800bb66:	9b02      	ldr	r3, [sp, #8]
 800bb68:	9a00      	ldr	r2, [sp, #0]
 800bb6a:	f843 2b04 	str.w	r2, [r3], #4
 800bb6e:	9302      	str	r3, [sp, #8]
 800bb70:	2300      	movs	r3, #0
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	469b      	mov	fp, r3
 800bb76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bb7a:	f7ff fec5 	bl	800b908 <__hexdig_fun>
 800bb7e:	9b00      	ldr	r3, [sp, #0]
 800bb80:	f000 000f 	and.w	r0, r0, #15
 800bb84:	fa00 f00b 	lsl.w	r0, r0, fp
 800bb88:	4303      	orrs	r3, r0
 800bb8a:	9300      	str	r3, [sp, #0]
 800bb8c:	f10b 0b04 	add.w	fp, fp, #4
 800bb90:	9b03      	ldr	r3, [sp, #12]
 800bb92:	e00d      	b.n	800bbb0 <__gethex+0x27c>
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	9a06      	ldr	r2, [sp, #24]
 800bb98:	4413      	add	r3, r2
 800bb9a:	42bb      	cmp	r3, r7
 800bb9c:	d3e0      	bcc.n	800bb60 <__gethex+0x22c>
 800bb9e:	4618      	mov	r0, r3
 800bba0:	9901      	ldr	r1, [sp, #4]
 800bba2:	9307      	str	r3, [sp, #28]
 800bba4:	4652      	mov	r2, sl
 800bba6:	f001 f827 	bl	800cbf8 <strncmp>
 800bbaa:	9b07      	ldr	r3, [sp, #28]
 800bbac:	2800      	cmp	r0, #0
 800bbae:	d1d7      	bne.n	800bb60 <__gethex+0x22c>
 800bbb0:	461e      	mov	r6, r3
 800bbb2:	e78b      	b.n	800bacc <__gethex+0x198>
 800bbb4:	f04f 0a03 	mov.w	sl, #3
 800bbb8:	e7b8      	b.n	800bb2c <__gethex+0x1f8>
 800bbba:	da0a      	bge.n	800bbd2 <__gethex+0x29e>
 800bbbc:	1a37      	subs	r7, r6, r0
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	ee18 0a10 	vmov	r0, s16
 800bbc4:	463a      	mov	r2, r7
 800bbc6:	f000 fc3b 	bl	800c440 <__lshift>
 800bbca:	1bed      	subs	r5, r5, r7
 800bbcc:	4604      	mov	r4, r0
 800bbce:	f100 0914 	add.w	r9, r0, #20
 800bbd2:	f04f 0a00 	mov.w	sl, #0
 800bbd6:	e7ae      	b.n	800bb36 <__gethex+0x202>
 800bbd8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bbdc:	42a8      	cmp	r0, r5
 800bbde:	dd72      	ble.n	800bcc6 <__gethex+0x392>
 800bbe0:	1b45      	subs	r5, r0, r5
 800bbe2:	42ae      	cmp	r6, r5
 800bbe4:	dc36      	bgt.n	800bc54 <__gethex+0x320>
 800bbe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d02a      	beq.n	800bc44 <__gethex+0x310>
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d02c      	beq.n	800bc4c <__gethex+0x318>
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d11c      	bne.n	800bc30 <__gethex+0x2fc>
 800bbf6:	42ae      	cmp	r6, r5
 800bbf8:	d11a      	bne.n	800bc30 <__gethex+0x2fc>
 800bbfa:	2e01      	cmp	r6, #1
 800bbfc:	d112      	bne.n	800bc24 <__gethex+0x2f0>
 800bbfe:	9a04      	ldr	r2, [sp, #16]
 800bc00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	2301      	movs	r3, #1
 800bc08:	6123      	str	r3, [r4, #16]
 800bc0a:	f8c9 3000 	str.w	r3, [r9]
 800bc0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc10:	2762      	movs	r7, #98	; 0x62
 800bc12:	601c      	str	r4, [r3, #0]
 800bc14:	e723      	b.n	800ba5e <__gethex+0x12a>
 800bc16:	bf00      	nop
 800bc18:	0800df0c 	.word	0x0800df0c
 800bc1c:	0800de73 	.word	0x0800de73
 800bc20:	0800de84 	.word	0x0800de84
 800bc24:	1e71      	subs	r1, r6, #1
 800bc26:	4620      	mov	r0, r4
 800bc28:	f000 fe4b 	bl	800c8c2 <__any_on>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d1e6      	bne.n	800bbfe <__gethex+0x2ca>
 800bc30:	ee18 0a10 	vmov	r0, s16
 800bc34:	4621      	mov	r1, r4
 800bc36:	f000 f9e7 	bl	800c008 <_Bfree>
 800bc3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	2750      	movs	r7, #80	; 0x50
 800bc42:	e70c      	b.n	800ba5e <__gethex+0x12a>
 800bc44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1f2      	bne.n	800bc30 <__gethex+0x2fc>
 800bc4a:	e7d8      	b.n	800bbfe <__gethex+0x2ca>
 800bc4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1d5      	bne.n	800bbfe <__gethex+0x2ca>
 800bc52:	e7ed      	b.n	800bc30 <__gethex+0x2fc>
 800bc54:	1e6f      	subs	r7, r5, #1
 800bc56:	f1ba 0f00 	cmp.w	sl, #0
 800bc5a:	d131      	bne.n	800bcc0 <__gethex+0x38c>
 800bc5c:	b127      	cbz	r7, 800bc68 <__gethex+0x334>
 800bc5e:	4639      	mov	r1, r7
 800bc60:	4620      	mov	r0, r4
 800bc62:	f000 fe2e 	bl	800c8c2 <__any_on>
 800bc66:	4682      	mov	sl, r0
 800bc68:	117b      	asrs	r3, r7, #5
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bc70:	f007 071f 	and.w	r7, r7, #31
 800bc74:	fa01 f707 	lsl.w	r7, r1, r7
 800bc78:	421f      	tst	r7, r3
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	bf18      	it	ne
 800bc80:	f04a 0a02 	orrne.w	sl, sl, #2
 800bc84:	1b76      	subs	r6, r6, r5
 800bc86:	f7ff fded 	bl	800b864 <rshift>
 800bc8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bc8e:	2702      	movs	r7, #2
 800bc90:	f1ba 0f00 	cmp.w	sl, #0
 800bc94:	d048      	beq.n	800bd28 <__gethex+0x3f4>
 800bc96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d015      	beq.n	800bcca <__gethex+0x396>
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d017      	beq.n	800bcd2 <__gethex+0x39e>
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d109      	bne.n	800bcba <__gethex+0x386>
 800bca6:	f01a 0f02 	tst.w	sl, #2
 800bcaa:	d006      	beq.n	800bcba <__gethex+0x386>
 800bcac:	f8d9 0000 	ldr.w	r0, [r9]
 800bcb0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bcb4:	f01a 0f01 	tst.w	sl, #1
 800bcb8:	d10e      	bne.n	800bcd8 <__gethex+0x3a4>
 800bcba:	f047 0710 	orr.w	r7, r7, #16
 800bcbe:	e033      	b.n	800bd28 <__gethex+0x3f4>
 800bcc0:	f04f 0a01 	mov.w	sl, #1
 800bcc4:	e7d0      	b.n	800bc68 <__gethex+0x334>
 800bcc6:	2701      	movs	r7, #1
 800bcc8:	e7e2      	b.n	800bc90 <__gethex+0x35c>
 800bcca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bccc:	f1c3 0301 	rsb	r3, r3, #1
 800bcd0:	9315      	str	r3, [sp, #84]	; 0x54
 800bcd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d0f0      	beq.n	800bcba <__gethex+0x386>
 800bcd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bcdc:	f104 0314 	add.w	r3, r4, #20
 800bce0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bce4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bce8:	f04f 0c00 	mov.w	ip, #0
 800bcec:	4618      	mov	r0, r3
 800bcee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcf2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bcf6:	d01c      	beq.n	800bd32 <__gethex+0x3fe>
 800bcf8:	3201      	adds	r2, #1
 800bcfa:	6002      	str	r2, [r0, #0]
 800bcfc:	2f02      	cmp	r7, #2
 800bcfe:	f104 0314 	add.w	r3, r4, #20
 800bd02:	d13f      	bne.n	800bd84 <__gethex+0x450>
 800bd04:	f8d8 2000 	ldr.w	r2, [r8]
 800bd08:	3a01      	subs	r2, #1
 800bd0a:	42b2      	cmp	r2, r6
 800bd0c:	d10a      	bne.n	800bd24 <__gethex+0x3f0>
 800bd0e:	1171      	asrs	r1, r6, #5
 800bd10:	2201      	movs	r2, #1
 800bd12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd16:	f006 061f 	and.w	r6, r6, #31
 800bd1a:	fa02 f606 	lsl.w	r6, r2, r6
 800bd1e:	421e      	tst	r6, r3
 800bd20:	bf18      	it	ne
 800bd22:	4617      	movne	r7, r2
 800bd24:	f047 0720 	orr.w	r7, r7, #32
 800bd28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bd2a:	601c      	str	r4, [r3, #0]
 800bd2c:	9b04      	ldr	r3, [sp, #16]
 800bd2e:	601d      	str	r5, [r3, #0]
 800bd30:	e695      	b.n	800ba5e <__gethex+0x12a>
 800bd32:	4299      	cmp	r1, r3
 800bd34:	f843 cc04 	str.w	ip, [r3, #-4]
 800bd38:	d8d8      	bhi.n	800bcec <__gethex+0x3b8>
 800bd3a:	68a3      	ldr	r3, [r4, #8]
 800bd3c:	459b      	cmp	fp, r3
 800bd3e:	db19      	blt.n	800bd74 <__gethex+0x440>
 800bd40:	6861      	ldr	r1, [r4, #4]
 800bd42:	ee18 0a10 	vmov	r0, s16
 800bd46:	3101      	adds	r1, #1
 800bd48:	f000 f91e 	bl	800bf88 <_Balloc>
 800bd4c:	4681      	mov	r9, r0
 800bd4e:	b918      	cbnz	r0, 800bd58 <__gethex+0x424>
 800bd50:	4b1a      	ldr	r3, [pc, #104]	; (800bdbc <__gethex+0x488>)
 800bd52:	4602      	mov	r2, r0
 800bd54:	2184      	movs	r1, #132	; 0x84
 800bd56:	e6a8      	b.n	800baaa <__gethex+0x176>
 800bd58:	6922      	ldr	r2, [r4, #16]
 800bd5a:	3202      	adds	r2, #2
 800bd5c:	f104 010c 	add.w	r1, r4, #12
 800bd60:	0092      	lsls	r2, r2, #2
 800bd62:	300c      	adds	r0, #12
 800bd64:	f7fd f9b4 	bl	80090d0 <memcpy>
 800bd68:	4621      	mov	r1, r4
 800bd6a:	ee18 0a10 	vmov	r0, s16
 800bd6e:	f000 f94b 	bl	800c008 <_Bfree>
 800bd72:	464c      	mov	r4, r9
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd7c:	6122      	str	r2, [r4, #16]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	615a      	str	r2, [r3, #20]
 800bd82:	e7bb      	b.n	800bcfc <__gethex+0x3c8>
 800bd84:	6922      	ldr	r2, [r4, #16]
 800bd86:	455a      	cmp	r2, fp
 800bd88:	dd0b      	ble.n	800bda2 <__gethex+0x46e>
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f7ff fd69 	bl	800b864 <rshift>
 800bd92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd96:	3501      	adds	r5, #1
 800bd98:	42ab      	cmp	r3, r5
 800bd9a:	f6ff aed0 	blt.w	800bb3e <__gethex+0x20a>
 800bd9e:	2701      	movs	r7, #1
 800bda0:	e7c0      	b.n	800bd24 <__gethex+0x3f0>
 800bda2:	f016 061f 	ands.w	r6, r6, #31
 800bda6:	d0fa      	beq.n	800bd9e <__gethex+0x46a>
 800bda8:	4453      	add	r3, sl
 800bdaa:	f1c6 0620 	rsb	r6, r6, #32
 800bdae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bdb2:	f000 f9db 	bl	800c16c <__hi0bits>
 800bdb6:	42b0      	cmp	r0, r6
 800bdb8:	dbe7      	blt.n	800bd8a <__gethex+0x456>
 800bdba:	e7f0      	b.n	800bd9e <__gethex+0x46a>
 800bdbc:	0800de73 	.word	0x0800de73

0800bdc0 <L_shift>:
 800bdc0:	f1c2 0208 	rsb	r2, r2, #8
 800bdc4:	0092      	lsls	r2, r2, #2
 800bdc6:	b570      	push	{r4, r5, r6, lr}
 800bdc8:	f1c2 0620 	rsb	r6, r2, #32
 800bdcc:	6843      	ldr	r3, [r0, #4]
 800bdce:	6804      	ldr	r4, [r0, #0]
 800bdd0:	fa03 f506 	lsl.w	r5, r3, r6
 800bdd4:	432c      	orrs	r4, r5
 800bdd6:	40d3      	lsrs	r3, r2
 800bdd8:	6004      	str	r4, [r0, #0]
 800bdda:	f840 3f04 	str.w	r3, [r0, #4]!
 800bdde:	4288      	cmp	r0, r1
 800bde0:	d3f4      	bcc.n	800bdcc <L_shift+0xc>
 800bde2:	bd70      	pop	{r4, r5, r6, pc}

0800bde4 <__match>:
 800bde4:	b530      	push	{r4, r5, lr}
 800bde6:	6803      	ldr	r3, [r0, #0]
 800bde8:	3301      	adds	r3, #1
 800bdea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdee:	b914      	cbnz	r4, 800bdf6 <__match+0x12>
 800bdf0:	6003      	str	r3, [r0, #0]
 800bdf2:	2001      	movs	r0, #1
 800bdf4:	bd30      	pop	{r4, r5, pc}
 800bdf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdfa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bdfe:	2d19      	cmp	r5, #25
 800be00:	bf98      	it	ls
 800be02:	3220      	addls	r2, #32
 800be04:	42a2      	cmp	r2, r4
 800be06:	d0f0      	beq.n	800bdea <__match+0x6>
 800be08:	2000      	movs	r0, #0
 800be0a:	e7f3      	b.n	800bdf4 <__match+0x10>

0800be0c <__hexnan>:
 800be0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be10:	680b      	ldr	r3, [r1, #0]
 800be12:	115e      	asrs	r6, r3, #5
 800be14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be18:	f013 031f 	ands.w	r3, r3, #31
 800be1c:	b087      	sub	sp, #28
 800be1e:	bf18      	it	ne
 800be20:	3604      	addne	r6, #4
 800be22:	2500      	movs	r5, #0
 800be24:	1f37      	subs	r7, r6, #4
 800be26:	4690      	mov	r8, r2
 800be28:	6802      	ldr	r2, [r0, #0]
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	4682      	mov	sl, r0
 800be2e:	f846 5c04 	str.w	r5, [r6, #-4]
 800be32:	46b9      	mov	r9, r7
 800be34:	463c      	mov	r4, r7
 800be36:	9502      	str	r5, [sp, #8]
 800be38:	46ab      	mov	fp, r5
 800be3a:	7851      	ldrb	r1, [r2, #1]
 800be3c:	1c53      	adds	r3, r2, #1
 800be3e:	9303      	str	r3, [sp, #12]
 800be40:	b341      	cbz	r1, 800be94 <__hexnan+0x88>
 800be42:	4608      	mov	r0, r1
 800be44:	9205      	str	r2, [sp, #20]
 800be46:	9104      	str	r1, [sp, #16]
 800be48:	f7ff fd5e 	bl	800b908 <__hexdig_fun>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d14f      	bne.n	800bef0 <__hexnan+0xe4>
 800be50:	9904      	ldr	r1, [sp, #16]
 800be52:	9a05      	ldr	r2, [sp, #20]
 800be54:	2920      	cmp	r1, #32
 800be56:	d818      	bhi.n	800be8a <__hexnan+0x7e>
 800be58:	9b02      	ldr	r3, [sp, #8]
 800be5a:	459b      	cmp	fp, r3
 800be5c:	dd13      	ble.n	800be86 <__hexnan+0x7a>
 800be5e:	454c      	cmp	r4, r9
 800be60:	d206      	bcs.n	800be70 <__hexnan+0x64>
 800be62:	2d07      	cmp	r5, #7
 800be64:	dc04      	bgt.n	800be70 <__hexnan+0x64>
 800be66:	462a      	mov	r2, r5
 800be68:	4649      	mov	r1, r9
 800be6a:	4620      	mov	r0, r4
 800be6c:	f7ff ffa8 	bl	800bdc0 <L_shift>
 800be70:	4544      	cmp	r4, r8
 800be72:	d950      	bls.n	800bf16 <__hexnan+0x10a>
 800be74:	2300      	movs	r3, #0
 800be76:	f1a4 0904 	sub.w	r9, r4, #4
 800be7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800be7e:	f8cd b008 	str.w	fp, [sp, #8]
 800be82:	464c      	mov	r4, r9
 800be84:	461d      	mov	r5, r3
 800be86:	9a03      	ldr	r2, [sp, #12]
 800be88:	e7d7      	b.n	800be3a <__hexnan+0x2e>
 800be8a:	2929      	cmp	r1, #41	; 0x29
 800be8c:	d156      	bne.n	800bf3c <__hexnan+0x130>
 800be8e:	3202      	adds	r2, #2
 800be90:	f8ca 2000 	str.w	r2, [sl]
 800be94:	f1bb 0f00 	cmp.w	fp, #0
 800be98:	d050      	beq.n	800bf3c <__hexnan+0x130>
 800be9a:	454c      	cmp	r4, r9
 800be9c:	d206      	bcs.n	800beac <__hexnan+0xa0>
 800be9e:	2d07      	cmp	r5, #7
 800bea0:	dc04      	bgt.n	800beac <__hexnan+0xa0>
 800bea2:	462a      	mov	r2, r5
 800bea4:	4649      	mov	r1, r9
 800bea6:	4620      	mov	r0, r4
 800bea8:	f7ff ff8a 	bl	800bdc0 <L_shift>
 800beac:	4544      	cmp	r4, r8
 800beae:	d934      	bls.n	800bf1a <__hexnan+0x10e>
 800beb0:	f1a8 0204 	sub.w	r2, r8, #4
 800beb4:	4623      	mov	r3, r4
 800beb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800beba:	f842 1f04 	str.w	r1, [r2, #4]!
 800bebe:	429f      	cmp	r7, r3
 800bec0:	d2f9      	bcs.n	800beb6 <__hexnan+0xaa>
 800bec2:	1b3b      	subs	r3, r7, r4
 800bec4:	f023 0303 	bic.w	r3, r3, #3
 800bec8:	3304      	adds	r3, #4
 800beca:	3401      	adds	r4, #1
 800becc:	3e03      	subs	r6, #3
 800bece:	42b4      	cmp	r4, r6
 800bed0:	bf88      	it	hi
 800bed2:	2304      	movhi	r3, #4
 800bed4:	4443      	add	r3, r8
 800bed6:	2200      	movs	r2, #0
 800bed8:	f843 2b04 	str.w	r2, [r3], #4
 800bedc:	429f      	cmp	r7, r3
 800bede:	d2fb      	bcs.n	800bed8 <__hexnan+0xcc>
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	b91b      	cbnz	r3, 800beec <__hexnan+0xe0>
 800bee4:	4547      	cmp	r7, r8
 800bee6:	d127      	bne.n	800bf38 <__hexnan+0x12c>
 800bee8:	2301      	movs	r3, #1
 800beea:	603b      	str	r3, [r7, #0]
 800beec:	2005      	movs	r0, #5
 800beee:	e026      	b.n	800bf3e <__hexnan+0x132>
 800bef0:	3501      	adds	r5, #1
 800bef2:	2d08      	cmp	r5, #8
 800bef4:	f10b 0b01 	add.w	fp, fp, #1
 800bef8:	dd06      	ble.n	800bf08 <__hexnan+0xfc>
 800befa:	4544      	cmp	r4, r8
 800befc:	d9c3      	bls.n	800be86 <__hexnan+0x7a>
 800befe:	2300      	movs	r3, #0
 800bf00:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf04:	2501      	movs	r5, #1
 800bf06:	3c04      	subs	r4, #4
 800bf08:	6822      	ldr	r2, [r4, #0]
 800bf0a:	f000 000f 	and.w	r0, r0, #15
 800bf0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bf12:	6022      	str	r2, [r4, #0]
 800bf14:	e7b7      	b.n	800be86 <__hexnan+0x7a>
 800bf16:	2508      	movs	r5, #8
 800bf18:	e7b5      	b.n	800be86 <__hexnan+0x7a>
 800bf1a:	9b01      	ldr	r3, [sp, #4]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d0df      	beq.n	800bee0 <__hexnan+0xd4>
 800bf20:	f04f 32ff 	mov.w	r2, #4294967295
 800bf24:	f1c3 0320 	rsb	r3, r3, #32
 800bf28:	fa22 f303 	lsr.w	r3, r2, r3
 800bf2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bf30:	401a      	ands	r2, r3
 800bf32:	f846 2c04 	str.w	r2, [r6, #-4]
 800bf36:	e7d3      	b.n	800bee0 <__hexnan+0xd4>
 800bf38:	3f04      	subs	r7, #4
 800bf3a:	e7d1      	b.n	800bee0 <__hexnan+0xd4>
 800bf3c:	2004      	movs	r0, #4
 800bf3e:	b007      	add	sp, #28
 800bf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf44 <_localeconv_r>:
 800bf44:	4800      	ldr	r0, [pc, #0]	; (800bf48 <_localeconv_r+0x4>)
 800bf46:	4770      	bx	lr
 800bf48:	200002e4 	.word	0x200002e4

0800bf4c <__ascii_mbtowc>:
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	b901      	cbnz	r1, 800bf52 <__ascii_mbtowc+0x6>
 800bf50:	a901      	add	r1, sp, #4
 800bf52:	b142      	cbz	r2, 800bf66 <__ascii_mbtowc+0x1a>
 800bf54:	b14b      	cbz	r3, 800bf6a <__ascii_mbtowc+0x1e>
 800bf56:	7813      	ldrb	r3, [r2, #0]
 800bf58:	600b      	str	r3, [r1, #0]
 800bf5a:	7812      	ldrb	r2, [r2, #0]
 800bf5c:	1e10      	subs	r0, r2, #0
 800bf5e:	bf18      	it	ne
 800bf60:	2001      	movne	r0, #1
 800bf62:	b002      	add	sp, #8
 800bf64:	4770      	bx	lr
 800bf66:	4610      	mov	r0, r2
 800bf68:	e7fb      	b.n	800bf62 <__ascii_mbtowc+0x16>
 800bf6a:	f06f 0001 	mvn.w	r0, #1
 800bf6e:	e7f8      	b.n	800bf62 <__ascii_mbtowc+0x16>

0800bf70 <__malloc_lock>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__malloc_lock+0x8>)
 800bf72:	f000 be94 	b.w	800cc9e <__retarget_lock_acquire_recursive>
 800bf76:	bf00      	nop
 800bf78:	20000714 	.word	0x20000714

0800bf7c <__malloc_unlock>:
 800bf7c:	4801      	ldr	r0, [pc, #4]	; (800bf84 <__malloc_unlock+0x8>)
 800bf7e:	f000 be8f 	b.w	800cca0 <__retarget_lock_release_recursive>
 800bf82:	bf00      	nop
 800bf84:	20000714 	.word	0x20000714

0800bf88 <_Balloc>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf8c:	4604      	mov	r4, r0
 800bf8e:	460d      	mov	r5, r1
 800bf90:	b976      	cbnz	r6, 800bfb0 <_Balloc+0x28>
 800bf92:	2010      	movs	r0, #16
 800bf94:	f7fd f894 	bl	80090c0 <malloc>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6260      	str	r0, [r4, #36]	; 0x24
 800bf9c:	b920      	cbnz	r0, 800bfa8 <_Balloc+0x20>
 800bf9e:	4b18      	ldr	r3, [pc, #96]	; (800c000 <_Balloc+0x78>)
 800bfa0:	4818      	ldr	r0, [pc, #96]	; (800c004 <_Balloc+0x7c>)
 800bfa2:	2166      	movs	r1, #102	; 0x66
 800bfa4:	f000 fe4a 	bl	800cc3c <__assert_func>
 800bfa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfac:	6006      	str	r6, [r0, #0]
 800bfae:	60c6      	str	r6, [r0, #12]
 800bfb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bfb2:	68f3      	ldr	r3, [r6, #12]
 800bfb4:	b183      	cbz	r3, 800bfd8 <_Balloc+0x50>
 800bfb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfbe:	b9b8      	cbnz	r0, 800bff0 <_Balloc+0x68>
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	fa01 f605 	lsl.w	r6, r1, r5
 800bfc6:	1d72      	adds	r2, r6, #5
 800bfc8:	0092      	lsls	r2, r2, #2
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f000 fc9a 	bl	800c904 <_calloc_r>
 800bfd0:	b160      	cbz	r0, 800bfec <_Balloc+0x64>
 800bfd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfd6:	e00e      	b.n	800bff6 <_Balloc+0x6e>
 800bfd8:	2221      	movs	r2, #33	; 0x21
 800bfda:	2104      	movs	r1, #4
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f000 fc91 	bl	800c904 <_calloc_r>
 800bfe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfe4:	60f0      	str	r0, [r6, #12]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1e4      	bne.n	800bfb6 <_Balloc+0x2e>
 800bfec:	2000      	movs	r0, #0
 800bfee:	bd70      	pop	{r4, r5, r6, pc}
 800bff0:	6802      	ldr	r2, [r0, #0]
 800bff2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bff6:	2300      	movs	r3, #0
 800bff8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bffc:	e7f7      	b.n	800bfee <_Balloc+0x66>
 800bffe:	bf00      	nop
 800c000:	0800ddde 	.word	0x0800ddde
 800c004:	0800df20 	.word	0x0800df20

0800c008 <_Bfree>:
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c00c:	4605      	mov	r5, r0
 800c00e:	460c      	mov	r4, r1
 800c010:	b976      	cbnz	r6, 800c030 <_Bfree+0x28>
 800c012:	2010      	movs	r0, #16
 800c014:	f7fd f854 	bl	80090c0 <malloc>
 800c018:	4602      	mov	r2, r0
 800c01a:	6268      	str	r0, [r5, #36]	; 0x24
 800c01c:	b920      	cbnz	r0, 800c028 <_Bfree+0x20>
 800c01e:	4b09      	ldr	r3, [pc, #36]	; (800c044 <_Bfree+0x3c>)
 800c020:	4809      	ldr	r0, [pc, #36]	; (800c048 <_Bfree+0x40>)
 800c022:	218a      	movs	r1, #138	; 0x8a
 800c024:	f000 fe0a 	bl	800cc3c <__assert_func>
 800c028:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c02c:	6006      	str	r6, [r0, #0]
 800c02e:	60c6      	str	r6, [r0, #12]
 800c030:	b13c      	cbz	r4, 800c042 <_Bfree+0x3a>
 800c032:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c034:	6862      	ldr	r2, [r4, #4]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c03c:	6021      	str	r1, [r4, #0]
 800c03e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c042:	bd70      	pop	{r4, r5, r6, pc}
 800c044:	0800ddde 	.word	0x0800ddde
 800c048:	0800df20 	.word	0x0800df20

0800c04c <__multadd>:
 800c04c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c050:	690d      	ldr	r5, [r1, #16]
 800c052:	4607      	mov	r7, r0
 800c054:	460c      	mov	r4, r1
 800c056:	461e      	mov	r6, r3
 800c058:	f101 0c14 	add.w	ip, r1, #20
 800c05c:	2000      	movs	r0, #0
 800c05e:	f8dc 3000 	ldr.w	r3, [ip]
 800c062:	b299      	uxth	r1, r3
 800c064:	fb02 6101 	mla	r1, r2, r1, r6
 800c068:	0c1e      	lsrs	r6, r3, #16
 800c06a:	0c0b      	lsrs	r3, r1, #16
 800c06c:	fb02 3306 	mla	r3, r2, r6, r3
 800c070:	b289      	uxth	r1, r1
 800c072:	3001      	adds	r0, #1
 800c074:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c078:	4285      	cmp	r5, r0
 800c07a:	f84c 1b04 	str.w	r1, [ip], #4
 800c07e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c082:	dcec      	bgt.n	800c05e <__multadd+0x12>
 800c084:	b30e      	cbz	r6, 800c0ca <__multadd+0x7e>
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	42ab      	cmp	r3, r5
 800c08a:	dc19      	bgt.n	800c0c0 <__multadd+0x74>
 800c08c:	6861      	ldr	r1, [r4, #4]
 800c08e:	4638      	mov	r0, r7
 800c090:	3101      	adds	r1, #1
 800c092:	f7ff ff79 	bl	800bf88 <_Balloc>
 800c096:	4680      	mov	r8, r0
 800c098:	b928      	cbnz	r0, 800c0a6 <__multadd+0x5a>
 800c09a:	4602      	mov	r2, r0
 800c09c:	4b0c      	ldr	r3, [pc, #48]	; (800c0d0 <__multadd+0x84>)
 800c09e:	480d      	ldr	r0, [pc, #52]	; (800c0d4 <__multadd+0x88>)
 800c0a0:	21b5      	movs	r1, #181	; 0xb5
 800c0a2:	f000 fdcb 	bl	800cc3c <__assert_func>
 800c0a6:	6922      	ldr	r2, [r4, #16]
 800c0a8:	3202      	adds	r2, #2
 800c0aa:	f104 010c 	add.w	r1, r4, #12
 800c0ae:	0092      	lsls	r2, r2, #2
 800c0b0:	300c      	adds	r0, #12
 800c0b2:	f7fd f80d 	bl	80090d0 <memcpy>
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7ff ffa5 	bl	800c008 <_Bfree>
 800c0be:	4644      	mov	r4, r8
 800c0c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	615e      	str	r6, [r3, #20]
 800c0c8:	6125      	str	r5, [r4, #16]
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d0:	0800de73 	.word	0x0800de73
 800c0d4:	0800df20 	.word	0x0800df20

0800c0d8 <__s2b>:
 800c0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0dc:	460c      	mov	r4, r1
 800c0de:	4615      	mov	r5, r2
 800c0e0:	461f      	mov	r7, r3
 800c0e2:	2209      	movs	r2, #9
 800c0e4:	3308      	adds	r3, #8
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	db09      	blt.n	800c108 <__s2b+0x30>
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f7ff ff47 	bl	800bf88 <_Balloc>
 800c0fa:	b940      	cbnz	r0, 800c10e <__s2b+0x36>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	4b19      	ldr	r3, [pc, #100]	; (800c164 <__s2b+0x8c>)
 800c100:	4819      	ldr	r0, [pc, #100]	; (800c168 <__s2b+0x90>)
 800c102:	21ce      	movs	r1, #206	; 0xce
 800c104:	f000 fd9a 	bl	800cc3c <__assert_func>
 800c108:	0052      	lsls	r2, r2, #1
 800c10a:	3101      	adds	r1, #1
 800c10c:	e7f0      	b.n	800c0f0 <__s2b+0x18>
 800c10e:	9b08      	ldr	r3, [sp, #32]
 800c110:	6143      	str	r3, [r0, #20]
 800c112:	2d09      	cmp	r5, #9
 800c114:	f04f 0301 	mov.w	r3, #1
 800c118:	6103      	str	r3, [r0, #16]
 800c11a:	dd16      	ble.n	800c14a <__s2b+0x72>
 800c11c:	f104 0909 	add.w	r9, r4, #9
 800c120:	46c8      	mov	r8, r9
 800c122:	442c      	add	r4, r5
 800c124:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c128:	4601      	mov	r1, r0
 800c12a:	3b30      	subs	r3, #48	; 0x30
 800c12c:	220a      	movs	r2, #10
 800c12e:	4630      	mov	r0, r6
 800c130:	f7ff ff8c 	bl	800c04c <__multadd>
 800c134:	45a0      	cmp	r8, r4
 800c136:	d1f5      	bne.n	800c124 <__s2b+0x4c>
 800c138:	f1a5 0408 	sub.w	r4, r5, #8
 800c13c:	444c      	add	r4, r9
 800c13e:	1b2d      	subs	r5, r5, r4
 800c140:	1963      	adds	r3, r4, r5
 800c142:	42bb      	cmp	r3, r7
 800c144:	db04      	blt.n	800c150 <__s2b+0x78>
 800c146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c14a:	340a      	adds	r4, #10
 800c14c:	2509      	movs	r5, #9
 800c14e:	e7f6      	b.n	800c13e <__s2b+0x66>
 800c150:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c154:	4601      	mov	r1, r0
 800c156:	3b30      	subs	r3, #48	; 0x30
 800c158:	220a      	movs	r2, #10
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff ff76 	bl	800c04c <__multadd>
 800c160:	e7ee      	b.n	800c140 <__s2b+0x68>
 800c162:	bf00      	nop
 800c164:	0800de73 	.word	0x0800de73
 800c168:	0800df20 	.word	0x0800df20

0800c16c <__hi0bits>:
 800c16c:	0c03      	lsrs	r3, r0, #16
 800c16e:	041b      	lsls	r3, r3, #16
 800c170:	b9d3      	cbnz	r3, 800c1a8 <__hi0bits+0x3c>
 800c172:	0400      	lsls	r0, r0, #16
 800c174:	2310      	movs	r3, #16
 800c176:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c17a:	bf04      	itt	eq
 800c17c:	0200      	lsleq	r0, r0, #8
 800c17e:	3308      	addeq	r3, #8
 800c180:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c184:	bf04      	itt	eq
 800c186:	0100      	lsleq	r0, r0, #4
 800c188:	3304      	addeq	r3, #4
 800c18a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c18e:	bf04      	itt	eq
 800c190:	0080      	lsleq	r0, r0, #2
 800c192:	3302      	addeq	r3, #2
 800c194:	2800      	cmp	r0, #0
 800c196:	db05      	blt.n	800c1a4 <__hi0bits+0x38>
 800c198:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c19c:	f103 0301 	add.w	r3, r3, #1
 800c1a0:	bf08      	it	eq
 800c1a2:	2320      	moveq	r3, #32
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	4770      	bx	lr
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	e7e4      	b.n	800c176 <__hi0bits+0xa>

0800c1ac <__lo0bits>:
 800c1ac:	6803      	ldr	r3, [r0, #0]
 800c1ae:	f013 0207 	ands.w	r2, r3, #7
 800c1b2:	4601      	mov	r1, r0
 800c1b4:	d00b      	beq.n	800c1ce <__lo0bits+0x22>
 800c1b6:	07da      	lsls	r2, r3, #31
 800c1b8:	d423      	bmi.n	800c202 <__lo0bits+0x56>
 800c1ba:	0798      	lsls	r0, r3, #30
 800c1bc:	bf49      	itett	mi
 800c1be:	085b      	lsrmi	r3, r3, #1
 800c1c0:	089b      	lsrpl	r3, r3, #2
 800c1c2:	2001      	movmi	r0, #1
 800c1c4:	600b      	strmi	r3, [r1, #0]
 800c1c6:	bf5c      	itt	pl
 800c1c8:	600b      	strpl	r3, [r1, #0]
 800c1ca:	2002      	movpl	r0, #2
 800c1cc:	4770      	bx	lr
 800c1ce:	b298      	uxth	r0, r3
 800c1d0:	b9a8      	cbnz	r0, 800c1fe <__lo0bits+0x52>
 800c1d2:	0c1b      	lsrs	r3, r3, #16
 800c1d4:	2010      	movs	r0, #16
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	b90a      	cbnz	r2, 800c1de <__lo0bits+0x32>
 800c1da:	3008      	adds	r0, #8
 800c1dc:	0a1b      	lsrs	r3, r3, #8
 800c1de:	071a      	lsls	r2, r3, #28
 800c1e0:	bf04      	itt	eq
 800c1e2:	091b      	lsreq	r3, r3, #4
 800c1e4:	3004      	addeq	r0, #4
 800c1e6:	079a      	lsls	r2, r3, #30
 800c1e8:	bf04      	itt	eq
 800c1ea:	089b      	lsreq	r3, r3, #2
 800c1ec:	3002      	addeq	r0, #2
 800c1ee:	07da      	lsls	r2, r3, #31
 800c1f0:	d403      	bmi.n	800c1fa <__lo0bits+0x4e>
 800c1f2:	085b      	lsrs	r3, r3, #1
 800c1f4:	f100 0001 	add.w	r0, r0, #1
 800c1f8:	d005      	beq.n	800c206 <__lo0bits+0x5a>
 800c1fa:	600b      	str	r3, [r1, #0]
 800c1fc:	4770      	bx	lr
 800c1fe:	4610      	mov	r0, r2
 800c200:	e7e9      	b.n	800c1d6 <__lo0bits+0x2a>
 800c202:	2000      	movs	r0, #0
 800c204:	4770      	bx	lr
 800c206:	2020      	movs	r0, #32
 800c208:	4770      	bx	lr
	...

0800c20c <__i2b>:
 800c20c:	b510      	push	{r4, lr}
 800c20e:	460c      	mov	r4, r1
 800c210:	2101      	movs	r1, #1
 800c212:	f7ff feb9 	bl	800bf88 <_Balloc>
 800c216:	4602      	mov	r2, r0
 800c218:	b928      	cbnz	r0, 800c226 <__i2b+0x1a>
 800c21a:	4b05      	ldr	r3, [pc, #20]	; (800c230 <__i2b+0x24>)
 800c21c:	4805      	ldr	r0, [pc, #20]	; (800c234 <__i2b+0x28>)
 800c21e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c222:	f000 fd0b 	bl	800cc3c <__assert_func>
 800c226:	2301      	movs	r3, #1
 800c228:	6144      	str	r4, [r0, #20]
 800c22a:	6103      	str	r3, [r0, #16]
 800c22c:	bd10      	pop	{r4, pc}
 800c22e:	bf00      	nop
 800c230:	0800de73 	.word	0x0800de73
 800c234:	0800df20 	.word	0x0800df20

0800c238 <__multiply>:
 800c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	4691      	mov	r9, r2
 800c23e:	690a      	ldr	r2, [r1, #16]
 800c240:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c244:	429a      	cmp	r2, r3
 800c246:	bfb8      	it	lt
 800c248:	460b      	movlt	r3, r1
 800c24a:	460c      	mov	r4, r1
 800c24c:	bfbc      	itt	lt
 800c24e:	464c      	movlt	r4, r9
 800c250:	4699      	movlt	r9, r3
 800c252:	6927      	ldr	r7, [r4, #16]
 800c254:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c258:	68a3      	ldr	r3, [r4, #8]
 800c25a:	6861      	ldr	r1, [r4, #4]
 800c25c:	eb07 060a 	add.w	r6, r7, sl
 800c260:	42b3      	cmp	r3, r6
 800c262:	b085      	sub	sp, #20
 800c264:	bfb8      	it	lt
 800c266:	3101      	addlt	r1, #1
 800c268:	f7ff fe8e 	bl	800bf88 <_Balloc>
 800c26c:	b930      	cbnz	r0, 800c27c <__multiply+0x44>
 800c26e:	4602      	mov	r2, r0
 800c270:	4b44      	ldr	r3, [pc, #272]	; (800c384 <__multiply+0x14c>)
 800c272:	4845      	ldr	r0, [pc, #276]	; (800c388 <__multiply+0x150>)
 800c274:	f240 115d 	movw	r1, #349	; 0x15d
 800c278:	f000 fce0 	bl	800cc3c <__assert_func>
 800c27c:	f100 0514 	add.w	r5, r0, #20
 800c280:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c284:	462b      	mov	r3, r5
 800c286:	2200      	movs	r2, #0
 800c288:	4543      	cmp	r3, r8
 800c28a:	d321      	bcc.n	800c2d0 <__multiply+0x98>
 800c28c:	f104 0314 	add.w	r3, r4, #20
 800c290:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c294:	f109 0314 	add.w	r3, r9, #20
 800c298:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c29c:	9202      	str	r2, [sp, #8]
 800c29e:	1b3a      	subs	r2, r7, r4
 800c2a0:	3a15      	subs	r2, #21
 800c2a2:	f022 0203 	bic.w	r2, r2, #3
 800c2a6:	3204      	adds	r2, #4
 800c2a8:	f104 0115 	add.w	r1, r4, #21
 800c2ac:	428f      	cmp	r7, r1
 800c2ae:	bf38      	it	cc
 800c2b0:	2204      	movcc	r2, #4
 800c2b2:	9201      	str	r2, [sp, #4]
 800c2b4:	9a02      	ldr	r2, [sp, #8]
 800c2b6:	9303      	str	r3, [sp, #12]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d80c      	bhi.n	800c2d6 <__multiply+0x9e>
 800c2bc:	2e00      	cmp	r6, #0
 800c2be:	dd03      	ble.n	800c2c8 <__multiply+0x90>
 800c2c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d05a      	beq.n	800c37e <__multiply+0x146>
 800c2c8:	6106      	str	r6, [r0, #16]
 800c2ca:	b005      	add	sp, #20
 800c2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d0:	f843 2b04 	str.w	r2, [r3], #4
 800c2d4:	e7d8      	b.n	800c288 <__multiply+0x50>
 800c2d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2da:	f1ba 0f00 	cmp.w	sl, #0
 800c2de:	d024      	beq.n	800c32a <__multiply+0xf2>
 800c2e0:	f104 0e14 	add.w	lr, r4, #20
 800c2e4:	46a9      	mov	r9, r5
 800c2e6:	f04f 0c00 	mov.w	ip, #0
 800c2ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2ee:	f8d9 1000 	ldr.w	r1, [r9]
 800c2f2:	fa1f fb82 	uxth.w	fp, r2
 800c2f6:	b289      	uxth	r1, r1
 800c2f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c2fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c300:	f8d9 2000 	ldr.w	r2, [r9]
 800c304:	4461      	add	r1, ip
 800c306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c30a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c30e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c312:	b289      	uxth	r1, r1
 800c314:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c318:	4577      	cmp	r7, lr
 800c31a:	f849 1b04 	str.w	r1, [r9], #4
 800c31e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c322:	d8e2      	bhi.n	800c2ea <__multiply+0xb2>
 800c324:	9a01      	ldr	r2, [sp, #4]
 800c326:	f845 c002 	str.w	ip, [r5, r2]
 800c32a:	9a03      	ldr	r2, [sp, #12]
 800c32c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c330:	3304      	adds	r3, #4
 800c332:	f1b9 0f00 	cmp.w	r9, #0
 800c336:	d020      	beq.n	800c37a <__multiply+0x142>
 800c338:	6829      	ldr	r1, [r5, #0]
 800c33a:	f104 0c14 	add.w	ip, r4, #20
 800c33e:	46ae      	mov	lr, r5
 800c340:	f04f 0a00 	mov.w	sl, #0
 800c344:	f8bc b000 	ldrh.w	fp, [ip]
 800c348:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c34c:	fb09 220b 	mla	r2, r9, fp, r2
 800c350:	4492      	add	sl, r2
 800c352:	b289      	uxth	r1, r1
 800c354:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c358:	f84e 1b04 	str.w	r1, [lr], #4
 800c35c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c360:	f8be 1000 	ldrh.w	r1, [lr]
 800c364:	0c12      	lsrs	r2, r2, #16
 800c366:	fb09 1102 	mla	r1, r9, r2, r1
 800c36a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c36e:	4567      	cmp	r7, ip
 800c370:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c374:	d8e6      	bhi.n	800c344 <__multiply+0x10c>
 800c376:	9a01      	ldr	r2, [sp, #4]
 800c378:	50a9      	str	r1, [r5, r2]
 800c37a:	3504      	adds	r5, #4
 800c37c:	e79a      	b.n	800c2b4 <__multiply+0x7c>
 800c37e:	3e01      	subs	r6, #1
 800c380:	e79c      	b.n	800c2bc <__multiply+0x84>
 800c382:	bf00      	nop
 800c384:	0800de73 	.word	0x0800de73
 800c388:	0800df20 	.word	0x0800df20

0800c38c <__pow5mult>:
 800c38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c390:	4615      	mov	r5, r2
 800c392:	f012 0203 	ands.w	r2, r2, #3
 800c396:	4606      	mov	r6, r0
 800c398:	460f      	mov	r7, r1
 800c39a:	d007      	beq.n	800c3ac <__pow5mult+0x20>
 800c39c:	4c25      	ldr	r4, [pc, #148]	; (800c434 <__pow5mult+0xa8>)
 800c39e:	3a01      	subs	r2, #1
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3a6:	f7ff fe51 	bl	800c04c <__multadd>
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	10ad      	asrs	r5, r5, #2
 800c3ae:	d03d      	beq.n	800c42c <__pow5mult+0xa0>
 800c3b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c3b2:	b97c      	cbnz	r4, 800c3d4 <__pow5mult+0x48>
 800c3b4:	2010      	movs	r0, #16
 800c3b6:	f7fc fe83 	bl	80090c0 <malloc>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	6270      	str	r0, [r6, #36]	; 0x24
 800c3be:	b928      	cbnz	r0, 800c3cc <__pow5mult+0x40>
 800c3c0:	4b1d      	ldr	r3, [pc, #116]	; (800c438 <__pow5mult+0xac>)
 800c3c2:	481e      	ldr	r0, [pc, #120]	; (800c43c <__pow5mult+0xb0>)
 800c3c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c3c8:	f000 fc38 	bl	800cc3c <__assert_func>
 800c3cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3d0:	6004      	str	r4, [r0, #0]
 800c3d2:	60c4      	str	r4, [r0, #12]
 800c3d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c3d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3dc:	b94c      	cbnz	r4, 800c3f2 <__pow5mult+0x66>
 800c3de:	f240 2171 	movw	r1, #625	; 0x271
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	f7ff ff12 	bl	800c20c <__i2b>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	6003      	str	r3, [r0, #0]
 800c3f2:	f04f 0900 	mov.w	r9, #0
 800c3f6:	07eb      	lsls	r3, r5, #31
 800c3f8:	d50a      	bpl.n	800c410 <__pow5mult+0x84>
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	4630      	mov	r0, r6
 800c400:	f7ff ff1a 	bl	800c238 <__multiply>
 800c404:	4639      	mov	r1, r7
 800c406:	4680      	mov	r8, r0
 800c408:	4630      	mov	r0, r6
 800c40a:	f7ff fdfd 	bl	800c008 <_Bfree>
 800c40e:	4647      	mov	r7, r8
 800c410:	106d      	asrs	r5, r5, #1
 800c412:	d00b      	beq.n	800c42c <__pow5mult+0xa0>
 800c414:	6820      	ldr	r0, [r4, #0]
 800c416:	b938      	cbnz	r0, 800c428 <__pow5mult+0x9c>
 800c418:	4622      	mov	r2, r4
 800c41a:	4621      	mov	r1, r4
 800c41c:	4630      	mov	r0, r6
 800c41e:	f7ff ff0b 	bl	800c238 <__multiply>
 800c422:	6020      	str	r0, [r4, #0]
 800c424:	f8c0 9000 	str.w	r9, [r0]
 800c428:	4604      	mov	r4, r0
 800c42a:	e7e4      	b.n	800c3f6 <__pow5mult+0x6a>
 800c42c:	4638      	mov	r0, r7
 800c42e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c432:	bf00      	nop
 800c434:	0800e090 	.word	0x0800e090
 800c438:	0800ddde 	.word	0x0800ddde
 800c43c:	0800df20 	.word	0x0800df20

0800c440 <__lshift>:
 800c440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c444:	460c      	mov	r4, r1
 800c446:	6849      	ldr	r1, [r1, #4]
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c44e:	68a3      	ldr	r3, [r4, #8]
 800c450:	4607      	mov	r7, r0
 800c452:	4691      	mov	r9, r2
 800c454:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c458:	f108 0601 	add.w	r6, r8, #1
 800c45c:	42b3      	cmp	r3, r6
 800c45e:	db0b      	blt.n	800c478 <__lshift+0x38>
 800c460:	4638      	mov	r0, r7
 800c462:	f7ff fd91 	bl	800bf88 <_Balloc>
 800c466:	4605      	mov	r5, r0
 800c468:	b948      	cbnz	r0, 800c47e <__lshift+0x3e>
 800c46a:	4602      	mov	r2, r0
 800c46c:	4b2a      	ldr	r3, [pc, #168]	; (800c518 <__lshift+0xd8>)
 800c46e:	482b      	ldr	r0, [pc, #172]	; (800c51c <__lshift+0xdc>)
 800c470:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c474:	f000 fbe2 	bl	800cc3c <__assert_func>
 800c478:	3101      	adds	r1, #1
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	e7ee      	b.n	800c45c <__lshift+0x1c>
 800c47e:	2300      	movs	r3, #0
 800c480:	f100 0114 	add.w	r1, r0, #20
 800c484:	f100 0210 	add.w	r2, r0, #16
 800c488:	4618      	mov	r0, r3
 800c48a:	4553      	cmp	r3, sl
 800c48c:	db37      	blt.n	800c4fe <__lshift+0xbe>
 800c48e:	6920      	ldr	r0, [r4, #16]
 800c490:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c494:	f104 0314 	add.w	r3, r4, #20
 800c498:	f019 091f 	ands.w	r9, r9, #31
 800c49c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c4a4:	d02f      	beq.n	800c506 <__lshift+0xc6>
 800c4a6:	f1c9 0e20 	rsb	lr, r9, #32
 800c4aa:	468a      	mov	sl, r1
 800c4ac:	f04f 0c00 	mov.w	ip, #0
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	fa02 f209 	lsl.w	r2, r2, r9
 800c4b6:	ea42 020c 	orr.w	r2, r2, ip
 800c4ba:	f84a 2b04 	str.w	r2, [sl], #4
 800c4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c2:	4298      	cmp	r0, r3
 800c4c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c4c8:	d8f2      	bhi.n	800c4b0 <__lshift+0x70>
 800c4ca:	1b03      	subs	r3, r0, r4
 800c4cc:	3b15      	subs	r3, #21
 800c4ce:	f023 0303 	bic.w	r3, r3, #3
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	f104 0215 	add.w	r2, r4, #21
 800c4d8:	4290      	cmp	r0, r2
 800c4da:	bf38      	it	cc
 800c4dc:	2304      	movcc	r3, #4
 800c4de:	f841 c003 	str.w	ip, [r1, r3]
 800c4e2:	f1bc 0f00 	cmp.w	ip, #0
 800c4e6:	d001      	beq.n	800c4ec <__lshift+0xac>
 800c4e8:	f108 0602 	add.w	r6, r8, #2
 800c4ec:	3e01      	subs	r6, #1
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	612e      	str	r6, [r5, #16]
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	f7ff fd88 	bl	800c008 <_Bfree>
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c502:	3301      	adds	r3, #1
 800c504:	e7c1      	b.n	800c48a <__lshift+0x4a>
 800c506:	3904      	subs	r1, #4
 800c508:	f853 2b04 	ldr.w	r2, [r3], #4
 800c50c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c510:	4298      	cmp	r0, r3
 800c512:	d8f9      	bhi.n	800c508 <__lshift+0xc8>
 800c514:	e7ea      	b.n	800c4ec <__lshift+0xac>
 800c516:	bf00      	nop
 800c518:	0800de73 	.word	0x0800de73
 800c51c:	0800df20 	.word	0x0800df20

0800c520 <__mcmp>:
 800c520:	b530      	push	{r4, r5, lr}
 800c522:	6902      	ldr	r2, [r0, #16]
 800c524:	690c      	ldr	r4, [r1, #16]
 800c526:	1b12      	subs	r2, r2, r4
 800c528:	d10e      	bne.n	800c548 <__mcmp+0x28>
 800c52a:	f100 0314 	add.w	r3, r0, #20
 800c52e:	3114      	adds	r1, #20
 800c530:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c534:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c538:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c53c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c540:	42a5      	cmp	r5, r4
 800c542:	d003      	beq.n	800c54c <__mcmp+0x2c>
 800c544:	d305      	bcc.n	800c552 <__mcmp+0x32>
 800c546:	2201      	movs	r2, #1
 800c548:	4610      	mov	r0, r2
 800c54a:	bd30      	pop	{r4, r5, pc}
 800c54c:	4283      	cmp	r3, r0
 800c54e:	d3f3      	bcc.n	800c538 <__mcmp+0x18>
 800c550:	e7fa      	b.n	800c548 <__mcmp+0x28>
 800c552:	f04f 32ff 	mov.w	r2, #4294967295
 800c556:	e7f7      	b.n	800c548 <__mcmp+0x28>

0800c558 <__mdiff>:
 800c558:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	460c      	mov	r4, r1
 800c55e:	4606      	mov	r6, r0
 800c560:	4611      	mov	r1, r2
 800c562:	4620      	mov	r0, r4
 800c564:	4690      	mov	r8, r2
 800c566:	f7ff ffdb 	bl	800c520 <__mcmp>
 800c56a:	1e05      	subs	r5, r0, #0
 800c56c:	d110      	bne.n	800c590 <__mdiff+0x38>
 800c56e:	4629      	mov	r1, r5
 800c570:	4630      	mov	r0, r6
 800c572:	f7ff fd09 	bl	800bf88 <_Balloc>
 800c576:	b930      	cbnz	r0, 800c586 <__mdiff+0x2e>
 800c578:	4b3a      	ldr	r3, [pc, #232]	; (800c664 <__mdiff+0x10c>)
 800c57a:	4602      	mov	r2, r0
 800c57c:	f240 2132 	movw	r1, #562	; 0x232
 800c580:	4839      	ldr	r0, [pc, #228]	; (800c668 <__mdiff+0x110>)
 800c582:	f000 fb5b 	bl	800cc3c <__assert_func>
 800c586:	2301      	movs	r3, #1
 800c588:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c58c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c590:	bfa4      	itt	ge
 800c592:	4643      	movge	r3, r8
 800c594:	46a0      	movge	r8, r4
 800c596:	4630      	mov	r0, r6
 800c598:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c59c:	bfa6      	itte	ge
 800c59e:	461c      	movge	r4, r3
 800c5a0:	2500      	movge	r5, #0
 800c5a2:	2501      	movlt	r5, #1
 800c5a4:	f7ff fcf0 	bl	800bf88 <_Balloc>
 800c5a8:	b920      	cbnz	r0, 800c5b4 <__mdiff+0x5c>
 800c5aa:	4b2e      	ldr	r3, [pc, #184]	; (800c664 <__mdiff+0x10c>)
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c5b2:	e7e5      	b.n	800c580 <__mdiff+0x28>
 800c5b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5b8:	6926      	ldr	r6, [r4, #16]
 800c5ba:	60c5      	str	r5, [r0, #12]
 800c5bc:	f104 0914 	add.w	r9, r4, #20
 800c5c0:	f108 0514 	add.w	r5, r8, #20
 800c5c4:	f100 0e14 	add.w	lr, r0, #20
 800c5c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5d0:	f108 0210 	add.w	r2, r8, #16
 800c5d4:	46f2      	mov	sl, lr
 800c5d6:	2100      	movs	r1, #0
 800c5d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5e0:	fa1f f883 	uxth.w	r8, r3
 800c5e4:	fa11 f18b 	uxtah	r1, r1, fp
 800c5e8:	0c1b      	lsrs	r3, r3, #16
 800c5ea:	eba1 0808 	sub.w	r8, r1, r8
 800c5ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5f6:	fa1f f888 	uxth.w	r8, r8
 800c5fa:	1419      	asrs	r1, r3, #16
 800c5fc:	454e      	cmp	r6, r9
 800c5fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c602:	f84a 3b04 	str.w	r3, [sl], #4
 800c606:	d8e7      	bhi.n	800c5d8 <__mdiff+0x80>
 800c608:	1b33      	subs	r3, r6, r4
 800c60a:	3b15      	subs	r3, #21
 800c60c:	f023 0303 	bic.w	r3, r3, #3
 800c610:	3304      	adds	r3, #4
 800c612:	3415      	adds	r4, #21
 800c614:	42a6      	cmp	r6, r4
 800c616:	bf38      	it	cc
 800c618:	2304      	movcc	r3, #4
 800c61a:	441d      	add	r5, r3
 800c61c:	4473      	add	r3, lr
 800c61e:	469e      	mov	lr, r3
 800c620:	462e      	mov	r6, r5
 800c622:	4566      	cmp	r6, ip
 800c624:	d30e      	bcc.n	800c644 <__mdiff+0xec>
 800c626:	f10c 0203 	add.w	r2, ip, #3
 800c62a:	1b52      	subs	r2, r2, r5
 800c62c:	f022 0203 	bic.w	r2, r2, #3
 800c630:	3d03      	subs	r5, #3
 800c632:	45ac      	cmp	ip, r5
 800c634:	bf38      	it	cc
 800c636:	2200      	movcc	r2, #0
 800c638:	441a      	add	r2, r3
 800c63a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c63e:	b17b      	cbz	r3, 800c660 <__mdiff+0x108>
 800c640:	6107      	str	r7, [r0, #16]
 800c642:	e7a3      	b.n	800c58c <__mdiff+0x34>
 800c644:	f856 8b04 	ldr.w	r8, [r6], #4
 800c648:	fa11 f288 	uxtah	r2, r1, r8
 800c64c:	1414      	asrs	r4, r2, #16
 800c64e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c652:	b292      	uxth	r2, r2
 800c654:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c658:	f84e 2b04 	str.w	r2, [lr], #4
 800c65c:	1421      	asrs	r1, r4, #16
 800c65e:	e7e0      	b.n	800c622 <__mdiff+0xca>
 800c660:	3f01      	subs	r7, #1
 800c662:	e7ea      	b.n	800c63a <__mdiff+0xe2>
 800c664:	0800de73 	.word	0x0800de73
 800c668:	0800df20 	.word	0x0800df20

0800c66c <__ulp>:
 800c66c:	b082      	sub	sp, #8
 800c66e:	ed8d 0b00 	vstr	d0, [sp]
 800c672:	9b01      	ldr	r3, [sp, #4]
 800c674:	4912      	ldr	r1, [pc, #72]	; (800c6c0 <__ulp+0x54>)
 800c676:	4019      	ands	r1, r3
 800c678:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c67c:	2900      	cmp	r1, #0
 800c67e:	dd05      	ble.n	800c68c <__ulp+0x20>
 800c680:	2200      	movs	r2, #0
 800c682:	460b      	mov	r3, r1
 800c684:	ec43 2b10 	vmov	d0, r2, r3
 800c688:	b002      	add	sp, #8
 800c68a:	4770      	bx	lr
 800c68c:	4249      	negs	r1, r1
 800c68e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c692:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c696:	f04f 0200 	mov.w	r2, #0
 800c69a:	f04f 0300 	mov.w	r3, #0
 800c69e:	da04      	bge.n	800c6aa <__ulp+0x3e>
 800c6a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c6a4:	fa41 f300 	asr.w	r3, r1, r0
 800c6a8:	e7ec      	b.n	800c684 <__ulp+0x18>
 800c6aa:	f1a0 0114 	sub.w	r1, r0, #20
 800c6ae:	291e      	cmp	r1, #30
 800c6b0:	bfda      	itte	le
 800c6b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c6b6:	fa20 f101 	lsrle.w	r1, r0, r1
 800c6ba:	2101      	movgt	r1, #1
 800c6bc:	460a      	mov	r2, r1
 800c6be:	e7e1      	b.n	800c684 <__ulp+0x18>
 800c6c0:	7ff00000 	.word	0x7ff00000

0800c6c4 <__b2d>:
 800c6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c6:	6905      	ldr	r5, [r0, #16]
 800c6c8:	f100 0714 	add.w	r7, r0, #20
 800c6cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c6d0:	1f2e      	subs	r6, r5, #4
 800c6d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	f7ff fd48 	bl	800c16c <__hi0bits>
 800c6dc:	f1c0 0320 	rsb	r3, r0, #32
 800c6e0:	280a      	cmp	r0, #10
 800c6e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c760 <__b2d+0x9c>
 800c6e6:	600b      	str	r3, [r1, #0]
 800c6e8:	dc14      	bgt.n	800c714 <__b2d+0x50>
 800c6ea:	f1c0 0e0b 	rsb	lr, r0, #11
 800c6ee:	fa24 f10e 	lsr.w	r1, r4, lr
 800c6f2:	42b7      	cmp	r7, r6
 800c6f4:	ea41 030c 	orr.w	r3, r1, ip
 800c6f8:	bf34      	ite	cc
 800c6fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c6fe:	2100      	movcs	r1, #0
 800c700:	3015      	adds	r0, #21
 800c702:	fa04 f000 	lsl.w	r0, r4, r0
 800c706:	fa21 f10e 	lsr.w	r1, r1, lr
 800c70a:	ea40 0201 	orr.w	r2, r0, r1
 800c70e:	ec43 2b10 	vmov	d0, r2, r3
 800c712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c714:	42b7      	cmp	r7, r6
 800c716:	bf3a      	itte	cc
 800c718:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c71c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c720:	2100      	movcs	r1, #0
 800c722:	380b      	subs	r0, #11
 800c724:	d017      	beq.n	800c756 <__b2d+0x92>
 800c726:	f1c0 0c20 	rsb	ip, r0, #32
 800c72a:	fa04 f500 	lsl.w	r5, r4, r0
 800c72e:	42be      	cmp	r6, r7
 800c730:	fa21 f40c 	lsr.w	r4, r1, ip
 800c734:	ea45 0504 	orr.w	r5, r5, r4
 800c738:	bf8c      	ite	hi
 800c73a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c73e:	2400      	movls	r4, #0
 800c740:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c744:	fa01 f000 	lsl.w	r0, r1, r0
 800c748:	fa24 f40c 	lsr.w	r4, r4, ip
 800c74c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c750:	ea40 0204 	orr.w	r2, r0, r4
 800c754:	e7db      	b.n	800c70e <__b2d+0x4a>
 800c756:	ea44 030c 	orr.w	r3, r4, ip
 800c75a:	460a      	mov	r2, r1
 800c75c:	e7d7      	b.n	800c70e <__b2d+0x4a>
 800c75e:	bf00      	nop
 800c760:	3ff00000 	.word	0x3ff00000

0800c764 <__d2b>:
 800c764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c768:	4689      	mov	r9, r1
 800c76a:	2101      	movs	r1, #1
 800c76c:	ec57 6b10 	vmov	r6, r7, d0
 800c770:	4690      	mov	r8, r2
 800c772:	f7ff fc09 	bl	800bf88 <_Balloc>
 800c776:	4604      	mov	r4, r0
 800c778:	b930      	cbnz	r0, 800c788 <__d2b+0x24>
 800c77a:	4602      	mov	r2, r0
 800c77c:	4b25      	ldr	r3, [pc, #148]	; (800c814 <__d2b+0xb0>)
 800c77e:	4826      	ldr	r0, [pc, #152]	; (800c818 <__d2b+0xb4>)
 800c780:	f240 310a 	movw	r1, #778	; 0x30a
 800c784:	f000 fa5a 	bl	800cc3c <__assert_func>
 800c788:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c78c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c790:	bb35      	cbnz	r5, 800c7e0 <__d2b+0x7c>
 800c792:	2e00      	cmp	r6, #0
 800c794:	9301      	str	r3, [sp, #4]
 800c796:	d028      	beq.n	800c7ea <__d2b+0x86>
 800c798:	4668      	mov	r0, sp
 800c79a:	9600      	str	r6, [sp, #0]
 800c79c:	f7ff fd06 	bl	800c1ac <__lo0bits>
 800c7a0:	9900      	ldr	r1, [sp, #0]
 800c7a2:	b300      	cbz	r0, 800c7e6 <__d2b+0x82>
 800c7a4:	9a01      	ldr	r2, [sp, #4]
 800c7a6:	f1c0 0320 	rsb	r3, r0, #32
 800c7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ae:	430b      	orrs	r3, r1
 800c7b0:	40c2      	lsrs	r2, r0
 800c7b2:	6163      	str	r3, [r4, #20]
 800c7b4:	9201      	str	r2, [sp, #4]
 800c7b6:	9b01      	ldr	r3, [sp, #4]
 800c7b8:	61a3      	str	r3, [r4, #24]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	bf14      	ite	ne
 800c7be:	2202      	movne	r2, #2
 800c7c0:	2201      	moveq	r2, #1
 800c7c2:	6122      	str	r2, [r4, #16]
 800c7c4:	b1d5      	cbz	r5, 800c7fc <__d2b+0x98>
 800c7c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c7ca:	4405      	add	r5, r0
 800c7cc:	f8c9 5000 	str.w	r5, [r9]
 800c7d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c7d4:	f8c8 0000 	str.w	r0, [r8]
 800c7d8:	4620      	mov	r0, r4
 800c7da:	b003      	add	sp, #12
 800c7dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7e4:	e7d5      	b.n	800c792 <__d2b+0x2e>
 800c7e6:	6161      	str	r1, [r4, #20]
 800c7e8:	e7e5      	b.n	800c7b6 <__d2b+0x52>
 800c7ea:	a801      	add	r0, sp, #4
 800c7ec:	f7ff fcde 	bl	800c1ac <__lo0bits>
 800c7f0:	9b01      	ldr	r3, [sp, #4]
 800c7f2:	6163      	str	r3, [r4, #20]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	6122      	str	r2, [r4, #16]
 800c7f8:	3020      	adds	r0, #32
 800c7fa:	e7e3      	b.n	800c7c4 <__d2b+0x60>
 800c7fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c800:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c804:	f8c9 0000 	str.w	r0, [r9]
 800c808:	6918      	ldr	r0, [r3, #16]
 800c80a:	f7ff fcaf 	bl	800c16c <__hi0bits>
 800c80e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c812:	e7df      	b.n	800c7d4 <__d2b+0x70>
 800c814:	0800de73 	.word	0x0800de73
 800c818:	0800df20 	.word	0x0800df20

0800c81c <__ratio>:
 800c81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c820:	4688      	mov	r8, r1
 800c822:	4669      	mov	r1, sp
 800c824:	4681      	mov	r9, r0
 800c826:	f7ff ff4d 	bl	800c6c4 <__b2d>
 800c82a:	a901      	add	r1, sp, #4
 800c82c:	4640      	mov	r0, r8
 800c82e:	ec55 4b10 	vmov	r4, r5, d0
 800c832:	ee10 aa10 	vmov	sl, s0
 800c836:	f7ff ff45 	bl	800c6c4 <__b2d>
 800c83a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c83e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c842:	1a59      	subs	r1, r3, r1
 800c844:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c84e:	ec57 6b10 	vmov	r6, r7, d0
 800c852:	2b00      	cmp	r3, #0
 800c854:	bfd6      	itet	le
 800c856:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c85a:	462a      	movgt	r2, r5
 800c85c:	463a      	movle	r2, r7
 800c85e:	46ab      	mov	fp, r5
 800c860:	bfd6      	itet	le
 800c862:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c866:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c86a:	ee00 3a90 	vmovle	s1, r3
 800c86e:	ec4b ab17 	vmov	d7, sl, fp
 800c872:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c876:	b003      	add	sp, #12
 800c878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c87c <__copybits>:
 800c87c:	3901      	subs	r1, #1
 800c87e:	b570      	push	{r4, r5, r6, lr}
 800c880:	1149      	asrs	r1, r1, #5
 800c882:	6914      	ldr	r4, [r2, #16]
 800c884:	3101      	adds	r1, #1
 800c886:	f102 0314 	add.w	r3, r2, #20
 800c88a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c88e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c892:	1f05      	subs	r5, r0, #4
 800c894:	42a3      	cmp	r3, r4
 800c896:	d30c      	bcc.n	800c8b2 <__copybits+0x36>
 800c898:	1aa3      	subs	r3, r4, r2
 800c89a:	3b11      	subs	r3, #17
 800c89c:	f023 0303 	bic.w	r3, r3, #3
 800c8a0:	3211      	adds	r2, #17
 800c8a2:	42a2      	cmp	r2, r4
 800c8a4:	bf88      	it	hi
 800c8a6:	2300      	movhi	r3, #0
 800c8a8:	4418      	add	r0, r3
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	4288      	cmp	r0, r1
 800c8ae:	d305      	bcc.n	800c8bc <__copybits+0x40>
 800c8b0:	bd70      	pop	{r4, r5, r6, pc}
 800c8b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c8b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c8ba:	e7eb      	b.n	800c894 <__copybits+0x18>
 800c8bc:	f840 3b04 	str.w	r3, [r0], #4
 800c8c0:	e7f4      	b.n	800c8ac <__copybits+0x30>

0800c8c2 <__any_on>:
 800c8c2:	f100 0214 	add.w	r2, r0, #20
 800c8c6:	6900      	ldr	r0, [r0, #16]
 800c8c8:	114b      	asrs	r3, r1, #5
 800c8ca:	4298      	cmp	r0, r3
 800c8cc:	b510      	push	{r4, lr}
 800c8ce:	db11      	blt.n	800c8f4 <__any_on+0x32>
 800c8d0:	dd0a      	ble.n	800c8e8 <__any_on+0x26>
 800c8d2:	f011 011f 	ands.w	r1, r1, #31
 800c8d6:	d007      	beq.n	800c8e8 <__any_on+0x26>
 800c8d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c8dc:	fa24 f001 	lsr.w	r0, r4, r1
 800c8e0:	fa00 f101 	lsl.w	r1, r0, r1
 800c8e4:	428c      	cmp	r4, r1
 800c8e6:	d10b      	bne.n	800c900 <__any_on+0x3e>
 800c8e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d803      	bhi.n	800c8f8 <__any_on+0x36>
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	bd10      	pop	{r4, pc}
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	e7f7      	b.n	800c8e8 <__any_on+0x26>
 800c8f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8fc:	2900      	cmp	r1, #0
 800c8fe:	d0f5      	beq.n	800c8ec <__any_on+0x2a>
 800c900:	2001      	movs	r0, #1
 800c902:	e7f6      	b.n	800c8f2 <__any_on+0x30>

0800c904 <_calloc_r>:
 800c904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c906:	fba1 2402 	umull	r2, r4, r1, r2
 800c90a:	b94c      	cbnz	r4, 800c920 <_calloc_r+0x1c>
 800c90c:	4611      	mov	r1, r2
 800c90e:	9201      	str	r2, [sp, #4]
 800c910:	f7fc fc60 	bl	80091d4 <_malloc_r>
 800c914:	9a01      	ldr	r2, [sp, #4]
 800c916:	4605      	mov	r5, r0
 800c918:	b930      	cbnz	r0, 800c928 <_calloc_r+0x24>
 800c91a:	4628      	mov	r0, r5
 800c91c:	b003      	add	sp, #12
 800c91e:	bd30      	pop	{r4, r5, pc}
 800c920:	220c      	movs	r2, #12
 800c922:	6002      	str	r2, [r0, #0]
 800c924:	2500      	movs	r5, #0
 800c926:	e7f8      	b.n	800c91a <_calloc_r+0x16>
 800c928:	4621      	mov	r1, r4
 800c92a:	f7fc fbdf 	bl	80090ec <memset>
 800c92e:	e7f4      	b.n	800c91a <_calloc_r+0x16>

0800c930 <__ssputs_r>:
 800c930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c934:	688e      	ldr	r6, [r1, #8]
 800c936:	429e      	cmp	r6, r3
 800c938:	4682      	mov	sl, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	4690      	mov	r8, r2
 800c93e:	461f      	mov	r7, r3
 800c940:	d838      	bhi.n	800c9b4 <__ssputs_r+0x84>
 800c942:	898a      	ldrh	r2, [r1, #12]
 800c944:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c948:	d032      	beq.n	800c9b0 <__ssputs_r+0x80>
 800c94a:	6825      	ldr	r5, [r4, #0]
 800c94c:	6909      	ldr	r1, [r1, #16]
 800c94e:	eba5 0901 	sub.w	r9, r5, r1
 800c952:	6965      	ldr	r5, [r4, #20]
 800c954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c95c:	3301      	adds	r3, #1
 800c95e:	444b      	add	r3, r9
 800c960:	106d      	asrs	r5, r5, #1
 800c962:	429d      	cmp	r5, r3
 800c964:	bf38      	it	cc
 800c966:	461d      	movcc	r5, r3
 800c968:	0553      	lsls	r3, r2, #21
 800c96a:	d531      	bpl.n	800c9d0 <__ssputs_r+0xa0>
 800c96c:	4629      	mov	r1, r5
 800c96e:	f7fc fc31 	bl	80091d4 <_malloc_r>
 800c972:	4606      	mov	r6, r0
 800c974:	b950      	cbnz	r0, 800c98c <__ssputs_r+0x5c>
 800c976:	230c      	movs	r3, #12
 800c978:	f8ca 3000 	str.w	r3, [sl]
 800c97c:	89a3      	ldrh	r3, [r4, #12]
 800c97e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c982:	81a3      	strh	r3, [r4, #12]
 800c984:	f04f 30ff 	mov.w	r0, #4294967295
 800c988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98c:	6921      	ldr	r1, [r4, #16]
 800c98e:	464a      	mov	r2, r9
 800c990:	f7fc fb9e 	bl	80090d0 <memcpy>
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c99a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c99e:	81a3      	strh	r3, [r4, #12]
 800c9a0:	6126      	str	r6, [r4, #16]
 800c9a2:	6165      	str	r5, [r4, #20]
 800c9a4:	444e      	add	r6, r9
 800c9a6:	eba5 0509 	sub.w	r5, r5, r9
 800c9aa:	6026      	str	r6, [r4, #0]
 800c9ac:	60a5      	str	r5, [r4, #8]
 800c9ae:	463e      	mov	r6, r7
 800c9b0:	42be      	cmp	r6, r7
 800c9b2:	d900      	bls.n	800c9b6 <__ssputs_r+0x86>
 800c9b4:	463e      	mov	r6, r7
 800c9b6:	6820      	ldr	r0, [r4, #0]
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	4641      	mov	r1, r8
 800c9bc:	f000 f971 	bl	800cca2 <memmove>
 800c9c0:	68a3      	ldr	r3, [r4, #8]
 800c9c2:	1b9b      	subs	r3, r3, r6
 800c9c4:	60a3      	str	r3, [r4, #8]
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	4433      	add	r3, r6
 800c9ca:	6023      	str	r3, [r4, #0]
 800c9cc:	2000      	movs	r0, #0
 800c9ce:	e7db      	b.n	800c988 <__ssputs_r+0x58>
 800c9d0:	462a      	mov	r2, r5
 800c9d2:	f000 f980 	bl	800ccd6 <_realloc_r>
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d1e1      	bne.n	800c9a0 <__ssputs_r+0x70>
 800c9dc:	6921      	ldr	r1, [r4, #16]
 800c9de:	4650      	mov	r0, sl
 800c9e0:	f7fc fb8c 	bl	80090fc <_free_r>
 800c9e4:	e7c7      	b.n	800c976 <__ssputs_r+0x46>
	...

0800c9e8 <_svfiprintf_r>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	4698      	mov	r8, r3
 800c9ee:	898b      	ldrh	r3, [r1, #12]
 800c9f0:	061b      	lsls	r3, r3, #24
 800c9f2:	b09d      	sub	sp, #116	; 0x74
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	460d      	mov	r5, r1
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	d50e      	bpl.n	800ca1a <_svfiprintf_r+0x32>
 800c9fc:	690b      	ldr	r3, [r1, #16]
 800c9fe:	b963      	cbnz	r3, 800ca1a <_svfiprintf_r+0x32>
 800ca00:	2140      	movs	r1, #64	; 0x40
 800ca02:	f7fc fbe7 	bl	80091d4 <_malloc_r>
 800ca06:	6028      	str	r0, [r5, #0]
 800ca08:	6128      	str	r0, [r5, #16]
 800ca0a:	b920      	cbnz	r0, 800ca16 <_svfiprintf_r+0x2e>
 800ca0c:	230c      	movs	r3, #12
 800ca0e:	603b      	str	r3, [r7, #0]
 800ca10:	f04f 30ff 	mov.w	r0, #4294967295
 800ca14:	e0d1      	b.n	800cbba <_svfiprintf_r+0x1d2>
 800ca16:	2340      	movs	r3, #64	; 0x40
 800ca18:	616b      	str	r3, [r5, #20]
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1e:	2320      	movs	r3, #32
 800ca20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca28:	2330      	movs	r3, #48	; 0x30
 800ca2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cbd4 <_svfiprintf_r+0x1ec>
 800ca2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca32:	f04f 0901 	mov.w	r9, #1
 800ca36:	4623      	mov	r3, r4
 800ca38:	469a      	mov	sl, r3
 800ca3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca3e:	b10a      	cbz	r2, 800ca44 <_svfiprintf_r+0x5c>
 800ca40:	2a25      	cmp	r2, #37	; 0x25
 800ca42:	d1f9      	bne.n	800ca38 <_svfiprintf_r+0x50>
 800ca44:	ebba 0b04 	subs.w	fp, sl, r4
 800ca48:	d00b      	beq.n	800ca62 <_svfiprintf_r+0x7a>
 800ca4a:	465b      	mov	r3, fp
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	4629      	mov	r1, r5
 800ca50:	4638      	mov	r0, r7
 800ca52:	f7ff ff6d 	bl	800c930 <__ssputs_r>
 800ca56:	3001      	adds	r0, #1
 800ca58:	f000 80aa 	beq.w	800cbb0 <_svfiprintf_r+0x1c8>
 800ca5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca5e:	445a      	add	r2, fp
 800ca60:	9209      	str	r2, [sp, #36]	; 0x24
 800ca62:	f89a 3000 	ldrb.w	r3, [sl]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 80a2 	beq.w	800cbb0 <_svfiprintf_r+0x1c8>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca76:	f10a 0a01 	add.w	sl, sl, #1
 800ca7a:	9304      	str	r3, [sp, #16]
 800ca7c:	9307      	str	r3, [sp, #28]
 800ca7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca82:	931a      	str	r3, [sp, #104]	; 0x68
 800ca84:	4654      	mov	r4, sl
 800ca86:	2205      	movs	r2, #5
 800ca88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca8c:	4851      	ldr	r0, [pc, #324]	; (800cbd4 <_svfiprintf_r+0x1ec>)
 800ca8e:	f7f3 fbdf 	bl	8000250 <memchr>
 800ca92:	9a04      	ldr	r2, [sp, #16]
 800ca94:	b9d8      	cbnz	r0, 800cace <_svfiprintf_r+0xe6>
 800ca96:	06d0      	lsls	r0, r2, #27
 800ca98:	bf44      	itt	mi
 800ca9a:	2320      	movmi	r3, #32
 800ca9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caa0:	0711      	lsls	r1, r2, #28
 800caa2:	bf44      	itt	mi
 800caa4:	232b      	movmi	r3, #43	; 0x2b
 800caa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caaa:	f89a 3000 	ldrb.w	r3, [sl]
 800caae:	2b2a      	cmp	r3, #42	; 0x2a
 800cab0:	d015      	beq.n	800cade <_svfiprintf_r+0xf6>
 800cab2:	9a07      	ldr	r2, [sp, #28]
 800cab4:	4654      	mov	r4, sl
 800cab6:	2000      	movs	r0, #0
 800cab8:	f04f 0c0a 	mov.w	ip, #10
 800cabc:	4621      	mov	r1, r4
 800cabe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cac2:	3b30      	subs	r3, #48	; 0x30
 800cac4:	2b09      	cmp	r3, #9
 800cac6:	d94e      	bls.n	800cb66 <_svfiprintf_r+0x17e>
 800cac8:	b1b0      	cbz	r0, 800caf8 <_svfiprintf_r+0x110>
 800caca:	9207      	str	r2, [sp, #28]
 800cacc:	e014      	b.n	800caf8 <_svfiprintf_r+0x110>
 800cace:	eba0 0308 	sub.w	r3, r0, r8
 800cad2:	fa09 f303 	lsl.w	r3, r9, r3
 800cad6:	4313      	orrs	r3, r2
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	46a2      	mov	sl, r4
 800cadc:	e7d2      	b.n	800ca84 <_svfiprintf_r+0x9c>
 800cade:	9b03      	ldr	r3, [sp, #12]
 800cae0:	1d19      	adds	r1, r3, #4
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	9103      	str	r1, [sp, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	bfbb      	ittet	lt
 800caea:	425b      	neglt	r3, r3
 800caec:	f042 0202 	orrlt.w	r2, r2, #2
 800caf0:	9307      	strge	r3, [sp, #28]
 800caf2:	9307      	strlt	r3, [sp, #28]
 800caf4:	bfb8      	it	lt
 800caf6:	9204      	strlt	r2, [sp, #16]
 800caf8:	7823      	ldrb	r3, [r4, #0]
 800cafa:	2b2e      	cmp	r3, #46	; 0x2e
 800cafc:	d10c      	bne.n	800cb18 <_svfiprintf_r+0x130>
 800cafe:	7863      	ldrb	r3, [r4, #1]
 800cb00:	2b2a      	cmp	r3, #42	; 0x2a
 800cb02:	d135      	bne.n	800cb70 <_svfiprintf_r+0x188>
 800cb04:	9b03      	ldr	r3, [sp, #12]
 800cb06:	1d1a      	adds	r2, r3, #4
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	9203      	str	r2, [sp, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	bfb8      	it	lt
 800cb10:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb14:	3402      	adds	r4, #2
 800cb16:	9305      	str	r3, [sp, #20]
 800cb18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cbe4 <_svfiprintf_r+0x1fc>
 800cb1c:	7821      	ldrb	r1, [r4, #0]
 800cb1e:	2203      	movs	r2, #3
 800cb20:	4650      	mov	r0, sl
 800cb22:	f7f3 fb95 	bl	8000250 <memchr>
 800cb26:	b140      	cbz	r0, 800cb3a <_svfiprintf_r+0x152>
 800cb28:	2340      	movs	r3, #64	; 0x40
 800cb2a:	eba0 000a 	sub.w	r0, r0, sl
 800cb2e:	fa03 f000 	lsl.w	r0, r3, r0
 800cb32:	9b04      	ldr	r3, [sp, #16]
 800cb34:	4303      	orrs	r3, r0
 800cb36:	3401      	adds	r4, #1
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb3e:	4826      	ldr	r0, [pc, #152]	; (800cbd8 <_svfiprintf_r+0x1f0>)
 800cb40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb44:	2206      	movs	r2, #6
 800cb46:	f7f3 fb83 	bl	8000250 <memchr>
 800cb4a:	2800      	cmp	r0, #0
 800cb4c:	d038      	beq.n	800cbc0 <_svfiprintf_r+0x1d8>
 800cb4e:	4b23      	ldr	r3, [pc, #140]	; (800cbdc <_svfiprintf_r+0x1f4>)
 800cb50:	bb1b      	cbnz	r3, 800cb9a <_svfiprintf_r+0x1b2>
 800cb52:	9b03      	ldr	r3, [sp, #12]
 800cb54:	3307      	adds	r3, #7
 800cb56:	f023 0307 	bic.w	r3, r3, #7
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	9303      	str	r3, [sp, #12]
 800cb5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb60:	4433      	add	r3, r6
 800cb62:	9309      	str	r3, [sp, #36]	; 0x24
 800cb64:	e767      	b.n	800ca36 <_svfiprintf_r+0x4e>
 800cb66:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb6a:	460c      	mov	r4, r1
 800cb6c:	2001      	movs	r0, #1
 800cb6e:	e7a5      	b.n	800cabc <_svfiprintf_r+0xd4>
 800cb70:	2300      	movs	r3, #0
 800cb72:	3401      	adds	r4, #1
 800cb74:	9305      	str	r3, [sp, #20]
 800cb76:	4619      	mov	r1, r3
 800cb78:	f04f 0c0a 	mov.w	ip, #10
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb82:	3a30      	subs	r2, #48	; 0x30
 800cb84:	2a09      	cmp	r2, #9
 800cb86:	d903      	bls.n	800cb90 <_svfiprintf_r+0x1a8>
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d0c5      	beq.n	800cb18 <_svfiprintf_r+0x130>
 800cb8c:	9105      	str	r1, [sp, #20]
 800cb8e:	e7c3      	b.n	800cb18 <_svfiprintf_r+0x130>
 800cb90:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb94:	4604      	mov	r4, r0
 800cb96:	2301      	movs	r3, #1
 800cb98:	e7f0      	b.n	800cb7c <_svfiprintf_r+0x194>
 800cb9a:	ab03      	add	r3, sp, #12
 800cb9c:	9300      	str	r3, [sp, #0]
 800cb9e:	462a      	mov	r2, r5
 800cba0:	4b0f      	ldr	r3, [pc, #60]	; (800cbe0 <_svfiprintf_r+0x1f8>)
 800cba2:	a904      	add	r1, sp, #16
 800cba4:	4638      	mov	r0, r7
 800cba6:	f7fc fc1b 	bl	80093e0 <_printf_float>
 800cbaa:	1c42      	adds	r2, r0, #1
 800cbac:	4606      	mov	r6, r0
 800cbae:	d1d6      	bne.n	800cb5e <_svfiprintf_r+0x176>
 800cbb0:	89ab      	ldrh	r3, [r5, #12]
 800cbb2:	065b      	lsls	r3, r3, #25
 800cbb4:	f53f af2c 	bmi.w	800ca10 <_svfiprintf_r+0x28>
 800cbb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbba:	b01d      	add	sp, #116	; 0x74
 800cbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc0:	ab03      	add	r3, sp, #12
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	462a      	mov	r2, r5
 800cbc6:	4b06      	ldr	r3, [pc, #24]	; (800cbe0 <_svfiprintf_r+0x1f8>)
 800cbc8:	a904      	add	r1, sp, #16
 800cbca:	4638      	mov	r0, r7
 800cbcc:	f7fc fe94 	bl	80098f8 <_printf_i>
 800cbd0:	e7eb      	b.n	800cbaa <_svfiprintf_r+0x1c2>
 800cbd2:	bf00      	nop
 800cbd4:	0800e09c 	.word	0x0800e09c
 800cbd8:	0800e0a6 	.word	0x0800e0a6
 800cbdc:	080093e1 	.word	0x080093e1
 800cbe0:	0800c931 	.word	0x0800c931
 800cbe4:	0800e0a2 	.word	0x0800e0a2

0800cbe8 <nan>:
 800cbe8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cbf0 <nan+0x8>
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	00000000 	.word	0x00000000
 800cbf4:	7ff80000 	.word	0x7ff80000

0800cbf8 <strncmp>:
 800cbf8:	b510      	push	{r4, lr}
 800cbfa:	b17a      	cbz	r2, 800cc1c <strncmp+0x24>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	3901      	subs	r1, #1
 800cc00:	1884      	adds	r4, r0, r2
 800cc02:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc0a:	4290      	cmp	r0, r2
 800cc0c:	d101      	bne.n	800cc12 <strncmp+0x1a>
 800cc0e:	42a3      	cmp	r3, r4
 800cc10:	d101      	bne.n	800cc16 <strncmp+0x1e>
 800cc12:	1a80      	subs	r0, r0, r2
 800cc14:	bd10      	pop	{r4, pc}
 800cc16:	2800      	cmp	r0, #0
 800cc18:	d1f3      	bne.n	800cc02 <strncmp+0xa>
 800cc1a:	e7fa      	b.n	800cc12 <strncmp+0x1a>
 800cc1c:	4610      	mov	r0, r2
 800cc1e:	e7f9      	b.n	800cc14 <strncmp+0x1c>

0800cc20 <__ascii_wctomb>:
 800cc20:	b149      	cbz	r1, 800cc36 <__ascii_wctomb+0x16>
 800cc22:	2aff      	cmp	r2, #255	; 0xff
 800cc24:	bf85      	ittet	hi
 800cc26:	238a      	movhi	r3, #138	; 0x8a
 800cc28:	6003      	strhi	r3, [r0, #0]
 800cc2a:	700a      	strbls	r2, [r1, #0]
 800cc2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800cc30:	bf98      	it	ls
 800cc32:	2001      	movls	r0, #1
 800cc34:	4770      	bx	lr
 800cc36:	4608      	mov	r0, r1
 800cc38:	4770      	bx	lr
	...

0800cc3c <__assert_func>:
 800cc3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc3e:	4614      	mov	r4, r2
 800cc40:	461a      	mov	r2, r3
 800cc42:	4b09      	ldr	r3, [pc, #36]	; (800cc68 <__assert_func+0x2c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4605      	mov	r5, r0
 800cc48:	68d8      	ldr	r0, [r3, #12]
 800cc4a:	b14c      	cbz	r4, 800cc60 <__assert_func+0x24>
 800cc4c:	4b07      	ldr	r3, [pc, #28]	; (800cc6c <__assert_func+0x30>)
 800cc4e:	9100      	str	r1, [sp, #0]
 800cc50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc54:	4906      	ldr	r1, [pc, #24]	; (800cc70 <__assert_func+0x34>)
 800cc56:	462b      	mov	r3, r5
 800cc58:	f000 f80e 	bl	800cc78 <fiprintf>
 800cc5c:	f000 fa84 	bl	800d168 <abort>
 800cc60:	4b04      	ldr	r3, [pc, #16]	; (800cc74 <__assert_func+0x38>)
 800cc62:	461c      	mov	r4, r3
 800cc64:	e7f3      	b.n	800cc4e <__assert_func+0x12>
 800cc66:	bf00      	nop
 800cc68:	2000018c 	.word	0x2000018c
 800cc6c:	0800e0ad 	.word	0x0800e0ad
 800cc70:	0800e0ba 	.word	0x0800e0ba
 800cc74:	0800e0e8 	.word	0x0800e0e8

0800cc78 <fiprintf>:
 800cc78:	b40e      	push	{r1, r2, r3}
 800cc7a:	b503      	push	{r0, r1, lr}
 800cc7c:	4601      	mov	r1, r0
 800cc7e:	ab03      	add	r3, sp, #12
 800cc80:	4805      	ldr	r0, [pc, #20]	; (800cc98 <fiprintf+0x20>)
 800cc82:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc86:	6800      	ldr	r0, [r0, #0]
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	f000 f87d 	bl	800cd88 <_vfiprintf_r>
 800cc8e:	b002      	add	sp, #8
 800cc90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc94:	b003      	add	sp, #12
 800cc96:	4770      	bx	lr
 800cc98:	2000018c 	.word	0x2000018c

0800cc9c <__retarget_lock_init_recursive>:
 800cc9c:	4770      	bx	lr

0800cc9e <__retarget_lock_acquire_recursive>:
 800cc9e:	4770      	bx	lr

0800cca0 <__retarget_lock_release_recursive>:
 800cca0:	4770      	bx	lr

0800cca2 <memmove>:
 800cca2:	4288      	cmp	r0, r1
 800cca4:	b510      	push	{r4, lr}
 800cca6:	eb01 0402 	add.w	r4, r1, r2
 800ccaa:	d902      	bls.n	800ccb2 <memmove+0x10>
 800ccac:	4284      	cmp	r4, r0
 800ccae:	4623      	mov	r3, r4
 800ccb0:	d807      	bhi.n	800ccc2 <memmove+0x20>
 800ccb2:	1e43      	subs	r3, r0, #1
 800ccb4:	42a1      	cmp	r1, r4
 800ccb6:	d008      	beq.n	800ccca <memmove+0x28>
 800ccb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccbc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccc0:	e7f8      	b.n	800ccb4 <memmove+0x12>
 800ccc2:	4402      	add	r2, r0
 800ccc4:	4601      	mov	r1, r0
 800ccc6:	428a      	cmp	r2, r1
 800ccc8:	d100      	bne.n	800cccc <memmove+0x2a>
 800ccca:	bd10      	pop	{r4, pc}
 800cccc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccd0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccd4:	e7f7      	b.n	800ccc6 <memmove+0x24>

0800ccd6 <_realloc_r>:
 800ccd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccda:	4680      	mov	r8, r0
 800ccdc:	4614      	mov	r4, r2
 800ccde:	460e      	mov	r6, r1
 800cce0:	b921      	cbnz	r1, 800ccec <_realloc_r+0x16>
 800cce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cce6:	4611      	mov	r1, r2
 800cce8:	f7fc ba74 	b.w	80091d4 <_malloc_r>
 800ccec:	b92a      	cbnz	r2, 800ccfa <_realloc_r+0x24>
 800ccee:	f7fc fa05 	bl	80090fc <_free_r>
 800ccf2:	4625      	mov	r5, r4
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccfa:	f000 fc59 	bl	800d5b0 <_malloc_usable_size_r>
 800ccfe:	4284      	cmp	r4, r0
 800cd00:	4607      	mov	r7, r0
 800cd02:	d802      	bhi.n	800cd0a <_realloc_r+0x34>
 800cd04:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cd08:	d812      	bhi.n	800cd30 <_realloc_r+0x5a>
 800cd0a:	4621      	mov	r1, r4
 800cd0c:	4640      	mov	r0, r8
 800cd0e:	f7fc fa61 	bl	80091d4 <_malloc_r>
 800cd12:	4605      	mov	r5, r0
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d0ed      	beq.n	800ccf4 <_realloc_r+0x1e>
 800cd18:	42bc      	cmp	r4, r7
 800cd1a:	4622      	mov	r2, r4
 800cd1c:	4631      	mov	r1, r6
 800cd1e:	bf28      	it	cs
 800cd20:	463a      	movcs	r2, r7
 800cd22:	f7fc f9d5 	bl	80090d0 <memcpy>
 800cd26:	4631      	mov	r1, r6
 800cd28:	4640      	mov	r0, r8
 800cd2a:	f7fc f9e7 	bl	80090fc <_free_r>
 800cd2e:	e7e1      	b.n	800ccf4 <_realloc_r+0x1e>
 800cd30:	4635      	mov	r5, r6
 800cd32:	e7df      	b.n	800ccf4 <_realloc_r+0x1e>

0800cd34 <__sfputc_r>:
 800cd34:	6893      	ldr	r3, [r2, #8]
 800cd36:	3b01      	subs	r3, #1
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	b410      	push	{r4}
 800cd3c:	6093      	str	r3, [r2, #8]
 800cd3e:	da08      	bge.n	800cd52 <__sfputc_r+0x1e>
 800cd40:	6994      	ldr	r4, [r2, #24]
 800cd42:	42a3      	cmp	r3, r4
 800cd44:	db01      	blt.n	800cd4a <__sfputc_r+0x16>
 800cd46:	290a      	cmp	r1, #10
 800cd48:	d103      	bne.n	800cd52 <__sfputc_r+0x1e>
 800cd4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd4e:	f000 b94b 	b.w	800cfe8 <__swbuf_r>
 800cd52:	6813      	ldr	r3, [r2, #0]
 800cd54:	1c58      	adds	r0, r3, #1
 800cd56:	6010      	str	r0, [r2, #0]
 800cd58:	7019      	strb	r1, [r3, #0]
 800cd5a:	4608      	mov	r0, r1
 800cd5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd60:	4770      	bx	lr

0800cd62 <__sfputs_r>:
 800cd62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd64:	4606      	mov	r6, r0
 800cd66:	460f      	mov	r7, r1
 800cd68:	4614      	mov	r4, r2
 800cd6a:	18d5      	adds	r5, r2, r3
 800cd6c:	42ac      	cmp	r4, r5
 800cd6e:	d101      	bne.n	800cd74 <__sfputs_r+0x12>
 800cd70:	2000      	movs	r0, #0
 800cd72:	e007      	b.n	800cd84 <__sfputs_r+0x22>
 800cd74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd78:	463a      	mov	r2, r7
 800cd7a:	4630      	mov	r0, r6
 800cd7c:	f7ff ffda 	bl	800cd34 <__sfputc_r>
 800cd80:	1c43      	adds	r3, r0, #1
 800cd82:	d1f3      	bne.n	800cd6c <__sfputs_r+0xa>
 800cd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd88 <_vfiprintf_r>:
 800cd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	460d      	mov	r5, r1
 800cd8e:	b09d      	sub	sp, #116	; 0x74
 800cd90:	4614      	mov	r4, r2
 800cd92:	4698      	mov	r8, r3
 800cd94:	4606      	mov	r6, r0
 800cd96:	b118      	cbz	r0, 800cda0 <_vfiprintf_r+0x18>
 800cd98:	6983      	ldr	r3, [r0, #24]
 800cd9a:	b90b      	cbnz	r3, 800cda0 <_vfiprintf_r+0x18>
 800cd9c:	f000 fb06 	bl	800d3ac <__sinit>
 800cda0:	4b89      	ldr	r3, [pc, #548]	; (800cfc8 <_vfiprintf_r+0x240>)
 800cda2:	429d      	cmp	r5, r3
 800cda4:	d11b      	bne.n	800cdde <_vfiprintf_r+0x56>
 800cda6:	6875      	ldr	r5, [r6, #4]
 800cda8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdaa:	07d9      	lsls	r1, r3, #31
 800cdac:	d405      	bmi.n	800cdba <_vfiprintf_r+0x32>
 800cdae:	89ab      	ldrh	r3, [r5, #12]
 800cdb0:	059a      	lsls	r2, r3, #22
 800cdb2:	d402      	bmi.n	800cdba <_vfiprintf_r+0x32>
 800cdb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdb6:	f7ff ff72 	bl	800cc9e <__retarget_lock_acquire_recursive>
 800cdba:	89ab      	ldrh	r3, [r5, #12]
 800cdbc:	071b      	lsls	r3, r3, #28
 800cdbe:	d501      	bpl.n	800cdc4 <_vfiprintf_r+0x3c>
 800cdc0:	692b      	ldr	r3, [r5, #16]
 800cdc2:	b9eb      	cbnz	r3, 800ce00 <_vfiprintf_r+0x78>
 800cdc4:	4629      	mov	r1, r5
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f000 f960 	bl	800d08c <__swsetup_r>
 800cdcc:	b1c0      	cbz	r0, 800ce00 <_vfiprintf_r+0x78>
 800cdce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdd0:	07dc      	lsls	r4, r3, #31
 800cdd2:	d50e      	bpl.n	800cdf2 <_vfiprintf_r+0x6a>
 800cdd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd8:	b01d      	add	sp, #116	; 0x74
 800cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdde:	4b7b      	ldr	r3, [pc, #492]	; (800cfcc <_vfiprintf_r+0x244>)
 800cde0:	429d      	cmp	r5, r3
 800cde2:	d101      	bne.n	800cde8 <_vfiprintf_r+0x60>
 800cde4:	68b5      	ldr	r5, [r6, #8]
 800cde6:	e7df      	b.n	800cda8 <_vfiprintf_r+0x20>
 800cde8:	4b79      	ldr	r3, [pc, #484]	; (800cfd0 <_vfiprintf_r+0x248>)
 800cdea:	429d      	cmp	r5, r3
 800cdec:	bf08      	it	eq
 800cdee:	68f5      	ldreq	r5, [r6, #12]
 800cdf0:	e7da      	b.n	800cda8 <_vfiprintf_r+0x20>
 800cdf2:	89ab      	ldrh	r3, [r5, #12]
 800cdf4:	0598      	lsls	r0, r3, #22
 800cdf6:	d4ed      	bmi.n	800cdd4 <_vfiprintf_r+0x4c>
 800cdf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdfa:	f7ff ff51 	bl	800cca0 <__retarget_lock_release_recursive>
 800cdfe:	e7e9      	b.n	800cdd4 <_vfiprintf_r+0x4c>
 800ce00:	2300      	movs	r3, #0
 800ce02:	9309      	str	r3, [sp, #36]	; 0x24
 800ce04:	2320      	movs	r3, #32
 800ce06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce0e:	2330      	movs	r3, #48	; 0x30
 800ce10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cfd4 <_vfiprintf_r+0x24c>
 800ce14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce18:	f04f 0901 	mov.w	r9, #1
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	469a      	mov	sl, r3
 800ce20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce24:	b10a      	cbz	r2, 800ce2a <_vfiprintf_r+0xa2>
 800ce26:	2a25      	cmp	r2, #37	; 0x25
 800ce28:	d1f9      	bne.n	800ce1e <_vfiprintf_r+0x96>
 800ce2a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce2e:	d00b      	beq.n	800ce48 <_vfiprintf_r+0xc0>
 800ce30:	465b      	mov	r3, fp
 800ce32:	4622      	mov	r2, r4
 800ce34:	4629      	mov	r1, r5
 800ce36:	4630      	mov	r0, r6
 800ce38:	f7ff ff93 	bl	800cd62 <__sfputs_r>
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	f000 80aa 	beq.w	800cf96 <_vfiprintf_r+0x20e>
 800ce42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce44:	445a      	add	r2, fp
 800ce46:	9209      	str	r2, [sp, #36]	; 0x24
 800ce48:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f000 80a2 	beq.w	800cf96 <_vfiprintf_r+0x20e>
 800ce52:	2300      	movs	r3, #0
 800ce54:	f04f 32ff 	mov.w	r2, #4294967295
 800ce58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce5c:	f10a 0a01 	add.w	sl, sl, #1
 800ce60:	9304      	str	r3, [sp, #16]
 800ce62:	9307      	str	r3, [sp, #28]
 800ce64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce68:	931a      	str	r3, [sp, #104]	; 0x68
 800ce6a:	4654      	mov	r4, sl
 800ce6c:	2205      	movs	r2, #5
 800ce6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce72:	4858      	ldr	r0, [pc, #352]	; (800cfd4 <_vfiprintf_r+0x24c>)
 800ce74:	f7f3 f9ec 	bl	8000250 <memchr>
 800ce78:	9a04      	ldr	r2, [sp, #16]
 800ce7a:	b9d8      	cbnz	r0, 800ceb4 <_vfiprintf_r+0x12c>
 800ce7c:	06d1      	lsls	r1, r2, #27
 800ce7e:	bf44      	itt	mi
 800ce80:	2320      	movmi	r3, #32
 800ce82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce86:	0713      	lsls	r3, r2, #28
 800ce88:	bf44      	itt	mi
 800ce8a:	232b      	movmi	r3, #43	; 0x2b
 800ce8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce90:	f89a 3000 	ldrb.w	r3, [sl]
 800ce94:	2b2a      	cmp	r3, #42	; 0x2a
 800ce96:	d015      	beq.n	800cec4 <_vfiprintf_r+0x13c>
 800ce98:	9a07      	ldr	r2, [sp, #28]
 800ce9a:	4654      	mov	r4, sl
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	f04f 0c0a 	mov.w	ip, #10
 800cea2:	4621      	mov	r1, r4
 800cea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cea8:	3b30      	subs	r3, #48	; 0x30
 800ceaa:	2b09      	cmp	r3, #9
 800ceac:	d94e      	bls.n	800cf4c <_vfiprintf_r+0x1c4>
 800ceae:	b1b0      	cbz	r0, 800cede <_vfiprintf_r+0x156>
 800ceb0:	9207      	str	r2, [sp, #28]
 800ceb2:	e014      	b.n	800cede <_vfiprintf_r+0x156>
 800ceb4:	eba0 0308 	sub.w	r3, r0, r8
 800ceb8:	fa09 f303 	lsl.w	r3, r9, r3
 800cebc:	4313      	orrs	r3, r2
 800cebe:	9304      	str	r3, [sp, #16]
 800cec0:	46a2      	mov	sl, r4
 800cec2:	e7d2      	b.n	800ce6a <_vfiprintf_r+0xe2>
 800cec4:	9b03      	ldr	r3, [sp, #12]
 800cec6:	1d19      	adds	r1, r3, #4
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	9103      	str	r1, [sp, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	bfbb      	ittet	lt
 800ced0:	425b      	neglt	r3, r3
 800ced2:	f042 0202 	orrlt.w	r2, r2, #2
 800ced6:	9307      	strge	r3, [sp, #28]
 800ced8:	9307      	strlt	r3, [sp, #28]
 800ceda:	bfb8      	it	lt
 800cedc:	9204      	strlt	r2, [sp, #16]
 800cede:	7823      	ldrb	r3, [r4, #0]
 800cee0:	2b2e      	cmp	r3, #46	; 0x2e
 800cee2:	d10c      	bne.n	800cefe <_vfiprintf_r+0x176>
 800cee4:	7863      	ldrb	r3, [r4, #1]
 800cee6:	2b2a      	cmp	r3, #42	; 0x2a
 800cee8:	d135      	bne.n	800cf56 <_vfiprintf_r+0x1ce>
 800ceea:	9b03      	ldr	r3, [sp, #12]
 800ceec:	1d1a      	adds	r2, r3, #4
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	9203      	str	r2, [sp, #12]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	bfb8      	it	lt
 800cef6:	f04f 33ff 	movlt.w	r3, #4294967295
 800cefa:	3402      	adds	r4, #2
 800cefc:	9305      	str	r3, [sp, #20]
 800cefe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cfe4 <_vfiprintf_r+0x25c>
 800cf02:	7821      	ldrb	r1, [r4, #0]
 800cf04:	2203      	movs	r2, #3
 800cf06:	4650      	mov	r0, sl
 800cf08:	f7f3 f9a2 	bl	8000250 <memchr>
 800cf0c:	b140      	cbz	r0, 800cf20 <_vfiprintf_r+0x198>
 800cf0e:	2340      	movs	r3, #64	; 0x40
 800cf10:	eba0 000a 	sub.w	r0, r0, sl
 800cf14:	fa03 f000 	lsl.w	r0, r3, r0
 800cf18:	9b04      	ldr	r3, [sp, #16]
 800cf1a:	4303      	orrs	r3, r0
 800cf1c:	3401      	adds	r4, #1
 800cf1e:	9304      	str	r3, [sp, #16]
 800cf20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf24:	482c      	ldr	r0, [pc, #176]	; (800cfd8 <_vfiprintf_r+0x250>)
 800cf26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf2a:	2206      	movs	r2, #6
 800cf2c:	f7f3 f990 	bl	8000250 <memchr>
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d03f      	beq.n	800cfb4 <_vfiprintf_r+0x22c>
 800cf34:	4b29      	ldr	r3, [pc, #164]	; (800cfdc <_vfiprintf_r+0x254>)
 800cf36:	bb1b      	cbnz	r3, 800cf80 <_vfiprintf_r+0x1f8>
 800cf38:	9b03      	ldr	r3, [sp, #12]
 800cf3a:	3307      	adds	r3, #7
 800cf3c:	f023 0307 	bic.w	r3, r3, #7
 800cf40:	3308      	adds	r3, #8
 800cf42:	9303      	str	r3, [sp, #12]
 800cf44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf46:	443b      	add	r3, r7
 800cf48:	9309      	str	r3, [sp, #36]	; 0x24
 800cf4a:	e767      	b.n	800ce1c <_vfiprintf_r+0x94>
 800cf4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf50:	460c      	mov	r4, r1
 800cf52:	2001      	movs	r0, #1
 800cf54:	e7a5      	b.n	800cea2 <_vfiprintf_r+0x11a>
 800cf56:	2300      	movs	r3, #0
 800cf58:	3401      	adds	r4, #1
 800cf5a:	9305      	str	r3, [sp, #20]
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	f04f 0c0a 	mov.w	ip, #10
 800cf62:	4620      	mov	r0, r4
 800cf64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf68:	3a30      	subs	r2, #48	; 0x30
 800cf6a:	2a09      	cmp	r2, #9
 800cf6c:	d903      	bls.n	800cf76 <_vfiprintf_r+0x1ee>
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d0c5      	beq.n	800cefe <_vfiprintf_r+0x176>
 800cf72:	9105      	str	r1, [sp, #20]
 800cf74:	e7c3      	b.n	800cefe <_vfiprintf_r+0x176>
 800cf76:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	e7f0      	b.n	800cf62 <_vfiprintf_r+0x1da>
 800cf80:	ab03      	add	r3, sp, #12
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	462a      	mov	r2, r5
 800cf86:	4b16      	ldr	r3, [pc, #88]	; (800cfe0 <_vfiprintf_r+0x258>)
 800cf88:	a904      	add	r1, sp, #16
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f7fc fa28 	bl	80093e0 <_printf_float>
 800cf90:	4607      	mov	r7, r0
 800cf92:	1c78      	adds	r0, r7, #1
 800cf94:	d1d6      	bne.n	800cf44 <_vfiprintf_r+0x1bc>
 800cf96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf98:	07d9      	lsls	r1, r3, #31
 800cf9a:	d405      	bmi.n	800cfa8 <_vfiprintf_r+0x220>
 800cf9c:	89ab      	ldrh	r3, [r5, #12]
 800cf9e:	059a      	lsls	r2, r3, #22
 800cfa0:	d402      	bmi.n	800cfa8 <_vfiprintf_r+0x220>
 800cfa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfa4:	f7ff fe7c 	bl	800cca0 <__retarget_lock_release_recursive>
 800cfa8:	89ab      	ldrh	r3, [r5, #12]
 800cfaa:	065b      	lsls	r3, r3, #25
 800cfac:	f53f af12 	bmi.w	800cdd4 <_vfiprintf_r+0x4c>
 800cfb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfb2:	e711      	b.n	800cdd8 <_vfiprintf_r+0x50>
 800cfb4:	ab03      	add	r3, sp, #12
 800cfb6:	9300      	str	r3, [sp, #0]
 800cfb8:	462a      	mov	r2, r5
 800cfba:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <_vfiprintf_r+0x258>)
 800cfbc:	a904      	add	r1, sp, #16
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f7fc fc9a 	bl	80098f8 <_printf_i>
 800cfc4:	e7e4      	b.n	800cf90 <_vfiprintf_r+0x208>
 800cfc6:	bf00      	nop
 800cfc8:	0800e10c 	.word	0x0800e10c
 800cfcc:	0800e12c 	.word	0x0800e12c
 800cfd0:	0800e0ec 	.word	0x0800e0ec
 800cfd4:	0800e09c 	.word	0x0800e09c
 800cfd8:	0800e0a6 	.word	0x0800e0a6
 800cfdc:	080093e1 	.word	0x080093e1
 800cfe0:	0800cd63 	.word	0x0800cd63
 800cfe4:	0800e0a2 	.word	0x0800e0a2

0800cfe8 <__swbuf_r>:
 800cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfea:	460e      	mov	r6, r1
 800cfec:	4614      	mov	r4, r2
 800cfee:	4605      	mov	r5, r0
 800cff0:	b118      	cbz	r0, 800cffa <__swbuf_r+0x12>
 800cff2:	6983      	ldr	r3, [r0, #24]
 800cff4:	b90b      	cbnz	r3, 800cffa <__swbuf_r+0x12>
 800cff6:	f000 f9d9 	bl	800d3ac <__sinit>
 800cffa:	4b21      	ldr	r3, [pc, #132]	; (800d080 <__swbuf_r+0x98>)
 800cffc:	429c      	cmp	r4, r3
 800cffe:	d12b      	bne.n	800d058 <__swbuf_r+0x70>
 800d000:	686c      	ldr	r4, [r5, #4]
 800d002:	69a3      	ldr	r3, [r4, #24]
 800d004:	60a3      	str	r3, [r4, #8]
 800d006:	89a3      	ldrh	r3, [r4, #12]
 800d008:	071a      	lsls	r2, r3, #28
 800d00a:	d52f      	bpl.n	800d06c <__swbuf_r+0x84>
 800d00c:	6923      	ldr	r3, [r4, #16]
 800d00e:	b36b      	cbz	r3, 800d06c <__swbuf_r+0x84>
 800d010:	6923      	ldr	r3, [r4, #16]
 800d012:	6820      	ldr	r0, [r4, #0]
 800d014:	1ac0      	subs	r0, r0, r3
 800d016:	6963      	ldr	r3, [r4, #20]
 800d018:	b2f6      	uxtb	r6, r6
 800d01a:	4283      	cmp	r3, r0
 800d01c:	4637      	mov	r7, r6
 800d01e:	dc04      	bgt.n	800d02a <__swbuf_r+0x42>
 800d020:	4621      	mov	r1, r4
 800d022:	4628      	mov	r0, r5
 800d024:	f000 f92e 	bl	800d284 <_fflush_r>
 800d028:	bb30      	cbnz	r0, 800d078 <__swbuf_r+0x90>
 800d02a:	68a3      	ldr	r3, [r4, #8]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	60a3      	str	r3, [r4, #8]
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	1c5a      	adds	r2, r3, #1
 800d034:	6022      	str	r2, [r4, #0]
 800d036:	701e      	strb	r6, [r3, #0]
 800d038:	6963      	ldr	r3, [r4, #20]
 800d03a:	3001      	adds	r0, #1
 800d03c:	4283      	cmp	r3, r0
 800d03e:	d004      	beq.n	800d04a <__swbuf_r+0x62>
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	07db      	lsls	r3, r3, #31
 800d044:	d506      	bpl.n	800d054 <__swbuf_r+0x6c>
 800d046:	2e0a      	cmp	r6, #10
 800d048:	d104      	bne.n	800d054 <__swbuf_r+0x6c>
 800d04a:	4621      	mov	r1, r4
 800d04c:	4628      	mov	r0, r5
 800d04e:	f000 f919 	bl	800d284 <_fflush_r>
 800d052:	b988      	cbnz	r0, 800d078 <__swbuf_r+0x90>
 800d054:	4638      	mov	r0, r7
 800d056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d058:	4b0a      	ldr	r3, [pc, #40]	; (800d084 <__swbuf_r+0x9c>)
 800d05a:	429c      	cmp	r4, r3
 800d05c:	d101      	bne.n	800d062 <__swbuf_r+0x7a>
 800d05e:	68ac      	ldr	r4, [r5, #8]
 800d060:	e7cf      	b.n	800d002 <__swbuf_r+0x1a>
 800d062:	4b09      	ldr	r3, [pc, #36]	; (800d088 <__swbuf_r+0xa0>)
 800d064:	429c      	cmp	r4, r3
 800d066:	bf08      	it	eq
 800d068:	68ec      	ldreq	r4, [r5, #12]
 800d06a:	e7ca      	b.n	800d002 <__swbuf_r+0x1a>
 800d06c:	4621      	mov	r1, r4
 800d06e:	4628      	mov	r0, r5
 800d070:	f000 f80c 	bl	800d08c <__swsetup_r>
 800d074:	2800      	cmp	r0, #0
 800d076:	d0cb      	beq.n	800d010 <__swbuf_r+0x28>
 800d078:	f04f 37ff 	mov.w	r7, #4294967295
 800d07c:	e7ea      	b.n	800d054 <__swbuf_r+0x6c>
 800d07e:	bf00      	nop
 800d080:	0800e10c 	.word	0x0800e10c
 800d084:	0800e12c 	.word	0x0800e12c
 800d088:	0800e0ec 	.word	0x0800e0ec

0800d08c <__swsetup_r>:
 800d08c:	4b32      	ldr	r3, [pc, #200]	; (800d158 <__swsetup_r+0xcc>)
 800d08e:	b570      	push	{r4, r5, r6, lr}
 800d090:	681d      	ldr	r5, [r3, #0]
 800d092:	4606      	mov	r6, r0
 800d094:	460c      	mov	r4, r1
 800d096:	b125      	cbz	r5, 800d0a2 <__swsetup_r+0x16>
 800d098:	69ab      	ldr	r3, [r5, #24]
 800d09a:	b913      	cbnz	r3, 800d0a2 <__swsetup_r+0x16>
 800d09c:	4628      	mov	r0, r5
 800d09e:	f000 f985 	bl	800d3ac <__sinit>
 800d0a2:	4b2e      	ldr	r3, [pc, #184]	; (800d15c <__swsetup_r+0xd0>)
 800d0a4:	429c      	cmp	r4, r3
 800d0a6:	d10f      	bne.n	800d0c8 <__swsetup_r+0x3c>
 800d0a8:	686c      	ldr	r4, [r5, #4]
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0b0:	0719      	lsls	r1, r3, #28
 800d0b2:	d42c      	bmi.n	800d10e <__swsetup_r+0x82>
 800d0b4:	06dd      	lsls	r5, r3, #27
 800d0b6:	d411      	bmi.n	800d0dc <__swsetup_r+0x50>
 800d0b8:	2309      	movs	r3, #9
 800d0ba:	6033      	str	r3, [r6, #0]
 800d0bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d0c0:	81a3      	strh	r3, [r4, #12]
 800d0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c6:	e03e      	b.n	800d146 <__swsetup_r+0xba>
 800d0c8:	4b25      	ldr	r3, [pc, #148]	; (800d160 <__swsetup_r+0xd4>)
 800d0ca:	429c      	cmp	r4, r3
 800d0cc:	d101      	bne.n	800d0d2 <__swsetup_r+0x46>
 800d0ce:	68ac      	ldr	r4, [r5, #8]
 800d0d0:	e7eb      	b.n	800d0aa <__swsetup_r+0x1e>
 800d0d2:	4b24      	ldr	r3, [pc, #144]	; (800d164 <__swsetup_r+0xd8>)
 800d0d4:	429c      	cmp	r4, r3
 800d0d6:	bf08      	it	eq
 800d0d8:	68ec      	ldreq	r4, [r5, #12]
 800d0da:	e7e6      	b.n	800d0aa <__swsetup_r+0x1e>
 800d0dc:	0758      	lsls	r0, r3, #29
 800d0de:	d512      	bpl.n	800d106 <__swsetup_r+0x7a>
 800d0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0e2:	b141      	cbz	r1, 800d0f6 <__swsetup_r+0x6a>
 800d0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0e8:	4299      	cmp	r1, r3
 800d0ea:	d002      	beq.n	800d0f2 <__swsetup_r+0x66>
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f7fc f805 	bl	80090fc <_free_r>
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	6363      	str	r3, [r4, #52]	; 0x34
 800d0f6:	89a3      	ldrh	r3, [r4, #12]
 800d0f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0fc:	81a3      	strh	r3, [r4, #12]
 800d0fe:	2300      	movs	r3, #0
 800d100:	6063      	str	r3, [r4, #4]
 800d102:	6923      	ldr	r3, [r4, #16]
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	f043 0308 	orr.w	r3, r3, #8
 800d10c:	81a3      	strh	r3, [r4, #12]
 800d10e:	6923      	ldr	r3, [r4, #16]
 800d110:	b94b      	cbnz	r3, 800d126 <__swsetup_r+0x9a>
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d11c:	d003      	beq.n	800d126 <__swsetup_r+0x9a>
 800d11e:	4621      	mov	r1, r4
 800d120:	4630      	mov	r0, r6
 800d122:	f000 fa05 	bl	800d530 <__smakebuf_r>
 800d126:	89a0      	ldrh	r0, [r4, #12]
 800d128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d12c:	f010 0301 	ands.w	r3, r0, #1
 800d130:	d00a      	beq.n	800d148 <__swsetup_r+0xbc>
 800d132:	2300      	movs	r3, #0
 800d134:	60a3      	str	r3, [r4, #8]
 800d136:	6963      	ldr	r3, [r4, #20]
 800d138:	425b      	negs	r3, r3
 800d13a:	61a3      	str	r3, [r4, #24]
 800d13c:	6923      	ldr	r3, [r4, #16]
 800d13e:	b943      	cbnz	r3, 800d152 <__swsetup_r+0xc6>
 800d140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d144:	d1ba      	bne.n	800d0bc <__swsetup_r+0x30>
 800d146:	bd70      	pop	{r4, r5, r6, pc}
 800d148:	0781      	lsls	r1, r0, #30
 800d14a:	bf58      	it	pl
 800d14c:	6963      	ldrpl	r3, [r4, #20]
 800d14e:	60a3      	str	r3, [r4, #8]
 800d150:	e7f4      	b.n	800d13c <__swsetup_r+0xb0>
 800d152:	2000      	movs	r0, #0
 800d154:	e7f7      	b.n	800d146 <__swsetup_r+0xba>
 800d156:	bf00      	nop
 800d158:	2000018c 	.word	0x2000018c
 800d15c:	0800e10c 	.word	0x0800e10c
 800d160:	0800e12c 	.word	0x0800e12c
 800d164:	0800e0ec 	.word	0x0800e0ec

0800d168 <abort>:
 800d168:	b508      	push	{r3, lr}
 800d16a:	2006      	movs	r0, #6
 800d16c:	f000 fa50 	bl	800d610 <raise>
 800d170:	2001      	movs	r0, #1
 800d172:	f7f4 ffc1 	bl	80020f8 <_exit>
	...

0800d178 <__sflush_r>:
 800d178:	898a      	ldrh	r2, [r1, #12]
 800d17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17e:	4605      	mov	r5, r0
 800d180:	0710      	lsls	r0, r2, #28
 800d182:	460c      	mov	r4, r1
 800d184:	d458      	bmi.n	800d238 <__sflush_r+0xc0>
 800d186:	684b      	ldr	r3, [r1, #4]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dc05      	bgt.n	800d198 <__sflush_r+0x20>
 800d18c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d18e:	2b00      	cmp	r3, #0
 800d190:	dc02      	bgt.n	800d198 <__sflush_r+0x20>
 800d192:	2000      	movs	r0, #0
 800d194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d19a:	2e00      	cmp	r6, #0
 800d19c:	d0f9      	beq.n	800d192 <__sflush_r+0x1a>
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d1a4:	682f      	ldr	r7, [r5, #0]
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	d032      	beq.n	800d210 <__sflush_r+0x98>
 800d1aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	075a      	lsls	r2, r3, #29
 800d1b0:	d505      	bpl.n	800d1be <__sflush_r+0x46>
 800d1b2:	6863      	ldr	r3, [r4, #4]
 800d1b4:	1ac0      	subs	r0, r0, r3
 800d1b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d1b8:	b10b      	cbz	r3, 800d1be <__sflush_r+0x46>
 800d1ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1bc:	1ac0      	subs	r0, r0, r3
 800d1be:	2300      	movs	r3, #0
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1c4:	6a21      	ldr	r1, [r4, #32]
 800d1c6:	4628      	mov	r0, r5
 800d1c8:	47b0      	blx	r6
 800d1ca:	1c43      	adds	r3, r0, #1
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	d106      	bne.n	800d1de <__sflush_r+0x66>
 800d1d0:	6829      	ldr	r1, [r5, #0]
 800d1d2:	291d      	cmp	r1, #29
 800d1d4:	d82c      	bhi.n	800d230 <__sflush_r+0xb8>
 800d1d6:	4a2a      	ldr	r2, [pc, #168]	; (800d280 <__sflush_r+0x108>)
 800d1d8:	40ca      	lsrs	r2, r1
 800d1da:	07d6      	lsls	r6, r2, #31
 800d1dc:	d528      	bpl.n	800d230 <__sflush_r+0xb8>
 800d1de:	2200      	movs	r2, #0
 800d1e0:	6062      	str	r2, [r4, #4]
 800d1e2:	04d9      	lsls	r1, r3, #19
 800d1e4:	6922      	ldr	r2, [r4, #16]
 800d1e6:	6022      	str	r2, [r4, #0]
 800d1e8:	d504      	bpl.n	800d1f4 <__sflush_r+0x7c>
 800d1ea:	1c42      	adds	r2, r0, #1
 800d1ec:	d101      	bne.n	800d1f2 <__sflush_r+0x7a>
 800d1ee:	682b      	ldr	r3, [r5, #0]
 800d1f0:	b903      	cbnz	r3, 800d1f4 <__sflush_r+0x7c>
 800d1f2:	6560      	str	r0, [r4, #84]	; 0x54
 800d1f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1f6:	602f      	str	r7, [r5, #0]
 800d1f8:	2900      	cmp	r1, #0
 800d1fa:	d0ca      	beq.n	800d192 <__sflush_r+0x1a>
 800d1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d200:	4299      	cmp	r1, r3
 800d202:	d002      	beq.n	800d20a <__sflush_r+0x92>
 800d204:	4628      	mov	r0, r5
 800d206:	f7fb ff79 	bl	80090fc <_free_r>
 800d20a:	2000      	movs	r0, #0
 800d20c:	6360      	str	r0, [r4, #52]	; 0x34
 800d20e:	e7c1      	b.n	800d194 <__sflush_r+0x1c>
 800d210:	6a21      	ldr	r1, [r4, #32]
 800d212:	2301      	movs	r3, #1
 800d214:	4628      	mov	r0, r5
 800d216:	47b0      	blx	r6
 800d218:	1c41      	adds	r1, r0, #1
 800d21a:	d1c7      	bne.n	800d1ac <__sflush_r+0x34>
 800d21c:	682b      	ldr	r3, [r5, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d0c4      	beq.n	800d1ac <__sflush_r+0x34>
 800d222:	2b1d      	cmp	r3, #29
 800d224:	d001      	beq.n	800d22a <__sflush_r+0xb2>
 800d226:	2b16      	cmp	r3, #22
 800d228:	d101      	bne.n	800d22e <__sflush_r+0xb6>
 800d22a:	602f      	str	r7, [r5, #0]
 800d22c:	e7b1      	b.n	800d192 <__sflush_r+0x1a>
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d234:	81a3      	strh	r3, [r4, #12]
 800d236:	e7ad      	b.n	800d194 <__sflush_r+0x1c>
 800d238:	690f      	ldr	r7, [r1, #16]
 800d23a:	2f00      	cmp	r7, #0
 800d23c:	d0a9      	beq.n	800d192 <__sflush_r+0x1a>
 800d23e:	0793      	lsls	r3, r2, #30
 800d240:	680e      	ldr	r6, [r1, #0]
 800d242:	bf08      	it	eq
 800d244:	694b      	ldreq	r3, [r1, #20]
 800d246:	600f      	str	r7, [r1, #0]
 800d248:	bf18      	it	ne
 800d24a:	2300      	movne	r3, #0
 800d24c:	eba6 0807 	sub.w	r8, r6, r7
 800d250:	608b      	str	r3, [r1, #8]
 800d252:	f1b8 0f00 	cmp.w	r8, #0
 800d256:	dd9c      	ble.n	800d192 <__sflush_r+0x1a>
 800d258:	6a21      	ldr	r1, [r4, #32]
 800d25a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d25c:	4643      	mov	r3, r8
 800d25e:	463a      	mov	r2, r7
 800d260:	4628      	mov	r0, r5
 800d262:	47b0      	blx	r6
 800d264:	2800      	cmp	r0, #0
 800d266:	dc06      	bgt.n	800d276 <__sflush_r+0xfe>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d26e:	81a3      	strh	r3, [r4, #12]
 800d270:	f04f 30ff 	mov.w	r0, #4294967295
 800d274:	e78e      	b.n	800d194 <__sflush_r+0x1c>
 800d276:	4407      	add	r7, r0
 800d278:	eba8 0800 	sub.w	r8, r8, r0
 800d27c:	e7e9      	b.n	800d252 <__sflush_r+0xda>
 800d27e:	bf00      	nop
 800d280:	20400001 	.word	0x20400001

0800d284 <_fflush_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	690b      	ldr	r3, [r1, #16]
 800d288:	4605      	mov	r5, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	b913      	cbnz	r3, 800d294 <_fflush_r+0x10>
 800d28e:	2500      	movs	r5, #0
 800d290:	4628      	mov	r0, r5
 800d292:	bd38      	pop	{r3, r4, r5, pc}
 800d294:	b118      	cbz	r0, 800d29e <_fflush_r+0x1a>
 800d296:	6983      	ldr	r3, [r0, #24]
 800d298:	b90b      	cbnz	r3, 800d29e <_fflush_r+0x1a>
 800d29a:	f000 f887 	bl	800d3ac <__sinit>
 800d29e:	4b14      	ldr	r3, [pc, #80]	; (800d2f0 <_fflush_r+0x6c>)
 800d2a0:	429c      	cmp	r4, r3
 800d2a2:	d11b      	bne.n	800d2dc <_fflush_r+0x58>
 800d2a4:	686c      	ldr	r4, [r5, #4]
 800d2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0ef      	beq.n	800d28e <_fflush_r+0xa>
 800d2ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d2b0:	07d0      	lsls	r0, r2, #31
 800d2b2:	d404      	bmi.n	800d2be <_fflush_r+0x3a>
 800d2b4:	0599      	lsls	r1, r3, #22
 800d2b6:	d402      	bmi.n	800d2be <_fflush_r+0x3a>
 800d2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ba:	f7ff fcf0 	bl	800cc9e <__retarget_lock_acquire_recursive>
 800d2be:	4628      	mov	r0, r5
 800d2c0:	4621      	mov	r1, r4
 800d2c2:	f7ff ff59 	bl	800d178 <__sflush_r>
 800d2c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2c8:	07da      	lsls	r2, r3, #31
 800d2ca:	4605      	mov	r5, r0
 800d2cc:	d4e0      	bmi.n	800d290 <_fflush_r+0xc>
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	059b      	lsls	r3, r3, #22
 800d2d2:	d4dd      	bmi.n	800d290 <_fflush_r+0xc>
 800d2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2d6:	f7ff fce3 	bl	800cca0 <__retarget_lock_release_recursive>
 800d2da:	e7d9      	b.n	800d290 <_fflush_r+0xc>
 800d2dc:	4b05      	ldr	r3, [pc, #20]	; (800d2f4 <_fflush_r+0x70>)
 800d2de:	429c      	cmp	r4, r3
 800d2e0:	d101      	bne.n	800d2e6 <_fflush_r+0x62>
 800d2e2:	68ac      	ldr	r4, [r5, #8]
 800d2e4:	e7df      	b.n	800d2a6 <_fflush_r+0x22>
 800d2e6:	4b04      	ldr	r3, [pc, #16]	; (800d2f8 <_fflush_r+0x74>)
 800d2e8:	429c      	cmp	r4, r3
 800d2ea:	bf08      	it	eq
 800d2ec:	68ec      	ldreq	r4, [r5, #12]
 800d2ee:	e7da      	b.n	800d2a6 <_fflush_r+0x22>
 800d2f0:	0800e10c 	.word	0x0800e10c
 800d2f4:	0800e12c 	.word	0x0800e12c
 800d2f8:	0800e0ec 	.word	0x0800e0ec

0800d2fc <std>:
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	b510      	push	{r4, lr}
 800d300:	4604      	mov	r4, r0
 800d302:	e9c0 3300 	strd	r3, r3, [r0]
 800d306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d30a:	6083      	str	r3, [r0, #8]
 800d30c:	8181      	strh	r1, [r0, #12]
 800d30e:	6643      	str	r3, [r0, #100]	; 0x64
 800d310:	81c2      	strh	r2, [r0, #14]
 800d312:	6183      	str	r3, [r0, #24]
 800d314:	4619      	mov	r1, r3
 800d316:	2208      	movs	r2, #8
 800d318:	305c      	adds	r0, #92	; 0x5c
 800d31a:	f7fb fee7 	bl	80090ec <memset>
 800d31e:	4b05      	ldr	r3, [pc, #20]	; (800d334 <std+0x38>)
 800d320:	6263      	str	r3, [r4, #36]	; 0x24
 800d322:	4b05      	ldr	r3, [pc, #20]	; (800d338 <std+0x3c>)
 800d324:	62a3      	str	r3, [r4, #40]	; 0x28
 800d326:	4b05      	ldr	r3, [pc, #20]	; (800d33c <std+0x40>)
 800d328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d32a:	4b05      	ldr	r3, [pc, #20]	; (800d340 <std+0x44>)
 800d32c:	6224      	str	r4, [r4, #32]
 800d32e:	6323      	str	r3, [r4, #48]	; 0x30
 800d330:	bd10      	pop	{r4, pc}
 800d332:	bf00      	nop
 800d334:	0800d649 	.word	0x0800d649
 800d338:	0800d66b 	.word	0x0800d66b
 800d33c:	0800d6a3 	.word	0x0800d6a3
 800d340:	0800d6c7 	.word	0x0800d6c7

0800d344 <_cleanup_r>:
 800d344:	4901      	ldr	r1, [pc, #4]	; (800d34c <_cleanup_r+0x8>)
 800d346:	f000 b8af 	b.w	800d4a8 <_fwalk_reent>
 800d34a:	bf00      	nop
 800d34c:	0800d285 	.word	0x0800d285

0800d350 <__sfmoreglue>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	2268      	movs	r2, #104	; 0x68
 800d354:	1e4d      	subs	r5, r1, #1
 800d356:	4355      	muls	r5, r2
 800d358:	460e      	mov	r6, r1
 800d35a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d35e:	f7fb ff39 	bl	80091d4 <_malloc_r>
 800d362:	4604      	mov	r4, r0
 800d364:	b140      	cbz	r0, 800d378 <__sfmoreglue+0x28>
 800d366:	2100      	movs	r1, #0
 800d368:	e9c0 1600 	strd	r1, r6, [r0]
 800d36c:	300c      	adds	r0, #12
 800d36e:	60a0      	str	r0, [r4, #8]
 800d370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d374:	f7fb feba 	bl	80090ec <memset>
 800d378:	4620      	mov	r0, r4
 800d37a:	bd70      	pop	{r4, r5, r6, pc}

0800d37c <__sfp_lock_acquire>:
 800d37c:	4801      	ldr	r0, [pc, #4]	; (800d384 <__sfp_lock_acquire+0x8>)
 800d37e:	f7ff bc8e 	b.w	800cc9e <__retarget_lock_acquire_recursive>
 800d382:	bf00      	nop
 800d384:	20000715 	.word	0x20000715

0800d388 <__sfp_lock_release>:
 800d388:	4801      	ldr	r0, [pc, #4]	; (800d390 <__sfp_lock_release+0x8>)
 800d38a:	f7ff bc89 	b.w	800cca0 <__retarget_lock_release_recursive>
 800d38e:	bf00      	nop
 800d390:	20000715 	.word	0x20000715

0800d394 <__sinit_lock_acquire>:
 800d394:	4801      	ldr	r0, [pc, #4]	; (800d39c <__sinit_lock_acquire+0x8>)
 800d396:	f7ff bc82 	b.w	800cc9e <__retarget_lock_acquire_recursive>
 800d39a:	bf00      	nop
 800d39c:	20000716 	.word	0x20000716

0800d3a0 <__sinit_lock_release>:
 800d3a0:	4801      	ldr	r0, [pc, #4]	; (800d3a8 <__sinit_lock_release+0x8>)
 800d3a2:	f7ff bc7d 	b.w	800cca0 <__retarget_lock_release_recursive>
 800d3a6:	bf00      	nop
 800d3a8:	20000716 	.word	0x20000716

0800d3ac <__sinit>:
 800d3ac:	b510      	push	{r4, lr}
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	f7ff fff0 	bl	800d394 <__sinit_lock_acquire>
 800d3b4:	69a3      	ldr	r3, [r4, #24]
 800d3b6:	b11b      	cbz	r3, 800d3c0 <__sinit+0x14>
 800d3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3bc:	f7ff bff0 	b.w	800d3a0 <__sinit_lock_release>
 800d3c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d3c4:	6523      	str	r3, [r4, #80]	; 0x50
 800d3c6:	4b13      	ldr	r3, [pc, #76]	; (800d414 <__sinit+0x68>)
 800d3c8:	4a13      	ldr	r2, [pc, #76]	; (800d418 <__sinit+0x6c>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800d3ce:	42a3      	cmp	r3, r4
 800d3d0:	bf04      	itt	eq
 800d3d2:	2301      	moveq	r3, #1
 800d3d4:	61a3      	streq	r3, [r4, #24]
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f000 f820 	bl	800d41c <__sfp>
 800d3dc:	6060      	str	r0, [r4, #4]
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 f81c 	bl	800d41c <__sfp>
 800d3e4:	60a0      	str	r0, [r4, #8]
 800d3e6:	4620      	mov	r0, r4
 800d3e8:	f000 f818 	bl	800d41c <__sfp>
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	60e0      	str	r0, [r4, #12]
 800d3f0:	2104      	movs	r1, #4
 800d3f2:	6860      	ldr	r0, [r4, #4]
 800d3f4:	f7ff ff82 	bl	800d2fc <std>
 800d3f8:	68a0      	ldr	r0, [r4, #8]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	2109      	movs	r1, #9
 800d3fe:	f7ff ff7d 	bl	800d2fc <std>
 800d402:	68e0      	ldr	r0, [r4, #12]
 800d404:	2202      	movs	r2, #2
 800d406:	2112      	movs	r1, #18
 800d408:	f7ff ff78 	bl	800d2fc <std>
 800d40c:	2301      	movs	r3, #1
 800d40e:	61a3      	str	r3, [r4, #24]
 800d410:	e7d2      	b.n	800d3b8 <__sinit+0xc>
 800d412:	bf00      	nop
 800d414:	0800dc3c 	.word	0x0800dc3c
 800d418:	0800d345 	.word	0x0800d345

0800d41c <__sfp>:
 800d41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d41e:	4607      	mov	r7, r0
 800d420:	f7ff ffac 	bl	800d37c <__sfp_lock_acquire>
 800d424:	4b1e      	ldr	r3, [pc, #120]	; (800d4a0 <__sfp+0x84>)
 800d426:	681e      	ldr	r6, [r3, #0]
 800d428:	69b3      	ldr	r3, [r6, #24]
 800d42a:	b913      	cbnz	r3, 800d432 <__sfp+0x16>
 800d42c:	4630      	mov	r0, r6
 800d42e:	f7ff ffbd 	bl	800d3ac <__sinit>
 800d432:	3648      	adds	r6, #72	; 0x48
 800d434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d438:	3b01      	subs	r3, #1
 800d43a:	d503      	bpl.n	800d444 <__sfp+0x28>
 800d43c:	6833      	ldr	r3, [r6, #0]
 800d43e:	b30b      	cbz	r3, 800d484 <__sfp+0x68>
 800d440:	6836      	ldr	r6, [r6, #0]
 800d442:	e7f7      	b.n	800d434 <__sfp+0x18>
 800d444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d448:	b9d5      	cbnz	r5, 800d480 <__sfp+0x64>
 800d44a:	4b16      	ldr	r3, [pc, #88]	; (800d4a4 <__sfp+0x88>)
 800d44c:	60e3      	str	r3, [r4, #12]
 800d44e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d452:	6665      	str	r5, [r4, #100]	; 0x64
 800d454:	f7ff fc22 	bl	800cc9c <__retarget_lock_init_recursive>
 800d458:	f7ff ff96 	bl	800d388 <__sfp_lock_release>
 800d45c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d464:	6025      	str	r5, [r4, #0]
 800d466:	61a5      	str	r5, [r4, #24]
 800d468:	2208      	movs	r2, #8
 800d46a:	4629      	mov	r1, r5
 800d46c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d470:	f7fb fe3c 	bl	80090ec <memset>
 800d474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d47c:	4620      	mov	r0, r4
 800d47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d480:	3468      	adds	r4, #104	; 0x68
 800d482:	e7d9      	b.n	800d438 <__sfp+0x1c>
 800d484:	2104      	movs	r1, #4
 800d486:	4638      	mov	r0, r7
 800d488:	f7ff ff62 	bl	800d350 <__sfmoreglue>
 800d48c:	4604      	mov	r4, r0
 800d48e:	6030      	str	r0, [r6, #0]
 800d490:	2800      	cmp	r0, #0
 800d492:	d1d5      	bne.n	800d440 <__sfp+0x24>
 800d494:	f7ff ff78 	bl	800d388 <__sfp_lock_release>
 800d498:	230c      	movs	r3, #12
 800d49a:	603b      	str	r3, [r7, #0]
 800d49c:	e7ee      	b.n	800d47c <__sfp+0x60>
 800d49e:	bf00      	nop
 800d4a0:	0800dc3c 	.word	0x0800dc3c
 800d4a4:	ffff0001 	.word	0xffff0001

0800d4a8 <_fwalk_reent>:
 800d4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4ac:	4606      	mov	r6, r0
 800d4ae:	4688      	mov	r8, r1
 800d4b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d4b4:	2700      	movs	r7, #0
 800d4b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4ba:	f1b9 0901 	subs.w	r9, r9, #1
 800d4be:	d505      	bpl.n	800d4cc <_fwalk_reent+0x24>
 800d4c0:	6824      	ldr	r4, [r4, #0]
 800d4c2:	2c00      	cmp	r4, #0
 800d4c4:	d1f7      	bne.n	800d4b6 <_fwalk_reent+0xe>
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4cc:	89ab      	ldrh	r3, [r5, #12]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d907      	bls.n	800d4e2 <_fwalk_reent+0x3a>
 800d4d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4d6:	3301      	adds	r3, #1
 800d4d8:	d003      	beq.n	800d4e2 <_fwalk_reent+0x3a>
 800d4da:	4629      	mov	r1, r5
 800d4dc:	4630      	mov	r0, r6
 800d4de:	47c0      	blx	r8
 800d4e0:	4307      	orrs	r7, r0
 800d4e2:	3568      	adds	r5, #104	; 0x68
 800d4e4:	e7e9      	b.n	800d4ba <_fwalk_reent+0x12>

0800d4e6 <__swhatbuf_r>:
 800d4e6:	b570      	push	{r4, r5, r6, lr}
 800d4e8:	460e      	mov	r6, r1
 800d4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4ee:	2900      	cmp	r1, #0
 800d4f0:	b096      	sub	sp, #88	; 0x58
 800d4f2:	4614      	mov	r4, r2
 800d4f4:	461d      	mov	r5, r3
 800d4f6:	da08      	bge.n	800d50a <__swhatbuf_r+0x24>
 800d4f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	602a      	str	r2, [r5, #0]
 800d500:	061a      	lsls	r2, r3, #24
 800d502:	d410      	bmi.n	800d526 <__swhatbuf_r+0x40>
 800d504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d508:	e00e      	b.n	800d528 <__swhatbuf_r+0x42>
 800d50a:	466a      	mov	r2, sp
 800d50c:	f000 f902 	bl	800d714 <_fstat_r>
 800d510:	2800      	cmp	r0, #0
 800d512:	dbf1      	blt.n	800d4f8 <__swhatbuf_r+0x12>
 800d514:	9a01      	ldr	r2, [sp, #4]
 800d516:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d51a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d51e:	425a      	negs	r2, r3
 800d520:	415a      	adcs	r2, r3
 800d522:	602a      	str	r2, [r5, #0]
 800d524:	e7ee      	b.n	800d504 <__swhatbuf_r+0x1e>
 800d526:	2340      	movs	r3, #64	; 0x40
 800d528:	2000      	movs	r0, #0
 800d52a:	6023      	str	r3, [r4, #0]
 800d52c:	b016      	add	sp, #88	; 0x58
 800d52e:	bd70      	pop	{r4, r5, r6, pc}

0800d530 <__smakebuf_r>:
 800d530:	898b      	ldrh	r3, [r1, #12]
 800d532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d534:	079d      	lsls	r5, r3, #30
 800d536:	4606      	mov	r6, r0
 800d538:	460c      	mov	r4, r1
 800d53a:	d507      	bpl.n	800d54c <__smakebuf_r+0x1c>
 800d53c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	6123      	str	r3, [r4, #16]
 800d544:	2301      	movs	r3, #1
 800d546:	6163      	str	r3, [r4, #20]
 800d548:	b002      	add	sp, #8
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	ab01      	add	r3, sp, #4
 800d54e:	466a      	mov	r2, sp
 800d550:	f7ff ffc9 	bl	800d4e6 <__swhatbuf_r>
 800d554:	9900      	ldr	r1, [sp, #0]
 800d556:	4605      	mov	r5, r0
 800d558:	4630      	mov	r0, r6
 800d55a:	f7fb fe3b 	bl	80091d4 <_malloc_r>
 800d55e:	b948      	cbnz	r0, 800d574 <__smakebuf_r+0x44>
 800d560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d564:	059a      	lsls	r2, r3, #22
 800d566:	d4ef      	bmi.n	800d548 <__smakebuf_r+0x18>
 800d568:	f023 0303 	bic.w	r3, r3, #3
 800d56c:	f043 0302 	orr.w	r3, r3, #2
 800d570:	81a3      	strh	r3, [r4, #12]
 800d572:	e7e3      	b.n	800d53c <__smakebuf_r+0xc>
 800d574:	4b0d      	ldr	r3, [pc, #52]	; (800d5ac <__smakebuf_r+0x7c>)
 800d576:	62b3      	str	r3, [r6, #40]	; 0x28
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	6020      	str	r0, [r4, #0]
 800d57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d580:	81a3      	strh	r3, [r4, #12]
 800d582:	9b00      	ldr	r3, [sp, #0]
 800d584:	6163      	str	r3, [r4, #20]
 800d586:	9b01      	ldr	r3, [sp, #4]
 800d588:	6120      	str	r0, [r4, #16]
 800d58a:	b15b      	cbz	r3, 800d5a4 <__smakebuf_r+0x74>
 800d58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d590:	4630      	mov	r0, r6
 800d592:	f000 f8d1 	bl	800d738 <_isatty_r>
 800d596:	b128      	cbz	r0, 800d5a4 <__smakebuf_r+0x74>
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	f023 0303 	bic.w	r3, r3, #3
 800d59e:	f043 0301 	orr.w	r3, r3, #1
 800d5a2:	81a3      	strh	r3, [r4, #12]
 800d5a4:	89a0      	ldrh	r0, [r4, #12]
 800d5a6:	4305      	orrs	r5, r0
 800d5a8:	81a5      	strh	r5, [r4, #12]
 800d5aa:	e7cd      	b.n	800d548 <__smakebuf_r+0x18>
 800d5ac:	0800d345 	.word	0x0800d345

0800d5b0 <_malloc_usable_size_r>:
 800d5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5b4:	1f18      	subs	r0, r3, #4
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bfbc      	itt	lt
 800d5ba:	580b      	ldrlt	r3, [r1, r0]
 800d5bc:	18c0      	addlt	r0, r0, r3
 800d5be:	4770      	bx	lr

0800d5c0 <_raise_r>:
 800d5c0:	291f      	cmp	r1, #31
 800d5c2:	b538      	push	{r3, r4, r5, lr}
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	460d      	mov	r5, r1
 800d5c8:	d904      	bls.n	800d5d4 <_raise_r+0x14>
 800d5ca:	2316      	movs	r3, #22
 800d5cc:	6003      	str	r3, [r0, #0]
 800d5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d5d6:	b112      	cbz	r2, 800d5de <_raise_r+0x1e>
 800d5d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5dc:	b94b      	cbnz	r3, 800d5f2 <_raise_r+0x32>
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f000 f830 	bl	800d644 <_getpid_r>
 800d5e4:	462a      	mov	r2, r5
 800d5e6:	4601      	mov	r1, r0
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5ee:	f000 b817 	b.w	800d620 <_kill_r>
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d00a      	beq.n	800d60c <_raise_r+0x4c>
 800d5f6:	1c59      	adds	r1, r3, #1
 800d5f8:	d103      	bne.n	800d602 <_raise_r+0x42>
 800d5fa:	2316      	movs	r3, #22
 800d5fc:	6003      	str	r3, [r0, #0]
 800d5fe:	2001      	movs	r0, #1
 800d600:	e7e7      	b.n	800d5d2 <_raise_r+0x12>
 800d602:	2400      	movs	r4, #0
 800d604:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d608:	4628      	mov	r0, r5
 800d60a:	4798      	blx	r3
 800d60c:	2000      	movs	r0, #0
 800d60e:	e7e0      	b.n	800d5d2 <_raise_r+0x12>

0800d610 <raise>:
 800d610:	4b02      	ldr	r3, [pc, #8]	; (800d61c <raise+0xc>)
 800d612:	4601      	mov	r1, r0
 800d614:	6818      	ldr	r0, [r3, #0]
 800d616:	f7ff bfd3 	b.w	800d5c0 <_raise_r>
 800d61a:	bf00      	nop
 800d61c:	2000018c 	.word	0x2000018c

0800d620 <_kill_r>:
 800d620:	b538      	push	{r3, r4, r5, lr}
 800d622:	4d07      	ldr	r5, [pc, #28]	; (800d640 <_kill_r+0x20>)
 800d624:	2300      	movs	r3, #0
 800d626:	4604      	mov	r4, r0
 800d628:	4608      	mov	r0, r1
 800d62a:	4611      	mov	r1, r2
 800d62c:	602b      	str	r3, [r5, #0]
 800d62e:	f7f4 fd53 	bl	80020d8 <_kill>
 800d632:	1c43      	adds	r3, r0, #1
 800d634:	d102      	bne.n	800d63c <_kill_r+0x1c>
 800d636:	682b      	ldr	r3, [r5, #0]
 800d638:	b103      	cbz	r3, 800d63c <_kill_r+0x1c>
 800d63a:	6023      	str	r3, [r4, #0]
 800d63c:	bd38      	pop	{r3, r4, r5, pc}
 800d63e:	bf00      	nop
 800d640:	20000710 	.word	0x20000710

0800d644 <_getpid_r>:
 800d644:	f7f4 bd40 	b.w	80020c8 <_getpid>

0800d648 <__sread>:
 800d648:	b510      	push	{r4, lr}
 800d64a:	460c      	mov	r4, r1
 800d64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d650:	f000 f894 	bl	800d77c <_read_r>
 800d654:	2800      	cmp	r0, #0
 800d656:	bfab      	itete	ge
 800d658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d65a:	89a3      	ldrhlt	r3, [r4, #12]
 800d65c:	181b      	addge	r3, r3, r0
 800d65e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d662:	bfac      	ite	ge
 800d664:	6563      	strge	r3, [r4, #84]	; 0x54
 800d666:	81a3      	strhlt	r3, [r4, #12]
 800d668:	bd10      	pop	{r4, pc}

0800d66a <__swrite>:
 800d66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66e:	461f      	mov	r7, r3
 800d670:	898b      	ldrh	r3, [r1, #12]
 800d672:	05db      	lsls	r3, r3, #23
 800d674:	4605      	mov	r5, r0
 800d676:	460c      	mov	r4, r1
 800d678:	4616      	mov	r6, r2
 800d67a:	d505      	bpl.n	800d688 <__swrite+0x1e>
 800d67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d680:	2302      	movs	r3, #2
 800d682:	2200      	movs	r2, #0
 800d684:	f000 f868 	bl	800d758 <_lseek_r>
 800d688:	89a3      	ldrh	r3, [r4, #12]
 800d68a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d68e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d692:	81a3      	strh	r3, [r4, #12]
 800d694:	4632      	mov	r2, r6
 800d696:	463b      	mov	r3, r7
 800d698:	4628      	mov	r0, r5
 800d69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d69e:	f000 b817 	b.w	800d6d0 <_write_r>

0800d6a2 <__sseek>:
 800d6a2:	b510      	push	{r4, lr}
 800d6a4:	460c      	mov	r4, r1
 800d6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6aa:	f000 f855 	bl	800d758 <_lseek_r>
 800d6ae:	1c43      	adds	r3, r0, #1
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	bf15      	itete	ne
 800d6b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d6b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6be:	81a3      	strheq	r3, [r4, #12]
 800d6c0:	bf18      	it	ne
 800d6c2:	81a3      	strhne	r3, [r4, #12]
 800d6c4:	bd10      	pop	{r4, pc}

0800d6c6 <__sclose>:
 800d6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ca:	f000 b813 	b.w	800d6f4 <_close_r>
	...

0800d6d0 <_write_r>:
 800d6d0:	b538      	push	{r3, r4, r5, lr}
 800d6d2:	4d07      	ldr	r5, [pc, #28]	; (800d6f0 <_write_r+0x20>)
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	4608      	mov	r0, r1
 800d6d8:	4611      	mov	r1, r2
 800d6da:	2200      	movs	r2, #0
 800d6dc:	602a      	str	r2, [r5, #0]
 800d6de:	461a      	mov	r2, r3
 800d6e0:	f7f4 fd31 	bl	8002146 <_write>
 800d6e4:	1c43      	adds	r3, r0, #1
 800d6e6:	d102      	bne.n	800d6ee <_write_r+0x1e>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	b103      	cbz	r3, 800d6ee <_write_r+0x1e>
 800d6ec:	6023      	str	r3, [r4, #0]
 800d6ee:	bd38      	pop	{r3, r4, r5, pc}
 800d6f0:	20000710 	.word	0x20000710

0800d6f4 <_close_r>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	4d06      	ldr	r5, [pc, #24]	; (800d710 <_close_r+0x1c>)
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	4608      	mov	r0, r1
 800d6fe:	602b      	str	r3, [r5, #0]
 800d700:	f7f4 fd3d 	bl	800217e <_close>
 800d704:	1c43      	adds	r3, r0, #1
 800d706:	d102      	bne.n	800d70e <_close_r+0x1a>
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	b103      	cbz	r3, 800d70e <_close_r+0x1a>
 800d70c:	6023      	str	r3, [r4, #0]
 800d70e:	bd38      	pop	{r3, r4, r5, pc}
 800d710:	20000710 	.word	0x20000710

0800d714 <_fstat_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	4d07      	ldr	r5, [pc, #28]	; (800d734 <_fstat_r+0x20>)
 800d718:	2300      	movs	r3, #0
 800d71a:	4604      	mov	r4, r0
 800d71c:	4608      	mov	r0, r1
 800d71e:	4611      	mov	r1, r2
 800d720:	602b      	str	r3, [r5, #0]
 800d722:	f7f4 fd38 	bl	8002196 <_fstat>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	d102      	bne.n	800d730 <_fstat_r+0x1c>
 800d72a:	682b      	ldr	r3, [r5, #0]
 800d72c:	b103      	cbz	r3, 800d730 <_fstat_r+0x1c>
 800d72e:	6023      	str	r3, [r4, #0]
 800d730:	bd38      	pop	{r3, r4, r5, pc}
 800d732:	bf00      	nop
 800d734:	20000710 	.word	0x20000710

0800d738 <_isatty_r>:
 800d738:	b538      	push	{r3, r4, r5, lr}
 800d73a:	4d06      	ldr	r5, [pc, #24]	; (800d754 <_isatty_r+0x1c>)
 800d73c:	2300      	movs	r3, #0
 800d73e:	4604      	mov	r4, r0
 800d740:	4608      	mov	r0, r1
 800d742:	602b      	str	r3, [r5, #0]
 800d744:	f7f4 fd37 	bl	80021b6 <_isatty>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	d102      	bne.n	800d752 <_isatty_r+0x1a>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	b103      	cbz	r3, 800d752 <_isatty_r+0x1a>
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	20000710 	.word	0x20000710

0800d758 <_lseek_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4d07      	ldr	r5, [pc, #28]	; (800d778 <_lseek_r+0x20>)
 800d75c:	4604      	mov	r4, r0
 800d75e:	4608      	mov	r0, r1
 800d760:	4611      	mov	r1, r2
 800d762:	2200      	movs	r2, #0
 800d764:	602a      	str	r2, [r5, #0]
 800d766:	461a      	mov	r2, r3
 800d768:	f7f4 fd30 	bl	80021cc <_lseek>
 800d76c:	1c43      	adds	r3, r0, #1
 800d76e:	d102      	bne.n	800d776 <_lseek_r+0x1e>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	b103      	cbz	r3, 800d776 <_lseek_r+0x1e>
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	20000710 	.word	0x20000710

0800d77c <_read_r>:
 800d77c:	b538      	push	{r3, r4, r5, lr}
 800d77e:	4d07      	ldr	r5, [pc, #28]	; (800d79c <_read_r+0x20>)
 800d780:	4604      	mov	r4, r0
 800d782:	4608      	mov	r0, r1
 800d784:	4611      	mov	r1, r2
 800d786:	2200      	movs	r2, #0
 800d788:	602a      	str	r2, [r5, #0]
 800d78a:	461a      	mov	r2, r3
 800d78c:	f7f4 fcbe 	bl	800210c <_read>
 800d790:	1c43      	adds	r3, r0, #1
 800d792:	d102      	bne.n	800d79a <_read_r+0x1e>
 800d794:	682b      	ldr	r3, [r5, #0]
 800d796:	b103      	cbz	r3, 800d79a <_read_r+0x1e>
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	20000710 	.word	0x20000710

0800d7a0 <_init>:
 800d7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a2:	bf00      	nop
 800d7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7a6:	bc08      	pop	{r3}
 800d7a8:	469e      	mov	lr, r3
 800d7aa:	4770      	bx	lr

0800d7ac <_fini>:
 800d7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ae:	bf00      	nop
 800d7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7b2:	bc08      	pop	{r3}
 800d7b4:	469e      	mov	lr, r3
 800d7b6:	4770      	bx	lr
