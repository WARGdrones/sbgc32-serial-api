
SBGC32_LCD_Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  0800de40  0800de40  0001de40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7b4  0800e7b4  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7b4  0800e7b4  0001e7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7bc  0800e7bc  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7bc  0800e7bc  0001e7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7c0  0800e7c0  0001e7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0800e7c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000360  0800eb24  00020360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b34  0800eb24  00020b34  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025219  00000000  00000000  0002038e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004909  00000000  00000000  000455a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  00049eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  0004b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e048  00000000  00000000  0004cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022abe  00000000  00000000  0007ade0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010af89  00000000  00000000  0009d89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a8827  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007894  00000000  00000000  001a8878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000360 	.word	0x20000360
 800021c:	00000000 	.word	0x00000000
 8000220:	0800de28 	.word	0x0800de28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000364 	.word	0x20000364
 800023c:	0800de28 	.word	0x0800de28

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <begin>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;

  begin(16, 2);
}

void begin(uint8_t cols, uint8_t lines) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	460a      	mov	r2, r1
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	4613      	mov	r3, r2
 80009ea:	71bb      	strb	r3, [r7, #6]
  /* Get CPU frequency */
  SystemCoreClockUpdate();
 80009ec:	f001 fc46 	bl	800227c <SystemCoreClockUpdate>
  _fcpu_mp = SystemCoreClock / 1000000;
 80009f0:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <begin+0x130>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <begin+0x134>)
 80009f6:	fba2 2303 	umull	r2, r3, r2, r3
 80009fa:	0c9b      	lsrs	r3, r3, #18
 80009fc:	4a45      	ldr	r2, [pc, #276]	; (8000b14 <begin+0x138>)
 80009fe:	6013      	str	r3, [r2, #0]

  if (lines > 1) {
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d906      	bls.n	8000a14 <begin+0x38>
    _displayfunction |= LCD_2LINE;
 8000a06:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <begin+0x13c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b41      	ldr	r3, [pc, #260]	; (8000b18 <begin+0x13c>)
 8000a12:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000a14:	4a41      	ldr	r2, [pc, #260]	; (8000b1c <begin+0x140>)
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	3340      	adds	r3, #64	; 0x40
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 f886 	bl	8000b34 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <begin+0x144>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d009      	beq.n	8000a44 <begin+0x68>
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d106      	bne.n	8000a44 <begin+0x68>
    _displayfunction |= LCD_5x10DOTS;
 8000a36:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <begin+0x13c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <begin+0x13c>)
 8000a42:	701a      	strb	r2, [r3, #0]
//
//  if (_rw_pin != 255) {
//    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
//  }
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_RS(0);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	4836      	ldr	r0, [pc, #216]	; (8000b24 <begin+0x148>)
 8000a4c:	f002 ff1e 	bl	800388c <HAL_GPIO_WritePin>
  LCD_SET_EN(0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a56:	4834      	ldr	r0, [pc, #208]	; (8000b28 <begin+0x14c>)
 8000a58:	f002 ff18 	bl	800388c <HAL_GPIO_WritePin>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <begin+0x13c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d115      	bne.n	8000a94 <begin+0xb8>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000a68:	2003      	movs	r0, #3
 8000a6a:	f000 f999 	bl	8000da0 <write4bits>
    DELAY_MS(5); // wait min 4.1ms
 8000a6e:	2005      	movs	r0, #5
 8000a70:	f001 fe9e 	bl	80027b0 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f993 	bl	8000da0 <write4bits>
    DELAY_MS(5); // wait min 4.1ms
 8000a7a:	2005      	movs	r0, #5
 8000a7c:	f001 fe98 	bl	80027b0 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f98d 	bl	8000da0 <write4bits>
    DELAY_MS(1);
 8000a86:	2001      	movs	r0, #1
 8000a88:	f001 fe92 	bl	80027b0 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f000 f987 	bl	8000da0 <write4bits>
 8000a92:	e01d      	b.n	8000ad0 <begin+0xf4>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <begin+0x13c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f8f3 	bl	8000c8a <command>
    DELAY_MS(5);  // wait more than 4.1ms
 8000aa4:	2005      	movs	r0, #5
 8000aa6:	f001 fe83 	bl	80027b0 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <begin+0x13c>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f8e8 	bl	8000c8a <command>
    DELAY_MS(1);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f001 fe78 	bl	80027b0 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <begin+0x13c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	f043 0320 	orr.w	r3, r3, #32
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f8dd 	bl	8000c8a <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <begin+0x13c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f8d5 	bl	8000c8a <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <begin+0x150>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	701a      	strb	r2, [r3, #0]
  display();
 8000ae6:	f000 f881 	bl	8000bec <display>

  // clear it off
  clear();
 8000aea:	f000 f843 	bl	8000b74 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <begin+0x154>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <begin+0x154>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 f8c3 	bl	8000c8a <command>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000180 	.word	0x20000180
 8000b10:	431bde83 	.word	0x431bde83
 8000b14:	20000388 	.word	0x20000388
 8000b18:	2000037d 	.word	0x2000037d
 8000b1c:	20000380 	.word	0x20000380
 8000b20:	2000037c 	.word	0x2000037c
 8000b24:	40021400 	.word	0x40021400
 8000b28:	40020c00 	.word	0x40020c00
 8000b2c:	2000037e 	.word	0x2000037e
 8000b30:	2000037f 	.word	0x2000037f

08000b34 <setRowOffsets>:
//
//  // if you have a port that is not listed add it below the other else ifs
//}

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <setRowOffsets+0x3c>)
 8000b48:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <setRowOffsets+0x3c>)
 8000b50:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <setRowOffsets+0x3c>)
 8000b58:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <setRowOffsets+0x3c>)
 8000b60:	70da      	strb	r2, [r3, #3]
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000384 	.word	0x20000384

08000b74 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f000 f886 	bl	8000c8a <command>
  DELAY_MS(2);  // this command takes a long time!
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f001 fe16 	bl	80027b0 <HAL_Delay>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  DELAY_MS(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	460a      	mov	r2, r1
 8000b92:	71fb      	strb	r3, [r7, #7]
 8000b94:	4613      	mov	r3, r2
 8000b96:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000b98:	2304      	movs	r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000b9c:	79bb      	ldrb	r3, [r7, #6]
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d803      	bhi.n	8000bac <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <setCursor+0x5c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	79ba      	ldrb	r2, [r7, #6]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d303      	bcc.n	8000bbe <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <setCursor+0x5c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	4a09      	ldr	r2, [pc, #36]	; (8000be8 <setCursor+0x60>)
 8000bc2:	5cd2      	ldrb	r2, [r2, r3]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f858 	bl	8000c8a <command>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000380 	.word	0x20000380
 8000be8:	20000384 	.word	0x20000384

08000bec <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <display+0x28>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <display+0x28>)
 8000bfc:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <display+0x28>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	f043 0308 	orr.w	r3, r3, #8
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f83e 	bl	8000c8a <command>
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000037e 	.word	0x2000037e

08000c18 <print_str>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
uint32_t print_str(const char str[]) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <print_str+0x12>
 8000c26:	2300      	movs	r3, #0
 8000c28:	e01d      	b.n	8000c66 <print_str+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff fb06 	bl	8000240 <strlen>
 8000c34:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000c3a:	e00c      	b.n	8000c56 <print_str+0x3e>
    if (write(*buffer++)) n++;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	617a      	str	r2, [r7, #20]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 f82e 	bl	8000ca6 <write>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d008      	beq.n	8000c62 <print_str+0x4a>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1e5a      	subs	r2, r3, #1
 8000c5a:	613a      	str	r2, [r7, #16]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d1ed      	bne.n	8000c3c <print_str+0x24>
 8000c60:	e000      	b.n	8000c64 <print_str+0x4c>
    else break;
 8000c62:	bf00      	nop
  }
  return n;
 8000c64:	68fb      	ldr	r3, [r7, #12]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <print_char>:

uint32_t print_char(const char simb) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  write(simb);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f813 	bl	8000ca6 <write>
  return 1;
 8000c80:	2301      	movs	r3, #1
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f813 	bl	8000cc4 <send>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <write>:

inline uint32_t write(uint8_t value) {
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
  send(value, 1);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f805 	bl	8000cc4 <send>
  return 1; // assume success
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, uint8_t mode) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
//  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, _rs_pin, mode);
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_RS(mode);
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <send+0x50>)
 8000cde:	f002 fdd5 	bl	800388c <HAL_GPIO_WritePin>
  // if there is a RW pin indicated, set it low to Write
//  if (_rw_pin != 255) {
//    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
//  }

  if (_displayfunction & LCD_8BITMODE) {
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <send+0x54>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d004      	beq.n	8000cf8 <send+0x34>
    write8bits(value);
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f893 	bl	8000e1c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000cf6:	e009      	b.n	8000d0c <send+0x48>
    write4bits(value>>4);
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f84e 	bl	8000da0 <write4bits>
    write4bits(value);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f84a 	bl	8000da0 <write4bits>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021400 	.word	0x40021400
 8000d18:	2000037d 	.word	0x2000037d

08000d1c <pulseEnable>:

void pulseEnable(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, _enable_pin, GPIO_PIN_SET);
//  HAL_Delay(1);    // enable pulse must be >450ns
//  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, _enable_pin, GPIO_PIN_RESET);
//  HAL_Delay(1);   // commands need > 37us to settle
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_EN(0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d28:	481b      	ldr	r0, [pc, #108]	; (8000d98 <pulseEnable+0x7c>)
 8000d2a:	f002 fdaf 	bl	800388c <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	e003      	b.n	8000d3c <pulseEnable+0x20>
 8000d34:	bf00      	nop
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <pulseEnable+0x80>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68fa      	ldr	r2, [r7, #12]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3f6      	bcc.n	8000d34 <pulseEnable+0x18>
  LCD_SET_EN(1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4c:	4812      	ldr	r0, [pc, #72]	; (8000d98 <pulseEnable+0x7c>)
 8000d4e:	f002 fd9d 	bl	800388c <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	e003      	b.n	8000d60 <pulseEnable+0x44>
 8000d58:	bf00      	nop
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <pulseEnable+0x80>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68ba      	ldr	r2, [r7, #8]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d3f6      	bcc.n	8000d58 <pulseEnable+0x3c>
  LCD_SET_EN(0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <pulseEnable+0x7c>)
 8000d72:	f002 fd8b 	bl	800388c <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	e003      	b.n	8000d84 <pulseEnable+0x68>
 8000d7c:	bf00      	nop
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3301      	adds	r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <pulseEnable+0x80>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d3f6      	bcc.n	8000d7c <pulseEnable+0x60>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020c00 	.word	0x40020c00
 8000d9c:	20000388 	.word	0x20000388

08000da0 <write4bits>:

void write4bits(uint8_t value) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
//  for (int i = 0; i < 4; i++) {
//    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
//  }
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
	LCD_SET_D4(((value >> 0) & 1) ? 1 : 0);
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	461a      	mov	r2, r3
 8000db4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db8:	4816      	ldr	r0, [pc, #88]	; (8000e14 <write4bits+0x74>)
 8000dba:	f002 fd67 	bl	800388c <HAL_GPIO_WritePin>
	LCD_SET_D5(((value >> 1) & 1) ? 1 : 0);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd0:	4811      	ldr	r0, [pc, #68]	; (8000e18 <write4bits+0x78>)
 8000dd2:	f002 fd5b 	bl	800388c <HAL_GPIO_WritePin>
	LCD_SET_D6(((value >> 2) & 1) ? 1 : 0);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <write4bits+0x78>)
 8000dea:	f002 fd4f 	bl	800388c <HAL_GPIO_WritePin>
	LCD_SET_D7(((value >> 3) & 1) ? 1 : 0);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	08db      	lsrs	r3, r3, #3
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e00:	4804      	ldr	r0, [pc, #16]	; (8000e14 <write4bits+0x74>)
 8000e02:	f002 fd43 	bl	800388c <HAL_GPIO_WritePin>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

  pulseEnable();
 8000e06:	f7ff ff89 	bl	8000d1c <pulseEnable>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021400 	.word	0x40021400
 8000e18:	40021000 	.word	0x40021000

08000e1c <write8bits>:

void write8bits(uint8_t value) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
//  for (int i = 0; i < 8; i++) {
//    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
//  }
//
//  pulseEnable();
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e48:	4a2f      	ldr	r2, [pc, #188]	; (8000f08 <MX_ADC1_Init+0xd4>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e76:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <MX_ADC1_Init+0xd8>)
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e94:	481b      	ldr	r0, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000e96:	f001 fcaf 	bl	80027f8 <HAL_ADC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea0:	f001 f810 	bl	8001ec4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000eac:	2307      	movs	r3, #7
 8000eae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000eb6:	f001 ff27 	bl	8002d08 <HAL_ADC_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec0:	f001 f800 	bl	8001ec4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000ed2:	f001 ff19 	bl	8002d08 <HAL_ADC_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000edc:	f000 fff2 	bl	8001ec4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ee0:	2306      	movs	r3, #6
 8000ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_ADC1_Init+0xd0>)
 8000eee:	f001 ff0b 	bl	8002d08 <HAL_ADC_ConfigChannel>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ef8:	f000 ffe4 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000038c 	.word	0x2000038c
 8000f08:	40012000 	.word	0x40012000
 8000f0c:	0f000001 	.word	0x0f000001

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <HAL_ADC_MspInit+0x84>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12b      	bne.n	8000f8a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f36:	4a18      	ldr	r2, [pc, #96]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_ADC_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8000f62:	2368      	movs	r3, #104	; 0x68
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f66:	2303      	movs	r3, #3
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <HAL_ADC_MspInit+0x8c>)
 8000f76:	f002 fac5 	bl	8003504 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2107      	movs	r1, #7
 8000f7e:	2012      	movs	r0, #18
 8000f80:	f002 f9f7 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f84:	2012      	movs	r0, #18
 8000f86:	f002 fa10 	bl	80033aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3728      	adds	r7, #40	; 0x28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40012000 	.word	0x40012000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020000 	.word	0x40020000

08000fa0 <AverageValue>:
	averageValue->avgRes = 0;
}


static inline void AverageValue (AverageValue_t *averageValue, i16 value)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
	averageValue->avgBuff += (i32)value - (i32)averageValue->avgRes;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000fba:	1a5b      	subs	r3, r3, r1
 8000fbc:	441a      	add	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = (i16)(averageValue->avgBuff >> averageValue->_factor);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	7992      	ldrb	r2, [r2, #6]
 8000fca:	4113      	asrs	r3, r2
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	809a      	strh	r2, [r3, #4]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
	...

08000fe0 <LCD_PrintProgress>:


static inline void LCD_PrintProgress (LCD_RemoteGeneral_t *LCD_RemoteGeneral, ui8 cursor_pos)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	for (ui8 i = 0; i < 3; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e01a      	b.n	8001028 <LCD_PrintProgress+0x48>
		cursor_pos += print_char(((ui8)(LCD_RemoteGeneral->currentTimeMs / 1000)) % 4 > i ? '.' : ' ');
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a1b      	ldr	r3, [r3, #32]
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <LCD_PrintProgress+0x58>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	099b      	lsrs	r3, r3, #6
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	7bfa      	ldrb	r2, [r7, #15]
 8001008:	429a      	cmp	r2, r3
 800100a:	d201      	bcs.n	8001010 <LCD_PrintProgress+0x30>
 800100c:	232e      	movs	r3, #46	; 0x2e
 800100e:	e000      	b.n	8001012 <LCD_PrintProgress+0x32>
 8001010:	2320      	movs	r3, #32
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fe2b 	bl	8000c6e <print_char>
 8001018:	4603      	mov	r3, r0
 800101a:	b2da      	uxtb	r2, r3
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	4413      	add	r3, r2
 8001020:	70fb      	strb	r3, [r7, #3]
	for (ui8 i = 0; i < 3; i++)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	3301      	adds	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d9e1      	bls.n	8000ff2 <LCD_PrintProgress+0x12>
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	10624dd3 	.word	0x10624dd3

0800103c <LCD_FillSpace>:


static inline void LCD_FillSpace (ui8 *cursor_pos, ui8 to_pos)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	while (*cursor_pos < to_pos)
 8001048:	e008      	b.n	800105c <LCD_FillSpace+0x20>
	{
		print_char(' ');
 800104a:	2020      	movs	r0, #32
 800104c:	f7ff fe0f 	bl	8000c6e <print_char>
		(*cursor_pos)++;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3301      	adds	r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	701a      	strb	r2, [r3, #0]
	while (*cursor_pos < to_pos)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	78fa      	ldrb	r2, [r7, #3]
 8001062:	429a      	cmp	r2, r3
 8001064:	d8f1      	bhi.n	800104a <LCD_FillSpace+0xe>
	}
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <ProcessHandler>:
 */
/* Process incoming commands. Call it as frequently as possible,
   to prevent overrun of serial input buffer */
void ProcessHandler (GeneralSBGC_t *generalSBGC, LCD_RemoteGeneral_t *LCD_RemoteGeneral,
					 RealTimeData_t *realTimeData, AdjVarGeneral_t *adjVarGeneral)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	603b      	str	r3, [r7, #0]
	if (generalSBGC->_parserCurrentStatus == TX_RX_OK)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001084:	2b00      	cmp	r3, #0
 8001086:	d14e      	bne.n	8001126 <ProcessHandler+0xb6>
	{
		if (LCD_RemoteGeneral->connectFlag == 0)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10a      	bne.n	80010a8 <ProcessHandler+0x38>
		{
			LCD_RemoteGeneral->connectFlag = 1;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			SBGC32_GetAdjVarValues(generalSBGC, adjVarGeneral, LCD_RemoteGeneral->adjVarQuan);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	7f5b      	ldrb	r3, [r3, #29]
 800109e:	461a      	mov	r2, r3
 80010a0:	6839      	ldr	r1, [r7, #0]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f006 fb9a 	bl	80077dc <SBGC32_GetAdjVarValues>
		}

		ui32 err = (ui32)(abs(realTimeData->IMU_Angle[ROLL] - realTimeData->targetAngle[ROLL])
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010c0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
				 + abs(realTimeData->IMU_Angle[PITCH] - realTimeData->targetAngle[PITCH])
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	1acb      	subs	r3, r1, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bfb8      	it	lt
 80010dc:	425b      	neglt	r3, r3
 80010de:	441a      	add	r2, r3
				 + abs(realTimeData->IMU_Angle[YAW] - realTimeData->targetAngle[YAW])) * (ui32)(ANGLE_DEGREE_SCALE * 1000);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	1acb      	subs	r3, r1, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bfb8      	it	lt
 80010f8:	425b      	neglt	r3, r3
 80010fa:	4413      	add	r3, r2
		ui32 err = (ui32)(abs(realTimeData->IMU_Angle[ROLL] - realTimeData->targetAngle[ROLL])
 80010fc:	461a      	mov	r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	00da      	lsls	r2, r3, #3
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]

		 AverageValue(&LCD_RemoteGeneral->TargetErrorAverage, constrain_(err, 0, 999));
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f103 0210 	add.w	r2, r3, #16
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001116:	428b      	cmp	r3, r1
 8001118:	bf28      	it	cs
 800111a:	460b      	movcs	r3, r1
 800111c:	b21b      	sxth	r3, r3
 800111e:	4619      	mov	r1, r3
 8001120:	4610      	mov	r0, r2
 8001122:	f7ff ff3d 	bl	8000fa0 <AverageValue>
	}

	/* If no commands for a long time, set connected state to false */
	if (LCD_RemoteGeneral->connectFlag && (LCD_RemoteGeneral->currentTimeMs - LCD_RemoteGeneral->rtReqCmdTimeMs) > MAX_WAIT_TIME_MS)
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <ProcessHandler+0xd8>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800113e:	d903      	bls.n	8001148 <ProcessHandler+0xd8>
		LCD_RemoteGeneral->connectFlag = 0;  // last_bt_connect_ms = currentTimeMs;
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <DebounceNavigationButton>:

/* De-bounce button: it should keep its state for a given period
   of time, specified in the BTN_BOUNCE_THRESHOLD_MS returns 1
   if LCD_RemoteGeneral->....triggerState is changed. */
ui8 DebounceNavigationButton (LCD_RemoteGeneral_t *LCD_RemoteGeneral, ButtonDirection_t newState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	if (newState != LCD_RemoteGeneral->NavButton.state)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7e9b      	ldrb	r3, [r3, #26]
 8001160:	78fa      	ldrb	r2, [r7, #3]
 8001162:	429a      	cmp	r2, r3
 8001164:	d008      	beq.n	8001178 <DebounceNavigationButton+0x28>
	{
		LCD_RemoteGeneral->NavButton.state = newState;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	78fa      	ldrb	r2, [r7, #3]
 800116a:	769a      	strb	r2, [r3, #26]
		LCD_RemoteGeneral->NavButton.lastTimeMs = LCD_RemoteGeneral->currentTimeMs;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	831a      	strh	r2, [r3, #24]
 8001176:	e014      	b.n	80011a2 <DebounceNavigationButton+0x52>
	}

	else if (LCD_RemoteGeneral->NavButton.triggerState != LCD_RemoteGeneral->NavButton.state &&
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7eda      	ldrb	r2, [r3, #27]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7e9b      	ldrb	r3, [r3, #26]
 8001180:	429a      	cmp	r2, r3
 8001182:	d00e      	beq.n	80011a2 <DebounceNavigationButton+0x52>
	  		(ui16)(LCD_RemoteGeneral->currentTimeMs - LCD_RemoteGeneral->NavButton.lastTimeMs) > SOFTWARE_ANTI_BOUNCE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	8b1b      	ldrh	r3, [r3, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b29b      	uxth	r3, r3
	else if (LCD_RemoteGeneral->NavButton.triggerState != LCD_RemoteGeneral->NavButton.state &&
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d905      	bls.n	80011a2 <DebounceNavigationButton+0x52>
	{
		LCD_RemoteGeneral->NavButton.triggerState = LCD_RemoteGeneral->NavButton.state;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7e9a      	ldrb	r2, [r3, #26]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	76da      	strb	r2, [r3, #27]
		return 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <DebounceNavigationButton+0x54>
	}

	return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <ReadNavigationButtonState>:


/* Reads the state of buttons */
ButtonDirection_t ReadNavigationButtonState (InputsInfo_t *inputsInfo)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
	ReadADC_Inputs(inputsInfo);  // start next conversions
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f96e 	bl	800149a <ReadADC_Inputs>

	ui16 navBtnLevel = inputsInfo->ADC_INx[ADC_NAV];
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	81fb      	strh	r3, [r7, #14]

	if (navBtnLevel >= 3600)
 80011c4:	89fb      	ldrh	r3, [r7, #14]
 80011c6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80011ca:	d301      	bcc.n	80011d0 <ReadNavigationButtonState+0x20>
		return NAV_BTN_RELEASED;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e025      	b.n	800121c <ReadNavigationButtonState+0x6c>

	if (navBtnLevel < 150)
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	2b95      	cmp	r3, #149	; 0x95
 80011d4:	d801      	bhi.n	80011da <ReadNavigationButtonState+0x2a>
		return NAV_BTN_LEFT;
 80011d6:	2304      	movs	r3, #4
 80011d8:	e020      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 600)
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80011e0:	d201      	bcs.n	80011e6 <ReadNavigationButtonState+0x36>
		return NAV_BTN_UP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	e01a      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 1300)
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	f240 5213 	movw	r2, #1299	; 0x513
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d801      	bhi.n	80011f4 <ReadNavigationButtonState+0x44>
		return NAV_BTN_RIGHT;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e013      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 2000)
 80011f4:	89fb      	ldrh	r3, [r7, #14]
 80011f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80011fa:	d201      	bcs.n	8001200 <ReadNavigationButtonState+0x50>
		return NAV_BTN_SELECT;
 80011fc:	2305      	movs	r3, #5
 80011fe:	e00d      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 2900)
 8001200:	89fb      	ldrh	r3, [r7, #14]
 8001202:	f640 3253 	movw	r2, #2899	; 0xb53
 8001206:	4293      	cmp	r3, r2
 8001208:	d801      	bhi.n	800120e <ReadNavigationButtonState+0x5e>
		return NAV_BTN_DOWN;
 800120a:	2303      	movs	r3, #3
 800120c:	e006      	b.n	800121c <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 3600)
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001214:	d201      	bcs.n	800121a <ReadNavigationButtonState+0x6a>
		return NAV_BTN_ENCODER_SELECT;
 8001216:	2306      	movs	r3, #6
 8001218:	e000      	b.n	800121c <ReadNavigationButtonState+0x6c>

	return NAV_BTN_RELEASED;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <UpdateDisplay>:


/* Re-paint display */
void UpdateDisplay (GeneralSBGC_t *generalSBGC, LCD_RemoteGeneral_t *LCD_RemoteGeneral,
					RealTimeData_t *realTimeData, AdjVarGeneral_t *adjVarGeneral)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b08d      	sub	sp, #52	; 0x34
 8001228:	af02      	add	r7, sp, #8
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
	/* First raw */
	setCursor(0, 0);
 8001232:	2100      	movs	r1, #0
 8001234:	2000      	movs	r0, #0
 8001236:	f7ff fca7 	bl	8000b88 <setCursor>

	char buf [17];

	ui8 pos = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	74fb      	strb	r3, [r7, #19]

	LCD_RemoteGeneral->currentPage = (LCD_RemoteGeneral->currentPage + 50) % 5;  // Should be in the range of available pages
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001244:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001248:	4b7c      	ldr	r3, [pc, #496]	; (800143c <UpdateDisplay+0x218>)
 800124a:	fb83 1302 	smull	r1, r3, r3, r2
 800124e:	1059      	asrs	r1, r3, #1
 8001250:	17d3      	asrs	r3, r2, #31
 8001252:	1ac9      	subs	r1, r1, r3
 8001254:	460b      	mov	r3, r1
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	1ad1      	subs	r1, r2, r3
 800125c:	b24a      	sxtb	r2, r1
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	switch (LCD_RemoteGeneral->currentPage)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 800126a:	2b04      	cmp	r3, #4
 800126c:	d873      	bhi.n	8001356 <UpdateDisplay+0x132>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <UpdateDisplay+0x50>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	08001289 	.word	0x08001289
 8001278:	080012f9 	.word	0x080012f9
 800127c:	0800130d 	.word	0x0800130d
 8001280:	08001327 	.word	0x08001327
 8001284:	08001341 	.word	0x08001341
	{
		case 0 : /* PAGE 0 */
			if (LCD_RemoteGeneral->connectFlag)
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800128e:	2b00      	cmp	r3, #0
 8001290:	d028      	beq.n	80012e4 <UpdateDisplay+0xc0>
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8b3 3037 	ldrh.w	r3, [r3, #55]	; 0x37
 8001298:	b29b      	uxth	r3, r3
 800129a:	4a69      	ldr	r2, [pc, #420]	; (8001440 <UpdateDisplay+0x21c>)
 800129c:	fba2 2303 	umull	r2, r3, r2, r3
 80012a0:	095b      	lsrs	r3, r3, #5
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	461c      	mov	r4, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8b3 3037 	ldrh.w	r3, [r3, #55]	; 0x37
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4a64      	ldr	r2, [pc, #400]	; (8001440 <UpdateDisplay+0x21c>)
 80012b0:	fba2 1203 	umull	r1, r2, r2, r3
 80012b4:	0952      	lsrs	r2, r2, #5
 80012b6:	2164      	movs	r1, #100	; 0x64
 80012b8:	fb01 f202 	mul.w	r2, r1, r2
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4619      	mov	r1, r3
						realTimeData->curProfile + 1, LCD_RemoteGeneral->TargetErrorAverage.avgRes);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 80012c8:	3301      	adds	r3, #1
						realTimeData->curProfile + 1, LCD_RemoteGeneral->TargetErrorAverage.avgRes);
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 80012d0:	f107 0014 	add.w	r0, r7, #20
 80012d4:	9201      	str	r2, [sp, #4]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	460b      	mov	r3, r1
 80012da:	4622      	mov	r2, r4
 80012dc:	4959      	ldr	r1, [pc, #356]	; (8001444 <UpdateDisplay+0x220>)
 80012de:	f009 f991 	bl	800a604 <siprintf>

			else
				LCD_PrintProgress(LCD_RemoteGeneral, print_str("CONNECTING"));

			break;
 80012e2:	e038      	b.n	8001356 <UpdateDisplay+0x132>
				LCD_PrintProgress(LCD_RemoteGeneral, print_str("CONNECTING"));
 80012e4:	4858      	ldr	r0, [pc, #352]	; (8001448 <UpdateDisplay+0x224>)
 80012e6:	f7ff fc97 	bl	8000c18 <print_str>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4619      	mov	r1, r3
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f7ff fe75 	bl	8000fe0 <LCD_PrintProgress>
			break;
 80012f6:	e02e      	b.n	8001356 <UpdateDisplay+0x132>

		case 1 :  /* PAGE 1 */
			sprintf(buf, "SE: %03d FM:", generalSBGC->_rxErrorsCount);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80012fc:	461a      	mov	r2, r3
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4952      	ldr	r1, [pc, #328]	; (800144c <UpdateDisplay+0x228>)
 8001304:	4618      	mov	r0, r3
 8001306:	f009 f97d 	bl	800a604 <siprintf>
			break;
 800130a:	e024      	b.n	8001356 <UpdateDisplay+0x132>

		case 2 :  /* PAGE 2 */
			sprintf(buf, " D1:%3d  D2:%3d", LCD_RemoteGeneral->debug1, LCD_RemoteGeneral->debug2);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001312:	461a      	mov	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800131a:	f107 0014 	add.w	r0, r7, #20
 800131e:	494c      	ldr	r1, [pc, #304]	; (8001450 <UpdateDisplay+0x22c>)
 8001320:	f009 f970 	bl	800a604 <siprintf>
			break;
 8001324:	e017      	b.n	8001356 <UpdateDisplay+0x132>

		case 3 :  /* PAGE 3 */
			sprintf(buf, " D3:%3d  D4:%3d", LCD_RemoteGeneral->debug3, LCD_RemoteGeneral->debug4);
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800132c:	461a      	mov	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001334:	f107 0014 	add.w	r0, r7, #20
 8001338:	4946      	ldr	r1, [pc, #280]	; (8001454 <UpdateDisplay+0x230>)
 800133a:	f009 f963 	bl	800a604 <siprintf>
			break;
 800133e:	e00a      	b.n	8001356 <UpdateDisplay+0x132>

		case 4 :  /* PAGE 4 */
			sprintf(buf, "I2C_ERRORS: %03d", realTimeData->I2C_ErrorCount);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001344:	b29b      	uxth	r3, r3
 8001346:	461a      	mov	r2, r3
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4942      	ldr	r1, [pc, #264]	; (8001458 <UpdateDisplay+0x234>)
 800134e:	4618      	mov	r0, r3
 8001350:	f009 f958 	bl	800a604 <siprintf>
			break;
 8001354:	bf00      	nop
	}

	pos = print_str(buf);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fc5c 	bl	8000c18 <print_str>
 8001360:	4603      	mov	r3, r0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	74fb      	strb	r3, [r7, #19]

	LCD_FillSpace(&pos, LCD_COLS);
 8001366:	f107 0313 	add.w	r3, r7, #19
 800136a:	2110      	movs	r1, #16
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe65 	bl	800103c <LCD_FillSpace>

	/* Second raw */
	setCursor(0, 1);
 8001372:	2101      	movs	r1, #1
 8001374:	2000      	movs	r0, #0
 8001376:	f7ff fc07 	bl	8000b88 <setCursor>

	#if (SBGC_DEBUG_MODE)

		/* Currently selected adj. variable name and value */
		for (pos = 0; pos < ADJ_VAR_NAME_MAX_LENGTH; pos++)
 800137a:	2300      	movs	r3, #0
 800137c:	74fb      	strb	r3, [r7, #19]
 800137e:	e02a      	b.n	80013d6 <UpdateDisplay+0x1b2>
		{
			if (!(adjVarGeneral[LCD_RemoteGeneral->currentAdjVarIndex].name[pos + 8]))
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	7f1b      	ldrb	r3, [r3, #28]
 8001384:	461a      	mov	r2, r3
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	461a      	mov	r2, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	441a      	add	r2, r3
 8001394:	7cfb      	ldrb	r3, [r7, #19]
 8001396:	3308      	adds	r3, #8
 8001398:	4413      	add	r3, r2
 800139a:	785b      	ldrb	r3, [r3, #1]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01e      	beq.n	80013de <UpdateDisplay+0x1ba>
				break;

			sprintf(&buf[pos], "%c", adjVarGeneral[LCD_RemoteGeneral->currentAdjVarIndex].name[pos + 8]);  // offset due to ADJ_VAR_ (+ 8)
 80013a0:	7cfb      	ldrb	r3, [r7, #19]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	1898      	adds	r0, r3, r2
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	7f1b      	ldrb	r3, [r3, #28]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	461a      	mov	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	441a      	add	r2, r3
 80013be:	7cfb      	ldrb	r3, [r7, #19]
 80013c0:	3308      	adds	r3, #8
 80013c2:	4413      	add	r3, r2
 80013c4:	785b      	ldrb	r3, [r3, #1]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4924      	ldr	r1, [pc, #144]	; (800145c <UpdateDisplay+0x238>)
 80013ca:	f009 f91b 	bl	800a604 <siprintf>
		for (pos = 0; pos < ADJ_VAR_NAME_MAX_LENGTH; pos++)
 80013ce:	7cfb      	ldrb	r3, [r7, #19]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	74fb      	strb	r3, [r7, #19]
 80013d6:	7cfb      	ldrb	r3, [r7, #19]
 80013d8:	2b09      	cmp	r3, #9
 80013da:	d9d1      	bls.n	8001380 <UpdateDisplay+0x15c>
 80013dc:	e000      	b.n	80013e0 <UpdateDisplay+0x1bc>
				break;
 80013de:	bf00      	nop
		}

	#endif

	sprintf(&buf[pos], ":%li", adjVarGeneral[LCD_RemoteGeneral->currentAdjVarIndex].value);
 80013e0:	7cfb      	ldrb	r3, [r7, #19]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	1898      	adds	r0, r3, r2
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	7f1b      	ldrb	r3, [r3, #28]
 80013ee:	461a      	mov	r2, r3
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	011b      	lsls	r3, r3, #4
 80013f8:	461a      	mov	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	461a      	mov	r2, r3
 8001402:	4917      	ldr	r1, [pc, #92]	; (8001460 <UpdateDisplay+0x23c>)
 8001404:	f009 f8fe 	bl	800a604 <siprintf>
	pos = print_str(buf);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fc03 	bl	8000c18 <print_str>
 8001412:	4603      	mov	r3, r0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	74fb      	strb	r3, [r7, #19]

	LCD_FillSpace(&pos, LCD_COLS);
 8001418:	f107 0313 	add.w	r3, r7, #19
 800141c:	2110      	movs	r1, #16
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe0c 	bl	800103c <LCD_FillSpace>

	LCD_RemoteGeneral->lowRateTimeMs = LCD_RemoteGeneral->currentTimeMs;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
	LCD_RemoteGeneral->updateDisplayFlag = DISPLAY_UPDATED;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8001434:	bf00      	nop
 8001436:	372c      	adds	r7, #44	; 0x2c
 8001438:	46bd      	mov	sp, r7
 800143a:	bd90      	pop	{r4, r7, pc}
 800143c:	66666667 	.word	0x66666667
 8001440:	51eb851f 	.word	0x51eb851f
 8001444:	0800de40 	.word	0x0800de40
 8001448:	0800de58 	.word	0x0800de58
 800144c:	0800de64 	.word	0x0800de64
 8001450:	0800de74 	.word	0x0800de74
 8001454:	0800de84 	.word	0x0800de84
 8001458:	0800de94 	.word	0x0800de94
 800145c:	0800dea8 	.word	0x0800dea8
 8001460:	0800deac 	.word	0x0800deac

08001464 <InitADC>:

/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 *													 Low-Layer Functions
 */
void InitADC (InputsInfo_t *inputsInfo, __ADC_STRUCT)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	inputsInfo->adc = adc;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	605a      	str	r2, [r3, #4]
	DISABLE_ADC_CR1_EOCIE(inputsInfo->adc);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 0220 	bic.w	r2, r2, #32
 8001486:	605a      	str	r2, [r3, #4]

	inputsInfo->_curChannel = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	709a      	strb	r2, [r3, #2]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <ReadADC_Inputs>:


void ReadADC_Inputs (InputsInfo_t *inputsInfo)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	START_ADC(inputsInfo->adc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 f9ea 	bl	8002880 <HAL_ADC_Start_IT>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <ADC_DRV_EndConvCallBack>:


void ADC_DRV_EndConvCallBack (InputsInfo_t *inputsInfo)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	inputsInfo->ADC_INx[inputsInfo->_curChannel++] = GET_ADC_CONV_DATA(inputsInfo->adc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	b2d0      	uxtb	r0, r2
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	7090      	strb	r0, [r2, #2]
 80014d0:	461a      	mov	r2, r3
 80014d2:	b289      	uxth	r1, r1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if (inputsInfo->_curChannel >= ADC_CHANNELS_QUAN)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	789b      	ldrb	r3, [r3, #2]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <ADC_DRV_EndConvCallBack+0x3e>
	{
		inputsInfo->_curChannel = 0;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	709a      	strb	r2, [r3, #2]
		STOP_ADC(inputsInfo->adc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fa9f 	bl	8002a30 <HAL_ADC_Stop_IT>
	}
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <ReadButtonState>:


ui8 ReadButtonState (__GPIO_STRUCT, ui16 pin)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
	return READ_PIN(gpio, pin);
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f002 f9a6 	bl	800385c <HAL_GPIO_ReadPin>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <EXTI_DRV_FallingCallBack>:


void EXTI_DRV_FallingCallBack (InputsInfo_t *inputsInfo, ui16 pin)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]
	if (pin == ENC_A_Pin)
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152c:	d109      	bne.n	8001542 <EXTI_DRV_FallingCallBack+0x28>
		inputsInfo->KE_CurrentValue++;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	3301      	adds	r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	b25a      	sxtb	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	751a      	strb	r2, [r3, #20]

	else
		inputsInfo->KE_CurrentValue--;
}
 8001540:	e008      	b.n	8001554 <EXTI_DRV_FallingCallBack+0x3a>
		inputsInfo->KE_CurrentValue--;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	3b01      	subs	r3, #1
 800154c:	b2db      	uxtb	r3, r3
 800154e:	b25a      	sxtb	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	751a      	strb	r2, [r3, #20]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <InitI2C>:


void InitI2C (InputsInfo_t *inputsInfo, __I2C_STRUCT)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	inputsInfo->i2c = i2c;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	611a      	str	r2, [r3, #16]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <WriteI2C_Data>:


void WriteI2C_Data (__I2C_STRUCT, ui8 slaveAddr, ui8 *data, ui8 size)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af02      	add	r7, sp, #8
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	461a      	mov	r2, r3
 8001588:	460b      	mov	r3, r1
 800158a:	72fb      	strb	r3, [r7, #11]
 800158c:	4613      	mov	r3, r2
 800158e:	72bb      	strb	r3, [r7, #10]
	#ifdef HAL_I2C_MODULE_ENABLED

		HAL_I2C_Master_Transmit(i2c, slaveAddr, data, size, 10);
 8001590:	7afb      	ldrb	r3, [r7, #11]
 8001592:	b299      	uxth	r1, r3
 8001594:	7abb      	ldrb	r3, [r7, #10]
 8001596:	b29b      	uxth	r3, r3
 8001598:	220a      	movs	r2, #10
 800159a:	9200      	str	r2, [sp, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f002 fa42 	bl	8003a28 <HAL_I2C_Master_Transmit>
		LL_I2C_ClearFlag_STOP(i2c);

		I2C_CLEAR_CR2(i2c);

	#endif
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <RequestI2C_Data>:


void RequestI2C_Data (__I2C_STRUCT, ui8 slaveAddr, ui8 *data, ui8 size)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	461a      	mov	r2, r3
 80015b8:	460b      	mov	r3, r1
 80015ba:	72fb      	strb	r3, [r7, #11]
 80015bc:	4613      	mov	r3, r2
 80015be:	72bb      	strb	r3, [r7, #10]
	#ifdef HAL_I2C_MODULE_ENABLED

		HAL_I2C_Master_Receive(i2c, slaveAddr, data, size, 10);
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	b299      	uxth	r1, r3
 80015c4:	7abb      	ldrb	r3, [r7, #10]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	220a      	movs	r2, #10
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f002 fb1e 	bl	8003c10 <HAL_I2C_Master_Receive>
		LL_I2C_ClearFlag_STOP(i2c);

		I2C_CLEAR_CR2(i2c);

	#endif
}
 80015d4:	bf00      	nop
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <GetEncoderAngles>:


void GetEncoderAngles (InputsInfo_t *inputsInfo)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	ui8 regAddr [2] = {ENCODER_ANGLE_REG_MB, ENCODER_ANGLE_REG_LB};
 80015e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80015e8:	81bb      	strh	r3, [r7, #12]

	WriteI2C_Data(inputsInfo->i2c, ENCODER_I2C_ADDRES, regAddr, 2);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6918      	ldr	r0, [r3, #16]
 80015ee:	f107 020c 	add.w	r2, r7, #12
 80015f2:	2302      	movs	r3, #2
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	f7ff ffc1 	bl	800157c <WriteI2C_Data>
	RequestI2C_Data(inputsInfo->i2c, ENCODER_I2C_ADDRES, inputsInfo->I2C_Buff, 2);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6918      	ldr	r0, [r3, #16]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f103 0208 	add.w	r2, r3, #8
 8001604:	2302      	movs	r3, #2
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	f7ff ffd0 	bl	80015ac <RequestI2C_Data>

	inputsInfo->FE_CurrentAngle = (((ui16)inputsInfo->I2C_Buff[0] << 6) & 0x3FC0) | ((ui16)inputsInfo->I2C_Buff[1] & 0x00C0);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7a1b      	ldrb	r3, [r3, #8]
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	b21b      	sxth	r3, r3
 8001614:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 8001618:	b21a      	sxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7a5b      	ldrb	r3, [r3, #9]
 800161e:	b21b      	sxth	r3, r3
 8001620:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21b      	sxth	r3, r3
 800162a:	b29a      	uxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	815a      	strh	r2, [r3, #10]
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a67      	ldr	r2, [pc, #412]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	61bb      	str	r3, [r7, #24]
 8001664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a61      	ldr	r2, [pc, #388]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b5f      	ldr	r3, [pc, #380]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b5c      	ldr	r3, [pc, #368]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a5b      	ldr	r2, [pc, #364]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001696:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a55      	ldr	r2, [pc, #340]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0320 	and.w	r3, r3, #32
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ae:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a4f      	ldr	r2, [pc, #316]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a49      	ldr	r2, [pc, #292]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <MX_GPIO_Init+0x1b8>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	f242 0101 	movw	r1, #8193	; 0x2001
 80016e4:	4843      	ldr	r0, [pc, #268]	; (80017f4 <MX_GPIO_Init+0x1bc>)
 80016e6:	f002 f8d1 	bl	800388c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RS_Pin|LCD_D7_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80016f0:	4841      	ldr	r0, [pc, #260]	; (80017f8 <MX_GPIO_Init+0x1c0>)
 80016f2:	f002 f8cb 	bl	800388c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D6_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80016fc:	483f      	ldr	r0, [pc, #252]	; (80017fc <MX_GPIO_Init+0x1c4>)
 80016fe:	f002 f8c5 	bl	800388c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|LCD_EN_Pin, GPIO_PIN_RESET);
 8001702:	2200      	movs	r2, #0
 8001704:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001708:	483d      	ldr	r0, [pc, #244]	; (8001800 <MX_GPIO_Init+0x1c8>)
 800170a:	f002 f8bf 	bl	800388c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin|JOY_BTN_Pin;
 800170e:	f242 0302 	movw	r3, #8194	; 0x2002
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001718:	2302      	movs	r3, #2
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	4838      	ldr	r0, [pc, #224]	; (8001804 <MX_GPIO_Init+0x1cc>)
 8001724:	f001 feee 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|BT_EN_Pin;
 8001728:	f242 0301 	movw	r3, #8193	; 0x2001
 800172c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	482c      	ldr	r0, [pc, #176]	; (80017f4 <MX_GPIO_Init+0x1bc>)
 8001742:	f001 fedf 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_D7_Pin|LCD_D4_Pin;
 8001746:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001750:	2302      	movs	r3, #2
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001754:	2302      	movs	r3, #2
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4826      	ldr	r0, [pc, #152]	; (80017f8 <MX_GPIO_Init+0x1c0>)
 8001760:	f001 fed0 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 8001764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800176e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001770:	2301      	movs	r3, #1
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	481f      	ldr	r0, [pc, #124]	; (80017f8 <MX_GPIO_Init+0x1c0>)
 800177c:	f001 fec2 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin;
 8001780:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800178a:	2302      	movs	r3, #2
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800178e:	2302      	movs	r3, #2
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	4818      	ldr	r0, [pc, #96]	; (80017fc <MX_GPIO_Init+0x1c4>)
 800179a:	f001 feb3 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_A_Pin;
 800179e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017aa:	2301      	movs	r3, #1
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	4811      	ldr	r0, [pc, #68]	; (80017fc <MX_GPIO_Init+0x1c4>)
 80017b6:	f001 fea5 	bl	8003504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_EN_Pin;
 80017ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c4:	2302      	movs	r3, #2
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	480b      	ldr	r0, [pc, #44]	; (8001800 <MX_GPIO_Init+0x1c8>)
 80017d4:	f001 fe96 	bl	8003504 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2105      	movs	r1, #5
 80017dc:	2028      	movs	r0, #40	; 0x28
 80017de:	f001 fdc8 	bl	8003372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e2:	2028      	movs	r0, #40	; 0x28
 80017e4:	f001 fde1 	bl	80033aa <HAL_NVIC_EnableIRQ>

}
 80017e8:	bf00      	nop
 80017ea:	3730      	adds	r7, #48	; 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40021400 	.word	0x40021400
 80017fc:	40021000 	.word	0x40021000
 8001800:	40020c00 	.word	0x40020c00
 8001804:	40020800 	.word	0x40020800

08001808 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_I2C4_Init+0x74>)
 800180e:	4a1c      	ldr	r2, [pc, #112]	; (8001880 <MX_I2C4_Init+0x78>)
 8001810:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00A01B56;
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_I2C4_Init+0x74>)
 8001814:	4a1b      	ldr	r2, [pc, #108]	; (8001884 <MX_I2C4_Init+0x7c>)
 8001816:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <MX_I2C4_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_I2C4_Init+0x74>)
 8001820:	2201      	movs	r2, #1
 8001822:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <MX_I2C4_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_I2C4_Init+0x74>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_I2C4_Init+0x74>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_I2C4_Init+0x74>)
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_I2C4_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <MX_I2C4_Init+0x74>)
 8001844:	f002 f860 	bl	8003908 <HAL_I2C_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800184e:	f000 fb39 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001852:	2100      	movs	r1, #0
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <MX_I2C4_Init+0x74>)
 8001856:	f002 fd3d 	bl	80042d4 <HAL_I2CEx_ConfigAnalogFilter>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001860:	f000 fb30 	bl	8001ec4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001864:	2100      	movs	r1, #0
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_I2C4_Init+0x74>)
 8001868:	f002 fd7f 	bl	800436a <HAL_I2CEx_ConfigDigitalFilter>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001872:	f000 fb27 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200003d4 	.word	0x200003d4
 8001880:	40006000 	.word	0x40006000
 8001884:	00a01b56 	.word	0x00a01b56

08001888 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b0ae      	sub	sp, #184	; 0xb8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2290      	movs	r2, #144	; 0x90
 80018a6:	2100      	movs	r1, #0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f007 ff65 	bl	8009778 <memset>
  if(i2cHandle->Instance==I2C4)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a22      	ldr	r2, [pc, #136]	; (800193c <HAL_I2C_MspInit+0xb4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d13d      	bne.n	8001934 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80018b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 fa7f 	bl	8004dcc <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80018d4:	f000 faf6 	bl	8001ec4 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_I2C_MspInit+0xb8>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a18      	ldr	r2, [pc, #96]	; (8001940 <HAL_I2C_MspInit+0xb8>)
 80018de:	f043 0308 	orr.w	r3, r3, #8
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b16      	ldr	r3, [pc, #88]	; (8001940 <HAL_I2C_MspInit+0xb8>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0308 	and.w	r3, r3, #8
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018f8:	2312      	movs	r3, #18
 80018fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800190a:	2304      	movs	r3, #4
 800190c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001910:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001914:	4619      	mov	r1, r3
 8001916:	480b      	ldr	r0, [pc, #44]	; (8001944 <HAL_I2C_MspInit+0xbc>)
 8001918:	f001 fdf4 	bl	8003504 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <HAL_I2C_MspInit+0xb8>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a07      	ldr	r2, [pc, #28]	; (8001940 <HAL_I2C_MspInit+0xb8>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_I2C_MspInit+0xb8>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	37b8      	adds	r7, #184	; 0xb8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40006000 	.word	0x40006000
 8001940:	40023800 	.word	0x40023800
 8001944:	40020c00 	.word	0x40020c00

08001948 <AverageInit>:
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
	averageValue->_factor = factor;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	719a      	strb	r2, [r3, #6]
	averageValue->avgBuff = 0;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = 0;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	809a      	strh	r2, [r3, #4]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	0000      	movs	r0, r0
 8001974:	0000      	movs	r0, r0
	...

08001978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197c:	f000 febb 	bl	80026f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001980:	f000 fa32 	bl	8001de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001984:	f7ff fe58 	bl	8001638 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001988:	f7ff fa54 	bl	8000e34 <MX_ADC1_Init>
  MX_TIM2_Init();
 800198c:	f000 fcf6 	bl	800237c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001990:	f000 fd66 	bl	8002460 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001994:	f000 fd94 	bl	80024c0 <MX_USART2_UART_Init>
  MX_I2C4_Init();
 8001998:	f7ff ff36 	bl	8001808 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  	begin(16, 2);  // LCD Init
 800199c:	2102      	movs	r1, #2
 800199e:	2010      	movs	r0, #16
 80019a0:	f7ff f81c 	bl	80009dc <begin>
  	WRITE_PIN(LCD_BL_GPIO_Port, LCD_BL_Pin, 1);  // LCD Backlight ON
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019aa:	48af      	ldr	r0, [pc, #700]	; (8001c68 <main+0x2f0>)
 80019ac:	f001 ff6e 	bl	800388c <HAL_GPIO_WritePin>

  	InitADC(&InputsInfo, JOYSTICK_ADC);
 80019b0:	49ae      	ldr	r1, [pc, #696]	; (8001c6c <main+0x2f4>)
 80019b2:	48af      	ldr	r0, [pc, #700]	; (8001c70 <main+0x2f8>)
 80019b4:	f7ff fd56 	bl	8001464 <InitADC>
  	InitI2C(&InputsInfo, ENCODER_I2C);
 80019b8:	49ae      	ldr	r1, [pc, #696]	; (8001c74 <main+0x2fc>)
 80019ba:	48ad      	ldr	r0, [pc, #692]	; (8001c70 <main+0x2f8>)
 80019bc:	f7ff fdd0 	bl	8001560 <InitI2C>


	/*  - - - - - - - - - - Software Initialization - - - - - - - - - */

	/* SimpleBGC32 Init */
	SBGC32_Init(&SBGC32_Device);
 80019c0:	48ad      	ldr	r0, [pc, #692]	; (8001c78 <main+0x300>)
 80019c2:	f005 fde3 	bl	800758c <SBGC32_Init>
		DELAY_MS(BLUETOOTH_CONNECT_WAITING * 1000);

	#endif

	/* Control Configurations */
  	Control.controlMode[ROLL] = CtrlM_MODE_ANGLE;
 80019c6:	4bad      	ldr	r3, [pc, #692]	; (8001c7c <main+0x304>)
 80019c8:	2202      	movs	r2, #2
 80019ca:	701a      	strb	r2, [r3, #0]
  	Control.controlMode[PITCH] = CtrlM_MODE_ANGLE;
 80019cc:	4bab      	ldr	r3, [pc, #684]	; (8001c7c <main+0x304>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	705a      	strb	r2, [r3, #1]
  	Control.controlMode[YAW] = CtrlM_MODE_ANGLE;
 80019d2:	4baa      	ldr	r3, [pc, #680]	; (8001c7c <main+0x304>)
 80019d4:	2202      	movs	r2, #2
 80019d6:	709a      	strb	r2, [r3, #2]

	Control.AxisC[ROLL].angle = 0;
 80019d8:	4ba8      	ldr	r3, [pc, #672]	; (8001c7c <main+0x304>)
 80019da:	2200      	movs	r2, #0
 80019dc:	715a      	strb	r2, [r3, #5]
 80019de:	2200      	movs	r2, #0
 80019e0:	719a      	strb	r2, [r3, #6]
	Control.AxisC[PITCH].angle = 0;
 80019e2:	4ba6      	ldr	r3, [pc, #664]	; (8001c7c <main+0x304>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	725a      	strb	r2, [r3, #9]
 80019e8:	2200      	movs	r2, #0
 80019ea:	729a      	strb	r2, [r3, #10]

	Control.AxisC[ROLL].speed = 0;
 80019ec:	4ba3      	ldr	r3, [pc, #652]	; (8001c7c <main+0x304>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	70da      	strb	r2, [r3, #3]
 80019f2:	2200      	movs	r2, #0
 80019f4:	711a      	strb	r2, [r3, #4]
	Control.AxisC[PITCH].speed = 0;
 80019f6:	4ba1      	ldr	r3, [pc, #644]	; (8001c7c <main+0x304>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	71da      	strb	r2, [r3, #7]
 80019fc:	2200      	movs	r2, #0
 80019fe:	721a      	strb	r2, [r3, #8]
	Control.AxisC[YAW].speed = 0;
 8001a00:	4b9e      	ldr	r3, [pc, #632]	; (8001c7c <main+0x304>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	72da      	strb	r2, [r3, #11]
 8001a06:	2200      	movs	r2, #0
 8001a08:	731a      	strb	r2, [r3, #12]

	#ifdef FLYWHEEL_CONTROL

		GetEncoderAngles(&InputsInfo);
 8001a0a:	4899      	ldr	r0, [pc, #612]	; (8001c70 <main+0x2f8>)
 8001a0c:	f7ff fde6 	bl	80015dc <GetEncoderAngles>
		InputsInfo.FE_OldAngle = InputsInfo.FE_CurrentAngle;
 8001a10:	4b97      	ldr	r3, [pc, #604]	; (8001c70 <main+0x2f8>)
 8001a12:	895a      	ldrh	r2, [r3, #10]
 8001a14:	4b96      	ldr	r3, [pc, #600]	; (8001c70 <main+0x2f8>)
 8001a16:	819a      	strh	r2, [r3, #12]

	#endif

	ControlConfig.flags = RTCCF_CONTROL_CONFIG_FLAG_NO_CONFIRM;
 8001a18:	4b99      	ldr	r3, [pc, #612]	; (8001c80 <main+0x308>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	775a      	strb	r2, [r3, #29]
 8001a22:	2200      	movs	r2, #0
 8001a24:	779a      	strb	r2, [r3, #30]

	AverageInit(&LCD_RemoteGeneral.TargetErrorAverage, TARGET_LOW_PASS_FACTOR);
 8001a26:	2106      	movs	r1, #6
 8001a28:	4896      	ldr	r0, [pc, #600]	; (8001c84 <main+0x30c>)
 8001a2a:	f7ff ff8d 	bl	8001948 <AverageInit>
	AverageInit(&LCD_RemoteGeneral.JoystickAverage[0], JOY_LOW_PASS_FACTOR);
 8001a2e:	210b      	movs	r1, #11
 8001a30:	4895      	ldr	r0, [pc, #596]	; (8001c88 <main+0x310>)
 8001a32:	f7ff ff89 	bl	8001948 <AverageInit>
	AverageInit(&LCD_RemoteGeneral.JoystickAverage[1], JOY_LOW_PASS_FACTOR);
 8001a36:	210b      	movs	r1, #11
 8001a38:	4894      	ldr	r0, [pc, #592]	; (8001c8c <main+0x314>)
 8001a3a:	f7ff ff85 	bl	8001948 <AverageInit>

	LCD_RemoteGeneral.adjVarQuan = countof_(AdjVarGeneral);
 8001a3e:	4b92      	ldr	r3, [pc, #584]	; (8001c88 <main+0x310>)
 8001a40:	2208      	movs	r2, #8
 8001a42:	775a      	strb	r2, [r3, #29]
	LCD_RemoteGeneral.currentAdjVarIndex = 0;
 8001a44:	4b90      	ldr	r3, [pc, #576]	; (8001c88 <main+0x310>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	771a      	strb	r2, [r3, #28]

	LCD_RemoteGeneral.currentTimeMs = 0;
 8001a4a:	4b8f      	ldr	r3, [pc, #572]	; (8001c88 <main+0x310>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
	LCD_RemoteGeneral.rtReqCmdTimeMs = 0;
 8001a50:	4b8d      	ldr	r3, [pc, #564]	; (8001c88 <main+0x310>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_RemoteGeneral.connectFlag = 0;
 8001a56:	4b8c      	ldr	r3, [pc, #560]	; (8001c88 <main+0x310>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LCD_RemoteGeneral.currentPage = 0;
 8001a5e:	4b8a      	ldr	r3, [pc, #552]	; (8001c88 <main+0x310>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LCD_RemoteGeneral.updateDisplayFlagEnable = DISPLAY_UPDATE_ENABLED;
 8001a66:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <main+0x310>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	LCD_RemoteGeneral.motorsCurrentState = MOTORS_ON;
 8001a6e:	4b86      	ldr	r3, [pc, #536]	; (8001c88 <main+0x310>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


	/*  - - - - - - - - - Initializing commands - - - - - - - - - - - */

	SBGC32_ControlConfig(&SBGC32_Device, &ControlConfig);
 8001a76:	4982      	ldr	r1, [pc, #520]	; (8001c80 <main+0x308>)
 8001a78:	487f      	ldr	r0, [pc, #508]	; (8001c78 <main+0x300>)
 8001a7a:	f007 fd31 	bl	80094e0 <SBGC32_ControlConfig>

	SBGC32_GetAnglesExt(&SBGC32_Device, &GetAnglesExt);
 8001a7e:	4984      	ldr	r1, [pc, #528]	; (8001c90 <main+0x318>)
 8001a80:	487d      	ldr	r0, [pc, #500]	; (8001c78 <main+0x300>)
 8001a82:	f007 fdb3 	bl	80095ec <SBGC32_GetAnglesExt>
	Control.AxisC[YAW].angle = (i16)GetAnglesExt.AxisGAE[AXIS_Z].frameCamAngle;
 8001a86:	4b82      	ldr	r3, [pc, #520]	; (8001c90 <main+0x318>)
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	b21a      	sxth	r2, r3
 8001a8c:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <main+0x304>)
 8001a8e:	f8a3 200d 	strh.w	r2, [r3, #13]
	  	/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ */
		/*                     Start Worker Cycle                     */
		/* __________________________________________________________ */

	  	/* Getting current time */
	  	LCD_RemoteGeneral.currentTimeMs = SBGC32_Device.GetTimeFunc(SBGC32_Device.Drv);
 8001a92:	4b79      	ldr	r3, [pc, #484]	; (8001c78 <main+0x300>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a78      	ldr	r2, [pc, #480]	; (8001c78 <main+0x300>)
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4798      	blx	r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4a79      	ldr	r2, [pc, #484]	; (8001c88 <main+0x310>)
 8001aa2:	6213      	str	r3, [r2, #32]

	  	/*  - - - - - - - - - Controllers Handler - - - - - - - - - - */

	  	if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.controlPause > MOTORS_ON_CONTROL_PAUSE) &&
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <main+0x310>)
 8001aa6:	6a1a      	ldr	r2, [r3, #32]
 8001aa8:	4b77      	ldr	r3, [pc, #476]	; (8001c88 <main+0x310>)
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d948      	bls.n	8001b48 <main+0x1d0>
	  		(LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON))
 8001ab6:	4b74      	ldr	r3, [pc, #464]	; (8001c88 <main+0x310>)
 8001ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
	  	if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.controlPause > MOTORS_ON_CONTROL_PAUSE) &&
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d143      	bne.n	8001b48 <main+0x1d0>
	  	{
			#ifdef FLYWHEEL_CONTROL

				GetEncoderAngles(&InputsInfo);
 8001ac0:	486b      	ldr	r0, [pc, #428]	; (8001c70 <main+0x2f8>)
 8001ac2:	f7ff fd8b 	bl	80015dc <GetEncoderAngles>

				InputsInfo.deltaFW = InputsInfo.FE_CurrentAngle - InputsInfo.FE_OldAngle;
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	; (8001c70 <main+0x2f8>)
 8001ac8:	895a      	ldrh	r2, [r3, #10]
 8001aca:	4b69      	ldr	r3, [pc, #420]	; (8001c70 <main+0x2f8>)
 8001acc:	899b      	ldrh	r3, [r3, #12]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <main+0x2f8>)
 8001ad6:	81da      	strh	r2, [r3, #14]

				if (abs(InputsInfo.deltaFW) > FLYWHEEL_ERROR)
 8001ad8:	4b65      	ldr	r3, [pc, #404]	; (8001c70 <main+0x2f8>)
 8001ada:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bfb8      	it	lt
 8001ae2:	425b      	neglt	r3, r3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d92e      	bls.n	8001b48 <main+0x1d0>
				{
					if (abs(InputsInfo.deltaFW) < 2048)
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <main+0x2f8>)
 8001aec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bfb8      	it	lt
 8001af4:	425b      	neglt	r3, r3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001afc:	d21c      	bcs.n	8001b38 <main+0x1c0>
						Control.AxisC[YAW].angle += InputsInfo.deltaFW * FLYWHEEL_SENSITIVITY;
 8001afe:	4b5f      	ldr	r3, [pc, #380]	; (8001c7c <main+0x304>)
 8001b00:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b0e:	4b58      	ldr	r3, [pc, #352]	; (8001c70 <main+0x2f8>)
 8001b10:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b1c:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001c60 <main+0x2e8>
 8001b20:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b2c:	ee17 3a90 	vmov	r3, s15
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	4b52      	ldr	r3, [pc, #328]	; (8001c7c <main+0x304>)
 8001b34:	f8a3 200d 	strh.w	r2, [r3, #13]

					InputsInfo.FE_OldAngle = InputsInfo.FE_CurrentAngle;
 8001b38:	4b4d      	ldr	r3, [pc, #308]	; (8001c70 <main+0x2f8>)
 8001b3a:	895a      	ldrh	r2, [r3, #10]
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	; (8001c70 <main+0x2f8>)
 8001b3e:	819a      	strh	r2, [r3, #12]
					SBGC32_Control(&SBGC32_Device, &Control);
 8001b40:	494e      	ldr	r1, [pc, #312]	; (8001c7c <main+0x304>)
 8001b42:	484d      	ldr	r0, [pc, #308]	; (8001c78 <main+0x300>)
 8001b44:	f007 fc98 	bl	8009478 <SBGC32_Control>
			#endif
	  	}

	  	/* - - - - - - - - - - Knob Encoder Handler - - - - - - - - - */

		if (InputsInfo.KE_CurrentValue != 0)
 8001b48:	4b49      	ldr	r3, [pc, #292]	; (8001c70 <main+0x2f8>)
 8001b4a:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d02e      	beq.n	8001bb0 <main+0x238>
		{
			EditAdjVarValue(&AdjVarGeneral[LCD_RemoteGeneral.currentAdjVarIndex],
 8001b52:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <main+0x310>)
 8001b54:	7f1b      	ldrb	r3, [r3, #28]
 8001b56:	461a      	mov	r2, r3
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	4a4c      	ldr	r2, [pc, #304]	; (8001c94 <main+0x31c>)
 8001b62:	441a      	add	r2, r3
						   (AdjVarGeneral[LCD_RemoteGeneral.currentAdjVarIndex].value + (InputsInfo.KE_CurrentValue * ADJ_VAR_STEP)));
 8001b64:	4b48      	ldr	r3, [pc, #288]	; (8001c88 <main+0x310>)
 8001b66:	7f1b      	ldrb	r3, [r3, #28]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	494a      	ldr	r1, [pc, #296]	; (8001c94 <main+0x31c>)
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4403      	add	r3, r0
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	440b      	add	r3, r1
 8001b76:	3328      	adds	r3, #40	; 0x28
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <main+0x2f8>)
 8001b84:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b90:	ee36 7b07 	vadd.f64	d7, d6, d7
			EditAdjVarValue(&AdjVarGeneral[LCD_RemoteGeneral.currentAdjVarIndex],
 8001b94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b98:	ee17 1a90 	vmov	r1, s15
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f005 fd23 	bl	80075e8 <EditAdjVarValue>

			InputsInfo.KE_CurrentValue = 0;
 8001ba2:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <main+0x2f8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	751a      	strb	r2, [r3, #20]

			LCD_RemoteGeneral.updateDisplayFlag = DISPLAY_NOT_UPDATED;
 8001ba8:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <main+0x310>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f


	  	/* - - - - - - - - - - - Menu Handler - - - - - - - - - - - - */

	  	/* Process navigation */
	  	if (DebounceNavigationButton(&LCD_RemoteGeneral, ReadNavigationButtonState(&InputsInfo)))
 8001bb0:	482f      	ldr	r0, [pc, #188]	; (8001c70 <main+0x2f8>)
 8001bb2:	f7ff fafd 	bl	80011b0 <ReadNavigationButtonState>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4833      	ldr	r0, [pc, #204]	; (8001c88 <main+0x310>)
 8001bbc:	f7ff fac8 	bl	8001150 <DebounceNavigationButton>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 8094 	beq.w	8001cf0 <main+0x378>
	  	{
	  		switch (LCD_RemoteGeneral.NavButton.triggerState)
 8001bc8:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <main+0x310>)
 8001bca:	7edb      	ldrb	r3, [r3, #27]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	f200 8087 	bhi.w	8001ce2 <main+0x36a>
 8001bd4:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <main+0x264>)
 8001bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bda:	bf00      	nop
 8001bdc:	08001bf5 	.word	0x08001bf5
 8001be0:	08001c35 	.word	0x08001c35
 8001be4:	08001c4b 	.word	0x08001c4b
 8001be8:	08001c11 	.word	0x08001c11
 8001bec:	08001c99 	.word	0x08001c99
 8001bf0:	08001cd3 	.word	0x08001cd3
	  		{
	  			case NAV_BTN_RIGHT :
	  				LCD_RemoteGeneral.currentAdjVarIndex =
	  						(LCD_RemoteGeneral.currentAdjVarIndex + 1) % LCD_RemoteGeneral.adjVarQuan;
 8001bf4:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <main+0x310>)
 8001bf6:	7f1b      	ldrb	r3, [r3, #28]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <main+0x310>)
 8001bfc:	7f52      	ldrb	r2, [r2, #29]
 8001bfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c02:	fb01 f202 	mul.w	r2, r1, r2
 8001c06:	1a9b      	subs	r3, r3, r2
	  				LCD_RemoteGeneral.currentAdjVarIndex =
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <main+0x310>)
 8001c0c:	771a      	strb	r2, [r3, #28]
	  				break;
 8001c0e:	e06b      	b.n	8001ce8 <main+0x370>

	  			case NAV_BTN_LEFT :  /* Select prev adj. var */
	  				LCD_RemoteGeneral.currentAdjVarIndex =
	  						(LCD_RemoteGeneral.currentAdjVarIndex + (LCD_RemoteGeneral.adjVarQuan - 1)) % LCD_RemoteGeneral.adjVarQuan;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <main+0x310>)
 8001c12:	7f1b      	ldrb	r3, [r3, #28]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <main+0x310>)
 8001c18:	7f5b      	ldrb	r3, [r3, #29]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	4a1a      	ldr	r2, [pc, #104]	; (8001c88 <main+0x310>)
 8001c20:	7f52      	ldrb	r2, [r2, #29]
 8001c22:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c26:	fb01 f202 	mul.w	r2, r1, r2
 8001c2a:	1a9b      	subs	r3, r3, r2
	  				LCD_RemoteGeneral.currentAdjVarIndex =
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <main+0x310>)
 8001c30:	771a      	strb	r2, [r3, #28]
	  				break;
 8001c32:	e059      	b.n	8001ce8 <main+0x370>

	  			case NAV_BTN_UP :  /* Select next page */
	  				LCD_RemoteGeneral.currentPage++;
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <main+0x310>)
 8001c36:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	b25a      	sxtb	r2, r3
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <main+0x310>)
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	  				break;
 8001c48:	e04e      	b.n	8001ce8 <main+0x370>

	  			case NAV_BTN_DOWN :  /* Select prev page */
	  				LCD_RemoteGeneral.currentPage--;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <main+0x310>)
 8001c4c:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	b25a      	sxtb	r2, r3
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <main+0x310>)
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	  				break;
 8001c5e:	e043      	b.n	8001ce8 <main+0x370>
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	3fa99999 	.word	0x3fa99999
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	2000038c 	.word	0x2000038c
 8001c70:	200009a8 	.word	0x200009a8
 8001c74:	200003d4 	.word	0x200003d4
 8001c78:	20000428 	.word	0x20000428
 8001c7c:	20000870 	.word	0x20000870
 8001c80:	20000880 	.word	0x20000880
 8001c84:	20000970 	.word	0x20000970
 8001c88:	20000960 	.word	0x20000960
 8001c8c:	20000968 	.word	0x20000968
 8001c90:	20000928 	.word	0x20000928
 8001c94:	20000000 	.word	0x20000000

	  			case NAV_BTN_SELECT:  /* Turn motors ON/OFF */
	  				if (SBGC32_ExecuteMenu(&SBGC32_Device, MENU_CMD_MOTOR_TOGGLE) == TX_RX_OK)
 8001c98:	210a      	movs	r1, #10
 8001c9a:	484d      	ldr	r0, [pc, #308]	; (8001dd0 <main+0x458>)
 8001c9c:	f007 fcea 	bl	8009674 <SBGC32_ExecuteMenu>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d11f      	bne.n	8001ce6 <main+0x36e>
	  				{
	  					LCD_RemoteGeneral.motorsCurrentState = (LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON) ? MOTORS_OFF : MOTORS_ON;
 8001ca6:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <main+0x45c>)
 8001ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b46      	ldr	r3, [pc, #280]	; (8001dd4 <main+0x45c>)
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  					if (LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON)
 8001cbe:	4b45      	ldr	r3, [pc, #276]	; (8001dd4 <main+0x45c>)
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10e      	bne.n	8001ce6 <main+0x36e>
	  						LCD_RemoteGeneral.controlPause = LCD_RemoteGeneral.currentTimeMs;
 8001cc8:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <main+0x45c>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a41      	ldr	r2, [pc, #260]	; (8001dd4 <main+0x45c>)
 8001cce:	6453      	str	r3, [r2, #68]	; 0x44
	  				}
	  				break;
 8001cd0:	e009      	b.n	8001ce6 <main+0x36e>

	  			case NAV_BTN_ENCODER_SELECT:
	  				SBGC32_SaveAdjVarsToEEPROM(&SBGC32_Device, AdjVarGeneral, LCD_RemoteGeneral.adjVarQuan);
 8001cd2:	4b40      	ldr	r3, [pc, #256]	; (8001dd4 <main+0x45c>)
 8001cd4:	7f5b      	ldrb	r3, [r3, #29]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	493f      	ldr	r1, [pc, #252]	; (8001dd8 <main+0x460>)
 8001cda:	483d      	ldr	r0, [pc, #244]	; (8001dd0 <main+0x458>)
 8001cdc:	f005 feac 	bl	8007a38 <SBGC32_SaveAdjVarsToEEPROM>
	  				break;
 8001ce0:	e002      	b.n	8001ce8 <main+0x370>

	  			default:
	  				break;
 8001ce2:	bf00      	nop
 8001ce4:	e000      	b.n	8001ce8 <main+0x370>
	  				break;
 8001ce6:	bf00      	nop
	  		}

	  		/* Update display immediately to reduce lag */
	  		LCD_RemoteGeneral.updateDisplayFlag = DISPLAY_NOT_UPDATED;
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	; (8001dd4 <main+0x45c>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	  	}

	  	/*  - - - - - - - - - - Buttons Handling - - - - - - - - - - */
	  	/* Menu Button */
		if (ReadButtonState(MENU_BTN_PORT, MENU_BTN_PIN))
 8001cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf4:	4839      	ldr	r0, [pc, #228]	; (8001ddc <main+0x464>)
 8001cf6:	f7ff fc00 	bl	80014fa <ReadButtonState>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01d      	beq.n	8001d3c <main+0x3c4>
		{
			if (InputsInfo.menuBtn == BTN_RELEASED)
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <main+0x468>)
 8001d02:	7d5b      	ldrb	r3, [r3, #21]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <main+0x39e>
			{
				LCD_RemoteGeneral.btnTimeMs = LCD_RemoteGeneral.currentTimeMs;
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <main+0x45c>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	; (8001dd4 <main+0x45c>)
 8001d0e:	6313      	str	r3, [r2, #48]	; 0x30
				InputsInfo.menuBtn = BTN_PRESSED;
 8001d10:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <main+0x468>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	755a      	strb	r2, [r3, #21]
			}

			if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d16:	4b2f      	ldr	r3, [pc, #188]	; (8001dd4 <main+0x45c>)
 8001d18:	6a1a      	ldr	r2, [r3, #32]
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <main+0x45c>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d919      	bls.n	8001d58 <main+0x3e0>
				(InputsInfo.menuBtn != BTN_POST_PRESSED))
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <main+0x468>)
 8001d26:	7d5b      	ldrb	r3, [r3, #21]
			if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d015      	beq.n	8001d58 <main+0x3e0>
			{
				SBGC32_ExecuteMenu(&SBGC32_Device, MENU_BUTTON_IS_PRESSED);
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	4828      	ldr	r0, [pc, #160]	; (8001dd0 <main+0x458>)
 8001d30:	f007 fca0 	bl	8009674 <SBGC32_ExecuteMenu>
				InputsInfo.menuBtn = BTN_POST_PRESSED;
 8001d34:	4b2a      	ldr	r3, [pc, #168]	; (8001de0 <main+0x468>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	755a      	strb	r2, [r3, #21]
 8001d3a:	e00d      	b.n	8001d58 <main+0x3e0>
			}
		}

		else if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <main+0x45c>)
 8001d3e:	6a1a      	ldr	r2, [r3, #32]
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <main+0x45c>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d906      	bls.n	8001d58 <main+0x3e0>
				 (InputsInfo.menuBtn != BTN_RELEASED))
 8001d4a:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <main+0x468>)
 8001d4c:	7d5b      	ldrb	r3, [r3, #21]
		else if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <main+0x3e0>
			InputsInfo.menuBtn = BTN_RELEASED;
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <main+0x468>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	755a      	strb	r2, [r3, #21]


	  	/* - - - - - - - - - AdjVarGeneral Handler - - - - - - - - - */

	  	/* Send the value of updated adjvars to the board */
	  	SBGC32_SetAdjVarValues(&SBGC32_Device, AdjVarGeneral, LCD_RemoteGeneral.adjVarQuan);
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <main+0x45c>)
 8001d5a:	7f5b      	ldrb	r3, [r3, #29]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	491e      	ldr	r1, [pc, #120]	; (8001dd8 <main+0x460>)
 8001d60:	481b      	ldr	r0, [pc, #108]	; (8001dd0 <main+0x458>)
 8001d62:	f005 fc71 	bl	8007648 <SBGC32_SetAdjVarValues>


		/* - - - - - - - - - - - SBGC Handler - - - - - - - - - - - - */

		ProcessHandler(&SBGC32_Device, &LCD_RemoteGeneral, &RealTimeData, AdjVarGeneral);
 8001d66:	4b1c      	ldr	r3, [pc, #112]	; (8001dd8 <main+0x460>)
 8001d68:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <main+0x46c>)
 8001d6a:	491a      	ldr	r1, [pc, #104]	; (8001dd4 <main+0x45c>)
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <main+0x458>)
 8001d6e:	f7ff f97f 	bl	8001070 <ProcessHandler>

		/* Request realtime data with the fixed rate */
		if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.rtReqCmdTimeMs) > REALTIME_DATA_REQUEST_INTERAL_MS)
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <main+0x45c>)
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <main+0x45c>)
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d80:	d90a      	bls.n	8001d98 <main+0x420>
		{
			if (SBGC32_ReadRealTimeData4(&SBGC32_Device, &RealTimeData) == TX_RX_OK)
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <main+0x46c>)
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <main+0x458>)
 8001d86:	f007 fbed 	bl	8009564 <SBGC32_ReadRealTimeData4>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d103      	bne.n	8001d98 <main+0x420>
				LCD_RemoteGeneral.rtReqCmdTimeMs = LCD_RemoteGeneral.currentTimeMs;
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <main+0x45c>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <main+0x45c>)
 8001d96:	6293      	str	r3, [r2, #40]	; 0x28


	  	/* - - - - - - - - - - Display Updating - - - - - - - - - - - */

	  	/* Low-rate tasks */
	  	if (((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.lowRateTimeMs) > LOW_RATE_TASK_INTERVAL ||
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <main+0x45c>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <main+0x45c>)
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001da6:	d805      	bhi.n	8001db4 <main+0x43c>
	  		  LCD_RemoteGeneral.updateDisplayFlag) && !LCD_RemoteGeneral.updateDisplayFlagEnable)
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <main+0x45c>)
 8001daa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
	  	if (((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.lowRateTimeMs) > LOW_RATE_TASK_INTERVAL ||
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f43f ae6f 	beq.w	8001a92 <main+0x11a>
	  		  LCD_RemoteGeneral.updateDisplayFlag) && !LCD_RemoteGeneral.updateDisplayFlagEnable)
 8001db4:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <main+0x45c>)
 8001db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f47f ae69 	bne.w	8001a92 <main+0x11a>
	  		UpdateDisplay(&SBGC32_Device, &LCD_RemoteGeneral, &RealTimeData, AdjVarGeneral);  // Update LCD to display animation and state
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <main+0x460>)
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <main+0x46c>)
 8001dc4:	4903      	ldr	r1, [pc, #12]	; (8001dd4 <main+0x45c>)
 8001dc6:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <main+0x458>)
 8001dc8:	f7ff fa2c 	bl	8001224 <UpdateDisplay>
	  	LCD_RemoteGeneral.currentTimeMs = SBGC32_Device.GetTimeFunc(SBGC32_Device.Drv);
 8001dcc:	e661      	b.n	8001a92 <main+0x11a>
 8001dce:	bf00      	nop
 8001dd0:	20000428 	.word	0x20000428
 8001dd4:	20000960 	.word	0x20000960
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	200009a8 	.word	0x200009a8
 8001de4:	200008ac 	.word	0x200008ac

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b094      	sub	sp, #80	; 0x50
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	2234      	movs	r2, #52	; 0x34
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f007 fcbe 	bl	8009778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <SystemClock_Config+0xd4>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	4a2a      	ldr	r2, [pc, #168]	; (8001ebc <SystemClock_Config+0xd4>)
 8001e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e16:	6413      	str	r3, [r2, #64]	; 0x40
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <SystemClock_Config+0xd4>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e24:	4b26      	ldr	r3, [pc, #152]	; (8001ec0 <SystemClock_Config+0xd8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a25      	ldr	r2, [pc, #148]	; (8001ec0 <SystemClock_Config+0xd8>)
 8001e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <SystemClock_Config+0xd8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e44:	2310      	movs	r3, #16
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e50:	2308      	movs	r3, #8
 8001e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e54:	23d8      	movs	r3, #216	; 0xd8
 8001e56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e60:	2302      	movs	r3, #2
 8001e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f002 fb1b 	bl	80044a4 <HAL_RCC_OscConfig>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e74:	f000 f826 	bl	8001ec4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e78:	f002 fac4 	bl	8004404 <HAL_PWREx_EnableOverDrive>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e82:	f000 f81f 	bl	8001ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e86:	230f      	movs	r3, #15
 8001e88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	2107      	movs	r1, #7
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f002 fdab 	bl	8004a00 <HAL_RCC_ClockConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001eb0:	f000 f808 	bl	8001ec4 <Error_Handler>
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	3750      	adds	r7, #80	; 0x50
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec8:	b672      	cpsid	i
}
 8001eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <Error_Handler+0x8>
	...

08001ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_MspInit+0x44>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_MspInit+0x44>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <HAL_MspInit+0x44>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_MspInit+0x44>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <HAL_MspInit+0x44>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_MspInit+0x44>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f64:	f000 fc04 	bl	8002770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	/* - - - - - ADC1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <ADC_IRQHandler+0x30>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d109      	bne.n	8001f92 <ADC_IRQHandler+0x26>
		GET_FLAG_ADC_CR1_EOCIE(JOYSTICK_ADC))
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <ADC_IRQHandler+0x30>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d102      	bne.n	8001f92 <ADC_IRQHandler+0x26>
		ADC_DRV_EndConvCallBack(&InputsInfo);
 8001f8c:	4804      	ldr	r0, [pc, #16]	; (8001fa0 <ADC_IRQHandler+0x34>)
 8001f8e:	f7ff fa91 	bl	80014b4 <ADC_DRV_EndConvCallBack>

	/*  - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f92:	4802      	ldr	r0, [pc, #8]	; (8001f9c <ADC_IRQHandler+0x30>)
 8001f94:	f000 fd8a 	bl	8002aac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	2000038c 	.word	0x2000038c
 8001fa0:	200009a8 	.word	0x200009a8

08001fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/* - - - - - TIM2 Interrupt Flags Check - - - - - */

	if (GET_FLAG_TIM_SR_UIF(SBGC_REFERENCE_TIMER) &&
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <TIM2_IRQHandler+0x34>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10b      	bne.n	8001fce <TIM2_IRQHandler+0x2a>
		GET_FLAG_TIM_DIER_UIE(SBGC_REFERENCE_TIMER))
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <TIM2_IRQHandler+0x34>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
	if (GET_FLAG_TIM_SR_UIF(SBGC_REFERENCE_TIMER) &&
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d104      	bne.n	8001fce <TIM2_IRQHandler+0x2a>
		TimerDRV_CallBack(SBGC32_Device.Drv);
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <TIM2_IRQHandler+0x38>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f005 f945 	bl	8007258 <TimerDRV_CallBack>

	/*  - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fce:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM2_IRQHandler+0x34>)
 8001fd0:	f003 fbf4 	bl	80057bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	200009c4 	.word	0x200009c4
 8001fdc:	20000428 	.word	0x20000428

08001fe0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/*  - - - - UART1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <USART1_IRQHandler+0x70>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fee:	2b40      	cmp	r3, #64	; 0x40
 8001ff0:	d10b      	bne.n	800200a <USART1_IRQHandler+0x2a>
		GET_FLAG_UART_CR1_TCIE(SBGC_SERIAL_PORT))
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <USART1_IRQHandler+0x70>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d004      	beq.n	800200a <USART1_IRQHandler+0x2a>
		UART_DRV_TxCallBack(SBGC32_Device.Drv);
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <USART1_IRQHandler+0x74>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f005 f987 	bl	8007318 <UART_DRV_TxCallBack>

	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <USART1_IRQHandler+0x70>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b20      	cmp	r3, #32
 8002016:	d10b      	bne.n	8002030 <USART1_IRQHandler+0x50>
		GET_FLAG_UART_CR1_RXNEIE(SBGC_SERIAL_PORT))
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <USART1_IRQHandler+0x70>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <USART1_IRQHandler+0x50>
		UART_DRV_RxCallBack(SBGC32_Device.Drv);
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <USART1_IRQHandler+0x74>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f005 fa30 	bl	8007490 <UART_DRV_RxCallBack>

	if (GET_FLAG_UART_ISR_ORE(SBGC_SERIAL_PORT))
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <USART1_IRQHandler+0x70>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b08      	cmp	r3, #8
 800203c:	d103      	bne.n	8002046 <USART1_IRQHandler+0x66>
		CLEAR_UART_ORE(SBGC_SERIAL_PORT);
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <USART1_IRQHandler+0x70>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2208      	movs	r2, #8
 8002044:	621a      	str	r2, [r3, #32]

	/*  - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002046:	4802      	ldr	r0, [pc, #8]	; (8002050 <USART1_IRQHandler+0x70>)
 8002048:	f004 f8e2 	bl	8006210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000a10 	.word	0x20000a10
 8002054:	20000428 	.word	0x20000428

08002058 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if (GET_FLAG_EXTI_ENC(ENC_A_Pin) &&
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <EXTI15_10_IRQHandler+0x64>)
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00c      	beq.n	8002082 <EXTI15_10_IRQHandler+0x2a>
		READ_PIN(ENC_B_GPIO_Port, ENC_B_Pin))
 8002068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206c:	4814      	ldr	r0, [pc, #80]	; (80020c0 <EXTI15_10_IRQHandler+0x68>)
 800206e:	f001 fbf5 	bl	800385c <HAL_GPIO_ReadPin>
 8002072:	4603      	mov	r3, r0
	if (GET_FLAG_EXTI_ENC(ENC_A_Pin) &&
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <EXTI15_10_IRQHandler+0x2a>
		EXTI_DRV_FallingCallBack(&InputsInfo, ENC_A_Pin);
 8002078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207c:	4811      	ldr	r0, [pc, #68]	; (80020c4 <EXTI15_10_IRQHandler+0x6c>)
 800207e:	f7ff fa4c 	bl	800151a <EXTI_DRV_FallingCallBack>

	if (GET_FLAG_EXTI_ENC(ENC_B_Pin) &&
 8002082:	4b0e      	ldr	r3, [pc, #56]	; (80020bc <EXTI15_10_IRQHandler+0x64>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <EXTI15_10_IRQHandler+0x50>
		READ_PIN(ENC_A_GPIO_Port, ENC_A_Pin))
 800208e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002092:	480d      	ldr	r0, [pc, #52]	; (80020c8 <EXTI15_10_IRQHandler+0x70>)
 8002094:	f001 fbe2 	bl	800385c <HAL_GPIO_ReadPin>
 8002098:	4603      	mov	r3, r0
	if (GET_FLAG_EXTI_ENC(ENC_B_Pin) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <EXTI15_10_IRQHandler+0x50>
		EXTI_DRV_FallingCallBack(&InputsInfo, ENC_B_Pin);
 800209e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020a2:	4808      	ldr	r0, [pc, #32]	; (80020c4 <EXTI15_10_IRQHandler+0x6c>)
 80020a4:	f7ff fa39 	bl	800151a <EXTI_DRV_FallingCallBack>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 80020a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020ac:	f001 fc08 	bl	80038c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 80020b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020b4:	f001 fc04 	bl	80038c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40013c00 	.word	0x40013c00
 80020c0:	40021400 	.word	0x40021400
 80020c4:	200009a8 	.word	0x200009a8
 80020c8:	40021000 	.word	0x40021000

080020cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
	return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_kill>:

int _kill(int pid, int sig)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020e6:	f007 fb07 	bl	80096f8 <__errno>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2216      	movs	r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
	return -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_exit>:

void _exit (int status)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffe7 	bl	80020dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800210e:	e7fe      	b.n	800210e <_exit+0x12>

08002110 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e00a      	b.n	8002138 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002122:	f3af 8000 	nop.w
 8002126:	4601      	mov	r1, r0
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	429a      	cmp	r2, r3
 800213e:	dbf0      	blt.n	8002122 <_read+0x12>
	}

return len;
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
 800215a:	e009      	b.n	8002170 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	3301      	adds	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	dbf1      	blt.n	800215c <_write+0x12>
	}
	return len;
 8002178:	687b      	ldr	r3, [r7, #4]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <_close>:

int _close(int file)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
	return -1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021aa:	605a      	str	r2, [r3, #4]
	return 0;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_isatty>:

int _isatty(int file)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
	return 1;
 80021c2:	2301      	movs	r3, #1
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	return 0;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <_sbrk+0x5c>)
 80021f6:	4b15      	ldr	r3, [pc, #84]	; (800224c <_sbrk+0x60>)
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <_sbrk+0x64>)
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <_sbrk+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <_sbrk+0x64>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	429a      	cmp	r2, r3
 800221a:	d207      	bcs.n	800222c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800221c:	f007 fa6c 	bl	80096f8 <__errno>
 8002220:	4603      	mov	r3, r0
 8002222:	220c      	movs	r2, #12
 8002224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	e009      	b.n	8002240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800222c:	4b08      	ldr	r3, [pc, #32]	; (8002250 <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	4a05      	ldr	r2, [pc, #20]	; (8002250 <_sbrk+0x64>)
 800223c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800223e:	68fb      	ldr	r3, [r7, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20080000 	.word	0x20080000
 800224c:	00000400 	.word	0x00000400
 8002250:	200009c0 	.word	0x200009c0
 8002254:	20000b38 	.word	0x20000b38

08002258 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <SystemInit+0x20>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <SystemInit+0x20>)
 8002264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	2302      	movs	r3, #2
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
 8002292:	2302      	movs	r3, #2
 8002294:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <SystemCoreClockUpdate+0xec>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 030c 	and.w	r3, r3, #12
 800229e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d011      	beq.n	80022ca <SystemCoreClockUpdate+0x4e>
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d844      	bhi.n	8002336 <SystemCoreClockUpdate+0xba>
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <SystemCoreClockUpdate+0x3e>
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d004      	beq.n	80022c2 <SystemCoreClockUpdate+0x46>
 80022b8:	e03d      	b.n	8002336 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <SystemCoreClockUpdate+0xf0>)
 80022bc:	4a2c      	ldr	r2, [pc, #176]	; (8002370 <SystemCoreClockUpdate+0xf4>)
 80022be:	601a      	str	r2, [r3, #0]
      break;
 80022c0:	e03d      	b.n	800233e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <SystemCoreClockUpdate+0xf0>)
 80022c4:	4a2b      	ldr	r2, [pc, #172]	; (8002374 <SystemCoreClockUpdate+0xf8>)
 80022c6:	601a      	str	r2, [r3, #0]
      break;
 80022c8:	e039      	b.n	800233e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80022ca:	4b27      	ldr	r3, [pc, #156]	; (8002368 <SystemCoreClockUpdate+0xec>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0d9b      	lsrs	r3, r3, #22
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <SystemCoreClockUpdate+0xec>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022de:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80022e6:	4a23      	ldr	r2, [pc, #140]	; (8002374 <SystemCoreClockUpdate+0xf8>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <SystemCoreClockUpdate+0xec>)
 80022f0:	6852      	ldr	r2, [r2, #4]
 80022f2:	0992      	lsrs	r2, r2, #6
 80022f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e00b      	b.n	8002318 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002300:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <SystemCoreClockUpdate+0xf4>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	fbb2 f3f3 	udiv	r3, r2, r3
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <SystemCoreClockUpdate+0xec>)
 800230a:	6852      	ldr	r2, [r2, #4]
 800230c:	0992      	lsrs	r2, r2, #6
 800230e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <SystemCoreClockUpdate+0xec>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	0c1b      	lsrs	r3, r3, #16
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	3301      	adds	r3, #1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <SystemCoreClockUpdate+0xf0>)
 8002332:	6013      	str	r3, [r2, #0]
      break;
 8002334:	e003      	b.n	800233e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <SystemCoreClockUpdate+0xf0>)
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <SystemCoreClockUpdate+0xf4>)
 800233a:	601a      	str	r2, [r3, #0]
      break;
 800233c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <SystemCoreClockUpdate+0xec>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <SystemCoreClockUpdate+0xfc>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <SystemCoreClockUpdate+0xf0>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <SystemCoreClockUpdate+0xf0>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	40023800 	.word	0x40023800
 800236c:	20000180 	.word	0x20000180
 8002370:	00f42400 	.word	0x00f42400
 8002374:	017d7840 	.word	0x017d7840
 8002378:	0800e2f8 	.word	0x0800e2f8

0800237c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <MX_TIM2_Init+0x98>)
 800239c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <MX_TIM2_Init+0x98>)
 80023a4:	226b      	movs	r2, #107	; 0x6b
 80023a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a8:	4b1a      	ldr	r3, [pc, #104]	; (8002414 <MX_TIM2_Init+0x98>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80023ae:	4b19      	ldr	r3, [pc, #100]	; (8002414 <MX_TIM2_Init+0x98>)
 80023b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <MX_TIM2_Init+0x98>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <MX_TIM2_Init+0x98>)
 80023be:	2200      	movs	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023c2:	4814      	ldr	r0, [pc, #80]	; (8002414 <MX_TIM2_Init+0x98>)
 80023c4:	f003 f92a 	bl	800561c <HAL_TIM_Base_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023ce:	f7ff fd79 	bl	8001ec4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4619      	mov	r1, r3
 80023de:	480d      	ldr	r0, [pc, #52]	; (8002414 <MX_TIM2_Init+0x98>)
 80023e0:	f003 fb0c 	bl	80059fc <HAL_TIM_ConfigClockSource>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80023ea:	f7ff fd6b 	bl	8001ec4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023ee:	2320      	movs	r3, #32
 80023f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <MX_TIM2_Init+0x98>)
 80023fc:	f003 fd34 	bl	8005e68 <HAL_TIMEx_MasterConfigSynchronization>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002406:	f7ff fd5d 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800240a:	bf00      	nop
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200009c4 	.word	0x200009c4

08002418 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002428:	d113      	bne.n	8002452 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_TIM_Base_MspInit+0x44>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <HAL_TIM_Base_MspInit+0x44>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_TIM_Base_MspInit+0x44>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2103      	movs	r1, #3
 8002446:	201c      	movs	r0, #28
 8002448:	f000 ff93 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800244c:	201c      	movs	r0, #28
 800244e:	f000 ffac 	bl	80033aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800

08002460 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002466:	4a15      	ldr	r2, [pc, #84]	; (80024bc <MX_USART1_UART_Init+0x5c>)
 8002468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 800246c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 80024a4:	f003 fd8c 	bl	8005fc0 <HAL_UART_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024ae:	f7ff fd09 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000a10 	.word	0x20000a10
 80024bc:	40011000 	.word	0x40011000

080024c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024c6:	4a15      	ldr	r2, [pc, #84]	; (800251c <MX_USART2_UART_Init+0x5c>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024f6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_USART2_UART_Init+0x58>)
 8002500:	2200      	movs	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_USART2_UART_Init+0x58>)
 8002506:	f003 fda9 	bl	800605c <HAL_HalfDuplex_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8002510:	f7ff fcd8 	bl	8001ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000a98 	.word	0x20000a98
 800251c:	40004400 	.word	0x40004400

08002520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b0b0      	sub	sp, #192	; 0xc0
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2290      	movs	r2, #144	; 0x90
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f007 f919 	bl	8009778 <memset>
  if(uartHandle->Instance==USART1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a51      	ldr	r2, [pc, #324]	; (8002690 <HAL_UART_MspInit+0x170>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d15a      	bne.n	8002606 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002550:	2340      	movs	r3, #64	; 0x40
 8002552:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002554:	2300      	movs	r3, #0
 8002556:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002558:	f107 031c 	add.w	r3, r7, #28
 800255c:	4618      	mov	r0, r3
 800255e:	f002 fc35 	bl	8004dcc <HAL_RCCEx_PeriphCLKConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002568:	f7ff fcac 	bl	8001ec4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800256c:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_UART_MspInit+0x174>)
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_UART_MspInit+0x174>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6453      	str	r3, [r2, #68]	; 0x44
 8002578:	4b46      	ldr	r3, [pc, #280]	; (8002694 <HAL_UART_MspInit+0x174>)
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002584:	4b43      	ldr	r3, [pc, #268]	; (8002694 <HAL_UART_MspInit+0x174>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4a42      	ldr	r2, [pc, #264]	; (8002694 <HAL_UART_MspInit+0x174>)
 800258a:	f043 0302 	orr.w	r3, r3, #2
 800258e:	6313      	str	r3, [r2, #48]	; 0x30
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_UART_MspInit+0x174>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800259c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a4:	2302      	movs	r3, #2
 80025a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025b6:	2304      	movs	r3, #4
 80025b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025c0:	4619      	mov	r1, r3
 80025c2:	4835      	ldr	r0, [pc, #212]	; (8002698 <HAL_UART_MspInit+0x178>)
 80025c4:	f000 ff9e 	bl	8003504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025e2:	2304      	movs	r3, #4
 80025e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025ec:	4619      	mov	r1, r3
 80025ee:	482a      	ldr	r0, [pc, #168]	; (8002698 <HAL_UART_MspInit+0x178>)
 80025f0:	f000 ff88 	bl	8003504 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2101      	movs	r1, #1
 80025f8:	2025      	movs	r0, #37	; 0x25
 80025fa:	f000 feba 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025fe:	2025      	movs	r0, #37	; 0x25
 8002600:	f000 fed3 	bl	80033aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002604:	e03f      	b.n	8002686 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a24      	ldr	r2, [pc, #144]	; (800269c <HAL_UART_MspInit+0x17c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d13a      	bne.n	8002686 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002614:	2300      	movs	r3, #0
 8002616:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002618:	f107 031c 	add.w	r3, r7, #28
 800261c:	4618      	mov	r0, r3
 800261e:	f002 fbd5 	bl	8004dcc <HAL_RCCEx_PeriphCLKConfig>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8002628:	f7ff fc4c 	bl	8001ec4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_UART_MspInit+0x174>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_UART_MspInit+0x174>)
 8002632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_UART_MspInit+0x174>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_UART_MspInit+0x174>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	4a12      	ldr	r2, [pc, #72]	; (8002694 <HAL_UART_MspInit+0x174>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6313      	str	r3, [r2, #48]	; 0x30
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_UART_MspInit+0x174>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800265c:	2304      	movs	r3, #4
 800265e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002662:	2312      	movs	r3, #18
 8002664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002674:	2307      	movs	r3, #7
 8002676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800267e:	4619      	mov	r1, r3
 8002680:	4807      	ldr	r0, [pc, #28]	; (80026a0 <HAL_UART_MspInit+0x180>)
 8002682:	f000 ff3f 	bl	8003504 <HAL_GPIO_Init>
}
 8002686:	bf00      	nop
 8002688:	37c0      	adds	r7, #192	; 0xc0
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40011000 	.word	0x40011000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020400 	.word	0x40020400
 800269c:	40004400 	.word	0x40004400
 80026a0:	40020000 	.word	0x40020000

080026a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026a8:	480d      	ldr	r0, [pc, #52]	; (80026e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026aa:	490e      	ldr	r1, [pc, #56]	; (80026e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026c0:	4c0b      	ldr	r4, [pc, #44]	; (80026f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ce:	f7ff fdc3 	bl	8002258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f007 f817 	bl	8009704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026d6:	f7ff f94f 	bl	8001978 <main>
  bx  lr    
 80026da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e4:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80026e8:	0800e7c4 	.word	0x0800e7c4
  ldr r2, =_sbss
 80026ec:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80026f0:	20000b34 	.word	0x20000b34

080026f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026f4:	e7fe      	b.n	80026f4 <CAN1_RX0_IRQHandler>

080026f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026fa:	2003      	movs	r0, #3
 80026fc:	f000 fe2e 	bl	800335c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002700:	200f      	movs	r0, #15
 8002702:	f000 f805 	bl	8002710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002706:	f7ff fbe3 	bl	8001ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x54>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_InitTick+0x58>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	fbb3 f3f1 	udiv	r3, r3, r1
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fe49 	bl	80033c6 <HAL_SYSTICK_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00e      	b.n	800275c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d80a      	bhi.n	800275a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f000 fe11 	bl	8003372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002750:	4a06      	ldr	r2, [pc, #24]	; (800276c <HAL_InitTick+0x5c>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e000      	b.n	800275c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20000180 	.word	0x20000180
 8002768:	20000188 	.word	0x20000188
 800276c:	20000184 	.word	0x20000184

08002770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <HAL_IncTick+0x20>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_IncTick+0x24>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4413      	add	r3, r2
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_IncTick+0x24>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000188 	.word	0x20000188
 8002794:	20000b20 	.word	0x20000b20

08002798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return uwTick;
 800279c:	4b03      	ldr	r3, [pc, #12]	; (80027ac <HAL_GetTick+0x14>)
 800279e:	681b      	ldr	r3, [r3, #0]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000b20 	.word	0x20000b20

080027b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027b8:	f7ff ffee 	bl	8002798 <HAL_GetTick>
 80027bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d005      	beq.n	80027d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_Delay+0x44>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027d6:	bf00      	nop
 80027d8:	f7ff ffde 	bl	8002798 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d8f7      	bhi.n	80027d8 <HAL_Delay+0x28>
  {
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000188 	.word	0x20000188

080027f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e031      	b.n	8002872 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7fe fb7a 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d116      	bne.n	8002864 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_ADC_Init+0x84>)
 800283c:	4013      	ands	r3, r2
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fbb4 	bl	8002fb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	f043 0201 	orr.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
 8002862:	e001      	b.n	8002868 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	ffffeefd 	.word	0xffffeefd

08002880 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_ADC_Start_IT+0x1a>
 8002896:	2302      	movs	r3, #2
 8002898:	e0b5      	b.n	8002a06 <HAL_ADC_Start_IT+0x186>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d018      	beq.n	80028e2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80028c0:	4b54      	ldr	r3, [pc, #336]	; (8002a14 <HAL_ADC_Start_IT+0x194>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a54      	ldr	r2, [pc, #336]	; (8002a18 <HAL_ADC_Start_IT+0x198>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9a      	lsrs	r2, r3, #18
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d17d      	bne.n	80029ec <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f4:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_ADC_Start_IT+0x19c>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002916:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292a:	d106      	bne.n	800293a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	f023 0206 	bic.w	r2, r3, #6
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
 8002938:	e002      	b.n	8002940 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002950:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6859      	ldr	r1, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b30      	ldr	r3, [pc, #192]	; (8002a20 <HAL_ADC_Start_IT+0x1a0>)
 800295e:	430b      	orrs	r3, r1
 8002960:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002962:	4b30      	ldr	r3, [pc, #192]	; (8002a24 <HAL_ADC_Start_IT+0x1a4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10f      	bne.n	800298e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d143      	bne.n	8002a04 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	e03a      	b.n	8002a04 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a25      	ldr	r2, [pc, #148]	; (8002a28 <HAL_ADC_Start_IT+0x1a8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d10e      	bne.n	80029b6 <HAL_ADC_Start_IT+0x136>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029b4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_ADC_Start_IT+0x1a4>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d120      	bne.n	8002a04 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_ADC_Start_IT+0x1ac>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d11b      	bne.n	8002a04 <HAL_ADC_Start_IT+0x184>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d114      	bne.n	8002a04 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e8:	609a      	str	r2, [r3, #8]
 80029ea:	e00b      	b.n	8002a04 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f043 0210 	orr.w	r2, r3, #16
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000180 	.word	0x20000180
 8002a18:	431bde83 	.word	0x431bde83
 8002a1c:	fffff8fe 	.word	0xfffff8fe
 8002a20:	04000020 	.word	0x04000020
 8002a24:	40012300 	.word	0x40012300
 8002a28:	40012000 	.word	0x40012000
 8002a2c:	40012200 	.word	0x40012200

08002a30 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_Stop_IT+0x16>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e027      	b.n	8002a96 <HAL_ADC_Stop_IT+0x66>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10f      	bne.n	8002a8c <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_ADC_Stop_IT+0x74>)
 8002a78:	400b      	ands	r3, r1
 8002a7a:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a80:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_ADC_Stop_IT+0x78>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	fbffffdf 	.word	0xfbffffdf
 8002aa8:	ffffeefe 	.word	0xffffeefe

08002aac <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d049      	beq.n	8002b76 <HAL_ADC_IRQHandler+0xca>
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d046      	beq.n	8002b76 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d105      	bne.n	8002b00 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d12b      	bne.n	8002b66 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d127      	bne.n	8002b66 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d006      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d119      	bne.n	8002b66 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0220 	bic.w	r2, r2, #32
 8002b40:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8b0 	bl	8002ccc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0212 	mvn.w	r2, #18
 8002b74:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d057      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x190>
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d054      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d139      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d006      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d12b      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d124      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d11d      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d119      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fabb 	bl	80031a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 020c 	mvn.w	r2, #12
 8002c3a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d017      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d014      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d10d      	bne.n	8002c82 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f834 	bl	8002ce0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0201 	mvn.w	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c90:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x218>
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d012      	beq.n	8002cc4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0220 	mvn.w	r2, #32
 8002cb2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f81d 	bl	8002cf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f06f 0220 	mvn.w	r2, #32
 8002cc2:	601a      	str	r2, [r3, #0]
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x1c>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e136      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x28a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b09      	cmp	r3, #9
 8002d32:	d93a      	bls.n	8002daa <HAL_ADC_ConfigChannel+0xa2>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d3c:	d035      	beq.n	8002daa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	3b1e      	subs	r3, #30
 8002d54:	2207      	movs	r2, #7
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	400a      	ands	r2, r1
 8002d62:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a8d      	ldr	r2, [pc, #564]	; (8002fa0 <HAL_ADC_ConfigChannel+0x298>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10a      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68d9      	ldr	r1, [r3, #12]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	061a      	lsls	r2, r3, #24
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d82:	e035      	b.n	8002df0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68d9      	ldr	r1, [r3, #12]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4403      	add	r3, r0
 8002d9c:	3b1e      	subs	r3, #30
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002da8:	e022      	b.n	8002df0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6919      	ldr	r1, [r3, #16]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	400a      	ands	r2, r1
 8002dcc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6919      	ldr	r1, [r3, #16]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4403      	add	r3, r0
 8002de6:	409a      	lsls	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d824      	bhi.n	8002e42 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	3b05      	subs	r3, #5
 8002e0a:	221f      	movs	r2, #31
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43da      	mvns	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	400a      	ands	r2, r1
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b05      	subs	r3, #5
 8002e34:	fa00 f203 	lsl.w	r2, r0, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e40:	e04c      	b.n	8002edc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d824      	bhi.n	8002e94 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b23      	subs	r3, #35	; 0x23
 8002e5c:	221f      	movs	r2, #31
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	400a      	ands	r2, r1
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b23      	subs	r3, #35	; 0x23
 8002e86:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
 8002e92:	e023      	b.n	8002edc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3b41      	subs	r3, #65	; 0x41
 8002ea6:	221f      	movs	r2, #31
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43da      	mvns	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	3b41      	subs	r3, #65	; 0x41
 8002ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <HAL_ADC_ConfigChannel+0x29c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10a      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1f4>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eee:	d105      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ef6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002efa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_ADC_ConfigChannel+0x29c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10f      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x21e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b12      	cmp	r3, #18
 8002f0c:	d10b      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f18:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f1a:	4b23      	ldr	r3, [pc, #140]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a22      	ldr	r2, [pc, #136]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f24:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_ADC_ConfigChannel+0x29c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d12b      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x280>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <HAL_ADC_ConfigChannel+0x298>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0x23a>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b11      	cmp	r3, #17
 8002f40:	d122      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f4c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f58:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_ADC_ConfigChannel+0x298>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d111      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <HAL_ADC_ConfigChannel+0x2a4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0c9a      	lsrs	r2, r3, #18
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f7a:	e002      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f9      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	10000012 	.word	0x10000012
 8002fa4:	40012000 	.word	0x40012000
 8002fa8:	40012300 	.word	0x40012300
 8002fac:	20000180 	.word	0x20000180
 8002fb0:	431bde83 	.word	0x431bde83

08002fb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fbc:	4b78      	ldr	r3, [pc, #480]	; (80031a0 <ADC_Init+0x1ec>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a77      	ldr	r2, [pc, #476]	; (80031a0 <ADC_Init+0x1ec>)
 8002fc2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fc6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fc8:	4b75      	ldr	r3, [pc, #468]	; (80031a0 <ADC_Init+0x1ec>)
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4973      	ldr	r1, [pc, #460]	; (80031a0 <ADC_Init+0x1ec>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	021a      	lsls	r2, r3, #8
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003008:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6899      	ldr	r1, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	4a58      	ldr	r2, [pc, #352]	; (80031a4 <ADC_Init+0x1f0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d022      	beq.n	800308e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003056:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	e00f      	b.n	80030ae <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800309c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0202 	bic.w	r2, r2, #2
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	005a      	lsls	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6859      	ldr	r1, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	3b01      	subs	r3, #1
 8003108:	035a      	lsls	r2, r3, #13
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	e007      	b.n	8003124 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003122:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	3b01      	subs	r3, #1
 8003140:	051a      	lsls	r2, r3, #20
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003158:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003166:	025a      	lsls	r2, r3, #9
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	029a      	lsls	r2, r3, #10
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40012300 	.word	0x40012300
 80031a4:	0f000001 	.word	0x0f000001

080031a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <__NVIC_SetPriorityGrouping+0x40>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ea:	4a04      	ldr	r2, [pc, #16]	; (80031fc <__NVIC_SetPriorityGrouping+0x40>)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	60d3      	str	r3, [r2, #12]
}
 80031f0:	bf00      	nop
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000ed00 	.word	0xe000ed00
 8003200:	05fa0000 	.word	0x05fa0000

08003204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <__NVIC_GetPriorityGrouping+0x18>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	f003 0307 	and.w	r3, r3, #7
}
 8003212:	4618      	mov	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	2b00      	cmp	r3, #0
 8003230:	db0b      	blt.n	800324a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	f003 021f 	and.w	r2, r3, #31
 8003238:	4907      	ldr	r1, [pc, #28]	; (8003258 <__NVIC_EnableIRQ+0x38>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2001      	movs	r0, #1
 8003242:	fa00 f202 	lsl.w	r2, r0, r2
 8003246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000e100 	.word	0xe000e100

0800325c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	2b00      	cmp	r3, #0
 800326e:	db0a      	blt.n	8003286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	490c      	ldr	r1, [pc, #48]	; (80032a8 <__NVIC_SetPriority+0x4c>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	440b      	add	r3, r1
 8003280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003284:	e00a      	b.n	800329c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4908      	ldr	r1, [pc, #32]	; (80032ac <__NVIC_SetPriority+0x50>)
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3b04      	subs	r3, #4
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	440b      	add	r3, r1
 800329a:	761a      	strb	r2, [r3, #24]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	; 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f1c3 0307 	rsb	r3, r3, #7
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	bf28      	it	cs
 80032ce:	2304      	movcs	r3, #4
 80032d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d902      	bls.n	80032e0 <NVIC_EncodePriority+0x30>
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3b03      	subs	r3, #3
 80032de:	e000      	b.n	80032e2 <NVIC_EncodePriority+0x32>
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	401a      	ands	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f8:	f04f 31ff 	mov.w	r1, #4294967295
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	43d9      	mvns	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	4313      	orrs	r3, r2
         );
}
 800330a:	4618      	mov	r0, r3
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003328:	d301      	bcc.n	800332e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332a:	2301      	movs	r3, #1
 800332c:	e00f      	b.n	800334e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332e:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <SysTick_Config+0x40>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003336:	210f      	movs	r1, #15
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f7ff ff8e 	bl	800325c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <SysTick_Config+0x40>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003346:	4b04      	ldr	r3, [pc, #16]	; (8003358 <SysTick_Config+0x40>)
 8003348:	2207      	movs	r2, #7
 800334a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000e010 	.word	0xe000e010

0800335c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff29 	bl	80031bc <__NVIC_SetPriorityGrouping>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003384:	f7ff ff3e 	bl	8003204 <__NVIC_GetPriorityGrouping>
 8003388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f7ff ff8e 	bl	80032b0 <NVIC_EncodePriority>
 8003394:	4602      	mov	r2, r0
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff5d 	bl	800325c <__NVIC_SetPriority>
}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff31 	bl	8003220 <__NVIC_EnableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ffa2 	bl	8003318 <SysTick_Config>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff f9d4 	bl	8002798 <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d008      	beq.n	8003410 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e052      	b.n	80034b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0216 	bic.w	r2, r2, #22
 800341e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800342e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d103      	bne.n	8003440 <HAL_DMA_Abort+0x62>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0208 	bic.w	r2, r2, #8
 800344e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003460:	e013      	b.n	800348a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003462:	f7ff f999 	bl	8002798 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b05      	cmp	r3, #5
 800346e:	d90c      	bls.n	800348a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2203      	movs	r2, #3
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e015      	b.n	80034b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e4      	bne.n	8003462 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	223f      	movs	r2, #63	; 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d004      	beq.n	80034dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2280      	movs	r2, #128	; 0x80
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e00c      	b.n	80034f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2205      	movs	r2, #5
 80034e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003504:	b480      	push	{r7}
 8003506:	b089      	sub	sp, #36	; 0x24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	e175      	b.n	8003810 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003524:	2201      	movs	r2, #1
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	429a      	cmp	r2, r3
 800353e:	f040 8164 	bne.w	800380a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d005      	beq.n	800355a <HAL_GPIO_Init+0x56>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d130      	bne.n	80035bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	2203      	movs	r2, #3
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003590:	2201      	movs	r2, #1
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 0201 	and.w	r2, r3, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0303 	and.w	r3, r3, #3
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d017      	beq.n	80035f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2203      	movs	r2, #3
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d123      	bne.n	800364c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	08da      	lsrs	r2, r3, #3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3208      	adds	r2, #8
 800360c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	220f      	movs	r2, #15
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	08da      	lsrs	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3208      	adds	r2, #8
 8003646:	69b9      	ldr	r1, [r7, #24]
 8003648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0203 	and.w	r2, r3, #3
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 80be 	beq.w	800380a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800368e:	4b66      	ldr	r3, [pc, #408]	; (8003828 <HAL_GPIO_Init+0x324>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	4a65      	ldr	r2, [pc, #404]	; (8003828 <HAL_GPIO_Init+0x324>)
 8003694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003698:	6453      	str	r3, [r2, #68]	; 0x44
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <HAL_GPIO_Init+0x324>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80036a6:	4a61      	ldr	r2, [pc, #388]	; (800382c <HAL_GPIO_Init+0x328>)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	220f      	movs	r2, #15
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a58      	ldr	r2, [pc, #352]	; (8003830 <HAL_GPIO_Init+0x32c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d037      	beq.n	8003742 <HAL_GPIO_Init+0x23e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_GPIO_Init+0x330>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d031      	beq.n	800373e <HAL_GPIO_Init+0x23a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_GPIO_Init+0x334>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d02b      	beq.n	800373a <HAL_GPIO_Init+0x236>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a55      	ldr	r2, [pc, #340]	; (800383c <HAL_GPIO_Init+0x338>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x232>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_GPIO_Init+0x33c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x22e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a53      	ldr	r2, [pc, #332]	; (8003844 <HAL_GPIO_Init+0x340>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x22a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <HAL_GPIO_Init+0x344>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x226>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_GPIO_Init+0x348>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x222>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a50      	ldr	r2, [pc, #320]	; (8003850 <HAL_GPIO_Init+0x34c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x21e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_Init+0x350>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x21a>
 800371a:	2309      	movs	r3, #9
 800371c:	e012      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800371e:	230a      	movs	r3, #10
 8003720:	e010      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003722:	2308      	movs	r3, #8
 8003724:	e00e      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003726:	2307      	movs	r3, #7
 8003728:	e00c      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800372a:	2306      	movs	r3, #6
 800372c:	e00a      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800372e:	2305      	movs	r3, #5
 8003730:	e008      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003732:	2304      	movs	r3, #4
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003736:	2303      	movs	r3, #3
 8003738:	e004      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800373a:	2302      	movs	r3, #2
 800373c:	e002      	b.n	8003744 <HAL_GPIO_Init+0x240>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x240>
 8003742:	2300      	movs	r3, #0
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f002 0203 	and.w	r2, r2, #3
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	4093      	lsls	r3, r2
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003754:	4935      	ldr	r1, [pc, #212]	; (800382c <HAL_GPIO_Init+0x328>)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003762:	4b3d      	ldr	r3, [pc, #244]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003786:	4a34      	ldr	r2, [pc, #208]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800378c:	4b32      	ldr	r3, [pc, #200]	; (8003858 <HAL_GPIO_Init+0x354>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b0:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037b6:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037e0:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <HAL_GPIO_Init+0x354>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <HAL_GPIO_Init+0x354>)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3301      	adds	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	f67f ae86 	bls.w	8003524 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	40013800 	.word	0x40013800
 8003830:	40020000 	.word	0x40020000
 8003834:	40020400 	.word	0x40020400
 8003838:	40020800 	.word	0x40020800
 800383c:	40020c00 	.word	0x40020c00
 8003840:	40021000 	.word	0x40021000
 8003844:	40021400 	.word	0x40021400
 8003848:	40021800 	.word	0x40021800
 800384c:	40021c00 	.word	0x40021c00
 8003850:	40022000 	.word	0x40022000
 8003854:	40022400 	.word	0x40022400
 8003858:	40013c00 	.word	0x40013c00

0800385c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	887b      	ldrh	r3, [r7, #2]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
 8003878:	e001      	b.n	800387e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	807b      	strh	r3, [r7, #2]
 8003898:	4613      	mov	r3, r2
 800389a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800389c:	787b      	ldrb	r3, [r7, #1]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80038a8:	e003      	b.n	80038b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80038aa:	887b      	ldrh	r3, [r7, #2]
 80038ac:	041a      	lsls	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	619a      	str	r2, [r3, #24]
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ca:	4b08      	ldr	r3, [pc, #32]	; (80038ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038d6:	4a05      	ldr	r2, [pc, #20]	; (80038ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f806 	bl	80038f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038e4:	bf00      	nop
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40013c00 	.word	0x40013c00

080038f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07f      	b.n	8003a1a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd ffaa 	bl	8001888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	; 0x24
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0201 	bic.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003958:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003968:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	e006      	b.n	8003990 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800398e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d104      	bne.n	80039a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6859      	ldr	r1, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4b1d      	ldr	r3, [pc, #116]	; (8003a24 <HAL_I2C_Init+0x11c>)
 80039ae:	430b      	orrs	r3, r1
 80039b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69d9      	ldr	r1, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	02008000 	.word	0x02008000

08003a28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	461a      	mov	r2, r3
 8003a34:	460b      	mov	r3, r1
 8003a36:	817b      	strh	r3, [r7, #10]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	f040 80da 	bne.w	8003bfe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_I2C_Master_Transmit+0x30>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e0d3      	b.n	8003c00 <HAL_I2C_Master_Transmit+0x1d8>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a60:	f7fe fe9a 	bl	8002798 <HAL_GetTick>
 8003a64:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2319      	movs	r3, #25
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f9e6 	bl	8003e44 <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e0be      	b.n	8003c00 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2221      	movs	r2, #33	; 0x21
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	893a      	ldrh	r2, [r7, #8]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2bff      	cmp	r3, #255	; 0xff
 8003ab2:	d90e      	bls.n	8003ad2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	22ff      	movs	r2, #255	; 0xff
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	8979      	ldrh	r1, [r7, #10]
 8003ac2:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fbd0 	bl	8004270 <I2C_TransferConfig>
 8003ad0:	e06c      	b.n	8003bac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	8979      	ldrh	r1, [r7, #10]
 8003ae4:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fbbf 	bl	8004270 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003af2:	e05b      	b.n	8003bac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	6a39      	ldr	r1, [r7, #32]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 f9e3 	bl	8003ec4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e07b      	b.n	8003c00 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	781a      	ldrb	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d034      	beq.n	8003bac <HAL_I2C_Master_Transmit+0x184>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d130      	bne.n	8003bac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2200      	movs	r2, #0
 8003b52:	2180      	movs	r1, #128	; 0x80
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f975 	bl	8003e44 <I2C_WaitOnFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e04d      	b.n	8003c00 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2bff      	cmp	r3, #255	; 0xff
 8003b6c:	d90e      	bls.n	8003b8c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	22ff      	movs	r2, #255	; 0xff
 8003b72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	8979      	ldrh	r1, [r7, #10]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fb73 	bl	8004270 <I2C_TransferConfig>
 8003b8a:	e00f      	b.n	8003bac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	8979      	ldrh	r1, [r7, #10]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fb62 	bl	8004270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d19e      	bne.n	8003af4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	6a39      	ldr	r1, [r7, #32]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f9c2 	bl	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e01a      	b.n	8003c00 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_I2C_Master_Transmit+0x1e4>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003bfe:	2302      	movs	r3, #2
  }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	80002000 	.word	0x80002000
 8003c0c:	fe00e800 	.word	0xfe00e800

08003c10 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	817b      	strh	r3, [r7, #10]
 8003c20:	4613      	mov	r3, r2
 8003c22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	f040 80db 	bne.w	8003de8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2C_Master_Receive+0x30>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0d4      	b.n	8003dea <HAL_I2C_Master_Receive+0x1da>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c48:	f7fe fda6 	bl	8002798 <HAL_GetTick>
 8003c4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2319      	movs	r3, #25
 8003c54:	2201      	movs	r2, #1
 8003c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8f2 	bl	8003e44 <I2C_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0bf      	b.n	8003dea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2222      	movs	r2, #34	; 0x22
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2210      	movs	r2, #16
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	893a      	ldrh	r2, [r7, #8]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2bff      	cmp	r3, #255	; 0xff
 8003c9a:	d90e      	bls.n	8003cba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	22ff      	movs	r2, #255	; 0xff
 8003ca0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	8979      	ldrh	r1, [r7, #10]
 8003caa:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <HAL_I2C_Master_Receive+0x1e4>)
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fadc 	bl	8004270 <I2C_TransferConfig>
 8003cb8:	e06d      	b.n	8003d96 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	8979      	ldrh	r1, [r7, #10]
 8003ccc:	4b49      	ldr	r3, [pc, #292]	; (8003df4 <HAL_I2C_Master_Receive+0x1e4>)
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 facb 	bl	8004270 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003cda:	e05c      	b.n	8003d96 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	6a39      	ldr	r1, [r7, #32]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f96b 	bl	8003fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e07c      	b.n	8003dea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d034      	beq.n	8003d96 <HAL_I2C_Master_Receive+0x186>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d130      	bne.n	8003d96 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2180      	movs	r1, #128	; 0x80
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f880 	bl	8003e44 <I2C_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e04d      	b.n	8003dea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2bff      	cmp	r3, #255	; 0xff
 8003d56:	d90e      	bls.n	8003d76 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	22ff      	movs	r2, #255	; 0xff
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	8979      	ldrh	r1, [r7, #10]
 8003d66:	2300      	movs	r3, #0
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fa7e 	bl	8004270 <I2C_TransferConfig>
 8003d74:	e00f      	b.n	8003d96 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	8979      	ldrh	r1, [r7, #10]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 fa6d 	bl	8004270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d19d      	bne.n	8003cdc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	6a39      	ldr	r1, [r7, #32]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f8cd 	bl	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e01a      	b.n	8003dea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2220      	movs	r2, #32
 8003dba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_I2C_Master_Receive+0x1e8>)
 8003dc8:	400b      	ands	r3, r1
 8003dca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	e000      	b.n	8003dea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003de8:	2302      	movs	r3, #2
  }
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	80002400 	.word	0x80002400
 8003df8:	fe00e800 	.word	0xfe00e800

08003dfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d103      	bne.n	8003e1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d007      	beq.n	8003e38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0201 	orr.w	r2, r2, #1
 8003e36:	619a      	str	r2, [r3, #24]
  }
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4613      	mov	r3, r2
 8003e52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e54:	e022      	b.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d01e      	beq.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5e:	f7fe fc9b 	bl	8002798 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d302      	bcc.n	8003e74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d113      	bne.n	8003e9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f043 0220 	orr.w	r2, r3, #32
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e00f      	b.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	bf0c      	ite	eq
 8003eac:	2301      	moveq	r3, #1
 8003eae:	2300      	movne	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d0cd      	beq.n	8003e56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ed0:	e02c      	b.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68b9      	ldr	r1, [r7, #8]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f8ea 	bl	80040b0 <I2C_IsErrorOccurred>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e02a      	b.n	8003f3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d01e      	beq.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe fc53 	bl	8002798 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d113      	bne.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e007      	b.n	8003f3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d1cb      	bne.n	8003ed2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f50:	e028      	b.n	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f8aa 	bl	80040b0 <I2C_IsErrorOccurred>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e026      	b.n	8003fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f66:	f7fe fc17 	bl	8002798 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d113      	bne.n	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e007      	b.n	8003fb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d1cf      	bne.n	8003f52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fc8:	e064      	b.n	8004094 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f86e 	bl	80040b0 <I2C_IsErrorOccurred>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e062      	b.n	80040a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d138      	bne.n	800405e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d105      	bne.n	8004006 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e04e      	b.n	80040a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b10      	cmp	r3, #16
 8004012:	d107      	bne.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2210      	movs	r2, #16
 800401a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2204      	movs	r2, #4
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
 8004022:	e002      	b.n	800402a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2220      	movs	r2, #32
 8004030:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800403e:	400b      	ands	r3, r1
 8004040:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e022      	b.n	80040a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405e:	f7fe fb9b 	bl	8002798 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	429a      	cmp	r2, r3
 800406c:	d302      	bcc.n	8004074 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10f      	bne.n	8004094 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e007      	b.n	80040a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d193      	bne.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	fe00e800 	.word	0xfe00e800

080040b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b08a      	sub	sp, #40	; 0x28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d068      	beq.n	80041ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040e4:	e049      	b.n	800417a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d045      	beq.n	800417a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040ee:	f7fe fb53 	bl	8002798 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d302      	bcc.n	8004104 <I2C_IsErrorOccurred+0x54>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d13a      	bne.n	800417a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004116:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004126:	d121      	bne.n	800416c <I2C_IsErrorOccurred+0xbc>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412e:	d01d      	beq.n	800416c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004130:	7cfb      	ldrb	r3, [r7, #19]
 8004132:	2b20      	cmp	r3, #32
 8004134:	d01a      	beq.n	800416c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004144:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004146:	f7fe fb27 	bl	8002798 <HAL_GetTick>
 800414a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800414c:	e00e      	b.n	800416c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800414e:	f7fe fb23 	bl	8002798 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b19      	cmp	r3, #25
 800415a:	d907      	bls.n	800416c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f043 0320 	orr.w	r3, r3, #32
 8004162:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800416a:	e006      	b.n	800417a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b20      	cmp	r3, #32
 8004178:	d1e9      	bne.n	800414e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	f003 0320 	and.w	r3, r3, #32
 8004184:	2b20      	cmp	r3, #32
 8004186:	d003      	beq.n	8004190 <I2C_IsErrorOccurred+0xe0>
 8004188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0aa      	beq.n	80040e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2220      	movs	r2, #32
 800419e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f043 0304 	orr.w	r3, r3, #4
 80041a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00b      	beq.n	80041d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	f043 0302 	orr.w	r3, r3, #2
 800420a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800421c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01c      	beq.n	800425e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff fde9 	bl	8003dfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b0d      	ldr	r3, [pc, #52]	; (800426c <I2C_IsErrorOccurred+0x1bc>)
 8004236:	400b      	ands	r3, r1
 8004238:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800425e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004262:	4618      	mov	r0, r3
 8004264:	3728      	adds	r7, #40	; 0x28
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	fe00e800 	.word	0xfe00e800

08004270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	4613      	mov	r3, r2
 8004280:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004282:	897b      	ldrh	r3, [r7, #10]
 8004284:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004288:	7a7b      	ldrb	r3, [r7, #9]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004290:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	4313      	orrs	r3, r2
 800429a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800429e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	0d5b      	lsrs	r3, r3, #21
 80042aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80042ae:	4b08      	ldr	r3, [pc, #32]	; (80042d0 <I2C_TransferConfig+0x60>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	43db      	mvns	r3, r3
 80042b4:	ea02 0103 	and.w	r1, r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	03ff63ff 	.word	0x03ff63ff

080042d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d138      	bne.n	800435c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d101      	bne.n	80042f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042f4:	2302      	movs	r3, #2
 80042f6:	e032      	b.n	800435e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2224      	movs	r2, #36	; 0x24
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6819      	ldr	r1, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b20      	cmp	r3, #32
 800437e:	d139      	bne.n	80043f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800438a:	2302      	movs	r3, #2
 800438c:	e033      	b.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2224      	movs	r2, #36	; 0x24
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0201 	bic.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e000      	b.n	80043f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
  }
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <HAL_PWREx_EnableOverDrive+0x98>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a22      	ldr	r2, [pc, #136]	; (800449c <HAL_PWREx_EnableOverDrive+0x98>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	; 0x40
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_PWREx_EnableOverDrive+0x98>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004426:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004432:	f7fe f9b1 	bl	8002798 <HAL_GetTick>
 8004436:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004438:	e009      	b.n	800444e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800443a:	f7fe f9ad 	bl	8002798 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004448:	d901      	bls.n	800444e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e022      	b.n	8004494 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445a:	d1ee      	bne.n	800443a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800445c:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0f      	ldr	r2, [pc, #60]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004466:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004468:	f7fe f996 	bl	8002798 <HAL_GetTick>
 800446c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800446e:	e009      	b.n	8004484 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004470:	f7fe f992 	bl	8002798 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447e:	d901      	bls.n	8004484 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e007      	b.n	8004494 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004490:	d1ee      	bne.n	8004470 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000

080044a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e29b      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 8087 	beq.w	80045d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044c8:	4b96      	ldr	r3, [pc, #600]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f003 030c 	and.w	r3, r3, #12
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d00c      	beq.n	80044ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d4:	4b93      	ldr	r3, [pc, #588]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d112      	bne.n	8004506 <HAL_RCC_OscConfig+0x62>
 80044e0:	4b90      	ldr	r3, [pc, #576]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ec:	d10b      	bne.n	8004506 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ee:	4b8d      	ldr	r3, [pc, #564]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d06c      	beq.n	80045d4 <HAL_RCC_OscConfig+0x130>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d168      	bne.n	80045d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e275      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450e:	d106      	bne.n	800451e <HAL_RCC_OscConfig+0x7a>
 8004510:	4b84      	ldr	r3, [pc, #528]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a83      	ldr	r2, [pc, #524]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e02e      	b.n	800457c <HAL_RCC_OscConfig+0xd8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10c      	bne.n	8004540 <HAL_RCC_OscConfig+0x9c>
 8004526:	4b7f      	ldr	r3, [pc, #508]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a7e      	ldr	r2, [pc, #504]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800452c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	4b7c      	ldr	r3, [pc, #496]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a7b      	ldr	r2, [pc, #492]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e01d      	b.n	800457c <HAL_RCC_OscConfig+0xd8>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0xc0>
 800454a:	4b76      	ldr	r3, [pc, #472]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a75      	ldr	r2, [pc, #468]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b73      	ldr	r3, [pc, #460]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a72      	ldr	r2, [pc, #456]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e00b      	b.n	800457c <HAL_RCC_OscConfig+0xd8>
 8004564:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a6e      	ldr	r2, [pc, #440]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800456a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b6c      	ldr	r3, [pc, #432]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a6b      	ldr	r2, [pc, #428]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fe f908 	bl	8002798 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800458c:	f7fe f904 	bl	8002798 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e229      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b61      	ldr	r3, [pc, #388]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0xe8>
 80045aa:	e014      	b.n	80045d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fe f8f4 	bl	8002798 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fe f8f0 	bl	8002798 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e215      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c6:	4b57      	ldr	r3, [pc, #348]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x110>
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d069      	beq.n	80046b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e2:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f003 030c 	and.w	r3, r3, #12
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d11c      	bne.n	8004634 <HAL_RCC_OscConfig+0x190>
 80045fa:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d116      	bne.n	8004634 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCC_OscConfig+0x17a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e1e9      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	493d      	ldr	r1, [pc, #244]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800462e:	4313      	orrs	r3, r2
 8004630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004632:	e040      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d023      	beq.n	8004684 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800463c:	4b39      	ldr	r3, [pc, #228]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a38      	ldr	r2, [pc, #224]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe f8a6 	bl	8002798 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fe f8a2 	bl	8002798 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e1c7      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4929      	ldr	r1, [pc, #164]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800467e:	4313      	orrs	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
 8004682:	e018      	b.n	80046b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004684:	4b27      	ldr	r3, [pc, #156]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 800468a:	f023 0301 	bic.w	r3, r3, #1
 800468e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004690:	f7fe f882 	bl	8002798 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004698:	f7fe f87e 	bl	8002798 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e1a3      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d038      	beq.n	8004734 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d019      	beq.n	80046fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80046cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ce:	4a15      	ldr	r2, [pc, #84]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fe f85f 	bl	8002798 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7fe f85b 	bl	8002798 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e180      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCC_OscConfig+0x23a>
 80046fc:	e01a      	b.n	8004734 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004702:	4a08      	ldr	r2, [pc, #32]	; (8004724 <HAL_RCC_OscConfig+0x280>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470a:	f7fe f845 	bl	8002798 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004710:	e00a      	b.n	8004728 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004712:	f7fe f841 	bl	8002798 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d903      	bls.n	8004728 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e166      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
 8004724:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b92      	ldr	r3, [pc, #584]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ee      	bne.n	8004712 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a4 	beq.w	800488a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004742:	4b8c      	ldr	r3, [pc, #560]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	4b89      	ldr	r3, [pc, #548]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a88      	ldr	r2, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b86      	ldr	r3, [pc, #536]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	60bb      	str	r3, [r7, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004766:	2301      	movs	r3, #1
 8004768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476a:	4b83      	ldr	r3, [pc, #524]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004776:	4b80      	ldr	r3, [pc, #512]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7f      	ldr	r2, [pc, #508]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004782:	f7fe f809 	bl	8002798 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478a:	f7fe f805 	bl	8002798 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b64      	cmp	r3, #100	; 0x64
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e12a      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479c:	4b76      	ldr	r3, [pc, #472]	; (8004978 <HAL_RCC_OscConfig+0x4d4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0f0      	beq.n	800478a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d106      	bne.n	80047be <HAL_RCC_OscConfig+0x31a>
 80047b0:	4b70      	ldr	r3, [pc, #448]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4a6f      	ldr	r2, [pc, #444]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	6713      	str	r3, [r2, #112]	; 0x70
 80047bc:	e02d      	b.n	800481a <HAL_RCC_OscConfig+0x376>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x33c>
 80047c6:	4b6b      	ldr	r3, [pc, #428]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a6a      	ldr	r2, [pc, #424]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	4b68      	ldr	r3, [pc, #416]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	4a67      	ldr	r2, [pc, #412]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	6713      	str	r3, [r2, #112]	; 0x70
 80047de:	e01c      	b.n	800481a <HAL_RCC_OscConfig+0x376>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d10c      	bne.n	8004802 <HAL_RCC_OscConfig+0x35e>
 80047e8:	4b62      	ldr	r3, [pc, #392]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	4a61      	ldr	r2, [pc, #388]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047ee:	f043 0304 	orr.w	r3, r3, #4
 80047f2:	6713      	str	r3, [r2, #112]	; 0x70
 80047f4:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f8:	4a5e      	ldr	r2, [pc, #376]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004800:	e00b      	b.n	800481a <HAL_RCC_OscConfig+0x376>
 8004802:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a5b      	ldr	r2, [pc, #364]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	4b59      	ldr	r3, [pc, #356]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a58      	ldr	r2, [pc, #352]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d015      	beq.n	800484e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004822:	f7fd ffb9 	bl	8002798 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fd ffb5 	bl	8002798 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0d8      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004840:	4b4c      	ldr	r3, [pc, #304]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ee      	beq.n	800482a <HAL_RCC_OscConfig+0x386>
 800484c:	e014      	b.n	8004878 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484e:	f7fd ffa3 	bl	8002798 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004854:	e00a      	b.n	800486c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004856:	f7fd ff9f 	bl	8002798 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	f241 3288 	movw	r2, #5000	; 0x1388
 8004864:	4293      	cmp	r3, r2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e0c2      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800486c:	4b41      	ldr	r3, [pc, #260]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ee      	bne.n	8004856 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487e:	4b3d      	ldr	r3, [pc, #244]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	4a3c      	ldr	r2, [pc, #240]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004888:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 80ae 	beq.w	80049f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004894:	4b37      	ldr	r3, [pc, #220]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d06d      	beq.n	800497c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d14b      	bne.n	8004940 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a8:	4b32      	ldr	r3, [pc, #200]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a31      	ldr	r2, [pc, #196]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd ff70 	bl	8002798 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fd ff6c 	bl	8002798 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e091      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	4b29      	ldr	r3, [pc, #164]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69da      	ldr	r2, [r3, #28]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	019b      	lsls	r3, r3, #6
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	3b01      	subs	r3, #1
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	071b      	lsls	r3, r3, #28
 8004906:	491b      	ldr	r1, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a18      	ldr	r2, [pc, #96]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fd ff3e 	bl	8002798 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd ff3a 	bl	8002798 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e05f      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x47c>
 800493e:	e057      	b.n	80049f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800494a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494c:	f7fd ff24 	bl	8002798 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004954:	f7fd ff20 	bl	8002798 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e045      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004966:	4b03      	ldr	r3, [pc, #12]	; (8004974 <HAL_RCC_OscConfig+0x4d0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f0      	bne.n	8004954 <HAL_RCC_OscConfig+0x4b0>
 8004972:	e03d      	b.n	80049f0 <HAL_RCC_OscConfig+0x54c>
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <HAL_RCC_OscConfig+0x558>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d030      	beq.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d129      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d122      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d119      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	3b01      	subs	r3, #1
 80049c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d10f      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d107      	bne.n	80049ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800

08004a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0d0      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b6a      	ldr	r3, [pc, #424]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d910      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b67      	ldr	r3, [pc, #412]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 020f 	bic.w	r2, r3, #15
 8004a2e:	4965      	ldr	r1, [pc, #404]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a36:	4b63      	ldr	r3, [pc, #396]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0b8      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d020      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a60:	4b59      	ldr	r3, [pc, #356]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a58      	ldr	r2, [pc, #352]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a78:	4b53      	ldr	r3, [pc, #332]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	4a52      	ldr	r2, [pc, #328]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a84:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	494d      	ldr	r1, [pc, #308]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d040      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aaa:	4b47      	ldr	r3, [pc, #284]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d115      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e07f      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e073      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3d      	ldr	r3, [pc, #244]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e06b      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4936      	ldr	r1, [pc, #216]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fd fe50 	bl	8002798 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fd fe4c 	bl	8002798 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e053      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2d      	ldr	r3, [pc, #180]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b27      	ldr	r3, [pc, #156]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d210      	bcs.n	8004b54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f023 020f 	bic.w	r2, r3, #15
 8004b3a:	4922      	ldr	r1, [pc, #136]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b42:	4b20      	ldr	r3, [pc, #128]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e032      	b.n	8004bba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b60:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4916      	ldr	r1, [pc, #88]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	490e      	ldr	r1, [pc, #56]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b92:	f000 f821 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8004b96:	4602      	mov	r2, r0
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	091b      	lsrs	r3, r3, #4
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	490a      	ldr	r1, [pc, #40]	; (8004bcc <HAL_RCC_ClockConfig+0x1cc>)
 8004ba4:	5ccb      	ldrb	r3, [r1, r3]
 8004ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <HAL_RCC_ClockConfig+0x1d0>)
 8004bac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <HAL_RCC_ClockConfig+0x1d4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fd fdac 	bl	8002710 <HAL_InitTick>

  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023c00 	.word	0x40023c00
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	0800e2f8 	.word	0x0800e2f8
 8004bd0:	20000180 	.word	0x20000180
 8004bd4:	20000184 	.word	0x20000184

08004bd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bdc:	b090      	sub	sp, #64	; 0x40
 8004bde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
 8004be4:	2300      	movs	r3, #0
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be8:	2300      	movs	r3, #0
 8004bea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bf0:	4b59      	ldr	r3, [pc, #356]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 030c 	and.w	r3, r3, #12
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d00d      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x40>
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	f200 80a1 	bhi.w	8004d44 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x34>
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d003      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c0a:	e09b      	b.n	8004d44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c10:	e09b      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c12:	4b53      	ldr	r3, [pc, #332]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c16:	e098      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c18:	4b4f      	ldr	r3, [pc, #316]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c22:	4b4d      	ldr	r3, [pc, #308]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d028      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2e:	4b4a      	ldr	r3, [pc, #296]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	099b      	lsrs	r3, r3, #6
 8004c34:	2200      	movs	r2, #0
 8004c36:	623b      	str	r3, [r7, #32]
 8004c38:	627a      	str	r2, [r7, #36]	; 0x24
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c40:	2100      	movs	r1, #0
 8004c42:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c44:	fb03 f201 	mul.w	r2, r3, r1
 8004c48:	2300      	movs	r3, #0
 8004c4a:	fb00 f303 	mul.w	r3, r0, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	4a43      	ldr	r2, [pc, #268]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c52:	fba0 1202 	umull	r1, r2, r0, r2
 8004c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c58:	460a      	mov	r2, r1
 8004c5a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c5e:	4413      	add	r3, r2
 8004c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c64:	2200      	movs	r2, #0
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	61fa      	str	r2, [r7, #28]
 8004c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c72:	f7fb fcf9 	bl	8000668 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7e:	e053      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c80:	4b35      	ldr	r3, [pc, #212]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	099b      	lsrs	r3, r3, #6
 8004c86:	2200      	movs	r2, #0
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	617a      	str	r2, [r7, #20]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c92:	f04f 0b00 	mov.w	fp, #0
 8004c96:	4652      	mov	r2, sl
 8004c98:	465b      	mov	r3, fp
 8004c9a:	f04f 0000 	mov.w	r0, #0
 8004c9e:	f04f 0100 	mov.w	r1, #0
 8004ca2:	0159      	lsls	r1, r3, #5
 8004ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca8:	0150      	lsls	r0, r2, #5
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	ebb2 080a 	subs.w	r8, r2, sl
 8004cb2:	eb63 090b 	sbc.w	r9, r3, fp
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cca:	ebb2 0408 	subs.w	r4, r2, r8
 8004cce:	eb63 0509 	sbc.w	r5, r3, r9
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	00eb      	lsls	r3, r5, #3
 8004cdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce0:	00e2      	lsls	r2, r4, #3
 8004ce2:	4614      	mov	r4, r2
 8004ce4:	461d      	mov	r5, r3
 8004ce6:	eb14 030a 	adds.w	r3, r4, sl
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	eb45 030b 	adc.w	r3, r5, fp
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cfe:	4629      	mov	r1, r5
 8004d00:	028b      	lsls	r3, r1, #10
 8004d02:	4621      	mov	r1, r4
 8004d04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d08:	4621      	mov	r1, r4
 8004d0a:	028a      	lsls	r2, r1, #10
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d12:	2200      	movs	r2, #0
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	60fa      	str	r2, [r7, #12]
 8004d18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d1c:	f7fb fca4 	bl	8000668 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4613      	mov	r3, r2
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	0c1b      	lsrs	r3, r3, #16
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	3301      	adds	r3, #1
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d42:	e002      	b.n	8004d4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d44:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004d46:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3740      	adds	r7, #64	; 0x40
 8004d50:	46bd      	mov	sp, r7
 8004d52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	00f42400 	.word	0x00f42400
 8004d60:	017d7840 	.word	0x017d7840

08004d64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000180 	.word	0x20000180

08004d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d80:	f7ff fff0 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0a9b      	lsrs	r3, r3, #10
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4903      	ldr	r1, [pc, #12]	; (8004da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	0800e308 	.word	0x0800e308

08004da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004da8:	f7ff ffdc 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0b5b      	lsrs	r3, r3, #13
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	0800e308 	.word	0x0800e308

08004dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d012      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004df4:	4b69      	ldr	r3, [pc, #420]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a68      	ldr	r2, [pc, #416]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dfe:	6093      	str	r3, [r2, #8]
 8004e00:	4b66      	ldr	r3, [pc, #408]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e08:	4964      	ldr	r1, [pc, #400]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d017      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e26:	4b5d      	ldr	r3, [pc, #372]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e34:	4959      	ldr	r1, [pc, #356]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e44:	d101      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e52:	2301      	movs	r3, #1
 8004e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d017      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e62:	4b4e      	ldr	r3, [pc, #312]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	494a      	ldr	r1, [pc, #296]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e80:	d101      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 808b 	beq.w	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004eb0:	4b3a      	ldr	r3, [pc, #232]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	4a39      	ldr	r2, [pc, #228]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eba:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebc:	4b37      	ldr	r3, [pc, #220]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ec8:	4b35      	ldr	r3, [pc, #212]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a34      	ldr	r2, [pc, #208]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed4:	f7fd fc60 	bl	8002798 <HAL_GetTick>
 8004ed8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004edc:	f7fd fc5c 	bl	8002798 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	; 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e38f      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eee:	4b2c      	ldr	r3, [pc, #176]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f0      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004efa:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d035      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d02e      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f18:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f3a:	4a18      	ldr	r2, [pc, #96]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f40:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d114      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fc24 	bl	8002798 <HAL_GetTick>
 8004f50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f52:	e00a      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f54:	f7fd fc20 	bl	8002798 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e351      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0ee      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f82:	d111      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f92:	400b      	ands	r3, r1
 8004f94:	4901      	ldr	r1, [pc, #4]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	608b      	str	r3, [r1, #8]
 8004f9a:	e00b      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	0ffffcff 	.word	0x0ffffcff
 8004fa8:	4bac      	ldr	r3, [pc, #688]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4aab      	ldr	r2, [pc, #684]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fb2:	6093      	str	r3, [r2, #8]
 8004fb4:	4ba9      	ldr	r3, [pc, #676]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc0:	49a6      	ldr	r1, [pc, #664]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fd2:	4ba2      	ldr	r3, [pc, #648]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd8:	4aa0      	ldr	r2, [pc, #640]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fe2:	4b9e      	ldr	r3, [pc, #632]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	499b      	ldr	r1, [pc, #620]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005000:	4b96      	ldr	r3, [pc, #600]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500e:	4993      	ldr	r1, [pc, #588]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005022:	4b8e      	ldr	r3, [pc, #568]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005030:	498a      	ldr	r1, [pc, #552]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005044:	4b85      	ldr	r3, [pc, #532]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005052:	4982      	ldr	r1, [pc, #520]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005066:	4b7d      	ldr	r3, [pc, #500]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	4979      	ldr	r1, [pc, #484]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005088:	4b74      	ldr	r3, [pc, #464]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800508a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508e:	f023 0203 	bic.w	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	4971      	ldr	r1, [pc, #452]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005098:	4313      	orrs	r3, r2
 800509a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050aa:	4b6c      	ldr	r3, [pc, #432]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b0:	f023 020c 	bic.w	r2, r3, #12
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b8:	4968      	ldr	r1, [pc, #416]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00a      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050cc:	4b63      	ldr	r3, [pc, #396]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050da:	4960      	ldr	r1, [pc, #384]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ee:	4b5b      	ldr	r3, [pc, #364]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fc:	4957      	ldr	r1, [pc, #348]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005110:	4b52      	ldr	r3, [pc, #328]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	494f      	ldr	r1, [pc, #316]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005132:	4b4a      	ldr	r3, [pc, #296]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	4946      	ldr	r1, [pc, #280]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005154:	4b41      	ldr	r3, [pc, #260]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005162:	493e      	ldr	r1, [pc, #248]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005176:	4b39      	ldr	r3, [pc, #228]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005184:	4935      	ldr	r1, [pc, #212]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005198:	4b30      	ldr	r3, [pc, #192]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051a6:	492d      	ldr	r1, [pc, #180]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d011      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051ba:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c8:	4924      	ldr	r1, [pc, #144]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051d8:	d101      	bne.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005200:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005208:	4914      	ldr	r1, [pc, #80]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800521c:	4b0f      	ldr	r3, [pc, #60]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005222:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522c:	490b      	ldr	r1, [pc, #44]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00f      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005240:	4b06      	ldr	r3, [pc, #24]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005250:	4902      	ldr	r1, [pc, #8]	; (800525c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005258:	e002      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800526c:	4b8a      	ldr	r3, [pc, #552]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005272:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	4986      	ldr	r1, [pc, #536]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800527e:	4313      	orrs	r3, r2
 8005280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005290:	4b81      	ldr	r3, [pc, #516]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005296:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a0:	497d      	ldr	r1, [pc, #500]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d006      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 80d6 	beq.w	8005468 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052bc:	4b76      	ldr	r3, [pc, #472]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a75      	ldr	r2, [pc, #468]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c8:	f7fd fa66 	bl	8002798 <HAL_GetTick>
 80052cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052ce:	e008      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052d0:	f7fd fa62 	bl	8002798 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b64      	cmp	r3, #100	; 0x64
 80052dc:	d901      	bls.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e195      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052e2:	4b6d      	ldr	r3, [pc, #436]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1f0      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d021      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d11d      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005302:	4b65      	ldr	r3, [pc, #404]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005308:	0c1b      	lsrs	r3, r3, #16
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005310:	4b61      	ldr	r3, [pc, #388]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005316:	0e1b      	lsrs	r3, r3, #24
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	019a      	lsls	r2, r3, #6
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	041b      	lsls	r3, r3, #16
 8005328:	431a      	orrs	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	4958      	ldr	r1, [pc, #352]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005352:	d00a      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800535c:	2b00      	cmp	r3, #0
 800535e:	d02e      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005368:	d129      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800536a:	4b4b      	ldr	r3, [pc, #300]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005378:	4b47      	ldr	r3, [pc, #284]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800537e:	0f1b      	lsrs	r3, r3, #28
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	019a      	lsls	r2, r3, #6
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	041b      	lsls	r3, r3, #16
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	061b      	lsls	r3, r3, #24
 8005398:	431a      	orrs	r2, r3
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	071b      	lsls	r3, r3, #28
 800539e:	493e      	ldr	r1, [pc, #248]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053a6:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ac:	f023 021f 	bic.w	r2, r3, #31
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	3b01      	subs	r3, #1
 80053b6:	4938      	ldr	r1, [pc, #224]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d01d      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d0:	0e1b      	lsrs	r3, r3, #24
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053d8:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053de:	0f1b      	lsrs	r3, r3, #28
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	019a      	lsls	r2, r3, #6
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	431a      	orrs	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	071b      	lsls	r3, r3, #28
 80053fe:	4926      	ldr	r1, [pc, #152]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d011      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	019a      	lsls	r2, r3, #6
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	071b      	lsls	r3, r3, #28
 800542e:	491a      	ldr	r1, [pc, #104]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005436:	4b18      	ldr	r3, [pc, #96]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800543c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005442:	f7fd f9a9 	bl	8002798 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005448:	e008      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800544a:	f7fd f9a5 	bl	8002798 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b64      	cmp	r3, #100	; 0x64
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e0d8      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800545c:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f0      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b01      	cmp	r3, #1
 800546c:	f040 80ce 	bne.w	800560c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a08      	ldr	r2, [pc, #32]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800547a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800547c:	f7fd f98c 	bl	8002798 <HAL_GetTick>
 8005480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005482:	e00b      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005484:	f7fd f988 	bl	8002798 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	; 0x64
 8005490:	d904      	bls.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e0bb      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800549c:	4b5e      	ldr	r3, [pc, #376]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a8:	d0ec      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02e      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d12a      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054d2:	4b51      	ldr	r3, [pc, #324]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054e0:	4b4d      	ldr	r3, [pc, #308]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e6:	0f1b      	lsrs	r3, r3, #28
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	019a      	lsls	r2, r3, #6
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	061b      	lsls	r3, r3, #24
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	071b      	lsls	r3, r3, #28
 8005506:	4944      	ldr	r1, [pc, #272]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800550e:	4b42      	ldr	r3, [pc, #264]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005514:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551c:	3b01      	subs	r3, #1
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	493d      	ldr	r1, [pc, #244]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d022      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800553c:	d11d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	0e1b      	lsrs	r3, r3, #24
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800554c:	4b32      	ldr	r3, [pc, #200]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800554e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005552:	0f1b      	lsrs	r3, r3, #28
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	019a      	lsls	r2, r3, #6
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	041b      	lsls	r3, r3, #16
 8005566:	431a      	orrs	r2, r3
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	071b      	lsls	r3, r3, #28
 8005572:	4929      	ldr	r1, [pc, #164]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d028      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005586:	4b24      	ldr	r3, [pc, #144]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558c:	0e1b      	lsrs	r3, r3, #24
 800558e:	f003 030f 	and.w	r3, r3, #15
 8005592:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005594:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	019a      	lsls	r2, r3, #6
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	041b      	lsls	r3, r3, #16
 80055ac:	431a      	orrs	r2, r3
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	061b      	lsls	r3, r3, #24
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	071b      	lsls	r3, r3, #28
 80055ba:	4917      	ldr	r1, [pc, #92]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055c2:	4b15      	ldr	r3, [pc, #84]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4911      	ldr	r1, [pc, #68]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a0e      	ldr	r2, [pc, #56]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e4:	f7fd f8d8 	bl	8002798 <HAL_GetTick>
 80055e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055ec:	f7fd f8d4 	bl	8002798 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e007      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800560a:	d1ef      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800

0800561c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e049      	b.n	80056c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fc fee8 	bl	8002418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f000 faca 	bl	8005bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d001      	beq.n	80056e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e054      	b.n	800578e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a26      	ldr	r2, [pc, #152]	; (800579c <HAL_TIM_Base_Start_IT+0xd0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d022      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x80>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800570e:	d01d      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x80>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a22      	ldr	r2, [pc, #136]	; (80057a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d018      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x80>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a21      	ldr	r2, [pc, #132]	; (80057a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d013      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x80>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1f      	ldr	r2, [pc, #124]	; (80057a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x80>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1e      	ldr	r2, [pc, #120]	; (80057ac <HAL_TIM_Base_Start_IT+0xe0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d009      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x80>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <HAL_TIM_Base_Start_IT+0x80>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1b      	ldr	r2, [pc, #108]	; (80057b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d115      	bne.n	8005778 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <HAL_TIM_Base_Start_IT+0xec>)
 8005754:	4013      	ands	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2b06      	cmp	r3, #6
 800575c:	d015      	beq.n	800578a <HAL_TIM_Base_Start_IT+0xbe>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	d011      	beq.n	800578a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f042 0201 	orr.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005776:	e008      	b.n	800578a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0201 	orr.w	r2, r2, #1
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	e000      	b.n	800578c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800578a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40010400 	.word	0x40010400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40001800 	.word	0x40001800
 80057b8:	00010007 	.word	0x00010007

080057bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0202 	mvn.w	r2, #2
 80057e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f9da 	bl	8005bb8 <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f9cc 	bl	8005ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f9dd 	bl	8005bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0304 	and.w	r3, r3, #4
 8005822:	2b04      	cmp	r3, #4
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b04      	cmp	r3, #4
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0204 	mvn.w	r2, #4
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9b0 	bl	8005bb8 <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9a2 	bl	8005ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f9b3 	bl	8005bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b08      	cmp	r3, #8
 8005878:	d122      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b08      	cmp	r3, #8
 8005886:	d11b      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0208 	mvn.w	r2, #8
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2204      	movs	r2, #4
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 0303 	and.w	r3, r3, #3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f986 	bl	8005bb8 <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f978 	bl	8005ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f989 	bl	8005bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0310 	and.w	r3, r3, #16
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d122      	bne.n	8005914 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0310 	and.w	r3, r3, #16
 80058d8:	2b10      	cmp	r3, #16
 80058da:	d11b      	bne.n	8005914 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0210 	mvn.w	r2, #16
 80058e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2208      	movs	r2, #8
 80058ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f95c 	bl	8005bb8 <HAL_TIM_IC_CaptureCallback>
 8005900:	e005      	b.n	800590e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f94e 	bl	8005ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f95f 	bl	8005bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10e      	bne.n	8005940 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	2b01      	cmp	r3, #1
 800592e:	d107      	bne.n	8005940 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0201 	mvn.w	r2, #1
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f928 	bl	8005b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d10e      	bne.n	800596c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005958:	2b80      	cmp	r3, #128	; 0x80
 800595a:	d107      	bne.n	800596c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb16 	bl	8005f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800597a:	d10e      	bne.n	800599a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005986:	2b80      	cmp	r3, #128	; 0x80
 8005988:	d107      	bne.n	800599a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fb09 	bl	8005fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d10e      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b2:	2b40      	cmp	r3, #64	; 0x40
 80059b4:	d107      	bne.n	80059c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f90d 	bl	8005be0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	d10e      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d107      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f06f 0220 	mvn.w	r2, #32
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fac9 	bl	8005f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_ConfigClockSource+0x1c>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e0b4      	b.n	8005b82 <HAL_TIM_ConfigClockSource+0x186>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	4b56      	ldr	r3, [pc, #344]	; (8005b8c <HAL_TIM_ConfigClockSource+0x190>)
 8005a34:	4013      	ands	r3, r2
 8005a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a50:	d03e      	beq.n	8005ad0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a56:	f200 8087 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	f000 8086 	beq.w	8005b6e <HAL_TIM_ConfigClockSource+0x172>
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a66:	d87f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b70      	cmp	r3, #112	; 0x70
 8005a6a:	d01a      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d87b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b60      	cmp	r3, #96	; 0x60
 8005a72:	d050      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x11a>
 8005a74:	2b60      	cmp	r3, #96	; 0x60
 8005a76:	d877      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b50      	cmp	r3, #80	; 0x50
 8005a7a:	d03c      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a7c:	2b50      	cmp	r3, #80	; 0x50
 8005a7e:	d873      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d058      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x13a>
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d86f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d064      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d86b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d060      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d867      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d05c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d05a      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15a>
 8005aa0:	e062      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6899      	ldr	r1, [r3, #8]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	f000 f9b9 	bl	8005e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	609a      	str	r2, [r3, #8]
      break;
 8005ace:	e04f      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6899      	ldr	r1, [r3, #8]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f000 f9a2 	bl	8005e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af2:	609a      	str	r2, [r3, #8]
      break;
 8005af4:	e03c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 f916 	bl	8005d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2150      	movs	r1, #80	; 0x50
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 f96f 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 8005b14:	e02c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 f935 	bl	8005d92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2160      	movs	r1, #96	; 0x60
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f95f 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 8005b34:	e01c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f000 f8f6 	bl	8005d34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2140      	movs	r1, #64	; 0x40
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f94f 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 8005b54:	e00c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 f946 	bl	8005df2 <TIM_ITRx_SetConfig>
      break;
 8005b66:	e003      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	e000      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	fffeff88 	.word	0xfffeff88

08005b90 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a40      	ldr	r2, [pc, #256]	; (8005d08 <TIM_Base_SetConfig+0x114>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d013      	beq.n	8005c34 <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c12:	d00f      	beq.n	8005c34 <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a3d      	ldr	r2, [pc, #244]	; (8005d0c <TIM_Base_SetConfig+0x118>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a3c      	ldr	r2, [pc, #240]	; (8005d10 <TIM_Base_SetConfig+0x11c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d007      	beq.n	8005c34 <TIM_Base_SetConfig+0x40>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a3b      	ldr	r2, [pc, #236]	; (8005d14 <TIM_Base_SetConfig+0x120>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a3a      	ldr	r2, [pc, #232]	; (8005d18 <TIM_Base_SetConfig+0x124>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d108      	bne.n	8005c46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2f      	ldr	r2, [pc, #188]	; (8005d08 <TIM_Base_SetConfig+0x114>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d02b      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c54:	d027      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2c      	ldr	r2, [pc, #176]	; (8005d0c <TIM_Base_SetConfig+0x118>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d023      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a2b      	ldr	r2, [pc, #172]	; (8005d10 <TIM_Base_SetConfig+0x11c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01f      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <TIM_Base_SetConfig+0x120>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d01b      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <TIM_Base_SetConfig+0x124>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d017      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a28      	ldr	r2, [pc, #160]	; (8005d1c <TIM_Base_SetConfig+0x128>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d013      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <TIM_Base_SetConfig+0x12c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00f      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a26      	ldr	r2, [pc, #152]	; (8005d24 <TIM_Base_SetConfig+0x130>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d00b      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a25      	ldr	r2, [pc, #148]	; (8005d28 <TIM_Base_SetConfig+0x134>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d007      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <TIM_Base_SetConfig+0x138>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a23      	ldr	r2, [pc, #140]	; (8005d30 <TIM_Base_SetConfig+0x13c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d108      	bne.n	8005cb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <TIM_Base_SetConfig+0x114>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_Base_SetConfig+0xf8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a0c      	ldr	r2, [pc, #48]	; (8005d18 <TIM_Base_SetConfig+0x124>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d103      	bne.n	8005cf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	615a      	str	r2, [r3, #20]
}
 8005cfa:	bf00      	nop
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40000c00 	.word	0x40000c00
 8005d18:	40010400 	.word	0x40010400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40014400 	.word	0x40014400
 8005d24:	40014800 	.word	0x40014800
 8005d28:	40001800 	.word	0x40001800
 8005d2c:	40001c00 	.word	0x40001c00
 8005d30:	40002000 	.word	0x40002000

08005d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f023 0201 	bic.w	r2, r3, #1
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f023 030a 	bic.w	r3, r3, #10
 8005d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b087      	sub	sp, #28
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0210 	bic.w	r2, r3, #16
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	031b      	lsls	r3, r3, #12
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b085      	sub	sp, #20
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f043 0307 	orr.w	r3, r3, #7
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	609a      	str	r2, [r3, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	021a      	lsls	r2, r3, #8
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	609a      	str	r2, [r3, #8]
}
 8005e5c:	bf00      	nop
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e06d      	b.n	8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a30      	ldr	r2, [pc, #192]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2f      	ldr	r2, [pc, #188]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d108      	bne.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ecc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a20      	ldr	r2, [pc, #128]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d022      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef2:	d01d      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1d      	ldr	r2, [pc, #116]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d018      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1c      	ldr	r2, [pc, #112]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d013      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00e      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d009      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d004      	beq.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d10c      	bne.n	8005f4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3714      	adds	r7, #20
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	40010400 	.word	0x40010400
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40001800 	.word	0x40001800

08005f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e040      	b.n	8006054 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fc fa9c 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2224      	movs	r2, #36	; 0x24
 8005fec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0201 	bic.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fc18 	bl	8006834 <UART_SetConfig>
 8006004:	4603      	mov	r3, r0
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e022      	b.n	8006054 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fe70 	bl	8006cfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800602a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800603a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fef7 	bl	8006e40 <UART_CheckIdleState>
 8006052:	4603      	mov	r3, r0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e048      	b.n	8006100 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fc fa4e 	bl	8002520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2224      	movs	r2, #36	; 0x24
 8006088:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0201 	bic.w	r2, r2, #1
 8006098:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fbca 	bl	8006834 <UART_SetConfig>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e02a      	b.n	8006100 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fe22 	bl	8006cfc <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80060d6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0208 	orr.w	r2, r2, #8
 80060e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fea1 	bl	8006e40 <UART_CheckIdleState>
 80060fe:	4603      	mov	r3, r0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611c:	2b20      	cmp	r3, #32
 800611e:	d171      	bne.n	8006204 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <HAL_UART_Transmit+0x24>
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e06a      	b.n	8006206 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2221      	movs	r2, #33	; 0x21
 800613c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800613e:	f7fc fb2b 	bl	8002798 <HAL_GetTick>
 8006142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	88fa      	ldrh	r2, [r7, #6]
 8006148:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	88fa      	ldrh	r2, [r7, #6]
 8006150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615c:	d108      	bne.n	8006170 <HAL_UART_Transmit+0x68>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	e003      	b.n	8006178 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006178:	e02c      	b.n	80061d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2200      	movs	r2, #0
 8006182:	2180      	movs	r1, #128	; 0x80
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 fea8 	bl	8006eda <UART_WaitOnFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e038      	b.n	8006206 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	3302      	adds	r3, #2
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	e007      	b.n	80061c2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	3301      	adds	r3, #1
 80061c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1cc      	bne.n	800617a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2200      	movs	r2, #0
 80061e8:	2140      	movs	r1, #64	; 0x40
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fe75 	bl	8006eda <UART_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e005      	b.n	8006206 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3720      	adds	r7, #32
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b0ba      	sub	sp, #232	; 0xe8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006236:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800623a:	f640 030f 	movw	r3, #2063	; 0x80f
 800623e:	4013      	ands	r3, r2
 8006240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d115      	bne.n	8006278 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800624c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00f      	beq.n	8006278 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625c:	f003 0320 	and.w	r3, r3, #32
 8006260:	2b00      	cmp	r3, #0
 8006262:	d009      	beq.n	8006278 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 82ac 	beq.w	80067c6 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
      }
      return;
 8006276:	e2a6      	b.n	80067c6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8117 	beq.w	80064b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800628e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006292:	4b85      	ldr	r3, [pc, #532]	; (80064a8 <HAL_UART_IRQHandler+0x298>)
 8006294:	4013      	ands	r3, r2
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 810a 	beq.w	80064b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800629c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d011      	beq.n	80062cc <HAL_UART_IRQHandler+0xbc>
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2201      	movs	r2, #1
 80062ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c2:	f043 0201 	orr.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d011      	beq.n	80062fc <HAL_UART_IRQHandler+0xec>
 80062d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00b      	beq.n	80062fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2202      	movs	r2, #2
 80062ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062f2:	f043 0204 	orr.w	r2, r3, #4
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d011      	beq.n	800632c <HAL_UART_IRQHandler+0x11c>
 8006308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00b      	beq.n	800632c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2204      	movs	r2, #4
 800631a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006322:	f043 0202 	orr.w	r2, r3, #2
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800632c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d017      	beq.n	8006368 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	f003 0320 	and.w	r3, r3, #32
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006348:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00b      	beq.n	8006368 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2208      	movs	r2, #8
 8006356:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800635e:	f043 0208 	orr.w	r2, r3, #8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006370:	2b00      	cmp	r3, #0
 8006372:	d012      	beq.n	800639a <HAL_UART_IRQHandler+0x18a>
 8006374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00c      	beq.n	800639a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006390:	f043 0220 	orr.w	r2, r3, #32
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 8212 	beq.w	80067ca <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80063a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00d      	beq.n	80063ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80063b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d007      	beq.n	80063ce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d005      	beq.n	80063f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80063e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d04f      	beq.n	8006492 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fe37 	bl	8007066 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d141      	bne.n	800648a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3308      	adds	r3, #8
 800640c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800641c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3308      	adds	r3, #8
 800642e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006432:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800643e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800644a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1d9      	bne.n	8006406 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006456:	2b00      	cmp	r3, #0
 8006458:	d013      	beq.n	8006482 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800645e:	4a13      	ldr	r2, [pc, #76]	; (80064ac <HAL_UART_IRQHandler+0x29c>)
 8006460:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006466:	4618      	mov	r0, r3
 8006468:	f7fd f829 	bl	80034be <HAL_DMA_Abort_IT>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d017      	beq.n	80064a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800647c:	4610      	mov	r0, r2
 800647e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006480:	e00f      	b.n	80064a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f9b6 	bl	80067f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006488:	e00b      	b.n	80064a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9b2 	bl	80067f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006490:	e007      	b.n	80064a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9ae 	bl	80067f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80064a0:	e193      	b.n	80067ca <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a2:	bf00      	nop
    return;
 80064a4:	e191      	b.n	80067ca <HAL_UART_IRQHandler+0x5ba>
 80064a6:	bf00      	nop
 80064a8:	04000120 	.word	0x04000120
 80064ac:	0800712f 	.word	0x0800712f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	f040 814c 	bne.w	8006752 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8145 	beq.w	8006752 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 813e 	beq.w	8006752 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2210      	movs	r2, #16
 80064dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b40      	cmp	r3, #64	; 0x40
 80064ea:	f040 80b6 	bne.w	800665a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 8165 	beq.w	80067ce <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800650a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800650e:	429a      	cmp	r2, r3
 8006510:	f080 815d 	bcs.w	80067ce <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800651a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006528:	f000 8086 	beq.w	8006638 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	461a      	mov	r2, r3
 8006552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800655a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006562:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800656e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1da      	bne.n	800652c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	3308      	adds	r3, #8
 800657c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006588:	f023 0301 	bic.w	r3, r3, #1
 800658c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3308      	adds	r3, #8
 8006596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800659a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800659e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80065a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80065ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e1      	bne.n	8006576 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80065c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3308      	adds	r3, #8
 80065d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e3      	bne.n	80065b2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006608:	f023 0310 	bic.w	r3, r3, #16
 800660c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800661a:	65bb      	str	r3, [r7, #88]	; 0x58
 800661c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e4      	bne.n	80065f8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006632:	4618      	mov	r0, r3
 8006634:	f7fc fed3 	bl	80033de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800664a:	b29b      	uxth	r3, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	b29b      	uxth	r3, r3
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f8d8 	bl	8006808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006658:	e0b9      	b.n	80067ce <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006666:	b29b      	uxth	r3, r3
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80ab 	beq.w	80067d2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800667c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80a6 	beq.w	80067d2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800669a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066a8:	647b      	str	r3, [r7, #68]	; 0x44
 80066aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e4      	bne.n	8006686 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	623b      	str	r3, [r7, #32]
   return(result);
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3308      	adds	r3, #8
 80066dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066e0:	633a      	str	r2, [r7, #48]	; 0x30
 80066e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e3      	bne.n	80066bc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	60fb      	str	r3, [r7, #12]
   return(result);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f023 0310 	bic.w	r3, r3, #16
 800671c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	69b9      	ldr	r1, [r7, #24]
 8006730:	69fa      	ldr	r2, [r7, #28]
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	617b      	str	r3, [r7, #20]
   return(result);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e4      	bne.n	8006708 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f85c 	bl	8006808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006750:	e03f      	b.n	80067d2 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00e      	beq.n	800677c <HAL_UART_IRQHandler+0x56c>
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d008      	beq.n	800677c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006772:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f853 	bl	8006820 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800677a:	e02d      	b.n	80067d8 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00e      	beq.n	80067a6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006790:	2b00      	cmp	r3, #0
 8006792:	d008      	beq.n	80067a6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01c      	beq.n	80067d6 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
    }
    return;
 80067a4:	e017      	b.n	80067d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d012      	beq.n	80067d8 <HAL_UART_IRQHandler+0x5c8>
 80067b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00c      	beq.n	80067d8 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fccb 	bl	800715a <UART_EndTransmit_IT>
    return;
 80067c4:	e008      	b.n	80067d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80067c6:	bf00      	nop
 80067c8:	e006      	b.n	80067d8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80067ca:	bf00      	nop
 80067cc:	e004      	b.n	80067d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80067ce:	bf00      	nop
 80067d0:	e002      	b.n	80067d8 <HAL_UART_IRQHandler+0x5c8>
      return;
 80067d2:	bf00      	nop
 80067d4:	e000      	b.n	80067d8 <HAL_UART_IRQHandler+0x5c8>
    return;
 80067d6:	bf00      	nop
  }

}
 80067d8:	37e8      	adds	r7, #232	; 0xe8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop

080067e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	460b      	mov	r3, r1
 8006812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4ba6      	ldr	r3, [pc, #664]	; (8006af8 <UART_SetConfig+0x2c4>)
 8006860:	4013      	ands	r3, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	6979      	ldr	r1, [r7, #20]
 8006868:	430b      	orrs	r3, r1
 800686a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	430a      	orrs	r2, r1
 80068a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a94      	ldr	r2, [pc, #592]	; (8006afc <UART_SetConfig+0x2c8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d120      	bne.n	80068f2 <UART_SetConfig+0xbe>
 80068b0:	4b93      	ldr	r3, [pc, #588]	; (8006b00 <UART_SetConfig+0x2cc>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d816      	bhi.n	80068ec <UART_SetConfig+0xb8>
 80068be:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <UART_SetConfig+0x90>)
 80068c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c4:	080068d5 	.word	0x080068d5
 80068c8:	080068e1 	.word	0x080068e1
 80068cc:	080068db 	.word	0x080068db
 80068d0:	080068e7 	.word	0x080068e7
 80068d4:	2301      	movs	r3, #1
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e150      	b.n	8006b7c <UART_SetConfig+0x348>
 80068da:	2302      	movs	r3, #2
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e14d      	b.n	8006b7c <UART_SetConfig+0x348>
 80068e0:	2304      	movs	r3, #4
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e14a      	b.n	8006b7c <UART_SetConfig+0x348>
 80068e6:	2308      	movs	r3, #8
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e147      	b.n	8006b7c <UART_SetConfig+0x348>
 80068ec:	2310      	movs	r3, #16
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e144      	b.n	8006b7c <UART_SetConfig+0x348>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a83      	ldr	r2, [pc, #524]	; (8006b04 <UART_SetConfig+0x2d0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d132      	bne.n	8006962 <UART_SetConfig+0x12e>
 80068fc:	4b80      	ldr	r3, [pc, #512]	; (8006b00 <UART_SetConfig+0x2cc>)
 80068fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006902:	f003 030c 	and.w	r3, r3, #12
 8006906:	2b0c      	cmp	r3, #12
 8006908:	d828      	bhi.n	800695c <UART_SetConfig+0x128>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <UART_SetConfig+0xdc>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006945 	.word	0x08006945
 8006914:	0800695d 	.word	0x0800695d
 8006918:	0800695d 	.word	0x0800695d
 800691c:	0800695d 	.word	0x0800695d
 8006920:	08006951 	.word	0x08006951
 8006924:	0800695d 	.word	0x0800695d
 8006928:	0800695d 	.word	0x0800695d
 800692c:	0800695d 	.word	0x0800695d
 8006930:	0800694b 	.word	0x0800694b
 8006934:	0800695d 	.word	0x0800695d
 8006938:	0800695d 	.word	0x0800695d
 800693c:	0800695d 	.word	0x0800695d
 8006940:	08006957 	.word	0x08006957
 8006944:	2300      	movs	r3, #0
 8006946:	77fb      	strb	r3, [r7, #31]
 8006948:	e118      	b.n	8006b7c <UART_SetConfig+0x348>
 800694a:	2302      	movs	r3, #2
 800694c:	77fb      	strb	r3, [r7, #31]
 800694e:	e115      	b.n	8006b7c <UART_SetConfig+0x348>
 8006950:	2304      	movs	r3, #4
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e112      	b.n	8006b7c <UART_SetConfig+0x348>
 8006956:	2308      	movs	r3, #8
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e10f      	b.n	8006b7c <UART_SetConfig+0x348>
 800695c:	2310      	movs	r3, #16
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e10c      	b.n	8006b7c <UART_SetConfig+0x348>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a68      	ldr	r2, [pc, #416]	; (8006b08 <UART_SetConfig+0x2d4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d120      	bne.n	80069ae <UART_SetConfig+0x17a>
 800696c:	4b64      	ldr	r3, [pc, #400]	; (8006b00 <UART_SetConfig+0x2cc>)
 800696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006972:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006976:	2b30      	cmp	r3, #48	; 0x30
 8006978:	d013      	beq.n	80069a2 <UART_SetConfig+0x16e>
 800697a:	2b30      	cmp	r3, #48	; 0x30
 800697c:	d814      	bhi.n	80069a8 <UART_SetConfig+0x174>
 800697e:	2b20      	cmp	r3, #32
 8006980:	d009      	beq.n	8006996 <UART_SetConfig+0x162>
 8006982:	2b20      	cmp	r3, #32
 8006984:	d810      	bhi.n	80069a8 <UART_SetConfig+0x174>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <UART_SetConfig+0x15c>
 800698a:	2b10      	cmp	r3, #16
 800698c:	d006      	beq.n	800699c <UART_SetConfig+0x168>
 800698e:	e00b      	b.n	80069a8 <UART_SetConfig+0x174>
 8006990:	2300      	movs	r3, #0
 8006992:	77fb      	strb	r3, [r7, #31]
 8006994:	e0f2      	b.n	8006b7c <UART_SetConfig+0x348>
 8006996:	2302      	movs	r3, #2
 8006998:	77fb      	strb	r3, [r7, #31]
 800699a:	e0ef      	b.n	8006b7c <UART_SetConfig+0x348>
 800699c:	2304      	movs	r3, #4
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e0ec      	b.n	8006b7c <UART_SetConfig+0x348>
 80069a2:	2308      	movs	r3, #8
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e0e9      	b.n	8006b7c <UART_SetConfig+0x348>
 80069a8:	2310      	movs	r3, #16
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e0e6      	b.n	8006b7c <UART_SetConfig+0x348>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a56      	ldr	r2, [pc, #344]	; (8006b0c <UART_SetConfig+0x2d8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d120      	bne.n	80069fa <UART_SetConfig+0x1c6>
 80069b8:	4b51      	ldr	r3, [pc, #324]	; (8006b00 <UART_SetConfig+0x2cc>)
 80069ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069c2:	2bc0      	cmp	r3, #192	; 0xc0
 80069c4:	d013      	beq.n	80069ee <UART_SetConfig+0x1ba>
 80069c6:	2bc0      	cmp	r3, #192	; 0xc0
 80069c8:	d814      	bhi.n	80069f4 <UART_SetConfig+0x1c0>
 80069ca:	2b80      	cmp	r3, #128	; 0x80
 80069cc:	d009      	beq.n	80069e2 <UART_SetConfig+0x1ae>
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d810      	bhi.n	80069f4 <UART_SetConfig+0x1c0>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <UART_SetConfig+0x1a8>
 80069d6:	2b40      	cmp	r3, #64	; 0x40
 80069d8:	d006      	beq.n	80069e8 <UART_SetConfig+0x1b4>
 80069da:	e00b      	b.n	80069f4 <UART_SetConfig+0x1c0>
 80069dc:	2300      	movs	r3, #0
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e0cc      	b.n	8006b7c <UART_SetConfig+0x348>
 80069e2:	2302      	movs	r3, #2
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e0c9      	b.n	8006b7c <UART_SetConfig+0x348>
 80069e8:	2304      	movs	r3, #4
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e0c6      	b.n	8006b7c <UART_SetConfig+0x348>
 80069ee:	2308      	movs	r3, #8
 80069f0:	77fb      	strb	r3, [r7, #31]
 80069f2:	e0c3      	b.n	8006b7c <UART_SetConfig+0x348>
 80069f4:	2310      	movs	r3, #16
 80069f6:	77fb      	strb	r3, [r7, #31]
 80069f8:	e0c0      	b.n	8006b7c <UART_SetConfig+0x348>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a44      	ldr	r2, [pc, #272]	; (8006b10 <UART_SetConfig+0x2dc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d125      	bne.n	8006a50 <UART_SetConfig+0x21c>
 8006a04:	4b3e      	ldr	r3, [pc, #248]	; (8006b00 <UART_SetConfig+0x2cc>)
 8006a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a12:	d017      	beq.n	8006a44 <UART_SetConfig+0x210>
 8006a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a18:	d817      	bhi.n	8006a4a <UART_SetConfig+0x216>
 8006a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1e:	d00b      	beq.n	8006a38 <UART_SetConfig+0x204>
 8006a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a24:	d811      	bhi.n	8006a4a <UART_SetConfig+0x216>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <UART_SetConfig+0x1fe>
 8006a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2e:	d006      	beq.n	8006a3e <UART_SetConfig+0x20a>
 8006a30:	e00b      	b.n	8006a4a <UART_SetConfig+0x216>
 8006a32:	2300      	movs	r3, #0
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e0a1      	b.n	8006b7c <UART_SetConfig+0x348>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e09e      	b.n	8006b7c <UART_SetConfig+0x348>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	77fb      	strb	r3, [r7, #31]
 8006a42:	e09b      	b.n	8006b7c <UART_SetConfig+0x348>
 8006a44:	2308      	movs	r3, #8
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e098      	b.n	8006b7c <UART_SetConfig+0x348>
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e095      	b.n	8006b7c <UART_SetConfig+0x348>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <UART_SetConfig+0x2e0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d125      	bne.n	8006aa6 <UART_SetConfig+0x272>
 8006a5a:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <UART_SetConfig+0x2cc>)
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a68:	d017      	beq.n	8006a9a <UART_SetConfig+0x266>
 8006a6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a6e:	d817      	bhi.n	8006aa0 <UART_SetConfig+0x26c>
 8006a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a74:	d00b      	beq.n	8006a8e <UART_SetConfig+0x25a>
 8006a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a7a:	d811      	bhi.n	8006aa0 <UART_SetConfig+0x26c>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <UART_SetConfig+0x254>
 8006a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a84:	d006      	beq.n	8006a94 <UART_SetConfig+0x260>
 8006a86:	e00b      	b.n	8006aa0 <UART_SetConfig+0x26c>
 8006a88:	2301      	movs	r3, #1
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e076      	b.n	8006b7c <UART_SetConfig+0x348>
 8006a8e:	2302      	movs	r3, #2
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e073      	b.n	8006b7c <UART_SetConfig+0x348>
 8006a94:	2304      	movs	r3, #4
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e070      	b.n	8006b7c <UART_SetConfig+0x348>
 8006a9a:	2308      	movs	r3, #8
 8006a9c:	77fb      	strb	r3, [r7, #31]
 8006a9e:	e06d      	b.n	8006b7c <UART_SetConfig+0x348>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e06a      	b.n	8006b7c <UART_SetConfig+0x348>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1b      	ldr	r2, [pc, #108]	; (8006b18 <UART_SetConfig+0x2e4>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d138      	bne.n	8006b22 <UART_SetConfig+0x2ee>
 8006ab0:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <UART_SetConfig+0x2cc>)
 8006ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006aba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006abe:	d017      	beq.n	8006af0 <UART_SetConfig+0x2bc>
 8006ac0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ac4:	d82a      	bhi.n	8006b1c <UART_SetConfig+0x2e8>
 8006ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aca:	d00b      	beq.n	8006ae4 <UART_SetConfig+0x2b0>
 8006acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad0:	d824      	bhi.n	8006b1c <UART_SetConfig+0x2e8>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <UART_SetConfig+0x2aa>
 8006ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ada:	d006      	beq.n	8006aea <UART_SetConfig+0x2b6>
 8006adc:	e01e      	b.n	8006b1c <UART_SetConfig+0x2e8>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	77fb      	strb	r3, [r7, #31]
 8006ae2:	e04b      	b.n	8006b7c <UART_SetConfig+0x348>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	77fb      	strb	r3, [r7, #31]
 8006ae8:	e048      	b.n	8006b7c <UART_SetConfig+0x348>
 8006aea:	2304      	movs	r3, #4
 8006aec:	77fb      	strb	r3, [r7, #31]
 8006aee:	e045      	b.n	8006b7c <UART_SetConfig+0x348>
 8006af0:	2308      	movs	r3, #8
 8006af2:	77fb      	strb	r3, [r7, #31]
 8006af4:	e042      	b.n	8006b7c <UART_SetConfig+0x348>
 8006af6:	bf00      	nop
 8006af8:	efff69f3 	.word	0xefff69f3
 8006afc:	40011000 	.word	0x40011000
 8006b00:	40023800 	.word	0x40023800
 8006b04:	40004400 	.word	0x40004400
 8006b08:	40004800 	.word	0x40004800
 8006b0c:	40004c00 	.word	0x40004c00
 8006b10:	40005000 	.word	0x40005000
 8006b14:	40011400 	.word	0x40011400
 8006b18:	40007800 	.word	0x40007800
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e02c      	b.n	8006b7c <UART_SetConfig+0x348>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a72      	ldr	r2, [pc, #456]	; (8006cf0 <UART_SetConfig+0x4bc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d125      	bne.n	8006b78 <UART_SetConfig+0x344>
 8006b2c:	4b71      	ldr	r3, [pc, #452]	; (8006cf4 <UART_SetConfig+0x4c0>)
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006b36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b3a:	d017      	beq.n	8006b6c <UART_SetConfig+0x338>
 8006b3c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b40:	d817      	bhi.n	8006b72 <UART_SetConfig+0x33e>
 8006b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b46:	d00b      	beq.n	8006b60 <UART_SetConfig+0x32c>
 8006b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4c:	d811      	bhi.n	8006b72 <UART_SetConfig+0x33e>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <UART_SetConfig+0x326>
 8006b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b56:	d006      	beq.n	8006b66 <UART_SetConfig+0x332>
 8006b58:	e00b      	b.n	8006b72 <UART_SetConfig+0x33e>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	77fb      	strb	r3, [r7, #31]
 8006b5e:	e00d      	b.n	8006b7c <UART_SetConfig+0x348>
 8006b60:	2302      	movs	r3, #2
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e00a      	b.n	8006b7c <UART_SetConfig+0x348>
 8006b66:	2304      	movs	r3, #4
 8006b68:	77fb      	strb	r3, [r7, #31]
 8006b6a:	e007      	b.n	8006b7c <UART_SetConfig+0x348>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e004      	b.n	8006b7c <UART_SetConfig+0x348>
 8006b72:	2310      	movs	r3, #16
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e001      	b.n	8006b7c <UART_SetConfig+0x348>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b84:	d15b      	bne.n	8006c3e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006b86:	7ffb      	ldrb	r3, [r7, #31]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d828      	bhi.n	8006bde <UART_SetConfig+0x3aa>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x360>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bc1 	.word	0x08006bc1
 8006b9c:	08006bc9 	.word	0x08006bc9
 8006ba0:	08006bdf 	.word	0x08006bdf
 8006ba4:	08006bcf 	.word	0x08006bcf
 8006ba8:	08006bdf 	.word	0x08006bdf
 8006bac:	08006bdf 	.word	0x08006bdf
 8006bb0:	08006bdf 	.word	0x08006bdf
 8006bb4:	08006bd7 	.word	0x08006bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb8:	f7fe f8e0 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8006bbc:	61b8      	str	r0, [r7, #24]
        break;
 8006bbe:	e013      	b.n	8006be8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc0:	f7fe f8f0 	bl	8004da4 <HAL_RCC_GetPCLK2Freq>
 8006bc4:	61b8      	str	r0, [r7, #24]
        break;
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc8:	4b4b      	ldr	r3, [pc, #300]	; (8006cf8 <UART_SetConfig+0x4c4>)
 8006bca:	61bb      	str	r3, [r7, #24]
        break;
 8006bcc:	e00c      	b.n	8006be8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bce:	f7fe f803 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8006bd2:	61b8      	str	r0, [r7, #24]
        break;
 8006bd4:	e008      	b.n	8006be8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bda:	61bb      	str	r3, [r7, #24]
        break;
 8006bdc:	e004      	b.n	8006be8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	77bb      	strb	r3, [r7, #30]
        break;
 8006be6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d074      	beq.n	8006cd8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	005a      	lsls	r2, r3, #1
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	085b      	lsrs	r3, r3, #1
 8006bf8:	441a      	add	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	2b0f      	cmp	r3, #15
 8006c08:	d916      	bls.n	8006c38 <UART_SetConfig+0x404>
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c10:	d212      	bcs.n	8006c38 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	f023 030f 	bic.w	r3, r3, #15
 8006c1a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	89fb      	ldrh	r3, [r7, #14]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	89fa      	ldrh	r2, [r7, #14]
 8006c34:	60da      	str	r2, [r3, #12]
 8006c36:	e04f      	b.n	8006cd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	77bb      	strb	r3, [r7, #30]
 8006c3c:	e04c      	b.n	8006cd8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c3e:	7ffb      	ldrb	r3, [r7, #31]
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d828      	bhi.n	8006c96 <UART_SetConfig+0x462>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <UART_SetConfig+0x418>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	08006c97 	.word	0x08006c97
 8006c5c:	08006c87 	.word	0x08006c87
 8006c60:	08006c97 	.word	0x08006c97
 8006c64:	08006c97 	.word	0x08006c97
 8006c68:	08006c97 	.word	0x08006c97
 8006c6c:	08006c8f 	.word	0x08006c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c70:	f7fe f884 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8006c74:	61b8      	str	r0, [r7, #24]
        break;
 8006c76:	e013      	b.n	8006ca0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c78:	f7fe f894 	bl	8004da4 <HAL_RCC_GetPCLK2Freq>
 8006c7c:	61b8      	str	r0, [r7, #24]
        break;
 8006c7e:	e00f      	b.n	8006ca0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c80:	4b1d      	ldr	r3, [pc, #116]	; (8006cf8 <UART_SetConfig+0x4c4>)
 8006c82:	61bb      	str	r3, [r7, #24]
        break;
 8006c84:	e00c      	b.n	8006ca0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c86:	f7fd ffa7 	bl	8004bd8 <HAL_RCC_GetSysClockFreq>
 8006c8a:	61b8      	str	r0, [r7, #24]
        break;
 8006c8c:	e008      	b.n	8006ca0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c92:	61bb      	str	r3, [r7, #24]
        break;
 8006c94:	e004      	b.n	8006ca0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c9e:	bf00      	nop
    }

    if (pclk != 0U)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d018      	beq.n	8006cd8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	085a      	lsrs	r2, r3, #1
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	441a      	add	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	2b0f      	cmp	r3, #15
 8006cbe:	d909      	bls.n	8006cd4 <UART_SetConfig+0x4a0>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc6:	d205      	bcs.n	8006cd4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60da      	str	r2, [r3, #12]
 8006cd2:	e001      	b.n	8006cd8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ce4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3720      	adds	r7, #32
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	40007c00 	.word	0x40007c00
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	00f42400 	.word	0x00f42400

08006cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01a      	beq.n	8006e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dfa:	d10a      	bne.n	8006e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	605a      	str	r2, [r3, #4]
  }
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e50:	f7fb fca2 	bl	8002798 <HAL_GetTick>
 8006e54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0308 	and.w	r3, r3, #8
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d10e      	bne.n	8006e82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f831 	bl	8006eda <UART_WaitOnFlagUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e027      	b.n	8006ed2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d10e      	bne.n	8006eae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f81b 	bl	8006eda <UART_WaitOnFlagUntilTimeout>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d001      	beq.n	8006eae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e011      	b.n	8006ed2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b09c      	sub	sp, #112	; 0x70
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	60f8      	str	r0, [r7, #12]
 8006ee2:	60b9      	str	r1, [r7, #8]
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eea:	e0a7      	b.n	800703c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef2:	f000 80a3 	beq.w	800703c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef6:	f7fb fc4f 	bl	8002798 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d302      	bcc.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x32>
 8006f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d13f      	bne.n	8006f8c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f20:	667b      	str	r3, [r7, #100]	; 0x64
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e6      	bne.n	8006f0c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	f023 0301 	bic.w	r3, r3, #1
 8006f54:	663b      	str	r3, [r7, #96]	; 0x60
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006f60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e5      	bne.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e068      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d050      	beq.n	800703c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fa8:	d148      	bne.n	800703c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e6      	bne.n	8006fb4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	3308      	adds	r3, #8
 8006fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007006:	623a      	str	r2, [r7, #32]
 8007008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	69f9      	ldr	r1, [r7, #28]
 800700c:	6a3a      	ldr	r2, [r7, #32]
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	61bb      	str	r3, [r7, #24]
   return(result);
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e5      	bne.n	8006fe6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e010      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69da      	ldr	r2, [r3, #28]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	4013      	ands	r3, r2
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	429a      	cmp	r2, r3
 800704a:	bf0c      	ite	eq
 800704c:	2301      	moveq	r3, #1
 800704e:	2300      	movne	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	429a      	cmp	r2, r3
 8007058:	f43f af48 	beq.w	8006eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3770      	adds	r7, #112	; 0x70
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007066:	b480      	push	{r7}
 8007068:	b095      	sub	sp, #84	; 0x54
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	e853 3f00 	ldrex	r3, [r3]
 800707a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	461a      	mov	r2, r3
 800708a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800708c:	643b      	str	r3, [r7, #64]	; 0x40
 800708e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007094:	e841 2300 	strex	r3, r2, [r1]
 8007098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e6      	bne.n	800706e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3308      	adds	r3, #8
 80070a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	e853 3f00 	ldrex	r3, [r3]
 80070ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f023 0301 	bic.w	r3, r3, #1
 80070b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80070c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070c8:	e841 2300 	strex	r3, r2, [r1]
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d1e5      	bne.n	80070a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d118      	bne.n	800710e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f023 0310 	bic.w	r3, r3, #16
 80070f0:	647b      	str	r3, [r7, #68]	; 0x44
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	613b      	str	r3, [r7, #16]
   return(result);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e6      	bne.n	80070dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007122:	bf00      	nop
 8007124:	3754      	adds	r7, #84	; 0x54
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fb51 	bl	80067f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b088      	sub	sp, #32
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6979      	ldr	r1, [r7, #20]
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	613b      	str	r3, [r7, #16]
   return(result);
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e6      	bne.n	8007162 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fb1d 	bl	80067e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a6:	bf00      	nop
 80071a8:	3720      	adds	r7, #32
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <DriverInit>:
 *	@param	**driver - main hardware driver object
 *	@param	*uart - user defined UART object
 *	@param	*tim - user defined timer object
 */
void DriverInit (void **driver, __UART_TYPE_DEF *uart, __TIMER_TYPE_DEF *tim)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b086      	sub	sp, #24
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	60b9      	str	r1, [r7, #8]
 80071b8:	607a      	str	r2, [r7, #4]
	#if (DRV_USE_FREERTOS)
		*driver = pvPortMalloc(sizeof(Driver_t));
	#else
		*driver = malloc(sizeof(Driver_t));
 80071ba:	f640 0018 	movw	r0, #2072	; 0x818
 80071be:	f002 fac5 	bl	800974c <malloc>
 80071c2:	4603      	mov	r3, r0
 80071c4:	461a      	mov	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	601a      	str	r2, [r3, #0]
	#endif

	Driver_t *drv = (Driver_t*)(*driver);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	617b      	str	r3, [r7, #20]

	#if (DRV_HAL_TIMER || DRV_LL_TIMER)
		/* Timer */
		drv->tim = tim;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]
		drv->timCount = 0;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2200      	movs	r2, #0
 80071da:	605a      	str	r2, [r3, #4]
		xSemaphoreGive(drv->xSemaphoreTxBusy);

	#endif

    /* UART */
	drv->uart = uart;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	609a      	str	r2, [r3, #8]

		UART_DrvInit(drv);

	#endif

	ClearTxBuff(drv);
 80071e2:	6978      	ldr	r0, [r7, #20]
 80071e4:	f000 f8d0 	bl	8007388 <ClearTxBuff>
	ClearRxBuff(drv);
 80071e8:	6978      	ldr	r0, [r7, #20]
 80071ea:	f000 f99e 	bl	800752a <ClearRxBuff>

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
		/* UART Interrupts executable code */
		DISABLE_UART_CR1_TCIE(drv->uart);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007200:	601a      	str	r2, [r3, #0]
		ENABLE_UART_CR1_RXNEIE(drv->uart);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f042 0220 	orr.w	r2, r2, #32
 8007214:	601a      	str	r2, [r3, #0]
		DISABLE_UART_CR1_IDLEIE(drv->uart);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0210 	bic.w	r2, r2, #16
 8007228:	601a      	str	r2, [r3, #0]
		LL_DMA_EnableStream(DMA_UART_RX, DMA_UART_RX_STREAM);

	#endif

	#if (DRV_HAL_TIMER || DRV_LL_TIMER)
		START_TIMER(drv->tim);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fa4c 	bl	80056cc <HAL_TIM_Base_Start_IT>
	#endif
}
 8007234:	bf00      	nop
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <GetTimeMs>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Current time
 */
ui32 GetTimeMs (void *driver)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60fb      	str	r3, [r7, #12]

	#if (DRV_USE_FREERTOS)
		drv->timCount = xTaskGetTickCount();
	#endif

	return drv->timCount;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685b      	ldr	r3, [r3, #4]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3714      	adds	r7, #20
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <TimerDRV_CallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void TimerDRV_CallBack (void *driver)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	605a      	str	r2, [r3, #4]

	#if (DRV_LL_TIMER)
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 800726e:	bf00      	nop
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx overflow status (1 - ERROR | 0 - OK)
 */
ui8 UartTransmitData (void *driver, ui8 *data, ui16 size)
{
 800727a:	b480      	push	{r7}
 800727c:	b087      	sub	sp, #28
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	4613      	mov	r3, r2
 8007286:	80fb      	strh	r3, [r7, #6]
	Driver_t *drv = (Driver_t*)driver;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	613b      	str	r3, [r7, #16]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		/* Free space check */
		if (TX_FIFO_TOTAL_SIZE - ((drv->TxHead - drv->TxTail) & (TX_FIFO_TOTAL_SIZE - 1)) < size)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	b29b      	uxth	r3, r3
 800729c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072a0:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	da01      	bge.n	80072ae <UartTransmitData+0x34>
		{
			/* - - - - User TxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return 1;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e02e      	b.n	800730c <UartTransmitData+0x92>
		}

		ui16 count = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	82fb      	strh	r3, [r7, #22]
		while (count < size)
 80072b2:	e01c      	b.n	80072ee <UartTransmitData+0x74>
		{
			drv->TxBuffer[drv->TxHead++] = data[count++];
 80072b4:	8afb      	ldrh	r3, [r7, #22]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	82fa      	strh	r2, [r7, #22]
 80072ba:	461a      	mov	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	441a      	add	r2, r3
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80072c6:	1c59      	adds	r1, r3, #1
 80072c8:	b288      	uxth	r0, r1
 80072ca:	6939      	ldr	r1, [r7, #16]
 80072cc:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 80072d0:	4619      	mov	r1, r3
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	440b      	add	r3, r1
 80072d8:	731a      	strb	r2, [r3, #12]

			if (drv->TxHead >= TX_FIFO_TOTAL_SIZE)
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80072e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e4:	d303      	bcc.n	80072ee <UartTransmitData+0x74>
				drv->TxHead = 0;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		while (count < size)
 80072ee:	8afa      	ldrh	r2, [r7, #22]
 80072f0:	88fb      	ldrh	r3, [r7, #6]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d3de      	bcc.n	80072b4 <UartTransmitData+0x3a>
		}

		ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007308:	601a      	str	r2, [r3, #0]

		return 0;
 800730a:	2300      	movs	r3, #0
		LL_DMA_EnableStream(DMA_UART_TX, DMA_UART_TX_STREAM);

		return 0;

	#endif
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <UART_DRV_TxCallBack>:
	/**	@brief	UART transfer completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void UART_DRV_TxCallBack (void *driver)
	{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
		Driver_t *drv = (Driver_t*)driver;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	60fb      	str	r3, [r7, #12]

		#endif

		#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)

			WRITE_UART_BYTE(drv->uart, drv->TxBuffer[drv->TxTail++] & (ui32)0xFF);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	b291      	uxth	r1, r2
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8007334:	461a      	mov	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	7b1a      	ldrb	r2, [r3, #12]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	629a      	str	r2, [r3, #40]	; 0x28

			if (drv->TxTail == TX_FIFO_TOTAL_SIZE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800734a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734e:	d103      	bne.n	8007358 <UART_DRV_TxCallBack+0x40>
				drv->TxTail = 0;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

			if (drv->TxTail == drv->TxHead)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8007364:	429a      	cmp	r2, r3
 8007366:	d109      	bne.n	800737c <UART_DRV_TxCallBack+0x64>
			{
				DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800737a:	601a      	str	r2, [r3, #0]

				/*  - - - - - - - - - - - - - - - - - - - - - - - */
			}

		#endif
	}
 800737c:	bf00      	nop
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void ClearTxBuff (void *driver)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART || DRV_LL_DMA_UART)

		Driver_t *drv = (Driver_t*)driver;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	60fb      	str	r3, [r7, #12]

		memset(drv->TxBuffer, 0, TX_FIFO_TOTAL_SIZE);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	330c      	adds	r3, #12
 8007398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800739c:	2100      	movs	r1, #0
 800739e:	4618      	mov	r0, r3
 80073a0:	f002 f9ea 	bl	8009778 <memset>
		drv->TxTail = 0;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
		drv->TxHead = 0;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e

	#else
		unused_(driver);
	#endif
}
 80073b4:	bf00      	nop
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <GetAvailableBytes>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 GetAvailableBytes (void *driver)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	613b      	str	r3, [r7, #16]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->RxOverflowFlag)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <GetAvailableBytes+0x1c>
			return 0xFFFF;
 80073d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073d6:	e01b      	b.n	8007410 <GetAvailableBytes+0x54>

		ui16 rxHead = drv->RxHead;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80073de:	82fb      	strh	r3, [r7, #22]
		ui16 rxTail = drv->RxTail;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 80073e6:	81fb      	strh	r3, [r7, #14]

		ui16 count = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	82bb      	strh	r3, [r7, #20]
		while (rxHead != rxTail)
 80073ec:	e00b      	b.n	8007406 <GetAvailableBytes+0x4a>
		{
			if (!rxHead)
 80073ee:	8afb      	ldrh	r3, [r7, #22]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <GetAvailableBytes+0x3e>
				rxHead = RX_FIFO_TOTAL_SIZE;
 80073f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073f8:	82fb      	strh	r3, [r7, #22]

			rxHead--;
 80073fa:	8afb      	ldrh	r3, [r7, #22]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	82fb      	strh	r3, [r7, #22]
			count++;
 8007400:	8abb      	ldrh	r3, [r7, #20]
 8007402:	3301      	adds	r3, #1
 8007404:	82bb      	strh	r3, [r7, #20]
		while (rxHead != rxTail)
 8007406:	8afa      	ldrh	r2, [r7, #22]
 8007408:	89fb      	ldrh	r3, [r7, #14]
 800740a:	429a      	cmp	r2, r3
 800740c:	d1ef      	bne.n	80073ee <GetAvailableBytes+0x32>
		}

		return count;
 800740e:	8abb      	ldrh	r3, [r7, #20]
		/* UART DMA executable code */
		drv->RxHead = RX_FIFO_TOTAL_SIZE - GET_DMA_RX_COUNTER(DMA_UART_RX);
		return (drv->RxHead - drv->RxTail) & (RX_FIFO_TOTAL_SIZE - 1);

	#endif
}
 8007410:	4618      	mov	r0, r3
 8007412:	371c      	adds	r7, #28
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Receipt status (0 - receiving in progress | 1 - receive completed)
 */
ui8 UartReceiveByte (void *driver, ui8 *data)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
	Driver_t *drv = (Driver_t*)driver;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->RxTail == drv->RxHead)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 2810 	ldrh.w	r2, [r3, #2064]	; 0x810
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 8007436:	429a      	cmp	r2, r3
 8007438:	d101      	bne.n	800743e <UartReceiveByte+0x22>
		{
			/*  - - - - User Receive-Complete Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return 1;
 800743a:	2301      	movs	r3, #1
 800743c:	e022      	b.n	8007484 <UartReceiveByte+0x68>
		}

		*data = drv->RxBuffer[drv->RxTail++];
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 8007444:	1c5a      	adds	r2, r3, #1
 8007446:	b291      	uxth	r1, r2
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f8a2 1810 	strh.w	r1, [r2, #2064]	; 0x810
 800744e:	461a      	mov	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	701a      	strb	r2, [r3, #0]

		if (drv->RxTail >= RX_FIFO_TOTAL_SIZE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 8007462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007466:	d303      	bcc.n	8007470 <UartReceiveByte+0x54>
		   drv->RxTail = 0;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810

		if (drv->RxOverflowFlag == 1)  // Reset the overflow flag
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 8007476:	2b01      	cmp	r3, #1
 8007478:	d103      	bne.n	8007482 <UartReceiveByte+0x66>
			drv->RxOverflowFlag = 0;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

		return 0;  // Rx ring buffer isn't empty
 8007482:	2300      	movs	r3, #0
		}

		return 0;

	#endif
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <UART_DRV_RxCallBack>:
	/**	@brief	UART receive completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void UART_DRV_RxCallBack (void *driver)
	{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
		Driver_t *drv = (Driver_t*)driver;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60fb      	str	r3, [r7, #12]

		if ((drv->RxHead - drv->RxTail == RX_FIFO_TOTAL_SIZE - 1) ||
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80074a2:	461a      	mov	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d009      	beq.n	80074c8 <UART_DRV_RxCallBack+0x38>
			(drv->RxTail - drv->RxHead == 1))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 80074ba:	461a      	mov	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80074c2:	1ad3      	subs	r3, r2, r3
		if ((drv->RxHead - drv->RxTail == RX_FIFO_TOTAL_SIZE - 1) ||
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d10d      	bne.n	80074e4 <UART_DRV_RxCallBack+0x54>
		{
			/* - - - - User RxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */

			(void)READ_UART_BYTE(drv->uart);  // Prevent hardware overflow error (USART_ISR_ORE)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24

			if (drv->RxOverflowFlag == 0)  // Set the overflow flag
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d121      	bne.n	800751e <UART_DRV_RxCallBack+0x8e>
				drv->RxOverflowFlag = 1;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

			return;
 80074e2:	e01c      	b.n	800751e <UART_DRV_RxCallBack+0x8e>
		}

		drv->RxBuffer[drv->RxHead++] = READ_UART_BYTE(drv->uart);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	b291      	uxth	r1, r2
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	f8a2 1812 	strh.w	r1, [r2, #2066]	; 0x812
 80074fc:	4619      	mov	r1, r3
 80074fe:	b2c2      	uxtb	r2, r0
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	440b      	add	r3, r1
 8007504:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

		if (drv->RxHead >= RX_FIFO_TOTAL_SIZE)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 800750e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007512:	d305      	bcc.n	8007520 <UART_DRV_RxCallBack+0x90>
			drv->RxHead = 0;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
 800751c:	e000      	b.n	8007520 <UART_DRV_RxCallBack+0x90>
			return;
 800751e:	bf00      	nop
	}
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void ClearRxBuff (void *driver)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60fb      	str	r3, [r7, #12]

	memset(drv->RxBuffer, 0, RX_FIFO_TOTAL_SIZE);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800753c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007540:	2100      	movs	r1, #0
 8007542:	4618      	mov	r0, r3
 8007544:	f002 f918 	bl	8009778 <memset>
	drv->RxTail = 0;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810
	drv->RxHead = 0;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
	drv->RxOverflowFlag = 0;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
}
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <UartTransmitDebugData>:
 *
 *	@param	*data - debug data
 *	@param	length - size of debug data
 */
void UartTransmitDebugData (char *data, ui16 length)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
	#if (DRV_USE_UART_DEBUG)
		#if (DRV_HAL_NVIC_UART || DRV_HAL_DMA_UART)

			/* UART HAL executable code */
			HAL_UART_Transmit(DEBUG_SERIAL_PORT, (ui8*)data, length, 100);
 8007574:	887a      	ldrh	r2, [r7, #2]
 8007576:	2364      	movs	r3, #100	; 0x64
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	4803      	ldr	r0, [pc, #12]	; (8007588 <UartTransmitDebugData+0x20>)
 800757c:	f7fe fdc4 	bl	8006108 <HAL_UART_Transmit>
				LL_USART_TransmitData8(DEBUG_SERIAL_PORT, data[count++]);
			}

		#endif
	#endif
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20000a98 	.word	0x20000a98

0800758c <SBGC32_Init>:
 * 	@param	*generalSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
TxRxStatus_t SBGC32_Init (GeneralSBGC_t *generalSBGC)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af04      	add	r7, sp, #16
 8007592:	6078      	str	r0, [r7, #4]
		return SBGC32_ManualInit(generalSBGC, PortTransmitData, PortReceiveByte, GetAvailableBytes,
								 PrintDebugData, GetTimeMs, sprintf, SBGC_PROTOCOL_V2);

	#elif (SBGC_USE_STM32_DRIVER)

		DriverInit(&generalSBGC->Drv, SBGC_SERIAL_PORT, SBGC_REFERENCE_TIMER);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a0c      	ldr	r2, [pc, #48]	; (80075c8 <SBGC32_Init+0x3c>)
 8007598:	490c      	ldr	r1, [pc, #48]	; (80075cc <SBGC32_Init+0x40>)
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff fe07 	bl	80071ae <DriverInit>

		return SBGC32_ManualInit(generalSBGC, UartTransmitData, UartReceiveByte, GetAvailableBytes,
 80075a0:	2324      	movs	r3, #36	; 0x24
 80075a2:	9303      	str	r3, [sp, #12]
 80075a4:	4b0a      	ldr	r3, [pc, #40]	; (80075d0 <SBGC32_Init+0x44>)
 80075a6:	9302      	str	r3, [sp, #8]
 80075a8:	4b0a      	ldr	r3, [pc, #40]	; (80075d4 <SBGC32_Init+0x48>)
 80075aa:	9301      	str	r3, [sp, #4]
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <SBGC32_Init+0x4c>)
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <SBGC32_Init+0x50>)
 80075b2:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <SBGC32_Init+0x54>)
 80075b4:	490b      	ldr	r1, [pc, #44]	; (80075e4 <SBGC32_Init+0x58>)
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f001 fa18 	bl	80089ec <SBGC32_ManualInit>
 80075bc:	4603      	mov	r3, r0
								 UartTransmitDebugData, GetTimeMs, sprintf, SBGC_PROTOCOL_V2);

	#else
		#error "When using a custom driver, use the SBGC32_ManualInit() function!"
	#endif
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	200009c4 	.word	0x200009c4
 80075cc:	20000a10 	.word	0x20000a10
 80075d0:	0800a605 	.word	0x0800a605
 80075d4:	0800723d 	.word	0x0800723d
 80075d8:	08007569 	.word	0x08007569
 80075dc:	080073bd 	.word	0x080073bd
 80075e0:	0800741d 	.word	0x0800741d
 80075e4:	0800727b 	.word	0x0800727b

080075e8 <EditAdjVarValue>:
 *
 *	@param 	*adjVarGeneral - general adjustable variables structure
 *	@param	value - new value of adjustable variable
 */
void EditAdjVarValue (AdjVarGeneral_t *adjVarGeneral, i32 value)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
	/* Values border checking */
	value = constrain_(value, adjVarGeneral->minValue, adjVarGeneral->maxValue);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80075f8:	461a      	mov	r2, r3
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	4293      	cmp	r3, r2
 80075fe:	da03      	bge.n	8007608 <EditAdjVarValue+0x20>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007606:	e007      	b.n	8007618 <EditAdjVarValue+0x30>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800760e:	461a      	mov	r2, r3
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	4293      	cmp	r3, r2
 8007614:	bfa8      	it	ge
 8007616:	4613      	movge	r3, r2
 8007618:	603b      	str	r3, [r7, #0]

	if (adjVarGeneral->value == value)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	429a      	cmp	r2, r3
 8007622:	d00b      	beq.n	800763c <EditAdjVarValue+0x54>
		return;

	adjVarGeneral->value = value;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	629a      	str	r2, [r3, #40]	; 0x28
	adjVarGeneral->changeFlag = CHANGED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	adjVarGeneral->saveFlag = NOT_SAVED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800763a:	e000      	b.n	800763e <EditAdjVarValue+0x56>
		return;
 800763c:	bf00      	nop
}
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <SBGC32_SetAdjVarValues>:
 *	@param	adjVarQuan - number of adjustable variables
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_SetAdjVarValues (GeneralSBGC_t *generalSBGC, AdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b0c6      	sub	sp, #280	; 0x118
 800764c:	af00      	add	r7, sp, #0
 800764e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007652:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007656:	6018      	str	r0, [r3, #0]
 8007658:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800765c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007660:	6019      	str	r1, [r3, #0]
 8007662:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007666:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800766a:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_SET_ADJ_VARS_VAL);
 800766c:	f107 0310 	add.w	r3, r7, #16
 8007670:	211f      	movs	r1, #31
 8007672:	4618      	mov	r0, r3
 8007674:	f001 f9a7 	bl	80089c6 <InitCmdWrite>

	ui8 numParams = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	WriteByte(&cmd, numParams);  // temporary offset
 800767e:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8007682:	f107 0310 	add.w	r3, r7, #16
 8007686:	4611      	mov	r1, r2
 8007688:	4618      	mov	r0, r3
 800768a:	f001 f8d7 	bl	800883c <WriteByte>

	for (ui8 i = 0; i < adjVarQuan; i++)
 800768e:	2300      	movs	r3, #0
 8007690:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007694:	e063      	b.n	800775e <SBGC32_SetAdjVarValues+0x116>
		if (adjVarGeneral[i].changeFlag == CHANGED)
 8007696:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800769a:	4613      	mov	r3, r2
 800769c:	005b      	lsls	r3, r3, #1
 800769e:	4413      	add	r3, r2
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	461a      	mov	r2, r3
 80076a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80076a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4413      	add	r3, r2
 80076b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d14d      	bne.n	8007754 <SBGC32_SetAdjVarValues+0x10c>
		{
			WriteByte(&cmd, adjVarGeneral[i].ID);
 80076b8:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80076bc:	4613      	mov	r3, r2
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	4413      	add	r3, r2
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	461a      	mov	r2, r3
 80076c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80076ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4413      	add	r3, r2
 80076d2:	781a      	ldrb	r2, [r3, #0]
 80076d4:	f107 0310 	add.w	r3, r7, #16
 80076d8:	4611      	mov	r1, r2
 80076da:	4618      	mov	r0, r3
 80076dc:	f001 f8ae 	bl	800883c <WriteByte>
			WriteLong(&cmd, adjVarGeneral[i].value);
 80076e0:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80076e4:	4613      	mov	r3, r2
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	4413      	add	r3, r2
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	461a      	mov	r2, r3
 80076ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80076f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fc:	461a      	mov	r2, r3
 80076fe:	f107 0310 	add.w	r3, r7, #16
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f001 f909 	bl	800891c <WriteLong>

			adjVarGeneral[i].changeFlag = NOT_CHANGED;
 800770a:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800770e:	4613      	mov	r3, r2
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	4413      	add	r3, r2
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	461a      	mov	r2, r3
 8007718:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800771c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4413      	add	r3, r2
 8007724:	2200      	movs	r2, #0
 8007726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			adjVarGeneral[i].saveFlag = NOT_SAVED;
 800772a:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800772e:	4613      	mov	r3, r2
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	4413      	add	r3, r2
 8007734:	011b      	lsls	r3, r3, #4
 8007736:	461a      	mov	r2, r3
 8007738:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800773c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4413      	add	r3, r2
 8007744:	2201      	movs	r2, #1
 8007746:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			numParams++;
 800774a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800774e:	3301      	adds	r3, #1
 8007750:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (ui8 i = 0; i < adjVarQuan; i++)
 8007754:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007758:	3301      	adds	r3, #1
 800775a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800775e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007762:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007766:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d392      	bcc.n	8007696 <SBGC32_SetAdjVarValues+0x4e>
		}

	if (numParams == 0)  // No variables changed
 8007770:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007774:	2b00      	cmp	r3, #0
 8007776:	d107      	bne.n	8007788 <SBGC32_SetAdjVarValues+0x140>
		return generalSBGC->_parserCurrentStatus;
 8007778:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800777c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8007786:	e024      	b.n	80077d2 <SBGC32_SetAdjVarValues+0x18a>

	cmd.payload[0] = numParams;  // re-writing numParams
 8007788:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800778c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007790:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8007794:	705a      	strb	r2, [r3, #1]
	SBGC32_TX(generalSBGC, &cmd);
 8007796:	f107 0210 	add.w	r2, r7, #16
 800779a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800779e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80077a2:	4611      	mov	r1, r2
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	f000 fc0a 	bl	8007fbe <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 80077aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b2:	781a      	ldrb	r2, [r3, #0]
 80077b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80077bc:	4611      	mov	r1, r2
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	f001 fb02 	bl	8008dc8 <SBGC32_CheckConfirmation>
	return generalSBGC->_parserCurrentStatus;
 80077c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <SBGC32_GetAdjVarValues>:
 *	@param	adjVarQuan - number of adjustable variables
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_GetAdjVarValues (GeneralSBGC_t *generalSBGC, AdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b0c6      	sub	sp, #280	; 0x118
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80077ea:	6018      	str	r0, [r3, #0]
 80077ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80077f4:	6019      	str	r1, [r3, #0]
 80077f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077fa:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80077fe:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_GET_ADJ_VARS_VAL);
 8007800:	f107 0310 	add.w	r3, r7, #16
 8007804:	2140      	movs	r1, #64	; 0x40
 8007806:	4618      	mov	r0, r3
 8007808:	f001 f8dd 	bl	80089c6 <InitCmdWrite>

	ui8 firstGroupQuan = (adjVarQuan > 40) ? 40 : adjVarQuan;
 800780c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007810:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b28      	cmp	r3, #40	; 0x28
 8007818:	bf28      	it	cs
 800781a:	2328      	movcs	r3, #40	; 0x28
 800781c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

	WriteByte(&cmd, firstGroupQuan);  // numParams
 8007820:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8007824:	f107 0310 	add.w	r3, r7, #16
 8007828:	4611      	mov	r1, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f806 	bl	800883c <WriteByte>

	ui8 count = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while (count < firstGroupQuan)
 8007836:	e017      	b.n	8007868 <SBGC32_GetAdjVarValues+0x8c>
		WriteByte(&cmd, adjVarGeneral[count++].ID);
 8007838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8007842:	461a      	mov	r2, r3
 8007844:	4613      	mov	r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	4413      	add	r3, r2
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	461a      	mov	r2, r3
 800784e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007852:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4413      	add	r3, r2
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	f107 0310 	add.w	r3, r7, #16
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f000 ffea 	bl	800883c <WriteByte>
	while (count < firstGroupQuan)
 8007868:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800786c:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8007870:	429a      	cmp	r2, r3
 8007872:	d3e1      	bcc.n	8007838 <SBGC32_GetAdjVarValues+0x5c>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_SET_ADJ_VARS_VAL), "Adj Var Values vol. 1:") == TX_RX_OK)
 8007874:	f107 0110 	add.w	r1, r7, #16
 8007878:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800787c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007880:	221f      	movs	r2, #31
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	f000 fe34 	bl	80084f0 <SBGC32_TX_RX>
 8007888:	4603      	mov	r3, r0
 800788a:	4619      	mov	r1, r3
 800788c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007890:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007894:	4a66      	ldr	r2, [pc, #408]	; (8007a30 <SBGC32_GetAdjVarValues+0x254>)
 8007896:	6818      	ldr	r0, [r3, #0]
 8007898:	f001 fc2a 	bl	80090f0 <CheckReceipt>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 80b9 	bne.w	8007a16 <SBGC32_GetAdjVarValues+0x23a>
	{
		SkipBytes(&cmd, 1);  // skip ui8 numParams
 80078a4:	f107 0310 	add.w	r3, r7, #16
 80078a8:	2101      	movs	r1, #1
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 f876 	bl	800899c <SkipBytes>

		for (ui8 i = 0; i < firstGroupQuan; i++)
 80078b0:	2300      	movs	r3, #0
 80078b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80078b6:	e01f      	b.n	80078f8 <SBGC32_GetAdjVarValues+0x11c>
		{
			SkipBytes(&cmd, 1);  // skip ui8 ID
 80078b8:	f107 0310 	add.w	r3, r7, #16
 80078bc:	2101      	movs	r1, #1
 80078be:	4618      	mov	r0, r3
 80078c0:	f001 f86c 	bl	800899c <SkipBytes>
			adjVarGeneral[i].value = ReadLong(&cmd);
 80078c4:	f107 0310 	add.w	r3, r7, #16
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 f849 	bl	8008960 <ReadLong>
 80078ce:	4601      	mov	r1, r0
 80078d0:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80078d4:	4613      	mov	r3, r2
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	4413      	add	r3, r2
 80078da:	011b      	lsls	r3, r3, #4
 80078dc:	461a      	mov	r2, r3
 80078de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80078e2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4413      	add	r3, r2
 80078ea:	460a      	mov	r2, r1
 80078ec:	629a      	str	r2, [r3, #40]	; 0x28
		for (ui8 i = 0; i < firstGroupQuan; i++)
 80078ee:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80078f2:	3301      	adds	r3, #1
 80078f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80078f8:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80078fc:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8007900:	429a      	cmp	r2, r3
 8007902:	d3d9      	bcc.n	80078b8 <SBGC32_GetAdjVarValues+0xdc>
		}

		if (adjVarQuan > 40)
 8007904:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007908:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b28      	cmp	r3, #40	; 0x28
 8007910:	f240 8081 	bls.w	8007a16 <SBGC32_GetAdjVarValues+0x23a>
		{
			InitCmdWrite(&cmd, CMD_GET_ADJ_VARS_VAL);  // command re-init
 8007914:	f107 0310 	add.w	r3, r7, #16
 8007918:	2140      	movs	r1, #64	; 0x40
 800791a:	4618      	mov	r0, r3
 800791c:	f001 f853 	bl	80089c6 <InitCmdWrite>
			WriteByte(&cmd, adjVarQuan - 40);
 8007920:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007924:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	3b28      	subs	r3, #40	; 0x28
 800792c:	b2da      	uxtb	r2, r3
 800792e:	f107 0310 	add.w	r3, r7, #16
 8007932:	4611      	mov	r1, r2
 8007934:	4618      	mov	r0, r3
 8007936:	f000 ff81 	bl	800883c <WriteByte>

			while (count < adjVarQuan)
 800793a:	e017      	b.n	800796c <SBGC32_GetAdjVarValues+0x190>
				WriteByte(&cmd, adjVarGeneral[count++].ID);
 800793c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007940:	1c5a      	adds	r2, r3, #1
 8007942:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8007946:	461a      	mov	r2, r3
 8007948:	4613      	mov	r3, r2
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	4413      	add	r3, r2
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	461a      	mov	r2, r3
 8007952:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007956:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4413      	add	r3, r2
 800795e:	781a      	ldrb	r2, [r3, #0]
 8007960:	f107 0310 	add.w	r3, r7, #16
 8007964:	4611      	mov	r1, r2
 8007966:	4618      	mov	r0, r3
 8007968:	f000 ff68 	bl	800883c <WriteByte>
			while (count < adjVarQuan)
 800796c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007970:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007974:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	429a      	cmp	r2, r3
 800797c:	d3de      	bcc.n	800793c <SBGC32_GetAdjVarValues+0x160>

			if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_SET_ADJ_VARS_VAL), "Adj Var Values vol. 2:") == TX_RX_OK)
 800797e:	f107 0110 	add.w	r1, r7, #16
 8007982:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007986:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800798a:	221f      	movs	r2, #31
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	f000 fdaf 	bl	80084f0 <SBGC32_TX_RX>
 8007992:	4603      	mov	r3, r0
 8007994:	4619      	mov	r1, r3
 8007996:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800799a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800799e:	4a25      	ldr	r2, [pc, #148]	; (8007a34 <SBGC32_GetAdjVarValues+0x258>)
 80079a0:	6818      	ldr	r0, [r3, #0]
 80079a2:	f001 fba5 	bl	80090f0 <CheckReceipt>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d134      	bne.n	8007a16 <SBGC32_GetAdjVarValues+0x23a>
			{
				SkipBytes(&cmd, 1);  // skip ui8 numParams
 80079ac:	f107 0310 	add.w	r3, r7, #16
 80079b0:	2101      	movs	r1, #1
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fff2 	bl	800899c <SkipBytes>

				for (ui8 i = 0; i < adjVarQuan - 40; i++)
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80079be:	e020      	b.n	8007a02 <SBGC32_GetAdjVarValues+0x226>
				{
					SkipBytes(&cmd, 1);  // skip ui8 ID
 80079c0:	f107 0310 	add.w	r3, r7, #16
 80079c4:	2101      	movs	r1, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 ffe8 	bl	800899c <SkipBytes>
					adjVarGeneral[i + 40].value = ReadLong(&cmd);
 80079cc:	f107 0310 	add.w	r3, r7, #16
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 ffc5 	bl	8008960 <ReadLong>
 80079d6:	4601      	mov	r1, r0
 80079d8:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 80079dc:	4613      	mov	r3, r2
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	4413      	add	r3, r2
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80079e8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80079ec:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	4413      	add	r3, r2
 80079f4:	460a      	mov	r2, r1
 80079f6:	629a      	str	r2, [r3, #40]	; 0x28
				for (ui8 i = 0; i < adjVarQuan - 40; i++)
 80079f8:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80079fc:	3301      	adds	r3, #1
 80079fe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8007a02:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8007a06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a0a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	3b28      	subs	r3, #40	; 0x28
 8007a12:	429a      	cmp	r2, r3
 8007a14:	dbd4      	blt.n	80079c0 <SBGC32_GetAdjVarValues+0x1e4>
				}
			}
		}
	}

	return generalSBGC->_parserCurrentStatus;
 8007a16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	0800df88 	.word	0x0800df88
 8007a34:	0800dfa0 	.word	0x0800dfa0

08007a38 <SBGC32_SaveAdjVarsToEEPROM>:
 *	@param	adjVarQuan - number of adjustable variables
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_SaveAdjVarsToEEPROM (GeneralSBGC_t *generalSBGC, AdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b0c6      	sub	sp, #280	; 0x118
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a46:	6018      	str	r0, [r3, #0]
 8007a48:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a50:	6019      	str	r1, [r3, #0]
 8007a52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a56:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007a5a:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_SAVE_PARAMS_3);
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	2120      	movs	r1, #32
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 ffaf 	bl	80089c6 <InitCmdWrite>

	for (ui8 i = 0; i < adjVarQuan; i++)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007a6e:	e029      	b.n	8007ac4 <SBGC32_SaveAdjVarsToEEPROM+0x8c>
		if (adjVarGeneral[i].saveFlag == NOT_SAVED)
 8007a70:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8007a74:	4613      	mov	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4413      	add	r3, r2
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a82:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d113      	bne.n	8007aba <SBGC32_SaveAdjVarsToEEPROM+0x82>
			WriteByte(&cmd, adjVarGeneral[i].ID);
 8007a92:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8007a96:	4613      	mov	r3, r2
 8007a98:	005b      	lsls	r3, r3, #1
 8007a9a:	4413      	add	r3, r2
 8007a9c:	011b      	lsls	r3, r3, #4
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007aa4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4413      	add	r3, r2
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	f107 0310 	add.w	r3, r7, #16
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f000 fec1 	bl	800883c <WriteByte>
	for (ui8 i = 0; i < adjVarQuan; i++)
 8007aba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007abe:	3301      	adds	r3, #1
 8007ac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007ac4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ac8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007acc:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d3cc      	bcc.n	8007a70 <SBGC32_SaveAdjVarsToEEPROM+0x38>

	if (cmd.payloadSize == 0)  // nothing to save
 8007ad6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ade:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d107      	bne.n	8007af6 <SBGC32_SaveAdjVarsToEEPROM+0xbe>
		return generalSBGC->_parserCurrentStatus;
 8007ae6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007aea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8007af4:	e059      	b.n	8007baa <SBGC32_SaveAdjVarsToEEPROM+0x172>

	SBGC32_TX(generalSBGC, &cmd);
 8007af6:	f107 0210 	add.w	r2, r7, #16
 8007afa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007afe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b02:	4611      	mov	r1, r2
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	f000 fa5a 	bl	8007fbe <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 8007b0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b12:	781a      	ldrb	r2, [r3, #0]
 8007b14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	f001 f952 	bl	8008dc8 <SBGC32_CheckConfirmation>

	#if (SBGC_CONFIRM_CMD)
		if (generalSBGC->_confirmationStatus == CONFIRMATION_OK)
 8007b24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b28:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d132      	bne.n	8007b9c <SBGC32_SaveAdjVarsToEEPROM+0x164>
	#else
		if (generalSBGC->_parserCurrentStatus == TX_RX_OK)
	#endif
			for (ui8 i = 0; i < adjVarQuan; i++)
 8007b36:	2300      	movs	r3, #0
 8007b38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007b3c:	e025      	b.n	8007b8a <SBGC32_SaveAdjVarsToEEPROM+0x152>
				if (adjVarGeneral[i].saveFlag != SAVED)
 8007b3e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8007b42:	4613      	mov	r3, r2
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	4413      	add	r3, r2
 8007b48:	011b      	lsls	r3, r3, #4
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4413      	add	r3, r2
 8007b58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00f      	beq.n	8007b80 <SBGC32_SaveAdjVarsToEEPROM+0x148>
					adjVarGeneral[i].saveFlag = SAVED;
 8007b60:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8007b64:	4613      	mov	r3, r2
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	4413      	add	r3, r2
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b72:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4413      	add	r3, r2
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			for (ui8 i = 0; i < adjVarQuan; i++)
 8007b80:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007b84:	3301      	adds	r3, #1
 8007b86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8007b8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007b8e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007b92:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d3d0      	bcc.n	8007b3e <SBGC32_SaveAdjVarsToEEPROM+0x106>

	return generalSBGC->_parserCurrentStatus;
 8007b9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ba0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <FormatBoardVersion>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	boardVer - BoardInfo_t.boardVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatBoardVersion (GeneralSBGC_t *generalSBGC, ui8 boardVer, char* pBuff)
{
 8007bb4:	b590      	push	{r4, r7, lr}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	607a      	str	r2, [r7, #4]
 8007bc0:	72fb      	strb	r3, [r7, #11]
	ui8 majorVer = boardVer / 10;
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	4a0d      	ldr	r2, [pc, #52]	; (8007bfc <FormatBoardVersion+0x48>)
 8007bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bca:	08db      	lsrs	r3, r3, #3
 8007bcc:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = boardVer % 10;
 8007bce:	7afa      	ldrb	r2, [r7, #11]
 8007bd0:	4b0a      	ldr	r3, [pc, #40]	; (8007bfc <FormatBoardVersion+0x48>)
 8007bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8007bd6:	08d9      	lsrs	r1, r3, #3
 8007bd8:	460b      	mov	r3, r1
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	75bb      	strb	r3, [r7, #22]
	generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	699c      	ldr	r4, [r3, #24]
 8007be8:	7dfa      	ldrb	r2, [r7, #23]
 8007bea:	7dbb      	ldrb	r3, [r7, #22]
 8007bec:	4904      	ldr	r1, [pc, #16]	; (8007c00 <FormatBoardVersion+0x4c>)
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	47a0      	blx	r4
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd90      	pop	{r4, r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	cccccccd 	.word	0xcccccccd
 8007c00:	0800dff0 	.word	0x0800dff0

08007c04 <FormatFirmwareVersion>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	firmwareVer - BoardInfo_t.firmwareVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatFirmwareVersion (GeneralSBGC_t *generalSBGC, ui16 firmwareVer, char* pBuff)
{
 8007c04:	b590      	push	{r4, r7, lr}
 8007c06:	b089      	sub	sp, #36	; 0x24
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	817b      	strh	r3, [r7, #10]
	ui8 majorVer = firmwareVer / 1000;
 8007c12:	897b      	ldrh	r3, [r7, #10]
 8007c14:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <FormatFirmwareVersion+0x88>)
 8007c16:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1a:	099b      	lsrs	r3, r3, #6
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = (firmwareVer % 1000) / 10;
 8007c20:	897b      	ldrh	r3, [r7, #10]
 8007c22:	4a1a      	ldr	r2, [pc, #104]	; (8007c8c <FormatFirmwareVersion+0x88>)
 8007c24:	fba2 1203 	umull	r1, r2, r2, r3
 8007c28:	0992      	lsrs	r2, r2, #6
 8007c2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007c2e:	fb01 f202 	mul.w	r2, r1, r2
 8007c32:	1a9b      	subs	r3, r3, r2
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4a16      	ldr	r2, [pc, #88]	; (8007c90 <FormatFirmwareVersion+0x8c>)
 8007c38:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3c:	08db      	lsrs	r3, r3, #3
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	75bb      	strb	r3, [r7, #22]
	ui8 betaVer = firmwareVer % 10;
 8007c42:	897a      	ldrh	r2, [r7, #10]
 8007c44:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <FormatFirmwareVersion+0x8c>)
 8007c46:	fba3 1302 	umull	r1, r3, r3, r2
 8007c4a:	08d9      	lsrs	r1, r3, #3
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	757b      	strb	r3, [r7, #21]

	if (betaVer != 0)
 8007c5a:	7d7b      	ldrb	r3, [r7, #21]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <FormatFirmwareVersion+0x72>
		generalSBGC->SprintfFunc(pBuff, "%u.%ub%u", majorVer, minorVer, betaVer);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	699c      	ldr	r4, [r3, #24]
 8007c64:	7dfa      	ldrb	r2, [r7, #23]
 8007c66:	7db9      	ldrb	r1, [r7, #22]
 8007c68:	7d7b      	ldrb	r3, [r7, #21]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	4909      	ldr	r1, [pc, #36]	; (8007c94 <FormatFirmwareVersion+0x90>)
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	47a0      	blx	r4

	else
		generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
}
 8007c74:	e006      	b.n	8007c84 <FormatFirmwareVersion+0x80>
		generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	699c      	ldr	r4, [r3, #24]
 8007c7a:	7dfa      	ldrb	r2, [r7, #23]
 8007c7c:	7dbb      	ldrb	r3, [r7, #22]
 8007c7e:	4906      	ldr	r1, [pc, #24]	; (8007c98 <FormatFirmwareVersion+0x94>)
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	47a0      	blx	r4
}
 8007c84:	bf00      	nop
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd90      	pop	{r4, r7, pc}
 8007c8c:	10624dd3 	.word	0x10624dd3
 8007c90:	cccccccd 	.word	0xcccccccd
 8007c94:	0800dff8 	.word	0x0800dff8
 8007c98:	0800dff0 	.word	0x0800dff0

08007c9c <SaveUnexpectedCommand>:
#if (UNEXP_CMD_BUFFER)

	/**	@note	Private function
	 */
	static void SaveUnexpectedCommand (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
	{
 8007c9c:	b490      	push	{r4, r7}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
				return;

		#endif

		/* Overflow checking */
		if (generalSBGC->_unexpectedCommandsBuffHead != generalSBGC->_unexpectedCommandsBuffTail)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8007cac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8007cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d059      	beq.n	8007d76 <SaveUnexpectedCommand+0xda>
		{
			ui16 headCounter = generalSBGC->_unexpectedCommandsBuffHead;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8007cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	82fb      	strh	r3, [r7, #22]
			ui16 i = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	82bb      	strh	r3, [r7, #20]
			Boolean_t needShiftTailFlag = FALSE__;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	74fb      	strb	r3, [r7, #19]

			for (; i < (serialCommand->payloadSize + 2); i++)
 8007cd8:	e015      	b.n	8007d06 <SaveUnexpectedCommand+0x6a>
			{
				headCounter = ((headCounter + 1) & UNEXP_CMD_BUFFER_SIZE_MASK);
 8007cda:	8afb      	ldrh	r3, [r7, #22]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ce4:	82fb      	strh	r3, [r7, #22]

				if (headCounter == generalSBGC->_unexpectedCommandsBuffTail)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8007cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	8afb      	ldrh	r3, [r7, #22]
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d102      	bne.n	8007d00 <SaveUnexpectedCommand+0x64>
				{
					needShiftTailFlag = TRUE__;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	74fb      	strb	r3, [r7, #19]
					break;
 8007cfe:	e009      	b.n	8007d14 <SaveUnexpectedCommand+0x78>
			for (; i < (serialCommand->payloadSize + 2); i++)
 8007d00:	8abb      	ldrh	r3, [r7, #20]
 8007d02:	3301      	adds	r3, #1
 8007d04:	82bb      	strh	r3, [r7, #20]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007d0c:	1c5a      	adds	r2, r3, #1
 8007d0e:	8abb      	ldrh	r3, [r7, #20]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	dae2      	bge.n	8007cda <SaveUnexpectedCommand+0x3e>
				}
			}

			if (needShiftTailFlag)
 8007d14:	7cfb      	ldrb	r3, [r7, #19]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d02d      	beq.n	8007d76 <SaveUnexpectedCommand+0xda>
					ui8 shiftTemp;

					while (1)
						/* Shift tail while command will fit */
					{
						shiftTemp = generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffTail + 1] + 2;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8007d20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3301      	adds	r3, #1
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d30:	3302      	adds	r3, #2
 8007d32:	73fb      	strb	r3, [r7, #15]

						if (i <= shiftTemp)
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	8aba      	ldrh	r2, [r7, #20]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d81a      	bhi.n	8007d74 <SaveUnexpectedCommand+0xd8>
						{
							generalSBGC->_unexpectedCommandsBuffTail += shiftTemp;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8007d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	4413      	add	r3, r2
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d58:	b299      	uxth	r1, r3
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8007d60:	f361 0309 	bfi	r3, r1, #0, #10
 8007d64:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
							i += shiftTemp;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	8abb      	ldrh	r3, [r7, #20]
 8007d6e:	4413      	add	r3, r2
 8007d70:	82bb      	strh	r3, [r7, #20]
						shiftTemp = generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffTail + 1] + 2;
 8007d72:	e7d2      	b.n	8007d1a <SaveUnexpectedCommand+0x7e>
						}

						else
							break;
 8007d74:	bf00      	nop

				#endif
			}
		}

		generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffHead++] = serialCommand->commandID;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8007d7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d80:	b299      	uxth	r1, r3
 8007d82:	1c4b      	adds	r3, r1, #1
 8007d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d88:	b298      	uxth	r0, r3
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 8007d90:	f360 0309 	bfi	r3, r0, #0, #10
 8007d94:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	440b      	add	r3, r1
 8007da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffHead++] = serialCommand->payloadSize;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8007daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dae:	b299      	uxth	r1, r3
 8007db0:	1c4b      	adds	r3, r1, #1
 8007db2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007db6:	b298      	uxth	r0, r3
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 8007dbe:	f360 0309 	bfi	r3, r0, #0, #10
 8007dc2:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	440b      	add	r3, r1
 8007dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		for (ui16 i = 0; i < serialCommand->payloadSize; i++)
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	823b      	strh	r3, [r7, #16]
 8007dd8:	e01b      	b.n	8007e12 <SaveUnexpectedCommand+0x176>
			generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffHead++] = serialCommand->payload[i];
 8007dda:	8a38      	ldrh	r0, [r7, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8007de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007de6:	b299      	uxth	r1, r3
 8007de8:	1c4b      	adds	r3, r1, #1
 8007dea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dee:	b29c      	uxth	r4, r3
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 8007df6:	f364 0309 	bfi	r3, r4, #0, #10
 8007dfa:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	4403      	add	r3, r0
 8007e02:	785a      	ldrb	r2, [r3, #1]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	440b      	add	r3, r1
 8007e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		for (ui16 i = 0; i < serialCommand->payloadSize; i++)
 8007e0c:	8a3b      	ldrh	r3, [r7, #16]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	823b      	strh	r3, [r7, #16]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	8a3a      	ldrh	r2, [r7, #16]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d3dc      	bcc.n	8007dda <SaveUnexpectedCommand+0x13e>
	}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc90      	pop	{r4, r7}
 8007e2a:	4770      	bx	lr

08007e2c <DeleteUnexpectedCommand>:


	/**	@note	Private function
	 */
	static ui8 DeleteUnexpectedCommand (GeneralSBGC_t *generalSBGC, ui16 buffPointer)
	{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	807b      	strh	r3, [r7, #2]
		ui16 cmdPayloadSizePointer = (buffPointer + 1) & UNEXP_CMD_BUFFER_SIZE_MASK;
 8007e38:	887b      	ldrh	r3, [r7, #2]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e42:	81bb      	strh	r3, [r7, #12]
		ui8 cmdSize = generalSBGC->_unexpectedCommandsBuff[cmdPayloadSizePointer] + 2;
 8007e44:	89bb      	ldrh	r3, [r7, #12]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e4e:	3302      	adds	r3, #2
 8007e50:	72fb      	strb	r3, [r7, #11]

		/* Shifting */
		if (((buffPointer + cmdSize) & UNEXP_CMD_BUFFER_SIZE_MASK) != generalSBGC->_unexpectedCommandsBuffHead)
 8007e52:	887a      	ldrh	r2, [r7, #2]
 8007e54:	7afb      	ldrb	r3, [r7, #11]
 8007e56:	4413      	add	r3, r2
 8007e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	f8b2 2436 	ldrh.w	r2, [r2, #1078]	; 0x436
 8007e62:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007e66:	b292      	uxth	r2, r2
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d01b      	beq.n	8007ea4 <DeleteUnexpectedCommand+0x78>
			/* If this command not latest */
			for (ui16 i = 0; i < cmdSize; i++)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	81fb      	strh	r3, [r7, #14]
 8007e70:	e013      	b.n	8007e9a <DeleteUnexpectedCommand+0x6e>
				generalSBGC->_unexpectedCommandsBuff[buffPointer + i] = generalSBGC->_unexpectedCommandsBuff[buffPointer + cmdSize + i];
 8007e72:	887a      	ldrh	r2, [r7, #2]
 8007e74:	7afb      	ldrb	r3, [r7, #11]
 8007e76:	441a      	add	r2, r3
 8007e78:	89fb      	ldrh	r3, [r7, #14]
 8007e7a:	441a      	add	r2, r3
 8007e7c:	8879      	ldrh	r1, [r7, #2]
 8007e7e:	89fb      	ldrh	r3, [r7, #14]
 8007e80:	440b      	add	r3, r1
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	440a      	add	r2, r1
 8007e86:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	460a      	mov	r2, r1
 8007e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			for (ui16 i = 0; i < cmdSize; i++)
 8007e94:	89fb      	ldrh	r3, [r7, #14]
 8007e96:	3301      	adds	r3, #1
 8007e98:	81fb      	strh	r3, [r7, #14]
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	89fa      	ldrh	r2, [r7, #14]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d3e6      	bcc.n	8007e72 <DeleteUnexpectedCommand+0x46>

		generalSBGC->_unexpectedCommandsBuffHead -= cmdSize;  // Shift head pointer
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8007eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	7afb      	ldrb	r3, [r7, #11]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ebe:	b299      	uxth	r1, r3
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 8007ec6:	f361 0309 	bfi	r3, r1, #0, #10
 8007eca:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436

		return cmdSize;
 8007ece:	7afb      	ldrb	r3, [r7, #11]
	}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <ReadUnexpectedCommand>:


	/**	@note	Private function
	 */
	static void ReadUnexpectedCommand (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
	{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
		generalSBGC->_unexpectedCommandCurrentPointer = generalSBGC->_unexpectedCommandsBuffTail;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8007eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ef0:	b299      	uxth	r1, r3
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	f8b2 3438 	ldrh.w	r3, [r2, #1080]	; 0x438
 8007ef8:	f361 0309 	bfi	r3, r1, #0, #10
 8007efc:	f8a2 3438 	strh.w	r3, [r2, #1080]	; 0x438

		serialCommand->commandID = generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffTail++];
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8007f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f0a:	b299      	uxth	r1, r3
 8007f0c:	1c4b      	adds	r3, r1, #1
 8007f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f12:	b298      	uxth	r0, r3
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8007f1a:	f360 0309 	bfi	r3, r0, #0, #10
 8007f1e:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
 8007f22:	460a      	mov	r2, r1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4413      	add	r3, r2
 8007f28:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	701a      	strb	r2, [r3, #0]

		serialCommand->payloadSize = generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffTail++];
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8007f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f3a:	b299      	uxth	r1, r3
 8007f3c:	1c4b      	adds	r3, r1, #1
 8007f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f42:	b298      	uxth	r0, r3
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8007f4a:	f360 0309 	bfi	r3, r0, #0, #10
 8007f4e:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
 8007f52:	460a      	mov	r2, r1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4413      	add	r3, r2
 8007f58:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

		for (ui16 i = 0; i < serialCommand->payloadSize; i++)
 8007f62:	2300      	movs	r3, #0
 8007f64:	81fb      	strh	r3, [r7, #14]
 8007f66:	e01c      	b.n	8007fa2 <ReadUnexpectedCommand+0xc6>
			serialCommand->payload[i] = generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffTail++];
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8007f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f72:	b299      	uxth	r1, r3
 8007f74:	1c4b      	adds	r3, r1, #1
 8007f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f7a:	b298      	uxth	r0, r3
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8007f82:	f360 0309 	bfi	r3, r0, #0, #10
 8007f86:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
 8007f8a:	89fb      	ldrh	r3, [r7, #14]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	4413      	add	r3, r2
 8007f98:	460a      	mov	r2, r1
 8007f9a:	705a      	strb	r2, [r3, #1]
		for (ui16 i = 0; i < serialCommand->payloadSize; i++)
 8007f9c:	89fb      	ldrh	r3, [r7, #14]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	81fb      	strh	r3, [r7, #14]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	89fa      	ldrh	r2, [r7, #14]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d3db      	bcc.n	8007f68 <ReadUnexpectedCommand+0x8c>
	}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <SBGC32_TX>:
 *			to be transmitted
 *
 *	@return	Transmission status
 */
TxRxStatus_t SBGC32_TX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
{
 8007fbe:	b590      	push	{r4, r7, lr}
 8007fc0:	b0c5      	sub	sp, #276	; 0x114
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007fcc:	6018      	str	r0, [r3, #0]
 8007fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007fd6:	6019      	str	r1, [r3, #0]
	ui8 buff [MAX_BUFF_SIZE];
	ui32 currentTime;

	buff[0] = generalSBGC->protocolVersion;
 8007fd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	7f1a      	ldrb	r2, [r3, #28]
 8007fe4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fec:	701a      	strb	r2, [r3, #0]
	buff[1] = serialCommand->commandID;
 8007fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ff2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	781a      	ldrb	r2, [r3, #0]
 8007ffa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ffe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008002:	705a      	strb	r2, [r3, #1]
	buff[2] = serialCommand->payloadSize;
 8008004:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008008:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8008012:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801a:	709a      	strb	r2, [r3, #2]
	buff[3] = buff[1] + buff[2];
 800801c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008020:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008024:	785a      	ldrb	r2, [r3, #1]
 8008026:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800802a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802e:	789b      	ldrb	r3, [r3, #2]
 8008030:	4413      	add	r3, r2
 8008032:	b2da      	uxtb	r2, r3
 8008034:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803c:	70da      	strb	r2, [r3, #3]

	memcpy(&buff[4], serialCommand->payload, serialCommand->payloadSize);
 800803e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008042:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	1c59      	adds	r1, r3, #1
 800804a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800804e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008058:	461a      	mov	r2, r3
 800805a:	f107 0308 	add.w	r3, r7, #8
 800805e:	3304      	adds	r3, #4
 8008060:	4618      	mov	r0, r3
 8008062:	f001 fb7b 	bl	800975c <memcpy>

	/* ui8 size = real size current serialCommand */
	ui8 size = serialCommand->payloadSize + 4 + ((generalSBGC->protocolVersion == PR2_START_CHARACTER) ? 2 : 1);
 8008066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800806a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008074:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008078:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	7f12      	ldrb	r2, [r2, #28]
 8008080:	2a24      	cmp	r2, #36	; 0x24
 8008082:	d101      	bne.n	8008088 <SBGC32_TX+0xca>
 8008084:	2202      	movs	r2, #2
 8008086:	e000      	b.n	800808a <SBGC32_TX+0xcc>
 8008088:	2201      	movs	r2, #1
 800808a:	4413      	add	r3, r2
 800808c:	b2db      	uxtb	r3, r3
 800808e:	3304      	adds	r3, #4
 8008090:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if (generalSBGC->protocolVersion == PR1_START_CHARACTER)
 8008094:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008098:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	7f1b      	ldrb	r3, [r3, #28]
 80080a0:	2b3e      	cmp	r3, #62	; 0x3e
 80080a2:	d120      	bne.n	80080e6 <SBGC32_TX+0x128>
		buff[4 + serialCommand->payloadSize] = Modulo256_Calculate(serialCommand->payload, serialCommand->payloadSize);
 80080a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80080be:	b299      	uxth	r1, r3
 80080c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80080ce:	1d1c      	adds	r4, r3, #4
 80080d0:	4610      	mov	r0, r2
 80080d2:	f001 f8c9 	bl	8009268 <Modulo256_Calculate>
 80080d6:	4603      	mov	r3, r0
 80080d8:	461a      	mov	r2, r3
 80080da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080e2:	551a      	strb	r2, [r3, r4]
 80080e4:	e035      	b.n	8008152 <SBGC32_TX+0x194>

	else
	{
		ui16 CRC16_Res = CRC16_Calculate(&buff[1], (4 + serialCommand->payloadSize - 1));
 80080e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3303      	adds	r3, #3
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	3301      	adds	r3, #1
 8008100:	4611      	mov	r1, r2
 8008102:	4618      	mov	r0, r3
 8008104:	f001 f8d7 	bl	80092b6 <CRC16_Calculate>
 8008108:	4603      	mov	r3, r0
 800810a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		buff[4 + serialCommand->payloadSize] = CRC16_Res & 0x00FF;
 800810e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008112:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800811c:	3304      	adds	r3, #4
 800811e:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8008122:	b2d1      	uxtb	r1, r2
 8008124:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008128:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800812c:	54d1      	strb	r1, [r2, r3]
		buff[5 + serialCommand->payloadSize] = (CRC16_Res >> 8) & 0x00FF;
 800812e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8008132:	0a1b      	lsrs	r3, r3, #8
 8008134:	b29a      	uxth	r2, r3
 8008136:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800813a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008144:	3305      	adds	r3, #5
 8008146:	b2d1      	uxtb	r1, r2
 8008148:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800814c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8008150:	54d1      	strb	r1, [r2, r3]
	}

	currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8008152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008156:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008162:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	6812      	ldr	r2, [r2, #0]
 800816a:	4610      	mov	r0, r2
 800816c:	4798      	blx	r3
 800816e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8008172:	e029      	b.n	80081c8 <SBGC32_TX+0x20a>
	{
		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txTimeout)
 8008174:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008178:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8008184:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8008188:	6812      	ldr	r2, [r2, #0]
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	4602      	mov	r2, r0
 8008192:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008196:	1ad2      	subs	r2, r2, r3
 8008198:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800819c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d30f      	bcc.n	80081c8 <SBGC32_TX+0x20a>
		{
			generalSBGC->_txErrorsCount++;
 80081a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80081b4:	3301      	adds	r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	861a      	strh	r2, [r3, #48]	; 0x30
			return TX_BUFFER_OVERFLOW_ERROR;  // aka timeout error
 80081c4:	2309      	movs	r3, #9
 80081c6:	e015      	b.n	80081f4 <SBGC32_TX+0x236>
	while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 80081c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80081d8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80081dc:	6812      	ldr	r2, [r2, #0]
 80081de:	6810      	ldr	r0, [r2, #0]
 80081e0:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 80081e4:	b292      	uxth	r2, r2
 80081e6:	f107 0108 	add.w	r1, r7, #8
 80081ea:	4798      	blx	r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1c0      	bne.n	8008174 <SBGC32_TX+0x1b6>
		}
	}

	return TX_RX_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd90      	pop	{r4, r7, pc}

080081fe <SBGC32_RX>:
 *			time for receiving one whole SerialCommand
 *
 *	@return	TX_RX_OK or last state of lastParserStatus variable
 */
TxRxStatus_t SBGC32_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, ui32 timeout)
{
 80081fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008202:	b08c      	sub	sp, #48	; 0x30
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
	serialCommand->readPos = 0;  // Prepare for reading
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

	#if (UNEXP_CMD_BUFFER)

		if (generalSBGC->_unexpectedCommandsBuffTail != generalSBGC->_unexpectedCommandsBuffHead)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 800821a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8008226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800822a:	b29b      	uxth	r3, r3
 800822c:	429a      	cmp	r2, r3
 800822e:	d005      	beq.n	800823c <SBGC32_RX+0x3e>
		/* Read next keeping in _unexpectedCommandsBuff serial command */
		{
			ReadUnexpectedCommand(generalSBGC, serialCommand);
 8008230:	68b9      	ldr	r1, [r7, #8]
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f7ff fe52 	bl	8007edc <ReadUnexpectedCommand>
			return RX_BUFFERED_COMMAND;
 8008238:	2301      	movs	r3, #1
 800823a:	e154      	b.n	80084e6 <SBGC32_RX+0x2e8>
		ui8 startSim;
		ui8 headBuff [3];  /* Header buffer:
		headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */
		ui16 availableBytes;

		TxRxStatus_t lastParserStatus = RX_START_PARSE;
 800823c:	2302      	movs	r3, #2
 800823e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		ParserState_t parserState = STATE_IDLE;
 8008242:	2300      	movs	r3, #0
 8008244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		/* Launch timer */
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	6812      	ldr	r2, [r2, #0]
 8008250:	4610      	mov	r0, r2
 8008252:	4798      	blx	r3
 8008254:	62b8      	str	r0, [r7, #40]	; 0x28

		while (1)
		{
			switch (parserState)
 8008256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800825a:	2b03      	cmp	r3, #3
 800825c:	d070      	beq.n	8008340 <SBGC32_RX+0x142>
 800825e:	2b03      	cmp	r3, #3
 8008260:	f300 8132 	bgt.w	80084c8 <SBGC32_RX+0x2ca>
 8008264:	2b01      	cmp	r3, #1
 8008266:	dc02      	bgt.n	800826e <SBGC32_RX+0x70>
 8008268:	2b00      	cmp	r3, #0
 800826a:	da03      	bge.n	8008274 <SBGC32_RX+0x76>
 800826c:	e12c      	b.n	80084c8 <SBGC32_RX+0x2ca>
 800826e:	2b02      	cmp	r3, #2
 8008270:	d024      	beq.n	80082bc <SBGC32_RX+0xbe>
 8008272:	e129      	b.n	80084c8 <SBGC32_RX+0x2ca>
			{
				/* Waiting start byte */
				case STATE_IDLE :
				case STATE_RESYNC :
				{
					if (generalSBGC->AvailableBytesFunc(generalSBGC->Drv))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	4610      	mov	r0, r2
 800827e:	4798      	blx	r3
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d016      	beq.n	80082b4 <SBGC32_RX+0xb6>
					{
						startSim = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	75fb      	strb	r3, [r7, #23]

						generalSBGC->RxFunc(generalSBGC->Drv, &startSim);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	f107 0117 	add.w	r1, r7, #23
 8008296:	4610      	mov	r0, r2
 8008298:	4798      	blx	r3

						if (startSim == generalSBGC->protocolVersion)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	7f1a      	ldrb	r2, [r3, #28]
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d103      	bne.n	80082ac <SBGC32_RX+0xae>
							parserState = STATE_CHECK_HEADER;
 80082a4:	2302      	movs	r3, #2
 80082a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					}

					else
						lastParserStatus = RX_EMPTY_BUFF_ERROR;

					break;  // Passing to next state
 80082aa:	e10d      	b.n	80084c8 <SBGC32_RX+0x2ca>
							lastParserStatus = RX_START_PARSE;
 80082ac:	2302      	movs	r3, #2
 80082ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;  // Passing to next state
 80082b2:	e109      	b.n	80084c8 <SBGC32_RX+0x2ca>
						lastParserStatus = RX_EMPTY_BUFF_ERROR;
 80082b4:	2303      	movs	r3, #3
 80082b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;  // Passing to next state
 80082ba:	e105      	b.n	80084c8 <SBGC32_RX+0x2ca>
				}

				/* Waiting whole header */
				case STATE_CHECK_HEADER :
				{
					availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	6812      	ldr	r2, [r2, #0]
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	4603      	mov	r3, r0
 80082ca:	837b      	strh	r3, [r7, #26]

					if ((availableBytes >= 3) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 80082cc:	8b7b      	ldrh	r3, [r7, #26]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d91d      	bls.n	800830e <SBGC32_RX+0x110>
 80082d2:	8b7b      	ldrh	r3, [r7, #26]
 80082d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082d8:	4293      	cmp	r3, r2
 80082da:	d018      	beq.n	800830e <SBGC32_RX+0x110>
						for (ui8 i = 0; i < 3; i++)
 80082dc:	2300      	movs	r3, #0
 80082de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80082e2:	e00f      	b.n	8008304 <SBGC32_RX+0x106>
							generalSBGC->RxFunc(generalSBGC->Drv, &headBuff[i]);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	6810      	ldr	r0, [r2, #0]
 80082ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80082f0:	f107 0114 	add.w	r1, r7, #20
 80082f4:	440a      	add	r2, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	4798      	blx	r3
						for (ui8 i = 0; i < 3; i++)
 80082fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80082fe:	3301      	adds	r3, #1
 8008300:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8008304:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008308:	2b02      	cmp	r3, #2
 800830a:	d9eb      	bls.n	80082e4 <SBGC32_RX+0xe6>
 800830c:	e003      	b.n	8008316 <SBGC32_RX+0x118>

					else
					{
						lastParserStatus = RX_BUFFER_REALTIME_ERROR;
 800830e:	2304      	movs	r3, #4
 8008310:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						break;
 8008314:	e0d8      	b.n	80084c8 <SBGC32_RX+0x2ca>
					}

					if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8008316:	7d3a      	ldrb	r2, [r7, #20]
 8008318:	7d7b      	ldrb	r3, [r7, #21]
 800831a:	4413      	add	r3, r2
 800831c:	b2da      	uxtb	r2, r3
 800831e:	7dbb      	ldrb	r3, [r7, #22]
 8008320:	429a      	cmp	r2, r3
 8008322:	d102      	bne.n	800832a <SBGC32_RX+0x12c>
						(headBuff[0] == 0))
 8008324:	7d3b      	ldrb	r3, [r7, #20]
					if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <SBGC32_RX+0x13a>
					{
						lastParserStatus = RX_HEADER_CHECKSUM_ERROR;
 800832a:	2305      	movs	r3, #5
 800832c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						parserState = STATE_RESYNC;
 8008330:	2301      	movs	r3, #1
 8008332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
 8008336:	e0c7      	b.n	80084c8 <SBGC32_RX+0x2ca>
					}

					parserState = STATE_CHECK_PAYLOAD;
 8008338:	2303      	movs	r3, #3
 800833a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;  // Passing to next state
 800833e:	e0c3      	b.n	80084c8 <SBGC32_RX+0x2ca>
				}

				/* Waiting whole payload and checksum */
				case STATE_CHECK_PAYLOAD :
				{
 8008340:	466b      	mov	r3, sp
 8008342:	469a      	mov	sl, r3
					ui8 checksumSize = ((generalSBGC->protocolVersion == PR2_START_CHARACTER) ? 2 : 1);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	7f1b      	ldrb	r3, [r3, #28]
 8008348:	2b24      	cmp	r3, #36	; 0x24
 800834a:	d101      	bne.n	8008350 <SBGC32_RX+0x152>
 800834c:	2302      	movs	r3, #2
 800834e:	e000      	b.n	8008352 <SBGC32_RX+0x154>
 8008350:	2301      	movs	r3, #1
 8008352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					ui8 complexBuff [3 + headBuff[1] + checksumSize];  // (Header + payload + checksum) buffer
 8008356:	7d7b      	ldrb	r3, [r7, #21]
 8008358:	1cda      	adds	r2, r3, #3
 800835a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800835e:	18d1      	adds	r1, r2, r3
 8008360:	1e4b      	subs	r3, r1, #1
 8008362:	623b      	str	r3, [r7, #32]
 8008364:	460a      	mov	r2, r1
 8008366:	2300      	movs	r3, #0
 8008368:	4614      	mov	r4, r2
 800836a:	461d      	mov	r5, r3
 800836c:	f04f 0200 	mov.w	r2, #0
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	00eb      	lsls	r3, r5, #3
 8008376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800837a:	00e2      	lsls	r2, r4, #3
 800837c:	460a      	mov	r2, r1
 800837e:	2300      	movs	r3, #0
 8008380:	4690      	mov	r8, r2
 8008382:	4699      	mov	r9, r3
 8008384:	f04f 0200 	mov.w	r2, #0
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008390:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008394:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008398:	460b      	mov	r3, r1
 800839a:	3307      	adds	r3, #7
 800839c:	08db      	lsrs	r3, r3, #3
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	ebad 0d03 	sub.w	sp, sp, r3
 80083a4:	466b      	mov	r3, sp
 80083a6:	3300      	adds	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]

					availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	4610      	mov	r0, r2
 80083b4:	4798      	blx	r3
 80083b6:	4603      	mov	r3, r0
 80083b8:	837b      	strh	r3, [r7, #26]

					if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 80083ba:	8b7a      	ldrh	r2, [r7, #26]
 80083bc:	7d7b      	ldrb	r3, [r7, #21]
 80083be:	4619      	mov	r1, r3
 80083c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083c4:	440b      	add	r3, r1
 80083c6:	429a      	cmp	r2, r3
 80083c8:	db22      	blt.n	8008410 <SBGC32_RX+0x212>
 80083ca:	8b7b      	ldrh	r3, [r7, #26]
 80083cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d01d      	beq.n	8008410 <SBGC32_RX+0x212>
						for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 80083d4:	2300      	movs	r3, #0
 80083d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80083da:	e00f      	b.n	80083fc <SBGC32_RX+0x1fe>
							generalSBGC->RxFunc(generalSBGC->Drv, &complexBuff[i + 3]);  // Offset from header space
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	6810      	ldr	r0, [r2, #0]
 80083e4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80083e8:	3203      	adds	r2, #3
 80083ea:	69f9      	ldr	r1, [r7, #28]
 80083ec:	440a      	add	r2, r1
 80083ee:	4611      	mov	r1, r2
 80083f0:	4798      	blx	r3
						for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 80083f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083f6:	3301      	adds	r3, #1
 80083f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80083fc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008400:	7d7b      	ldrb	r3, [r7, #21]
 8008402:	4619      	mov	r1, r3
 8008404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008408:	440b      	add	r3, r1
 800840a:	429a      	cmp	r2, r3
 800840c:	dbe6      	blt.n	80083dc <SBGC32_RX+0x1de>
 800840e:	e003      	b.n	8008418 <SBGC32_RX+0x21a>

					else
					{
						lastParserStatus = RX_BUFFER_REALTIME_ERROR;
 8008410:	2304      	movs	r3, #4
 8008412:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						break;
 8008416:	e056      	b.n	80084c6 <SBGC32_RX+0x2c8>
					}

					/* Checksum checking */
					if (!(checksumSize - 1))  // If SBGC_PROTOCOL_V1
 8008418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800841c:	2b01      	cmp	r3, #1
 800841e:	d115      	bne.n	800844c <SBGC32_RX+0x24e>
					{
						if (complexBuff[3 + headBuff[1]] != Modulo256_Calculate(&complexBuff[3], headBuff[1]))
 8008420:	7d7b      	ldrb	r3, [r7, #21]
 8008422:	3303      	adds	r3, #3
 8008424:	69fa      	ldr	r2, [r7, #28]
 8008426:	5cd6      	ldrb	r6, [r2, r3]
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	3303      	adds	r3, #3
 800842c:	7d7a      	ldrb	r2, [r7, #21]
 800842e:	b292      	uxth	r2, r2
 8008430:	4611      	mov	r1, r2
 8008432:	4618      	mov	r0, r3
 8008434:	f000 ff18 	bl	8009268 <Modulo256_Calculate>
 8008438:	4603      	mov	r3, r0
 800843a:	429e      	cmp	r6, r3
 800843c:	d031      	beq.n	80084a2 <SBGC32_RX+0x2a4>
						{
							lastParserStatus = RX_PAYLOAD_CHECKSUM_ERROR;
 800843e:	2306      	movs	r3, #6
 8008440:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							parserState = STATE_RESYNC;
 8008444:	2301      	movs	r3, #1
 8008446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
 800844a:	e03c      	b.n	80084c6 <SBGC32_RX+0x2c8>
						}
					}

					else
					{
						memcpy(complexBuff, headBuff, 3);
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	461a      	mov	r2, r3
 8008450:	f107 0314 	add.w	r3, r7, #20
 8008454:	8819      	ldrh	r1, [r3, #0]
 8008456:	789b      	ldrb	r3, [r3, #2]
 8008458:	8011      	strh	r1, [r2, #0]
 800845a:	7093      	strb	r3, [r2, #2]
						ui16 CRC_Res = CRC16_Calculate(complexBuff, headBuff[1] + 3);
 800845c:	7d7b      	ldrb	r3, [r7, #21]
 800845e:	b29b      	uxth	r3, r3
 8008460:	3303      	adds	r3, #3
 8008462:	b29b      	uxth	r3, r3
 8008464:	4619      	mov	r1, r3
 8008466:	69f8      	ldr	r0, [r7, #28]
 8008468:	f000 ff25 	bl	80092b6 <CRC16_Calculate>
 800846c:	4603      	mov	r3, r0
 800846e:	833b      	strh	r3, [r7, #24]

						if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8008470:	8b3b      	ldrh	r3, [r7, #24]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	7d7a      	ldrb	r2, [r7, #21]
 8008476:	3203      	adds	r2, #3
 8008478:	69f9      	ldr	r1, [r7, #28]
 800847a:	5c8a      	ldrb	r2, [r1, r2]
 800847c:	4293      	cmp	r3, r2
 800847e:	d010      	beq.n	80084a2 <SBGC32_RX+0x2a4>
						   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 8008480:	8b3b      	ldrh	r3, [r7, #24]
 8008482:	0a1b      	lsrs	r3, r3, #8
 8008484:	b29b      	uxth	r3, r3
 8008486:	b2db      	uxtb	r3, r3
 8008488:	7d7a      	ldrb	r2, [r7, #21]
 800848a:	3204      	adds	r2, #4
 800848c:	69f9      	ldr	r1, [r7, #28]
 800848e:	5c8a      	ldrb	r2, [r1, r2]
						if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8008490:	4293      	cmp	r3, r2
 8008492:	d006      	beq.n	80084a2 <SBGC32_RX+0x2a4>
						{
							lastParserStatus = RX_PAYLOAD_CHECKSUM_ERROR;
 8008494:	2306      	movs	r3, #6
 8008496:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							parserState = STATE_RESYNC;
 800849a:	2301      	movs	r3, #1
 800849c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
 80084a0:	e011      	b.n	80084c6 <SBGC32_RX+0x2c8>
						}
					}

					/* Data passed all checks. Filling the serialCommand struct */
					serialCommand->commandID = (SBGC_Command_t)headBuff[0];
 80084a2:	7d3a      	ldrb	r2, [r7, #20]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	701a      	strb	r2, [r3, #0]
					memcpy(serialCommand->payload, &complexBuff[3], headBuff[1]);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	1c58      	adds	r0, r3, #1
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	3303      	adds	r3, #3
 80084b0:	7d7a      	ldrb	r2, [r7, #21]
 80084b2:	4619      	mov	r1, r3
 80084b4:	f001 f952 	bl	800975c <memcpy>
					serialCommand->payloadSize = headBuff[1];
 80084b8:	7d7a      	ldrb	r2, [r7, #21]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

					return TX_RX_OK;  // Incoming command was received fine
 80084c0:	2300      	movs	r3, #0
 80084c2:	46d5      	mov	sp, sl
 80084c4:	e00f      	b.n	80084e6 <SBGC32_RX+0x2e8>
 80084c6:	46d5      	mov	sp, sl
				}
			}

			/* Timeout checking */
			if ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) >= timeout)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	4610      	mov	r0, r2
 80084d2:	4798      	blx	r3
 80084d4:	4602      	mov	r2, r0
 80084d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	429a      	cmp	r2, r3
 80084de:	f63f aeba 	bhi.w	8008256 <SBGC32_RX+0x58>
				return lastParserStatus;
 80084e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
		}
	}
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3730      	adds	r7, #48	; 0x30
 80084ea:	46bd      	mov	sp, r7
 80084ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084f0 <SBGC32_TX_RX>:
 *	@param	cmdID - SBGC32 command identifier
 *
 *	@return	Request response result
 */
TxRxStatus_t SBGC32_TX_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, SBGC_Command_t cmdID)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	4613      	mov	r3, r2
 80084fc:	71fb      	strb	r3, [r7, #7]
	TxRxStatus_t lastParserStatus;

	/* Send request */
	lastParserStatus = SBGC32_TX(generalSBGC, serialCommand);
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	f7ff fd5c 	bl	8007fbe <SBGC32_TX>
 8008506:	4603      	mov	r3, r0
 8008508:	75fb      	strb	r3, [r7, #23]

	if (lastParserStatus != TX_RX_OK)
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <SBGC32_TX_RX+0x24>
		return lastParserStatus;
 8008510:	7dfb      	ldrb	r3, [r7, #23]
 8008512:	e01c      	b.n	800854e <SBGC32_TX_RX+0x5e>

	lastParserStatus = SBGC32_FindCommand(generalSBGC, serialCommand, cmdID, generalSBGC->txrxTimeout);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	79fa      	ldrb	r2, [r7, #7]
 800851a:	68b9      	ldr	r1, [r7, #8]
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f81a 	bl	8008556 <SBGC32_FindCommand>
 8008522:	4603      	mov	r3, r0
 8008524:	75fb      	strb	r3, [r7, #23]

	if (getcommstatus_(lastParserStatus) == FALSE__)
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <SBGC32_TX_RX+0x42>
 800852c:	7dfb      	ldrb	r3, [r7, #23]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d101      	bne.n	8008536 <SBGC32_TX_RX+0x46>
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <SBGC32_TX_RX+0x48>
 8008536:	2300      	movs	r3, #0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d107      	bne.n	800854c <SBGC32_TX_RX+0x5c>
		generalSBGC->_missedCommandCount++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8b3 343a 	ldrh.w	r3, [r3, #1082]	; 0x43a
 8008542:	3301      	adds	r3, #1
 8008544:	b29a      	uxth	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a

	return lastParserStatus;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3718      	adds	r7, #24
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <SBGC32_FindCommand>:
 *			time for receiving desired SerialCommand
 *
 *	@return	Found result
 */
TxRxStatus_t SBGC32_FindCommand (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, SBGC_Command_t cmdID, ui32 timeout)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b088      	sub	sp, #32
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	4613      	mov	r3, r2
 8008564:	71fb      	strb	r3, [r7, #7]
	ui16 unexpectedCommandsBuffTailTemp = generalSBGC->_unexpectedCommandsBuffTail;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 800856c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008570:	b29b      	uxth	r3, r3
 8008572:	83fb      	strh	r3, [r7, #30]

	TxRxStatus_t lastParserStatus;
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	6812      	ldr	r2, [r2, #0]
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	61b8      	str	r0, [r7, #24]

	while (1)
	{
		lastParserStatus = SBGC32_RX(generalSBGC, serialCommand, generalSBGC->rxTimeout);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	461a      	mov	r2, r3
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff fe37 	bl	80081fe <SBGC32_RX>
 8008590:	4603      	mov	r3, r0
 8008592:	75fb      	strb	r3, [r7, #23]

		if (getcommstatus_(lastParserStatus) &&
 8008594:	7dfb      	ldrb	r3, [r7, #23]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <SBGC32_FindCommand+0x4a>
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d152      	bne.n	8008646 <SBGC32_FindCommand+0xf0>
			(serialCommand->commandID == cmdID))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	781b      	ldrb	r3, [r3, #0]
		if (getcommstatus_(lastParserStatus) &&
 80085a4:	79fa      	ldrb	r2, [r7, #7]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d14d      	bne.n	8008646 <SBGC32_FindCommand+0xf0>
			/* Has correct command parsed */
		{
			#if (UNEXP_CMD_BUFFER)

				ui8 deletedCmdSize = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	75bb      	strb	r3, [r7, #22]

				if (lastParserStatus == RX_BUFFERED_COMMAND)
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d13b      	bne.n	800862c <SBGC32_FindCommand+0xd6>
				{
					deletedCmdSize = DeleteUnexpectedCommand(generalSBGC, generalSBGC->_unexpectedCommandCurrentPointer);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 80085ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f7ff fc32 	bl	8007e2c <DeleteUnexpectedCommand>
 80085c8:	4603      	mov	r3, r0
 80085ca:	75bb      	strb	r3, [r7, #22]

					if (generalSBGC->_unexpectedCommandCurrentPointer ==
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 80085d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	461a      	mov	r2, r3
						((generalSBGC->_unexpectedCommandsBuffTail - deletedCmdSize) & UNEXP_CMD_BUFFER_SIZE_MASK))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 80085e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	4619      	mov	r1, r3
 80085e8:	7dbb      	ldrb	r3, [r7, #22]
 80085ea:	1acb      	subs	r3, r1, r3
 80085ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
					if (generalSBGC->_unexpectedCommandCurrentPointer ==
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d114      	bne.n	800861e <SBGC32_FindCommand+0xc8>
						/* If this command was latest it is need to shift tail by deletedCmdSize backward */
						generalSBGC->_unexpectedCommandsBuffTail -= deletedCmdSize;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 80085fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085fe:	b29b      	uxth	r3, r3
 8008600:	461a      	mov	r2, r3
 8008602:	7dbb      	ldrb	r3, [r7, #22]
 8008604:	b29b      	uxth	r3, r3
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	b29b      	uxth	r3, r3
 800860a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800860e:	b299      	uxth	r1, r3
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8008616:	f361 0309 	bfi	r3, r1, #0, #10
 800861a:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434

					unexpectedCommandsBuffTailTemp = generalSBGC->_unexpectedCommandsBuffTail;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8008624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008628:	b29b      	uxth	r3, r3
 800862a:	83fb      	strh	r3, [r7, #30]
				}

				generalSBGC->_unexpectedCommandsBuffTail = unexpectedCommandsBuffTailTemp;
 800862c:	8bfb      	ldrh	r3, [r7, #30]
 800862e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008632:	b299      	uxth	r1, r3
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 800863a:	f361 0309 	bfi	r3, r1, #0, #10
 800863e:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434

			#endif

			return lastParserStatus;
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	e036      	b.n	80086b4 <SBGC32_FindCommand+0x15e>
		}

		#if (UNEXP_CMD_BUFFER)

			if (serialCommand->commandID != cmdID)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	79fa      	ldrb	r2, [r7, #7]
 800864c:	429a      	cmp	r2, r3
 800864e:	d018      	beq.n	8008682 <SBGC32_FindCommand+0x12c>
				/* Has wrong command parsed */
			{
				if (lastParserStatus == TX_RX_OK)
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d115      	bne.n	8008682 <SBGC32_FindCommand+0x12c>
				{
					/* Remember old tail temp pointer before new command saving */
					generalSBGC->_unexpectedCommandsBuffTail = unexpectedCommandsBuffTailTemp;
 8008656:	8bfb      	ldrh	r3, [r7, #30]
 8008658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800865c:	b299      	uxth	r1, r3
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8008664:	f361 0309 	bfi	r3, r1, #0, #10
 8008668:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434

					SaveUnexpectedCommand(generalSBGC, serialCommand);
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f7ff fb14 	bl	8007c9c <SaveUnexpectedCommand>

					/* Rewrite to new tail pointer */
					unexpectedCommandsBuffTailTemp = generalSBGC->_unexpectedCommandsBuffTail;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 800867a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800867e:	b29b      	uxth	r3, r3
 8008680:	83fb      	strh	r3, [r7, #30]
			}

		#endif

		/* Timeout checking */
		if ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) >= timeout)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	6812      	ldr	r2, [r2, #0]
 800868a:	4610      	mov	r0, r2
 800868c:	4798      	blx	r3
 800868e:	4602      	mov	r2, r0
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	f63f af73 	bhi.w	8008582 <SBGC32_FindCommand+0x2c>
		{
			generalSBGC->_unexpectedCommandsBuffTail = unexpectedCommandsBuffTailTemp;
 800869c:	8bfb      	ldrh	r3, [r7, #30]
 800869e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086a2:	b299      	uxth	r1, r3
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 80086aa:	f361 0309 	bfi	r3, r1, #0, #10
 80086ae:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434

			return RX_TIMEOUT_ERROR;
 80086b2:	2308      	movs	r3, #8
		}
	}
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3720      	adds	r7, #32
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <ConvertWithPM>:
 *	@param	parserMap - data type required for correct parsing
 *
 *	@return	size of written data
 */
ui8 ConvertWithPM (void *pDestination, const void *pSource, ui8 size, ParserMap_t parserMap)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4611      	mov	r1, r2
 80086c8:	461a      	mov	r2, r3
 80086ca:	460b      	mov	r3, r1
 80086cc:	71fb      	strb	r3, [r7, #7]
 80086ce:	4613      	mov	r3, r2
 80086d0:	71bb      	strb	r3, [r7, #6]
	if (size == 0)
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d101      	bne.n	80086dc <ConvertWithPM+0x20>
		return 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	e00c      	b.n	80086f6 <ConvertWithPM+0x3a>

	memcpy(pDestination, pSource, size);
 80086dc:	79fb      	ldrb	r3, [r7, #7]
 80086de:	461a      	mov	r2, r3
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	f001 f83a 	bl	800975c <memcpy>
	SwapBytesInStruct((ui8*)pDestination, size, parserMap);
 80086e8:	79ba      	ldrb	r2, [r7, #6]
 80086ea:	79fb      	ldrb	r3, [r7, #7]
 80086ec:	4619      	mov	r1, r3
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f862 	bl	80087b8 <SwapBytesInStruct>
	return size;
 80086f4:	79fb      	ldrb	r3, [r7, #7]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <WriteBuff>:
 * 	@param	*buff - write data
 * 	@param	size - write data size
 * 	@param	parserMap - data type required for correct parsing
 */
void WriteBuff (SerialCommand_t *cmd, const void *buff, ui8 size, ParserMap_t parserMap)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	60b9      	str	r1, [r7, #8]
 8008708:	4611      	mov	r1, r2
 800870a:	461a      	mov	r2, r3
 800870c:	460b      	mov	r3, r1
 800870e:	71fb      	strb	r3, [r7, #7]
 8008710:	4613      	mov	r3, r2
 8008712:	71bb      	strb	r3, [r7, #6]
	if (cmd->payloadSize > MAX_BUFF_SIZE - size)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800871a:	461a      	mov	r2, r3
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008722:	429a      	cmp	r2, r3
 8008724:	dc16      	bgt.n	8008754 <WriteBuff+0x56>
		return;  // data will not fit
	
	cmd->payloadSize += ConvertWithPM(&cmd->payload[cmd->payloadSize], buff, size, parserMap);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800872c:	461a      	mov	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	4413      	add	r3, r2
 8008732:	1c58      	adds	r0, r3, #1
 8008734:	79bb      	ldrb	r3, [r7, #6]
 8008736:	79fa      	ldrb	r2, [r7, #7]
 8008738:	68b9      	ldr	r1, [r7, #8]
 800873a:	f7ff ffbf 	bl	80086bc <ConvertWithPM>
 800873e:	4603      	mov	r3, r0
 8008740:	461a      	mov	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008748:	4413      	add	r3, r2
 800874a:	b2da      	uxtb	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8008752:	e000      	b.n	8008756 <WriteBuff+0x58>
		return;  // data will not fit
 8008754:	bf00      	nop
}
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <ReadBuff>:
 *	@param	*buff - read data buffer
 *	@param	size - read data size
 *	@param	parserMap - data type required for correct parsing
 */
void ReadBuff (SerialCommand_t *cmd, void *buff, ui8 size, ParserMap_t parserMap)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4611      	mov	r1, r2
 8008768:	461a      	mov	r2, r3
 800876a:	460b      	mov	r3, r1
 800876c:	71fb      	strb	r3, [r7, #7]
 800876e:	4613      	mov	r3, r2
 8008770:	71bb      	strb	r3, [r7, #6]
	if (size > (MAX_BUFF_SIZE - cmd->readPos))
 8008772:	79fa      	ldrb	r2, [r7, #7]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800877a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800877e:	429a      	cmp	r2, r3
 8008780:	dc16      	bgt.n	80087b0 <ReadBuff+0x54>
		return;  // data will not fit
	
	cmd->readPos += ConvertWithPM(buff, &cmd->payload[cmd->readPos], size, parserMap);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008788:	461a      	mov	r2, r3
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4413      	add	r3, r2
 800878e:	1c59      	adds	r1, r3, #1
 8008790:	79bb      	ldrb	r3, [r7, #6]
 8008792:	79fa      	ldrb	r2, [r7, #7]
 8008794:	68b8      	ldr	r0, [r7, #8]
 8008796:	f7ff ff91 	bl	80086bc <ConvertWithPM>
 800879a:	4603      	mov	r3, r0
 800879c:	461a      	mov	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80087a4:	4413      	add	r3, r2
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 80087ae:	e000      	b.n	80087b2 <ReadBuff+0x56>
		return;  // data will not fit
 80087b0:	bf00      	nop
}
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <SwapBytesInStruct>:
 *	@param 	*structure - structure buffer to bytes rearrange
 *	@param	size - structure buffer size
 *	@param	parserMap - data type required for correct parsing
 */
void SwapBytesInStruct (ui8 *structure, ui8 size, ParserMap_t parserMap)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
 80087c4:	4613      	mov	r3, r2
 80087c6:	70bb      	strb	r3, [r7, #2]
		unused_(structure);
		unused_(size);
		unused_(parserMap);

	#endif
}
 80087c8:	bf00      	nop
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
void ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	4613      	mov	r3, r2
 80087e0:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d80b      	bhi.n	8008800 <ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d101      	bne.n	80087f2 <ToLittleEndian+0x1e>
 80087ee:	2304      	movs	r3, #4
 80087f0:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	461a      	mov	r2, r3
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	68b8      	ldr	r0, [r7, #8]
 80087fa:	f000 ffaf 	bl	800975c <memcpy>
 80087fe:	e000      	b.n	8008802 <ToLittleEndian+0x2e>
	if (size > 4) return;
 8008800:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
void FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	2b04      	cmp	r3, #4
 800881a:	d80b      	bhi.n	8008834 <FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 800881c:	79fb      	ldrb	r3, [r7, #7]
 800881e:	2b03      	cmp	r3, #3
 8008820:	d101      	bne.n	8008826 <FromLittleEndian+0x1e>
 8008822:	2304      	movs	r3, #4
 8008824:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	461a      	mov	r2, r3
 800882a:	68b9      	ldr	r1, [r7, #8]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f000 ff95 	bl	800975c <memcpy>
 8008832:	e000      	b.n	8008836 <FromLittleEndian+0x2e>
	if (size > 4) return;
 8008834:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <WriteByte>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	byte - byte to write
 */
void WriteByte (SerialCommand_t *cmd, const ui8 byte)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
	if (cmd->payloadSize < MAX_BUFF_SIZE)
		cmd->payload[cmd->payloadSize++] = byte;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	b2d1      	uxtb	r1, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 8008858:	461a      	mov	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4413      	add	r3, r2
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	705a      	strb	r2, [r3, #1]
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <ReadByte>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Byte read
 */
ui8 ReadByte (SerialCommand_t *cmd)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
	return cmd->payload[cmd->readPos++];
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	b2d1      	uxtb	r1, r2
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	f882 1102 	strb.w	r1, [r2, #258]	; 0x102
 8008886:	461a      	mov	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4413      	add	r3, r2
 800888c:	785b      	ldrb	r3, [r3, #1]
}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <WriteWord>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	word - two bytes to write
 */
void WriteWord (SerialCommand_t *cmd, const ui16 word)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	807b      	strh	r3, [r7, #2]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 2)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80088ac:	2bff      	cmp	r3, #255	; 0xff
 80088ae:	d013      	beq.n	80088d8 <WriteWord+0x3e>
	{
		ToLittleEndian(&word, &cmd->payload[cmd->payloadSize], 2);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80088b6:	461a      	mov	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4413      	add	r3, r2
 80088bc:	1c59      	adds	r1, r3, #1
 80088be:	1cbb      	adds	r3, r7, #2
 80088c0:	2202      	movs	r2, #2
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff ff86 	bl	80087d4 <ToLittleEndian>
		cmd->payloadSize += 2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80088ce:	3302      	adds	r3, #2
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <ReadWord>:
 *	@param 	*cmd - SerialCommand
 *
 *	@return	Word read
 */
ui16 ReadWord (SerialCommand_t *cmd)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
	ui16 word;
	FromLittleEndian(&word, &cmd->payload[cmd->readPos], 2);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80088ee:	461a      	mov	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4413      	add	r3, r2
 80088f4:	1c59      	adds	r1, r3, #1
 80088f6:	f107 030e 	add.w	r3, r7, #14
 80088fa:	2202      	movs	r2, #2
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7ff ff83 	bl	8008808 <FromLittleEndian>
	cmd->readPos += 2;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008908:	3302      	adds	r3, #2
 800890a:	b2da      	uxtb	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return word;
 8008912:	89fb      	ldrh	r3, [r7, #14]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <WriteLong>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	dword - four bytes to write
 */
void WriteLong (SerialCommand_t *cmd, const ui32 dword)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 4)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800892c:	2bfc      	cmp	r3, #252	; 0xfc
 800892e:	d813      	bhi.n	8008958 <WriteLong+0x3c>
	{
		ToLittleEndian(&dword, &cmd->payload[cmd->payloadSize], 4);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008936:	461a      	mov	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4413      	add	r3, r2
 800893c:	1c59      	adds	r1, r3, #1
 800893e:	463b      	mov	r3, r7
 8008940:	2204      	movs	r2, #4
 8008942:	4618      	mov	r0, r3
 8008944:	f7ff ff46 	bl	80087d4 <ToLittleEndian>
		cmd->payloadSize += 4;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800894e:	3304      	adds	r3, #4
 8008950:	b2da      	uxtb	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 8008958:	bf00      	nop
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <ReadLong>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Long read
 */
ui32 ReadLong (SerialCommand_t *cmd)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	ui32 dword;
	FromLittleEndian(&dword, &cmd->payload[cmd->readPos], 4);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800896e:	461a      	mov	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4413      	add	r3, r2
 8008974:	1c59      	adds	r1, r3, #1
 8008976:	f107 030c 	add.w	r3, r7, #12
 800897a:	2204      	movs	r2, #4
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff ff43 	bl	8008808 <FromLittleEndian>
	cmd->readPos += 4;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8008988:	3304      	adds	r3, #4
 800898a:	b2da      	uxtb	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return dword;
 8008992:	68fb      	ldr	r3, [r7, #12]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <SkipBytes>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	size - size of skipped data
 */
void SkipBytes (SerialCommand_t *cmd, ui8 size)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
	cmd->readPos += size;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 80089ae:	78fb      	ldrb	r3, [r7, #3]
 80089b0:	4413      	add	r3, r2
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <InitCmdWrite>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	cmdID - SBGC32 command identifier
 */
void InitCmdWrite (SerialCommand_t *cmd, SBGC_Command_t cmdID)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
	cmd->commandID = cmdID;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	78fa      	ldrb	r2, [r7, #3]
 80089d6:	701a      	strb	r2, [r3, #0]
	cmd->payloadSize = 0;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <SBGC32_ManualInit>:
 */
TxRxStatus_t SBGC32_ManualInit (GeneralSBGC_t *generalSBGC, TxFunc_t TxFunc, RxFunc_t RxFunc,
								AvailableBytesFunc_t AvailableBytesFunc, TxDebugFunc_t TxDebugFunc,
								GetTimeFunc_t GetTimeFunc, SprintfFunc_t SprintfFunc,
								SBGC_ProtocolVersion_t protocolVersion)
{
 80089ec:	b590      	push	{r4, r7, lr}
 80089ee:	b0cb      	sub	sp, #300	; 0x12c
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80089f6:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80089fa:	6020      	str	r0, [r4, #0]
 80089fc:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8008a00:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8008a04:	6001      	str	r1, [r0, #0]
 8008a06:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8008a0a:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8008a0e:	600a      	str	r2, [r1, #0]
 8008a10:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008a14:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8008a18:	6013      	str	r3, [r2, #0]
	generalSBGC->TxFunc = TxFunc;
 8008a1a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008a1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008a28:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8008a2c:	6812      	ldr	r2, [r2, #0]
 8008a2e:	605a      	str	r2, [r3, #4]
	generalSBGC->RxFunc = RxFunc;
 8008a30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008a34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008a3e:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8008a42:	6812      	ldr	r2, [r2, #0]
 8008a44:	609a      	str	r2, [r3, #8]
	generalSBGC->AvailableBytesFunc = AvailableBytesFunc;
 8008a46:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008a4a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008a54:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	60da      	str	r2, [r3, #12]
	generalSBGC->TxDebugFunc = TxDebugFunc;
 8008a5c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008a60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008a6a:	611a      	str	r2, [r3, #16]
	generalSBGC->GetTimeFunc = GetTimeFunc;
 8008a6c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008a70:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8008a7a:	615a      	str	r2, [r3, #20]
	generalSBGC->SprintfFunc = SprintfFunc;
 8008a7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008a80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008a8a:	619a      	str	r2, [r3, #24]
	generalSBGC->protocolVersion = protocolVersion;
 8008a8c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008a90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008a9a:	771a      	strb	r2, [r3, #28]

	generalSBGC->txTimeout = SBGC_TX_WAITING;
 8008a9c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008aa0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2264      	movs	r2, #100	; 0x64
 8008aa8:	621a      	str	r2, [r3, #32]
	generalSBGC->rxTimeout = SBGC_RX_WAITING;
 8008aaa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008aae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ab8:	625a      	str	r2, [r3, #36]	; 0x24
	generalSBGC->txrxTimeout = SBGC_REQ_WAITING;
 8008aba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008abe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ac8:	629a      	str	r2, [r3, #40]	; 0x28

	generalSBGC->_txErrorsCount = 0;
 8008aca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008ace:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	861a      	strh	r2, [r3, #48]	; 0x30
	generalSBGC->_rxErrorsCount = 0;
 8008ad8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008adc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	865a      	strh	r2, [r3, #50]	; 0x32

	#if (UNEXP_CMD_BUFFER)

		generalSBGC->_unexpectedCommandsBuffTail = 0;
 8008ae6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008aea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8008af4:	f36f 0309 	bfc	r3, #0, #10
 8008af8:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
		generalSBGC->_unexpectedCommandsBuffHead = 0;
 8008afc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008b00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 8008b0a:	f36f 0309 	bfc	r3, #0, #10
 8008b0e:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436

	#endif

	generalSBGC->_missedCommandCount = 0;
 8008b12:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008b16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8a3 243a 	strh.w	r2, [r3, #1082]	; 0x43a

	/* Startup delay */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8008b22:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008b26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008b32:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008b36:	6812      	ldr	r2, [r2, #0]
 8008b38:	6812      	ldr	r2, [r2, #0]
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	4798      	blx	r3
 8008b3e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	while ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) < SBGC_STARTUP_DELAY);
 8008b42:	bf00      	nop
 8008b44:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008b48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8008b54:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	6812      	ldr	r2, [r2, #0]
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	4602      	mov	r2, r0
 8008b62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008b66:	1ad3      	subs	r3, r2, r3
 8008b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b6c:	d3ea      	bcc.n	8008b44 <SBGC32_ManualInit+0x158>

	/* Getting board information */
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO);
 8008b6e:	f107 0320 	add.w	r3, r7, #32
 8008b72:	2156      	movs	r1, #86	; 0x56
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff ff26 	bl	80089c6 <InitCmdWrite>
	WriteWord(&cmd, 0);  // cfg = 0
 8008b7a:	f107 0320 	add.w	r3, r7, #32
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fe8a 	bl	800889a <WriteWord>

	if (getcommstatus_(CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO), "Board Info:")))
 8008b86:	f107 0120 	add.w	r1, r7, #32
 8008b8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008b8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008b92:	2256      	movs	r2, #86	; 0x56
 8008b94:	6818      	ldr	r0, [r3, #0]
 8008b96:	f7ff fcab 	bl	80084f0 <SBGC32_TX_RX>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008ba2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ba6:	4a80      	ldr	r2, [pc, #512]	; (8008da8 <SBGC32_ManualInit+0x3bc>)
 8008ba8:	6818      	ldr	r0, [r3, #0]
 8008baa:	f000 faa1 	bl	80090f0 <CheckReceipt>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d016      	beq.n	8008be2 <SBGC32_ManualInit+0x1f6>
 8008bb4:	f107 0120 	add.w	r1, r7, #32
 8008bb8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008bbc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008bc0:	2256      	movs	r2, #86	; 0x56
 8008bc2:	6818      	ldr	r0, [r3, #0]
 8008bc4:	f7ff fc94 	bl	80084f0 <SBGC32_TX_RX>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	4619      	mov	r1, r3
 8008bcc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008bd0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008bd4:	4a74      	ldr	r2, [pc, #464]	; (8008da8 <SBGC32_ManualInit+0x3bc>)
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	f000 fa8a 	bl	80090f0 <CheckReceipt>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d11a      	bne.n	8008c18 <SBGC32_ManualInit+0x22c>
	{
		generalSBGC->_boardVersion = cmd.payload[0];
 8008be2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bea:	785a      	ldrb	r2, [r3, #1]
 8008bec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008bf0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		FromLittleEndian(&generalSBGC->_firmwareVersion, &cmd.payload[1], 2);
 8008bfa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008bfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8008c08:	f107 0320 	add.w	r3, r7, #32
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	2202      	movs	r2, #2
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7ff fdf9 	bl	8008808 <FromLittleEndian>
 8008c16:	e00e      	b.n	8008c36 <SBGC32_ManualInit+0x24a>
	}

	else
	{
		generalSBGC->_boardVersion = 0;
 8008c18:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		generalSBGC->_firmwareVersion = 0;
 8008c28:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	85da      	strh	r2, [r3, #46]	; 0x2e
	#if (SBGC_DEBUG_MODE)

		char boardVersionStr [5],
			 firmwareVersionStr [8];

		FormatBoardVersion(generalSBGC, generalSBGC->_boardVersion, boardVersionStr);
 8008c36:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8008c44:	f107 0218 	add.w	r2, r7, #24
 8008c48:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	f7fe ffaf 	bl	8007bb4 <FormatBoardVersion>
		FormatFirmwareVersion(generalSBGC, generalSBGC->_firmwareVersion, firmwareVersionStr);
 8008c56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8008c62:	f107 0210 	add.w	r2, r7, #16
 8008c66:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	f7fe ffc8 	bl	8007c04 <FormatFirmwareVersion>

		PrintMessage(generalSBGC, TEXT_SIZE_(" \n"));
 8008c74:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c78:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	494b      	ldr	r1, [pc, #300]	; (8008dac <SBGC32_ManualInit+0x3c0>)
 8008c80:	6818      	ldr	r0, [r3, #0]
 8008c82:	f000 fb59 	bl	8009338 <PrintMessage>
		PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n"));
 8008c86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008c8e:	221f      	movs	r2, #31
 8008c90:	4947      	ldr	r1, [pc, #284]	; (8008db0 <SBGC32_ManualInit+0x3c4>)
 8008c92:	6818      	ldr	r0, [r3, #0]
 8008c94:	f000 fb50 	bl	8009338 <PrintMessage>

		if (getcommstatus_(generalSBGC->_parserCurrentStatus))
 8008c98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008c9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d008      	beq.n	8008cbc <SBGC32_ManualInit+0x2d0>
 8008caa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008cae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d156      	bne.n	8008d6a <SBGC32_ManualInit+0x37e>
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("The system is ready to go!\n"));
 8008cbc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008cc0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cc4:	221b      	movs	r2, #27
 8008cc6:	493b      	ldr	r1, [pc, #236]	; (8008db4 <SBGC32_ManualInit+0x3c8>)
 8008cc8:	6818      	ldr	r0, [r3, #0]
 8008cca:	f000 fb35 	bl	8009338 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)"Board Version: "));
 8008cce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008cd2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cd6:	220f      	movs	r2, #15
 8008cd8:	4937      	ldr	r1, [pc, #220]	; (8008db8 <SBGC32_ManualInit+0x3cc>)
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	f000 fb2c 	bl	8009338 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_(boardVersionStr));
 8008ce0:	f107 0318 	add.w	r3, r7, #24
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7f7 faab 	bl	8000240 <strlen>
 8008cea:	4603      	mov	r3, r0
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	f107 0118 	add.w	r1, r7, #24
 8008cf2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008cf6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	f000 fb1c 	bl	8009338 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)" \n"));
 8008d00:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008d04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d08:	2202      	movs	r2, #2
 8008d0a:	4928      	ldr	r1, [pc, #160]	; (8008dac <SBGC32_ManualInit+0x3c0>)
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	f000 fb13 	bl	8009338 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)"Firmware Version: "));
 8008d12:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008d16:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d1a:	2212      	movs	r2, #18
 8008d1c:	4927      	ldr	r1, [pc, #156]	; (8008dbc <SBGC32_ManualInit+0x3d0>)
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	f000 fb0a 	bl	8009338 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_(firmwareVersionStr));
 8008d24:	f107 0310 	add.w	r3, r7, #16
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7f7 fa89 	bl	8000240 <strlen>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	f107 0110 	add.w	r1, r7, #16
 8008d36:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008d3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	f000 fafa 	bl	8009338 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)" \n"));
 8008d44:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008d48:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d4c:	2202      	movs	r2, #2
 8008d4e:	4917      	ldr	r1, [pc, #92]	; (8008dac <SBGC32_ManualInit+0x3c0>)
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	f000 faf1 	bl	8009338 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\n"));
 8008d56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008d5a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d5e:	2220      	movs	r2, #32
 8008d60:	4917      	ldr	r1, [pc, #92]	; (8008dc0 <SBGC32_ManualInit+0x3d4>)
 8008d62:	6818      	ldr	r0, [r3, #0]
 8008d64:	f000 fae8 	bl	8009338 <PrintMessage>
 8008d68:	e011      	b.n	8008d8e <SBGC32_ManualInit+0x3a2>
		}

		else
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("Communication Error!\n"));
 8008d6a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008d6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d72:	2215      	movs	r2, #21
 8008d74:	4913      	ldr	r1, [pc, #76]	; (8008dc4 <SBGC32_ManualInit+0x3d8>)
 8008d76:	6818      	ldr	r0, [r3, #0]
 8008d78:	f000 fade 	bl	8009338 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\n"));
 8008d7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008d80:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d84:	2220      	movs	r2, #32
 8008d86:	490e      	ldr	r1, [pc, #56]	; (8008dc0 <SBGC32_ManualInit+0x3d4>)
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f000 fad5 	bl	8009338 <PrintMessage>
		}

	#endif

	return generalSBGC->_parserCurrentStatus;
 8008d8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008d92:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd90      	pop	{r4, r7, pc}
 8008da6:	bf00      	nop
 8008da8:	0800e004 	.word	0x0800e004
 8008dac:	0800e010 	.word	0x0800e010
 8008db0:	0800e014 	.word	0x0800e014
 8008db4:	0800e034 	.word	0x0800e034
 8008db8:	0800e050 	.word	0x0800e050
 8008dbc:	0800e060 	.word	0x0800e060
 8008dc0:	0800e074 	.word	0x0800e074
 8008dc4:	0800e098 	.word	0x0800e098

08008dc8 <SBGC32_CheckConfirmation>:
 *	@param	cmdID - identifier of the SerialCommand being confirmed
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_CheckConfirmation (GeneralSBGC_t *generalSBGC, SBGC_Command_t cmdID)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b0cd      	sub	sp, #308	; 0x134
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dd6:	6018      	str	r0, [r3, #0]
 8008dd8:	460a      	mov	r2, r1
 8008dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dde:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008de2:	701a      	strb	r2, [r3, #0]
	#if (SBGC_CONFIRM_CMD)

		SerialCommand_t cmd;
		TxRxStatus_t lastParserStatus;
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8008de4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008de8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008df4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008df8:	6812      	ldr	r2, [r2, #0]
 8008dfa:	6812      	ldr	r2, [r2, #0]
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	4798      	blx	r3
 8008e00:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			char debugStr [30];
		#endif

		while (1)
		{
			lastParserStatus = SBGC32_FindCommand(generalSBGC, &cmd, CMD_CONFIRM, generalSBGC->rxTimeout);
 8008e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008e14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e18:	f5a2 7096 	sub.w	r0, r2, #300	; 0x12c
 8008e1c:	2243      	movs	r2, #67	; 0x43
 8008e1e:	6800      	ldr	r0, [r0, #0]
 8008e20:	f7ff fb99 	bl	8008556 <SBGC32_FindCommand>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

			if (getcommstatus_(lastParserStatus) &&
 8008e2a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <SBGC32_CheckConfirmation+0x74>
 8008e32:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	f040 80a5 	bne.w	8008f86 <SBGC32_CheckConfirmation+0x1be>
				((cmd.commandID == CMD_CONFIRM) && (cmdID == cmd.payload[0])))
 8008e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e44:	781b      	ldrb	r3, [r3, #0]
			if (getcommstatus_(lastParserStatus) &&
 8008e46:	2b43      	cmp	r3, #67	; 0x43
 8008e48:	f040 809d 	bne.w	8008f86 <SBGC32_CheckConfirmation+0x1be>
				((cmd.commandID == CMD_CONFIRM) && (cmdID == cmd.payload[0])))
 8008e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e5a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008e5e:	7812      	ldrb	r2, [r2, #0]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	f040 8090 	bne.w	8008f86 <SBGC32_CheckConfirmation+0x1be>
			{
				generalSBGC->_confirmationParams.cmdID = ReadByte(&cmd);
 8008e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff fcff 	bl	800886e <ReadByte>
 8008e70:	4603      	mov	r3, r0
 8008e72:	461a      	mov	r2, r3
 8008e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

				if (cmd.payloadSize == 2)
 8008e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e8a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d10e      	bne.n	8008eb0 <SBGC32_CheckConfirmation+0xe8>
					generalSBGC->_confirmationParams.cmdData = ReadByte(&cmd);
 8008e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fce9 	bl	800886e <ReadByte>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ea4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f8a3 243e 	strh.w	r2, [r3, #1086]	; 0x43e
 8008eae:	e015      	b.n	8008edc <SBGC32_CheckConfirmation+0x114>
				else if (cmd.payloadSize == 3)
 8008eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	d10d      	bne.n	8008edc <SBGC32_CheckConfirmation+0x114>
					generalSBGC->_confirmationParams.cmdData = ReadWord(&cmd);
 8008ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7ff fd0b 	bl	80088e0 <ReadWord>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ed2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f8a3 243e 	strh.w	r2, [r3, #1086]	; 0x43e

				#if (SBGC_DEBUG_MODE)

					if (cmd.payloadSize <= 1)
 8008edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee4:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d811      	bhi.n	8008f10 <SBGC32_CheckConfirmation+0x148>
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d\n", generalSBGC->_confirmationParams.cmdID);
 8008eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008efc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008f00:	6812      	ldr	r2, [r2, #0]
 8008f02:	f892 243d 	ldrb.w	r2, [r2, #1085]	; 0x43d
 8008f06:	f107 0008 	add.w	r0, r7, #8
 8008f0a:	4975      	ldr	r1, [pc, #468]	; (80090e0 <SBGC32_CheckConfirmation+0x318>)
 8008f0c:	4798      	blx	r3
 8008f0e:	e018      	b.n	8008f42 <SBGC32_CheckConfirmation+0x17a>
					else
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d (%u)\n", generalSBGC->_confirmationParams.cmdID,
 8008f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	699c      	ldr	r4, [r3, #24]
 8008f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8008f2a:	461a      	mov	r2, r3
																					 generalSBGC->_confirmationParams.cmdData);
 8008f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d (%u)\n", generalSBGC->_confirmationParams.cmdID,
 8008f3a:	f107 0008 	add.w	r0, r7, #8
 8008f3e:	4969      	ldr	r1, [pc, #420]	; (80090e4 <SBGC32_CheckConfirmation+0x31c>)
 8008f40:	47a0      	blx	r4

					PrintMessage(generalSBGC, debugStr, strlen(debugStr));
 8008f42:	f107 0308 	add.w	r3, r7, #8
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7f7 f97a 	bl	8000240 <strlen>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	f107 0108 	add.w	r1, r7, #8
 8008f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	f000 f9eb 	bl	8009338 <PrintMessage>

				#endif

				generalSBGC->_parserCurrentStatus = lastParserStatus;
 8008f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8008f70:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				generalSBGC->_confirmationStatus = CONFIRMATION_OK;
 8008f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
				break;
 8008f84:	e0a0      	b.n	80090c8 <SBGC32_CheckConfirmation+0x300>
			}

			else if (getcommstatus_(lastParserStatus) && (cmd.commandID == CMD_ERROR))
 8008f86:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <SBGC32_CheckConfirmation+0x1ce>
 8008f8e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d164      	bne.n	8009060 <SBGC32_CheckConfirmation+0x298>
 8008f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2bff      	cmp	r3, #255	; 0xff
 8008fa2:	d15d      	bne.n	8009060 <SBGC32_CheckConfirmation+0x298>
			{
				generalSBGC->_confirmationParams.errCode = ReadByte(&cmd);
 8008fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff fc60 	bl	800886e <ReadByte>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440

				if (cmd.payloadSize > 1)
 8008fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d90c      	bls.n	8008fea <SBGC32_CheckConfirmation+0x222>
					ReadBuff(&cmd, &generalSBGC->_confirmationParams.errData, 4, PM_DEFAULT_8BIT);
 8008fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f203 4141 	addw	r1, r3, #1089	; 0x441
 8008fde:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2204      	movs	r2, #4
 8008fe6:	f7ff fbb9 	bl	800875c <ReadBuff>

				#if (SBGC_DEBUG_MODE)

					generalSBGC->SprintfFunc(debugStr, "CMD_ERROR: #%d (%d)\n", generalSBGC->_confirmationParams.errCode,
 8008fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699c      	ldr	r4, [r3, #24]
 8008ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8009004:	461a      	mov	r2, r3
																				generalSBGC->_confirmationParams.errData[0]);
 8009006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800900a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f893 3441 	ldrb.w	r3, [r3, #1089]	; 0x441
					generalSBGC->SprintfFunc(debugStr, "CMD_ERROR: #%d (%d)\n", generalSBGC->_confirmationParams.errCode,
 8009014:	f107 0008 	add.w	r0, r7, #8
 8009018:	4933      	ldr	r1, [pc, #204]	; (80090e8 <SBGC32_CheckConfirmation+0x320>)
 800901a:	47a0      	blx	r4

					PrintMessage(generalSBGC, debugStr, strlen(debugStr));
 800901c:	f107 0308 	add.w	r3, r7, #8
 8009020:	4618      	mov	r0, r3
 8009022:	f7f7 f90d 	bl	8000240 <strlen>
 8009026:	4603      	mov	r3, r0
 8009028:	b29a      	uxth	r2, r3
 800902a:	f107 0108 	add.w	r1, r7, #8
 800902e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009032:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	f000 f97e 	bl	8009338 <PrintMessage>

				#endif

				generalSBGC->_parserCurrentStatus = lastParserStatus;
 800903c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009040:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800904a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				generalSBGC->_confirmationStatus = CONFIRMATION_ERROR;
 800904e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
				break;
 800905e:	e033      	b.n	80090c8 <SBGC32_CheckConfirmation+0x300>
			}

			if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 8009060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009070:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	6812      	ldr	r2, [r2, #0]
 8009078:	4610      	mov	r0, r2
 800907a:	4798      	blx	r3
 800907c:	4602      	mov	r2, r0
 800907e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009082:	1ad2      	subs	r2, r2, r3
 8009084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	429a      	cmp	r2, r3
 8009092:	f4ff aeb7 	bcc.w	8008e04 <SBGC32_CheckConfirmation+0x3c>
			{
				#if (SBGC_DEBUG_MODE)
					PrintMessage(generalSBGC, TEXT_SIZE_("CONFIRM_TIMEOUT_ERROR!\n"));
 8009096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800909a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800909e:	2217      	movs	r2, #23
 80090a0:	4912      	ldr	r1, [pc, #72]	; (80090ec <SBGC32_CheckConfirmation+0x324>)
 80090a2:	6818      	ldr	r0, [r3, #0]
 80090a4:	f000 f948 	bl	8009338 <PrintMessage>
				#endif

				generalSBGC->_parserCurrentStatus = RX_TIMEOUT_ERROR;
 80090a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2208      	movs	r2, #8
 80090b4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				generalSBGC->_confirmationStatus = CONFIRMATION_TIMEOUT;
 80090b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
			}
		}

	#endif

	return generalSBGC->_parserCurrentStatus;
 80090c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd90      	pop	{r4, r7, pc}
 80090e0:	0800e0b0 	.word	0x0800e0b0
 80090e4:	0800e0c4 	.word	0x0800e0c4
 80090e8:	0800e0dc 	.word	0x0800e0dc
 80090ec:	0800e0f4 	.word	0x0800e0f4

080090f0 <CheckReceipt>:
 *	@param 	*message - debug info string
 *
 *	@return Communication status
 */
TxRxStatus_t CheckReceipt (GeneralSBGC_t *generalSBGC, TxRxStatus_t receiveStatus, char *message)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b094      	sub	sp, #80	; 0x50
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	460b      	mov	r3, r1
 80090fa:	607a      	str	r2, [r7, #4]
 80090fc:	72fb      	strb	r3, [r7, #11]
	generalSBGC->_parserCurrentStatus = receiveStatus;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	7afa      	ldrb	r2, [r7, #11]
 8009102:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

	if (getcommstatus_(generalSBGC->_parserCurrentStatus) == FALSE__)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800910c:	2b00      	cmp	r3, #0
 800910e:	d004      	beq.n	800911a <CheckReceipt+0x2a>
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <CheckReceipt+0x2e>
 800911a:	2301      	movs	r3, #1
 800911c:	e000      	b.n	8009120 <CheckReceipt+0x30>
 800911e:	2300      	movs	r3, #0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d105      	bne.n	8009130 <CheckReceipt+0x40>
		generalSBGC->_rxErrorsCount++;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009128:	3301      	adds	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	865a      	strh	r2, [r3, #50]	; 0x32

	#if (SBGC_DEBUG_MODE)

		char totalStr [60];
		ui8 pos = 0;
 8009130:	2300      	movs	r3, #0
 8009132:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (getcommstatus_(generalSBGC->_parserCurrentStatus))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d004      	beq.n	800914a <CheckReceipt+0x5a>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8009146:	2b01      	cmp	r3, #1
 8009148:	d132      	bne.n	80091b0 <CheckReceipt+0xc0>
		{
			memcpy(totalStr, TEXT_SIZE_(message));
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7f7 f878 	bl	8000240 <strlen>
 8009150:	4602      	mov	r2, r0
 8009152:	f107 0310 	add.w	r3, r7, #16
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 faff 	bl	800975c <memcpy>
			pos += strlen(message);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7f7 f86e 	bl	8000240 <strlen>
 8009164:	4603      	mov	r3, r0
 8009166:	b2da      	uxtb	r2, r3
 8009168:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800916c:	4413      	add	r3, r2
 800916e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive OK!"));
 8009172:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009176:	f107 0210 	add.w	r2, r7, #16
 800917a:	4413      	add	r3, r2
 800917c:	220c      	movs	r2, #12
 800917e:	4938      	ldr	r1, [pc, #224]	; (8009260 <CheckReceipt+0x170>)
 8009180:	4618      	mov	r0, r3
 8009182:	f000 faeb 	bl	800975c <memcpy>
			pos += strlen(" Receive OK!");
 8009186:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800918a:	330c      	adds	r3, #12
 800918c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8009190:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009194:	3350      	adds	r3, #80	; 0x50
 8009196:	443b      	add	r3, r7
 8009198:	220a      	movs	r2, #10
 800919a:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 800919e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80091a2:	3301      	adds	r3, #1
 80091a4:	3350      	adds	r3, #80	; 0x50
 80091a6:	443b      	add	r3, r7
 80091a8:	2200      	movs	r2, #0
 80091aa:	f803 2c40 	strb.w	r2, [r3, #-64]
 80091ae:	e043      	b.n	8009238 <CheckReceipt+0x148>
		}

		else
		{
			memcpy(totalStr, TEXT_SIZE_(message));
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f7f7 f845 	bl	8000240 <strlen>
 80091b6:	4602      	mov	r2, r0
 80091b8:	f107 0310 	add.w	r3, r7, #16
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 facc 	bl	800975c <memcpy>
			pos += strlen(message);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7f7 f83b 	bl	8000240 <strlen>
 80091ca:	4603      	mov	r3, r0
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80091d2:	4413      	add	r3, r2
 80091d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive Error: "));
 80091d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80091dc:	f107 0210 	add.w	r2, r7, #16
 80091e0:	4413      	add	r3, r2
 80091e2:	2210      	movs	r2, #16
 80091e4:	491f      	ldr	r1, [pc, #124]	; (8009264 <CheckReceipt+0x174>)
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fab8 	bl	800975c <memcpy>
			pos += strlen(" Receive Error: ");
 80091ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80091f0:	3310      	adds	r3, #16
 80091f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pos += ConvertErrorToString(generalSBGC->_parserCurrentStatus, &totalStr[pos]);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f893 043c 	ldrb.w	r0, [r3, #1084]	; 0x43c
 80091fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009200:	f107 0210 	add.w	r2, r7, #16
 8009204:	4413      	add	r3, r2
 8009206:	4619      	mov	r1, r3
 8009208:	f000 f8ac 	bl	8009364 <ConvertErrorToString>
 800920c:	4603      	mov	r3, r0
 800920e:	461a      	mov	r2, r3
 8009210:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009214:	4413      	add	r3, r2
 8009216:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 800921a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800921e:	3350      	adds	r3, #80	; 0x50
 8009220:	443b      	add	r3, r7
 8009222:	220a      	movs	r2, #10
 8009224:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8009228:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800922c:	3301      	adds	r3, #1
 800922e:	3350      	adds	r3, #80	; 0x50
 8009230:	443b      	add	r3, r7
 8009232:	2200      	movs	r2, #0
 8009234:	f803 2c40 	strb.w	r2, [r3, #-64]
		}

		PrintMessage(generalSBGC, TEXT_SIZE_(totalStr));
 8009238:	f107 0310 	add.w	r3, r7, #16
 800923c:	4618      	mov	r0, r3
 800923e:	f7f6 ffff 	bl	8000240 <strlen>
 8009242:	4603      	mov	r3, r0
 8009244:	b29a      	uxth	r2, r3
 8009246:	f107 0310 	add.w	r3, r7, #16
 800924a:	4619      	mov	r1, r3
 800924c:	68f8      	ldr	r0, [r7, #12]
 800924e:	f000 f873 	bl	8009338 <PrintMessage>

	#endif

	return generalSBGC->_parserCurrentStatus;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 8009258:	4618      	mov	r0, r3
 800925a:	3750      	adds	r7, #80	; 0x50
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	0800e10c 	.word	0x0800e10c
 8009264:	0800e11c 	.word	0x0800e11c

08009268 <Modulo256_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui8 Modulo256_Calculate (ui8 *data, ui16 length)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	807b      	strh	r3, [r7, #2]
	i32 totalSum = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]

	ui16 count = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	817b      	strh	r3, [r7, #10]
	while (count < length)
 800927c:	e00a      	b.n	8009294 <Modulo256_Calculate+0x2c>
		totalSum += data[count++];
 800927e:	897b      	ldrh	r3, [r7, #10]
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	817a      	strh	r2, [r7, #10]
 8009284:	461a      	mov	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	4413      	add	r3, r2
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	461a      	mov	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	4413      	add	r3, r2
 8009292:	60fb      	str	r3, [r7, #12]
	while (count < length)
 8009294:	897a      	ldrh	r2, [r7, #10]
 8009296:	887b      	ldrh	r3, [r7, #2]
 8009298:	429a      	cmp	r2, r3
 800929a:	d3f0      	bcc.n	800927e <Modulo256_Calculate+0x16>

	return totalSum % 256;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	425a      	negs	r2, r3
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	b2d2      	uxtb	r2, r2
 80092a4:	bf58      	it	pl
 80092a6:	4253      	negpl	r3, r2
 80092a8:	b2db      	uxtb	r3, r3
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui16 CRC16_Calculate (ui8 *data, ui16 length)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	807b      	strh	r3, [r7, #2]
	ui16 CRC_Register = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	81fb      	strh	r3, [r7, #14]
	ui8 shiftRegister,
		dataBit,
		CRC_Bit;

	for (ui16 i = 0; i < length; i++)
 80092c6:	2300      	movs	r3, #0
 80092c8:	817b      	strh	r3, [r7, #10]
 80092ca:	e02a      	b.n	8009322 <CRC16_Calculate+0x6c>
	{
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 80092cc:	2301      	movs	r3, #1
 80092ce:	737b      	strb	r3, [r7, #13]
 80092d0:	e021      	b.n	8009316 <CRC16_Calculate+0x60>
		{
			dataBit = (data[i] & shiftRegister) ? 1 : 0;
 80092d2:	897b      	ldrh	r3, [r7, #10]
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	4413      	add	r3, r2
 80092d8:	781a      	ldrb	r2, [r3, #0]
 80092da:	7b7b      	ldrb	r3, [r7, #13]
 80092dc:	4013      	ands	r3, r2
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	bf14      	ite	ne
 80092e4:	2301      	movne	r3, #1
 80092e6:	2300      	moveq	r3, #0
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	727b      	strb	r3, [r7, #9]
			CRC_Bit = CRC_Register >> 15;
 80092ec:	89fb      	ldrh	r3, [r7, #14]
 80092ee:	0bdb      	lsrs	r3, r3, #15
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	723b      	strb	r3, [r7, #8]
			CRC_Register <<= 1;
 80092f4:	89fb      	ldrh	r3, [r7, #14]
 80092f6:	005b      	lsls	r3, r3, #1
 80092f8:	81fb      	strh	r3, [r7, #14]

			if (dataBit != CRC_Bit)
 80092fa:	7a7a      	ldrb	r2, [r7, #9]
 80092fc:	7a3b      	ldrb	r3, [r7, #8]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d006      	beq.n	8009310 <CRC16_Calculate+0x5a>
				CRC_Register ^= PR2_CRC16_POLYNOM;
 8009302:	89fb      	ldrh	r3, [r7, #14]
 8009304:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8009308:	f083 037a 	eor.w	r3, r3, #122	; 0x7a
 800930c:	43db      	mvns	r3, r3
 800930e:	81fb      	strh	r3, [r7, #14]
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8009310:	7b7b      	ldrb	r3, [r7, #13]
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	737b      	strb	r3, [r7, #13]
 8009316:	7b7b      	ldrb	r3, [r7, #13]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1da      	bne.n	80092d2 <CRC16_Calculate+0x1c>
	for (ui16 i = 0; i < length; i++)
 800931c:	897b      	ldrh	r3, [r7, #10]
 800931e:	3301      	adds	r3, #1
 8009320:	817b      	strh	r3, [r7, #10]
 8009322:	897a      	ldrh	r2, [r7, #10]
 8009324:	887b      	ldrh	r3, [r7, #2]
 8009326:	429a      	cmp	r2, r3
 8009328:	d3d0      	bcc.n	80092cc <CRC16_Calculate+0x16>
		}
	}

	return CRC_Register;
 800932a:	89fb      	ldrh	r3, [r7, #14]
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <PrintMessage>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	*data - printable data
 *	@param	length - printable data size
 */
void PrintMessage (GeneralSBGC_t *generalSBGC, char *data, ui16 length)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4613      	mov	r3, r2
 8009344:	80fb      	strh	r3, [r7, #6]
	if (generalSBGC->TxDebugFunc == NULL)  // Prevent HardFault errors
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d006      	beq.n	800935c <PrintMessage+0x24>
		return;

	generalSBGC->TxDebugFunc(data, length);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	88fa      	ldrh	r2, [r7, #6]
 8009354:	4611      	mov	r1, r2
 8009356:	68b8      	ldr	r0, [r7, #8]
 8009358:	4798      	blx	r3
 800935a:	e000      	b.n	800935e <PrintMessage+0x26>
		return;
 800935c:	bf00      	nop
}
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <ConvertErrorToString>:
 *	@param	*str - writable buffer
 *
 *	@return	Length of a writable string
 */
ui8 ConvertErrorToString (TxRxStatus_t txRxStatus, char *str)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
	switch (txRxStatus)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b0a      	cmp	r3, #10
 8009374:	d865      	bhi.n	8009442 <ConvertErrorToString+0xde>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <ConvertErrorToString+0x18>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	080093a9 	.word	0x080093a9
 8009380:	080093b7 	.word	0x080093b7
 8009384:	080093c5 	.word	0x080093c5
 8009388:	080093d3 	.word	0x080093d3
 800938c:	080093e1 	.word	0x080093e1
 8009390:	080093ef 	.word	0x080093ef
 8009394:	080093fd 	.word	0x080093fd
 8009398:	0800940b 	.word	0x0800940b
 800939c:	08009419 	.word	0x08009419
 80093a0:	08009427 	.word	0x08009427
 80093a4:	08009435 	.word	0x08009435
	{
		case TX_RX_OK :
			memcpy(str, TEXT_SIZE_(nameof_(TX_RX_OK)));
 80093a8:	2208      	movs	r2, #8
 80093aa:	4928      	ldr	r1, [pc, #160]	; (800944c <ConvertErrorToString+0xe8>)
 80093ac:	6838      	ldr	r0, [r7, #0]
 80093ae:	f000 f9d5 	bl	800975c <memcpy>
			return strlen(nameof_(TX_RX_OK));
 80093b2:	2308      	movs	r3, #8
 80093b4:	e046      	b.n	8009444 <ConvertErrorToString+0xe0>

					case RX_BUFFERED_COMMAND :
						memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFERED_COMMAND)));
 80093b6:	2213      	movs	r2, #19
 80093b8:	4925      	ldr	r1, [pc, #148]	; (8009450 <ConvertErrorToString+0xec>)
 80093ba:	6838      	ldr	r0, [r7, #0]
 80093bc:	f000 f9ce 	bl	800975c <memcpy>
						return strlen(nameof_(RX_BUFFERED_COMMAND));
 80093c0:	2313      	movs	r3, #19
 80093c2:	e03f      	b.n	8009444 <ConvertErrorToString+0xe0>

		case RX_START_PARSE :
			memcpy(str, TEXT_SIZE_(nameof_(RX_START_PARSE)));
 80093c4:	220e      	movs	r2, #14
 80093c6:	4923      	ldr	r1, [pc, #140]	; (8009454 <ConvertErrorToString+0xf0>)
 80093c8:	6838      	ldr	r0, [r7, #0]
 80093ca:	f000 f9c7 	bl	800975c <memcpy>
			return strlen(nameof_(RX_START_PARSE));
 80093ce:	230e      	movs	r3, #14
 80093d0:	e038      	b.n	8009444 <ConvertErrorToString+0xe0>

					case RX_EMPTY_BUFF_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_EMPTY_BUFF_ERROR)));
 80093d2:	2213      	movs	r2, #19
 80093d4:	4920      	ldr	r1, [pc, #128]	; (8009458 <ConvertErrorToString+0xf4>)
 80093d6:	6838      	ldr	r0, [r7, #0]
 80093d8:	f000 f9c0 	bl	800975c <memcpy>
						return strlen(nameof_(RX_EMPTY_BUFF_ERROR));
 80093dc:	2313      	movs	r3, #19
 80093de:	e031      	b.n	8009444 <ConvertErrorToString+0xe0>

		case RX_BUFFER_REALTIME_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFER_REALTIME_ERROR)));
 80093e0:	2218      	movs	r2, #24
 80093e2:	491e      	ldr	r1, [pc, #120]	; (800945c <ConvertErrorToString+0xf8>)
 80093e4:	6838      	ldr	r0, [r7, #0]
 80093e6:	f000 f9b9 	bl	800975c <memcpy>
			return strlen(nameof_(RX_BUFFER_REALTIME_ERROR));
 80093ea:	2318      	movs	r3, #24
 80093ec:	e02a      	b.n	8009444 <ConvertErrorToString+0xe0>

					case RX_HEADER_CHECKSUM_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_HEADER_CHECKSUM_ERROR)));
 80093ee:	2218      	movs	r2, #24
 80093f0:	491b      	ldr	r1, [pc, #108]	; (8009460 <ConvertErrorToString+0xfc>)
 80093f2:	6838      	ldr	r0, [r7, #0]
 80093f4:	f000 f9b2 	bl	800975c <memcpy>
						return strlen(nameof_(RX_HEADER_CHECKSUM_ERROR));
 80093f8:	2318      	movs	r3, #24
 80093fa:	e023      	b.n	8009444 <ConvertErrorToString+0xe0>

		case RX_PAYLOAD_CHECKSUM_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_PAYLOAD_CHECKSUM_ERROR)));
 80093fc:	2219      	movs	r2, #25
 80093fe:	4919      	ldr	r1, [pc, #100]	; (8009464 <ConvertErrorToString+0x100>)
 8009400:	6838      	ldr	r0, [r7, #0]
 8009402:	f000 f9ab 	bl	800975c <memcpy>
			return strlen(nameof_(RX_PAYLOAD_CHECKSUM_ERROR));
 8009406:	2319      	movs	r3, #25
 8009408:	e01c      	b.n	8009444 <ConvertErrorToString+0xe0>

					case RX_BUFFER_OVERFLOW_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFER_OVERFLOW_ERROR)));
 800940a:	2218      	movs	r2, #24
 800940c:	4916      	ldr	r1, [pc, #88]	; (8009468 <ConvertErrorToString+0x104>)
 800940e:	6838      	ldr	r0, [r7, #0]
 8009410:	f000 f9a4 	bl	800975c <memcpy>
						return strlen(nameof_(RX_BUFFER_OVERFLOW_ERROR));
 8009414:	2318      	movs	r3, #24
 8009416:	e015      	b.n	8009444 <ConvertErrorToString+0xe0>

		case RX_TIMEOUT_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_TIMEOUT_ERROR)));
 8009418:	2210      	movs	r2, #16
 800941a:	4914      	ldr	r1, [pc, #80]	; (800946c <ConvertErrorToString+0x108>)
 800941c:	6838      	ldr	r0, [r7, #0]
 800941e:	f000 f99d 	bl	800975c <memcpy>
			return strlen(nameof_(RX_TIMEOUT_ERROR));
 8009422:	2310      	movs	r3, #16
 8009424:	e00e      	b.n	8009444 <ConvertErrorToString+0xe0>

					case TX_BUFFER_OVERFLOW_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(TX_BUFFER_OVERFLOW_ERROR)));
 8009426:	2218      	movs	r2, #24
 8009428:	4911      	ldr	r1, [pc, #68]	; (8009470 <ConvertErrorToString+0x10c>)
 800942a:	6838      	ldr	r0, [r7, #0]
 800942c:	f000 f996 	bl	800975c <memcpy>
						return strlen(nameof_(TX_BUFFER_OVERFLOW_ERROR));
 8009430:	2318      	movs	r3, #24
 8009432:	e007      	b.n	8009444 <ConvertErrorToString+0xe0>

		case NOT_SUPPORTED_BY_FIRMWARE :
			memcpy(str, TEXT_SIZE_(nameof_(NOT_SUPPORTED_BY_FIRMWARE)));
 8009434:	2219      	movs	r2, #25
 8009436:	490f      	ldr	r1, [pc, #60]	; (8009474 <ConvertErrorToString+0x110>)
 8009438:	6838      	ldr	r0, [r7, #0]
 800943a:	f000 f98f 	bl	800975c <memcpy>
			return strlen(nameof_(NOT_SUPPORTED_BY_FIRMWARE));
 800943e:	2319      	movs	r3, #25
 8009440:	e000      	b.n	8009444 <ConvertErrorToString+0xe0>
	}

	return 0;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	0800e164 	.word	0x0800e164
 8009450:	0800e170 	.word	0x0800e170
 8009454:	0800e184 	.word	0x0800e184
 8009458:	0800e194 	.word	0x0800e194
 800945c:	0800e1a8 	.word	0x0800e1a8
 8009460:	0800e1c4 	.word	0x0800e1c4
 8009464:	0800e1e0 	.word	0x0800e1e0
 8009468:	0800e1fc 	.word	0x0800e1fc
 800946c:	0800e218 	.word	0x0800e218
 8009470:	0800e22c 	.word	0x0800e22c
 8009474:	0800e248 	.word	0x0800e248

08009478 <SBGC32_Control>:
 * 	@param 	*control - structure containing gimbal control data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_Control (GeneralSBGC_t *generalSBGC, const Control_t *control)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b0c4      	sub	sp, #272	; 0x110
 800947c:	af00      	add	r7, sp, #0
 800947e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009482:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009486:	6018      	str	r0, [r3, #0]
 8009488:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800948c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009490:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL);
 8009492:	f107 030c 	add.w	r3, r7, #12
 8009496:	2143      	movs	r1, #67	; 0x43
 8009498:	4618      	mov	r0, r3
 800949a:	f7ff fa94 	bl	80089c6 <InitCmdWrite>
	WriteBuff(&cmd, control, sizeof(Control_t), PM_CONTROL);
 800949e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094a2:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80094a6:	f107 000c 	add.w	r0, r7, #12
 80094aa:	230b      	movs	r3, #11
 80094ac:	220f      	movs	r2, #15
 80094ae:	6809      	ldr	r1, [r1, #0]
 80094b0:	f7ff f925 	bl	80086fe <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 80094b4:	f107 020c 	add.w	r2, r7, #12
 80094b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80094c0:	4611      	mov	r1, r2
 80094c2:	6818      	ldr	r0, [r3, #0]
 80094c4:	f7fe fd7b 	bl	8007fbe <SBGC32_TX>
	return generalSBGC->_parserCurrentStatus;
 80094c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <SBGC32_ControlConfig>:
 * 			control configuration data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ControlConfig (GeneralSBGC_t *generalSBGC, const ControlConfig_t *controlConfig)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b0c4      	sub	sp, #272	; 0x110
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80094ee:	6018      	str	r0, [r3, #0]
 80094f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80094f8:	6019      	str	r1, [r3, #0]
			return NOT_SUPPORTED_BY_FIRMWARE;

	#endif

	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL_CONFIG);
 80094fa:	f107 030c 	add.w	r3, r7, #12
 80094fe:	215a      	movs	r1, #90	; 0x5a
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff fa60 	bl	80089c6 <InitCmdWrite>
	WriteBuff(&cmd, controlConfig, sizeof(ControlConfig_t), PM_CONTROL_CONFIG);
 8009506:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800950a:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 800950e:	f107 000c 	add.w	r0, r7, #12
 8009512:	230c      	movs	r3, #12
 8009514:	2229      	movs	r2, #41	; 0x29
 8009516:	6809      	ldr	r1, [r1, #0]
 8009518:	f7ff f8f1 	bl	80086fe <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 800951c:	f107 020c 	add.w	r2, r7, #12
 8009520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009524:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009528:	4611      	mov	r1, r2
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	f7fe fd47 	bl	8007fbe <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 8009530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009538:	781a      	ldrb	r2, [r3, #0]
 800953a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800953e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009542:	4611      	mov	r1, r2
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	f7ff fc3f 	bl	8008dc8 <SBGC32_CheckConfirmation>
	return generalSBGC->_parserCurrentStatus;
 800954a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800954e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 8009558:	4618      	mov	r0, r3
 800955a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <SBGC32_ReadRealTimeData4>:
 * 	@param 	*realTimeData - structure for storing real-time data
 *
 * 	@return Communication status
 */
TxRxStatus_t SBGC32_ReadRealTimeData4 (GeneralSBGC_t *generalSBGC, RealTimeData_t *realTimeData)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b0c4      	sub	sp, #272	; 0x110
 8009568:	af00      	add	r7, sp, #0
 800956a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800956e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009572:	6018      	str	r0, [r3, #0]
 8009574:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009578:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800957c:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_REALTIME_DATA_4);
 800957e:	f107 030c 	add.w	r3, r7, #12
 8009582:	2119      	movs	r1, #25
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff fa1e 	bl	80089c6 <InitCmdWrite>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_REALTIME_DATA_4), "Real-Time Data 4:") == TX_RX_OK)
 800958a:	f107 010c 	add.w	r1, r7, #12
 800958e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009592:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009596:	2219      	movs	r2, #25
 8009598:	6818      	ldr	r0, [r3, #0]
 800959a:	f7fe ffa9 	bl	80084f0 <SBGC32_TX_RX>
 800959e:	4603      	mov	r3, r0
 80095a0:	4619      	mov	r1, r3
 80095a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095aa:	4a0f      	ldr	r2, [pc, #60]	; (80095e8 <SBGC32_ReadRealTimeData4+0x84>)
 80095ac:	6818      	ldr	r0, [r3, #0]
 80095ae:	f7ff fd9f 	bl	80090f0 <CheckReceipt>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <SBGC32_ReadRealTimeData4+0x6a>
		ReadBuff(&cmd, realTimeData, sizeof(RealTimeData_t), PM_REALTIME_DATA_4);
 80095b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095bc:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80095c0:	f107 000c 	add.w	r0, r7, #12
 80095c4:	2318      	movs	r3, #24
 80095c6:	227c      	movs	r2, #124	; 0x7c
 80095c8:	6809      	ldr	r1, [r1, #0]
 80095ca:	f7ff f8c7 	bl	800875c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 80095ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 80095dc:	4618      	mov	r0, r3
 80095de:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	0800e2a0 	.word	0x0800e2a0

080095ec <SBGC32_GetAnglesExt>:
 * 			angles state in different format
 *
 * 	@return Communication status
 */
TxRxStatus_t SBGC32_GetAnglesExt (GeneralSBGC_t *generalSBGC, GetAnglesExt_t *getAnglesExt)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b0c4      	sub	sp, #272	; 0x110
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095fa:	6018      	str	r0, [r3, #0]
 80095fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009600:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009604:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_GET_ANGLES_EXT);
 8009606:	f107 030c 	add.w	r3, r7, #12
 800960a:	213d      	movs	r1, #61	; 0x3d
 800960c:	4618      	mov	r0, r3
 800960e:	f7ff f9da 	bl	80089c6 <InitCmdWrite>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_GET_ANGLES_EXT), "Angles Ext:") == TX_RX_OK)
 8009612:	f107 010c 	add.w	r1, r7, #12
 8009616:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800961a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800961e:	223d      	movs	r2, #61	; 0x3d
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	f7fe ff65 	bl	80084f0 <SBGC32_TX_RX>
 8009626:	4603      	mov	r3, r0
 8009628:	4619      	mov	r1, r3
 800962a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800962e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009632:	4a0f      	ldr	r2, [pc, #60]	; (8009670 <SBGC32_GetAnglesExt+0x84>)
 8009634:	6818      	ldr	r0, [r3, #0]
 8009636:	f7ff fd5b 	bl	80090f0 <CheckReceipt>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10a      	bne.n	8009656 <SBGC32_GetAnglesExt+0x6a>
		ReadBuff(&cmd, getAnglesExt, sizeof(GetAnglesExt_t), PM_GET_ANGLES_EXT);
 8009640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009644:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8009648:	f107 000c 	add.w	r0, r7, #12
 800964c:	231a      	movs	r3, #26
 800964e:	2236      	movs	r2, #54	; 0x36
 8009650:	6809      	ldr	r1, [r1, #0]
 8009652:	f7ff f883 	bl	800875c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 8009656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800965a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 8009664:	4618      	mov	r0, r3
 8009666:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	0800e2bc 	.word	0x0800e2bc

08009674 <SBGC32_ExecuteMenu>:
 *	@param	cmdID - menu command identifier
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ExecuteMenu (GeneralSBGC_t *generalSBGC, MenuCommand_t cmdID)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b0c4      	sub	sp, #272	; 0x110
 8009678:	af00      	add	r7, sp, #0
 800967a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800967e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009682:	6018      	str	r0, [r3, #0]
 8009684:	460a      	mov	r2, r1
 8009686:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800968a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 800968e:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_EXECUTE_MENU);
 8009690:	f107 030c 	add.w	r3, r7, #12
 8009694:	2145      	movs	r1, #69	; 0x45
 8009696:	4618      	mov	r0, r3
 8009698:	f7ff f995 	bl	80089c6 <InitCmdWrite>
	WriteByte(&cmd, cmdID);
 800969c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096a0:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80096a4:	781a      	ldrb	r2, [r3, #0]
 80096a6:	f107 030c 	add.w	r3, r7, #12
 80096aa:	4611      	mov	r1, r2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7ff f8c5 	bl	800883c <WriteByte>
	SBGC32_TX(generalSBGC, &cmd);
 80096b2:	f107 020c 	add.w	r2, r7, #12
 80096b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80096be:	4611      	mov	r1, r2
 80096c0:	6818      	ldr	r0, [r3, #0]
 80096c2:	f7fe fc7c 	bl	8007fbe <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 80096c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096ce:	781a      	ldrb	r2, [r3, #0]
 80096d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80096d8:	4611      	mov	r1, r2
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	f7ff fb74 	bl	8008dc8 <SBGC32_CheckConfirmation>
	return generalSBGC->_parserCurrentStatus;
 80096e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <__errno>:
 80096f8:	4b01      	ldr	r3, [pc, #4]	; (8009700 <__errno+0x8>)
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	2000018c 	.word	0x2000018c

08009704 <__libc_init_array>:
 8009704:	b570      	push	{r4, r5, r6, lr}
 8009706:	4d0d      	ldr	r5, [pc, #52]	; (800973c <__libc_init_array+0x38>)
 8009708:	4c0d      	ldr	r4, [pc, #52]	; (8009740 <__libc_init_array+0x3c>)
 800970a:	1b64      	subs	r4, r4, r5
 800970c:	10a4      	asrs	r4, r4, #2
 800970e:	2600      	movs	r6, #0
 8009710:	42a6      	cmp	r6, r4
 8009712:	d109      	bne.n	8009728 <__libc_init_array+0x24>
 8009714:	4d0b      	ldr	r5, [pc, #44]	; (8009744 <__libc_init_array+0x40>)
 8009716:	4c0c      	ldr	r4, [pc, #48]	; (8009748 <__libc_init_array+0x44>)
 8009718:	f004 fb86 	bl	800de28 <_init>
 800971c:	1b64      	subs	r4, r4, r5
 800971e:	10a4      	asrs	r4, r4, #2
 8009720:	2600      	movs	r6, #0
 8009722:	42a6      	cmp	r6, r4
 8009724:	d105      	bne.n	8009732 <__libc_init_array+0x2e>
 8009726:	bd70      	pop	{r4, r5, r6, pc}
 8009728:	f855 3b04 	ldr.w	r3, [r5], #4
 800972c:	4798      	blx	r3
 800972e:	3601      	adds	r6, #1
 8009730:	e7ee      	b.n	8009710 <__libc_init_array+0xc>
 8009732:	f855 3b04 	ldr.w	r3, [r5], #4
 8009736:	4798      	blx	r3
 8009738:	3601      	adds	r6, #1
 800973a:	e7f2      	b.n	8009722 <__libc_init_array+0x1e>
 800973c:	0800e7bc 	.word	0x0800e7bc
 8009740:	0800e7bc 	.word	0x0800e7bc
 8009744:	0800e7bc 	.word	0x0800e7bc
 8009748:	0800e7c0 	.word	0x0800e7c0

0800974c <malloc>:
 800974c:	4b02      	ldr	r3, [pc, #8]	; (8009758 <malloc+0xc>)
 800974e:	4601      	mov	r1, r0
 8009750:	6818      	ldr	r0, [r3, #0]
 8009752:	f000 b885 	b.w	8009860 <_malloc_r>
 8009756:	bf00      	nop
 8009758:	2000018c 	.word	0x2000018c

0800975c <memcpy>:
 800975c:	440a      	add	r2, r1
 800975e:	4291      	cmp	r1, r2
 8009760:	f100 33ff 	add.w	r3, r0, #4294967295
 8009764:	d100      	bne.n	8009768 <memcpy+0xc>
 8009766:	4770      	bx	lr
 8009768:	b510      	push	{r4, lr}
 800976a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009772:	4291      	cmp	r1, r2
 8009774:	d1f9      	bne.n	800976a <memcpy+0xe>
 8009776:	bd10      	pop	{r4, pc}

08009778 <memset>:
 8009778:	4402      	add	r2, r0
 800977a:	4603      	mov	r3, r0
 800977c:	4293      	cmp	r3, r2
 800977e:	d100      	bne.n	8009782 <memset+0xa>
 8009780:	4770      	bx	lr
 8009782:	f803 1b01 	strb.w	r1, [r3], #1
 8009786:	e7f9      	b.n	800977c <memset+0x4>

08009788 <_free_r>:
 8009788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800978a:	2900      	cmp	r1, #0
 800978c:	d044      	beq.n	8009818 <_free_r+0x90>
 800978e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009792:	9001      	str	r0, [sp, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	f1a1 0404 	sub.w	r4, r1, #4
 800979a:	bfb8      	it	lt
 800979c:	18e4      	addlt	r4, r4, r3
 800979e:	f002 ff2b 	bl	800c5f8 <__malloc_lock>
 80097a2:	4a1e      	ldr	r2, [pc, #120]	; (800981c <_free_r+0x94>)
 80097a4:	9801      	ldr	r0, [sp, #4]
 80097a6:	6813      	ldr	r3, [r2, #0]
 80097a8:	b933      	cbnz	r3, 80097b8 <_free_r+0x30>
 80097aa:	6063      	str	r3, [r4, #4]
 80097ac:	6014      	str	r4, [r2, #0]
 80097ae:	b003      	add	sp, #12
 80097b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097b4:	f002 bf26 	b.w	800c604 <__malloc_unlock>
 80097b8:	42a3      	cmp	r3, r4
 80097ba:	d908      	bls.n	80097ce <_free_r+0x46>
 80097bc:	6825      	ldr	r5, [r4, #0]
 80097be:	1961      	adds	r1, r4, r5
 80097c0:	428b      	cmp	r3, r1
 80097c2:	bf01      	itttt	eq
 80097c4:	6819      	ldreq	r1, [r3, #0]
 80097c6:	685b      	ldreq	r3, [r3, #4]
 80097c8:	1949      	addeq	r1, r1, r5
 80097ca:	6021      	streq	r1, [r4, #0]
 80097cc:	e7ed      	b.n	80097aa <_free_r+0x22>
 80097ce:	461a      	mov	r2, r3
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	b10b      	cbz	r3, 80097d8 <_free_r+0x50>
 80097d4:	42a3      	cmp	r3, r4
 80097d6:	d9fa      	bls.n	80097ce <_free_r+0x46>
 80097d8:	6811      	ldr	r1, [r2, #0]
 80097da:	1855      	adds	r5, r2, r1
 80097dc:	42a5      	cmp	r5, r4
 80097de:	d10b      	bne.n	80097f8 <_free_r+0x70>
 80097e0:	6824      	ldr	r4, [r4, #0]
 80097e2:	4421      	add	r1, r4
 80097e4:	1854      	adds	r4, r2, r1
 80097e6:	42a3      	cmp	r3, r4
 80097e8:	6011      	str	r1, [r2, #0]
 80097ea:	d1e0      	bne.n	80097ae <_free_r+0x26>
 80097ec:	681c      	ldr	r4, [r3, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	6053      	str	r3, [r2, #4]
 80097f2:	4421      	add	r1, r4
 80097f4:	6011      	str	r1, [r2, #0]
 80097f6:	e7da      	b.n	80097ae <_free_r+0x26>
 80097f8:	d902      	bls.n	8009800 <_free_r+0x78>
 80097fa:	230c      	movs	r3, #12
 80097fc:	6003      	str	r3, [r0, #0]
 80097fe:	e7d6      	b.n	80097ae <_free_r+0x26>
 8009800:	6825      	ldr	r5, [r4, #0]
 8009802:	1961      	adds	r1, r4, r5
 8009804:	428b      	cmp	r3, r1
 8009806:	bf04      	itt	eq
 8009808:	6819      	ldreq	r1, [r3, #0]
 800980a:	685b      	ldreq	r3, [r3, #4]
 800980c:	6063      	str	r3, [r4, #4]
 800980e:	bf04      	itt	eq
 8009810:	1949      	addeq	r1, r1, r5
 8009812:	6021      	streq	r1, [r4, #0]
 8009814:	6054      	str	r4, [r2, #4]
 8009816:	e7ca      	b.n	80097ae <_free_r+0x26>
 8009818:	b003      	add	sp, #12
 800981a:	bd30      	pop	{r4, r5, pc}
 800981c:	20000b24 	.word	0x20000b24

08009820 <sbrk_aligned>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	4e0e      	ldr	r6, [pc, #56]	; (800985c <sbrk_aligned+0x3c>)
 8009824:	460c      	mov	r4, r1
 8009826:	6831      	ldr	r1, [r6, #0]
 8009828:	4605      	mov	r5, r0
 800982a:	b911      	cbnz	r1, 8009832 <sbrk_aligned+0x12>
 800982c:	f000 fed4 	bl	800a5d8 <_sbrk_r>
 8009830:	6030      	str	r0, [r6, #0]
 8009832:	4621      	mov	r1, r4
 8009834:	4628      	mov	r0, r5
 8009836:	f000 fecf 	bl	800a5d8 <_sbrk_r>
 800983a:	1c43      	adds	r3, r0, #1
 800983c:	d00a      	beq.n	8009854 <sbrk_aligned+0x34>
 800983e:	1cc4      	adds	r4, r0, #3
 8009840:	f024 0403 	bic.w	r4, r4, #3
 8009844:	42a0      	cmp	r0, r4
 8009846:	d007      	beq.n	8009858 <sbrk_aligned+0x38>
 8009848:	1a21      	subs	r1, r4, r0
 800984a:	4628      	mov	r0, r5
 800984c:	f000 fec4 	bl	800a5d8 <_sbrk_r>
 8009850:	3001      	adds	r0, #1
 8009852:	d101      	bne.n	8009858 <sbrk_aligned+0x38>
 8009854:	f04f 34ff 	mov.w	r4, #4294967295
 8009858:	4620      	mov	r0, r4
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	20000b28 	.word	0x20000b28

08009860 <_malloc_r>:
 8009860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009864:	1ccd      	adds	r5, r1, #3
 8009866:	f025 0503 	bic.w	r5, r5, #3
 800986a:	3508      	adds	r5, #8
 800986c:	2d0c      	cmp	r5, #12
 800986e:	bf38      	it	cc
 8009870:	250c      	movcc	r5, #12
 8009872:	2d00      	cmp	r5, #0
 8009874:	4607      	mov	r7, r0
 8009876:	db01      	blt.n	800987c <_malloc_r+0x1c>
 8009878:	42a9      	cmp	r1, r5
 800987a:	d905      	bls.n	8009888 <_malloc_r+0x28>
 800987c:	230c      	movs	r3, #12
 800987e:	603b      	str	r3, [r7, #0]
 8009880:	2600      	movs	r6, #0
 8009882:	4630      	mov	r0, r6
 8009884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009888:	4e2e      	ldr	r6, [pc, #184]	; (8009944 <_malloc_r+0xe4>)
 800988a:	f002 feb5 	bl	800c5f8 <__malloc_lock>
 800988e:	6833      	ldr	r3, [r6, #0]
 8009890:	461c      	mov	r4, r3
 8009892:	bb34      	cbnz	r4, 80098e2 <_malloc_r+0x82>
 8009894:	4629      	mov	r1, r5
 8009896:	4638      	mov	r0, r7
 8009898:	f7ff ffc2 	bl	8009820 <sbrk_aligned>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	4604      	mov	r4, r0
 80098a0:	d14d      	bne.n	800993e <_malloc_r+0xde>
 80098a2:	6834      	ldr	r4, [r6, #0]
 80098a4:	4626      	mov	r6, r4
 80098a6:	2e00      	cmp	r6, #0
 80098a8:	d140      	bne.n	800992c <_malloc_r+0xcc>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	4631      	mov	r1, r6
 80098ae:	4638      	mov	r0, r7
 80098b0:	eb04 0803 	add.w	r8, r4, r3
 80098b4:	f000 fe90 	bl	800a5d8 <_sbrk_r>
 80098b8:	4580      	cmp	r8, r0
 80098ba:	d13a      	bne.n	8009932 <_malloc_r+0xd2>
 80098bc:	6821      	ldr	r1, [r4, #0]
 80098be:	3503      	adds	r5, #3
 80098c0:	1a6d      	subs	r5, r5, r1
 80098c2:	f025 0503 	bic.w	r5, r5, #3
 80098c6:	3508      	adds	r5, #8
 80098c8:	2d0c      	cmp	r5, #12
 80098ca:	bf38      	it	cc
 80098cc:	250c      	movcc	r5, #12
 80098ce:	4629      	mov	r1, r5
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff ffa5 	bl	8009820 <sbrk_aligned>
 80098d6:	3001      	adds	r0, #1
 80098d8:	d02b      	beq.n	8009932 <_malloc_r+0xd2>
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	442b      	add	r3, r5
 80098de:	6023      	str	r3, [r4, #0]
 80098e0:	e00e      	b.n	8009900 <_malloc_r+0xa0>
 80098e2:	6822      	ldr	r2, [r4, #0]
 80098e4:	1b52      	subs	r2, r2, r5
 80098e6:	d41e      	bmi.n	8009926 <_malloc_r+0xc6>
 80098e8:	2a0b      	cmp	r2, #11
 80098ea:	d916      	bls.n	800991a <_malloc_r+0xba>
 80098ec:	1961      	adds	r1, r4, r5
 80098ee:	42a3      	cmp	r3, r4
 80098f0:	6025      	str	r5, [r4, #0]
 80098f2:	bf18      	it	ne
 80098f4:	6059      	strne	r1, [r3, #4]
 80098f6:	6863      	ldr	r3, [r4, #4]
 80098f8:	bf08      	it	eq
 80098fa:	6031      	streq	r1, [r6, #0]
 80098fc:	5162      	str	r2, [r4, r5]
 80098fe:	604b      	str	r3, [r1, #4]
 8009900:	4638      	mov	r0, r7
 8009902:	f104 060b 	add.w	r6, r4, #11
 8009906:	f002 fe7d 	bl	800c604 <__malloc_unlock>
 800990a:	f026 0607 	bic.w	r6, r6, #7
 800990e:	1d23      	adds	r3, r4, #4
 8009910:	1af2      	subs	r2, r6, r3
 8009912:	d0b6      	beq.n	8009882 <_malloc_r+0x22>
 8009914:	1b9b      	subs	r3, r3, r6
 8009916:	50a3      	str	r3, [r4, r2]
 8009918:	e7b3      	b.n	8009882 <_malloc_r+0x22>
 800991a:	6862      	ldr	r2, [r4, #4]
 800991c:	42a3      	cmp	r3, r4
 800991e:	bf0c      	ite	eq
 8009920:	6032      	streq	r2, [r6, #0]
 8009922:	605a      	strne	r2, [r3, #4]
 8009924:	e7ec      	b.n	8009900 <_malloc_r+0xa0>
 8009926:	4623      	mov	r3, r4
 8009928:	6864      	ldr	r4, [r4, #4]
 800992a:	e7b2      	b.n	8009892 <_malloc_r+0x32>
 800992c:	4634      	mov	r4, r6
 800992e:	6876      	ldr	r6, [r6, #4]
 8009930:	e7b9      	b.n	80098a6 <_malloc_r+0x46>
 8009932:	230c      	movs	r3, #12
 8009934:	603b      	str	r3, [r7, #0]
 8009936:	4638      	mov	r0, r7
 8009938:	f002 fe64 	bl	800c604 <__malloc_unlock>
 800993c:	e7a1      	b.n	8009882 <_malloc_r+0x22>
 800993e:	6025      	str	r5, [r4, #0]
 8009940:	e7de      	b.n	8009900 <_malloc_r+0xa0>
 8009942:	bf00      	nop
 8009944:	20000b24 	.word	0x20000b24

08009948 <__cvt>:
 8009948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994a:	ed2d 8b02 	vpush	{d8}
 800994e:	eeb0 8b40 	vmov.f64	d8, d0
 8009952:	b085      	sub	sp, #20
 8009954:	4617      	mov	r7, r2
 8009956:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009958:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800995a:	ee18 2a90 	vmov	r2, s17
 800995e:	f025 0520 	bic.w	r5, r5, #32
 8009962:	2a00      	cmp	r2, #0
 8009964:	bfb6      	itet	lt
 8009966:	222d      	movlt	r2, #45	; 0x2d
 8009968:	2200      	movge	r2, #0
 800996a:	eeb1 8b40 	vneglt.f64	d8, d0
 800996e:	2d46      	cmp	r5, #70	; 0x46
 8009970:	460c      	mov	r4, r1
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	d004      	beq.n	8009980 <__cvt+0x38>
 8009976:	2d45      	cmp	r5, #69	; 0x45
 8009978:	d100      	bne.n	800997c <__cvt+0x34>
 800997a:	3401      	adds	r4, #1
 800997c:	2102      	movs	r1, #2
 800997e:	e000      	b.n	8009982 <__cvt+0x3a>
 8009980:	2103      	movs	r1, #3
 8009982:	ab03      	add	r3, sp, #12
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	ab02      	add	r3, sp, #8
 8009988:	9300      	str	r3, [sp, #0]
 800998a:	4622      	mov	r2, r4
 800998c:	4633      	mov	r3, r6
 800998e:	eeb0 0b48 	vmov.f64	d0, d8
 8009992:	f001 fd3d 	bl	800b410 <_dtoa_r>
 8009996:	2d47      	cmp	r5, #71	; 0x47
 8009998:	d101      	bne.n	800999e <__cvt+0x56>
 800999a:	07fb      	lsls	r3, r7, #31
 800999c:	d51a      	bpl.n	80099d4 <__cvt+0x8c>
 800999e:	2d46      	cmp	r5, #70	; 0x46
 80099a0:	eb00 0204 	add.w	r2, r0, r4
 80099a4:	d10c      	bne.n	80099c0 <__cvt+0x78>
 80099a6:	7803      	ldrb	r3, [r0, #0]
 80099a8:	2b30      	cmp	r3, #48	; 0x30
 80099aa:	d107      	bne.n	80099bc <__cvt+0x74>
 80099ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b4:	bf1c      	itt	ne
 80099b6:	f1c4 0401 	rsbne	r4, r4, #1
 80099ba:	6034      	strne	r4, [r6, #0]
 80099bc:	6833      	ldr	r3, [r6, #0]
 80099be:	441a      	add	r2, r3
 80099c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c8:	bf08      	it	eq
 80099ca:	9203      	streq	r2, [sp, #12]
 80099cc:	2130      	movs	r1, #48	; 0x30
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d307      	bcc.n	80099e4 <__cvt+0x9c>
 80099d4:	9b03      	ldr	r3, [sp, #12]
 80099d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099d8:	1a1b      	subs	r3, r3, r0
 80099da:	6013      	str	r3, [r2, #0]
 80099dc:	b005      	add	sp, #20
 80099de:	ecbd 8b02 	vpop	{d8}
 80099e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e4:	1c5c      	adds	r4, r3, #1
 80099e6:	9403      	str	r4, [sp, #12]
 80099e8:	7019      	strb	r1, [r3, #0]
 80099ea:	e7f0      	b.n	80099ce <__cvt+0x86>

080099ec <__exponent>:
 80099ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ee:	4603      	mov	r3, r0
 80099f0:	2900      	cmp	r1, #0
 80099f2:	bfb8      	it	lt
 80099f4:	4249      	neglt	r1, r1
 80099f6:	f803 2b02 	strb.w	r2, [r3], #2
 80099fa:	bfb4      	ite	lt
 80099fc:	222d      	movlt	r2, #45	; 0x2d
 80099fe:	222b      	movge	r2, #43	; 0x2b
 8009a00:	2909      	cmp	r1, #9
 8009a02:	7042      	strb	r2, [r0, #1]
 8009a04:	dd2a      	ble.n	8009a5c <__exponent+0x70>
 8009a06:	f10d 0407 	add.w	r4, sp, #7
 8009a0a:	46a4      	mov	ip, r4
 8009a0c:	270a      	movs	r7, #10
 8009a0e:	46a6      	mov	lr, r4
 8009a10:	460a      	mov	r2, r1
 8009a12:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a16:	fb07 1516 	mls	r5, r7, r6, r1
 8009a1a:	3530      	adds	r5, #48	; 0x30
 8009a1c:	2a63      	cmp	r2, #99	; 0x63
 8009a1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a26:	4631      	mov	r1, r6
 8009a28:	dcf1      	bgt.n	8009a0e <__exponent+0x22>
 8009a2a:	3130      	adds	r1, #48	; 0x30
 8009a2c:	f1ae 0502 	sub.w	r5, lr, #2
 8009a30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a34:	1c44      	adds	r4, r0, #1
 8009a36:	4629      	mov	r1, r5
 8009a38:	4561      	cmp	r1, ip
 8009a3a:	d30a      	bcc.n	8009a52 <__exponent+0x66>
 8009a3c:	f10d 0209 	add.w	r2, sp, #9
 8009a40:	eba2 020e 	sub.w	r2, r2, lr
 8009a44:	4565      	cmp	r5, ip
 8009a46:	bf88      	it	hi
 8009a48:	2200      	movhi	r2, #0
 8009a4a:	4413      	add	r3, r2
 8009a4c:	1a18      	subs	r0, r3, r0
 8009a4e:	b003      	add	sp, #12
 8009a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a5a:	e7ed      	b.n	8009a38 <__exponent+0x4c>
 8009a5c:	2330      	movs	r3, #48	; 0x30
 8009a5e:	3130      	adds	r1, #48	; 0x30
 8009a60:	7083      	strb	r3, [r0, #2]
 8009a62:	70c1      	strb	r1, [r0, #3]
 8009a64:	1d03      	adds	r3, r0, #4
 8009a66:	e7f1      	b.n	8009a4c <__exponent+0x60>

08009a68 <_printf_float>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	b08b      	sub	sp, #44	; 0x2c
 8009a6e:	460c      	mov	r4, r1
 8009a70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009a74:	4616      	mov	r6, r2
 8009a76:	461f      	mov	r7, r3
 8009a78:	4605      	mov	r5, r0
 8009a7a:	f002 fda7 	bl	800c5cc <_localeconv_r>
 8009a7e:	f8d0 b000 	ldr.w	fp, [r0]
 8009a82:	4658      	mov	r0, fp
 8009a84:	f7f6 fbdc 	bl	8000240 <strlen>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	9308      	str	r3, [sp, #32]
 8009a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009a94:	6822      	ldr	r2, [r4, #0]
 8009a96:	3307      	adds	r3, #7
 8009a98:	f023 0307 	bic.w	r3, r3, #7
 8009a9c:	f103 0108 	add.w	r1, r3, #8
 8009aa0:	f8c8 1000 	str.w	r1, [r8]
 8009aa4:	4682      	mov	sl, r0
 8009aa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009aaa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009aae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009d10 <_printf_float+0x2a8>
 8009ab2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009ab6:	eeb0 6bc0 	vabs.f64	d6, d0
 8009aba:	eeb4 6b47 	vcmp.f64	d6, d7
 8009abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac2:	dd24      	ble.n	8009b0e <_printf_float+0xa6>
 8009ac4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009acc:	d502      	bpl.n	8009ad4 <_printf_float+0x6c>
 8009ace:	232d      	movs	r3, #45	; 0x2d
 8009ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ad4:	4b90      	ldr	r3, [pc, #576]	; (8009d18 <_printf_float+0x2b0>)
 8009ad6:	4891      	ldr	r0, [pc, #580]	; (8009d1c <_printf_float+0x2b4>)
 8009ad8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009adc:	bf94      	ite	ls
 8009ade:	4698      	movls	r8, r3
 8009ae0:	4680      	movhi	r8, r0
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	6123      	str	r3, [r4, #16]
 8009ae6:	f022 0204 	bic.w	r2, r2, #4
 8009aea:	2300      	movs	r3, #0
 8009aec:	6022      	str	r2, [r4, #0]
 8009aee:	9304      	str	r3, [sp, #16]
 8009af0:	9700      	str	r7, [sp, #0]
 8009af2:	4633      	mov	r3, r6
 8009af4:	aa09      	add	r2, sp, #36	; 0x24
 8009af6:	4621      	mov	r1, r4
 8009af8:	4628      	mov	r0, r5
 8009afa:	f000 f9d3 	bl	8009ea4 <_printf_common>
 8009afe:	3001      	adds	r0, #1
 8009b00:	f040 808a 	bne.w	8009c18 <_printf_float+0x1b0>
 8009b04:	f04f 30ff 	mov.w	r0, #4294967295
 8009b08:	b00b      	add	sp, #44	; 0x2c
 8009b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b16:	d709      	bvc.n	8009b2c <_printf_float+0xc4>
 8009b18:	ee10 3a90 	vmov	r3, s1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	bfbc      	itt	lt
 8009b20:	232d      	movlt	r3, #45	; 0x2d
 8009b22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b26:	487e      	ldr	r0, [pc, #504]	; (8009d20 <_printf_float+0x2b8>)
 8009b28:	4b7e      	ldr	r3, [pc, #504]	; (8009d24 <_printf_float+0x2bc>)
 8009b2a:	e7d5      	b.n	8009ad8 <_printf_float+0x70>
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009b32:	9104      	str	r1, [sp, #16]
 8009b34:	1c59      	adds	r1, r3, #1
 8009b36:	d13c      	bne.n	8009bb2 <_printf_float+0x14a>
 8009b38:	2306      	movs	r3, #6
 8009b3a:	6063      	str	r3, [r4, #4]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9303      	str	r3, [sp, #12]
 8009b40:	ab08      	add	r3, sp, #32
 8009b42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009b46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b4a:	ab07      	add	r3, sp, #28
 8009b4c:	6861      	ldr	r1, [r4, #4]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	6022      	str	r2, [r4, #0]
 8009b52:	f10d 031b 	add.w	r3, sp, #27
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7ff fef6 	bl	8009948 <__cvt>
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	9907      	ldr	r1, [sp, #28]
 8009b60:	2b47      	cmp	r3, #71	; 0x47
 8009b62:	4680      	mov	r8, r0
 8009b64:	d108      	bne.n	8009b78 <_printf_float+0x110>
 8009b66:	1cc8      	adds	r0, r1, #3
 8009b68:	db02      	blt.n	8009b70 <_printf_float+0x108>
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	4299      	cmp	r1, r3
 8009b6e:	dd41      	ble.n	8009bf4 <_printf_float+0x18c>
 8009b70:	f1a9 0902 	sub.w	r9, r9, #2
 8009b74:	fa5f f989 	uxtb.w	r9, r9
 8009b78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009b7c:	d820      	bhi.n	8009bc0 <_printf_float+0x158>
 8009b7e:	3901      	subs	r1, #1
 8009b80:	464a      	mov	r2, r9
 8009b82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b86:	9107      	str	r1, [sp, #28]
 8009b88:	f7ff ff30 	bl	80099ec <__exponent>
 8009b8c:	9a08      	ldr	r2, [sp, #32]
 8009b8e:	9004      	str	r0, [sp, #16]
 8009b90:	1813      	adds	r3, r2, r0
 8009b92:	2a01      	cmp	r2, #1
 8009b94:	6123      	str	r3, [r4, #16]
 8009b96:	dc02      	bgt.n	8009b9e <_printf_float+0x136>
 8009b98:	6822      	ldr	r2, [r4, #0]
 8009b9a:	07d2      	lsls	r2, r2, #31
 8009b9c:	d501      	bpl.n	8009ba2 <_printf_float+0x13a>
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	6123      	str	r3, [r4, #16]
 8009ba2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0a2      	beq.n	8009af0 <_printf_float+0x88>
 8009baa:	232d      	movs	r3, #45	; 0x2d
 8009bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb0:	e79e      	b.n	8009af0 <_printf_float+0x88>
 8009bb2:	9904      	ldr	r1, [sp, #16]
 8009bb4:	2947      	cmp	r1, #71	; 0x47
 8009bb6:	d1c1      	bne.n	8009b3c <_printf_float+0xd4>
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1bf      	bne.n	8009b3c <_printf_float+0xd4>
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e7bc      	b.n	8009b3a <_printf_float+0xd2>
 8009bc0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009bc4:	d118      	bne.n	8009bf8 <_printf_float+0x190>
 8009bc6:	2900      	cmp	r1, #0
 8009bc8:	6863      	ldr	r3, [r4, #4]
 8009bca:	dd0b      	ble.n	8009be4 <_printf_float+0x17c>
 8009bcc:	6121      	str	r1, [r4, #16]
 8009bce:	b913      	cbnz	r3, 8009bd6 <_printf_float+0x16e>
 8009bd0:	6822      	ldr	r2, [r4, #0]
 8009bd2:	07d0      	lsls	r0, r2, #31
 8009bd4:	d502      	bpl.n	8009bdc <_printf_float+0x174>
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	440b      	add	r3, r1
 8009bda:	6123      	str	r3, [r4, #16]
 8009bdc:	2300      	movs	r3, #0
 8009bde:	65a1      	str	r1, [r4, #88]	; 0x58
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	e7de      	b.n	8009ba2 <_printf_float+0x13a>
 8009be4:	b913      	cbnz	r3, 8009bec <_printf_float+0x184>
 8009be6:	6822      	ldr	r2, [r4, #0]
 8009be8:	07d2      	lsls	r2, r2, #31
 8009bea:	d501      	bpl.n	8009bf0 <_printf_float+0x188>
 8009bec:	3302      	adds	r3, #2
 8009bee:	e7f4      	b.n	8009bda <_printf_float+0x172>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e7f2      	b.n	8009bda <_printf_float+0x172>
 8009bf4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009bf8:	9b08      	ldr	r3, [sp, #32]
 8009bfa:	4299      	cmp	r1, r3
 8009bfc:	db05      	blt.n	8009c0a <_printf_float+0x1a2>
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	6121      	str	r1, [r4, #16]
 8009c02:	07d8      	lsls	r0, r3, #31
 8009c04:	d5ea      	bpl.n	8009bdc <_printf_float+0x174>
 8009c06:	1c4b      	adds	r3, r1, #1
 8009c08:	e7e7      	b.n	8009bda <_printf_float+0x172>
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	bfd4      	ite	le
 8009c0e:	f1c1 0202 	rsble	r2, r1, #2
 8009c12:	2201      	movgt	r2, #1
 8009c14:	4413      	add	r3, r2
 8009c16:	e7e0      	b.n	8009bda <_printf_float+0x172>
 8009c18:	6823      	ldr	r3, [r4, #0]
 8009c1a:	055a      	lsls	r2, r3, #21
 8009c1c:	d407      	bmi.n	8009c2e <_printf_float+0x1c6>
 8009c1e:	6923      	ldr	r3, [r4, #16]
 8009c20:	4642      	mov	r2, r8
 8009c22:	4631      	mov	r1, r6
 8009c24:	4628      	mov	r0, r5
 8009c26:	47b8      	blx	r7
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d12a      	bne.n	8009c82 <_printf_float+0x21a>
 8009c2c:	e76a      	b.n	8009b04 <_printf_float+0x9c>
 8009c2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c32:	f240 80e2 	bls.w	8009dfa <_printf_float+0x392>
 8009c36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009c3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c42:	d133      	bne.n	8009cac <_printf_float+0x244>
 8009c44:	4a38      	ldr	r2, [pc, #224]	; (8009d28 <_printf_float+0x2c0>)
 8009c46:	2301      	movs	r3, #1
 8009c48:	4631      	mov	r1, r6
 8009c4a:	4628      	mov	r0, r5
 8009c4c:	47b8      	blx	r7
 8009c4e:	3001      	adds	r0, #1
 8009c50:	f43f af58 	beq.w	8009b04 <_printf_float+0x9c>
 8009c54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	db02      	blt.n	8009c62 <_printf_float+0x1fa>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	07d8      	lsls	r0, r3, #31
 8009c60:	d50f      	bpl.n	8009c82 <_printf_float+0x21a>
 8009c62:	4653      	mov	r3, sl
 8009c64:	465a      	mov	r2, fp
 8009c66:	4631      	mov	r1, r6
 8009c68:	4628      	mov	r0, r5
 8009c6a:	47b8      	blx	r7
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	f43f af49 	beq.w	8009b04 <_printf_float+0x9c>
 8009c72:	f04f 0800 	mov.w	r8, #0
 8009c76:	f104 091a 	add.w	r9, r4, #26
 8009c7a:	9b08      	ldr	r3, [sp, #32]
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	4543      	cmp	r3, r8
 8009c80:	dc09      	bgt.n	8009c96 <_printf_float+0x22e>
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	079b      	lsls	r3, r3, #30
 8009c86:	f100 8108 	bmi.w	8009e9a <_printf_float+0x432>
 8009c8a:	68e0      	ldr	r0, [r4, #12]
 8009c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c8e:	4298      	cmp	r0, r3
 8009c90:	bfb8      	it	lt
 8009c92:	4618      	movlt	r0, r3
 8009c94:	e738      	b.n	8009b08 <_printf_float+0xa0>
 8009c96:	2301      	movs	r3, #1
 8009c98:	464a      	mov	r2, r9
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f af2f 	beq.w	8009b04 <_printf_float+0x9c>
 8009ca6:	f108 0801 	add.w	r8, r8, #1
 8009caa:	e7e6      	b.n	8009c7a <_printf_float+0x212>
 8009cac:	9b07      	ldr	r3, [sp, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	dc3c      	bgt.n	8009d2c <_printf_float+0x2c4>
 8009cb2:	4a1d      	ldr	r2, [pc, #116]	; (8009d28 <_printf_float+0x2c0>)
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b8      	blx	r7
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	f43f af21 	beq.w	8009b04 <_printf_float+0x9c>
 8009cc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	d102      	bne.n	8009cd0 <_printf_float+0x268>
 8009cca:	6823      	ldr	r3, [r4, #0]
 8009ccc:	07d9      	lsls	r1, r3, #31
 8009cce:	d5d8      	bpl.n	8009c82 <_printf_float+0x21a>
 8009cd0:	4653      	mov	r3, sl
 8009cd2:	465a      	mov	r2, fp
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	f43f af12 	beq.w	8009b04 <_printf_float+0x9c>
 8009ce0:	f04f 0900 	mov.w	r9, #0
 8009ce4:	f104 0a1a 	add.w	sl, r4, #26
 8009ce8:	9b07      	ldr	r3, [sp, #28]
 8009cea:	425b      	negs	r3, r3
 8009cec:	454b      	cmp	r3, r9
 8009cee:	dc01      	bgt.n	8009cf4 <_printf_float+0x28c>
 8009cf0:	9b08      	ldr	r3, [sp, #32]
 8009cf2:	e795      	b.n	8009c20 <_printf_float+0x1b8>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	4652      	mov	r2, sl
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b8      	blx	r7
 8009cfe:	3001      	adds	r0, #1
 8009d00:	f43f af00 	beq.w	8009b04 <_printf_float+0x9c>
 8009d04:	f109 0901 	add.w	r9, r9, #1
 8009d08:	e7ee      	b.n	8009ce8 <_printf_float+0x280>
 8009d0a:	bf00      	nop
 8009d0c:	f3af 8000 	nop.w
 8009d10:	ffffffff 	.word	0xffffffff
 8009d14:	7fefffff 	.word	0x7fefffff
 8009d18:	0800e314 	.word	0x0800e314
 8009d1c:	0800e318 	.word	0x0800e318
 8009d20:	0800e320 	.word	0x0800e320
 8009d24:	0800e31c 	.word	0x0800e31c
 8009d28:	0800e324 	.word	0x0800e324
 8009d2c:	9a08      	ldr	r2, [sp, #32]
 8009d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d30:	429a      	cmp	r2, r3
 8009d32:	bfa8      	it	ge
 8009d34:	461a      	movge	r2, r3
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	4691      	mov	r9, r2
 8009d3a:	dc38      	bgt.n	8009dae <_printf_float+0x346>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9305      	str	r3, [sp, #20]
 8009d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d44:	f104 021a 	add.w	r2, r4, #26
 8009d48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d4a:	9905      	ldr	r1, [sp, #20]
 8009d4c:	9304      	str	r3, [sp, #16]
 8009d4e:	eba3 0309 	sub.w	r3, r3, r9
 8009d52:	428b      	cmp	r3, r1
 8009d54:	dc33      	bgt.n	8009dbe <_printf_float+0x356>
 8009d56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	db3c      	blt.n	8009dd8 <_printf_float+0x370>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	07da      	lsls	r2, r3, #31
 8009d62:	d439      	bmi.n	8009dd8 <_printf_float+0x370>
 8009d64:	9b08      	ldr	r3, [sp, #32]
 8009d66:	9a04      	ldr	r2, [sp, #16]
 8009d68:	9907      	ldr	r1, [sp, #28]
 8009d6a:	1a9a      	subs	r2, r3, r2
 8009d6c:	eba3 0901 	sub.w	r9, r3, r1
 8009d70:	4591      	cmp	r9, r2
 8009d72:	bfa8      	it	ge
 8009d74:	4691      	movge	r9, r2
 8009d76:	f1b9 0f00 	cmp.w	r9, #0
 8009d7a:	dc35      	bgt.n	8009de8 <_printf_float+0x380>
 8009d7c:	f04f 0800 	mov.w	r8, #0
 8009d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d84:	f104 0a1a 	add.w	sl, r4, #26
 8009d88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d8c:	1a9b      	subs	r3, r3, r2
 8009d8e:	eba3 0309 	sub.w	r3, r3, r9
 8009d92:	4543      	cmp	r3, r8
 8009d94:	f77f af75 	ble.w	8009c82 <_printf_float+0x21a>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	4652      	mov	r2, sl
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f aeae 	beq.w	8009b04 <_printf_float+0x9c>
 8009da8:	f108 0801 	add.w	r8, r8, #1
 8009dac:	e7ec      	b.n	8009d88 <_printf_float+0x320>
 8009dae:	4613      	mov	r3, r2
 8009db0:	4631      	mov	r1, r6
 8009db2:	4642      	mov	r2, r8
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	d1bf      	bne.n	8009d3c <_printf_float+0x2d4>
 8009dbc:	e6a2      	b.n	8009b04 <_printf_float+0x9c>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	9204      	str	r2, [sp, #16]
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	f43f ae9b 	beq.w	8009b04 <_printf_float+0x9c>
 8009dce:	9b05      	ldr	r3, [sp, #20]
 8009dd0:	9a04      	ldr	r2, [sp, #16]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	9305      	str	r3, [sp, #20]
 8009dd6:	e7b7      	b.n	8009d48 <_printf_float+0x2e0>
 8009dd8:	4653      	mov	r3, sl
 8009dda:	465a      	mov	r2, fp
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	d1be      	bne.n	8009d64 <_printf_float+0x2fc>
 8009de6:	e68d      	b.n	8009b04 <_printf_float+0x9c>
 8009de8:	9a04      	ldr	r2, [sp, #16]
 8009dea:	464b      	mov	r3, r9
 8009dec:	4442      	add	r2, r8
 8009dee:	4631      	mov	r1, r6
 8009df0:	4628      	mov	r0, r5
 8009df2:	47b8      	blx	r7
 8009df4:	3001      	adds	r0, #1
 8009df6:	d1c1      	bne.n	8009d7c <_printf_float+0x314>
 8009df8:	e684      	b.n	8009b04 <_printf_float+0x9c>
 8009dfa:	9a08      	ldr	r2, [sp, #32]
 8009dfc:	2a01      	cmp	r2, #1
 8009dfe:	dc01      	bgt.n	8009e04 <_printf_float+0x39c>
 8009e00:	07db      	lsls	r3, r3, #31
 8009e02:	d537      	bpl.n	8009e74 <_printf_float+0x40c>
 8009e04:	2301      	movs	r3, #1
 8009e06:	4642      	mov	r2, r8
 8009e08:	4631      	mov	r1, r6
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	47b8      	blx	r7
 8009e0e:	3001      	adds	r0, #1
 8009e10:	f43f ae78 	beq.w	8009b04 <_printf_float+0x9c>
 8009e14:	4653      	mov	r3, sl
 8009e16:	465a      	mov	r2, fp
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b8      	blx	r7
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f43f ae70 	beq.w	8009b04 <_printf_float+0x9c>
 8009e24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009e28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e30:	d01b      	beq.n	8009e6a <_printf_float+0x402>
 8009e32:	9b08      	ldr	r3, [sp, #32]
 8009e34:	f108 0201 	add.w	r2, r8, #1
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	d10e      	bne.n	8009e62 <_printf_float+0x3fa>
 8009e44:	e65e      	b.n	8009b04 <_printf_float+0x9c>
 8009e46:	2301      	movs	r3, #1
 8009e48:	464a      	mov	r2, r9
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	f43f ae57 	beq.w	8009b04 <_printf_float+0x9c>
 8009e56:	f108 0801 	add.w	r8, r8, #1
 8009e5a:	9b08      	ldr	r3, [sp, #32]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	4543      	cmp	r3, r8
 8009e60:	dcf1      	bgt.n	8009e46 <_printf_float+0x3de>
 8009e62:	9b04      	ldr	r3, [sp, #16]
 8009e64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e68:	e6db      	b.n	8009c22 <_printf_float+0x1ba>
 8009e6a:	f04f 0800 	mov.w	r8, #0
 8009e6e:	f104 091a 	add.w	r9, r4, #26
 8009e72:	e7f2      	b.n	8009e5a <_printf_float+0x3f2>
 8009e74:	2301      	movs	r3, #1
 8009e76:	4642      	mov	r2, r8
 8009e78:	e7df      	b.n	8009e3a <_printf_float+0x3d2>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	464a      	mov	r2, r9
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b8      	blx	r7
 8009e84:	3001      	adds	r0, #1
 8009e86:	f43f ae3d 	beq.w	8009b04 <_printf_float+0x9c>
 8009e8a:	f108 0801 	add.w	r8, r8, #1
 8009e8e:	68e3      	ldr	r3, [r4, #12]
 8009e90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e92:	1a5b      	subs	r3, r3, r1
 8009e94:	4543      	cmp	r3, r8
 8009e96:	dcf0      	bgt.n	8009e7a <_printf_float+0x412>
 8009e98:	e6f7      	b.n	8009c8a <_printf_float+0x222>
 8009e9a:	f04f 0800 	mov.w	r8, #0
 8009e9e:	f104 0919 	add.w	r9, r4, #25
 8009ea2:	e7f4      	b.n	8009e8e <_printf_float+0x426>

08009ea4 <_printf_common>:
 8009ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea8:	4616      	mov	r6, r2
 8009eaa:	4699      	mov	r9, r3
 8009eac:	688a      	ldr	r2, [r1, #8]
 8009eae:	690b      	ldr	r3, [r1, #16]
 8009eb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	bfb8      	it	lt
 8009eb8:	4613      	movlt	r3, r2
 8009eba:	6033      	str	r3, [r6, #0]
 8009ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ec0:	4607      	mov	r7, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	b10a      	cbz	r2, 8009eca <_printf_common+0x26>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	6033      	str	r3, [r6, #0]
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	0699      	lsls	r1, r3, #26
 8009ece:	bf42      	ittt	mi
 8009ed0:	6833      	ldrmi	r3, [r6, #0]
 8009ed2:	3302      	addmi	r3, #2
 8009ed4:	6033      	strmi	r3, [r6, #0]
 8009ed6:	6825      	ldr	r5, [r4, #0]
 8009ed8:	f015 0506 	ands.w	r5, r5, #6
 8009edc:	d106      	bne.n	8009eec <_printf_common+0x48>
 8009ede:	f104 0a19 	add.w	sl, r4, #25
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	6832      	ldr	r2, [r6, #0]
 8009ee6:	1a9b      	subs	r3, r3, r2
 8009ee8:	42ab      	cmp	r3, r5
 8009eea:	dc26      	bgt.n	8009f3a <_printf_common+0x96>
 8009eec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ef0:	1e13      	subs	r3, r2, #0
 8009ef2:	6822      	ldr	r2, [r4, #0]
 8009ef4:	bf18      	it	ne
 8009ef6:	2301      	movne	r3, #1
 8009ef8:	0692      	lsls	r2, r2, #26
 8009efa:	d42b      	bmi.n	8009f54 <_printf_common+0xb0>
 8009efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f00:	4649      	mov	r1, r9
 8009f02:	4638      	mov	r0, r7
 8009f04:	47c0      	blx	r8
 8009f06:	3001      	adds	r0, #1
 8009f08:	d01e      	beq.n	8009f48 <_printf_common+0xa4>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	68e5      	ldr	r5, [r4, #12]
 8009f0e:	6832      	ldr	r2, [r6, #0]
 8009f10:	f003 0306 	and.w	r3, r3, #6
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	bf08      	it	eq
 8009f18:	1aad      	subeq	r5, r5, r2
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	6922      	ldr	r2, [r4, #16]
 8009f1e:	bf0c      	ite	eq
 8009f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f24:	2500      	movne	r5, #0
 8009f26:	4293      	cmp	r3, r2
 8009f28:	bfc4      	itt	gt
 8009f2a:	1a9b      	subgt	r3, r3, r2
 8009f2c:	18ed      	addgt	r5, r5, r3
 8009f2e:	2600      	movs	r6, #0
 8009f30:	341a      	adds	r4, #26
 8009f32:	42b5      	cmp	r5, r6
 8009f34:	d11a      	bne.n	8009f6c <_printf_common+0xc8>
 8009f36:	2000      	movs	r0, #0
 8009f38:	e008      	b.n	8009f4c <_printf_common+0xa8>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4638      	mov	r0, r7
 8009f42:	47c0      	blx	r8
 8009f44:	3001      	adds	r0, #1
 8009f46:	d103      	bne.n	8009f50 <_printf_common+0xac>
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f50:	3501      	adds	r5, #1
 8009f52:	e7c6      	b.n	8009ee2 <_printf_common+0x3e>
 8009f54:	18e1      	adds	r1, r4, r3
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	2030      	movs	r0, #48	; 0x30
 8009f5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f5e:	4422      	add	r2, r4
 8009f60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f68:	3302      	adds	r3, #2
 8009f6a:	e7c7      	b.n	8009efc <_printf_common+0x58>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	4622      	mov	r2, r4
 8009f70:	4649      	mov	r1, r9
 8009f72:	4638      	mov	r0, r7
 8009f74:	47c0      	blx	r8
 8009f76:	3001      	adds	r0, #1
 8009f78:	d0e6      	beq.n	8009f48 <_printf_common+0xa4>
 8009f7a:	3601      	adds	r6, #1
 8009f7c:	e7d9      	b.n	8009f32 <_printf_common+0x8e>
	...

08009f80 <_printf_i>:
 8009f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f84:	7e0f      	ldrb	r7, [r1, #24]
 8009f86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f88:	2f78      	cmp	r7, #120	; 0x78
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	469a      	mov	sl, r3
 8009f92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f96:	d807      	bhi.n	8009fa8 <_printf_i+0x28>
 8009f98:	2f62      	cmp	r7, #98	; 0x62
 8009f9a:	d80a      	bhi.n	8009fb2 <_printf_i+0x32>
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	f000 80d8 	beq.w	800a152 <_printf_i+0x1d2>
 8009fa2:	2f58      	cmp	r7, #88	; 0x58
 8009fa4:	f000 80a3 	beq.w	800a0ee <_printf_i+0x16e>
 8009fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fb0:	e03a      	b.n	800a028 <_printf_i+0xa8>
 8009fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fb6:	2b15      	cmp	r3, #21
 8009fb8:	d8f6      	bhi.n	8009fa8 <_printf_i+0x28>
 8009fba:	a101      	add	r1, pc, #4	; (adr r1, 8009fc0 <_printf_i+0x40>)
 8009fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc0:	0800a019 	.word	0x0800a019
 8009fc4:	0800a02d 	.word	0x0800a02d
 8009fc8:	08009fa9 	.word	0x08009fa9
 8009fcc:	08009fa9 	.word	0x08009fa9
 8009fd0:	08009fa9 	.word	0x08009fa9
 8009fd4:	08009fa9 	.word	0x08009fa9
 8009fd8:	0800a02d 	.word	0x0800a02d
 8009fdc:	08009fa9 	.word	0x08009fa9
 8009fe0:	08009fa9 	.word	0x08009fa9
 8009fe4:	08009fa9 	.word	0x08009fa9
 8009fe8:	08009fa9 	.word	0x08009fa9
 8009fec:	0800a139 	.word	0x0800a139
 8009ff0:	0800a05d 	.word	0x0800a05d
 8009ff4:	0800a11b 	.word	0x0800a11b
 8009ff8:	08009fa9 	.word	0x08009fa9
 8009ffc:	08009fa9 	.word	0x08009fa9
 800a000:	0800a15b 	.word	0x0800a15b
 800a004:	08009fa9 	.word	0x08009fa9
 800a008:	0800a05d 	.word	0x0800a05d
 800a00c:	08009fa9 	.word	0x08009fa9
 800a010:	08009fa9 	.word	0x08009fa9
 800a014:	0800a123 	.word	0x0800a123
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	1d1a      	adds	r2, r3, #4
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	602a      	str	r2, [r5, #0]
 800a020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a028:	2301      	movs	r3, #1
 800a02a:	e0a3      	b.n	800a174 <_printf_i+0x1f4>
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	6829      	ldr	r1, [r5, #0]
 800a030:	0606      	lsls	r6, r0, #24
 800a032:	f101 0304 	add.w	r3, r1, #4
 800a036:	d50a      	bpl.n	800a04e <_printf_i+0xce>
 800a038:	680e      	ldr	r6, [r1, #0]
 800a03a:	602b      	str	r3, [r5, #0]
 800a03c:	2e00      	cmp	r6, #0
 800a03e:	da03      	bge.n	800a048 <_printf_i+0xc8>
 800a040:	232d      	movs	r3, #45	; 0x2d
 800a042:	4276      	negs	r6, r6
 800a044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a048:	485e      	ldr	r0, [pc, #376]	; (800a1c4 <_printf_i+0x244>)
 800a04a:	230a      	movs	r3, #10
 800a04c:	e019      	b.n	800a082 <_printf_i+0x102>
 800a04e:	680e      	ldr	r6, [r1, #0]
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a056:	bf18      	it	ne
 800a058:	b236      	sxthne	r6, r6
 800a05a:	e7ef      	b.n	800a03c <_printf_i+0xbc>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	6820      	ldr	r0, [r4, #0]
 800a060:	1d19      	adds	r1, r3, #4
 800a062:	6029      	str	r1, [r5, #0]
 800a064:	0601      	lsls	r1, r0, #24
 800a066:	d501      	bpl.n	800a06c <_printf_i+0xec>
 800a068:	681e      	ldr	r6, [r3, #0]
 800a06a:	e002      	b.n	800a072 <_printf_i+0xf2>
 800a06c:	0646      	lsls	r6, r0, #25
 800a06e:	d5fb      	bpl.n	800a068 <_printf_i+0xe8>
 800a070:	881e      	ldrh	r6, [r3, #0]
 800a072:	4854      	ldr	r0, [pc, #336]	; (800a1c4 <_printf_i+0x244>)
 800a074:	2f6f      	cmp	r7, #111	; 0x6f
 800a076:	bf0c      	ite	eq
 800a078:	2308      	moveq	r3, #8
 800a07a:	230a      	movne	r3, #10
 800a07c:	2100      	movs	r1, #0
 800a07e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a082:	6865      	ldr	r5, [r4, #4]
 800a084:	60a5      	str	r5, [r4, #8]
 800a086:	2d00      	cmp	r5, #0
 800a088:	bfa2      	ittt	ge
 800a08a:	6821      	ldrge	r1, [r4, #0]
 800a08c:	f021 0104 	bicge.w	r1, r1, #4
 800a090:	6021      	strge	r1, [r4, #0]
 800a092:	b90e      	cbnz	r6, 800a098 <_printf_i+0x118>
 800a094:	2d00      	cmp	r5, #0
 800a096:	d04d      	beq.n	800a134 <_printf_i+0x1b4>
 800a098:	4615      	mov	r5, r2
 800a09a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a09e:	fb03 6711 	mls	r7, r3, r1, r6
 800a0a2:	5dc7      	ldrb	r7, [r0, r7]
 800a0a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0a8:	4637      	mov	r7, r6
 800a0aa:	42bb      	cmp	r3, r7
 800a0ac:	460e      	mov	r6, r1
 800a0ae:	d9f4      	bls.n	800a09a <_printf_i+0x11a>
 800a0b0:	2b08      	cmp	r3, #8
 800a0b2:	d10b      	bne.n	800a0cc <_printf_i+0x14c>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	07de      	lsls	r6, r3, #31
 800a0b8:	d508      	bpl.n	800a0cc <_printf_i+0x14c>
 800a0ba:	6923      	ldr	r3, [r4, #16]
 800a0bc:	6861      	ldr	r1, [r4, #4]
 800a0be:	4299      	cmp	r1, r3
 800a0c0:	bfde      	ittt	le
 800a0c2:	2330      	movle	r3, #48	; 0x30
 800a0c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0cc:	1b52      	subs	r2, r2, r5
 800a0ce:	6122      	str	r2, [r4, #16]
 800a0d0:	f8cd a000 	str.w	sl, [sp]
 800a0d4:	464b      	mov	r3, r9
 800a0d6:	aa03      	add	r2, sp, #12
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4640      	mov	r0, r8
 800a0dc:	f7ff fee2 	bl	8009ea4 <_printf_common>
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d14c      	bne.n	800a17e <_printf_i+0x1fe>
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	b004      	add	sp, #16
 800a0ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ee:	4835      	ldr	r0, [pc, #212]	; (800a1c4 <_printf_i+0x244>)
 800a0f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0f4:	6829      	ldr	r1, [r5, #0]
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0fc:	6029      	str	r1, [r5, #0]
 800a0fe:	061d      	lsls	r5, r3, #24
 800a100:	d514      	bpl.n	800a12c <_printf_i+0x1ac>
 800a102:	07df      	lsls	r7, r3, #31
 800a104:	bf44      	itt	mi
 800a106:	f043 0320 	orrmi.w	r3, r3, #32
 800a10a:	6023      	strmi	r3, [r4, #0]
 800a10c:	b91e      	cbnz	r6, 800a116 <_printf_i+0x196>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	f023 0320 	bic.w	r3, r3, #32
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	2310      	movs	r3, #16
 800a118:	e7b0      	b.n	800a07c <_printf_i+0xfc>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	f043 0320 	orr.w	r3, r3, #32
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	2378      	movs	r3, #120	; 0x78
 800a124:	4828      	ldr	r0, [pc, #160]	; (800a1c8 <_printf_i+0x248>)
 800a126:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a12a:	e7e3      	b.n	800a0f4 <_printf_i+0x174>
 800a12c:	0659      	lsls	r1, r3, #25
 800a12e:	bf48      	it	mi
 800a130:	b2b6      	uxthmi	r6, r6
 800a132:	e7e6      	b.n	800a102 <_printf_i+0x182>
 800a134:	4615      	mov	r5, r2
 800a136:	e7bb      	b.n	800a0b0 <_printf_i+0x130>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	6826      	ldr	r6, [r4, #0]
 800a13c:	6961      	ldr	r1, [r4, #20]
 800a13e:	1d18      	adds	r0, r3, #4
 800a140:	6028      	str	r0, [r5, #0]
 800a142:	0635      	lsls	r5, r6, #24
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	d501      	bpl.n	800a14c <_printf_i+0x1cc>
 800a148:	6019      	str	r1, [r3, #0]
 800a14a:	e002      	b.n	800a152 <_printf_i+0x1d2>
 800a14c:	0670      	lsls	r0, r6, #25
 800a14e:	d5fb      	bpl.n	800a148 <_printf_i+0x1c8>
 800a150:	8019      	strh	r1, [r3, #0]
 800a152:	2300      	movs	r3, #0
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	4615      	mov	r5, r2
 800a158:	e7ba      	b.n	800a0d0 <_printf_i+0x150>
 800a15a:	682b      	ldr	r3, [r5, #0]
 800a15c:	1d1a      	adds	r2, r3, #4
 800a15e:	602a      	str	r2, [r5, #0]
 800a160:	681d      	ldr	r5, [r3, #0]
 800a162:	6862      	ldr	r2, [r4, #4]
 800a164:	2100      	movs	r1, #0
 800a166:	4628      	mov	r0, r5
 800a168:	f7f6 f872 	bl	8000250 <memchr>
 800a16c:	b108      	cbz	r0, 800a172 <_printf_i+0x1f2>
 800a16e:	1b40      	subs	r0, r0, r5
 800a170:	6060      	str	r0, [r4, #4]
 800a172:	6863      	ldr	r3, [r4, #4]
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	2300      	movs	r3, #0
 800a178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a17c:	e7a8      	b.n	800a0d0 <_printf_i+0x150>
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	462a      	mov	r2, r5
 800a182:	4649      	mov	r1, r9
 800a184:	4640      	mov	r0, r8
 800a186:	47d0      	blx	sl
 800a188:	3001      	adds	r0, #1
 800a18a:	d0ab      	beq.n	800a0e4 <_printf_i+0x164>
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	079b      	lsls	r3, r3, #30
 800a190:	d413      	bmi.n	800a1ba <_printf_i+0x23a>
 800a192:	68e0      	ldr	r0, [r4, #12]
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	4298      	cmp	r0, r3
 800a198:	bfb8      	it	lt
 800a19a:	4618      	movlt	r0, r3
 800a19c:	e7a4      	b.n	800a0e8 <_printf_i+0x168>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	4632      	mov	r2, r6
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	47d0      	blx	sl
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d09b      	beq.n	800a0e4 <_printf_i+0x164>
 800a1ac:	3501      	adds	r5, #1
 800a1ae:	68e3      	ldr	r3, [r4, #12]
 800a1b0:	9903      	ldr	r1, [sp, #12]
 800a1b2:	1a5b      	subs	r3, r3, r1
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	dcf2      	bgt.n	800a19e <_printf_i+0x21e>
 800a1b8:	e7eb      	b.n	800a192 <_printf_i+0x212>
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	f104 0619 	add.w	r6, r4, #25
 800a1c0:	e7f5      	b.n	800a1ae <_printf_i+0x22e>
 800a1c2:	bf00      	nop
 800a1c4:	0800e326 	.word	0x0800e326
 800a1c8:	0800e337 	.word	0x0800e337

0800a1cc <_scanf_float>:
 800a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	b087      	sub	sp, #28
 800a1d2:	4617      	mov	r7, r2
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	688b      	ldr	r3, [r1, #8]
 800a1d8:	1e5a      	subs	r2, r3, #1
 800a1da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a1de:	bf83      	ittte	hi
 800a1e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a1e4:	195b      	addhi	r3, r3, r5
 800a1e6:	9302      	strhi	r3, [sp, #8]
 800a1e8:	2300      	movls	r3, #0
 800a1ea:	bf86      	itte	hi
 800a1ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a1f0:	608b      	strhi	r3, [r1, #8]
 800a1f2:	9302      	strls	r3, [sp, #8]
 800a1f4:	680b      	ldr	r3, [r1, #0]
 800a1f6:	468b      	mov	fp, r1
 800a1f8:	2500      	movs	r5, #0
 800a1fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a1fe:	f84b 3b1c 	str.w	r3, [fp], #28
 800a202:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a206:	4680      	mov	r8, r0
 800a208:	460c      	mov	r4, r1
 800a20a:	465e      	mov	r6, fp
 800a20c:	46aa      	mov	sl, r5
 800a20e:	46a9      	mov	r9, r5
 800a210:	9501      	str	r5, [sp, #4]
 800a212:	68a2      	ldr	r2, [r4, #8]
 800a214:	b152      	cbz	r2, 800a22c <_scanf_float+0x60>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2b4e      	cmp	r3, #78	; 0x4e
 800a21c:	d864      	bhi.n	800a2e8 <_scanf_float+0x11c>
 800a21e:	2b40      	cmp	r3, #64	; 0x40
 800a220:	d83c      	bhi.n	800a29c <_scanf_float+0xd0>
 800a222:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a226:	b2c8      	uxtb	r0, r1
 800a228:	280e      	cmp	r0, #14
 800a22a:	d93a      	bls.n	800a2a2 <_scanf_float+0xd6>
 800a22c:	f1b9 0f00 	cmp.w	r9, #0
 800a230:	d003      	beq.n	800a23a <_scanf_float+0x6e>
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a23e:	f1ba 0f01 	cmp.w	sl, #1
 800a242:	f200 8113 	bhi.w	800a46c <_scanf_float+0x2a0>
 800a246:	455e      	cmp	r6, fp
 800a248:	f200 8105 	bhi.w	800a456 <_scanf_float+0x28a>
 800a24c:	2501      	movs	r5, #1
 800a24e:	4628      	mov	r0, r5
 800a250:	b007      	add	sp, #28
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a256:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a25a:	2a0d      	cmp	r2, #13
 800a25c:	d8e6      	bhi.n	800a22c <_scanf_float+0x60>
 800a25e:	a101      	add	r1, pc, #4	; (adr r1, 800a264 <_scanf_float+0x98>)
 800a260:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a264:	0800a3a3 	.word	0x0800a3a3
 800a268:	0800a22d 	.word	0x0800a22d
 800a26c:	0800a22d 	.word	0x0800a22d
 800a270:	0800a22d 	.word	0x0800a22d
 800a274:	0800a403 	.word	0x0800a403
 800a278:	0800a3db 	.word	0x0800a3db
 800a27c:	0800a22d 	.word	0x0800a22d
 800a280:	0800a22d 	.word	0x0800a22d
 800a284:	0800a3b1 	.word	0x0800a3b1
 800a288:	0800a22d 	.word	0x0800a22d
 800a28c:	0800a22d 	.word	0x0800a22d
 800a290:	0800a22d 	.word	0x0800a22d
 800a294:	0800a22d 	.word	0x0800a22d
 800a298:	0800a369 	.word	0x0800a369
 800a29c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a2a0:	e7db      	b.n	800a25a <_scanf_float+0x8e>
 800a2a2:	290e      	cmp	r1, #14
 800a2a4:	d8c2      	bhi.n	800a22c <_scanf_float+0x60>
 800a2a6:	a001      	add	r0, pc, #4	; (adr r0, 800a2ac <_scanf_float+0xe0>)
 800a2a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a2ac:	0800a35b 	.word	0x0800a35b
 800a2b0:	0800a22d 	.word	0x0800a22d
 800a2b4:	0800a35b 	.word	0x0800a35b
 800a2b8:	0800a3ef 	.word	0x0800a3ef
 800a2bc:	0800a22d 	.word	0x0800a22d
 800a2c0:	0800a309 	.word	0x0800a309
 800a2c4:	0800a345 	.word	0x0800a345
 800a2c8:	0800a345 	.word	0x0800a345
 800a2cc:	0800a345 	.word	0x0800a345
 800a2d0:	0800a345 	.word	0x0800a345
 800a2d4:	0800a345 	.word	0x0800a345
 800a2d8:	0800a345 	.word	0x0800a345
 800a2dc:	0800a345 	.word	0x0800a345
 800a2e0:	0800a345 	.word	0x0800a345
 800a2e4:	0800a345 	.word	0x0800a345
 800a2e8:	2b6e      	cmp	r3, #110	; 0x6e
 800a2ea:	d809      	bhi.n	800a300 <_scanf_float+0x134>
 800a2ec:	2b60      	cmp	r3, #96	; 0x60
 800a2ee:	d8b2      	bhi.n	800a256 <_scanf_float+0x8a>
 800a2f0:	2b54      	cmp	r3, #84	; 0x54
 800a2f2:	d077      	beq.n	800a3e4 <_scanf_float+0x218>
 800a2f4:	2b59      	cmp	r3, #89	; 0x59
 800a2f6:	d199      	bne.n	800a22c <_scanf_float+0x60>
 800a2f8:	2d07      	cmp	r5, #7
 800a2fa:	d197      	bne.n	800a22c <_scanf_float+0x60>
 800a2fc:	2508      	movs	r5, #8
 800a2fe:	e029      	b.n	800a354 <_scanf_float+0x188>
 800a300:	2b74      	cmp	r3, #116	; 0x74
 800a302:	d06f      	beq.n	800a3e4 <_scanf_float+0x218>
 800a304:	2b79      	cmp	r3, #121	; 0x79
 800a306:	e7f6      	b.n	800a2f6 <_scanf_float+0x12a>
 800a308:	6821      	ldr	r1, [r4, #0]
 800a30a:	05c8      	lsls	r0, r1, #23
 800a30c:	d51a      	bpl.n	800a344 <_scanf_float+0x178>
 800a30e:	9b02      	ldr	r3, [sp, #8]
 800a310:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a314:	6021      	str	r1, [r4, #0]
 800a316:	f109 0901 	add.w	r9, r9, #1
 800a31a:	b11b      	cbz	r3, 800a324 <_scanf_float+0x158>
 800a31c:	3b01      	subs	r3, #1
 800a31e:	3201      	adds	r2, #1
 800a320:	9302      	str	r3, [sp, #8]
 800a322:	60a2      	str	r2, [r4, #8]
 800a324:	68a3      	ldr	r3, [r4, #8]
 800a326:	3b01      	subs	r3, #1
 800a328:	60a3      	str	r3, [r4, #8]
 800a32a:	6923      	ldr	r3, [r4, #16]
 800a32c:	3301      	adds	r3, #1
 800a32e:	6123      	str	r3, [r4, #16]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3b01      	subs	r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	607b      	str	r3, [r7, #4]
 800a338:	f340 8084 	ble.w	800a444 <_scanf_float+0x278>
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	3301      	adds	r3, #1
 800a340:	603b      	str	r3, [r7, #0]
 800a342:	e766      	b.n	800a212 <_scanf_float+0x46>
 800a344:	eb1a 0f05 	cmn.w	sl, r5
 800a348:	f47f af70 	bne.w	800a22c <_scanf_float+0x60>
 800a34c:	6822      	ldr	r2, [r4, #0]
 800a34e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a352:	6022      	str	r2, [r4, #0]
 800a354:	f806 3b01 	strb.w	r3, [r6], #1
 800a358:	e7e4      	b.n	800a324 <_scanf_float+0x158>
 800a35a:	6822      	ldr	r2, [r4, #0]
 800a35c:	0610      	lsls	r0, r2, #24
 800a35e:	f57f af65 	bpl.w	800a22c <_scanf_float+0x60>
 800a362:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a366:	e7f4      	b.n	800a352 <_scanf_float+0x186>
 800a368:	f1ba 0f00 	cmp.w	sl, #0
 800a36c:	d10e      	bne.n	800a38c <_scanf_float+0x1c0>
 800a36e:	f1b9 0f00 	cmp.w	r9, #0
 800a372:	d10e      	bne.n	800a392 <_scanf_float+0x1c6>
 800a374:	6822      	ldr	r2, [r4, #0]
 800a376:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a37a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a37e:	d108      	bne.n	800a392 <_scanf_float+0x1c6>
 800a380:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a384:	6022      	str	r2, [r4, #0]
 800a386:	f04f 0a01 	mov.w	sl, #1
 800a38a:	e7e3      	b.n	800a354 <_scanf_float+0x188>
 800a38c:	f1ba 0f02 	cmp.w	sl, #2
 800a390:	d055      	beq.n	800a43e <_scanf_float+0x272>
 800a392:	2d01      	cmp	r5, #1
 800a394:	d002      	beq.n	800a39c <_scanf_float+0x1d0>
 800a396:	2d04      	cmp	r5, #4
 800a398:	f47f af48 	bne.w	800a22c <_scanf_float+0x60>
 800a39c:	3501      	adds	r5, #1
 800a39e:	b2ed      	uxtb	r5, r5
 800a3a0:	e7d8      	b.n	800a354 <_scanf_float+0x188>
 800a3a2:	f1ba 0f01 	cmp.w	sl, #1
 800a3a6:	f47f af41 	bne.w	800a22c <_scanf_float+0x60>
 800a3aa:	f04f 0a02 	mov.w	sl, #2
 800a3ae:	e7d1      	b.n	800a354 <_scanf_float+0x188>
 800a3b0:	b97d      	cbnz	r5, 800a3d2 <_scanf_float+0x206>
 800a3b2:	f1b9 0f00 	cmp.w	r9, #0
 800a3b6:	f47f af3c 	bne.w	800a232 <_scanf_float+0x66>
 800a3ba:	6822      	ldr	r2, [r4, #0]
 800a3bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a3c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a3c4:	f47f af39 	bne.w	800a23a <_scanf_float+0x6e>
 800a3c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a3cc:	6022      	str	r2, [r4, #0]
 800a3ce:	2501      	movs	r5, #1
 800a3d0:	e7c0      	b.n	800a354 <_scanf_float+0x188>
 800a3d2:	2d03      	cmp	r5, #3
 800a3d4:	d0e2      	beq.n	800a39c <_scanf_float+0x1d0>
 800a3d6:	2d05      	cmp	r5, #5
 800a3d8:	e7de      	b.n	800a398 <_scanf_float+0x1cc>
 800a3da:	2d02      	cmp	r5, #2
 800a3dc:	f47f af26 	bne.w	800a22c <_scanf_float+0x60>
 800a3e0:	2503      	movs	r5, #3
 800a3e2:	e7b7      	b.n	800a354 <_scanf_float+0x188>
 800a3e4:	2d06      	cmp	r5, #6
 800a3e6:	f47f af21 	bne.w	800a22c <_scanf_float+0x60>
 800a3ea:	2507      	movs	r5, #7
 800a3ec:	e7b2      	b.n	800a354 <_scanf_float+0x188>
 800a3ee:	6822      	ldr	r2, [r4, #0]
 800a3f0:	0591      	lsls	r1, r2, #22
 800a3f2:	f57f af1b 	bpl.w	800a22c <_scanf_float+0x60>
 800a3f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a3fa:	6022      	str	r2, [r4, #0]
 800a3fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a400:	e7a8      	b.n	800a354 <_scanf_float+0x188>
 800a402:	6822      	ldr	r2, [r4, #0]
 800a404:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a408:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a40c:	d006      	beq.n	800a41c <_scanf_float+0x250>
 800a40e:	0550      	lsls	r0, r2, #21
 800a410:	f57f af0c 	bpl.w	800a22c <_scanf_float+0x60>
 800a414:	f1b9 0f00 	cmp.w	r9, #0
 800a418:	f43f af0f 	beq.w	800a23a <_scanf_float+0x6e>
 800a41c:	0591      	lsls	r1, r2, #22
 800a41e:	bf58      	it	pl
 800a420:	9901      	ldrpl	r1, [sp, #4]
 800a422:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a426:	bf58      	it	pl
 800a428:	eba9 0101 	subpl.w	r1, r9, r1
 800a42c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a430:	bf58      	it	pl
 800a432:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a436:	6022      	str	r2, [r4, #0]
 800a438:	f04f 0900 	mov.w	r9, #0
 800a43c:	e78a      	b.n	800a354 <_scanf_float+0x188>
 800a43e:	f04f 0a03 	mov.w	sl, #3
 800a442:	e787      	b.n	800a354 <_scanf_float+0x188>
 800a444:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a448:	4639      	mov	r1, r7
 800a44a:	4640      	mov	r0, r8
 800a44c:	4798      	blx	r3
 800a44e:	2800      	cmp	r0, #0
 800a450:	f43f aedf 	beq.w	800a212 <_scanf_float+0x46>
 800a454:	e6ea      	b.n	800a22c <_scanf_float+0x60>
 800a456:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a45a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a45e:	463a      	mov	r2, r7
 800a460:	4640      	mov	r0, r8
 800a462:	4798      	blx	r3
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	3b01      	subs	r3, #1
 800a468:	6123      	str	r3, [r4, #16]
 800a46a:	e6ec      	b.n	800a246 <_scanf_float+0x7a>
 800a46c:	1e6b      	subs	r3, r5, #1
 800a46e:	2b06      	cmp	r3, #6
 800a470:	d825      	bhi.n	800a4be <_scanf_float+0x2f2>
 800a472:	2d02      	cmp	r5, #2
 800a474:	d836      	bhi.n	800a4e4 <_scanf_float+0x318>
 800a476:	455e      	cmp	r6, fp
 800a478:	f67f aee8 	bls.w	800a24c <_scanf_float+0x80>
 800a47c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a480:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a484:	463a      	mov	r2, r7
 800a486:	4640      	mov	r0, r8
 800a488:	4798      	blx	r3
 800a48a:	6923      	ldr	r3, [r4, #16]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	6123      	str	r3, [r4, #16]
 800a490:	e7f1      	b.n	800a476 <_scanf_float+0x2aa>
 800a492:	9802      	ldr	r0, [sp, #8]
 800a494:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a498:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a49c:	9002      	str	r0, [sp, #8]
 800a49e:	463a      	mov	r2, r7
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4798      	blx	r3
 800a4a4:	6923      	ldr	r3, [r4, #16]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	6123      	str	r3, [r4, #16]
 800a4aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4ae:	fa5f fa8a 	uxtb.w	sl, sl
 800a4b2:	f1ba 0f02 	cmp.w	sl, #2
 800a4b6:	d1ec      	bne.n	800a492 <_scanf_float+0x2c6>
 800a4b8:	3d03      	subs	r5, #3
 800a4ba:	b2ed      	uxtb	r5, r5
 800a4bc:	1b76      	subs	r6, r6, r5
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	05da      	lsls	r2, r3, #23
 800a4c2:	d52f      	bpl.n	800a524 <_scanf_float+0x358>
 800a4c4:	055b      	lsls	r3, r3, #21
 800a4c6:	d510      	bpl.n	800a4ea <_scanf_float+0x31e>
 800a4c8:	455e      	cmp	r6, fp
 800a4ca:	f67f aebf 	bls.w	800a24c <_scanf_float+0x80>
 800a4ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a4d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a4d6:	463a      	mov	r2, r7
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4798      	blx	r3
 800a4dc:	6923      	ldr	r3, [r4, #16]
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	6123      	str	r3, [r4, #16]
 800a4e2:	e7f1      	b.n	800a4c8 <_scanf_float+0x2fc>
 800a4e4:	46aa      	mov	sl, r5
 800a4e6:	9602      	str	r6, [sp, #8]
 800a4e8:	e7df      	b.n	800a4aa <_scanf_float+0x2de>
 800a4ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	2965      	cmp	r1, #101	; 0x65
 800a4f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4f6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a4fa:	6123      	str	r3, [r4, #16]
 800a4fc:	d00c      	beq.n	800a518 <_scanf_float+0x34c>
 800a4fe:	2945      	cmp	r1, #69	; 0x45
 800a500:	d00a      	beq.n	800a518 <_scanf_float+0x34c>
 800a502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a506:	463a      	mov	r2, r7
 800a508:	4640      	mov	r0, r8
 800a50a:	4798      	blx	r3
 800a50c:	6923      	ldr	r3, [r4, #16]
 800a50e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a512:	3b01      	subs	r3, #1
 800a514:	1eb5      	subs	r5, r6, #2
 800a516:	6123      	str	r3, [r4, #16]
 800a518:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a51c:	463a      	mov	r2, r7
 800a51e:	4640      	mov	r0, r8
 800a520:	4798      	blx	r3
 800a522:	462e      	mov	r6, r5
 800a524:	6825      	ldr	r5, [r4, #0]
 800a526:	f015 0510 	ands.w	r5, r5, #16
 800a52a:	d14e      	bne.n	800a5ca <_scanf_float+0x3fe>
 800a52c:	7035      	strb	r5, [r6, #0]
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a538:	d119      	bne.n	800a56e <_scanf_float+0x3a2>
 800a53a:	9b01      	ldr	r3, [sp, #4]
 800a53c:	454b      	cmp	r3, r9
 800a53e:	eba3 0209 	sub.w	r2, r3, r9
 800a542:	d121      	bne.n	800a588 <_scanf_float+0x3bc>
 800a544:	2200      	movs	r2, #0
 800a546:	4659      	mov	r1, fp
 800a548:	4640      	mov	r0, r8
 800a54a:	f000 fe4b 	bl	800b1e4 <_strtod_r>
 800a54e:	6822      	ldr	r2, [r4, #0]
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	f012 0f02 	tst.w	r2, #2
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	d021      	beq.n	800a59e <_scanf_float+0x3d2>
 800a55a:	9903      	ldr	r1, [sp, #12]
 800a55c:	1d1a      	adds	r2, r3, #4
 800a55e:	600a      	str	r2, [r1, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	ed83 0b00 	vstr	d0, [r3]
 800a566:	68e3      	ldr	r3, [r4, #12]
 800a568:	3301      	adds	r3, #1
 800a56a:	60e3      	str	r3, [r4, #12]
 800a56c:	e66f      	b.n	800a24e <_scanf_float+0x82>
 800a56e:	9b04      	ldr	r3, [sp, #16]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d0e7      	beq.n	800a544 <_scanf_float+0x378>
 800a574:	9905      	ldr	r1, [sp, #20]
 800a576:	230a      	movs	r3, #10
 800a578:	462a      	mov	r2, r5
 800a57a:	3101      	adds	r1, #1
 800a57c:	4640      	mov	r0, r8
 800a57e:	f000 feb9 	bl	800b2f4 <_strtol_r>
 800a582:	9b04      	ldr	r3, [sp, #16]
 800a584:	9e05      	ldr	r6, [sp, #20]
 800a586:	1ac2      	subs	r2, r0, r3
 800a588:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a58c:	429e      	cmp	r6, r3
 800a58e:	bf28      	it	cs
 800a590:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a594:	490e      	ldr	r1, [pc, #56]	; (800a5d0 <_scanf_float+0x404>)
 800a596:	4630      	mov	r0, r6
 800a598:	f000 f834 	bl	800a604 <siprintf>
 800a59c:	e7d2      	b.n	800a544 <_scanf_float+0x378>
 800a59e:	9903      	ldr	r1, [sp, #12]
 800a5a0:	f012 0f04 	tst.w	r2, #4
 800a5a4:	f103 0204 	add.w	r2, r3, #4
 800a5a8:	600a      	str	r2, [r1, #0]
 800a5aa:	d1d9      	bne.n	800a560 <_scanf_float+0x394>
 800a5ac:	eeb4 0b40 	vcmp.f64	d0, d0
 800a5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b4:	681e      	ldr	r6, [r3, #0]
 800a5b6:	d705      	bvc.n	800a5c4 <_scanf_float+0x3f8>
 800a5b8:	4806      	ldr	r0, [pc, #24]	; (800a5d4 <_scanf_float+0x408>)
 800a5ba:	f000 f81d 	bl	800a5f8 <nanf>
 800a5be:	ed86 0a00 	vstr	s0, [r6]
 800a5c2:	e7d0      	b.n	800a566 <_scanf_float+0x39a>
 800a5c4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a5c8:	e7f9      	b.n	800a5be <_scanf_float+0x3f2>
 800a5ca:	2500      	movs	r5, #0
 800a5cc:	e63f      	b.n	800a24e <_scanf_float+0x82>
 800a5ce:	bf00      	nop
 800a5d0:	0800e348 	.word	0x0800e348
 800a5d4:	0800e750 	.word	0x0800e750

0800a5d8 <_sbrk_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4d06      	ldr	r5, [pc, #24]	; (800a5f4 <_sbrk_r+0x1c>)
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	f7f7 fe02 	bl	80021ec <_sbrk>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_sbrk_r+0x1a>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_sbrk_r+0x1a>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	20000b2c 	.word	0x20000b2c

0800a5f8 <nanf>:
 800a5f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a600 <nanf+0x8>
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	7fc00000 	.word	0x7fc00000

0800a604 <siprintf>:
 800a604:	b40e      	push	{r1, r2, r3}
 800a606:	b500      	push	{lr}
 800a608:	b09c      	sub	sp, #112	; 0x70
 800a60a:	ab1d      	add	r3, sp, #116	; 0x74
 800a60c:	9002      	str	r0, [sp, #8]
 800a60e:	9006      	str	r0, [sp, #24]
 800a610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a614:	4809      	ldr	r0, [pc, #36]	; (800a63c <siprintf+0x38>)
 800a616:	9107      	str	r1, [sp, #28]
 800a618:	9104      	str	r1, [sp, #16]
 800a61a:	4909      	ldr	r1, [pc, #36]	; (800a640 <siprintf+0x3c>)
 800a61c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a620:	9105      	str	r1, [sp, #20]
 800a622:	6800      	ldr	r0, [r0, #0]
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	a902      	add	r1, sp, #8
 800a628:	f002 fd22 	bl	800d070 <_svfiprintf_r>
 800a62c:	9b02      	ldr	r3, [sp, #8]
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]
 800a632:	b01c      	add	sp, #112	; 0x70
 800a634:	f85d eb04 	ldr.w	lr, [sp], #4
 800a638:	b003      	add	sp, #12
 800a63a:	4770      	bx	lr
 800a63c:	2000018c 	.word	0x2000018c
 800a640:	ffff0208 	.word	0xffff0208

0800a644 <sulp>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	4604      	mov	r4, r0
 800a648:	460d      	mov	r5, r1
 800a64a:	4616      	mov	r6, r2
 800a64c:	ec45 4b10 	vmov	d0, r4, r5
 800a650:	f002 fb50 	bl	800ccf4 <__ulp>
 800a654:	b17e      	cbz	r6, 800a676 <sulp+0x32>
 800a656:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a65a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd09      	ble.n	800a676 <sulp+0x32>
 800a662:	051b      	lsls	r3, r3, #20
 800a664:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a668:	2000      	movs	r0, #0
 800a66a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a66e:	ec41 0b17 	vmov	d7, r0, r1
 800a672:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a676:	bd70      	pop	{r4, r5, r6, pc}

0800a678 <_strtod_l>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	ed2d 8b0e 	vpush	{d8-d14}
 800a680:	b097      	sub	sp, #92	; 0x5c
 800a682:	461f      	mov	r7, r3
 800a684:	2300      	movs	r3, #0
 800a686:	9312      	str	r3, [sp, #72]	; 0x48
 800a688:	4ba1      	ldr	r3, [pc, #644]	; (800a910 <_strtod_l+0x298>)
 800a68a:	920d      	str	r2, [sp, #52]	; 0x34
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	4604      	mov	r4, r0
 800a692:	4618      	mov	r0, r3
 800a694:	468b      	mov	fp, r1
 800a696:	f7f5 fdd3 	bl	8000240 <strlen>
 800a69a:	f04f 0800 	mov.w	r8, #0
 800a69e:	4605      	mov	r5, r0
 800a6a0:	f04f 0900 	mov.w	r9, #0
 800a6a4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a6a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a6aa:	7813      	ldrb	r3, [r2, #0]
 800a6ac:	2b2b      	cmp	r3, #43	; 0x2b
 800a6ae:	d04d      	beq.n	800a74c <_strtod_l+0xd4>
 800a6b0:	d83a      	bhi.n	800a728 <_strtod_l+0xb0>
 800a6b2:	2b0d      	cmp	r3, #13
 800a6b4:	d833      	bhi.n	800a71e <_strtod_l+0xa6>
 800a6b6:	2b08      	cmp	r3, #8
 800a6b8:	d833      	bhi.n	800a722 <_strtod_l+0xaa>
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d03d      	beq.n	800a73a <_strtod_l+0xc2>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	9308      	str	r3, [sp, #32]
 800a6c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a6c4:	7833      	ldrb	r3, [r6, #0]
 800a6c6:	2b30      	cmp	r3, #48	; 0x30
 800a6c8:	f040 80b0 	bne.w	800a82c <_strtod_l+0x1b4>
 800a6cc:	7873      	ldrb	r3, [r6, #1]
 800a6ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6d2:	2b58      	cmp	r3, #88	; 0x58
 800a6d4:	d167      	bne.n	800a7a6 <_strtod_l+0x12e>
 800a6d6:	9b08      	ldr	r3, [sp, #32]
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	ab12      	add	r3, sp, #72	; 0x48
 800a6dc:	9702      	str	r7, [sp, #8]
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	4a8c      	ldr	r2, [pc, #560]	; (800a914 <_strtod_l+0x29c>)
 800a6e2:	ab13      	add	r3, sp, #76	; 0x4c
 800a6e4:	a911      	add	r1, sp, #68	; 0x44
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f001 fc68 	bl	800bfbc <__gethex>
 800a6ec:	f010 0507 	ands.w	r5, r0, #7
 800a6f0:	4607      	mov	r7, r0
 800a6f2:	d005      	beq.n	800a700 <_strtod_l+0x88>
 800a6f4:	2d06      	cmp	r5, #6
 800a6f6:	d12b      	bne.n	800a750 <_strtod_l+0xd8>
 800a6f8:	3601      	adds	r6, #1
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	9611      	str	r6, [sp, #68]	; 0x44
 800a6fe:	9308      	str	r3, [sp, #32]
 800a700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a702:	2b00      	cmp	r3, #0
 800a704:	f040 854e 	bne.w	800b1a4 <_strtod_l+0xb2c>
 800a708:	9b08      	ldr	r3, [sp, #32]
 800a70a:	b1e3      	cbz	r3, 800a746 <_strtod_l+0xce>
 800a70c:	ec49 8b17 	vmov	d7, r8, r9
 800a710:	eeb1 0b47 	vneg.f64	d0, d7
 800a714:	b017      	add	sp, #92	; 0x5c
 800a716:	ecbd 8b0e 	vpop	{d8-d14}
 800a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71e:	2b20      	cmp	r3, #32
 800a720:	d1cd      	bne.n	800a6be <_strtod_l+0x46>
 800a722:	3201      	adds	r2, #1
 800a724:	9211      	str	r2, [sp, #68]	; 0x44
 800a726:	e7bf      	b.n	800a6a8 <_strtod_l+0x30>
 800a728:	2b2d      	cmp	r3, #45	; 0x2d
 800a72a:	d1c8      	bne.n	800a6be <_strtod_l+0x46>
 800a72c:	2301      	movs	r3, #1
 800a72e:	9308      	str	r3, [sp, #32]
 800a730:	1c53      	adds	r3, r2, #1
 800a732:	9311      	str	r3, [sp, #68]	; 0x44
 800a734:	7853      	ldrb	r3, [r2, #1]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1c3      	bne.n	800a6c2 <_strtod_l+0x4a>
 800a73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a73c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a740:	2b00      	cmp	r3, #0
 800a742:	f040 852d 	bne.w	800b1a0 <_strtod_l+0xb28>
 800a746:	ec49 8b10 	vmov	d0, r8, r9
 800a74a:	e7e3      	b.n	800a714 <_strtod_l+0x9c>
 800a74c:	2300      	movs	r3, #0
 800a74e:	e7ee      	b.n	800a72e <_strtod_l+0xb6>
 800a750:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a752:	b13a      	cbz	r2, 800a764 <_strtod_l+0xec>
 800a754:	2135      	movs	r1, #53	; 0x35
 800a756:	a814      	add	r0, sp, #80	; 0x50
 800a758:	f002 fbd4 	bl	800cf04 <__copybits>
 800a75c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a75e:	4620      	mov	r0, r4
 800a760:	f001 ff96 	bl	800c690 <_Bfree>
 800a764:	3d01      	subs	r5, #1
 800a766:	2d04      	cmp	r5, #4
 800a768:	d806      	bhi.n	800a778 <_strtod_l+0x100>
 800a76a:	e8df f005 	tbb	[pc, r5]
 800a76e:	030a      	.short	0x030a
 800a770:	1714      	.short	0x1714
 800a772:	0a          	.byte	0x0a
 800a773:	00          	.byte	0x00
 800a774:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a778:	073f      	lsls	r7, r7, #28
 800a77a:	d5c1      	bpl.n	800a700 <_strtod_l+0x88>
 800a77c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a780:	e7be      	b.n	800a700 <_strtod_l+0x88>
 800a782:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a786:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a788:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a78c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a790:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a794:	e7f0      	b.n	800a778 <_strtod_l+0x100>
 800a796:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800a918 <_strtod_l+0x2a0>
 800a79a:	e7ed      	b.n	800a778 <_strtod_l+0x100>
 800a79c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a7a0:	f04f 38ff 	mov.w	r8, #4294967295
 800a7a4:	e7e8      	b.n	800a778 <_strtod_l+0x100>
 800a7a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7a8:	1c5a      	adds	r2, r3, #1
 800a7aa:	9211      	str	r2, [sp, #68]	; 0x44
 800a7ac:	785b      	ldrb	r3, [r3, #1]
 800a7ae:	2b30      	cmp	r3, #48	; 0x30
 800a7b0:	d0f9      	beq.n	800a7a6 <_strtod_l+0x12e>
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0a4      	beq.n	800a700 <_strtod_l+0x88>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	f04f 0a00 	mov.w	sl, #0
 800a7bc:	9304      	str	r3, [sp, #16]
 800a7be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a7c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a7c6:	f8cd a018 	str.w	sl, [sp, #24]
 800a7ca:	220a      	movs	r2, #10
 800a7cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a7ce:	7807      	ldrb	r7, [r0, #0]
 800a7d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a7d4:	b2d9      	uxtb	r1, r3
 800a7d6:	2909      	cmp	r1, #9
 800a7d8:	d92a      	bls.n	800a830 <_strtod_l+0x1b8>
 800a7da:	9907      	ldr	r1, [sp, #28]
 800a7dc:	462a      	mov	r2, r5
 800a7de:	f002 fd4f 	bl	800d280 <strncmp>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	d033      	beq.n	800a84e <_strtod_l+0x1d6>
 800a7e6:	2000      	movs	r0, #0
 800a7e8:	9b06      	ldr	r3, [sp, #24]
 800a7ea:	463a      	mov	r2, r7
 800a7ec:	4601      	mov	r1, r0
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	2a65      	cmp	r2, #101	; 0x65
 800a7f2:	d001      	beq.n	800a7f8 <_strtod_l+0x180>
 800a7f4:	2a45      	cmp	r2, #69	; 0x45
 800a7f6:	d117      	bne.n	800a828 <_strtod_l+0x1b0>
 800a7f8:	b91b      	cbnz	r3, 800a802 <_strtod_l+0x18a>
 800a7fa:	9b04      	ldr	r3, [sp, #16]
 800a7fc:	4303      	orrs	r3, r0
 800a7fe:	d09c      	beq.n	800a73a <_strtod_l+0xc2>
 800a800:	2300      	movs	r3, #0
 800a802:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a806:	f10b 0201 	add.w	r2, fp, #1
 800a80a:	9211      	str	r2, [sp, #68]	; 0x44
 800a80c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800a810:	2a2b      	cmp	r2, #43	; 0x2b
 800a812:	d071      	beq.n	800a8f8 <_strtod_l+0x280>
 800a814:	2a2d      	cmp	r2, #45	; 0x2d
 800a816:	d077      	beq.n	800a908 <_strtod_l+0x290>
 800a818:	f04f 0e00 	mov.w	lr, #0
 800a81c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a820:	2d09      	cmp	r5, #9
 800a822:	d97f      	bls.n	800a924 <_strtod_l+0x2ac>
 800a824:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a828:	2500      	movs	r5, #0
 800a82a:	e09b      	b.n	800a964 <_strtod_l+0x2ec>
 800a82c:	2300      	movs	r3, #0
 800a82e:	e7c3      	b.n	800a7b8 <_strtod_l+0x140>
 800a830:	9906      	ldr	r1, [sp, #24]
 800a832:	2908      	cmp	r1, #8
 800a834:	bfdd      	ittte	le
 800a836:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a838:	fb02 3301 	mlale	r3, r2, r1, r3
 800a83c:	9309      	strle	r3, [sp, #36]	; 0x24
 800a83e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	3001      	adds	r0, #1
 800a846:	3301      	adds	r3, #1
 800a848:	9306      	str	r3, [sp, #24]
 800a84a:	9011      	str	r0, [sp, #68]	; 0x44
 800a84c:	e7be      	b.n	800a7cc <_strtod_l+0x154>
 800a84e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a850:	195a      	adds	r2, r3, r5
 800a852:	9211      	str	r2, [sp, #68]	; 0x44
 800a854:	5d5a      	ldrb	r2, [r3, r5]
 800a856:	9b06      	ldr	r3, [sp, #24]
 800a858:	b3a3      	cbz	r3, 800a8c4 <_strtod_l+0x24c>
 800a85a:	4607      	mov	r7, r0
 800a85c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a860:	2909      	cmp	r1, #9
 800a862:	d912      	bls.n	800a88a <_strtod_l+0x212>
 800a864:	2101      	movs	r1, #1
 800a866:	e7c3      	b.n	800a7f0 <_strtod_l+0x178>
 800a868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	9211      	str	r2, [sp, #68]	; 0x44
 800a86e:	785a      	ldrb	r2, [r3, #1]
 800a870:	3001      	adds	r0, #1
 800a872:	2a30      	cmp	r2, #48	; 0x30
 800a874:	d0f8      	beq.n	800a868 <_strtod_l+0x1f0>
 800a876:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a87a:	2b08      	cmp	r3, #8
 800a87c:	f200 8497 	bhi.w	800b1ae <_strtod_l+0xb36>
 800a880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a882:	930a      	str	r3, [sp, #40]	; 0x28
 800a884:	4607      	mov	r7, r0
 800a886:	2000      	movs	r0, #0
 800a888:	4603      	mov	r3, r0
 800a88a:	3a30      	subs	r2, #48	; 0x30
 800a88c:	f100 0101 	add.w	r1, r0, #1
 800a890:	d012      	beq.n	800a8b8 <_strtod_l+0x240>
 800a892:	440f      	add	r7, r1
 800a894:	eb00 0c03 	add.w	ip, r0, r3
 800a898:	4619      	mov	r1, r3
 800a89a:	250a      	movs	r5, #10
 800a89c:	4561      	cmp	r1, ip
 800a89e:	d113      	bne.n	800a8c8 <_strtod_l+0x250>
 800a8a0:	1819      	adds	r1, r3, r0
 800a8a2:	2908      	cmp	r1, #8
 800a8a4:	f103 0301 	add.w	r3, r3, #1
 800a8a8:	4403      	add	r3, r0
 800a8aa:	dc1c      	bgt.n	800a8e6 <_strtod_l+0x26e>
 800a8ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8ae:	210a      	movs	r1, #10
 800a8b0:	fb01 2200 	mla	r2, r1, r0, r2
 800a8b4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8b6:	2100      	movs	r1, #0
 800a8b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a8ba:	1c50      	adds	r0, r2, #1
 800a8bc:	9011      	str	r0, [sp, #68]	; 0x44
 800a8be:	7852      	ldrb	r2, [r2, #1]
 800a8c0:	4608      	mov	r0, r1
 800a8c2:	e7cb      	b.n	800a85c <_strtod_l+0x1e4>
 800a8c4:	9806      	ldr	r0, [sp, #24]
 800a8c6:	e7d4      	b.n	800a872 <_strtod_l+0x1fa>
 800a8c8:	2908      	cmp	r1, #8
 800a8ca:	dc04      	bgt.n	800a8d6 <_strtod_l+0x25e>
 800a8cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a8ce:	436e      	muls	r6, r5
 800a8d0:	9609      	str	r6, [sp, #36]	; 0x24
 800a8d2:	3101      	adds	r1, #1
 800a8d4:	e7e2      	b.n	800a89c <_strtod_l+0x224>
 800a8d6:	f101 0e01 	add.w	lr, r1, #1
 800a8da:	f1be 0f10 	cmp.w	lr, #16
 800a8de:	bfd8      	it	le
 800a8e0:	fb05 fa0a 	mulle.w	sl, r5, sl
 800a8e4:	e7f5      	b.n	800a8d2 <_strtod_l+0x25a>
 800a8e6:	2b10      	cmp	r3, #16
 800a8e8:	bfdc      	itt	le
 800a8ea:	210a      	movle	r1, #10
 800a8ec:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800a8f0:	e7e1      	b.n	800a8b6 <_strtod_l+0x23e>
 800a8f2:	2700      	movs	r7, #0
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	e780      	b.n	800a7fa <_strtod_l+0x182>
 800a8f8:	f04f 0e00 	mov.w	lr, #0
 800a8fc:	f10b 0202 	add.w	r2, fp, #2
 800a900:	9211      	str	r2, [sp, #68]	; 0x44
 800a902:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800a906:	e789      	b.n	800a81c <_strtod_l+0x1a4>
 800a908:	f04f 0e01 	mov.w	lr, #1
 800a90c:	e7f6      	b.n	800a8fc <_strtod_l+0x284>
 800a90e:	bf00      	nop
 800a910:	0800e598 	.word	0x0800e598
 800a914:	0800e350 	.word	0x0800e350
 800a918:	7ff00000 	.word	0x7ff00000
 800a91c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a91e:	1c55      	adds	r5, r2, #1
 800a920:	9511      	str	r5, [sp, #68]	; 0x44
 800a922:	7852      	ldrb	r2, [r2, #1]
 800a924:	2a30      	cmp	r2, #48	; 0x30
 800a926:	d0f9      	beq.n	800a91c <_strtod_l+0x2a4>
 800a928:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800a92c:	2d08      	cmp	r5, #8
 800a92e:	f63f af7b 	bhi.w	800a828 <_strtod_l+0x1b0>
 800a932:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a936:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a938:	9207      	str	r2, [sp, #28]
 800a93a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a93c:	1c55      	adds	r5, r2, #1
 800a93e:	9511      	str	r5, [sp, #68]	; 0x44
 800a940:	7852      	ldrb	r2, [r2, #1]
 800a942:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a946:	2e09      	cmp	r6, #9
 800a948:	d937      	bls.n	800a9ba <_strtod_l+0x342>
 800a94a:	9e07      	ldr	r6, [sp, #28]
 800a94c:	1bad      	subs	r5, r5, r6
 800a94e:	2d08      	cmp	r5, #8
 800a950:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a954:	dc02      	bgt.n	800a95c <_strtod_l+0x2e4>
 800a956:	4565      	cmp	r5, ip
 800a958:	bfa8      	it	ge
 800a95a:	4665      	movge	r5, ip
 800a95c:	f1be 0f00 	cmp.w	lr, #0
 800a960:	d000      	beq.n	800a964 <_strtod_l+0x2ec>
 800a962:	426d      	negs	r5, r5
 800a964:	2b00      	cmp	r3, #0
 800a966:	d14d      	bne.n	800aa04 <_strtod_l+0x38c>
 800a968:	9b04      	ldr	r3, [sp, #16]
 800a96a:	4303      	orrs	r3, r0
 800a96c:	f47f aec8 	bne.w	800a700 <_strtod_l+0x88>
 800a970:	2900      	cmp	r1, #0
 800a972:	f47f aee2 	bne.w	800a73a <_strtod_l+0xc2>
 800a976:	2a69      	cmp	r2, #105	; 0x69
 800a978:	d027      	beq.n	800a9ca <_strtod_l+0x352>
 800a97a:	dc24      	bgt.n	800a9c6 <_strtod_l+0x34e>
 800a97c:	2a49      	cmp	r2, #73	; 0x49
 800a97e:	d024      	beq.n	800a9ca <_strtod_l+0x352>
 800a980:	2a4e      	cmp	r2, #78	; 0x4e
 800a982:	f47f aeda 	bne.w	800a73a <_strtod_l+0xc2>
 800a986:	4996      	ldr	r1, [pc, #600]	; (800abe0 <_strtod_l+0x568>)
 800a988:	a811      	add	r0, sp, #68	; 0x44
 800a98a:	f001 fd6f 	bl	800c46c <__match>
 800a98e:	2800      	cmp	r0, #0
 800a990:	f43f aed3 	beq.w	800a73a <_strtod_l+0xc2>
 800a994:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	2b28      	cmp	r3, #40	; 0x28
 800a99a:	d12d      	bne.n	800a9f8 <_strtod_l+0x380>
 800a99c:	4991      	ldr	r1, [pc, #580]	; (800abe4 <_strtod_l+0x56c>)
 800a99e:	aa14      	add	r2, sp, #80	; 0x50
 800a9a0:	a811      	add	r0, sp, #68	; 0x44
 800a9a2:	f001 fd77 	bl	800c494 <__hexnan>
 800a9a6:	2805      	cmp	r0, #5
 800a9a8:	d126      	bne.n	800a9f8 <_strtod_l+0x380>
 800a9aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9ac:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a9b0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a9b4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a9b8:	e6a2      	b.n	800a700 <_strtod_l+0x88>
 800a9ba:	250a      	movs	r5, #10
 800a9bc:	fb05 250c 	mla	r5, r5, ip, r2
 800a9c0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800a9c4:	e7b9      	b.n	800a93a <_strtod_l+0x2c2>
 800a9c6:	2a6e      	cmp	r2, #110	; 0x6e
 800a9c8:	e7db      	b.n	800a982 <_strtod_l+0x30a>
 800a9ca:	4987      	ldr	r1, [pc, #540]	; (800abe8 <_strtod_l+0x570>)
 800a9cc:	a811      	add	r0, sp, #68	; 0x44
 800a9ce:	f001 fd4d 	bl	800c46c <__match>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	f43f aeb1 	beq.w	800a73a <_strtod_l+0xc2>
 800a9d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9da:	4984      	ldr	r1, [pc, #528]	; (800abec <_strtod_l+0x574>)
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	a811      	add	r0, sp, #68	; 0x44
 800a9e0:	9311      	str	r3, [sp, #68]	; 0x44
 800a9e2:	f001 fd43 	bl	800c46c <__match>
 800a9e6:	b910      	cbnz	r0, 800a9ee <_strtod_l+0x376>
 800a9e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	9311      	str	r3, [sp, #68]	; 0x44
 800a9ee:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800ac00 <_strtod_l+0x588>
 800a9f2:	f04f 0800 	mov.w	r8, #0
 800a9f6:	e683      	b.n	800a700 <_strtod_l+0x88>
 800a9f8:	487d      	ldr	r0, [pc, #500]	; (800abf0 <_strtod_l+0x578>)
 800a9fa:	f002 fc39 	bl	800d270 <nan>
 800a9fe:	ec59 8b10 	vmov	r8, r9, d0
 800aa02:	e67d      	b.n	800a700 <_strtod_l+0x88>
 800aa04:	1bea      	subs	r2, r5, r7
 800aa06:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800aa0a:	9207      	str	r2, [sp, #28]
 800aa0c:	9a06      	ldr	r2, [sp, #24]
 800aa0e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aa12:	2a00      	cmp	r2, #0
 800aa14:	bf08      	it	eq
 800aa16:	461a      	moveq	r2, r3
 800aa18:	2b10      	cmp	r3, #16
 800aa1a:	9206      	str	r2, [sp, #24]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	bfa8      	it	ge
 800aa20:	2210      	movge	r2, #16
 800aa22:	2b09      	cmp	r3, #9
 800aa24:	ec59 8b17 	vmov	r8, r9, d7
 800aa28:	dd0c      	ble.n	800aa44 <_strtod_l+0x3cc>
 800aa2a:	4972      	ldr	r1, [pc, #456]	; (800abf4 <_strtod_l+0x57c>)
 800aa2c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800aa30:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800aa34:	ee06 aa90 	vmov	s13, sl
 800aa38:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800aa3c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aa40:	ec59 8b16 	vmov	r8, r9, d6
 800aa44:	2b0f      	cmp	r3, #15
 800aa46:	dc36      	bgt.n	800aab6 <_strtod_l+0x43e>
 800aa48:	9907      	ldr	r1, [sp, #28]
 800aa4a:	2900      	cmp	r1, #0
 800aa4c:	f43f ae58 	beq.w	800a700 <_strtod_l+0x88>
 800aa50:	dd23      	ble.n	800aa9a <_strtod_l+0x422>
 800aa52:	2916      	cmp	r1, #22
 800aa54:	dc0b      	bgt.n	800aa6e <_strtod_l+0x3f6>
 800aa56:	4b67      	ldr	r3, [pc, #412]	; (800abf4 <_strtod_l+0x57c>)
 800aa58:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800aa5c:	ed93 7b00 	vldr	d7, [r3]
 800aa60:	ec49 8b16 	vmov	d6, r8, r9
 800aa64:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa68:	ec59 8b17 	vmov	r8, r9, d7
 800aa6c:	e648      	b.n	800a700 <_strtod_l+0x88>
 800aa6e:	9807      	ldr	r0, [sp, #28]
 800aa70:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800aa74:	4281      	cmp	r1, r0
 800aa76:	db1e      	blt.n	800aab6 <_strtod_l+0x43e>
 800aa78:	4a5e      	ldr	r2, [pc, #376]	; (800abf4 <_strtod_l+0x57c>)
 800aa7a:	f1c3 030f 	rsb	r3, r3, #15
 800aa7e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800aa82:	ed91 7b00 	vldr	d7, [r1]
 800aa86:	ec49 8b16 	vmov	d6, r8, r9
 800aa8a:	1ac3      	subs	r3, r0, r3
 800aa8c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800aa90:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa94:	ed92 6b00 	vldr	d6, [r2]
 800aa98:	e7e4      	b.n	800aa64 <_strtod_l+0x3ec>
 800aa9a:	9907      	ldr	r1, [sp, #28]
 800aa9c:	3116      	adds	r1, #22
 800aa9e:	db0a      	blt.n	800aab6 <_strtod_l+0x43e>
 800aaa0:	4b54      	ldr	r3, [pc, #336]	; (800abf4 <_strtod_l+0x57c>)
 800aaa2:	1b7d      	subs	r5, r7, r5
 800aaa4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800aaa8:	ed95 7b00 	vldr	d7, [r5]
 800aaac:	ec49 8b16 	vmov	d6, r8, r9
 800aab0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800aab4:	e7d8      	b.n	800aa68 <_strtod_l+0x3f0>
 800aab6:	9907      	ldr	r1, [sp, #28]
 800aab8:	1a9a      	subs	r2, r3, r2
 800aaba:	440a      	add	r2, r1
 800aabc:	2a00      	cmp	r2, #0
 800aabe:	dd6f      	ble.n	800aba0 <_strtod_l+0x528>
 800aac0:	f012 000f 	ands.w	r0, r2, #15
 800aac4:	d00a      	beq.n	800aadc <_strtod_l+0x464>
 800aac6:	494b      	ldr	r1, [pc, #300]	; (800abf4 <_strtod_l+0x57c>)
 800aac8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800aacc:	ed91 7b00 	vldr	d7, [r1]
 800aad0:	ec49 8b16 	vmov	d6, r8, r9
 800aad4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aad8:	ec59 8b17 	vmov	r8, r9, d7
 800aadc:	f032 020f 	bics.w	r2, r2, #15
 800aae0:	d04f      	beq.n	800ab82 <_strtod_l+0x50a>
 800aae2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800aae6:	dd22      	ble.n	800ab2e <_strtod_l+0x4b6>
 800aae8:	2500      	movs	r5, #0
 800aaea:	462e      	mov	r6, r5
 800aaec:	9506      	str	r5, [sp, #24]
 800aaee:	462f      	mov	r7, r5
 800aaf0:	2322      	movs	r3, #34	; 0x22
 800aaf2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800ac00 <_strtod_l+0x588>
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	f04f 0800 	mov.w	r8, #0
 800aafc:	9b06      	ldr	r3, [sp, #24]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f43f adfe 	beq.w	800a700 <_strtod_l+0x88>
 800ab04:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ab06:	4620      	mov	r0, r4
 800ab08:	f001 fdc2 	bl	800c690 <_Bfree>
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f001 fdbe 	bl	800c690 <_Bfree>
 800ab14:	4631      	mov	r1, r6
 800ab16:	4620      	mov	r0, r4
 800ab18:	f001 fdba 	bl	800c690 <_Bfree>
 800ab1c:	9906      	ldr	r1, [sp, #24]
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f001 fdb6 	bl	800c690 <_Bfree>
 800ab24:	4629      	mov	r1, r5
 800ab26:	4620      	mov	r0, r4
 800ab28:	f001 fdb2 	bl	800c690 <_Bfree>
 800ab2c:	e5e8      	b.n	800a700 <_strtod_l+0x88>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	ec49 8b17 	vmov	d7, r8, r9
 800ab34:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800abf8 <_strtod_l+0x580>
 800ab38:	1112      	asrs	r2, r2, #4
 800ab3a:	4601      	mov	r1, r0
 800ab3c:	2a01      	cmp	r2, #1
 800ab3e:	dc23      	bgt.n	800ab88 <_strtod_l+0x510>
 800ab40:	b108      	cbz	r0, 800ab46 <_strtod_l+0x4ce>
 800ab42:	ec59 8b17 	vmov	r8, r9, d7
 800ab46:	4a2c      	ldr	r2, [pc, #176]	; (800abf8 <_strtod_l+0x580>)
 800ab48:	482c      	ldr	r0, [pc, #176]	; (800abfc <_strtod_l+0x584>)
 800ab4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ab4e:	ed92 7b00 	vldr	d7, [r2]
 800ab52:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ab56:	ec49 8b16 	vmov	d6, r8, r9
 800ab5a:	4a29      	ldr	r2, [pc, #164]	; (800ac00 <_strtod_l+0x588>)
 800ab5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab60:	ee17 1a90 	vmov	r1, s15
 800ab64:	400a      	ands	r2, r1
 800ab66:	4282      	cmp	r2, r0
 800ab68:	ec59 8b17 	vmov	r8, r9, d7
 800ab6c:	d8bc      	bhi.n	800aae8 <_strtod_l+0x470>
 800ab6e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800ab72:	4282      	cmp	r2, r0
 800ab74:	bf86      	itte	hi
 800ab76:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800ac04 <_strtod_l+0x58c>
 800ab7a:	f04f 38ff 	movhi.w	r8, #4294967295
 800ab7e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800ab82:	2200      	movs	r2, #0
 800ab84:	9204      	str	r2, [sp, #16]
 800ab86:	e078      	b.n	800ac7a <_strtod_l+0x602>
 800ab88:	07d6      	lsls	r6, r2, #31
 800ab8a:	d504      	bpl.n	800ab96 <_strtod_l+0x51e>
 800ab8c:	ed9c 6b00 	vldr	d6, [ip]
 800ab90:	2001      	movs	r0, #1
 800ab92:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab96:	3101      	adds	r1, #1
 800ab98:	1052      	asrs	r2, r2, #1
 800ab9a:	f10c 0c08 	add.w	ip, ip, #8
 800ab9e:	e7cd      	b.n	800ab3c <_strtod_l+0x4c4>
 800aba0:	d0ef      	beq.n	800ab82 <_strtod_l+0x50a>
 800aba2:	4252      	negs	r2, r2
 800aba4:	f012 000f 	ands.w	r0, r2, #15
 800aba8:	d00a      	beq.n	800abc0 <_strtod_l+0x548>
 800abaa:	4912      	ldr	r1, [pc, #72]	; (800abf4 <_strtod_l+0x57c>)
 800abac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800abb0:	ed91 7b00 	vldr	d7, [r1]
 800abb4:	ec49 8b16 	vmov	d6, r8, r9
 800abb8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800abbc:	ec59 8b17 	vmov	r8, r9, d7
 800abc0:	1112      	asrs	r2, r2, #4
 800abc2:	d0de      	beq.n	800ab82 <_strtod_l+0x50a>
 800abc4:	2a1f      	cmp	r2, #31
 800abc6:	dd1f      	ble.n	800ac08 <_strtod_l+0x590>
 800abc8:	2500      	movs	r5, #0
 800abca:	462e      	mov	r6, r5
 800abcc:	9506      	str	r5, [sp, #24]
 800abce:	462f      	mov	r7, r5
 800abd0:	2322      	movs	r3, #34	; 0x22
 800abd2:	f04f 0800 	mov.w	r8, #0
 800abd6:	f04f 0900 	mov.w	r9, #0
 800abda:	6023      	str	r3, [r4, #0]
 800abdc:	e78e      	b.n	800aafc <_strtod_l+0x484>
 800abde:	bf00      	nop
 800abe0:	0800e321 	.word	0x0800e321
 800abe4:	0800e364 	.word	0x0800e364
 800abe8:	0800e319 	.word	0x0800e319
 800abec:	0800e4a4 	.word	0x0800e4a4
 800abf0:	0800e750 	.word	0x0800e750
 800abf4:	0800e630 	.word	0x0800e630
 800abf8:	0800e608 	.word	0x0800e608
 800abfc:	7ca00000 	.word	0x7ca00000
 800ac00:	7ff00000 	.word	0x7ff00000
 800ac04:	7fefffff 	.word	0x7fefffff
 800ac08:	f012 0110 	ands.w	r1, r2, #16
 800ac0c:	bf18      	it	ne
 800ac0e:	216a      	movne	r1, #106	; 0x6a
 800ac10:	9104      	str	r1, [sp, #16]
 800ac12:	ec49 8b17 	vmov	d7, r8, r9
 800ac16:	49be      	ldr	r1, [pc, #760]	; (800af10 <_strtod_l+0x898>)
 800ac18:	2000      	movs	r0, #0
 800ac1a:	07d6      	lsls	r6, r2, #31
 800ac1c:	d504      	bpl.n	800ac28 <_strtod_l+0x5b0>
 800ac1e:	ed91 6b00 	vldr	d6, [r1]
 800ac22:	2001      	movs	r0, #1
 800ac24:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac28:	1052      	asrs	r2, r2, #1
 800ac2a:	f101 0108 	add.w	r1, r1, #8
 800ac2e:	d1f4      	bne.n	800ac1a <_strtod_l+0x5a2>
 800ac30:	b108      	cbz	r0, 800ac36 <_strtod_l+0x5be>
 800ac32:	ec59 8b17 	vmov	r8, r9, d7
 800ac36:	9a04      	ldr	r2, [sp, #16]
 800ac38:	b1c2      	cbz	r2, 800ac6c <_strtod_l+0x5f4>
 800ac3a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800ac3e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	4648      	mov	r0, r9
 800ac46:	dd11      	ble.n	800ac6c <_strtod_l+0x5f4>
 800ac48:	2a1f      	cmp	r2, #31
 800ac4a:	f340 812e 	ble.w	800aeaa <_strtod_l+0x832>
 800ac4e:	2a34      	cmp	r2, #52	; 0x34
 800ac50:	bfde      	ittt	le
 800ac52:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800ac56:	f04f 32ff 	movle.w	r2, #4294967295
 800ac5a:	fa02 f101 	lslle.w	r1, r2, r1
 800ac5e:	f04f 0800 	mov.w	r8, #0
 800ac62:	bfcc      	ite	gt
 800ac64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ac68:	ea01 0900 	andle.w	r9, r1, r0
 800ac6c:	ec49 8b17 	vmov	d7, r8, r9
 800ac70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac78:	d0a6      	beq.n	800abc8 <_strtod_l+0x550>
 800ac7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac7c:	9200      	str	r2, [sp, #0]
 800ac7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ac80:	9a06      	ldr	r2, [sp, #24]
 800ac82:	4620      	mov	r0, r4
 800ac84:	f001 fd6c 	bl	800c760 <__s2b>
 800ac88:	9006      	str	r0, [sp, #24]
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	f43f af2c 	beq.w	800aae8 <_strtod_l+0x470>
 800ac90:	9b07      	ldr	r3, [sp, #28]
 800ac92:	1b7d      	subs	r5, r7, r5
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	bfb4      	ite	lt
 800ac98:	462b      	movlt	r3, r5
 800ac9a:	2300      	movge	r3, #0
 800ac9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac9e:	9b07      	ldr	r3, [sp, #28]
 800aca0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800aef0 <_strtod_l+0x878>
 800aca4:	ed9f ab94 	vldr	d10, [pc, #592]	; 800aef8 <_strtod_l+0x880>
 800aca8:	ed9f bb95 	vldr	d11, [pc, #596]	; 800af00 <_strtod_l+0x888>
 800acac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800acb0:	2500      	movs	r5, #0
 800acb2:	930c      	str	r3, [sp, #48]	; 0x30
 800acb4:	462e      	mov	r6, r5
 800acb6:	9b06      	ldr	r3, [sp, #24]
 800acb8:	4620      	mov	r0, r4
 800acba:	6859      	ldr	r1, [r3, #4]
 800acbc:	f001 fca8 	bl	800c610 <_Balloc>
 800acc0:	4607      	mov	r7, r0
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f43f af14 	beq.w	800aaf0 <_strtod_l+0x478>
 800acc8:	9b06      	ldr	r3, [sp, #24]
 800acca:	691a      	ldr	r2, [r3, #16]
 800accc:	3202      	adds	r2, #2
 800acce:	f103 010c 	add.w	r1, r3, #12
 800acd2:	0092      	lsls	r2, r2, #2
 800acd4:	300c      	adds	r0, #12
 800acd6:	f7fe fd41 	bl	800975c <memcpy>
 800acda:	ec49 8b10 	vmov	d0, r8, r9
 800acde:	aa14      	add	r2, sp, #80	; 0x50
 800ace0:	a913      	add	r1, sp, #76	; 0x4c
 800ace2:	4620      	mov	r0, r4
 800ace4:	f002 f882 	bl	800cdec <__d2b>
 800ace8:	ec49 8b18 	vmov	d8, r8, r9
 800acec:	9012      	str	r0, [sp, #72]	; 0x48
 800acee:	2800      	cmp	r0, #0
 800acf0:	f43f aefe 	beq.w	800aaf0 <_strtod_l+0x478>
 800acf4:	2101      	movs	r1, #1
 800acf6:	4620      	mov	r0, r4
 800acf8:	f001 fdcc 	bl	800c894 <__i2b>
 800acfc:	4606      	mov	r6, r0
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f43f aef6 	beq.w	800aaf0 <_strtod_l+0x478>
 800ad04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad06:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bfab      	itete	ge
 800ad0c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ad0e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ad10:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ad14:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ad18:	bfac      	ite	ge
 800ad1a:	eb03 0b02 	addge.w	fp, r3, r2
 800ad1e:	eba2 0a03 	sublt.w	sl, r2, r3
 800ad22:	9a04      	ldr	r2, [sp, #16]
 800ad24:	1a9b      	subs	r3, r3, r2
 800ad26:	440b      	add	r3, r1
 800ad28:	4a7a      	ldr	r2, [pc, #488]	; (800af14 <_strtod_l+0x89c>)
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ad32:	f280 80cd 	bge.w	800aed0 <_strtod_l+0x858>
 800ad36:	1ad2      	subs	r2, r2, r3
 800ad38:	2a1f      	cmp	r2, #31
 800ad3a:	eba1 0102 	sub.w	r1, r1, r2
 800ad3e:	f04f 0001 	mov.w	r0, #1
 800ad42:	f300 80b9 	bgt.w	800aeb8 <_strtod_l+0x840>
 800ad46:	fa00 f302 	lsl.w	r3, r0, r2
 800ad4a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad50:	eb0b 0301 	add.w	r3, fp, r1
 800ad54:	9a04      	ldr	r2, [sp, #16]
 800ad56:	459b      	cmp	fp, r3
 800ad58:	448a      	add	sl, r1
 800ad5a:	4492      	add	sl, r2
 800ad5c:	465a      	mov	r2, fp
 800ad5e:	bfa8      	it	ge
 800ad60:	461a      	movge	r2, r3
 800ad62:	4552      	cmp	r2, sl
 800ad64:	bfa8      	it	ge
 800ad66:	4652      	movge	r2, sl
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	bfc2      	ittt	gt
 800ad6c:	1a9b      	subgt	r3, r3, r2
 800ad6e:	ebaa 0a02 	subgt.w	sl, sl, r2
 800ad72:	ebab 0b02 	subgt.w	fp, fp, r2
 800ad76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad78:	2a00      	cmp	r2, #0
 800ad7a:	dd18      	ble.n	800adae <_strtod_l+0x736>
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4620      	mov	r0, r4
 800ad80:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad82:	f001 fe47 	bl	800ca14 <__pow5mult>
 800ad86:	4606      	mov	r6, r0
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	f43f aeb1 	beq.w	800aaf0 <_strtod_l+0x478>
 800ad8e:	4601      	mov	r1, r0
 800ad90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad92:	4620      	mov	r0, r4
 800ad94:	f001 fd94 	bl	800c8c0 <__multiply>
 800ad98:	900e      	str	r0, [sp, #56]	; 0x38
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	f43f aea8 	beq.w	800aaf0 <_strtod_l+0x478>
 800ada0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ada2:	4620      	mov	r0, r4
 800ada4:	f001 fc74 	bl	800c690 <_Bfree>
 800ada8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adac:	9212      	str	r2, [sp, #72]	; 0x48
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f300 8093 	bgt.w	800aeda <_strtod_l+0x862>
 800adb4:	9b07      	ldr	r3, [sp, #28]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	dd08      	ble.n	800adcc <_strtod_l+0x754>
 800adba:	4639      	mov	r1, r7
 800adbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adbe:	4620      	mov	r0, r4
 800adc0:	f001 fe28 	bl	800ca14 <__pow5mult>
 800adc4:	4607      	mov	r7, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f43f ae92 	beq.w	800aaf0 <_strtod_l+0x478>
 800adcc:	f1ba 0f00 	cmp.w	sl, #0
 800add0:	dd08      	ble.n	800ade4 <_strtod_l+0x76c>
 800add2:	4639      	mov	r1, r7
 800add4:	4652      	mov	r2, sl
 800add6:	4620      	mov	r0, r4
 800add8:	f001 fe76 	bl	800cac8 <__lshift>
 800addc:	4607      	mov	r7, r0
 800adde:	2800      	cmp	r0, #0
 800ade0:	f43f ae86 	beq.w	800aaf0 <_strtod_l+0x478>
 800ade4:	f1bb 0f00 	cmp.w	fp, #0
 800ade8:	dd08      	ble.n	800adfc <_strtod_l+0x784>
 800adea:	4631      	mov	r1, r6
 800adec:	465a      	mov	r2, fp
 800adee:	4620      	mov	r0, r4
 800adf0:	f001 fe6a 	bl	800cac8 <__lshift>
 800adf4:	4606      	mov	r6, r0
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f43f ae7a 	beq.w	800aaf0 <_strtod_l+0x478>
 800adfc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800adfe:	463a      	mov	r2, r7
 800ae00:	4620      	mov	r0, r4
 800ae02:	f001 feed 	bl	800cbe0 <__mdiff>
 800ae06:	4605      	mov	r5, r0
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	f43f ae71 	beq.w	800aaf0 <_strtod_l+0x478>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800ae14:	60c3      	str	r3, [r0, #12]
 800ae16:	4631      	mov	r1, r6
 800ae18:	f001 fec6 	bl	800cba8 <__mcmp>
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	da7d      	bge.n	800af1c <_strtod_l+0x8a4>
 800ae20:	ea5a 0308 	orrs.w	r3, sl, r8
 800ae24:	f040 80a3 	bne.w	800af6e <_strtod_l+0x8f6>
 800ae28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f040 809e 	bne.w	800af6e <_strtod_l+0x8f6>
 800ae32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae36:	0d1b      	lsrs	r3, r3, #20
 800ae38:	051b      	lsls	r3, r3, #20
 800ae3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae3e:	f240 8096 	bls.w	800af6e <_strtod_l+0x8f6>
 800ae42:	696b      	ldr	r3, [r5, #20]
 800ae44:	b91b      	cbnz	r3, 800ae4e <_strtod_l+0x7d6>
 800ae46:	692b      	ldr	r3, [r5, #16]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	f340 8090 	ble.w	800af6e <_strtod_l+0x8f6>
 800ae4e:	4629      	mov	r1, r5
 800ae50:	2201      	movs	r2, #1
 800ae52:	4620      	mov	r0, r4
 800ae54:	f001 fe38 	bl	800cac8 <__lshift>
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	f001 fea4 	bl	800cba8 <__mcmp>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	f340 8084 	ble.w	800af6e <_strtod_l+0x8f6>
 800ae66:	9904      	ldr	r1, [sp, #16]
 800ae68:	4a2b      	ldr	r2, [pc, #172]	; (800af18 <_strtod_l+0x8a0>)
 800ae6a:	464b      	mov	r3, r9
 800ae6c:	2900      	cmp	r1, #0
 800ae6e:	f000 809d 	beq.w	800afac <_strtod_l+0x934>
 800ae72:	ea02 0109 	and.w	r1, r2, r9
 800ae76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae7a:	f300 8097 	bgt.w	800afac <_strtod_l+0x934>
 800ae7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae82:	f77f aea5 	ble.w	800abd0 <_strtod_l+0x558>
 800ae86:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800af08 <_strtod_l+0x890>
 800ae8a:	ec49 8b16 	vmov	d6, r8, r9
 800ae8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ae92:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae96:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	bf08      	it	eq
 800ae9e:	2322      	moveq	r3, #34	; 0x22
 800aea0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800aea4:	bf08      	it	eq
 800aea6:	6023      	streq	r3, [r4, #0]
 800aea8:	e62c      	b.n	800ab04 <_strtod_l+0x48c>
 800aeaa:	f04f 31ff 	mov.w	r1, #4294967295
 800aeae:	fa01 f202 	lsl.w	r2, r1, r2
 800aeb2:	ea02 0808 	and.w	r8, r2, r8
 800aeb6:	e6d9      	b.n	800ac6c <_strtod_l+0x5f4>
 800aeb8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800aebc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800aec0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800aec4:	33e2      	adds	r3, #226	; 0xe2
 800aec6:	fa00 f303 	lsl.w	r3, r0, r3
 800aeca:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800aece:	e73f      	b.n	800ad50 <_strtod_l+0x6d8>
 800aed0:	2200      	movs	r2, #0
 800aed2:	2301      	movs	r3, #1
 800aed4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aed8:	e73a      	b.n	800ad50 <_strtod_l+0x6d8>
 800aeda:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aedc:	461a      	mov	r2, r3
 800aede:	4620      	mov	r0, r4
 800aee0:	f001 fdf2 	bl	800cac8 <__lshift>
 800aee4:	9012      	str	r0, [sp, #72]	; 0x48
 800aee6:	2800      	cmp	r0, #0
 800aee8:	f47f af64 	bne.w	800adb4 <_strtod_l+0x73c>
 800aeec:	e600      	b.n	800aaf0 <_strtod_l+0x478>
 800aeee:	bf00      	nop
 800aef0:	94a03595 	.word	0x94a03595
 800aef4:	3fcfffff 	.word	0x3fcfffff
 800aef8:	94a03595 	.word	0x94a03595
 800aefc:	3fdfffff 	.word	0x3fdfffff
 800af00:	35afe535 	.word	0x35afe535
 800af04:	3fe00000 	.word	0x3fe00000
 800af08:	00000000 	.word	0x00000000
 800af0c:	39500000 	.word	0x39500000
 800af10:	0800e378 	.word	0x0800e378
 800af14:	fffffc02 	.word	0xfffffc02
 800af18:	7ff00000 	.word	0x7ff00000
 800af1c:	46cb      	mov	fp, r9
 800af1e:	d15f      	bne.n	800afe0 <_strtod_l+0x968>
 800af20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af24:	f1ba 0f00 	cmp.w	sl, #0
 800af28:	d02a      	beq.n	800af80 <_strtod_l+0x908>
 800af2a:	4aa7      	ldr	r2, [pc, #668]	; (800b1c8 <_strtod_l+0xb50>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d12b      	bne.n	800af88 <_strtod_l+0x910>
 800af30:	9b04      	ldr	r3, [sp, #16]
 800af32:	4642      	mov	r2, r8
 800af34:	b1fb      	cbz	r3, 800af76 <_strtod_l+0x8fe>
 800af36:	4ba5      	ldr	r3, [pc, #660]	; (800b1cc <_strtod_l+0xb54>)
 800af38:	ea09 0303 	and.w	r3, r9, r3
 800af3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af40:	f04f 31ff 	mov.w	r1, #4294967295
 800af44:	d81a      	bhi.n	800af7c <_strtod_l+0x904>
 800af46:	0d1b      	lsrs	r3, r3, #20
 800af48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af4c:	fa01 f303 	lsl.w	r3, r1, r3
 800af50:	429a      	cmp	r2, r3
 800af52:	d119      	bne.n	800af88 <_strtod_l+0x910>
 800af54:	4b9e      	ldr	r3, [pc, #632]	; (800b1d0 <_strtod_l+0xb58>)
 800af56:	459b      	cmp	fp, r3
 800af58:	d102      	bne.n	800af60 <_strtod_l+0x8e8>
 800af5a:	3201      	adds	r2, #1
 800af5c:	f43f adc8 	beq.w	800aaf0 <_strtod_l+0x478>
 800af60:	4b9a      	ldr	r3, [pc, #616]	; (800b1cc <_strtod_l+0xb54>)
 800af62:	ea0b 0303 	and.w	r3, fp, r3
 800af66:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800af6a:	f04f 0800 	mov.w	r8, #0
 800af6e:	9b04      	ldr	r3, [sp, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d188      	bne.n	800ae86 <_strtod_l+0x80e>
 800af74:	e5c6      	b.n	800ab04 <_strtod_l+0x48c>
 800af76:	f04f 33ff 	mov.w	r3, #4294967295
 800af7a:	e7e9      	b.n	800af50 <_strtod_l+0x8d8>
 800af7c:	460b      	mov	r3, r1
 800af7e:	e7e7      	b.n	800af50 <_strtod_l+0x8d8>
 800af80:	ea53 0308 	orrs.w	r3, r3, r8
 800af84:	f43f af6f 	beq.w	800ae66 <_strtod_l+0x7ee>
 800af88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af8a:	b1cb      	cbz	r3, 800afc0 <_strtod_l+0x948>
 800af8c:	ea13 0f0b 	tst.w	r3, fp
 800af90:	d0ed      	beq.n	800af6e <_strtod_l+0x8f6>
 800af92:	9a04      	ldr	r2, [sp, #16]
 800af94:	4640      	mov	r0, r8
 800af96:	4649      	mov	r1, r9
 800af98:	f1ba 0f00 	cmp.w	sl, #0
 800af9c:	d014      	beq.n	800afc8 <_strtod_l+0x950>
 800af9e:	f7ff fb51 	bl	800a644 <sulp>
 800afa2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800afa6:	ec59 8b17 	vmov	r8, r9, d7
 800afaa:	e7e0      	b.n	800af6e <_strtod_l+0x8f6>
 800afac:	4013      	ands	r3, r2
 800afae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800afb2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800afb6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800afba:	f04f 38ff 	mov.w	r8, #4294967295
 800afbe:	e7d6      	b.n	800af6e <_strtod_l+0x8f6>
 800afc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc2:	ea13 0f08 	tst.w	r3, r8
 800afc6:	e7e3      	b.n	800af90 <_strtod_l+0x918>
 800afc8:	f7ff fb3c 	bl	800a644 <sulp>
 800afcc:	ee38 0b40 	vsub.f64	d0, d8, d0
 800afd0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800afd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd8:	ec59 8b10 	vmov	r8, r9, d0
 800afdc:	d1c7      	bne.n	800af6e <_strtod_l+0x8f6>
 800afde:	e5f7      	b.n	800abd0 <_strtod_l+0x558>
 800afe0:	4631      	mov	r1, r6
 800afe2:	4628      	mov	r0, r5
 800afe4:	f001 ff5e 	bl	800cea4 <__ratio>
 800afe8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800afec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff4:	d865      	bhi.n	800b0c2 <_strtod_l+0xa4a>
 800aff6:	f1ba 0f00 	cmp.w	sl, #0
 800affa:	d042      	beq.n	800b082 <_strtod_l+0xa0a>
 800affc:	4b75      	ldr	r3, [pc, #468]	; (800b1d4 <_strtod_l+0xb5c>)
 800affe:	2200      	movs	r2, #0
 800b000:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800b004:	4871      	ldr	r0, [pc, #452]	; (800b1cc <_strtod_l+0xb54>)
 800b006:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b1e0 <_strtod_l+0xb68>
 800b00a:	ea0b 0100 	and.w	r1, fp, r0
 800b00e:	4561      	cmp	r1, ip
 800b010:	f040 808e 	bne.w	800b130 <_strtod_l+0xab8>
 800b014:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b018:	ec49 8b10 	vmov	d0, r8, r9
 800b01c:	ec43 2b1c 	vmov	d12, r2, r3
 800b020:	910a      	str	r1, [sp, #40]	; 0x28
 800b022:	f001 fe67 	bl	800ccf4 <__ulp>
 800b026:	ec49 8b1e 	vmov	d14, r8, r9
 800b02a:	4868      	ldr	r0, [pc, #416]	; (800b1cc <_strtod_l+0xb54>)
 800b02c:	eeac eb00 	vfma.f64	d14, d12, d0
 800b030:	ee1e 3a90 	vmov	r3, s29
 800b034:	4a68      	ldr	r2, [pc, #416]	; (800b1d8 <_strtod_l+0xb60>)
 800b036:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b038:	4018      	ands	r0, r3
 800b03a:	4290      	cmp	r0, r2
 800b03c:	ec59 8b1e 	vmov	r8, r9, d14
 800b040:	d94e      	bls.n	800b0e0 <_strtod_l+0xa68>
 800b042:	ee18 3a90 	vmov	r3, s17
 800b046:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d104      	bne.n	800b058 <_strtod_l+0x9e0>
 800b04e:	ee18 3a10 	vmov	r3, s16
 800b052:	3301      	adds	r3, #1
 800b054:	f43f ad4c 	beq.w	800aaf0 <_strtod_l+0x478>
 800b058:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b1d0 <_strtod_l+0xb58>
 800b05c:	f04f 38ff 	mov.w	r8, #4294967295
 800b060:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b062:	4620      	mov	r0, r4
 800b064:	f001 fb14 	bl	800c690 <_Bfree>
 800b068:	4639      	mov	r1, r7
 800b06a:	4620      	mov	r0, r4
 800b06c:	f001 fb10 	bl	800c690 <_Bfree>
 800b070:	4631      	mov	r1, r6
 800b072:	4620      	mov	r0, r4
 800b074:	f001 fb0c 	bl	800c690 <_Bfree>
 800b078:	4629      	mov	r1, r5
 800b07a:	4620      	mov	r0, r4
 800b07c:	f001 fb08 	bl	800c690 <_Bfree>
 800b080:	e619      	b.n	800acb6 <_strtod_l+0x63e>
 800b082:	f1b8 0f00 	cmp.w	r8, #0
 800b086:	d112      	bne.n	800b0ae <_strtod_l+0xa36>
 800b088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b08c:	b9b3      	cbnz	r3, 800b0bc <_strtod_l+0xa44>
 800b08e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b092:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b09a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b09e:	bf58      	it	pl
 800b0a0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800b0a4:	eeb1 7b4d 	vneg.f64	d7, d13
 800b0a8:	ec53 2b17 	vmov	r2, r3, d7
 800b0ac:	e7aa      	b.n	800b004 <_strtod_l+0x98c>
 800b0ae:	f1b8 0f01 	cmp.w	r8, #1
 800b0b2:	d103      	bne.n	800b0bc <_strtod_l+0xa44>
 800b0b4:	f1b9 0f00 	cmp.w	r9, #0
 800b0b8:	f43f ad8a 	beq.w	800abd0 <_strtod_l+0x558>
 800b0bc:	4b47      	ldr	r3, [pc, #284]	; (800b1dc <_strtod_l+0xb64>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	e79e      	b.n	800b000 <_strtod_l+0x988>
 800b0c2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b0c6:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b0ca:	f1ba 0f00 	cmp.w	sl, #0
 800b0ce:	d104      	bne.n	800b0da <_strtod_l+0xa62>
 800b0d0:	eeb1 7b4d 	vneg.f64	d7, d13
 800b0d4:	ec53 2b17 	vmov	r2, r3, d7
 800b0d8:	e794      	b.n	800b004 <_strtod_l+0x98c>
 800b0da:	eeb0 7b4d 	vmov.f64	d7, d13
 800b0de:	e7f9      	b.n	800b0d4 <_strtod_l+0xa5c>
 800b0e0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b0e4:	9b04      	ldr	r3, [sp, #16]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1ba      	bne.n	800b060 <_strtod_l+0x9e8>
 800b0ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0ee:	0d1b      	lsrs	r3, r3, #20
 800b0f0:	051b      	lsls	r3, r3, #20
 800b0f2:	4299      	cmp	r1, r3
 800b0f4:	d1b4      	bne.n	800b060 <_strtod_l+0x9e8>
 800b0f6:	ec51 0b1d 	vmov	r0, r1, d13
 800b0fa:	f7f5 facd 	bl	8000698 <__aeabi_d2lz>
 800b0fe:	f7f5 fa85 	bl	800060c <__aeabi_l2d>
 800b102:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b106:	ec41 0b17 	vmov	d7, r0, r1
 800b10a:	ea43 0308 	orr.w	r3, r3, r8
 800b10e:	ea53 030a 	orrs.w	r3, r3, sl
 800b112:	ee3d db47 	vsub.f64	d13, d13, d7
 800b116:	d03c      	beq.n	800b192 <_strtod_l+0xb1a>
 800b118:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b120:	f53f acf0 	bmi.w	800ab04 <_strtod_l+0x48c>
 800b124:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12c:	dd98      	ble.n	800b060 <_strtod_l+0x9e8>
 800b12e:	e4e9      	b.n	800ab04 <_strtod_l+0x48c>
 800b130:	9804      	ldr	r0, [sp, #16]
 800b132:	b1f0      	cbz	r0, 800b172 <_strtod_l+0xafa>
 800b134:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b138:	d81b      	bhi.n	800b172 <_strtod_l+0xafa>
 800b13a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b1c0 <_strtod_l+0xb48>
 800b13e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b146:	d811      	bhi.n	800b16c <_strtod_l+0xaf4>
 800b148:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b14c:	ee1d 3a10 	vmov	r3, s26
 800b150:	2b01      	cmp	r3, #1
 800b152:	bf38      	it	cc
 800b154:	2301      	movcc	r3, #1
 800b156:	ee0d 3a10 	vmov	s26, r3
 800b15a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b15e:	f1ba 0f00 	cmp.w	sl, #0
 800b162:	d113      	bne.n	800b18c <_strtod_l+0xb14>
 800b164:	eeb1 7b4d 	vneg.f64	d7, d13
 800b168:	ec53 2b17 	vmov	r2, r3, d7
 800b16c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b170:	1a43      	subs	r3, r0, r1
 800b172:	eeb0 0b48 	vmov.f64	d0, d8
 800b176:	ec43 2b1c 	vmov	d12, r2, r3
 800b17a:	910a      	str	r1, [sp, #40]	; 0x28
 800b17c:	f001 fdba 	bl	800ccf4 <__ulp>
 800b180:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b182:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b186:	ec59 8b18 	vmov	r8, r9, d8
 800b18a:	e7ab      	b.n	800b0e4 <_strtod_l+0xa6c>
 800b18c:	eeb0 7b4d 	vmov.f64	d7, d13
 800b190:	e7ea      	b.n	800b168 <_strtod_l+0xaf0>
 800b192:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19a:	f57f af61 	bpl.w	800b060 <_strtod_l+0x9e8>
 800b19e:	e4b1      	b.n	800ab04 <_strtod_l+0x48c>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	9308      	str	r3, [sp, #32]
 800b1a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b1a8:	6013      	str	r3, [r2, #0]
 800b1aa:	f7ff baad 	b.w	800a708 <_strtod_l+0x90>
 800b1ae:	2a65      	cmp	r2, #101	; 0x65
 800b1b0:	f43f ab9f 	beq.w	800a8f2 <_strtod_l+0x27a>
 800b1b4:	2a45      	cmp	r2, #69	; 0x45
 800b1b6:	f43f ab9c 	beq.w	800a8f2 <_strtod_l+0x27a>
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	f7ff bbd4 	b.w	800a968 <_strtod_l+0x2f0>
 800b1c0:	ffc00000 	.word	0xffc00000
 800b1c4:	41dfffff 	.word	0x41dfffff
 800b1c8:	000fffff 	.word	0x000fffff
 800b1cc:	7ff00000 	.word	0x7ff00000
 800b1d0:	7fefffff 	.word	0x7fefffff
 800b1d4:	3ff00000 	.word	0x3ff00000
 800b1d8:	7c9fffff 	.word	0x7c9fffff
 800b1dc:	bff00000 	.word	0xbff00000
 800b1e0:	7fe00000 	.word	0x7fe00000

0800b1e4 <_strtod_r>:
 800b1e4:	4b01      	ldr	r3, [pc, #4]	; (800b1ec <_strtod_r+0x8>)
 800b1e6:	f7ff ba47 	b.w	800a678 <_strtod_l>
 800b1ea:	bf00      	nop
 800b1ec:	200001f4 	.word	0x200001f4

0800b1f0 <_strtol_l.constprop.0>:
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f6:	d001      	beq.n	800b1fc <_strtol_l.constprop.0+0xc>
 800b1f8:	2b24      	cmp	r3, #36	; 0x24
 800b1fa:	d906      	bls.n	800b20a <_strtol_l.constprop.0+0x1a>
 800b1fc:	f7fe fa7c 	bl	80096f8 <__errno>
 800b200:	2316      	movs	r3, #22
 800b202:	6003      	str	r3, [r0, #0]
 800b204:	2000      	movs	r0, #0
 800b206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b2f0 <_strtol_l.constprop.0+0x100>
 800b20e:	460d      	mov	r5, r1
 800b210:	462e      	mov	r6, r5
 800b212:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b216:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b21a:	f017 0708 	ands.w	r7, r7, #8
 800b21e:	d1f7      	bne.n	800b210 <_strtol_l.constprop.0+0x20>
 800b220:	2c2d      	cmp	r4, #45	; 0x2d
 800b222:	d132      	bne.n	800b28a <_strtol_l.constprop.0+0x9a>
 800b224:	782c      	ldrb	r4, [r5, #0]
 800b226:	2701      	movs	r7, #1
 800b228:	1cb5      	adds	r5, r6, #2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d05b      	beq.n	800b2e6 <_strtol_l.constprop.0+0xf6>
 800b22e:	2b10      	cmp	r3, #16
 800b230:	d109      	bne.n	800b246 <_strtol_l.constprop.0+0x56>
 800b232:	2c30      	cmp	r4, #48	; 0x30
 800b234:	d107      	bne.n	800b246 <_strtol_l.constprop.0+0x56>
 800b236:	782c      	ldrb	r4, [r5, #0]
 800b238:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b23c:	2c58      	cmp	r4, #88	; 0x58
 800b23e:	d14d      	bne.n	800b2dc <_strtol_l.constprop.0+0xec>
 800b240:	786c      	ldrb	r4, [r5, #1]
 800b242:	2310      	movs	r3, #16
 800b244:	3502      	adds	r5, #2
 800b246:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b24a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b24e:	f04f 0c00 	mov.w	ip, #0
 800b252:	fbb8 f9f3 	udiv	r9, r8, r3
 800b256:	4666      	mov	r6, ip
 800b258:	fb03 8a19 	mls	sl, r3, r9, r8
 800b25c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b260:	f1be 0f09 	cmp.w	lr, #9
 800b264:	d816      	bhi.n	800b294 <_strtol_l.constprop.0+0xa4>
 800b266:	4674      	mov	r4, lr
 800b268:	42a3      	cmp	r3, r4
 800b26a:	dd24      	ble.n	800b2b6 <_strtol_l.constprop.0+0xc6>
 800b26c:	f1bc 0f00 	cmp.w	ip, #0
 800b270:	db1e      	blt.n	800b2b0 <_strtol_l.constprop.0+0xc0>
 800b272:	45b1      	cmp	r9, r6
 800b274:	d31c      	bcc.n	800b2b0 <_strtol_l.constprop.0+0xc0>
 800b276:	d101      	bne.n	800b27c <_strtol_l.constprop.0+0x8c>
 800b278:	45a2      	cmp	sl, r4
 800b27a:	db19      	blt.n	800b2b0 <_strtol_l.constprop.0+0xc0>
 800b27c:	fb06 4603 	mla	r6, r6, r3, r4
 800b280:	f04f 0c01 	mov.w	ip, #1
 800b284:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b288:	e7e8      	b.n	800b25c <_strtol_l.constprop.0+0x6c>
 800b28a:	2c2b      	cmp	r4, #43	; 0x2b
 800b28c:	bf04      	itt	eq
 800b28e:	782c      	ldrbeq	r4, [r5, #0]
 800b290:	1cb5      	addeq	r5, r6, #2
 800b292:	e7ca      	b.n	800b22a <_strtol_l.constprop.0+0x3a>
 800b294:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b298:	f1be 0f19 	cmp.w	lr, #25
 800b29c:	d801      	bhi.n	800b2a2 <_strtol_l.constprop.0+0xb2>
 800b29e:	3c37      	subs	r4, #55	; 0x37
 800b2a0:	e7e2      	b.n	800b268 <_strtol_l.constprop.0+0x78>
 800b2a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b2a6:	f1be 0f19 	cmp.w	lr, #25
 800b2aa:	d804      	bhi.n	800b2b6 <_strtol_l.constprop.0+0xc6>
 800b2ac:	3c57      	subs	r4, #87	; 0x57
 800b2ae:	e7db      	b.n	800b268 <_strtol_l.constprop.0+0x78>
 800b2b0:	f04f 3cff 	mov.w	ip, #4294967295
 800b2b4:	e7e6      	b.n	800b284 <_strtol_l.constprop.0+0x94>
 800b2b6:	f1bc 0f00 	cmp.w	ip, #0
 800b2ba:	da05      	bge.n	800b2c8 <_strtol_l.constprop.0+0xd8>
 800b2bc:	2322      	movs	r3, #34	; 0x22
 800b2be:	6003      	str	r3, [r0, #0]
 800b2c0:	4646      	mov	r6, r8
 800b2c2:	b942      	cbnz	r2, 800b2d6 <_strtol_l.constprop.0+0xe6>
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	e79e      	b.n	800b206 <_strtol_l.constprop.0+0x16>
 800b2c8:	b107      	cbz	r7, 800b2cc <_strtol_l.constprop.0+0xdc>
 800b2ca:	4276      	negs	r6, r6
 800b2cc:	2a00      	cmp	r2, #0
 800b2ce:	d0f9      	beq.n	800b2c4 <_strtol_l.constprop.0+0xd4>
 800b2d0:	f1bc 0f00 	cmp.w	ip, #0
 800b2d4:	d000      	beq.n	800b2d8 <_strtol_l.constprop.0+0xe8>
 800b2d6:	1e69      	subs	r1, r5, #1
 800b2d8:	6011      	str	r1, [r2, #0]
 800b2da:	e7f3      	b.n	800b2c4 <_strtol_l.constprop.0+0xd4>
 800b2dc:	2430      	movs	r4, #48	; 0x30
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1b1      	bne.n	800b246 <_strtol_l.constprop.0+0x56>
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	e7af      	b.n	800b246 <_strtol_l.constprop.0+0x56>
 800b2e6:	2c30      	cmp	r4, #48	; 0x30
 800b2e8:	d0a5      	beq.n	800b236 <_strtol_l.constprop.0+0x46>
 800b2ea:	230a      	movs	r3, #10
 800b2ec:	e7ab      	b.n	800b246 <_strtol_l.constprop.0+0x56>
 800b2ee:	bf00      	nop
 800b2f0:	0800e3a1 	.word	0x0800e3a1

0800b2f4 <_strtol_r>:
 800b2f4:	f7ff bf7c 	b.w	800b1f0 <_strtol_l.constprop.0>

0800b2f8 <quorem>:
 800b2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	6903      	ldr	r3, [r0, #16]
 800b2fe:	690c      	ldr	r4, [r1, #16]
 800b300:	42a3      	cmp	r3, r4
 800b302:	4607      	mov	r7, r0
 800b304:	f2c0 8081 	blt.w	800b40a <quorem+0x112>
 800b308:	3c01      	subs	r4, #1
 800b30a:	f101 0814 	add.w	r8, r1, #20
 800b30e:	f100 0514 	add.w	r5, r0, #20
 800b312:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b316:	9301      	str	r3, [sp, #4]
 800b318:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b31c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b320:	3301      	adds	r3, #1
 800b322:	429a      	cmp	r2, r3
 800b324:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b328:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b32c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b330:	d331      	bcc.n	800b396 <quorem+0x9e>
 800b332:	f04f 0e00 	mov.w	lr, #0
 800b336:	4640      	mov	r0, r8
 800b338:	46ac      	mov	ip, r5
 800b33a:	46f2      	mov	sl, lr
 800b33c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b340:	b293      	uxth	r3, r2
 800b342:	fb06 e303 	mla	r3, r6, r3, lr
 800b346:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	ebaa 0303 	sub.w	r3, sl, r3
 800b350:	f8dc a000 	ldr.w	sl, [ip]
 800b354:	0c12      	lsrs	r2, r2, #16
 800b356:	fa13 f38a 	uxtah	r3, r3, sl
 800b35a:	fb06 e202 	mla	r2, r6, r2, lr
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	9b00      	ldr	r3, [sp, #0]
 800b362:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b366:	b292      	uxth	r2, r2
 800b368:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b36c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b370:	f8bd 3000 	ldrh.w	r3, [sp]
 800b374:	4581      	cmp	r9, r0
 800b376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b37a:	f84c 3b04 	str.w	r3, [ip], #4
 800b37e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b382:	d2db      	bcs.n	800b33c <quorem+0x44>
 800b384:	f855 300b 	ldr.w	r3, [r5, fp]
 800b388:	b92b      	cbnz	r3, 800b396 <quorem+0x9e>
 800b38a:	9b01      	ldr	r3, [sp, #4]
 800b38c:	3b04      	subs	r3, #4
 800b38e:	429d      	cmp	r5, r3
 800b390:	461a      	mov	r2, r3
 800b392:	d32e      	bcc.n	800b3f2 <quorem+0xfa>
 800b394:	613c      	str	r4, [r7, #16]
 800b396:	4638      	mov	r0, r7
 800b398:	f001 fc06 	bl	800cba8 <__mcmp>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	db24      	blt.n	800b3ea <quorem+0xf2>
 800b3a0:	3601      	adds	r6, #1
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f04f 0c00 	mov.w	ip, #0
 800b3a8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b3ac:	f8d0 e000 	ldr.w	lr, [r0]
 800b3b0:	b293      	uxth	r3, r2
 800b3b2:	ebac 0303 	sub.w	r3, ip, r3
 800b3b6:	0c12      	lsrs	r2, r2, #16
 800b3b8:	fa13 f38e 	uxtah	r3, r3, lr
 800b3bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b3c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3ca:	45c1      	cmp	r9, r8
 800b3cc:	f840 3b04 	str.w	r3, [r0], #4
 800b3d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b3d4:	d2e8      	bcs.n	800b3a8 <quorem+0xb0>
 800b3d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3de:	b922      	cbnz	r2, 800b3ea <quorem+0xf2>
 800b3e0:	3b04      	subs	r3, #4
 800b3e2:	429d      	cmp	r5, r3
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	d30a      	bcc.n	800b3fe <quorem+0x106>
 800b3e8:	613c      	str	r4, [r7, #16]
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	b003      	add	sp, #12
 800b3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f2:	6812      	ldr	r2, [r2, #0]
 800b3f4:	3b04      	subs	r3, #4
 800b3f6:	2a00      	cmp	r2, #0
 800b3f8:	d1cc      	bne.n	800b394 <quorem+0x9c>
 800b3fa:	3c01      	subs	r4, #1
 800b3fc:	e7c7      	b.n	800b38e <quorem+0x96>
 800b3fe:	6812      	ldr	r2, [r2, #0]
 800b400:	3b04      	subs	r3, #4
 800b402:	2a00      	cmp	r2, #0
 800b404:	d1f0      	bne.n	800b3e8 <quorem+0xf0>
 800b406:	3c01      	subs	r4, #1
 800b408:	e7eb      	b.n	800b3e2 <quorem+0xea>
 800b40a:	2000      	movs	r0, #0
 800b40c:	e7ee      	b.n	800b3ec <quorem+0xf4>
	...

0800b410 <_dtoa_r>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	ed2d 8b02 	vpush	{d8}
 800b418:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b41a:	b091      	sub	sp, #68	; 0x44
 800b41c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b420:	ec59 8b10 	vmov	r8, r9, d0
 800b424:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b426:	9106      	str	r1, [sp, #24]
 800b428:	4606      	mov	r6, r0
 800b42a:	9208      	str	r2, [sp, #32]
 800b42c:	930c      	str	r3, [sp, #48]	; 0x30
 800b42e:	b975      	cbnz	r5, 800b44e <_dtoa_r+0x3e>
 800b430:	2010      	movs	r0, #16
 800b432:	f7fe f98b 	bl	800974c <malloc>
 800b436:	4602      	mov	r2, r0
 800b438:	6270      	str	r0, [r6, #36]	; 0x24
 800b43a:	b920      	cbnz	r0, 800b446 <_dtoa_r+0x36>
 800b43c:	4baa      	ldr	r3, [pc, #680]	; (800b6e8 <_dtoa_r+0x2d8>)
 800b43e:	21ea      	movs	r1, #234	; 0xea
 800b440:	48aa      	ldr	r0, [pc, #680]	; (800b6ec <_dtoa_r+0x2dc>)
 800b442:	f001 ff3f 	bl	800d2c4 <__assert_func>
 800b446:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b44a:	6005      	str	r5, [r0, #0]
 800b44c:	60c5      	str	r5, [r0, #12]
 800b44e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b450:	6819      	ldr	r1, [r3, #0]
 800b452:	b151      	cbz	r1, 800b46a <_dtoa_r+0x5a>
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	604a      	str	r2, [r1, #4]
 800b458:	2301      	movs	r3, #1
 800b45a:	4093      	lsls	r3, r2
 800b45c:	608b      	str	r3, [r1, #8]
 800b45e:	4630      	mov	r0, r6
 800b460:	f001 f916 	bl	800c690 <_Bfree>
 800b464:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b466:	2200      	movs	r2, #0
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	f1b9 0300 	subs.w	r3, r9, #0
 800b46e:	bfbb      	ittet	lt
 800b470:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b474:	9303      	strlt	r3, [sp, #12]
 800b476:	2300      	movge	r3, #0
 800b478:	2201      	movlt	r2, #1
 800b47a:	bfac      	ite	ge
 800b47c:	6023      	strge	r3, [r4, #0]
 800b47e:	6022      	strlt	r2, [r4, #0]
 800b480:	4b9b      	ldr	r3, [pc, #620]	; (800b6f0 <_dtoa_r+0x2e0>)
 800b482:	9c03      	ldr	r4, [sp, #12]
 800b484:	43a3      	bics	r3, r4
 800b486:	d11c      	bne.n	800b4c2 <_dtoa_r+0xb2>
 800b488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b48a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b494:	ea53 0308 	orrs.w	r3, r3, r8
 800b498:	f000 84fd 	beq.w	800be96 <_dtoa_r+0xa86>
 800b49c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b49e:	b963      	cbnz	r3, 800b4ba <_dtoa_r+0xaa>
 800b4a0:	4b94      	ldr	r3, [pc, #592]	; (800b6f4 <_dtoa_r+0x2e4>)
 800b4a2:	e01f      	b.n	800b4e4 <_dtoa_r+0xd4>
 800b4a4:	4b94      	ldr	r3, [pc, #592]	; (800b6f8 <_dtoa_r+0x2e8>)
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b4ac:	6013      	str	r3, [r2, #0]
 800b4ae:	9801      	ldr	r0, [sp, #4]
 800b4b0:	b011      	add	sp, #68	; 0x44
 800b4b2:	ecbd 8b02 	vpop	{d8}
 800b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ba:	4b8e      	ldr	r3, [pc, #568]	; (800b6f4 <_dtoa_r+0x2e4>)
 800b4bc:	9301      	str	r3, [sp, #4]
 800b4be:	3303      	adds	r3, #3
 800b4c0:	e7f3      	b.n	800b4aa <_dtoa_r+0x9a>
 800b4c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b4c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ce:	d10b      	bne.n	800b4e8 <_dtoa_r+0xd8>
 800b4d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	6013      	str	r3, [r2, #0]
 800b4d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 84d9 	beq.w	800be90 <_dtoa_r+0xa80>
 800b4de:	4887      	ldr	r0, [pc, #540]	; (800b6fc <_dtoa_r+0x2ec>)
 800b4e0:	6018      	str	r0, [r3, #0]
 800b4e2:	1e43      	subs	r3, r0, #1
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	e7e2      	b.n	800b4ae <_dtoa_r+0x9e>
 800b4e8:	a90f      	add	r1, sp, #60	; 0x3c
 800b4ea:	aa0e      	add	r2, sp, #56	; 0x38
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	eeb0 0b48 	vmov.f64	d0, d8
 800b4f2:	f001 fc7b 	bl	800cdec <__d2b>
 800b4f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b4fa:	4605      	mov	r5, r0
 800b4fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b4fe:	2900      	cmp	r1, #0
 800b500:	d046      	beq.n	800b590 <_dtoa_r+0x180>
 800b502:	ee18 4a90 	vmov	r4, s17
 800b506:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b50a:	ec53 2b18 	vmov	r2, r3, d8
 800b50e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b512:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b516:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b51a:	2400      	movs	r4, #0
 800b51c:	ec43 2b16 	vmov	d6, r2, r3
 800b520:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b524:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b6d0 <_dtoa_r+0x2c0>
 800b528:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b52c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800b6d8 <_dtoa_r+0x2c8>
 800b530:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b534:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b6e0 <_dtoa_r+0x2d0>
 800b538:	ee07 1a90 	vmov	s15, r1
 800b53c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b540:	eeb0 7b46 	vmov.f64	d7, d6
 800b544:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b548:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b54c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b554:	ee16 ba90 	vmov	fp, s13
 800b558:	940a      	str	r4, [sp, #40]	; 0x28
 800b55a:	d508      	bpl.n	800b56e <_dtoa_r+0x15e>
 800b55c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b560:	eeb4 6b47 	vcmp.f64	d6, d7
 800b564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b568:	bf18      	it	ne
 800b56a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b56e:	f1bb 0f16 	cmp.w	fp, #22
 800b572:	d82f      	bhi.n	800b5d4 <_dtoa_r+0x1c4>
 800b574:	4b62      	ldr	r3, [pc, #392]	; (800b700 <_dtoa_r+0x2f0>)
 800b576:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b57a:	ed93 7b00 	vldr	d7, [r3]
 800b57e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b586:	d501      	bpl.n	800b58c <_dtoa_r+0x17c>
 800b588:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b58c:	2300      	movs	r3, #0
 800b58e:	e022      	b.n	800b5d6 <_dtoa_r+0x1c6>
 800b590:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b592:	4401      	add	r1, r0
 800b594:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b598:	2b20      	cmp	r3, #32
 800b59a:	bfc1      	itttt	gt
 800b59c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b5a0:	fa04 f303 	lslgt.w	r3, r4, r3
 800b5a4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b5a8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b5ac:	bfd6      	itet	le
 800b5ae:	f1c3 0320 	rsble	r3, r3, #32
 800b5b2:	ea43 0808 	orrgt.w	r8, r3, r8
 800b5b6:	fa08 f803 	lslle.w	r8, r8, r3
 800b5ba:	ee07 8a90 	vmov	s15, r8
 800b5be:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b5c2:	3901      	subs	r1, #1
 800b5c4:	ee17 4a90 	vmov	r4, s15
 800b5c8:	ec53 2b17 	vmov	r2, r3, d7
 800b5cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b5d0:	2401      	movs	r4, #1
 800b5d2:	e7a3      	b.n	800b51c <_dtoa_r+0x10c>
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5d8:	1a43      	subs	r3, r0, r1
 800b5da:	1e5a      	subs	r2, r3, #1
 800b5dc:	bf45      	ittet	mi
 800b5de:	f1c3 0301 	rsbmi	r3, r3, #1
 800b5e2:	9304      	strmi	r3, [sp, #16]
 800b5e4:	2300      	movpl	r3, #0
 800b5e6:	2300      	movmi	r3, #0
 800b5e8:	9205      	str	r2, [sp, #20]
 800b5ea:	bf54      	ite	pl
 800b5ec:	9304      	strpl	r3, [sp, #16]
 800b5ee:	9305      	strmi	r3, [sp, #20]
 800b5f0:	f1bb 0f00 	cmp.w	fp, #0
 800b5f4:	db18      	blt.n	800b628 <_dtoa_r+0x218>
 800b5f6:	9b05      	ldr	r3, [sp, #20]
 800b5f8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800b5fc:	445b      	add	r3, fp
 800b5fe:	9305      	str	r3, [sp, #20]
 800b600:	2300      	movs	r3, #0
 800b602:	9a06      	ldr	r2, [sp, #24]
 800b604:	2a09      	cmp	r2, #9
 800b606:	d849      	bhi.n	800b69c <_dtoa_r+0x28c>
 800b608:	2a05      	cmp	r2, #5
 800b60a:	bfc4      	itt	gt
 800b60c:	3a04      	subgt	r2, #4
 800b60e:	9206      	strgt	r2, [sp, #24]
 800b610:	9a06      	ldr	r2, [sp, #24]
 800b612:	f1a2 0202 	sub.w	r2, r2, #2
 800b616:	bfcc      	ite	gt
 800b618:	2400      	movgt	r4, #0
 800b61a:	2401      	movle	r4, #1
 800b61c:	2a03      	cmp	r2, #3
 800b61e:	d848      	bhi.n	800b6b2 <_dtoa_r+0x2a2>
 800b620:	e8df f002 	tbb	[pc, r2]
 800b624:	3a2c2e0b 	.word	0x3a2c2e0b
 800b628:	9b04      	ldr	r3, [sp, #16]
 800b62a:	2200      	movs	r2, #0
 800b62c:	eba3 030b 	sub.w	r3, r3, fp
 800b630:	9304      	str	r3, [sp, #16]
 800b632:	9209      	str	r2, [sp, #36]	; 0x24
 800b634:	f1cb 0300 	rsb	r3, fp, #0
 800b638:	e7e3      	b.n	800b602 <_dtoa_r+0x1f2>
 800b63a:	2200      	movs	r2, #0
 800b63c:	9207      	str	r2, [sp, #28]
 800b63e:	9a08      	ldr	r2, [sp, #32]
 800b640:	2a00      	cmp	r2, #0
 800b642:	dc39      	bgt.n	800b6b8 <_dtoa_r+0x2a8>
 800b644:	f04f 0a01 	mov.w	sl, #1
 800b648:	46d1      	mov	r9, sl
 800b64a:	4652      	mov	r2, sl
 800b64c:	f8cd a020 	str.w	sl, [sp, #32]
 800b650:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b652:	2100      	movs	r1, #0
 800b654:	6079      	str	r1, [r7, #4]
 800b656:	2004      	movs	r0, #4
 800b658:	f100 0c14 	add.w	ip, r0, #20
 800b65c:	4594      	cmp	ip, r2
 800b65e:	6879      	ldr	r1, [r7, #4]
 800b660:	d92f      	bls.n	800b6c2 <_dtoa_r+0x2b2>
 800b662:	4630      	mov	r0, r6
 800b664:	930d      	str	r3, [sp, #52]	; 0x34
 800b666:	f000 ffd3 	bl	800c610 <_Balloc>
 800b66a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b66c:	9001      	str	r0, [sp, #4]
 800b66e:	4602      	mov	r2, r0
 800b670:	2800      	cmp	r0, #0
 800b672:	d149      	bne.n	800b708 <_dtoa_r+0x2f8>
 800b674:	4b23      	ldr	r3, [pc, #140]	; (800b704 <_dtoa_r+0x2f4>)
 800b676:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b67a:	e6e1      	b.n	800b440 <_dtoa_r+0x30>
 800b67c:	2201      	movs	r2, #1
 800b67e:	e7dd      	b.n	800b63c <_dtoa_r+0x22c>
 800b680:	2200      	movs	r2, #0
 800b682:	9207      	str	r2, [sp, #28]
 800b684:	9a08      	ldr	r2, [sp, #32]
 800b686:	eb0b 0a02 	add.w	sl, fp, r2
 800b68a:	f10a 0901 	add.w	r9, sl, #1
 800b68e:	464a      	mov	r2, r9
 800b690:	2a01      	cmp	r2, #1
 800b692:	bfb8      	it	lt
 800b694:	2201      	movlt	r2, #1
 800b696:	e7db      	b.n	800b650 <_dtoa_r+0x240>
 800b698:	2201      	movs	r2, #1
 800b69a:	e7f2      	b.n	800b682 <_dtoa_r+0x272>
 800b69c:	2401      	movs	r4, #1
 800b69e:	2200      	movs	r2, #0
 800b6a0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b6a4:	f04f 3aff 	mov.w	sl, #4294967295
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	46d1      	mov	r9, sl
 800b6ac:	2212      	movs	r2, #18
 800b6ae:	9108      	str	r1, [sp, #32]
 800b6b0:	e7ce      	b.n	800b650 <_dtoa_r+0x240>
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	9207      	str	r2, [sp, #28]
 800b6b6:	e7f5      	b.n	800b6a4 <_dtoa_r+0x294>
 800b6b8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b6bc:	46d1      	mov	r9, sl
 800b6be:	4652      	mov	r2, sl
 800b6c0:	e7c6      	b.n	800b650 <_dtoa_r+0x240>
 800b6c2:	3101      	adds	r1, #1
 800b6c4:	6079      	str	r1, [r7, #4]
 800b6c6:	0040      	lsls	r0, r0, #1
 800b6c8:	e7c6      	b.n	800b658 <_dtoa_r+0x248>
 800b6ca:	bf00      	nop
 800b6cc:	f3af 8000 	nop.w
 800b6d0:	636f4361 	.word	0x636f4361
 800b6d4:	3fd287a7 	.word	0x3fd287a7
 800b6d8:	8b60c8b3 	.word	0x8b60c8b3
 800b6dc:	3fc68a28 	.word	0x3fc68a28
 800b6e0:	509f79fb 	.word	0x509f79fb
 800b6e4:	3fd34413 	.word	0x3fd34413
 800b6e8:	0800e4ae 	.word	0x0800e4ae
 800b6ec:	0800e4c5 	.word	0x0800e4c5
 800b6f0:	7ff00000 	.word	0x7ff00000
 800b6f4:	0800e4aa 	.word	0x0800e4aa
 800b6f8:	0800e4a1 	.word	0x0800e4a1
 800b6fc:	0800e325 	.word	0x0800e325
 800b700:	0800e630 	.word	0x0800e630
 800b704:	0800e520 	.word	0x0800e520
 800b708:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b70a:	9901      	ldr	r1, [sp, #4]
 800b70c:	6011      	str	r1, [r2, #0]
 800b70e:	f1b9 0f0e 	cmp.w	r9, #14
 800b712:	d86c      	bhi.n	800b7ee <_dtoa_r+0x3de>
 800b714:	2c00      	cmp	r4, #0
 800b716:	d06a      	beq.n	800b7ee <_dtoa_r+0x3de>
 800b718:	f1bb 0f00 	cmp.w	fp, #0
 800b71c:	f340 80a0 	ble.w	800b860 <_dtoa_r+0x450>
 800b720:	49c1      	ldr	r1, [pc, #772]	; (800ba28 <_dtoa_r+0x618>)
 800b722:	f00b 020f 	and.w	r2, fp, #15
 800b726:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b72a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b72e:	ed92 7b00 	vldr	d7, [r2]
 800b732:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b736:	f000 8087 	beq.w	800b848 <_dtoa_r+0x438>
 800b73a:	4abc      	ldr	r2, [pc, #752]	; (800ba2c <_dtoa_r+0x61c>)
 800b73c:	ed92 6b08 	vldr	d6, [r2, #32]
 800b740:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b744:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b748:	f001 010f 	and.w	r1, r1, #15
 800b74c:	2203      	movs	r2, #3
 800b74e:	48b7      	ldr	r0, [pc, #732]	; (800ba2c <_dtoa_r+0x61c>)
 800b750:	2900      	cmp	r1, #0
 800b752:	d17b      	bne.n	800b84c <_dtoa_r+0x43c>
 800b754:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b758:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b75c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b760:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b762:	2900      	cmp	r1, #0
 800b764:	f000 80a2 	beq.w	800b8ac <_dtoa_r+0x49c>
 800b768:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b770:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b778:	f140 8098 	bpl.w	800b8ac <_dtoa_r+0x49c>
 800b77c:	f1b9 0f00 	cmp.w	r9, #0
 800b780:	f000 8094 	beq.w	800b8ac <_dtoa_r+0x49c>
 800b784:	f1ba 0f00 	cmp.w	sl, #0
 800b788:	dd2f      	ble.n	800b7ea <_dtoa_r+0x3da>
 800b78a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b78e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b792:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b796:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b79a:	3201      	adds	r2, #1
 800b79c:	4650      	mov	r0, sl
 800b79e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b7a2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b7a6:	ee07 2a90 	vmov	s15, r2
 800b7aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b7ae:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b7b2:	ee15 4a90 	vmov	r4, s11
 800b7b6:	ec52 1b15 	vmov	r1, r2, d5
 800b7ba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d177      	bne.n	800b8b2 <_dtoa_r+0x4a2>
 800b7c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b7c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b7ca:	ec42 1b17 	vmov	d7, r1, r2
 800b7ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d6:	f300 8263 	bgt.w	800bca0 <_dtoa_r+0x890>
 800b7da:	eeb1 7b47 	vneg.f64	d7, d7
 800b7de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e6:	f100 8258 	bmi.w	800bc9a <_dtoa_r+0x88a>
 800b7ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b7ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b7f0:	2a00      	cmp	r2, #0
 800b7f2:	f2c0 811d 	blt.w	800ba30 <_dtoa_r+0x620>
 800b7f6:	f1bb 0f0e 	cmp.w	fp, #14
 800b7fa:	f300 8119 	bgt.w	800ba30 <_dtoa_r+0x620>
 800b7fe:	4b8a      	ldr	r3, [pc, #552]	; (800ba28 <_dtoa_r+0x618>)
 800b800:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b804:	ed93 6b00 	vldr	d6, [r3]
 800b808:	9b08      	ldr	r3, [sp, #32]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f280 80b7 	bge.w	800b97e <_dtoa_r+0x56e>
 800b810:	f1b9 0f00 	cmp.w	r9, #0
 800b814:	f300 80b3 	bgt.w	800b97e <_dtoa_r+0x56e>
 800b818:	f040 823f 	bne.w	800bc9a <_dtoa_r+0x88a>
 800b81c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b820:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b824:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b828:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b82c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b830:	464c      	mov	r4, r9
 800b832:	464f      	mov	r7, r9
 800b834:	f280 8215 	bge.w	800bc62 <_dtoa_r+0x852>
 800b838:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b83c:	2331      	movs	r3, #49	; 0x31
 800b83e:	f808 3b01 	strb.w	r3, [r8], #1
 800b842:	f10b 0b01 	add.w	fp, fp, #1
 800b846:	e211      	b.n	800bc6c <_dtoa_r+0x85c>
 800b848:	2202      	movs	r2, #2
 800b84a:	e780      	b.n	800b74e <_dtoa_r+0x33e>
 800b84c:	07cc      	lsls	r4, r1, #31
 800b84e:	d504      	bpl.n	800b85a <_dtoa_r+0x44a>
 800b850:	ed90 6b00 	vldr	d6, [r0]
 800b854:	3201      	adds	r2, #1
 800b856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b85a:	1049      	asrs	r1, r1, #1
 800b85c:	3008      	adds	r0, #8
 800b85e:	e777      	b.n	800b750 <_dtoa_r+0x340>
 800b860:	d022      	beq.n	800b8a8 <_dtoa_r+0x498>
 800b862:	f1cb 0100 	rsb	r1, fp, #0
 800b866:	4a70      	ldr	r2, [pc, #448]	; (800ba28 <_dtoa_r+0x618>)
 800b868:	f001 000f 	and.w	r0, r1, #15
 800b86c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b870:	ed92 7b00 	vldr	d7, [r2]
 800b874:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b878:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b87c:	486b      	ldr	r0, [pc, #428]	; (800ba2c <_dtoa_r+0x61c>)
 800b87e:	1109      	asrs	r1, r1, #4
 800b880:	2400      	movs	r4, #0
 800b882:	2202      	movs	r2, #2
 800b884:	b929      	cbnz	r1, 800b892 <_dtoa_r+0x482>
 800b886:	2c00      	cmp	r4, #0
 800b888:	f43f af6a 	beq.w	800b760 <_dtoa_r+0x350>
 800b88c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b890:	e766      	b.n	800b760 <_dtoa_r+0x350>
 800b892:	07cf      	lsls	r7, r1, #31
 800b894:	d505      	bpl.n	800b8a2 <_dtoa_r+0x492>
 800b896:	ed90 6b00 	vldr	d6, [r0]
 800b89a:	3201      	adds	r2, #1
 800b89c:	2401      	movs	r4, #1
 800b89e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8a2:	1049      	asrs	r1, r1, #1
 800b8a4:	3008      	adds	r0, #8
 800b8a6:	e7ed      	b.n	800b884 <_dtoa_r+0x474>
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	e759      	b.n	800b760 <_dtoa_r+0x350>
 800b8ac:	465f      	mov	r7, fp
 800b8ae:	4648      	mov	r0, r9
 800b8b0:	e775      	b.n	800b79e <_dtoa_r+0x38e>
 800b8b2:	ec42 1b17 	vmov	d7, r1, r2
 800b8b6:	4a5c      	ldr	r2, [pc, #368]	; (800ba28 <_dtoa_r+0x618>)
 800b8b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b8bc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b8c0:	9a01      	ldr	r2, [sp, #4]
 800b8c2:	1814      	adds	r4, r2, r0
 800b8c4:	9a07      	ldr	r2, [sp, #28]
 800b8c6:	b352      	cbz	r2, 800b91e <_dtoa_r+0x50e>
 800b8c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b8cc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b8d0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b8d4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b8d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b8dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b8e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b8e4:	ee14 2a90 	vmov	r2, s9
 800b8e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b8ec:	3230      	adds	r2, #48	; 0x30
 800b8ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b8f2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fa:	f808 2b01 	strb.w	r2, [r8], #1
 800b8fe:	d439      	bmi.n	800b974 <_dtoa_r+0x564>
 800b900:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b904:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b90c:	d472      	bmi.n	800b9f4 <_dtoa_r+0x5e4>
 800b90e:	45a0      	cmp	r8, r4
 800b910:	f43f af6b 	beq.w	800b7ea <_dtoa_r+0x3da>
 800b914:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b918:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b91c:	e7e0      	b.n	800b8e0 <_dtoa_r+0x4d0>
 800b91e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b922:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b926:	4621      	mov	r1, r4
 800b928:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b92c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b930:	ee14 2a90 	vmov	r2, s9
 800b934:	3230      	adds	r2, #48	; 0x30
 800b936:	f808 2b01 	strb.w	r2, [r8], #1
 800b93a:	45a0      	cmp	r8, r4
 800b93c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b940:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b944:	d118      	bne.n	800b978 <_dtoa_r+0x568>
 800b946:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b94a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b94e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b956:	dc4d      	bgt.n	800b9f4 <_dtoa_r+0x5e4>
 800b958:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b95c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b964:	f57f af41 	bpl.w	800b7ea <_dtoa_r+0x3da>
 800b968:	4688      	mov	r8, r1
 800b96a:	3901      	subs	r1, #1
 800b96c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b970:	2b30      	cmp	r3, #48	; 0x30
 800b972:	d0f9      	beq.n	800b968 <_dtoa_r+0x558>
 800b974:	46bb      	mov	fp, r7
 800b976:	e02a      	b.n	800b9ce <_dtoa_r+0x5be>
 800b978:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b97c:	e7d6      	b.n	800b92c <_dtoa_r+0x51c>
 800b97e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b982:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b986:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b98a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b98e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b992:	ee15 3a10 	vmov	r3, s10
 800b996:	3330      	adds	r3, #48	; 0x30
 800b998:	f808 3b01 	strb.w	r3, [r8], #1
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	eba8 0303 	sub.w	r3, r8, r3
 800b9a2:	4599      	cmp	r9, r3
 800b9a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b9a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b9ac:	d133      	bne.n	800ba16 <_dtoa_r+0x606>
 800b9ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b9b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ba:	dc1a      	bgt.n	800b9f2 <_dtoa_r+0x5e2>
 800b9bc:	eeb4 7b46 	vcmp.f64	d7, d6
 800b9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9c4:	d103      	bne.n	800b9ce <_dtoa_r+0x5be>
 800b9c6:	ee15 3a10 	vmov	r3, s10
 800b9ca:	07d9      	lsls	r1, r3, #31
 800b9cc:	d411      	bmi.n	800b9f2 <_dtoa_r+0x5e2>
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f000 fe5d 	bl	800c690 <_Bfree>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9da:	f888 3000 	strb.w	r3, [r8]
 800b9de:	f10b 0301 	add.w	r3, fp, #1
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f43f ad61 	beq.w	800b4ae <_dtoa_r+0x9e>
 800b9ec:	f8c3 8000 	str.w	r8, [r3]
 800b9f0:	e55d      	b.n	800b4ae <_dtoa_r+0x9e>
 800b9f2:	465f      	mov	r7, fp
 800b9f4:	4643      	mov	r3, r8
 800b9f6:	4698      	mov	r8, r3
 800b9f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9fc:	2a39      	cmp	r2, #57	; 0x39
 800b9fe:	d106      	bne.n	800ba0e <_dtoa_r+0x5fe>
 800ba00:	9a01      	ldr	r2, [sp, #4]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d1f7      	bne.n	800b9f6 <_dtoa_r+0x5e6>
 800ba06:	9901      	ldr	r1, [sp, #4]
 800ba08:	2230      	movs	r2, #48	; 0x30
 800ba0a:	3701      	adds	r7, #1
 800ba0c:	700a      	strb	r2, [r1, #0]
 800ba0e:	781a      	ldrb	r2, [r3, #0]
 800ba10:	3201      	adds	r2, #1
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	e7ae      	b.n	800b974 <_dtoa_r+0x564>
 800ba16:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ba1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba22:	d1b2      	bne.n	800b98a <_dtoa_r+0x57a>
 800ba24:	e7d3      	b.n	800b9ce <_dtoa_r+0x5be>
 800ba26:	bf00      	nop
 800ba28:	0800e630 	.word	0x0800e630
 800ba2c:	0800e608 	.word	0x0800e608
 800ba30:	9907      	ldr	r1, [sp, #28]
 800ba32:	2900      	cmp	r1, #0
 800ba34:	f000 80d0 	beq.w	800bbd8 <_dtoa_r+0x7c8>
 800ba38:	9906      	ldr	r1, [sp, #24]
 800ba3a:	2901      	cmp	r1, #1
 800ba3c:	f300 80b4 	bgt.w	800bba8 <_dtoa_r+0x798>
 800ba40:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ba42:	2900      	cmp	r1, #0
 800ba44:	f000 80ac 	beq.w	800bba0 <_dtoa_r+0x790>
 800ba48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ba50:	461c      	mov	r4, r3
 800ba52:	930a      	str	r3, [sp, #40]	; 0x28
 800ba54:	9b04      	ldr	r3, [sp, #16]
 800ba56:	4413      	add	r3, r2
 800ba58:	9304      	str	r3, [sp, #16]
 800ba5a:	9b05      	ldr	r3, [sp, #20]
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	4413      	add	r3, r2
 800ba60:	4630      	mov	r0, r6
 800ba62:	9305      	str	r3, [sp, #20]
 800ba64:	f000 ff16 	bl	800c894 <__i2b>
 800ba68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	f1b8 0f00 	cmp.w	r8, #0
 800ba70:	dd0d      	ble.n	800ba8e <_dtoa_r+0x67e>
 800ba72:	9a05      	ldr	r2, [sp, #20]
 800ba74:	2a00      	cmp	r2, #0
 800ba76:	dd0a      	ble.n	800ba8e <_dtoa_r+0x67e>
 800ba78:	4542      	cmp	r2, r8
 800ba7a:	9904      	ldr	r1, [sp, #16]
 800ba7c:	bfa8      	it	ge
 800ba7e:	4642      	movge	r2, r8
 800ba80:	1a89      	subs	r1, r1, r2
 800ba82:	9104      	str	r1, [sp, #16]
 800ba84:	9905      	ldr	r1, [sp, #20]
 800ba86:	eba8 0802 	sub.w	r8, r8, r2
 800ba8a:	1a8a      	subs	r2, r1, r2
 800ba8c:	9205      	str	r2, [sp, #20]
 800ba8e:	b303      	cbz	r3, 800bad2 <_dtoa_r+0x6c2>
 800ba90:	9a07      	ldr	r2, [sp, #28]
 800ba92:	2a00      	cmp	r2, #0
 800ba94:	f000 80a5 	beq.w	800bbe2 <_dtoa_r+0x7d2>
 800ba98:	2c00      	cmp	r4, #0
 800ba9a:	dd13      	ble.n	800bac4 <_dtoa_r+0x6b4>
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	4622      	mov	r2, r4
 800baa0:	4630      	mov	r0, r6
 800baa2:	930d      	str	r3, [sp, #52]	; 0x34
 800baa4:	f000 ffb6 	bl	800ca14 <__pow5mult>
 800baa8:	462a      	mov	r2, r5
 800baaa:	4601      	mov	r1, r0
 800baac:	4607      	mov	r7, r0
 800baae:	4630      	mov	r0, r6
 800bab0:	f000 ff06 	bl	800c8c0 <__multiply>
 800bab4:	4629      	mov	r1, r5
 800bab6:	900a      	str	r0, [sp, #40]	; 0x28
 800bab8:	4630      	mov	r0, r6
 800baba:	f000 fde9 	bl	800c690 <_Bfree>
 800babe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bac0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bac2:	4615      	mov	r5, r2
 800bac4:	1b1a      	subs	r2, r3, r4
 800bac6:	d004      	beq.n	800bad2 <_dtoa_r+0x6c2>
 800bac8:	4629      	mov	r1, r5
 800baca:	4630      	mov	r0, r6
 800bacc:	f000 ffa2 	bl	800ca14 <__pow5mult>
 800bad0:	4605      	mov	r5, r0
 800bad2:	2101      	movs	r1, #1
 800bad4:	4630      	mov	r0, r6
 800bad6:	f000 fedd 	bl	800c894 <__i2b>
 800bada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800badc:	2b00      	cmp	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	f340 8081 	ble.w	800bbe6 <_dtoa_r+0x7d6>
 800bae4:	461a      	mov	r2, r3
 800bae6:	4601      	mov	r1, r0
 800bae8:	4630      	mov	r0, r6
 800baea:	f000 ff93 	bl	800ca14 <__pow5mult>
 800baee:	9b06      	ldr	r3, [sp, #24]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	4604      	mov	r4, r0
 800baf4:	dd7a      	ble.n	800bbec <_dtoa_r+0x7dc>
 800baf6:	2300      	movs	r3, #0
 800baf8:	930a      	str	r3, [sp, #40]	; 0x28
 800bafa:	6922      	ldr	r2, [r4, #16]
 800bafc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bb00:	6910      	ldr	r0, [r2, #16]
 800bb02:	f000 fe77 	bl	800c7f4 <__hi0bits>
 800bb06:	f1c0 0020 	rsb	r0, r0, #32
 800bb0a:	9b05      	ldr	r3, [sp, #20]
 800bb0c:	4418      	add	r0, r3
 800bb0e:	f010 001f 	ands.w	r0, r0, #31
 800bb12:	f000 808c 	beq.w	800bc2e <_dtoa_r+0x81e>
 800bb16:	f1c0 0220 	rsb	r2, r0, #32
 800bb1a:	2a04      	cmp	r2, #4
 800bb1c:	f340 8085 	ble.w	800bc2a <_dtoa_r+0x81a>
 800bb20:	f1c0 001c 	rsb	r0, r0, #28
 800bb24:	9b04      	ldr	r3, [sp, #16]
 800bb26:	4403      	add	r3, r0
 800bb28:	9304      	str	r3, [sp, #16]
 800bb2a:	9b05      	ldr	r3, [sp, #20]
 800bb2c:	4403      	add	r3, r0
 800bb2e:	4480      	add	r8, r0
 800bb30:	9305      	str	r3, [sp, #20]
 800bb32:	9b04      	ldr	r3, [sp, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dd05      	ble.n	800bb44 <_dtoa_r+0x734>
 800bb38:	4629      	mov	r1, r5
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	f000 ffc3 	bl	800cac8 <__lshift>
 800bb42:	4605      	mov	r5, r0
 800bb44:	9b05      	ldr	r3, [sp, #20]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	dd05      	ble.n	800bb56 <_dtoa_r+0x746>
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f000 ffba 	bl	800cac8 <__lshift>
 800bb54:	4604      	mov	r4, r0
 800bb56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d06a      	beq.n	800bc32 <_dtoa_r+0x822>
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f001 f822 	bl	800cba8 <__mcmp>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	da64      	bge.n	800bc32 <_dtoa_r+0x822>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	220a      	movs	r2, #10
 800bb6e:	4630      	mov	r0, r6
 800bb70:	f000 fdb0 	bl	800c6d4 <__multadd>
 800bb74:	9b07      	ldr	r3, [sp, #28]
 800bb76:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 8191 	beq.w	800bea4 <_dtoa_r+0xa94>
 800bb82:	4639      	mov	r1, r7
 800bb84:	2300      	movs	r3, #0
 800bb86:	220a      	movs	r2, #10
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f000 fda3 	bl	800c6d4 <__multadd>
 800bb8e:	f1ba 0f00 	cmp.w	sl, #0
 800bb92:	4607      	mov	r7, r0
 800bb94:	f300 808d 	bgt.w	800bcb2 <_dtoa_r+0x8a2>
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	dc50      	bgt.n	800bc40 <_dtoa_r+0x830>
 800bb9e:	e088      	b.n	800bcb2 <_dtoa_r+0x8a2>
 800bba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bba2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bba6:	e751      	b.n	800ba4c <_dtoa_r+0x63c>
 800bba8:	f109 34ff 	add.w	r4, r9, #4294967295
 800bbac:	42a3      	cmp	r3, r4
 800bbae:	bfbf      	itttt	lt
 800bbb0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800bbb2:	1ae3      	sublt	r3, r4, r3
 800bbb4:	18d2      	addlt	r2, r2, r3
 800bbb6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800bbb8:	bfb6      	itet	lt
 800bbba:	4623      	movlt	r3, r4
 800bbbc:	1b1c      	subge	r4, r3, r4
 800bbbe:	2400      	movlt	r4, #0
 800bbc0:	f1b9 0f00 	cmp.w	r9, #0
 800bbc4:	bfb5      	itete	lt
 800bbc6:	9a04      	ldrlt	r2, [sp, #16]
 800bbc8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800bbcc:	eba2 0809 	sublt.w	r8, r2, r9
 800bbd0:	464a      	movge	r2, r9
 800bbd2:	bfb8      	it	lt
 800bbd4:	2200      	movlt	r2, #0
 800bbd6:	e73c      	b.n	800ba52 <_dtoa_r+0x642>
 800bbd8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bbdc:	9f07      	ldr	r7, [sp, #28]
 800bbde:	461c      	mov	r4, r3
 800bbe0:	e744      	b.n	800ba6c <_dtoa_r+0x65c>
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	e770      	b.n	800bac8 <_dtoa_r+0x6b8>
 800bbe6:	9b06      	ldr	r3, [sp, #24]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	dc18      	bgt.n	800bc1e <_dtoa_r+0x80e>
 800bbec:	9b02      	ldr	r3, [sp, #8]
 800bbee:	b9b3      	cbnz	r3, 800bc1e <_dtoa_r+0x80e>
 800bbf0:	9b03      	ldr	r3, [sp, #12]
 800bbf2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bbf6:	b9a2      	cbnz	r2, 800bc22 <_dtoa_r+0x812>
 800bbf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bbfc:	0d12      	lsrs	r2, r2, #20
 800bbfe:	0512      	lsls	r2, r2, #20
 800bc00:	b18a      	cbz	r2, 800bc26 <_dtoa_r+0x816>
 800bc02:	9b04      	ldr	r3, [sp, #16]
 800bc04:	3301      	adds	r3, #1
 800bc06:	9304      	str	r3, [sp, #16]
 800bc08:	9b05      	ldr	r3, [sp, #20]
 800bc0a:	3301      	adds	r3, #1
 800bc0c:	9305      	str	r3, [sp, #20]
 800bc0e:	2301      	movs	r3, #1
 800bc10:	930a      	str	r3, [sp, #40]	; 0x28
 800bc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	f47f af70 	bne.w	800bafa <_dtoa_r+0x6ea>
 800bc1a:	2001      	movs	r0, #1
 800bc1c:	e775      	b.n	800bb0a <_dtoa_r+0x6fa>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e7f6      	b.n	800bc10 <_dtoa_r+0x800>
 800bc22:	9b02      	ldr	r3, [sp, #8]
 800bc24:	e7f4      	b.n	800bc10 <_dtoa_r+0x800>
 800bc26:	920a      	str	r2, [sp, #40]	; 0x28
 800bc28:	e7f3      	b.n	800bc12 <_dtoa_r+0x802>
 800bc2a:	d082      	beq.n	800bb32 <_dtoa_r+0x722>
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	301c      	adds	r0, #28
 800bc30:	e778      	b.n	800bb24 <_dtoa_r+0x714>
 800bc32:	f1b9 0f00 	cmp.w	r9, #0
 800bc36:	dc37      	bgt.n	800bca8 <_dtoa_r+0x898>
 800bc38:	9b06      	ldr	r3, [sp, #24]
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	dd34      	ble.n	800bca8 <_dtoa_r+0x898>
 800bc3e:	46ca      	mov	sl, r9
 800bc40:	f1ba 0f00 	cmp.w	sl, #0
 800bc44:	d10d      	bne.n	800bc62 <_dtoa_r+0x852>
 800bc46:	4621      	mov	r1, r4
 800bc48:	4653      	mov	r3, sl
 800bc4a:	2205      	movs	r2, #5
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f000 fd41 	bl	800c6d4 <__multadd>
 800bc52:	4601      	mov	r1, r0
 800bc54:	4604      	mov	r4, r0
 800bc56:	4628      	mov	r0, r5
 800bc58:	f000 ffa6 	bl	800cba8 <__mcmp>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	f73f adeb 	bgt.w	800b838 <_dtoa_r+0x428>
 800bc62:	9b08      	ldr	r3, [sp, #32]
 800bc64:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc68:	ea6f 0b03 	mvn.w	fp, r3
 800bc6c:	f04f 0900 	mov.w	r9, #0
 800bc70:	4621      	mov	r1, r4
 800bc72:	4630      	mov	r0, r6
 800bc74:	f000 fd0c 	bl	800c690 <_Bfree>
 800bc78:	2f00      	cmp	r7, #0
 800bc7a:	f43f aea8 	beq.w	800b9ce <_dtoa_r+0x5be>
 800bc7e:	f1b9 0f00 	cmp.w	r9, #0
 800bc82:	d005      	beq.n	800bc90 <_dtoa_r+0x880>
 800bc84:	45b9      	cmp	r9, r7
 800bc86:	d003      	beq.n	800bc90 <_dtoa_r+0x880>
 800bc88:	4649      	mov	r1, r9
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f000 fd00 	bl	800c690 <_Bfree>
 800bc90:	4639      	mov	r1, r7
 800bc92:	4630      	mov	r0, r6
 800bc94:	f000 fcfc 	bl	800c690 <_Bfree>
 800bc98:	e699      	b.n	800b9ce <_dtoa_r+0x5be>
 800bc9a:	2400      	movs	r4, #0
 800bc9c:	4627      	mov	r7, r4
 800bc9e:	e7e0      	b.n	800bc62 <_dtoa_r+0x852>
 800bca0:	46bb      	mov	fp, r7
 800bca2:	4604      	mov	r4, r0
 800bca4:	4607      	mov	r7, r0
 800bca6:	e5c7      	b.n	800b838 <_dtoa_r+0x428>
 800bca8:	9b07      	ldr	r3, [sp, #28]
 800bcaa:	46ca      	mov	sl, r9
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 8100 	beq.w	800beb2 <_dtoa_r+0xaa2>
 800bcb2:	f1b8 0f00 	cmp.w	r8, #0
 800bcb6:	dd05      	ble.n	800bcc4 <_dtoa_r+0x8b4>
 800bcb8:	4639      	mov	r1, r7
 800bcba:	4642      	mov	r2, r8
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f000 ff03 	bl	800cac8 <__lshift>
 800bcc2:	4607      	mov	r7, r0
 800bcc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d05d      	beq.n	800bd86 <_dtoa_r+0x976>
 800bcca:	6879      	ldr	r1, [r7, #4]
 800bccc:	4630      	mov	r0, r6
 800bcce:	f000 fc9f 	bl	800c610 <_Balloc>
 800bcd2:	4680      	mov	r8, r0
 800bcd4:	b928      	cbnz	r0, 800bce2 <_dtoa_r+0x8d2>
 800bcd6:	4b82      	ldr	r3, [pc, #520]	; (800bee0 <_dtoa_r+0xad0>)
 800bcd8:	4602      	mov	r2, r0
 800bcda:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcde:	f7ff bbaf 	b.w	800b440 <_dtoa_r+0x30>
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	3202      	adds	r2, #2
 800bce6:	0092      	lsls	r2, r2, #2
 800bce8:	f107 010c 	add.w	r1, r7, #12
 800bcec:	300c      	adds	r0, #12
 800bcee:	f7fd fd35 	bl	800975c <memcpy>
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	4641      	mov	r1, r8
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f000 fee6 	bl	800cac8 <__lshift>
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	9b01      	ldr	r3, [sp, #4]
 800bd04:	4453      	add	r3, sl
 800bd06:	9308      	str	r3, [sp, #32]
 800bd08:	9b02      	ldr	r3, [sp, #8]
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	46b9      	mov	r9, r7
 800bd10:	9307      	str	r3, [sp, #28]
 800bd12:	4607      	mov	r7, r0
 800bd14:	9b04      	ldr	r3, [sp, #16]
 800bd16:	4621      	mov	r1, r4
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	9302      	str	r3, [sp, #8]
 800bd1e:	f7ff faeb 	bl	800b2f8 <quorem>
 800bd22:	4603      	mov	r3, r0
 800bd24:	3330      	adds	r3, #48	; 0x30
 800bd26:	9005      	str	r0, [sp, #20]
 800bd28:	4649      	mov	r1, r9
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd2e:	f000 ff3b 	bl	800cba8 <__mcmp>
 800bd32:	463a      	mov	r2, r7
 800bd34:	4682      	mov	sl, r0
 800bd36:	4621      	mov	r1, r4
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f000 ff51 	bl	800cbe0 <__mdiff>
 800bd3e:	68c2      	ldr	r2, [r0, #12]
 800bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd42:	4680      	mov	r8, r0
 800bd44:	bb0a      	cbnz	r2, 800bd8a <_dtoa_r+0x97a>
 800bd46:	4601      	mov	r1, r0
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f000 ff2d 	bl	800cba8 <__mcmp>
 800bd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd50:	4602      	mov	r2, r0
 800bd52:	4641      	mov	r1, r8
 800bd54:	4630      	mov	r0, r6
 800bd56:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800bd5a:	f000 fc99 	bl	800c690 <_Bfree>
 800bd5e:	9b06      	ldr	r3, [sp, #24]
 800bd60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd62:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bd66:	ea43 0102 	orr.w	r1, r3, r2
 800bd6a:	9b07      	ldr	r3, [sp, #28]
 800bd6c:	430b      	orrs	r3, r1
 800bd6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd70:	d10d      	bne.n	800bd8e <_dtoa_r+0x97e>
 800bd72:	2b39      	cmp	r3, #57	; 0x39
 800bd74:	d029      	beq.n	800bdca <_dtoa_r+0x9ba>
 800bd76:	f1ba 0f00 	cmp.w	sl, #0
 800bd7a:	dd01      	ble.n	800bd80 <_dtoa_r+0x970>
 800bd7c:	9b05      	ldr	r3, [sp, #20]
 800bd7e:	3331      	adds	r3, #49	; 0x31
 800bd80:	9a02      	ldr	r2, [sp, #8]
 800bd82:	7013      	strb	r3, [r2, #0]
 800bd84:	e774      	b.n	800bc70 <_dtoa_r+0x860>
 800bd86:	4638      	mov	r0, r7
 800bd88:	e7b8      	b.n	800bcfc <_dtoa_r+0x8ec>
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	e7e1      	b.n	800bd52 <_dtoa_r+0x942>
 800bd8e:	f1ba 0f00 	cmp.w	sl, #0
 800bd92:	db06      	blt.n	800bda2 <_dtoa_r+0x992>
 800bd94:	9906      	ldr	r1, [sp, #24]
 800bd96:	ea41 0a0a 	orr.w	sl, r1, sl
 800bd9a:	9907      	ldr	r1, [sp, #28]
 800bd9c:	ea5a 0101 	orrs.w	r1, sl, r1
 800bda0:	d120      	bne.n	800bde4 <_dtoa_r+0x9d4>
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	ddec      	ble.n	800bd80 <_dtoa_r+0x970>
 800bda6:	4629      	mov	r1, r5
 800bda8:	2201      	movs	r2, #1
 800bdaa:	4630      	mov	r0, r6
 800bdac:	9304      	str	r3, [sp, #16]
 800bdae:	f000 fe8b 	bl	800cac8 <__lshift>
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	f000 fef7 	bl	800cba8 <__mcmp>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	9b04      	ldr	r3, [sp, #16]
 800bdbe:	dc02      	bgt.n	800bdc6 <_dtoa_r+0x9b6>
 800bdc0:	d1de      	bne.n	800bd80 <_dtoa_r+0x970>
 800bdc2:	07da      	lsls	r2, r3, #31
 800bdc4:	d5dc      	bpl.n	800bd80 <_dtoa_r+0x970>
 800bdc6:	2b39      	cmp	r3, #57	; 0x39
 800bdc8:	d1d8      	bne.n	800bd7c <_dtoa_r+0x96c>
 800bdca:	9a02      	ldr	r2, [sp, #8]
 800bdcc:	2339      	movs	r3, #57	; 0x39
 800bdce:	7013      	strb	r3, [r2, #0]
 800bdd0:	4643      	mov	r3, r8
 800bdd2:	4698      	mov	r8, r3
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800bdda:	2a39      	cmp	r2, #57	; 0x39
 800bddc:	d051      	beq.n	800be82 <_dtoa_r+0xa72>
 800bdde:	3201      	adds	r2, #1
 800bde0:	701a      	strb	r2, [r3, #0]
 800bde2:	e745      	b.n	800bc70 <_dtoa_r+0x860>
 800bde4:	2a00      	cmp	r2, #0
 800bde6:	dd03      	ble.n	800bdf0 <_dtoa_r+0x9e0>
 800bde8:	2b39      	cmp	r3, #57	; 0x39
 800bdea:	d0ee      	beq.n	800bdca <_dtoa_r+0x9ba>
 800bdec:	3301      	adds	r3, #1
 800bdee:	e7c7      	b.n	800bd80 <_dtoa_r+0x970>
 800bdf0:	9a04      	ldr	r2, [sp, #16]
 800bdf2:	9908      	ldr	r1, [sp, #32]
 800bdf4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bdf8:	428a      	cmp	r2, r1
 800bdfa:	d02b      	beq.n	800be54 <_dtoa_r+0xa44>
 800bdfc:	4629      	mov	r1, r5
 800bdfe:	2300      	movs	r3, #0
 800be00:	220a      	movs	r2, #10
 800be02:	4630      	mov	r0, r6
 800be04:	f000 fc66 	bl	800c6d4 <__multadd>
 800be08:	45b9      	cmp	r9, r7
 800be0a:	4605      	mov	r5, r0
 800be0c:	f04f 0300 	mov.w	r3, #0
 800be10:	f04f 020a 	mov.w	r2, #10
 800be14:	4649      	mov	r1, r9
 800be16:	4630      	mov	r0, r6
 800be18:	d107      	bne.n	800be2a <_dtoa_r+0xa1a>
 800be1a:	f000 fc5b 	bl	800c6d4 <__multadd>
 800be1e:	4681      	mov	r9, r0
 800be20:	4607      	mov	r7, r0
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	3301      	adds	r3, #1
 800be26:	9304      	str	r3, [sp, #16]
 800be28:	e774      	b.n	800bd14 <_dtoa_r+0x904>
 800be2a:	f000 fc53 	bl	800c6d4 <__multadd>
 800be2e:	4639      	mov	r1, r7
 800be30:	4681      	mov	r9, r0
 800be32:	2300      	movs	r3, #0
 800be34:	220a      	movs	r2, #10
 800be36:	4630      	mov	r0, r6
 800be38:	f000 fc4c 	bl	800c6d4 <__multadd>
 800be3c:	4607      	mov	r7, r0
 800be3e:	e7f0      	b.n	800be22 <_dtoa_r+0xa12>
 800be40:	f1ba 0f00 	cmp.w	sl, #0
 800be44:	9a01      	ldr	r2, [sp, #4]
 800be46:	bfcc      	ite	gt
 800be48:	46d0      	movgt	r8, sl
 800be4a:	f04f 0801 	movle.w	r8, #1
 800be4e:	4490      	add	r8, r2
 800be50:	f04f 0900 	mov.w	r9, #0
 800be54:	4629      	mov	r1, r5
 800be56:	2201      	movs	r2, #1
 800be58:	4630      	mov	r0, r6
 800be5a:	9302      	str	r3, [sp, #8]
 800be5c:	f000 fe34 	bl	800cac8 <__lshift>
 800be60:	4621      	mov	r1, r4
 800be62:	4605      	mov	r5, r0
 800be64:	f000 fea0 	bl	800cba8 <__mcmp>
 800be68:	2800      	cmp	r0, #0
 800be6a:	dcb1      	bgt.n	800bdd0 <_dtoa_r+0x9c0>
 800be6c:	d102      	bne.n	800be74 <_dtoa_r+0xa64>
 800be6e:	9b02      	ldr	r3, [sp, #8]
 800be70:	07db      	lsls	r3, r3, #31
 800be72:	d4ad      	bmi.n	800bdd0 <_dtoa_r+0x9c0>
 800be74:	4643      	mov	r3, r8
 800be76:	4698      	mov	r8, r3
 800be78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be7c:	2a30      	cmp	r2, #48	; 0x30
 800be7e:	d0fa      	beq.n	800be76 <_dtoa_r+0xa66>
 800be80:	e6f6      	b.n	800bc70 <_dtoa_r+0x860>
 800be82:	9a01      	ldr	r2, [sp, #4]
 800be84:	429a      	cmp	r2, r3
 800be86:	d1a4      	bne.n	800bdd2 <_dtoa_r+0x9c2>
 800be88:	f10b 0b01 	add.w	fp, fp, #1
 800be8c:	2331      	movs	r3, #49	; 0x31
 800be8e:	e778      	b.n	800bd82 <_dtoa_r+0x972>
 800be90:	4b14      	ldr	r3, [pc, #80]	; (800bee4 <_dtoa_r+0xad4>)
 800be92:	f7ff bb27 	b.w	800b4e4 <_dtoa_r+0xd4>
 800be96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f47f ab03 	bne.w	800b4a4 <_dtoa_r+0x94>
 800be9e:	4b12      	ldr	r3, [pc, #72]	; (800bee8 <_dtoa_r+0xad8>)
 800bea0:	f7ff bb20 	b.w	800b4e4 <_dtoa_r+0xd4>
 800bea4:	f1ba 0f00 	cmp.w	sl, #0
 800bea8:	dc03      	bgt.n	800beb2 <_dtoa_r+0xaa2>
 800beaa:	9b06      	ldr	r3, [sp, #24]
 800beac:	2b02      	cmp	r3, #2
 800beae:	f73f aec7 	bgt.w	800bc40 <_dtoa_r+0x830>
 800beb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800beb6:	4621      	mov	r1, r4
 800beb8:	4628      	mov	r0, r5
 800beba:	f7ff fa1d 	bl	800b2f8 <quorem>
 800bebe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bec2:	f808 3b01 	strb.w	r3, [r8], #1
 800bec6:	9a01      	ldr	r2, [sp, #4]
 800bec8:	eba8 0202 	sub.w	r2, r8, r2
 800becc:	4592      	cmp	sl, r2
 800bece:	ddb7      	ble.n	800be40 <_dtoa_r+0xa30>
 800bed0:	4629      	mov	r1, r5
 800bed2:	2300      	movs	r3, #0
 800bed4:	220a      	movs	r2, #10
 800bed6:	4630      	mov	r0, r6
 800bed8:	f000 fbfc 	bl	800c6d4 <__multadd>
 800bedc:	4605      	mov	r5, r0
 800bede:	e7ea      	b.n	800beb6 <_dtoa_r+0xaa6>
 800bee0:	0800e520 	.word	0x0800e520
 800bee4:	0800e324 	.word	0x0800e324
 800bee8:	0800e4a1 	.word	0x0800e4a1

0800beec <rshift>:
 800beec:	6903      	ldr	r3, [r0, #16]
 800beee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bef2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bef6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800befa:	f100 0414 	add.w	r4, r0, #20
 800befe:	dd45      	ble.n	800bf8c <rshift+0xa0>
 800bf00:	f011 011f 	ands.w	r1, r1, #31
 800bf04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bf08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bf0c:	d10c      	bne.n	800bf28 <rshift+0x3c>
 800bf0e:	f100 0710 	add.w	r7, r0, #16
 800bf12:	4629      	mov	r1, r5
 800bf14:	42b1      	cmp	r1, r6
 800bf16:	d334      	bcc.n	800bf82 <rshift+0x96>
 800bf18:	1a9b      	subs	r3, r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	1eea      	subs	r2, r5, #3
 800bf1e:	4296      	cmp	r6, r2
 800bf20:	bf38      	it	cc
 800bf22:	2300      	movcc	r3, #0
 800bf24:	4423      	add	r3, r4
 800bf26:	e015      	b.n	800bf54 <rshift+0x68>
 800bf28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bf2c:	f1c1 0820 	rsb	r8, r1, #32
 800bf30:	40cf      	lsrs	r7, r1
 800bf32:	f105 0e04 	add.w	lr, r5, #4
 800bf36:	46a1      	mov	r9, r4
 800bf38:	4576      	cmp	r6, lr
 800bf3a:	46f4      	mov	ip, lr
 800bf3c:	d815      	bhi.n	800bf6a <rshift+0x7e>
 800bf3e:	1a9a      	subs	r2, r3, r2
 800bf40:	0092      	lsls	r2, r2, #2
 800bf42:	3a04      	subs	r2, #4
 800bf44:	3501      	adds	r5, #1
 800bf46:	42ae      	cmp	r6, r5
 800bf48:	bf38      	it	cc
 800bf4a:	2200      	movcc	r2, #0
 800bf4c:	18a3      	adds	r3, r4, r2
 800bf4e:	50a7      	str	r7, [r4, r2]
 800bf50:	b107      	cbz	r7, 800bf54 <rshift+0x68>
 800bf52:	3304      	adds	r3, #4
 800bf54:	1b1a      	subs	r2, r3, r4
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bf5c:	bf08      	it	eq
 800bf5e:	2300      	moveq	r3, #0
 800bf60:	6102      	str	r2, [r0, #16]
 800bf62:	bf08      	it	eq
 800bf64:	6143      	streq	r3, [r0, #20]
 800bf66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf6a:	f8dc c000 	ldr.w	ip, [ip]
 800bf6e:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf72:	ea4c 0707 	orr.w	r7, ip, r7
 800bf76:	f849 7b04 	str.w	r7, [r9], #4
 800bf7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf7e:	40cf      	lsrs	r7, r1
 800bf80:	e7da      	b.n	800bf38 <rshift+0x4c>
 800bf82:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf86:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf8a:	e7c3      	b.n	800bf14 <rshift+0x28>
 800bf8c:	4623      	mov	r3, r4
 800bf8e:	e7e1      	b.n	800bf54 <rshift+0x68>

0800bf90 <__hexdig_fun>:
 800bf90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bf94:	2b09      	cmp	r3, #9
 800bf96:	d802      	bhi.n	800bf9e <__hexdig_fun+0xe>
 800bf98:	3820      	subs	r0, #32
 800bf9a:	b2c0      	uxtb	r0, r0
 800bf9c:	4770      	bx	lr
 800bf9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bfa2:	2b05      	cmp	r3, #5
 800bfa4:	d801      	bhi.n	800bfaa <__hexdig_fun+0x1a>
 800bfa6:	3847      	subs	r0, #71	; 0x47
 800bfa8:	e7f7      	b.n	800bf9a <__hexdig_fun+0xa>
 800bfaa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	d801      	bhi.n	800bfb6 <__hexdig_fun+0x26>
 800bfb2:	3827      	subs	r0, #39	; 0x27
 800bfb4:	e7f1      	b.n	800bf9a <__hexdig_fun+0xa>
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	4770      	bx	lr
	...

0800bfbc <__gethex>:
 800bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	ed2d 8b02 	vpush	{d8}
 800bfc4:	b089      	sub	sp, #36	; 0x24
 800bfc6:	ee08 0a10 	vmov	s16, r0
 800bfca:	9304      	str	r3, [sp, #16]
 800bfcc:	4bb4      	ldr	r3, [pc, #720]	; (800c2a0 <__gethex+0x2e4>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	468b      	mov	fp, r1
 800bfd6:	4690      	mov	r8, r2
 800bfd8:	f7f4 f932 	bl	8000240 <strlen>
 800bfdc:	9b01      	ldr	r3, [sp, #4]
 800bfde:	f8db 2000 	ldr.w	r2, [fp]
 800bfe2:	4403      	add	r3, r0
 800bfe4:	4682      	mov	sl, r0
 800bfe6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bfea:	9305      	str	r3, [sp, #20]
 800bfec:	1c93      	adds	r3, r2, #2
 800bfee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bff2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bff6:	32fe      	adds	r2, #254	; 0xfe
 800bff8:	18d1      	adds	r1, r2, r3
 800bffa:	461f      	mov	r7, r3
 800bffc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c000:	9100      	str	r1, [sp, #0]
 800c002:	2830      	cmp	r0, #48	; 0x30
 800c004:	d0f8      	beq.n	800bff8 <__gethex+0x3c>
 800c006:	f7ff ffc3 	bl	800bf90 <__hexdig_fun>
 800c00a:	4604      	mov	r4, r0
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d13a      	bne.n	800c086 <__gethex+0xca>
 800c010:	9901      	ldr	r1, [sp, #4]
 800c012:	4652      	mov	r2, sl
 800c014:	4638      	mov	r0, r7
 800c016:	f001 f933 	bl	800d280 <strncmp>
 800c01a:	4605      	mov	r5, r0
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d168      	bne.n	800c0f2 <__gethex+0x136>
 800c020:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c024:	eb07 060a 	add.w	r6, r7, sl
 800c028:	f7ff ffb2 	bl	800bf90 <__hexdig_fun>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d062      	beq.n	800c0f6 <__gethex+0x13a>
 800c030:	4633      	mov	r3, r6
 800c032:	7818      	ldrb	r0, [r3, #0]
 800c034:	2830      	cmp	r0, #48	; 0x30
 800c036:	461f      	mov	r7, r3
 800c038:	f103 0301 	add.w	r3, r3, #1
 800c03c:	d0f9      	beq.n	800c032 <__gethex+0x76>
 800c03e:	f7ff ffa7 	bl	800bf90 <__hexdig_fun>
 800c042:	2301      	movs	r3, #1
 800c044:	fab0 f480 	clz	r4, r0
 800c048:	0964      	lsrs	r4, r4, #5
 800c04a:	4635      	mov	r5, r6
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	463a      	mov	r2, r7
 800c050:	4616      	mov	r6, r2
 800c052:	3201      	adds	r2, #1
 800c054:	7830      	ldrb	r0, [r6, #0]
 800c056:	f7ff ff9b 	bl	800bf90 <__hexdig_fun>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d1f8      	bne.n	800c050 <__gethex+0x94>
 800c05e:	9901      	ldr	r1, [sp, #4]
 800c060:	4652      	mov	r2, sl
 800c062:	4630      	mov	r0, r6
 800c064:	f001 f90c 	bl	800d280 <strncmp>
 800c068:	b980      	cbnz	r0, 800c08c <__gethex+0xd0>
 800c06a:	b94d      	cbnz	r5, 800c080 <__gethex+0xc4>
 800c06c:	eb06 050a 	add.w	r5, r6, sl
 800c070:	462a      	mov	r2, r5
 800c072:	4616      	mov	r6, r2
 800c074:	3201      	adds	r2, #1
 800c076:	7830      	ldrb	r0, [r6, #0]
 800c078:	f7ff ff8a 	bl	800bf90 <__hexdig_fun>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d1f8      	bne.n	800c072 <__gethex+0xb6>
 800c080:	1bad      	subs	r5, r5, r6
 800c082:	00ad      	lsls	r5, r5, #2
 800c084:	e004      	b.n	800c090 <__gethex+0xd4>
 800c086:	2400      	movs	r4, #0
 800c088:	4625      	mov	r5, r4
 800c08a:	e7e0      	b.n	800c04e <__gethex+0x92>
 800c08c:	2d00      	cmp	r5, #0
 800c08e:	d1f7      	bne.n	800c080 <__gethex+0xc4>
 800c090:	7833      	ldrb	r3, [r6, #0]
 800c092:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c096:	2b50      	cmp	r3, #80	; 0x50
 800c098:	d13b      	bne.n	800c112 <__gethex+0x156>
 800c09a:	7873      	ldrb	r3, [r6, #1]
 800c09c:	2b2b      	cmp	r3, #43	; 0x2b
 800c09e:	d02c      	beq.n	800c0fa <__gethex+0x13e>
 800c0a0:	2b2d      	cmp	r3, #45	; 0x2d
 800c0a2:	d02e      	beq.n	800c102 <__gethex+0x146>
 800c0a4:	1c71      	adds	r1, r6, #1
 800c0a6:	f04f 0900 	mov.w	r9, #0
 800c0aa:	7808      	ldrb	r0, [r1, #0]
 800c0ac:	f7ff ff70 	bl	800bf90 <__hexdig_fun>
 800c0b0:	1e43      	subs	r3, r0, #1
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b18      	cmp	r3, #24
 800c0b6:	d82c      	bhi.n	800c112 <__gethex+0x156>
 800c0b8:	f1a0 0210 	sub.w	r2, r0, #16
 800c0bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c0c0:	f7ff ff66 	bl	800bf90 <__hexdig_fun>
 800c0c4:	1e43      	subs	r3, r0, #1
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	2b18      	cmp	r3, #24
 800c0ca:	d91d      	bls.n	800c108 <__gethex+0x14c>
 800c0cc:	f1b9 0f00 	cmp.w	r9, #0
 800c0d0:	d000      	beq.n	800c0d4 <__gethex+0x118>
 800c0d2:	4252      	negs	r2, r2
 800c0d4:	4415      	add	r5, r2
 800c0d6:	f8cb 1000 	str.w	r1, [fp]
 800c0da:	b1e4      	cbz	r4, 800c116 <__gethex+0x15a>
 800c0dc:	9b00      	ldr	r3, [sp, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	bf14      	ite	ne
 800c0e2:	2700      	movne	r7, #0
 800c0e4:	2706      	moveq	r7, #6
 800c0e6:	4638      	mov	r0, r7
 800c0e8:	b009      	add	sp, #36	; 0x24
 800c0ea:	ecbd 8b02 	vpop	{d8}
 800c0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f2:	463e      	mov	r6, r7
 800c0f4:	4625      	mov	r5, r4
 800c0f6:	2401      	movs	r4, #1
 800c0f8:	e7ca      	b.n	800c090 <__gethex+0xd4>
 800c0fa:	f04f 0900 	mov.w	r9, #0
 800c0fe:	1cb1      	adds	r1, r6, #2
 800c100:	e7d3      	b.n	800c0aa <__gethex+0xee>
 800c102:	f04f 0901 	mov.w	r9, #1
 800c106:	e7fa      	b.n	800c0fe <__gethex+0x142>
 800c108:	230a      	movs	r3, #10
 800c10a:	fb03 0202 	mla	r2, r3, r2, r0
 800c10e:	3a10      	subs	r2, #16
 800c110:	e7d4      	b.n	800c0bc <__gethex+0x100>
 800c112:	4631      	mov	r1, r6
 800c114:	e7df      	b.n	800c0d6 <__gethex+0x11a>
 800c116:	1bf3      	subs	r3, r6, r7
 800c118:	3b01      	subs	r3, #1
 800c11a:	4621      	mov	r1, r4
 800c11c:	2b07      	cmp	r3, #7
 800c11e:	dc0b      	bgt.n	800c138 <__gethex+0x17c>
 800c120:	ee18 0a10 	vmov	r0, s16
 800c124:	f000 fa74 	bl	800c610 <_Balloc>
 800c128:	4604      	mov	r4, r0
 800c12a:	b940      	cbnz	r0, 800c13e <__gethex+0x182>
 800c12c:	4b5d      	ldr	r3, [pc, #372]	; (800c2a4 <__gethex+0x2e8>)
 800c12e:	4602      	mov	r2, r0
 800c130:	21de      	movs	r1, #222	; 0xde
 800c132:	485d      	ldr	r0, [pc, #372]	; (800c2a8 <__gethex+0x2ec>)
 800c134:	f001 f8c6 	bl	800d2c4 <__assert_func>
 800c138:	3101      	adds	r1, #1
 800c13a:	105b      	asrs	r3, r3, #1
 800c13c:	e7ee      	b.n	800c11c <__gethex+0x160>
 800c13e:	f100 0914 	add.w	r9, r0, #20
 800c142:	f04f 0b00 	mov.w	fp, #0
 800c146:	f1ca 0301 	rsb	r3, sl, #1
 800c14a:	f8cd 9008 	str.w	r9, [sp, #8]
 800c14e:	f8cd b000 	str.w	fp, [sp]
 800c152:	9306      	str	r3, [sp, #24]
 800c154:	42b7      	cmp	r7, r6
 800c156:	d340      	bcc.n	800c1da <__gethex+0x21e>
 800c158:	9802      	ldr	r0, [sp, #8]
 800c15a:	9b00      	ldr	r3, [sp, #0]
 800c15c:	f840 3b04 	str.w	r3, [r0], #4
 800c160:	eba0 0009 	sub.w	r0, r0, r9
 800c164:	1080      	asrs	r0, r0, #2
 800c166:	0146      	lsls	r6, r0, #5
 800c168:	6120      	str	r0, [r4, #16]
 800c16a:	4618      	mov	r0, r3
 800c16c:	f000 fb42 	bl	800c7f4 <__hi0bits>
 800c170:	1a30      	subs	r0, r6, r0
 800c172:	f8d8 6000 	ldr.w	r6, [r8]
 800c176:	42b0      	cmp	r0, r6
 800c178:	dd63      	ble.n	800c242 <__gethex+0x286>
 800c17a:	1b87      	subs	r7, r0, r6
 800c17c:	4639      	mov	r1, r7
 800c17e:	4620      	mov	r0, r4
 800c180:	f000 fee3 	bl	800cf4a <__any_on>
 800c184:	4682      	mov	sl, r0
 800c186:	b1a8      	cbz	r0, 800c1b4 <__gethex+0x1f8>
 800c188:	1e7b      	subs	r3, r7, #1
 800c18a:	1159      	asrs	r1, r3, #5
 800c18c:	f003 021f 	and.w	r2, r3, #31
 800c190:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c194:	f04f 0a01 	mov.w	sl, #1
 800c198:	fa0a f202 	lsl.w	r2, sl, r2
 800c19c:	420a      	tst	r2, r1
 800c19e:	d009      	beq.n	800c1b4 <__gethex+0x1f8>
 800c1a0:	4553      	cmp	r3, sl
 800c1a2:	dd05      	ble.n	800c1b0 <__gethex+0x1f4>
 800c1a4:	1eb9      	subs	r1, r7, #2
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 fecf 	bl	800cf4a <__any_on>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d145      	bne.n	800c23c <__gethex+0x280>
 800c1b0:	f04f 0a02 	mov.w	sl, #2
 800c1b4:	4639      	mov	r1, r7
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f7ff fe98 	bl	800beec <rshift>
 800c1bc:	443d      	add	r5, r7
 800c1be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c1c2:	42ab      	cmp	r3, r5
 800c1c4:	da4c      	bge.n	800c260 <__gethex+0x2a4>
 800c1c6:	ee18 0a10 	vmov	r0, s16
 800c1ca:	4621      	mov	r1, r4
 800c1cc:	f000 fa60 	bl	800c690 <_Bfree>
 800c1d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	27a3      	movs	r7, #163	; 0xa3
 800c1d8:	e785      	b.n	800c0e6 <__gethex+0x12a>
 800c1da:	1e73      	subs	r3, r6, #1
 800c1dc:	9a05      	ldr	r2, [sp, #20]
 800c1de:	9303      	str	r3, [sp, #12]
 800c1e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d019      	beq.n	800c21c <__gethex+0x260>
 800c1e8:	f1bb 0f20 	cmp.w	fp, #32
 800c1ec:	d107      	bne.n	800c1fe <__gethex+0x242>
 800c1ee:	9b02      	ldr	r3, [sp, #8]
 800c1f0:	9a00      	ldr	r2, [sp, #0]
 800c1f2:	f843 2b04 	str.w	r2, [r3], #4
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	469b      	mov	fp, r3
 800c1fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c202:	f7ff fec5 	bl	800bf90 <__hexdig_fun>
 800c206:	9b00      	ldr	r3, [sp, #0]
 800c208:	f000 000f 	and.w	r0, r0, #15
 800c20c:	fa00 f00b 	lsl.w	r0, r0, fp
 800c210:	4303      	orrs	r3, r0
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	f10b 0b04 	add.w	fp, fp, #4
 800c218:	9b03      	ldr	r3, [sp, #12]
 800c21a:	e00d      	b.n	800c238 <__gethex+0x27c>
 800c21c:	9b03      	ldr	r3, [sp, #12]
 800c21e:	9a06      	ldr	r2, [sp, #24]
 800c220:	4413      	add	r3, r2
 800c222:	42bb      	cmp	r3, r7
 800c224:	d3e0      	bcc.n	800c1e8 <__gethex+0x22c>
 800c226:	4618      	mov	r0, r3
 800c228:	9901      	ldr	r1, [sp, #4]
 800c22a:	9307      	str	r3, [sp, #28]
 800c22c:	4652      	mov	r2, sl
 800c22e:	f001 f827 	bl	800d280 <strncmp>
 800c232:	9b07      	ldr	r3, [sp, #28]
 800c234:	2800      	cmp	r0, #0
 800c236:	d1d7      	bne.n	800c1e8 <__gethex+0x22c>
 800c238:	461e      	mov	r6, r3
 800c23a:	e78b      	b.n	800c154 <__gethex+0x198>
 800c23c:	f04f 0a03 	mov.w	sl, #3
 800c240:	e7b8      	b.n	800c1b4 <__gethex+0x1f8>
 800c242:	da0a      	bge.n	800c25a <__gethex+0x29e>
 800c244:	1a37      	subs	r7, r6, r0
 800c246:	4621      	mov	r1, r4
 800c248:	ee18 0a10 	vmov	r0, s16
 800c24c:	463a      	mov	r2, r7
 800c24e:	f000 fc3b 	bl	800cac8 <__lshift>
 800c252:	1bed      	subs	r5, r5, r7
 800c254:	4604      	mov	r4, r0
 800c256:	f100 0914 	add.w	r9, r0, #20
 800c25a:	f04f 0a00 	mov.w	sl, #0
 800c25e:	e7ae      	b.n	800c1be <__gethex+0x202>
 800c260:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c264:	42a8      	cmp	r0, r5
 800c266:	dd72      	ble.n	800c34e <__gethex+0x392>
 800c268:	1b45      	subs	r5, r0, r5
 800c26a:	42ae      	cmp	r6, r5
 800c26c:	dc36      	bgt.n	800c2dc <__gethex+0x320>
 800c26e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c272:	2b02      	cmp	r3, #2
 800c274:	d02a      	beq.n	800c2cc <__gethex+0x310>
 800c276:	2b03      	cmp	r3, #3
 800c278:	d02c      	beq.n	800c2d4 <__gethex+0x318>
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d11c      	bne.n	800c2b8 <__gethex+0x2fc>
 800c27e:	42ae      	cmp	r6, r5
 800c280:	d11a      	bne.n	800c2b8 <__gethex+0x2fc>
 800c282:	2e01      	cmp	r6, #1
 800c284:	d112      	bne.n	800c2ac <__gethex+0x2f0>
 800c286:	9a04      	ldr	r2, [sp, #16]
 800c288:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c28c:	6013      	str	r3, [r2, #0]
 800c28e:	2301      	movs	r3, #1
 800c290:	6123      	str	r3, [r4, #16]
 800c292:	f8c9 3000 	str.w	r3, [r9]
 800c296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c298:	2762      	movs	r7, #98	; 0x62
 800c29a:	601c      	str	r4, [r3, #0]
 800c29c:	e723      	b.n	800c0e6 <__gethex+0x12a>
 800c29e:	bf00      	nop
 800c2a0:	0800e598 	.word	0x0800e598
 800c2a4:	0800e520 	.word	0x0800e520
 800c2a8:	0800e531 	.word	0x0800e531
 800c2ac:	1e71      	subs	r1, r6, #1
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 fe4b 	bl	800cf4a <__any_on>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	d1e6      	bne.n	800c286 <__gethex+0x2ca>
 800c2b8:	ee18 0a10 	vmov	r0, s16
 800c2bc:	4621      	mov	r1, r4
 800c2be:	f000 f9e7 	bl	800c690 <_Bfree>
 800c2c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	6013      	str	r3, [r2, #0]
 800c2c8:	2750      	movs	r7, #80	; 0x50
 800c2ca:	e70c      	b.n	800c0e6 <__gethex+0x12a>
 800c2cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f2      	bne.n	800c2b8 <__gethex+0x2fc>
 800c2d2:	e7d8      	b.n	800c286 <__gethex+0x2ca>
 800c2d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1d5      	bne.n	800c286 <__gethex+0x2ca>
 800c2da:	e7ed      	b.n	800c2b8 <__gethex+0x2fc>
 800c2dc:	1e6f      	subs	r7, r5, #1
 800c2de:	f1ba 0f00 	cmp.w	sl, #0
 800c2e2:	d131      	bne.n	800c348 <__gethex+0x38c>
 800c2e4:	b127      	cbz	r7, 800c2f0 <__gethex+0x334>
 800c2e6:	4639      	mov	r1, r7
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f000 fe2e 	bl	800cf4a <__any_on>
 800c2ee:	4682      	mov	sl, r0
 800c2f0:	117b      	asrs	r3, r7, #5
 800c2f2:	2101      	movs	r1, #1
 800c2f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c2f8:	f007 071f 	and.w	r7, r7, #31
 800c2fc:	fa01 f707 	lsl.w	r7, r1, r7
 800c300:	421f      	tst	r7, r3
 800c302:	4629      	mov	r1, r5
 800c304:	4620      	mov	r0, r4
 800c306:	bf18      	it	ne
 800c308:	f04a 0a02 	orrne.w	sl, sl, #2
 800c30c:	1b76      	subs	r6, r6, r5
 800c30e:	f7ff fded 	bl	800beec <rshift>
 800c312:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c316:	2702      	movs	r7, #2
 800c318:	f1ba 0f00 	cmp.w	sl, #0
 800c31c:	d048      	beq.n	800c3b0 <__gethex+0x3f4>
 800c31e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c322:	2b02      	cmp	r3, #2
 800c324:	d015      	beq.n	800c352 <__gethex+0x396>
 800c326:	2b03      	cmp	r3, #3
 800c328:	d017      	beq.n	800c35a <__gethex+0x39e>
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d109      	bne.n	800c342 <__gethex+0x386>
 800c32e:	f01a 0f02 	tst.w	sl, #2
 800c332:	d006      	beq.n	800c342 <__gethex+0x386>
 800c334:	f8d9 0000 	ldr.w	r0, [r9]
 800c338:	ea4a 0a00 	orr.w	sl, sl, r0
 800c33c:	f01a 0f01 	tst.w	sl, #1
 800c340:	d10e      	bne.n	800c360 <__gethex+0x3a4>
 800c342:	f047 0710 	orr.w	r7, r7, #16
 800c346:	e033      	b.n	800c3b0 <__gethex+0x3f4>
 800c348:	f04f 0a01 	mov.w	sl, #1
 800c34c:	e7d0      	b.n	800c2f0 <__gethex+0x334>
 800c34e:	2701      	movs	r7, #1
 800c350:	e7e2      	b.n	800c318 <__gethex+0x35c>
 800c352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c354:	f1c3 0301 	rsb	r3, r3, #1
 800c358:	9315      	str	r3, [sp, #84]	; 0x54
 800c35a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d0f0      	beq.n	800c342 <__gethex+0x386>
 800c360:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c364:	f104 0314 	add.w	r3, r4, #20
 800c368:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c36c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c370:	f04f 0c00 	mov.w	ip, #0
 800c374:	4618      	mov	r0, r3
 800c376:	f853 2b04 	ldr.w	r2, [r3], #4
 800c37a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c37e:	d01c      	beq.n	800c3ba <__gethex+0x3fe>
 800c380:	3201      	adds	r2, #1
 800c382:	6002      	str	r2, [r0, #0]
 800c384:	2f02      	cmp	r7, #2
 800c386:	f104 0314 	add.w	r3, r4, #20
 800c38a:	d13f      	bne.n	800c40c <__gethex+0x450>
 800c38c:	f8d8 2000 	ldr.w	r2, [r8]
 800c390:	3a01      	subs	r2, #1
 800c392:	42b2      	cmp	r2, r6
 800c394:	d10a      	bne.n	800c3ac <__gethex+0x3f0>
 800c396:	1171      	asrs	r1, r6, #5
 800c398:	2201      	movs	r2, #1
 800c39a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c39e:	f006 061f 	and.w	r6, r6, #31
 800c3a2:	fa02 f606 	lsl.w	r6, r2, r6
 800c3a6:	421e      	tst	r6, r3
 800c3a8:	bf18      	it	ne
 800c3aa:	4617      	movne	r7, r2
 800c3ac:	f047 0720 	orr.w	r7, r7, #32
 800c3b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3b2:	601c      	str	r4, [r3, #0]
 800c3b4:	9b04      	ldr	r3, [sp, #16]
 800c3b6:	601d      	str	r5, [r3, #0]
 800c3b8:	e695      	b.n	800c0e6 <__gethex+0x12a>
 800c3ba:	4299      	cmp	r1, r3
 800c3bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800c3c0:	d8d8      	bhi.n	800c374 <__gethex+0x3b8>
 800c3c2:	68a3      	ldr	r3, [r4, #8]
 800c3c4:	459b      	cmp	fp, r3
 800c3c6:	db19      	blt.n	800c3fc <__gethex+0x440>
 800c3c8:	6861      	ldr	r1, [r4, #4]
 800c3ca:	ee18 0a10 	vmov	r0, s16
 800c3ce:	3101      	adds	r1, #1
 800c3d0:	f000 f91e 	bl	800c610 <_Balloc>
 800c3d4:	4681      	mov	r9, r0
 800c3d6:	b918      	cbnz	r0, 800c3e0 <__gethex+0x424>
 800c3d8:	4b1a      	ldr	r3, [pc, #104]	; (800c444 <__gethex+0x488>)
 800c3da:	4602      	mov	r2, r0
 800c3dc:	2184      	movs	r1, #132	; 0x84
 800c3de:	e6a8      	b.n	800c132 <__gethex+0x176>
 800c3e0:	6922      	ldr	r2, [r4, #16]
 800c3e2:	3202      	adds	r2, #2
 800c3e4:	f104 010c 	add.w	r1, r4, #12
 800c3e8:	0092      	lsls	r2, r2, #2
 800c3ea:	300c      	adds	r0, #12
 800c3ec:	f7fd f9b6 	bl	800975c <memcpy>
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	ee18 0a10 	vmov	r0, s16
 800c3f6:	f000 f94b 	bl	800c690 <_Bfree>
 800c3fa:	464c      	mov	r4, r9
 800c3fc:	6923      	ldr	r3, [r4, #16]
 800c3fe:	1c5a      	adds	r2, r3, #1
 800c400:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c404:	6122      	str	r2, [r4, #16]
 800c406:	2201      	movs	r2, #1
 800c408:	615a      	str	r2, [r3, #20]
 800c40a:	e7bb      	b.n	800c384 <__gethex+0x3c8>
 800c40c:	6922      	ldr	r2, [r4, #16]
 800c40e:	455a      	cmp	r2, fp
 800c410:	dd0b      	ble.n	800c42a <__gethex+0x46e>
 800c412:	2101      	movs	r1, #1
 800c414:	4620      	mov	r0, r4
 800c416:	f7ff fd69 	bl	800beec <rshift>
 800c41a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c41e:	3501      	adds	r5, #1
 800c420:	42ab      	cmp	r3, r5
 800c422:	f6ff aed0 	blt.w	800c1c6 <__gethex+0x20a>
 800c426:	2701      	movs	r7, #1
 800c428:	e7c0      	b.n	800c3ac <__gethex+0x3f0>
 800c42a:	f016 061f 	ands.w	r6, r6, #31
 800c42e:	d0fa      	beq.n	800c426 <__gethex+0x46a>
 800c430:	4453      	add	r3, sl
 800c432:	f1c6 0620 	rsb	r6, r6, #32
 800c436:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c43a:	f000 f9db 	bl	800c7f4 <__hi0bits>
 800c43e:	42b0      	cmp	r0, r6
 800c440:	dbe7      	blt.n	800c412 <__gethex+0x456>
 800c442:	e7f0      	b.n	800c426 <__gethex+0x46a>
 800c444:	0800e520 	.word	0x0800e520

0800c448 <L_shift>:
 800c448:	f1c2 0208 	rsb	r2, r2, #8
 800c44c:	0092      	lsls	r2, r2, #2
 800c44e:	b570      	push	{r4, r5, r6, lr}
 800c450:	f1c2 0620 	rsb	r6, r2, #32
 800c454:	6843      	ldr	r3, [r0, #4]
 800c456:	6804      	ldr	r4, [r0, #0]
 800c458:	fa03 f506 	lsl.w	r5, r3, r6
 800c45c:	432c      	orrs	r4, r5
 800c45e:	40d3      	lsrs	r3, r2
 800c460:	6004      	str	r4, [r0, #0]
 800c462:	f840 3f04 	str.w	r3, [r0, #4]!
 800c466:	4288      	cmp	r0, r1
 800c468:	d3f4      	bcc.n	800c454 <L_shift+0xc>
 800c46a:	bd70      	pop	{r4, r5, r6, pc}

0800c46c <__match>:
 800c46c:	b530      	push	{r4, r5, lr}
 800c46e:	6803      	ldr	r3, [r0, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c476:	b914      	cbnz	r4, 800c47e <__match+0x12>
 800c478:	6003      	str	r3, [r0, #0]
 800c47a:	2001      	movs	r0, #1
 800c47c:	bd30      	pop	{r4, r5, pc}
 800c47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c482:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c486:	2d19      	cmp	r5, #25
 800c488:	bf98      	it	ls
 800c48a:	3220      	addls	r2, #32
 800c48c:	42a2      	cmp	r2, r4
 800c48e:	d0f0      	beq.n	800c472 <__match+0x6>
 800c490:	2000      	movs	r0, #0
 800c492:	e7f3      	b.n	800c47c <__match+0x10>

0800c494 <__hexnan>:
 800c494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	680b      	ldr	r3, [r1, #0]
 800c49a:	115e      	asrs	r6, r3, #5
 800c49c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c4a0:	f013 031f 	ands.w	r3, r3, #31
 800c4a4:	b087      	sub	sp, #28
 800c4a6:	bf18      	it	ne
 800c4a8:	3604      	addne	r6, #4
 800c4aa:	2500      	movs	r5, #0
 800c4ac:	1f37      	subs	r7, r6, #4
 800c4ae:	4690      	mov	r8, r2
 800c4b0:	6802      	ldr	r2, [r0, #0]
 800c4b2:	9301      	str	r3, [sp, #4]
 800c4b4:	4682      	mov	sl, r0
 800c4b6:	f846 5c04 	str.w	r5, [r6, #-4]
 800c4ba:	46b9      	mov	r9, r7
 800c4bc:	463c      	mov	r4, r7
 800c4be:	9502      	str	r5, [sp, #8]
 800c4c0:	46ab      	mov	fp, r5
 800c4c2:	7851      	ldrb	r1, [r2, #1]
 800c4c4:	1c53      	adds	r3, r2, #1
 800c4c6:	9303      	str	r3, [sp, #12]
 800c4c8:	b341      	cbz	r1, 800c51c <__hexnan+0x88>
 800c4ca:	4608      	mov	r0, r1
 800c4cc:	9205      	str	r2, [sp, #20]
 800c4ce:	9104      	str	r1, [sp, #16]
 800c4d0:	f7ff fd5e 	bl	800bf90 <__hexdig_fun>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d14f      	bne.n	800c578 <__hexnan+0xe4>
 800c4d8:	9904      	ldr	r1, [sp, #16]
 800c4da:	9a05      	ldr	r2, [sp, #20]
 800c4dc:	2920      	cmp	r1, #32
 800c4de:	d818      	bhi.n	800c512 <__hexnan+0x7e>
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	459b      	cmp	fp, r3
 800c4e4:	dd13      	ble.n	800c50e <__hexnan+0x7a>
 800c4e6:	454c      	cmp	r4, r9
 800c4e8:	d206      	bcs.n	800c4f8 <__hexnan+0x64>
 800c4ea:	2d07      	cmp	r5, #7
 800c4ec:	dc04      	bgt.n	800c4f8 <__hexnan+0x64>
 800c4ee:	462a      	mov	r2, r5
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f7ff ffa8 	bl	800c448 <L_shift>
 800c4f8:	4544      	cmp	r4, r8
 800c4fa:	d950      	bls.n	800c59e <__hexnan+0x10a>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f1a4 0904 	sub.w	r9, r4, #4
 800c502:	f844 3c04 	str.w	r3, [r4, #-4]
 800c506:	f8cd b008 	str.w	fp, [sp, #8]
 800c50a:	464c      	mov	r4, r9
 800c50c:	461d      	mov	r5, r3
 800c50e:	9a03      	ldr	r2, [sp, #12]
 800c510:	e7d7      	b.n	800c4c2 <__hexnan+0x2e>
 800c512:	2929      	cmp	r1, #41	; 0x29
 800c514:	d156      	bne.n	800c5c4 <__hexnan+0x130>
 800c516:	3202      	adds	r2, #2
 800c518:	f8ca 2000 	str.w	r2, [sl]
 800c51c:	f1bb 0f00 	cmp.w	fp, #0
 800c520:	d050      	beq.n	800c5c4 <__hexnan+0x130>
 800c522:	454c      	cmp	r4, r9
 800c524:	d206      	bcs.n	800c534 <__hexnan+0xa0>
 800c526:	2d07      	cmp	r5, #7
 800c528:	dc04      	bgt.n	800c534 <__hexnan+0xa0>
 800c52a:	462a      	mov	r2, r5
 800c52c:	4649      	mov	r1, r9
 800c52e:	4620      	mov	r0, r4
 800c530:	f7ff ff8a 	bl	800c448 <L_shift>
 800c534:	4544      	cmp	r4, r8
 800c536:	d934      	bls.n	800c5a2 <__hexnan+0x10e>
 800c538:	f1a8 0204 	sub.w	r2, r8, #4
 800c53c:	4623      	mov	r3, r4
 800c53e:	f853 1b04 	ldr.w	r1, [r3], #4
 800c542:	f842 1f04 	str.w	r1, [r2, #4]!
 800c546:	429f      	cmp	r7, r3
 800c548:	d2f9      	bcs.n	800c53e <__hexnan+0xaa>
 800c54a:	1b3b      	subs	r3, r7, r4
 800c54c:	f023 0303 	bic.w	r3, r3, #3
 800c550:	3304      	adds	r3, #4
 800c552:	3401      	adds	r4, #1
 800c554:	3e03      	subs	r6, #3
 800c556:	42b4      	cmp	r4, r6
 800c558:	bf88      	it	hi
 800c55a:	2304      	movhi	r3, #4
 800c55c:	4443      	add	r3, r8
 800c55e:	2200      	movs	r2, #0
 800c560:	f843 2b04 	str.w	r2, [r3], #4
 800c564:	429f      	cmp	r7, r3
 800c566:	d2fb      	bcs.n	800c560 <__hexnan+0xcc>
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	b91b      	cbnz	r3, 800c574 <__hexnan+0xe0>
 800c56c:	4547      	cmp	r7, r8
 800c56e:	d127      	bne.n	800c5c0 <__hexnan+0x12c>
 800c570:	2301      	movs	r3, #1
 800c572:	603b      	str	r3, [r7, #0]
 800c574:	2005      	movs	r0, #5
 800c576:	e026      	b.n	800c5c6 <__hexnan+0x132>
 800c578:	3501      	adds	r5, #1
 800c57a:	2d08      	cmp	r5, #8
 800c57c:	f10b 0b01 	add.w	fp, fp, #1
 800c580:	dd06      	ble.n	800c590 <__hexnan+0xfc>
 800c582:	4544      	cmp	r4, r8
 800c584:	d9c3      	bls.n	800c50e <__hexnan+0x7a>
 800c586:	2300      	movs	r3, #0
 800c588:	f844 3c04 	str.w	r3, [r4, #-4]
 800c58c:	2501      	movs	r5, #1
 800c58e:	3c04      	subs	r4, #4
 800c590:	6822      	ldr	r2, [r4, #0]
 800c592:	f000 000f 	and.w	r0, r0, #15
 800c596:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c59a:	6022      	str	r2, [r4, #0]
 800c59c:	e7b7      	b.n	800c50e <__hexnan+0x7a>
 800c59e:	2508      	movs	r5, #8
 800c5a0:	e7b5      	b.n	800c50e <__hexnan+0x7a>
 800c5a2:	9b01      	ldr	r3, [sp, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d0df      	beq.n	800c568 <__hexnan+0xd4>
 800c5a8:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ac:	f1c3 0320 	rsb	r3, r3, #32
 800c5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c5b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c5b8:	401a      	ands	r2, r3
 800c5ba:	f846 2c04 	str.w	r2, [r6, #-4]
 800c5be:	e7d3      	b.n	800c568 <__hexnan+0xd4>
 800c5c0:	3f04      	subs	r7, #4
 800c5c2:	e7d1      	b.n	800c568 <__hexnan+0xd4>
 800c5c4:	2004      	movs	r0, #4
 800c5c6:	b007      	add	sp, #28
 800c5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5cc <_localeconv_r>:
 800c5cc:	4800      	ldr	r0, [pc, #0]	; (800c5d0 <_localeconv_r+0x4>)
 800c5ce:	4770      	bx	lr
 800c5d0:	200002e4 	.word	0x200002e4

0800c5d4 <__ascii_mbtowc>:
 800c5d4:	b082      	sub	sp, #8
 800c5d6:	b901      	cbnz	r1, 800c5da <__ascii_mbtowc+0x6>
 800c5d8:	a901      	add	r1, sp, #4
 800c5da:	b142      	cbz	r2, 800c5ee <__ascii_mbtowc+0x1a>
 800c5dc:	b14b      	cbz	r3, 800c5f2 <__ascii_mbtowc+0x1e>
 800c5de:	7813      	ldrb	r3, [r2, #0]
 800c5e0:	600b      	str	r3, [r1, #0]
 800c5e2:	7812      	ldrb	r2, [r2, #0]
 800c5e4:	1e10      	subs	r0, r2, #0
 800c5e6:	bf18      	it	ne
 800c5e8:	2001      	movne	r0, #1
 800c5ea:	b002      	add	sp, #8
 800c5ec:	4770      	bx	lr
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	e7fb      	b.n	800c5ea <__ascii_mbtowc+0x16>
 800c5f2:	f06f 0001 	mvn.w	r0, #1
 800c5f6:	e7f8      	b.n	800c5ea <__ascii_mbtowc+0x16>

0800c5f8 <__malloc_lock>:
 800c5f8:	4801      	ldr	r0, [pc, #4]	; (800c600 <__malloc_lock+0x8>)
 800c5fa:	f000 be94 	b.w	800d326 <__retarget_lock_acquire_recursive>
 800c5fe:	bf00      	nop
 800c600:	20000b30 	.word	0x20000b30

0800c604 <__malloc_unlock>:
 800c604:	4801      	ldr	r0, [pc, #4]	; (800c60c <__malloc_unlock+0x8>)
 800c606:	f000 be8f 	b.w	800d328 <__retarget_lock_release_recursive>
 800c60a:	bf00      	nop
 800c60c:	20000b30 	.word	0x20000b30

0800c610 <_Balloc>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c614:	4604      	mov	r4, r0
 800c616:	460d      	mov	r5, r1
 800c618:	b976      	cbnz	r6, 800c638 <_Balloc+0x28>
 800c61a:	2010      	movs	r0, #16
 800c61c:	f7fd f896 	bl	800974c <malloc>
 800c620:	4602      	mov	r2, r0
 800c622:	6260      	str	r0, [r4, #36]	; 0x24
 800c624:	b920      	cbnz	r0, 800c630 <_Balloc+0x20>
 800c626:	4b18      	ldr	r3, [pc, #96]	; (800c688 <_Balloc+0x78>)
 800c628:	4818      	ldr	r0, [pc, #96]	; (800c68c <_Balloc+0x7c>)
 800c62a:	2166      	movs	r1, #102	; 0x66
 800c62c:	f000 fe4a 	bl	800d2c4 <__assert_func>
 800c630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c634:	6006      	str	r6, [r0, #0]
 800c636:	60c6      	str	r6, [r0, #12]
 800c638:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c63a:	68f3      	ldr	r3, [r6, #12]
 800c63c:	b183      	cbz	r3, 800c660 <_Balloc+0x50>
 800c63e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c646:	b9b8      	cbnz	r0, 800c678 <_Balloc+0x68>
 800c648:	2101      	movs	r1, #1
 800c64a:	fa01 f605 	lsl.w	r6, r1, r5
 800c64e:	1d72      	adds	r2, r6, #5
 800c650:	0092      	lsls	r2, r2, #2
 800c652:	4620      	mov	r0, r4
 800c654:	f000 fc9a 	bl	800cf8c <_calloc_r>
 800c658:	b160      	cbz	r0, 800c674 <_Balloc+0x64>
 800c65a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c65e:	e00e      	b.n	800c67e <_Balloc+0x6e>
 800c660:	2221      	movs	r2, #33	; 0x21
 800c662:	2104      	movs	r1, #4
 800c664:	4620      	mov	r0, r4
 800c666:	f000 fc91 	bl	800cf8c <_calloc_r>
 800c66a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c66c:	60f0      	str	r0, [r6, #12]
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e4      	bne.n	800c63e <_Balloc+0x2e>
 800c674:	2000      	movs	r0, #0
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	6802      	ldr	r2, [r0, #0]
 800c67a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c67e:	2300      	movs	r3, #0
 800c680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c684:	e7f7      	b.n	800c676 <_Balloc+0x66>
 800c686:	bf00      	nop
 800c688:	0800e4ae 	.word	0x0800e4ae
 800c68c:	0800e5ac 	.word	0x0800e5ac

0800c690 <_Bfree>:
 800c690:	b570      	push	{r4, r5, r6, lr}
 800c692:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c694:	4605      	mov	r5, r0
 800c696:	460c      	mov	r4, r1
 800c698:	b976      	cbnz	r6, 800c6b8 <_Bfree+0x28>
 800c69a:	2010      	movs	r0, #16
 800c69c:	f7fd f856 	bl	800974c <malloc>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	6268      	str	r0, [r5, #36]	; 0x24
 800c6a4:	b920      	cbnz	r0, 800c6b0 <_Bfree+0x20>
 800c6a6:	4b09      	ldr	r3, [pc, #36]	; (800c6cc <_Bfree+0x3c>)
 800c6a8:	4809      	ldr	r0, [pc, #36]	; (800c6d0 <_Bfree+0x40>)
 800c6aa:	218a      	movs	r1, #138	; 0x8a
 800c6ac:	f000 fe0a 	bl	800d2c4 <__assert_func>
 800c6b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6b4:	6006      	str	r6, [r0, #0]
 800c6b6:	60c6      	str	r6, [r0, #12]
 800c6b8:	b13c      	cbz	r4, 800c6ca <_Bfree+0x3a>
 800c6ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6bc:	6862      	ldr	r2, [r4, #4]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6c4:	6021      	str	r1, [r4, #0]
 800c6c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	0800e4ae 	.word	0x0800e4ae
 800c6d0:	0800e5ac 	.word	0x0800e5ac

0800c6d4 <__multadd>:
 800c6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d8:	690d      	ldr	r5, [r1, #16]
 800c6da:	4607      	mov	r7, r0
 800c6dc:	460c      	mov	r4, r1
 800c6de:	461e      	mov	r6, r3
 800c6e0:	f101 0c14 	add.w	ip, r1, #20
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6ea:	b299      	uxth	r1, r3
 800c6ec:	fb02 6101 	mla	r1, r2, r1, r6
 800c6f0:	0c1e      	lsrs	r6, r3, #16
 800c6f2:	0c0b      	lsrs	r3, r1, #16
 800c6f4:	fb02 3306 	mla	r3, r2, r6, r3
 800c6f8:	b289      	uxth	r1, r1
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c700:	4285      	cmp	r5, r0
 800c702:	f84c 1b04 	str.w	r1, [ip], #4
 800c706:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c70a:	dcec      	bgt.n	800c6e6 <__multadd+0x12>
 800c70c:	b30e      	cbz	r6, 800c752 <__multadd+0x7e>
 800c70e:	68a3      	ldr	r3, [r4, #8]
 800c710:	42ab      	cmp	r3, r5
 800c712:	dc19      	bgt.n	800c748 <__multadd+0x74>
 800c714:	6861      	ldr	r1, [r4, #4]
 800c716:	4638      	mov	r0, r7
 800c718:	3101      	adds	r1, #1
 800c71a:	f7ff ff79 	bl	800c610 <_Balloc>
 800c71e:	4680      	mov	r8, r0
 800c720:	b928      	cbnz	r0, 800c72e <__multadd+0x5a>
 800c722:	4602      	mov	r2, r0
 800c724:	4b0c      	ldr	r3, [pc, #48]	; (800c758 <__multadd+0x84>)
 800c726:	480d      	ldr	r0, [pc, #52]	; (800c75c <__multadd+0x88>)
 800c728:	21b5      	movs	r1, #181	; 0xb5
 800c72a:	f000 fdcb 	bl	800d2c4 <__assert_func>
 800c72e:	6922      	ldr	r2, [r4, #16]
 800c730:	3202      	adds	r2, #2
 800c732:	f104 010c 	add.w	r1, r4, #12
 800c736:	0092      	lsls	r2, r2, #2
 800c738:	300c      	adds	r0, #12
 800c73a:	f7fd f80f 	bl	800975c <memcpy>
 800c73e:	4621      	mov	r1, r4
 800c740:	4638      	mov	r0, r7
 800c742:	f7ff ffa5 	bl	800c690 <_Bfree>
 800c746:	4644      	mov	r4, r8
 800c748:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c74c:	3501      	adds	r5, #1
 800c74e:	615e      	str	r6, [r3, #20]
 800c750:	6125      	str	r5, [r4, #16]
 800c752:	4620      	mov	r0, r4
 800c754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c758:	0800e520 	.word	0x0800e520
 800c75c:	0800e5ac 	.word	0x0800e5ac

0800c760 <__s2b>:
 800c760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c764:	460c      	mov	r4, r1
 800c766:	4615      	mov	r5, r2
 800c768:	461f      	mov	r7, r3
 800c76a:	2209      	movs	r2, #9
 800c76c:	3308      	adds	r3, #8
 800c76e:	4606      	mov	r6, r0
 800c770:	fb93 f3f2 	sdiv	r3, r3, r2
 800c774:	2100      	movs	r1, #0
 800c776:	2201      	movs	r2, #1
 800c778:	429a      	cmp	r2, r3
 800c77a:	db09      	blt.n	800c790 <__s2b+0x30>
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7ff ff47 	bl	800c610 <_Balloc>
 800c782:	b940      	cbnz	r0, 800c796 <__s2b+0x36>
 800c784:	4602      	mov	r2, r0
 800c786:	4b19      	ldr	r3, [pc, #100]	; (800c7ec <__s2b+0x8c>)
 800c788:	4819      	ldr	r0, [pc, #100]	; (800c7f0 <__s2b+0x90>)
 800c78a:	21ce      	movs	r1, #206	; 0xce
 800c78c:	f000 fd9a 	bl	800d2c4 <__assert_func>
 800c790:	0052      	lsls	r2, r2, #1
 800c792:	3101      	adds	r1, #1
 800c794:	e7f0      	b.n	800c778 <__s2b+0x18>
 800c796:	9b08      	ldr	r3, [sp, #32]
 800c798:	6143      	str	r3, [r0, #20]
 800c79a:	2d09      	cmp	r5, #9
 800c79c:	f04f 0301 	mov.w	r3, #1
 800c7a0:	6103      	str	r3, [r0, #16]
 800c7a2:	dd16      	ble.n	800c7d2 <__s2b+0x72>
 800c7a4:	f104 0909 	add.w	r9, r4, #9
 800c7a8:	46c8      	mov	r8, r9
 800c7aa:	442c      	add	r4, r5
 800c7ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c7b0:	4601      	mov	r1, r0
 800c7b2:	3b30      	subs	r3, #48	; 0x30
 800c7b4:	220a      	movs	r2, #10
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f7ff ff8c 	bl	800c6d4 <__multadd>
 800c7bc:	45a0      	cmp	r8, r4
 800c7be:	d1f5      	bne.n	800c7ac <__s2b+0x4c>
 800c7c0:	f1a5 0408 	sub.w	r4, r5, #8
 800c7c4:	444c      	add	r4, r9
 800c7c6:	1b2d      	subs	r5, r5, r4
 800c7c8:	1963      	adds	r3, r4, r5
 800c7ca:	42bb      	cmp	r3, r7
 800c7cc:	db04      	blt.n	800c7d8 <__s2b+0x78>
 800c7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7d2:	340a      	adds	r4, #10
 800c7d4:	2509      	movs	r5, #9
 800c7d6:	e7f6      	b.n	800c7c6 <__s2b+0x66>
 800c7d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7dc:	4601      	mov	r1, r0
 800c7de:	3b30      	subs	r3, #48	; 0x30
 800c7e0:	220a      	movs	r2, #10
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7ff ff76 	bl	800c6d4 <__multadd>
 800c7e8:	e7ee      	b.n	800c7c8 <__s2b+0x68>
 800c7ea:	bf00      	nop
 800c7ec:	0800e520 	.word	0x0800e520
 800c7f0:	0800e5ac 	.word	0x0800e5ac

0800c7f4 <__hi0bits>:
 800c7f4:	0c03      	lsrs	r3, r0, #16
 800c7f6:	041b      	lsls	r3, r3, #16
 800c7f8:	b9d3      	cbnz	r3, 800c830 <__hi0bits+0x3c>
 800c7fa:	0400      	lsls	r0, r0, #16
 800c7fc:	2310      	movs	r3, #16
 800c7fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c802:	bf04      	itt	eq
 800c804:	0200      	lsleq	r0, r0, #8
 800c806:	3308      	addeq	r3, #8
 800c808:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c80c:	bf04      	itt	eq
 800c80e:	0100      	lsleq	r0, r0, #4
 800c810:	3304      	addeq	r3, #4
 800c812:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c816:	bf04      	itt	eq
 800c818:	0080      	lsleq	r0, r0, #2
 800c81a:	3302      	addeq	r3, #2
 800c81c:	2800      	cmp	r0, #0
 800c81e:	db05      	blt.n	800c82c <__hi0bits+0x38>
 800c820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c824:	f103 0301 	add.w	r3, r3, #1
 800c828:	bf08      	it	eq
 800c82a:	2320      	moveq	r3, #32
 800c82c:	4618      	mov	r0, r3
 800c82e:	4770      	bx	lr
 800c830:	2300      	movs	r3, #0
 800c832:	e7e4      	b.n	800c7fe <__hi0bits+0xa>

0800c834 <__lo0bits>:
 800c834:	6803      	ldr	r3, [r0, #0]
 800c836:	f013 0207 	ands.w	r2, r3, #7
 800c83a:	4601      	mov	r1, r0
 800c83c:	d00b      	beq.n	800c856 <__lo0bits+0x22>
 800c83e:	07da      	lsls	r2, r3, #31
 800c840:	d423      	bmi.n	800c88a <__lo0bits+0x56>
 800c842:	0798      	lsls	r0, r3, #30
 800c844:	bf49      	itett	mi
 800c846:	085b      	lsrmi	r3, r3, #1
 800c848:	089b      	lsrpl	r3, r3, #2
 800c84a:	2001      	movmi	r0, #1
 800c84c:	600b      	strmi	r3, [r1, #0]
 800c84e:	bf5c      	itt	pl
 800c850:	600b      	strpl	r3, [r1, #0]
 800c852:	2002      	movpl	r0, #2
 800c854:	4770      	bx	lr
 800c856:	b298      	uxth	r0, r3
 800c858:	b9a8      	cbnz	r0, 800c886 <__lo0bits+0x52>
 800c85a:	0c1b      	lsrs	r3, r3, #16
 800c85c:	2010      	movs	r0, #16
 800c85e:	b2da      	uxtb	r2, r3
 800c860:	b90a      	cbnz	r2, 800c866 <__lo0bits+0x32>
 800c862:	3008      	adds	r0, #8
 800c864:	0a1b      	lsrs	r3, r3, #8
 800c866:	071a      	lsls	r2, r3, #28
 800c868:	bf04      	itt	eq
 800c86a:	091b      	lsreq	r3, r3, #4
 800c86c:	3004      	addeq	r0, #4
 800c86e:	079a      	lsls	r2, r3, #30
 800c870:	bf04      	itt	eq
 800c872:	089b      	lsreq	r3, r3, #2
 800c874:	3002      	addeq	r0, #2
 800c876:	07da      	lsls	r2, r3, #31
 800c878:	d403      	bmi.n	800c882 <__lo0bits+0x4e>
 800c87a:	085b      	lsrs	r3, r3, #1
 800c87c:	f100 0001 	add.w	r0, r0, #1
 800c880:	d005      	beq.n	800c88e <__lo0bits+0x5a>
 800c882:	600b      	str	r3, [r1, #0]
 800c884:	4770      	bx	lr
 800c886:	4610      	mov	r0, r2
 800c888:	e7e9      	b.n	800c85e <__lo0bits+0x2a>
 800c88a:	2000      	movs	r0, #0
 800c88c:	4770      	bx	lr
 800c88e:	2020      	movs	r0, #32
 800c890:	4770      	bx	lr
	...

0800c894 <__i2b>:
 800c894:	b510      	push	{r4, lr}
 800c896:	460c      	mov	r4, r1
 800c898:	2101      	movs	r1, #1
 800c89a:	f7ff feb9 	bl	800c610 <_Balloc>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	b928      	cbnz	r0, 800c8ae <__i2b+0x1a>
 800c8a2:	4b05      	ldr	r3, [pc, #20]	; (800c8b8 <__i2b+0x24>)
 800c8a4:	4805      	ldr	r0, [pc, #20]	; (800c8bc <__i2b+0x28>)
 800c8a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8aa:	f000 fd0b 	bl	800d2c4 <__assert_func>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	6144      	str	r4, [r0, #20]
 800c8b2:	6103      	str	r3, [r0, #16]
 800c8b4:	bd10      	pop	{r4, pc}
 800c8b6:	bf00      	nop
 800c8b8:	0800e520 	.word	0x0800e520
 800c8bc:	0800e5ac 	.word	0x0800e5ac

0800c8c0 <__multiply>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	4691      	mov	r9, r2
 800c8c6:	690a      	ldr	r2, [r1, #16]
 800c8c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	bfb8      	it	lt
 800c8d0:	460b      	movlt	r3, r1
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	bfbc      	itt	lt
 800c8d6:	464c      	movlt	r4, r9
 800c8d8:	4699      	movlt	r9, r3
 800c8da:	6927      	ldr	r7, [r4, #16]
 800c8dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c8e0:	68a3      	ldr	r3, [r4, #8]
 800c8e2:	6861      	ldr	r1, [r4, #4]
 800c8e4:	eb07 060a 	add.w	r6, r7, sl
 800c8e8:	42b3      	cmp	r3, r6
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	bfb8      	it	lt
 800c8ee:	3101      	addlt	r1, #1
 800c8f0:	f7ff fe8e 	bl	800c610 <_Balloc>
 800c8f4:	b930      	cbnz	r0, 800c904 <__multiply+0x44>
 800c8f6:	4602      	mov	r2, r0
 800c8f8:	4b44      	ldr	r3, [pc, #272]	; (800ca0c <__multiply+0x14c>)
 800c8fa:	4845      	ldr	r0, [pc, #276]	; (800ca10 <__multiply+0x150>)
 800c8fc:	f240 115d 	movw	r1, #349	; 0x15d
 800c900:	f000 fce0 	bl	800d2c4 <__assert_func>
 800c904:	f100 0514 	add.w	r5, r0, #20
 800c908:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c90c:	462b      	mov	r3, r5
 800c90e:	2200      	movs	r2, #0
 800c910:	4543      	cmp	r3, r8
 800c912:	d321      	bcc.n	800c958 <__multiply+0x98>
 800c914:	f104 0314 	add.w	r3, r4, #20
 800c918:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c91c:	f109 0314 	add.w	r3, r9, #20
 800c920:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c924:	9202      	str	r2, [sp, #8]
 800c926:	1b3a      	subs	r2, r7, r4
 800c928:	3a15      	subs	r2, #21
 800c92a:	f022 0203 	bic.w	r2, r2, #3
 800c92e:	3204      	adds	r2, #4
 800c930:	f104 0115 	add.w	r1, r4, #21
 800c934:	428f      	cmp	r7, r1
 800c936:	bf38      	it	cc
 800c938:	2204      	movcc	r2, #4
 800c93a:	9201      	str	r2, [sp, #4]
 800c93c:	9a02      	ldr	r2, [sp, #8]
 800c93e:	9303      	str	r3, [sp, #12]
 800c940:	429a      	cmp	r2, r3
 800c942:	d80c      	bhi.n	800c95e <__multiply+0x9e>
 800c944:	2e00      	cmp	r6, #0
 800c946:	dd03      	ble.n	800c950 <__multiply+0x90>
 800c948:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d05a      	beq.n	800ca06 <__multiply+0x146>
 800c950:	6106      	str	r6, [r0, #16]
 800c952:	b005      	add	sp, #20
 800c954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c958:	f843 2b04 	str.w	r2, [r3], #4
 800c95c:	e7d8      	b.n	800c910 <__multiply+0x50>
 800c95e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c962:	f1ba 0f00 	cmp.w	sl, #0
 800c966:	d024      	beq.n	800c9b2 <__multiply+0xf2>
 800c968:	f104 0e14 	add.w	lr, r4, #20
 800c96c:	46a9      	mov	r9, r5
 800c96e:	f04f 0c00 	mov.w	ip, #0
 800c972:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c976:	f8d9 1000 	ldr.w	r1, [r9]
 800c97a:	fa1f fb82 	uxth.w	fp, r2
 800c97e:	b289      	uxth	r1, r1
 800c980:	fb0a 110b 	mla	r1, sl, fp, r1
 800c984:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c988:	f8d9 2000 	ldr.w	r2, [r9]
 800c98c:	4461      	add	r1, ip
 800c98e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c992:	fb0a c20b 	mla	r2, sl, fp, ip
 800c996:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c99a:	b289      	uxth	r1, r1
 800c99c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c9a0:	4577      	cmp	r7, lr
 800c9a2:	f849 1b04 	str.w	r1, [r9], #4
 800c9a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c9aa:	d8e2      	bhi.n	800c972 <__multiply+0xb2>
 800c9ac:	9a01      	ldr	r2, [sp, #4]
 800c9ae:	f845 c002 	str.w	ip, [r5, r2]
 800c9b2:	9a03      	ldr	r2, [sp, #12]
 800c9b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	f1b9 0f00 	cmp.w	r9, #0
 800c9be:	d020      	beq.n	800ca02 <__multiply+0x142>
 800c9c0:	6829      	ldr	r1, [r5, #0]
 800c9c2:	f104 0c14 	add.w	ip, r4, #20
 800c9c6:	46ae      	mov	lr, r5
 800c9c8:	f04f 0a00 	mov.w	sl, #0
 800c9cc:	f8bc b000 	ldrh.w	fp, [ip]
 800c9d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c9d4:	fb09 220b 	mla	r2, r9, fp, r2
 800c9d8:	4492      	add	sl, r2
 800c9da:	b289      	uxth	r1, r1
 800c9dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c9e0:	f84e 1b04 	str.w	r1, [lr], #4
 800c9e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c9e8:	f8be 1000 	ldrh.w	r1, [lr]
 800c9ec:	0c12      	lsrs	r2, r2, #16
 800c9ee:	fb09 1102 	mla	r1, r9, r2, r1
 800c9f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c9f6:	4567      	cmp	r7, ip
 800c9f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c9fc:	d8e6      	bhi.n	800c9cc <__multiply+0x10c>
 800c9fe:	9a01      	ldr	r2, [sp, #4]
 800ca00:	50a9      	str	r1, [r5, r2]
 800ca02:	3504      	adds	r5, #4
 800ca04:	e79a      	b.n	800c93c <__multiply+0x7c>
 800ca06:	3e01      	subs	r6, #1
 800ca08:	e79c      	b.n	800c944 <__multiply+0x84>
 800ca0a:	bf00      	nop
 800ca0c:	0800e520 	.word	0x0800e520
 800ca10:	0800e5ac 	.word	0x0800e5ac

0800ca14 <__pow5mult>:
 800ca14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca18:	4615      	mov	r5, r2
 800ca1a:	f012 0203 	ands.w	r2, r2, #3
 800ca1e:	4606      	mov	r6, r0
 800ca20:	460f      	mov	r7, r1
 800ca22:	d007      	beq.n	800ca34 <__pow5mult+0x20>
 800ca24:	4c25      	ldr	r4, [pc, #148]	; (800cabc <__pow5mult+0xa8>)
 800ca26:	3a01      	subs	r2, #1
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca2e:	f7ff fe51 	bl	800c6d4 <__multadd>
 800ca32:	4607      	mov	r7, r0
 800ca34:	10ad      	asrs	r5, r5, #2
 800ca36:	d03d      	beq.n	800cab4 <__pow5mult+0xa0>
 800ca38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca3a:	b97c      	cbnz	r4, 800ca5c <__pow5mult+0x48>
 800ca3c:	2010      	movs	r0, #16
 800ca3e:	f7fc fe85 	bl	800974c <malloc>
 800ca42:	4602      	mov	r2, r0
 800ca44:	6270      	str	r0, [r6, #36]	; 0x24
 800ca46:	b928      	cbnz	r0, 800ca54 <__pow5mult+0x40>
 800ca48:	4b1d      	ldr	r3, [pc, #116]	; (800cac0 <__pow5mult+0xac>)
 800ca4a:	481e      	ldr	r0, [pc, #120]	; (800cac4 <__pow5mult+0xb0>)
 800ca4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca50:	f000 fc38 	bl	800d2c4 <__assert_func>
 800ca54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca58:	6004      	str	r4, [r0, #0]
 800ca5a:	60c4      	str	r4, [r0, #12]
 800ca5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca64:	b94c      	cbnz	r4, 800ca7a <__pow5mult+0x66>
 800ca66:	f240 2171 	movw	r1, #625	; 0x271
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7ff ff12 	bl	800c894 <__i2b>
 800ca70:	2300      	movs	r3, #0
 800ca72:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca76:	4604      	mov	r4, r0
 800ca78:	6003      	str	r3, [r0, #0]
 800ca7a:	f04f 0900 	mov.w	r9, #0
 800ca7e:	07eb      	lsls	r3, r5, #31
 800ca80:	d50a      	bpl.n	800ca98 <__pow5mult+0x84>
 800ca82:	4639      	mov	r1, r7
 800ca84:	4622      	mov	r2, r4
 800ca86:	4630      	mov	r0, r6
 800ca88:	f7ff ff1a 	bl	800c8c0 <__multiply>
 800ca8c:	4639      	mov	r1, r7
 800ca8e:	4680      	mov	r8, r0
 800ca90:	4630      	mov	r0, r6
 800ca92:	f7ff fdfd 	bl	800c690 <_Bfree>
 800ca96:	4647      	mov	r7, r8
 800ca98:	106d      	asrs	r5, r5, #1
 800ca9a:	d00b      	beq.n	800cab4 <__pow5mult+0xa0>
 800ca9c:	6820      	ldr	r0, [r4, #0]
 800ca9e:	b938      	cbnz	r0, 800cab0 <__pow5mult+0x9c>
 800caa0:	4622      	mov	r2, r4
 800caa2:	4621      	mov	r1, r4
 800caa4:	4630      	mov	r0, r6
 800caa6:	f7ff ff0b 	bl	800c8c0 <__multiply>
 800caaa:	6020      	str	r0, [r4, #0]
 800caac:	f8c0 9000 	str.w	r9, [r0]
 800cab0:	4604      	mov	r4, r0
 800cab2:	e7e4      	b.n	800ca7e <__pow5mult+0x6a>
 800cab4:	4638      	mov	r0, r7
 800cab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caba:	bf00      	nop
 800cabc:	0800e6f8 	.word	0x0800e6f8
 800cac0:	0800e4ae 	.word	0x0800e4ae
 800cac4:	0800e5ac 	.word	0x0800e5ac

0800cac8 <__lshift>:
 800cac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cacc:	460c      	mov	r4, r1
 800cace:	6849      	ldr	r1, [r1, #4]
 800cad0:	6923      	ldr	r3, [r4, #16]
 800cad2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	4607      	mov	r7, r0
 800cada:	4691      	mov	r9, r2
 800cadc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cae0:	f108 0601 	add.w	r6, r8, #1
 800cae4:	42b3      	cmp	r3, r6
 800cae6:	db0b      	blt.n	800cb00 <__lshift+0x38>
 800cae8:	4638      	mov	r0, r7
 800caea:	f7ff fd91 	bl	800c610 <_Balloc>
 800caee:	4605      	mov	r5, r0
 800caf0:	b948      	cbnz	r0, 800cb06 <__lshift+0x3e>
 800caf2:	4602      	mov	r2, r0
 800caf4:	4b2a      	ldr	r3, [pc, #168]	; (800cba0 <__lshift+0xd8>)
 800caf6:	482b      	ldr	r0, [pc, #172]	; (800cba4 <__lshift+0xdc>)
 800caf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cafc:	f000 fbe2 	bl	800d2c4 <__assert_func>
 800cb00:	3101      	adds	r1, #1
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	e7ee      	b.n	800cae4 <__lshift+0x1c>
 800cb06:	2300      	movs	r3, #0
 800cb08:	f100 0114 	add.w	r1, r0, #20
 800cb0c:	f100 0210 	add.w	r2, r0, #16
 800cb10:	4618      	mov	r0, r3
 800cb12:	4553      	cmp	r3, sl
 800cb14:	db37      	blt.n	800cb86 <__lshift+0xbe>
 800cb16:	6920      	ldr	r0, [r4, #16]
 800cb18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb1c:	f104 0314 	add.w	r3, r4, #20
 800cb20:	f019 091f 	ands.w	r9, r9, #31
 800cb24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cb2c:	d02f      	beq.n	800cb8e <__lshift+0xc6>
 800cb2e:	f1c9 0e20 	rsb	lr, r9, #32
 800cb32:	468a      	mov	sl, r1
 800cb34:	f04f 0c00 	mov.w	ip, #0
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	fa02 f209 	lsl.w	r2, r2, r9
 800cb3e:	ea42 020c 	orr.w	r2, r2, ip
 800cb42:	f84a 2b04 	str.w	r2, [sl], #4
 800cb46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb4a:	4298      	cmp	r0, r3
 800cb4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cb50:	d8f2      	bhi.n	800cb38 <__lshift+0x70>
 800cb52:	1b03      	subs	r3, r0, r4
 800cb54:	3b15      	subs	r3, #21
 800cb56:	f023 0303 	bic.w	r3, r3, #3
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	f104 0215 	add.w	r2, r4, #21
 800cb60:	4290      	cmp	r0, r2
 800cb62:	bf38      	it	cc
 800cb64:	2304      	movcc	r3, #4
 800cb66:	f841 c003 	str.w	ip, [r1, r3]
 800cb6a:	f1bc 0f00 	cmp.w	ip, #0
 800cb6e:	d001      	beq.n	800cb74 <__lshift+0xac>
 800cb70:	f108 0602 	add.w	r6, r8, #2
 800cb74:	3e01      	subs	r6, #1
 800cb76:	4638      	mov	r0, r7
 800cb78:	612e      	str	r6, [r5, #16]
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	f7ff fd88 	bl	800c690 <_Bfree>
 800cb80:	4628      	mov	r0, r5
 800cb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb86:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	e7c1      	b.n	800cb12 <__lshift+0x4a>
 800cb8e:	3904      	subs	r1, #4
 800cb90:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb94:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb98:	4298      	cmp	r0, r3
 800cb9a:	d8f9      	bhi.n	800cb90 <__lshift+0xc8>
 800cb9c:	e7ea      	b.n	800cb74 <__lshift+0xac>
 800cb9e:	bf00      	nop
 800cba0:	0800e520 	.word	0x0800e520
 800cba4:	0800e5ac 	.word	0x0800e5ac

0800cba8 <__mcmp>:
 800cba8:	b530      	push	{r4, r5, lr}
 800cbaa:	6902      	ldr	r2, [r0, #16]
 800cbac:	690c      	ldr	r4, [r1, #16]
 800cbae:	1b12      	subs	r2, r2, r4
 800cbb0:	d10e      	bne.n	800cbd0 <__mcmp+0x28>
 800cbb2:	f100 0314 	add.w	r3, r0, #20
 800cbb6:	3114      	adds	r1, #20
 800cbb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cbbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cbc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cbc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cbc8:	42a5      	cmp	r5, r4
 800cbca:	d003      	beq.n	800cbd4 <__mcmp+0x2c>
 800cbcc:	d305      	bcc.n	800cbda <__mcmp+0x32>
 800cbce:	2201      	movs	r2, #1
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	bd30      	pop	{r4, r5, pc}
 800cbd4:	4283      	cmp	r3, r0
 800cbd6:	d3f3      	bcc.n	800cbc0 <__mcmp+0x18>
 800cbd8:	e7fa      	b.n	800cbd0 <__mcmp+0x28>
 800cbda:	f04f 32ff 	mov.w	r2, #4294967295
 800cbde:	e7f7      	b.n	800cbd0 <__mcmp+0x28>

0800cbe0 <__mdiff>:
 800cbe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4620      	mov	r0, r4
 800cbec:	4690      	mov	r8, r2
 800cbee:	f7ff ffdb 	bl	800cba8 <__mcmp>
 800cbf2:	1e05      	subs	r5, r0, #0
 800cbf4:	d110      	bne.n	800cc18 <__mdiff+0x38>
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f7ff fd09 	bl	800c610 <_Balloc>
 800cbfe:	b930      	cbnz	r0, 800cc0e <__mdiff+0x2e>
 800cc00:	4b3a      	ldr	r3, [pc, #232]	; (800ccec <__mdiff+0x10c>)
 800cc02:	4602      	mov	r2, r0
 800cc04:	f240 2132 	movw	r1, #562	; 0x232
 800cc08:	4839      	ldr	r0, [pc, #228]	; (800ccf0 <__mdiff+0x110>)
 800cc0a:	f000 fb5b 	bl	800d2c4 <__assert_func>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc18:	bfa4      	itt	ge
 800cc1a:	4643      	movge	r3, r8
 800cc1c:	46a0      	movge	r8, r4
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cc24:	bfa6      	itte	ge
 800cc26:	461c      	movge	r4, r3
 800cc28:	2500      	movge	r5, #0
 800cc2a:	2501      	movlt	r5, #1
 800cc2c:	f7ff fcf0 	bl	800c610 <_Balloc>
 800cc30:	b920      	cbnz	r0, 800cc3c <__mdiff+0x5c>
 800cc32:	4b2e      	ldr	r3, [pc, #184]	; (800ccec <__mdiff+0x10c>)
 800cc34:	4602      	mov	r2, r0
 800cc36:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc3a:	e7e5      	b.n	800cc08 <__mdiff+0x28>
 800cc3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc40:	6926      	ldr	r6, [r4, #16]
 800cc42:	60c5      	str	r5, [r0, #12]
 800cc44:	f104 0914 	add.w	r9, r4, #20
 800cc48:	f108 0514 	add.w	r5, r8, #20
 800cc4c:	f100 0e14 	add.w	lr, r0, #20
 800cc50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cc54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc58:	f108 0210 	add.w	r2, r8, #16
 800cc5c:	46f2      	mov	sl, lr
 800cc5e:	2100      	movs	r1, #0
 800cc60:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc68:	fa1f f883 	uxth.w	r8, r3
 800cc6c:	fa11 f18b 	uxtah	r1, r1, fp
 800cc70:	0c1b      	lsrs	r3, r3, #16
 800cc72:	eba1 0808 	sub.w	r8, r1, r8
 800cc76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc7e:	fa1f f888 	uxth.w	r8, r8
 800cc82:	1419      	asrs	r1, r3, #16
 800cc84:	454e      	cmp	r6, r9
 800cc86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc8a:	f84a 3b04 	str.w	r3, [sl], #4
 800cc8e:	d8e7      	bhi.n	800cc60 <__mdiff+0x80>
 800cc90:	1b33      	subs	r3, r6, r4
 800cc92:	3b15      	subs	r3, #21
 800cc94:	f023 0303 	bic.w	r3, r3, #3
 800cc98:	3304      	adds	r3, #4
 800cc9a:	3415      	adds	r4, #21
 800cc9c:	42a6      	cmp	r6, r4
 800cc9e:	bf38      	it	cc
 800cca0:	2304      	movcc	r3, #4
 800cca2:	441d      	add	r5, r3
 800cca4:	4473      	add	r3, lr
 800cca6:	469e      	mov	lr, r3
 800cca8:	462e      	mov	r6, r5
 800ccaa:	4566      	cmp	r6, ip
 800ccac:	d30e      	bcc.n	800cccc <__mdiff+0xec>
 800ccae:	f10c 0203 	add.w	r2, ip, #3
 800ccb2:	1b52      	subs	r2, r2, r5
 800ccb4:	f022 0203 	bic.w	r2, r2, #3
 800ccb8:	3d03      	subs	r5, #3
 800ccba:	45ac      	cmp	ip, r5
 800ccbc:	bf38      	it	cc
 800ccbe:	2200      	movcc	r2, #0
 800ccc0:	441a      	add	r2, r3
 800ccc2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ccc6:	b17b      	cbz	r3, 800cce8 <__mdiff+0x108>
 800ccc8:	6107      	str	r7, [r0, #16]
 800ccca:	e7a3      	b.n	800cc14 <__mdiff+0x34>
 800cccc:	f856 8b04 	ldr.w	r8, [r6], #4
 800ccd0:	fa11 f288 	uxtah	r2, r1, r8
 800ccd4:	1414      	asrs	r4, r2, #16
 800ccd6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ccda:	b292      	uxth	r2, r2
 800ccdc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cce0:	f84e 2b04 	str.w	r2, [lr], #4
 800cce4:	1421      	asrs	r1, r4, #16
 800cce6:	e7e0      	b.n	800ccaa <__mdiff+0xca>
 800cce8:	3f01      	subs	r7, #1
 800ccea:	e7ea      	b.n	800ccc2 <__mdiff+0xe2>
 800ccec:	0800e520 	.word	0x0800e520
 800ccf0:	0800e5ac 	.word	0x0800e5ac

0800ccf4 <__ulp>:
 800ccf4:	b082      	sub	sp, #8
 800ccf6:	ed8d 0b00 	vstr	d0, [sp]
 800ccfa:	9b01      	ldr	r3, [sp, #4]
 800ccfc:	4912      	ldr	r1, [pc, #72]	; (800cd48 <__ulp+0x54>)
 800ccfe:	4019      	ands	r1, r3
 800cd00:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cd04:	2900      	cmp	r1, #0
 800cd06:	dd05      	ble.n	800cd14 <__ulp+0x20>
 800cd08:	2200      	movs	r2, #0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	ec43 2b10 	vmov	d0, r2, r3
 800cd10:	b002      	add	sp, #8
 800cd12:	4770      	bx	lr
 800cd14:	4249      	negs	r1, r1
 800cd16:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cd1a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cd1e:	f04f 0200 	mov.w	r2, #0
 800cd22:	f04f 0300 	mov.w	r3, #0
 800cd26:	da04      	bge.n	800cd32 <__ulp+0x3e>
 800cd28:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cd2c:	fa41 f300 	asr.w	r3, r1, r0
 800cd30:	e7ec      	b.n	800cd0c <__ulp+0x18>
 800cd32:	f1a0 0114 	sub.w	r1, r0, #20
 800cd36:	291e      	cmp	r1, #30
 800cd38:	bfda      	itte	le
 800cd3a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cd3e:	fa20 f101 	lsrle.w	r1, r0, r1
 800cd42:	2101      	movgt	r1, #1
 800cd44:	460a      	mov	r2, r1
 800cd46:	e7e1      	b.n	800cd0c <__ulp+0x18>
 800cd48:	7ff00000 	.word	0x7ff00000

0800cd4c <__b2d>:
 800cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4e:	6905      	ldr	r5, [r0, #16]
 800cd50:	f100 0714 	add.w	r7, r0, #20
 800cd54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cd58:	1f2e      	subs	r6, r5, #4
 800cd5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7ff fd48 	bl	800c7f4 <__hi0bits>
 800cd64:	f1c0 0320 	rsb	r3, r0, #32
 800cd68:	280a      	cmp	r0, #10
 800cd6a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cde8 <__b2d+0x9c>
 800cd6e:	600b      	str	r3, [r1, #0]
 800cd70:	dc14      	bgt.n	800cd9c <__b2d+0x50>
 800cd72:	f1c0 0e0b 	rsb	lr, r0, #11
 800cd76:	fa24 f10e 	lsr.w	r1, r4, lr
 800cd7a:	42b7      	cmp	r7, r6
 800cd7c:	ea41 030c 	orr.w	r3, r1, ip
 800cd80:	bf34      	ite	cc
 800cd82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd86:	2100      	movcs	r1, #0
 800cd88:	3015      	adds	r0, #21
 800cd8a:	fa04 f000 	lsl.w	r0, r4, r0
 800cd8e:	fa21 f10e 	lsr.w	r1, r1, lr
 800cd92:	ea40 0201 	orr.w	r2, r0, r1
 800cd96:	ec43 2b10 	vmov	d0, r2, r3
 800cd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd9c:	42b7      	cmp	r7, r6
 800cd9e:	bf3a      	itte	cc
 800cda0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cda4:	f1a5 0608 	subcc.w	r6, r5, #8
 800cda8:	2100      	movcs	r1, #0
 800cdaa:	380b      	subs	r0, #11
 800cdac:	d017      	beq.n	800cdde <__b2d+0x92>
 800cdae:	f1c0 0c20 	rsb	ip, r0, #32
 800cdb2:	fa04 f500 	lsl.w	r5, r4, r0
 800cdb6:	42be      	cmp	r6, r7
 800cdb8:	fa21 f40c 	lsr.w	r4, r1, ip
 800cdbc:	ea45 0504 	orr.w	r5, r5, r4
 800cdc0:	bf8c      	ite	hi
 800cdc2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cdc6:	2400      	movls	r4, #0
 800cdc8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cdcc:	fa01 f000 	lsl.w	r0, r1, r0
 800cdd0:	fa24 f40c 	lsr.w	r4, r4, ip
 800cdd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cdd8:	ea40 0204 	orr.w	r2, r0, r4
 800cddc:	e7db      	b.n	800cd96 <__b2d+0x4a>
 800cdde:	ea44 030c 	orr.w	r3, r4, ip
 800cde2:	460a      	mov	r2, r1
 800cde4:	e7d7      	b.n	800cd96 <__b2d+0x4a>
 800cde6:	bf00      	nop
 800cde8:	3ff00000 	.word	0x3ff00000

0800cdec <__d2b>:
 800cdec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdf0:	4689      	mov	r9, r1
 800cdf2:	2101      	movs	r1, #1
 800cdf4:	ec57 6b10 	vmov	r6, r7, d0
 800cdf8:	4690      	mov	r8, r2
 800cdfa:	f7ff fc09 	bl	800c610 <_Balloc>
 800cdfe:	4604      	mov	r4, r0
 800ce00:	b930      	cbnz	r0, 800ce10 <__d2b+0x24>
 800ce02:	4602      	mov	r2, r0
 800ce04:	4b25      	ldr	r3, [pc, #148]	; (800ce9c <__d2b+0xb0>)
 800ce06:	4826      	ldr	r0, [pc, #152]	; (800cea0 <__d2b+0xb4>)
 800ce08:	f240 310a 	movw	r1, #778	; 0x30a
 800ce0c:	f000 fa5a 	bl	800d2c4 <__assert_func>
 800ce10:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ce14:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce18:	bb35      	cbnz	r5, 800ce68 <__d2b+0x7c>
 800ce1a:	2e00      	cmp	r6, #0
 800ce1c:	9301      	str	r3, [sp, #4]
 800ce1e:	d028      	beq.n	800ce72 <__d2b+0x86>
 800ce20:	4668      	mov	r0, sp
 800ce22:	9600      	str	r6, [sp, #0]
 800ce24:	f7ff fd06 	bl	800c834 <__lo0bits>
 800ce28:	9900      	ldr	r1, [sp, #0]
 800ce2a:	b300      	cbz	r0, 800ce6e <__d2b+0x82>
 800ce2c:	9a01      	ldr	r2, [sp, #4]
 800ce2e:	f1c0 0320 	rsb	r3, r0, #32
 800ce32:	fa02 f303 	lsl.w	r3, r2, r3
 800ce36:	430b      	orrs	r3, r1
 800ce38:	40c2      	lsrs	r2, r0
 800ce3a:	6163      	str	r3, [r4, #20]
 800ce3c:	9201      	str	r2, [sp, #4]
 800ce3e:	9b01      	ldr	r3, [sp, #4]
 800ce40:	61a3      	str	r3, [r4, #24]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	bf14      	ite	ne
 800ce46:	2202      	movne	r2, #2
 800ce48:	2201      	moveq	r2, #1
 800ce4a:	6122      	str	r2, [r4, #16]
 800ce4c:	b1d5      	cbz	r5, 800ce84 <__d2b+0x98>
 800ce4e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce52:	4405      	add	r5, r0
 800ce54:	f8c9 5000 	str.w	r5, [r9]
 800ce58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce5c:	f8c8 0000 	str.w	r0, [r8]
 800ce60:	4620      	mov	r0, r4
 800ce62:	b003      	add	sp, #12
 800ce64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce6c:	e7d5      	b.n	800ce1a <__d2b+0x2e>
 800ce6e:	6161      	str	r1, [r4, #20]
 800ce70:	e7e5      	b.n	800ce3e <__d2b+0x52>
 800ce72:	a801      	add	r0, sp, #4
 800ce74:	f7ff fcde 	bl	800c834 <__lo0bits>
 800ce78:	9b01      	ldr	r3, [sp, #4]
 800ce7a:	6163      	str	r3, [r4, #20]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	6122      	str	r2, [r4, #16]
 800ce80:	3020      	adds	r0, #32
 800ce82:	e7e3      	b.n	800ce4c <__d2b+0x60>
 800ce84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce8c:	f8c9 0000 	str.w	r0, [r9]
 800ce90:	6918      	ldr	r0, [r3, #16]
 800ce92:	f7ff fcaf 	bl	800c7f4 <__hi0bits>
 800ce96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce9a:	e7df      	b.n	800ce5c <__d2b+0x70>
 800ce9c:	0800e520 	.word	0x0800e520
 800cea0:	0800e5ac 	.word	0x0800e5ac

0800cea4 <__ratio>:
 800cea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	4688      	mov	r8, r1
 800ceaa:	4669      	mov	r1, sp
 800ceac:	4681      	mov	r9, r0
 800ceae:	f7ff ff4d 	bl	800cd4c <__b2d>
 800ceb2:	a901      	add	r1, sp, #4
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	ec55 4b10 	vmov	r4, r5, d0
 800ceba:	ee10 aa10 	vmov	sl, s0
 800cebe:	f7ff ff45 	bl	800cd4c <__b2d>
 800cec2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cec6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ceca:	1a59      	subs	r1, r3, r1
 800cecc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ced6:	ec57 6b10 	vmov	r6, r7, d0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bfd6      	itet	le
 800cede:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cee2:	462a      	movgt	r2, r5
 800cee4:	463a      	movle	r2, r7
 800cee6:	46ab      	mov	fp, r5
 800cee8:	bfd6      	itet	le
 800ceea:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ceee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800cef2:	ee00 3a90 	vmovle	s1, r3
 800cef6:	ec4b ab17 	vmov	d7, sl, fp
 800cefa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800cefe:	b003      	add	sp, #12
 800cf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf04 <__copybits>:
 800cf04:	3901      	subs	r1, #1
 800cf06:	b570      	push	{r4, r5, r6, lr}
 800cf08:	1149      	asrs	r1, r1, #5
 800cf0a:	6914      	ldr	r4, [r2, #16]
 800cf0c:	3101      	adds	r1, #1
 800cf0e:	f102 0314 	add.w	r3, r2, #20
 800cf12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cf16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cf1a:	1f05      	subs	r5, r0, #4
 800cf1c:	42a3      	cmp	r3, r4
 800cf1e:	d30c      	bcc.n	800cf3a <__copybits+0x36>
 800cf20:	1aa3      	subs	r3, r4, r2
 800cf22:	3b11      	subs	r3, #17
 800cf24:	f023 0303 	bic.w	r3, r3, #3
 800cf28:	3211      	adds	r2, #17
 800cf2a:	42a2      	cmp	r2, r4
 800cf2c:	bf88      	it	hi
 800cf2e:	2300      	movhi	r3, #0
 800cf30:	4418      	add	r0, r3
 800cf32:	2300      	movs	r3, #0
 800cf34:	4288      	cmp	r0, r1
 800cf36:	d305      	bcc.n	800cf44 <__copybits+0x40>
 800cf38:	bd70      	pop	{r4, r5, r6, pc}
 800cf3a:	f853 6b04 	ldr.w	r6, [r3], #4
 800cf3e:	f845 6f04 	str.w	r6, [r5, #4]!
 800cf42:	e7eb      	b.n	800cf1c <__copybits+0x18>
 800cf44:	f840 3b04 	str.w	r3, [r0], #4
 800cf48:	e7f4      	b.n	800cf34 <__copybits+0x30>

0800cf4a <__any_on>:
 800cf4a:	f100 0214 	add.w	r2, r0, #20
 800cf4e:	6900      	ldr	r0, [r0, #16]
 800cf50:	114b      	asrs	r3, r1, #5
 800cf52:	4298      	cmp	r0, r3
 800cf54:	b510      	push	{r4, lr}
 800cf56:	db11      	blt.n	800cf7c <__any_on+0x32>
 800cf58:	dd0a      	ble.n	800cf70 <__any_on+0x26>
 800cf5a:	f011 011f 	ands.w	r1, r1, #31
 800cf5e:	d007      	beq.n	800cf70 <__any_on+0x26>
 800cf60:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf64:	fa24 f001 	lsr.w	r0, r4, r1
 800cf68:	fa00 f101 	lsl.w	r1, r0, r1
 800cf6c:	428c      	cmp	r4, r1
 800cf6e:	d10b      	bne.n	800cf88 <__any_on+0x3e>
 800cf70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d803      	bhi.n	800cf80 <__any_on+0x36>
 800cf78:	2000      	movs	r0, #0
 800cf7a:	bd10      	pop	{r4, pc}
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	e7f7      	b.n	800cf70 <__any_on+0x26>
 800cf80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf84:	2900      	cmp	r1, #0
 800cf86:	d0f5      	beq.n	800cf74 <__any_on+0x2a>
 800cf88:	2001      	movs	r0, #1
 800cf8a:	e7f6      	b.n	800cf7a <__any_on+0x30>

0800cf8c <_calloc_r>:
 800cf8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf8e:	fba1 2402 	umull	r2, r4, r1, r2
 800cf92:	b94c      	cbnz	r4, 800cfa8 <_calloc_r+0x1c>
 800cf94:	4611      	mov	r1, r2
 800cf96:	9201      	str	r2, [sp, #4]
 800cf98:	f7fc fc62 	bl	8009860 <_malloc_r>
 800cf9c:	9a01      	ldr	r2, [sp, #4]
 800cf9e:	4605      	mov	r5, r0
 800cfa0:	b930      	cbnz	r0, 800cfb0 <_calloc_r+0x24>
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	b003      	add	sp, #12
 800cfa6:	bd30      	pop	{r4, r5, pc}
 800cfa8:	220c      	movs	r2, #12
 800cfaa:	6002      	str	r2, [r0, #0]
 800cfac:	2500      	movs	r5, #0
 800cfae:	e7f8      	b.n	800cfa2 <_calloc_r+0x16>
 800cfb0:	4621      	mov	r1, r4
 800cfb2:	f7fc fbe1 	bl	8009778 <memset>
 800cfb6:	e7f4      	b.n	800cfa2 <_calloc_r+0x16>

0800cfb8 <__ssputs_r>:
 800cfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfbc:	688e      	ldr	r6, [r1, #8]
 800cfbe:	429e      	cmp	r6, r3
 800cfc0:	4682      	mov	sl, r0
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	4690      	mov	r8, r2
 800cfc6:	461f      	mov	r7, r3
 800cfc8:	d838      	bhi.n	800d03c <__ssputs_r+0x84>
 800cfca:	898a      	ldrh	r2, [r1, #12]
 800cfcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cfd0:	d032      	beq.n	800d038 <__ssputs_r+0x80>
 800cfd2:	6825      	ldr	r5, [r4, #0]
 800cfd4:	6909      	ldr	r1, [r1, #16]
 800cfd6:	eba5 0901 	sub.w	r9, r5, r1
 800cfda:	6965      	ldr	r5, [r4, #20]
 800cfdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cfe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	444b      	add	r3, r9
 800cfe8:	106d      	asrs	r5, r5, #1
 800cfea:	429d      	cmp	r5, r3
 800cfec:	bf38      	it	cc
 800cfee:	461d      	movcc	r5, r3
 800cff0:	0553      	lsls	r3, r2, #21
 800cff2:	d531      	bpl.n	800d058 <__ssputs_r+0xa0>
 800cff4:	4629      	mov	r1, r5
 800cff6:	f7fc fc33 	bl	8009860 <_malloc_r>
 800cffa:	4606      	mov	r6, r0
 800cffc:	b950      	cbnz	r0, 800d014 <__ssputs_r+0x5c>
 800cffe:	230c      	movs	r3, #12
 800d000:	f8ca 3000 	str.w	r3, [sl]
 800d004:	89a3      	ldrh	r3, [r4, #12]
 800d006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	f04f 30ff 	mov.w	r0, #4294967295
 800d010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d014:	6921      	ldr	r1, [r4, #16]
 800d016:	464a      	mov	r2, r9
 800d018:	f7fc fba0 	bl	800975c <memcpy>
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d026:	81a3      	strh	r3, [r4, #12]
 800d028:	6126      	str	r6, [r4, #16]
 800d02a:	6165      	str	r5, [r4, #20]
 800d02c:	444e      	add	r6, r9
 800d02e:	eba5 0509 	sub.w	r5, r5, r9
 800d032:	6026      	str	r6, [r4, #0]
 800d034:	60a5      	str	r5, [r4, #8]
 800d036:	463e      	mov	r6, r7
 800d038:	42be      	cmp	r6, r7
 800d03a:	d900      	bls.n	800d03e <__ssputs_r+0x86>
 800d03c:	463e      	mov	r6, r7
 800d03e:	6820      	ldr	r0, [r4, #0]
 800d040:	4632      	mov	r2, r6
 800d042:	4641      	mov	r1, r8
 800d044:	f000 f971 	bl	800d32a <memmove>
 800d048:	68a3      	ldr	r3, [r4, #8]
 800d04a:	1b9b      	subs	r3, r3, r6
 800d04c:	60a3      	str	r3, [r4, #8]
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	4433      	add	r3, r6
 800d052:	6023      	str	r3, [r4, #0]
 800d054:	2000      	movs	r0, #0
 800d056:	e7db      	b.n	800d010 <__ssputs_r+0x58>
 800d058:	462a      	mov	r2, r5
 800d05a:	f000 f980 	bl	800d35e <_realloc_r>
 800d05e:	4606      	mov	r6, r0
 800d060:	2800      	cmp	r0, #0
 800d062:	d1e1      	bne.n	800d028 <__ssputs_r+0x70>
 800d064:	6921      	ldr	r1, [r4, #16]
 800d066:	4650      	mov	r0, sl
 800d068:	f7fc fb8e 	bl	8009788 <_free_r>
 800d06c:	e7c7      	b.n	800cffe <__ssputs_r+0x46>
	...

0800d070 <_svfiprintf_r>:
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	4698      	mov	r8, r3
 800d076:	898b      	ldrh	r3, [r1, #12]
 800d078:	061b      	lsls	r3, r3, #24
 800d07a:	b09d      	sub	sp, #116	; 0x74
 800d07c:	4607      	mov	r7, r0
 800d07e:	460d      	mov	r5, r1
 800d080:	4614      	mov	r4, r2
 800d082:	d50e      	bpl.n	800d0a2 <_svfiprintf_r+0x32>
 800d084:	690b      	ldr	r3, [r1, #16]
 800d086:	b963      	cbnz	r3, 800d0a2 <_svfiprintf_r+0x32>
 800d088:	2140      	movs	r1, #64	; 0x40
 800d08a:	f7fc fbe9 	bl	8009860 <_malloc_r>
 800d08e:	6028      	str	r0, [r5, #0]
 800d090:	6128      	str	r0, [r5, #16]
 800d092:	b920      	cbnz	r0, 800d09e <_svfiprintf_r+0x2e>
 800d094:	230c      	movs	r3, #12
 800d096:	603b      	str	r3, [r7, #0]
 800d098:	f04f 30ff 	mov.w	r0, #4294967295
 800d09c:	e0d1      	b.n	800d242 <_svfiprintf_r+0x1d2>
 800d09e:	2340      	movs	r3, #64	; 0x40
 800d0a0:	616b      	str	r3, [r5, #20]
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0a6:	2320      	movs	r3, #32
 800d0a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0b0:	2330      	movs	r3, #48	; 0x30
 800d0b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d25c <_svfiprintf_r+0x1ec>
 800d0b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0ba:	f04f 0901 	mov.w	r9, #1
 800d0be:	4623      	mov	r3, r4
 800d0c0:	469a      	mov	sl, r3
 800d0c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0c6:	b10a      	cbz	r2, 800d0cc <_svfiprintf_r+0x5c>
 800d0c8:	2a25      	cmp	r2, #37	; 0x25
 800d0ca:	d1f9      	bne.n	800d0c0 <_svfiprintf_r+0x50>
 800d0cc:	ebba 0b04 	subs.w	fp, sl, r4
 800d0d0:	d00b      	beq.n	800d0ea <_svfiprintf_r+0x7a>
 800d0d2:	465b      	mov	r3, fp
 800d0d4:	4622      	mov	r2, r4
 800d0d6:	4629      	mov	r1, r5
 800d0d8:	4638      	mov	r0, r7
 800d0da:	f7ff ff6d 	bl	800cfb8 <__ssputs_r>
 800d0de:	3001      	adds	r0, #1
 800d0e0:	f000 80aa 	beq.w	800d238 <_svfiprintf_r+0x1c8>
 800d0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0e6:	445a      	add	r2, fp
 800d0e8:	9209      	str	r2, [sp, #36]	; 0x24
 800d0ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f000 80a2 	beq.w	800d238 <_svfiprintf_r+0x1c8>
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0fe:	f10a 0a01 	add.w	sl, sl, #1
 800d102:	9304      	str	r3, [sp, #16]
 800d104:	9307      	str	r3, [sp, #28]
 800d106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d10a:	931a      	str	r3, [sp, #104]	; 0x68
 800d10c:	4654      	mov	r4, sl
 800d10e:	2205      	movs	r2, #5
 800d110:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d114:	4851      	ldr	r0, [pc, #324]	; (800d25c <_svfiprintf_r+0x1ec>)
 800d116:	f7f3 f89b 	bl	8000250 <memchr>
 800d11a:	9a04      	ldr	r2, [sp, #16]
 800d11c:	b9d8      	cbnz	r0, 800d156 <_svfiprintf_r+0xe6>
 800d11e:	06d0      	lsls	r0, r2, #27
 800d120:	bf44      	itt	mi
 800d122:	2320      	movmi	r3, #32
 800d124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d128:	0711      	lsls	r1, r2, #28
 800d12a:	bf44      	itt	mi
 800d12c:	232b      	movmi	r3, #43	; 0x2b
 800d12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d132:	f89a 3000 	ldrb.w	r3, [sl]
 800d136:	2b2a      	cmp	r3, #42	; 0x2a
 800d138:	d015      	beq.n	800d166 <_svfiprintf_r+0xf6>
 800d13a:	9a07      	ldr	r2, [sp, #28]
 800d13c:	4654      	mov	r4, sl
 800d13e:	2000      	movs	r0, #0
 800d140:	f04f 0c0a 	mov.w	ip, #10
 800d144:	4621      	mov	r1, r4
 800d146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d14a:	3b30      	subs	r3, #48	; 0x30
 800d14c:	2b09      	cmp	r3, #9
 800d14e:	d94e      	bls.n	800d1ee <_svfiprintf_r+0x17e>
 800d150:	b1b0      	cbz	r0, 800d180 <_svfiprintf_r+0x110>
 800d152:	9207      	str	r2, [sp, #28]
 800d154:	e014      	b.n	800d180 <_svfiprintf_r+0x110>
 800d156:	eba0 0308 	sub.w	r3, r0, r8
 800d15a:	fa09 f303 	lsl.w	r3, r9, r3
 800d15e:	4313      	orrs	r3, r2
 800d160:	9304      	str	r3, [sp, #16]
 800d162:	46a2      	mov	sl, r4
 800d164:	e7d2      	b.n	800d10c <_svfiprintf_r+0x9c>
 800d166:	9b03      	ldr	r3, [sp, #12]
 800d168:	1d19      	adds	r1, r3, #4
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	9103      	str	r1, [sp, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bfbb      	ittet	lt
 800d172:	425b      	neglt	r3, r3
 800d174:	f042 0202 	orrlt.w	r2, r2, #2
 800d178:	9307      	strge	r3, [sp, #28]
 800d17a:	9307      	strlt	r3, [sp, #28]
 800d17c:	bfb8      	it	lt
 800d17e:	9204      	strlt	r2, [sp, #16]
 800d180:	7823      	ldrb	r3, [r4, #0]
 800d182:	2b2e      	cmp	r3, #46	; 0x2e
 800d184:	d10c      	bne.n	800d1a0 <_svfiprintf_r+0x130>
 800d186:	7863      	ldrb	r3, [r4, #1]
 800d188:	2b2a      	cmp	r3, #42	; 0x2a
 800d18a:	d135      	bne.n	800d1f8 <_svfiprintf_r+0x188>
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	1d1a      	adds	r2, r3, #4
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	9203      	str	r2, [sp, #12]
 800d194:	2b00      	cmp	r3, #0
 800d196:	bfb8      	it	lt
 800d198:	f04f 33ff 	movlt.w	r3, #4294967295
 800d19c:	3402      	adds	r4, #2
 800d19e:	9305      	str	r3, [sp, #20]
 800d1a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d26c <_svfiprintf_r+0x1fc>
 800d1a4:	7821      	ldrb	r1, [r4, #0]
 800d1a6:	2203      	movs	r2, #3
 800d1a8:	4650      	mov	r0, sl
 800d1aa:	f7f3 f851 	bl	8000250 <memchr>
 800d1ae:	b140      	cbz	r0, 800d1c2 <_svfiprintf_r+0x152>
 800d1b0:	2340      	movs	r3, #64	; 0x40
 800d1b2:	eba0 000a 	sub.w	r0, r0, sl
 800d1b6:	fa03 f000 	lsl.w	r0, r3, r0
 800d1ba:	9b04      	ldr	r3, [sp, #16]
 800d1bc:	4303      	orrs	r3, r0
 800d1be:	3401      	adds	r4, #1
 800d1c0:	9304      	str	r3, [sp, #16]
 800d1c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c6:	4826      	ldr	r0, [pc, #152]	; (800d260 <_svfiprintf_r+0x1f0>)
 800d1c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1cc:	2206      	movs	r2, #6
 800d1ce:	f7f3 f83f 	bl	8000250 <memchr>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d038      	beq.n	800d248 <_svfiprintf_r+0x1d8>
 800d1d6:	4b23      	ldr	r3, [pc, #140]	; (800d264 <_svfiprintf_r+0x1f4>)
 800d1d8:	bb1b      	cbnz	r3, 800d222 <_svfiprintf_r+0x1b2>
 800d1da:	9b03      	ldr	r3, [sp, #12]
 800d1dc:	3307      	adds	r3, #7
 800d1de:	f023 0307 	bic.w	r3, r3, #7
 800d1e2:	3308      	adds	r3, #8
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e8:	4433      	add	r3, r6
 800d1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ec:	e767      	b.n	800d0be <_svfiprintf_r+0x4e>
 800d1ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	2001      	movs	r0, #1
 800d1f6:	e7a5      	b.n	800d144 <_svfiprintf_r+0xd4>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	3401      	adds	r4, #1
 800d1fc:	9305      	str	r3, [sp, #20]
 800d1fe:	4619      	mov	r1, r3
 800d200:	f04f 0c0a 	mov.w	ip, #10
 800d204:	4620      	mov	r0, r4
 800d206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d20a:	3a30      	subs	r2, #48	; 0x30
 800d20c:	2a09      	cmp	r2, #9
 800d20e:	d903      	bls.n	800d218 <_svfiprintf_r+0x1a8>
 800d210:	2b00      	cmp	r3, #0
 800d212:	d0c5      	beq.n	800d1a0 <_svfiprintf_r+0x130>
 800d214:	9105      	str	r1, [sp, #20]
 800d216:	e7c3      	b.n	800d1a0 <_svfiprintf_r+0x130>
 800d218:	fb0c 2101 	mla	r1, ip, r1, r2
 800d21c:	4604      	mov	r4, r0
 800d21e:	2301      	movs	r3, #1
 800d220:	e7f0      	b.n	800d204 <_svfiprintf_r+0x194>
 800d222:	ab03      	add	r3, sp, #12
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	462a      	mov	r2, r5
 800d228:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <_svfiprintf_r+0x1f8>)
 800d22a:	a904      	add	r1, sp, #16
 800d22c:	4638      	mov	r0, r7
 800d22e:	f7fc fc1b 	bl	8009a68 <_printf_float>
 800d232:	1c42      	adds	r2, r0, #1
 800d234:	4606      	mov	r6, r0
 800d236:	d1d6      	bne.n	800d1e6 <_svfiprintf_r+0x176>
 800d238:	89ab      	ldrh	r3, [r5, #12]
 800d23a:	065b      	lsls	r3, r3, #25
 800d23c:	f53f af2c 	bmi.w	800d098 <_svfiprintf_r+0x28>
 800d240:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d242:	b01d      	add	sp, #116	; 0x74
 800d244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d248:	ab03      	add	r3, sp, #12
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	462a      	mov	r2, r5
 800d24e:	4b06      	ldr	r3, [pc, #24]	; (800d268 <_svfiprintf_r+0x1f8>)
 800d250:	a904      	add	r1, sp, #16
 800d252:	4638      	mov	r0, r7
 800d254:	f7fc fe94 	bl	8009f80 <_printf_i>
 800d258:	e7eb      	b.n	800d232 <_svfiprintf_r+0x1c2>
 800d25a:	bf00      	nop
 800d25c:	0800e704 	.word	0x0800e704
 800d260:	0800e70e 	.word	0x0800e70e
 800d264:	08009a69 	.word	0x08009a69
 800d268:	0800cfb9 	.word	0x0800cfb9
 800d26c:	0800e70a 	.word	0x0800e70a

0800d270 <nan>:
 800d270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d278 <nan+0x8>
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	00000000 	.word	0x00000000
 800d27c:	7ff80000 	.word	0x7ff80000

0800d280 <strncmp>:
 800d280:	b510      	push	{r4, lr}
 800d282:	b17a      	cbz	r2, 800d2a4 <strncmp+0x24>
 800d284:	4603      	mov	r3, r0
 800d286:	3901      	subs	r1, #1
 800d288:	1884      	adds	r4, r0, r2
 800d28a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d28e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d292:	4290      	cmp	r0, r2
 800d294:	d101      	bne.n	800d29a <strncmp+0x1a>
 800d296:	42a3      	cmp	r3, r4
 800d298:	d101      	bne.n	800d29e <strncmp+0x1e>
 800d29a:	1a80      	subs	r0, r0, r2
 800d29c:	bd10      	pop	{r4, pc}
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	d1f3      	bne.n	800d28a <strncmp+0xa>
 800d2a2:	e7fa      	b.n	800d29a <strncmp+0x1a>
 800d2a4:	4610      	mov	r0, r2
 800d2a6:	e7f9      	b.n	800d29c <strncmp+0x1c>

0800d2a8 <__ascii_wctomb>:
 800d2a8:	b149      	cbz	r1, 800d2be <__ascii_wctomb+0x16>
 800d2aa:	2aff      	cmp	r2, #255	; 0xff
 800d2ac:	bf85      	ittet	hi
 800d2ae:	238a      	movhi	r3, #138	; 0x8a
 800d2b0:	6003      	strhi	r3, [r0, #0]
 800d2b2:	700a      	strbls	r2, [r1, #0]
 800d2b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2b8:	bf98      	it	ls
 800d2ba:	2001      	movls	r0, #1
 800d2bc:	4770      	bx	lr
 800d2be:	4608      	mov	r0, r1
 800d2c0:	4770      	bx	lr
	...

0800d2c4 <__assert_func>:
 800d2c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2c6:	4614      	mov	r4, r2
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <__assert_func+0x2c>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4605      	mov	r5, r0
 800d2d0:	68d8      	ldr	r0, [r3, #12]
 800d2d2:	b14c      	cbz	r4, 800d2e8 <__assert_func+0x24>
 800d2d4:	4b07      	ldr	r3, [pc, #28]	; (800d2f4 <__assert_func+0x30>)
 800d2d6:	9100      	str	r1, [sp, #0]
 800d2d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2dc:	4906      	ldr	r1, [pc, #24]	; (800d2f8 <__assert_func+0x34>)
 800d2de:	462b      	mov	r3, r5
 800d2e0:	f000 f80e 	bl	800d300 <fiprintf>
 800d2e4:	f000 fa84 	bl	800d7f0 <abort>
 800d2e8:	4b04      	ldr	r3, [pc, #16]	; (800d2fc <__assert_func+0x38>)
 800d2ea:	461c      	mov	r4, r3
 800d2ec:	e7f3      	b.n	800d2d6 <__assert_func+0x12>
 800d2ee:	bf00      	nop
 800d2f0:	2000018c 	.word	0x2000018c
 800d2f4:	0800e715 	.word	0x0800e715
 800d2f8:	0800e722 	.word	0x0800e722
 800d2fc:	0800e750 	.word	0x0800e750

0800d300 <fiprintf>:
 800d300:	b40e      	push	{r1, r2, r3}
 800d302:	b503      	push	{r0, r1, lr}
 800d304:	4601      	mov	r1, r0
 800d306:	ab03      	add	r3, sp, #12
 800d308:	4805      	ldr	r0, [pc, #20]	; (800d320 <fiprintf+0x20>)
 800d30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d30e:	6800      	ldr	r0, [r0, #0]
 800d310:	9301      	str	r3, [sp, #4]
 800d312:	f000 f87d 	bl	800d410 <_vfiprintf_r>
 800d316:	b002      	add	sp, #8
 800d318:	f85d eb04 	ldr.w	lr, [sp], #4
 800d31c:	b003      	add	sp, #12
 800d31e:	4770      	bx	lr
 800d320:	2000018c 	.word	0x2000018c

0800d324 <__retarget_lock_init_recursive>:
 800d324:	4770      	bx	lr

0800d326 <__retarget_lock_acquire_recursive>:
 800d326:	4770      	bx	lr

0800d328 <__retarget_lock_release_recursive>:
 800d328:	4770      	bx	lr

0800d32a <memmove>:
 800d32a:	4288      	cmp	r0, r1
 800d32c:	b510      	push	{r4, lr}
 800d32e:	eb01 0402 	add.w	r4, r1, r2
 800d332:	d902      	bls.n	800d33a <memmove+0x10>
 800d334:	4284      	cmp	r4, r0
 800d336:	4623      	mov	r3, r4
 800d338:	d807      	bhi.n	800d34a <memmove+0x20>
 800d33a:	1e43      	subs	r3, r0, #1
 800d33c:	42a1      	cmp	r1, r4
 800d33e:	d008      	beq.n	800d352 <memmove+0x28>
 800d340:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d344:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d348:	e7f8      	b.n	800d33c <memmove+0x12>
 800d34a:	4402      	add	r2, r0
 800d34c:	4601      	mov	r1, r0
 800d34e:	428a      	cmp	r2, r1
 800d350:	d100      	bne.n	800d354 <memmove+0x2a>
 800d352:	bd10      	pop	{r4, pc}
 800d354:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d358:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d35c:	e7f7      	b.n	800d34e <memmove+0x24>

0800d35e <_realloc_r>:
 800d35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d362:	4680      	mov	r8, r0
 800d364:	4614      	mov	r4, r2
 800d366:	460e      	mov	r6, r1
 800d368:	b921      	cbnz	r1, 800d374 <_realloc_r+0x16>
 800d36a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d36e:	4611      	mov	r1, r2
 800d370:	f7fc ba76 	b.w	8009860 <_malloc_r>
 800d374:	b92a      	cbnz	r2, 800d382 <_realloc_r+0x24>
 800d376:	f7fc fa07 	bl	8009788 <_free_r>
 800d37a:	4625      	mov	r5, r4
 800d37c:	4628      	mov	r0, r5
 800d37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d382:	f000 fc59 	bl	800dc38 <_malloc_usable_size_r>
 800d386:	4284      	cmp	r4, r0
 800d388:	4607      	mov	r7, r0
 800d38a:	d802      	bhi.n	800d392 <_realloc_r+0x34>
 800d38c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d390:	d812      	bhi.n	800d3b8 <_realloc_r+0x5a>
 800d392:	4621      	mov	r1, r4
 800d394:	4640      	mov	r0, r8
 800d396:	f7fc fa63 	bl	8009860 <_malloc_r>
 800d39a:	4605      	mov	r5, r0
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d0ed      	beq.n	800d37c <_realloc_r+0x1e>
 800d3a0:	42bc      	cmp	r4, r7
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	4631      	mov	r1, r6
 800d3a6:	bf28      	it	cs
 800d3a8:	463a      	movcs	r2, r7
 800d3aa:	f7fc f9d7 	bl	800975c <memcpy>
 800d3ae:	4631      	mov	r1, r6
 800d3b0:	4640      	mov	r0, r8
 800d3b2:	f7fc f9e9 	bl	8009788 <_free_r>
 800d3b6:	e7e1      	b.n	800d37c <_realloc_r+0x1e>
 800d3b8:	4635      	mov	r5, r6
 800d3ba:	e7df      	b.n	800d37c <_realloc_r+0x1e>

0800d3bc <__sfputc_r>:
 800d3bc:	6893      	ldr	r3, [r2, #8]
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	b410      	push	{r4}
 800d3c4:	6093      	str	r3, [r2, #8]
 800d3c6:	da08      	bge.n	800d3da <__sfputc_r+0x1e>
 800d3c8:	6994      	ldr	r4, [r2, #24]
 800d3ca:	42a3      	cmp	r3, r4
 800d3cc:	db01      	blt.n	800d3d2 <__sfputc_r+0x16>
 800d3ce:	290a      	cmp	r1, #10
 800d3d0:	d103      	bne.n	800d3da <__sfputc_r+0x1e>
 800d3d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3d6:	f000 b94b 	b.w	800d670 <__swbuf_r>
 800d3da:	6813      	ldr	r3, [r2, #0]
 800d3dc:	1c58      	adds	r0, r3, #1
 800d3de:	6010      	str	r0, [r2, #0]
 800d3e0:	7019      	strb	r1, [r3, #0]
 800d3e2:	4608      	mov	r0, r1
 800d3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <__sfputs_r>:
 800d3ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	460f      	mov	r7, r1
 800d3f0:	4614      	mov	r4, r2
 800d3f2:	18d5      	adds	r5, r2, r3
 800d3f4:	42ac      	cmp	r4, r5
 800d3f6:	d101      	bne.n	800d3fc <__sfputs_r+0x12>
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	e007      	b.n	800d40c <__sfputs_r+0x22>
 800d3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d400:	463a      	mov	r2, r7
 800d402:	4630      	mov	r0, r6
 800d404:	f7ff ffda 	bl	800d3bc <__sfputc_r>
 800d408:	1c43      	adds	r3, r0, #1
 800d40a:	d1f3      	bne.n	800d3f4 <__sfputs_r+0xa>
 800d40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d410 <_vfiprintf_r>:
 800d410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d414:	460d      	mov	r5, r1
 800d416:	b09d      	sub	sp, #116	; 0x74
 800d418:	4614      	mov	r4, r2
 800d41a:	4698      	mov	r8, r3
 800d41c:	4606      	mov	r6, r0
 800d41e:	b118      	cbz	r0, 800d428 <_vfiprintf_r+0x18>
 800d420:	6983      	ldr	r3, [r0, #24]
 800d422:	b90b      	cbnz	r3, 800d428 <_vfiprintf_r+0x18>
 800d424:	f000 fb06 	bl	800da34 <__sinit>
 800d428:	4b89      	ldr	r3, [pc, #548]	; (800d650 <_vfiprintf_r+0x240>)
 800d42a:	429d      	cmp	r5, r3
 800d42c:	d11b      	bne.n	800d466 <_vfiprintf_r+0x56>
 800d42e:	6875      	ldr	r5, [r6, #4]
 800d430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d432:	07d9      	lsls	r1, r3, #31
 800d434:	d405      	bmi.n	800d442 <_vfiprintf_r+0x32>
 800d436:	89ab      	ldrh	r3, [r5, #12]
 800d438:	059a      	lsls	r2, r3, #22
 800d43a:	d402      	bmi.n	800d442 <_vfiprintf_r+0x32>
 800d43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d43e:	f7ff ff72 	bl	800d326 <__retarget_lock_acquire_recursive>
 800d442:	89ab      	ldrh	r3, [r5, #12]
 800d444:	071b      	lsls	r3, r3, #28
 800d446:	d501      	bpl.n	800d44c <_vfiprintf_r+0x3c>
 800d448:	692b      	ldr	r3, [r5, #16]
 800d44a:	b9eb      	cbnz	r3, 800d488 <_vfiprintf_r+0x78>
 800d44c:	4629      	mov	r1, r5
 800d44e:	4630      	mov	r0, r6
 800d450:	f000 f960 	bl	800d714 <__swsetup_r>
 800d454:	b1c0      	cbz	r0, 800d488 <_vfiprintf_r+0x78>
 800d456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d458:	07dc      	lsls	r4, r3, #31
 800d45a:	d50e      	bpl.n	800d47a <_vfiprintf_r+0x6a>
 800d45c:	f04f 30ff 	mov.w	r0, #4294967295
 800d460:	b01d      	add	sp, #116	; 0x74
 800d462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d466:	4b7b      	ldr	r3, [pc, #492]	; (800d654 <_vfiprintf_r+0x244>)
 800d468:	429d      	cmp	r5, r3
 800d46a:	d101      	bne.n	800d470 <_vfiprintf_r+0x60>
 800d46c:	68b5      	ldr	r5, [r6, #8]
 800d46e:	e7df      	b.n	800d430 <_vfiprintf_r+0x20>
 800d470:	4b79      	ldr	r3, [pc, #484]	; (800d658 <_vfiprintf_r+0x248>)
 800d472:	429d      	cmp	r5, r3
 800d474:	bf08      	it	eq
 800d476:	68f5      	ldreq	r5, [r6, #12]
 800d478:	e7da      	b.n	800d430 <_vfiprintf_r+0x20>
 800d47a:	89ab      	ldrh	r3, [r5, #12]
 800d47c:	0598      	lsls	r0, r3, #22
 800d47e:	d4ed      	bmi.n	800d45c <_vfiprintf_r+0x4c>
 800d480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d482:	f7ff ff51 	bl	800d328 <__retarget_lock_release_recursive>
 800d486:	e7e9      	b.n	800d45c <_vfiprintf_r+0x4c>
 800d488:	2300      	movs	r3, #0
 800d48a:	9309      	str	r3, [sp, #36]	; 0x24
 800d48c:	2320      	movs	r3, #32
 800d48e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d492:	f8cd 800c 	str.w	r8, [sp, #12]
 800d496:	2330      	movs	r3, #48	; 0x30
 800d498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d65c <_vfiprintf_r+0x24c>
 800d49c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4a0:	f04f 0901 	mov.w	r9, #1
 800d4a4:	4623      	mov	r3, r4
 800d4a6:	469a      	mov	sl, r3
 800d4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4ac:	b10a      	cbz	r2, 800d4b2 <_vfiprintf_r+0xa2>
 800d4ae:	2a25      	cmp	r2, #37	; 0x25
 800d4b0:	d1f9      	bne.n	800d4a6 <_vfiprintf_r+0x96>
 800d4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d4b6:	d00b      	beq.n	800d4d0 <_vfiprintf_r+0xc0>
 800d4b8:	465b      	mov	r3, fp
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	4629      	mov	r1, r5
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7ff ff93 	bl	800d3ea <__sfputs_r>
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	f000 80aa 	beq.w	800d61e <_vfiprintf_r+0x20e>
 800d4ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4cc:	445a      	add	r2, fp
 800d4ce:	9209      	str	r2, [sp, #36]	; 0x24
 800d4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	f000 80a2 	beq.w	800d61e <_vfiprintf_r+0x20e>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4e4:	f10a 0a01 	add.w	sl, sl, #1
 800d4e8:	9304      	str	r3, [sp, #16]
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d4f2:	4654      	mov	r4, sl
 800d4f4:	2205      	movs	r2, #5
 800d4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4fa:	4858      	ldr	r0, [pc, #352]	; (800d65c <_vfiprintf_r+0x24c>)
 800d4fc:	f7f2 fea8 	bl	8000250 <memchr>
 800d500:	9a04      	ldr	r2, [sp, #16]
 800d502:	b9d8      	cbnz	r0, 800d53c <_vfiprintf_r+0x12c>
 800d504:	06d1      	lsls	r1, r2, #27
 800d506:	bf44      	itt	mi
 800d508:	2320      	movmi	r3, #32
 800d50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d50e:	0713      	lsls	r3, r2, #28
 800d510:	bf44      	itt	mi
 800d512:	232b      	movmi	r3, #43	; 0x2b
 800d514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d518:	f89a 3000 	ldrb.w	r3, [sl]
 800d51c:	2b2a      	cmp	r3, #42	; 0x2a
 800d51e:	d015      	beq.n	800d54c <_vfiprintf_r+0x13c>
 800d520:	9a07      	ldr	r2, [sp, #28]
 800d522:	4654      	mov	r4, sl
 800d524:	2000      	movs	r0, #0
 800d526:	f04f 0c0a 	mov.w	ip, #10
 800d52a:	4621      	mov	r1, r4
 800d52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d530:	3b30      	subs	r3, #48	; 0x30
 800d532:	2b09      	cmp	r3, #9
 800d534:	d94e      	bls.n	800d5d4 <_vfiprintf_r+0x1c4>
 800d536:	b1b0      	cbz	r0, 800d566 <_vfiprintf_r+0x156>
 800d538:	9207      	str	r2, [sp, #28]
 800d53a:	e014      	b.n	800d566 <_vfiprintf_r+0x156>
 800d53c:	eba0 0308 	sub.w	r3, r0, r8
 800d540:	fa09 f303 	lsl.w	r3, r9, r3
 800d544:	4313      	orrs	r3, r2
 800d546:	9304      	str	r3, [sp, #16]
 800d548:	46a2      	mov	sl, r4
 800d54a:	e7d2      	b.n	800d4f2 <_vfiprintf_r+0xe2>
 800d54c:	9b03      	ldr	r3, [sp, #12]
 800d54e:	1d19      	adds	r1, r3, #4
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	9103      	str	r1, [sp, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	bfbb      	ittet	lt
 800d558:	425b      	neglt	r3, r3
 800d55a:	f042 0202 	orrlt.w	r2, r2, #2
 800d55e:	9307      	strge	r3, [sp, #28]
 800d560:	9307      	strlt	r3, [sp, #28]
 800d562:	bfb8      	it	lt
 800d564:	9204      	strlt	r2, [sp, #16]
 800d566:	7823      	ldrb	r3, [r4, #0]
 800d568:	2b2e      	cmp	r3, #46	; 0x2e
 800d56a:	d10c      	bne.n	800d586 <_vfiprintf_r+0x176>
 800d56c:	7863      	ldrb	r3, [r4, #1]
 800d56e:	2b2a      	cmp	r3, #42	; 0x2a
 800d570:	d135      	bne.n	800d5de <_vfiprintf_r+0x1ce>
 800d572:	9b03      	ldr	r3, [sp, #12]
 800d574:	1d1a      	adds	r2, r3, #4
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	9203      	str	r2, [sp, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	bfb8      	it	lt
 800d57e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d582:	3402      	adds	r4, #2
 800d584:	9305      	str	r3, [sp, #20]
 800d586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d66c <_vfiprintf_r+0x25c>
 800d58a:	7821      	ldrb	r1, [r4, #0]
 800d58c:	2203      	movs	r2, #3
 800d58e:	4650      	mov	r0, sl
 800d590:	f7f2 fe5e 	bl	8000250 <memchr>
 800d594:	b140      	cbz	r0, 800d5a8 <_vfiprintf_r+0x198>
 800d596:	2340      	movs	r3, #64	; 0x40
 800d598:	eba0 000a 	sub.w	r0, r0, sl
 800d59c:	fa03 f000 	lsl.w	r0, r3, r0
 800d5a0:	9b04      	ldr	r3, [sp, #16]
 800d5a2:	4303      	orrs	r3, r0
 800d5a4:	3401      	adds	r4, #1
 800d5a6:	9304      	str	r3, [sp, #16]
 800d5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ac:	482c      	ldr	r0, [pc, #176]	; (800d660 <_vfiprintf_r+0x250>)
 800d5ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5b2:	2206      	movs	r2, #6
 800d5b4:	f7f2 fe4c 	bl	8000250 <memchr>
 800d5b8:	2800      	cmp	r0, #0
 800d5ba:	d03f      	beq.n	800d63c <_vfiprintf_r+0x22c>
 800d5bc:	4b29      	ldr	r3, [pc, #164]	; (800d664 <_vfiprintf_r+0x254>)
 800d5be:	bb1b      	cbnz	r3, 800d608 <_vfiprintf_r+0x1f8>
 800d5c0:	9b03      	ldr	r3, [sp, #12]
 800d5c2:	3307      	adds	r3, #7
 800d5c4:	f023 0307 	bic.w	r3, r3, #7
 800d5c8:	3308      	adds	r3, #8
 800d5ca:	9303      	str	r3, [sp, #12]
 800d5cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5ce:	443b      	add	r3, r7
 800d5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d2:	e767      	b.n	800d4a4 <_vfiprintf_r+0x94>
 800d5d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5d8:	460c      	mov	r4, r1
 800d5da:	2001      	movs	r0, #1
 800d5dc:	e7a5      	b.n	800d52a <_vfiprintf_r+0x11a>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	3401      	adds	r4, #1
 800d5e2:	9305      	str	r3, [sp, #20]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	f04f 0c0a 	mov.w	ip, #10
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5f0:	3a30      	subs	r2, #48	; 0x30
 800d5f2:	2a09      	cmp	r2, #9
 800d5f4:	d903      	bls.n	800d5fe <_vfiprintf_r+0x1ee>
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d0c5      	beq.n	800d586 <_vfiprintf_r+0x176>
 800d5fa:	9105      	str	r1, [sp, #20]
 800d5fc:	e7c3      	b.n	800d586 <_vfiprintf_r+0x176>
 800d5fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800d602:	4604      	mov	r4, r0
 800d604:	2301      	movs	r3, #1
 800d606:	e7f0      	b.n	800d5ea <_vfiprintf_r+0x1da>
 800d608:	ab03      	add	r3, sp, #12
 800d60a:	9300      	str	r3, [sp, #0]
 800d60c:	462a      	mov	r2, r5
 800d60e:	4b16      	ldr	r3, [pc, #88]	; (800d668 <_vfiprintf_r+0x258>)
 800d610:	a904      	add	r1, sp, #16
 800d612:	4630      	mov	r0, r6
 800d614:	f7fc fa28 	bl	8009a68 <_printf_float>
 800d618:	4607      	mov	r7, r0
 800d61a:	1c78      	adds	r0, r7, #1
 800d61c:	d1d6      	bne.n	800d5cc <_vfiprintf_r+0x1bc>
 800d61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d620:	07d9      	lsls	r1, r3, #31
 800d622:	d405      	bmi.n	800d630 <_vfiprintf_r+0x220>
 800d624:	89ab      	ldrh	r3, [r5, #12]
 800d626:	059a      	lsls	r2, r3, #22
 800d628:	d402      	bmi.n	800d630 <_vfiprintf_r+0x220>
 800d62a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d62c:	f7ff fe7c 	bl	800d328 <__retarget_lock_release_recursive>
 800d630:	89ab      	ldrh	r3, [r5, #12]
 800d632:	065b      	lsls	r3, r3, #25
 800d634:	f53f af12 	bmi.w	800d45c <_vfiprintf_r+0x4c>
 800d638:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d63a:	e711      	b.n	800d460 <_vfiprintf_r+0x50>
 800d63c:	ab03      	add	r3, sp, #12
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	462a      	mov	r2, r5
 800d642:	4b09      	ldr	r3, [pc, #36]	; (800d668 <_vfiprintf_r+0x258>)
 800d644:	a904      	add	r1, sp, #16
 800d646:	4630      	mov	r0, r6
 800d648:	f7fc fc9a 	bl	8009f80 <_printf_i>
 800d64c:	e7e4      	b.n	800d618 <_vfiprintf_r+0x208>
 800d64e:	bf00      	nop
 800d650:	0800e774 	.word	0x0800e774
 800d654:	0800e794 	.word	0x0800e794
 800d658:	0800e754 	.word	0x0800e754
 800d65c:	0800e704 	.word	0x0800e704
 800d660:	0800e70e 	.word	0x0800e70e
 800d664:	08009a69 	.word	0x08009a69
 800d668:	0800d3eb 	.word	0x0800d3eb
 800d66c:	0800e70a 	.word	0x0800e70a

0800d670 <__swbuf_r>:
 800d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d672:	460e      	mov	r6, r1
 800d674:	4614      	mov	r4, r2
 800d676:	4605      	mov	r5, r0
 800d678:	b118      	cbz	r0, 800d682 <__swbuf_r+0x12>
 800d67a:	6983      	ldr	r3, [r0, #24]
 800d67c:	b90b      	cbnz	r3, 800d682 <__swbuf_r+0x12>
 800d67e:	f000 f9d9 	bl	800da34 <__sinit>
 800d682:	4b21      	ldr	r3, [pc, #132]	; (800d708 <__swbuf_r+0x98>)
 800d684:	429c      	cmp	r4, r3
 800d686:	d12b      	bne.n	800d6e0 <__swbuf_r+0x70>
 800d688:	686c      	ldr	r4, [r5, #4]
 800d68a:	69a3      	ldr	r3, [r4, #24]
 800d68c:	60a3      	str	r3, [r4, #8]
 800d68e:	89a3      	ldrh	r3, [r4, #12]
 800d690:	071a      	lsls	r2, r3, #28
 800d692:	d52f      	bpl.n	800d6f4 <__swbuf_r+0x84>
 800d694:	6923      	ldr	r3, [r4, #16]
 800d696:	b36b      	cbz	r3, 800d6f4 <__swbuf_r+0x84>
 800d698:	6923      	ldr	r3, [r4, #16]
 800d69a:	6820      	ldr	r0, [r4, #0]
 800d69c:	1ac0      	subs	r0, r0, r3
 800d69e:	6963      	ldr	r3, [r4, #20]
 800d6a0:	b2f6      	uxtb	r6, r6
 800d6a2:	4283      	cmp	r3, r0
 800d6a4:	4637      	mov	r7, r6
 800d6a6:	dc04      	bgt.n	800d6b2 <__swbuf_r+0x42>
 800d6a8:	4621      	mov	r1, r4
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	f000 f92e 	bl	800d90c <_fflush_r>
 800d6b0:	bb30      	cbnz	r0, 800d700 <__swbuf_r+0x90>
 800d6b2:	68a3      	ldr	r3, [r4, #8]
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	60a3      	str	r3, [r4, #8]
 800d6b8:	6823      	ldr	r3, [r4, #0]
 800d6ba:	1c5a      	adds	r2, r3, #1
 800d6bc:	6022      	str	r2, [r4, #0]
 800d6be:	701e      	strb	r6, [r3, #0]
 800d6c0:	6963      	ldr	r3, [r4, #20]
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	4283      	cmp	r3, r0
 800d6c6:	d004      	beq.n	800d6d2 <__swbuf_r+0x62>
 800d6c8:	89a3      	ldrh	r3, [r4, #12]
 800d6ca:	07db      	lsls	r3, r3, #31
 800d6cc:	d506      	bpl.n	800d6dc <__swbuf_r+0x6c>
 800d6ce:	2e0a      	cmp	r6, #10
 800d6d0:	d104      	bne.n	800d6dc <__swbuf_r+0x6c>
 800d6d2:	4621      	mov	r1, r4
 800d6d4:	4628      	mov	r0, r5
 800d6d6:	f000 f919 	bl	800d90c <_fflush_r>
 800d6da:	b988      	cbnz	r0, 800d700 <__swbuf_r+0x90>
 800d6dc:	4638      	mov	r0, r7
 800d6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6e0:	4b0a      	ldr	r3, [pc, #40]	; (800d70c <__swbuf_r+0x9c>)
 800d6e2:	429c      	cmp	r4, r3
 800d6e4:	d101      	bne.n	800d6ea <__swbuf_r+0x7a>
 800d6e6:	68ac      	ldr	r4, [r5, #8]
 800d6e8:	e7cf      	b.n	800d68a <__swbuf_r+0x1a>
 800d6ea:	4b09      	ldr	r3, [pc, #36]	; (800d710 <__swbuf_r+0xa0>)
 800d6ec:	429c      	cmp	r4, r3
 800d6ee:	bf08      	it	eq
 800d6f0:	68ec      	ldreq	r4, [r5, #12]
 800d6f2:	e7ca      	b.n	800d68a <__swbuf_r+0x1a>
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	f000 f80c 	bl	800d714 <__swsetup_r>
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d0cb      	beq.n	800d698 <__swbuf_r+0x28>
 800d700:	f04f 37ff 	mov.w	r7, #4294967295
 800d704:	e7ea      	b.n	800d6dc <__swbuf_r+0x6c>
 800d706:	bf00      	nop
 800d708:	0800e774 	.word	0x0800e774
 800d70c:	0800e794 	.word	0x0800e794
 800d710:	0800e754 	.word	0x0800e754

0800d714 <__swsetup_r>:
 800d714:	4b32      	ldr	r3, [pc, #200]	; (800d7e0 <__swsetup_r+0xcc>)
 800d716:	b570      	push	{r4, r5, r6, lr}
 800d718:	681d      	ldr	r5, [r3, #0]
 800d71a:	4606      	mov	r6, r0
 800d71c:	460c      	mov	r4, r1
 800d71e:	b125      	cbz	r5, 800d72a <__swsetup_r+0x16>
 800d720:	69ab      	ldr	r3, [r5, #24]
 800d722:	b913      	cbnz	r3, 800d72a <__swsetup_r+0x16>
 800d724:	4628      	mov	r0, r5
 800d726:	f000 f985 	bl	800da34 <__sinit>
 800d72a:	4b2e      	ldr	r3, [pc, #184]	; (800d7e4 <__swsetup_r+0xd0>)
 800d72c:	429c      	cmp	r4, r3
 800d72e:	d10f      	bne.n	800d750 <__swsetup_r+0x3c>
 800d730:	686c      	ldr	r4, [r5, #4]
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d738:	0719      	lsls	r1, r3, #28
 800d73a:	d42c      	bmi.n	800d796 <__swsetup_r+0x82>
 800d73c:	06dd      	lsls	r5, r3, #27
 800d73e:	d411      	bmi.n	800d764 <__swsetup_r+0x50>
 800d740:	2309      	movs	r3, #9
 800d742:	6033      	str	r3, [r6, #0]
 800d744:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d748:	81a3      	strh	r3, [r4, #12]
 800d74a:	f04f 30ff 	mov.w	r0, #4294967295
 800d74e:	e03e      	b.n	800d7ce <__swsetup_r+0xba>
 800d750:	4b25      	ldr	r3, [pc, #148]	; (800d7e8 <__swsetup_r+0xd4>)
 800d752:	429c      	cmp	r4, r3
 800d754:	d101      	bne.n	800d75a <__swsetup_r+0x46>
 800d756:	68ac      	ldr	r4, [r5, #8]
 800d758:	e7eb      	b.n	800d732 <__swsetup_r+0x1e>
 800d75a:	4b24      	ldr	r3, [pc, #144]	; (800d7ec <__swsetup_r+0xd8>)
 800d75c:	429c      	cmp	r4, r3
 800d75e:	bf08      	it	eq
 800d760:	68ec      	ldreq	r4, [r5, #12]
 800d762:	e7e6      	b.n	800d732 <__swsetup_r+0x1e>
 800d764:	0758      	lsls	r0, r3, #29
 800d766:	d512      	bpl.n	800d78e <__swsetup_r+0x7a>
 800d768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d76a:	b141      	cbz	r1, 800d77e <__swsetup_r+0x6a>
 800d76c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d770:	4299      	cmp	r1, r3
 800d772:	d002      	beq.n	800d77a <__swsetup_r+0x66>
 800d774:	4630      	mov	r0, r6
 800d776:	f7fc f807 	bl	8009788 <_free_r>
 800d77a:	2300      	movs	r3, #0
 800d77c:	6363      	str	r3, [r4, #52]	; 0x34
 800d77e:	89a3      	ldrh	r3, [r4, #12]
 800d780:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d784:	81a3      	strh	r3, [r4, #12]
 800d786:	2300      	movs	r3, #0
 800d788:	6063      	str	r3, [r4, #4]
 800d78a:	6923      	ldr	r3, [r4, #16]
 800d78c:	6023      	str	r3, [r4, #0]
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	f043 0308 	orr.w	r3, r3, #8
 800d794:	81a3      	strh	r3, [r4, #12]
 800d796:	6923      	ldr	r3, [r4, #16]
 800d798:	b94b      	cbnz	r3, 800d7ae <__swsetup_r+0x9a>
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d7a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d7a4:	d003      	beq.n	800d7ae <__swsetup_r+0x9a>
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	4630      	mov	r0, r6
 800d7aa:	f000 fa05 	bl	800dbb8 <__smakebuf_r>
 800d7ae:	89a0      	ldrh	r0, [r4, #12]
 800d7b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7b4:	f010 0301 	ands.w	r3, r0, #1
 800d7b8:	d00a      	beq.n	800d7d0 <__swsetup_r+0xbc>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	60a3      	str	r3, [r4, #8]
 800d7be:	6963      	ldr	r3, [r4, #20]
 800d7c0:	425b      	negs	r3, r3
 800d7c2:	61a3      	str	r3, [r4, #24]
 800d7c4:	6923      	ldr	r3, [r4, #16]
 800d7c6:	b943      	cbnz	r3, 800d7da <__swsetup_r+0xc6>
 800d7c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7cc:	d1ba      	bne.n	800d744 <__swsetup_r+0x30>
 800d7ce:	bd70      	pop	{r4, r5, r6, pc}
 800d7d0:	0781      	lsls	r1, r0, #30
 800d7d2:	bf58      	it	pl
 800d7d4:	6963      	ldrpl	r3, [r4, #20]
 800d7d6:	60a3      	str	r3, [r4, #8]
 800d7d8:	e7f4      	b.n	800d7c4 <__swsetup_r+0xb0>
 800d7da:	2000      	movs	r0, #0
 800d7dc:	e7f7      	b.n	800d7ce <__swsetup_r+0xba>
 800d7de:	bf00      	nop
 800d7e0:	2000018c 	.word	0x2000018c
 800d7e4:	0800e774 	.word	0x0800e774
 800d7e8:	0800e794 	.word	0x0800e794
 800d7ec:	0800e754 	.word	0x0800e754

0800d7f0 <abort>:
 800d7f0:	b508      	push	{r3, lr}
 800d7f2:	2006      	movs	r0, #6
 800d7f4:	f000 fa50 	bl	800dc98 <raise>
 800d7f8:	2001      	movs	r0, #1
 800d7fa:	f7f4 fc7f 	bl	80020fc <_exit>
	...

0800d800 <__sflush_r>:
 800d800:	898a      	ldrh	r2, [r1, #12]
 800d802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d806:	4605      	mov	r5, r0
 800d808:	0710      	lsls	r0, r2, #28
 800d80a:	460c      	mov	r4, r1
 800d80c:	d458      	bmi.n	800d8c0 <__sflush_r+0xc0>
 800d80e:	684b      	ldr	r3, [r1, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	dc05      	bgt.n	800d820 <__sflush_r+0x20>
 800d814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d816:	2b00      	cmp	r3, #0
 800d818:	dc02      	bgt.n	800d820 <__sflush_r+0x20>
 800d81a:	2000      	movs	r0, #0
 800d81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d822:	2e00      	cmp	r6, #0
 800d824:	d0f9      	beq.n	800d81a <__sflush_r+0x1a>
 800d826:	2300      	movs	r3, #0
 800d828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d82c:	682f      	ldr	r7, [r5, #0]
 800d82e:	602b      	str	r3, [r5, #0]
 800d830:	d032      	beq.n	800d898 <__sflush_r+0x98>
 800d832:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d834:	89a3      	ldrh	r3, [r4, #12]
 800d836:	075a      	lsls	r2, r3, #29
 800d838:	d505      	bpl.n	800d846 <__sflush_r+0x46>
 800d83a:	6863      	ldr	r3, [r4, #4]
 800d83c:	1ac0      	subs	r0, r0, r3
 800d83e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d840:	b10b      	cbz	r3, 800d846 <__sflush_r+0x46>
 800d842:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d844:	1ac0      	subs	r0, r0, r3
 800d846:	2300      	movs	r3, #0
 800d848:	4602      	mov	r2, r0
 800d84a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d84c:	6a21      	ldr	r1, [r4, #32]
 800d84e:	4628      	mov	r0, r5
 800d850:	47b0      	blx	r6
 800d852:	1c43      	adds	r3, r0, #1
 800d854:	89a3      	ldrh	r3, [r4, #12]
 800d856:	d106      	bne.n	800d866 <__sflush_r+0x66>
 800d858:	6829      	ldr	r1, [r5, #0]
 800d85a:	291d      	cmp	r1, #29
 800d85c:	d82c      	bhi.n	800d8b8 <__sflush_r+0xb8>
 800d85e:	4a2a      	ldr	r2, [pc, #168]	; (800d908 <__sflush_r+0x108>)
 800d860:	40ca      	lsrs	r2, r1
 800d862:	07d6      	lsls	r6, r2, #31
 800d864:	d528      	bpl.n	800d8b8 <__sflush_r+0xb8>
 800d866:	2200      	movs	r2, #0
 800d868:	6062      	str	r2, [r4, #4]
 800d86a:	04d9      	lsls	r1, r3, #19
 800d86c:	6922      	ldr	r2, [r4, #16]
 800d86e:	6022      	str	r2, [r4, #0]
 800d870:	d504      	bpl.n	800d87c <__sflush_r+0x7c>
 800d872:	1c42      	adds	r2, r0, #1
 800d874:	d101      	bne.n	800d87a <__sflush_r+0x7a>
 800d876:	682b      	ldr	r3, [r5, #0]
 800d878:	b903      	cbnz	r3, 800d87c <__sflush_r+0x7c>
 800d87a:	6560      	str	r0, [r4, #84]	; 0x54
 800d87c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d87e:	602f      	str	r7, [r5, #0]
 800d880:	2900      	cmp	r1, #0
 800d882:	d0ca      	beq.n	800d81a <__sflush_r+0x1a>
 800d884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d888:	4299      	cmp	r1, r3
 800d88a:	d002      	beq.n	800d892 <__sflush_r+0x92>
 800d88c:	4628      	mov	r0, r5
 800d88e:	f7fb ff7b 	bl	8009788 <_free_r>
 800d892:	2000      	movs	r0, #0
 800d894:	6360      	str	r0, [r4, #52]	; 0x34
 800d896:	e7c1      	b.n	800d81c <__sflush_r+0x1c>
 800d898:	6a21      	ldr	r1, [r4, #32]
 800d89a:	2301      	movs	r3, #1
 800d89c:	4628      	mov	r0, r5
 800d89e:	47b0      	blx	r6
 800d8a0:	1c41      	adds	r1, r0, #1
 800d8a2:	d1c7      	bne.n	800d834 <__sflush_r+0x34>
 800d8a4:	682b      	ldr	r3, [r5, #0]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0c4      	beq.n	800d834 <__sflush_r+0x34>
 800d8aa:	2b1d      	cmp	r3, #29
 800d8ac:	d001      	beq.n	800d8b2 <__sflush_r+0xb2>
 800d8ae:	2b16      	cmp	r3, #22
 800d8b0:	d101      	bne.n	800d8b6 <__sflush_r+0xb6>
 800d8b2:	602f      	str	r7, [r5, #0]
 800d8b4:	e7b1      	b.n	800d81a <__sflush_r+0x1a>
 800d8b6:	89a3      	ldrh	r3, [r4, #12]
 800d8b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8bc:	81a3      	strh	r3, [r4, #12]
 800d8be:	e7ad      	b.n	800d81c <__sflush_r+0x1c>
 800d8c0:	690f      	ldr	r7, [r1, #16]
 800d8c2:	2f00      	cmp	r7, #0
 800d8c4:	d0a9      	beq.n	800d81a <__sflush_r+0x1a>
 800d8c6:	0793      	lsls	r3, r2, #30
 800d8c8:	680e      	ldr	r6, [r1, #0]
 800d8ca:	bf08      	it	eq
 800d8cc:	694b      	ldreq	r3, [r1, #20]
 800d8ce:	600f      	str	r7, [r1, #0]
 800d8d0:	bf18      	it	ne
 800d8d2:	2300      	movne	r3, #0
 800d8d4:	eba6 0807 	sub.w	r8, r6, r7
 800d8d8:	608b      	str	r3, [r1, #8]
 800d8da:	f1b8 0f00 	cmp.w	r8, #0
 800d8de:	dd9c      	ble.n	800d81a <__sflush_r+0x1a>
 800d8e0:	6a21      	ldr	r1, [r4, #32]
 800d8e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8e4:	4643      	mov	r3, r8
 800d8e6:	463a      	mov	r2, r7
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	47b0      	blx	r6
 800d8ec:	2800      	cmp	r0, #0
 800d8ee:	dc06      	bgt.n	800d8fe <__sflush_r+0xfe>
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8f6:	81a3      	strh	r3, [r4, #12]
 800d8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fc:	e78e      	b.n	800d81c <__sflush_r+0x1c>
 800d8fe:	4407      	add	r7, r0
 800d900:	eba8 0800 	sub.w	r8, r8, r0
 800d904:	e7e9      	b.n	800d8da <__sflush_r+0xda>
 800d906:	bf00      	nop
 800d908:	20400001 	.word	0x20400001

0800d90c <_fflush_r>:
 800d90c:	b538      	push	{r3, r4, r5, lr}
 800d90e:	690b      	ldr	r3, [r1, #16]
 800d910:	4605      	mov	r5, r0
 800d912:	460c      	mov	r4, r1
 800d914:	b913      	cbnz	r3, 800d91c <_fflush_r+0x10>
 800d916:	2500      	movs	r5, #0
 800d918:	4628      	mov	r0, r5
 800d91a:	bd38      	pop	{r3, r4, r5, pc}
 800d91c:	b118      	cbz	r0, 800d926 <_fflush_r+0x1a>
 800d91e:	6983      	ldr	r3, [r0, #24]
 800d920:	b90b      	cbnz	r3, 800d926 <_fflush_r+0x1a>
 800d922:	f000 f887 	bl	800da34 <__sinit>
 800d926:	4b14      	ldr	r3, [pc, #80]	; (800d978 <_fflush_r+0x6c>)
 800d928:	429c      	cmp	r4, r3
 800d92a:	d11b      	bne.n	800d964 <_fflush_r+0x58>
 800d92c:	686c      	ldr	r4, [r5, #4]
 800d92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d0ef      	beq.n	800d916 <_fflush_r+0xa>
 800d936:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d938:	07d0      	lsls	r0, r2, #31
 800d93a:	d404      	bmi.n	800d946 <_fflush_r+0x3a>
 800d93c:	0599      	lsls	r1, r3, #22
 800d93e:	d402      	bmi.n	800d946 <_fflush_r+0x3a>
 800d940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d942:	f7ff fcf0 	bl	800d326 <__retarget_lock_acquire_recursive>
 800d946:	4628      	mov	r0, r5
 800d948:	4621      	mov	r1, r4
 800d94a:	f7ff ff59 	bl	800d800 <__sflush_r>
 800d94e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d950:	07da      	lsls	r2, r3, #31
 800d952:	4605      	mov	r5, r0
 800d954:	d4e0      	bmi.n	800d918 <_fflush_r+0xc>
 800d956:	89a3      	ldrh	r3, [r4, #12]
 800d958:	059b      	lsls	r3, r3, #22
 800d95a:	d4dd      	bmi.n	800d918 <_fflush_r+0xc>
 800d95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d95e:	f7ff fce3 	bl	800d328 <__retarget_lock_release_recursive>
 800d962:	e7d9      	b.n	800d918 <_fflush_r+0xc>
 800d964:	4b05      	ldr	r3, [pc, #20]	; (800d97c <_fflush_r+0x70>)
 800d966:	429c      	cmp	r4, r3
 800d968:	d101      	bne.n	800d96e <_fflush_r+0x62>
 800d96a:	68ac      	ldr	r4, [r5, #8]
 800d96c:	e7df      	b.n	800d92e <_fflush_r+0x22>
 800d96e:	4b04      	ldr	r3, [pc, #16]	; (800d980 <_fflush_r+0x74>)
 800d970:	429c      	cmp	r4, r3
 800d972:	bf08      	it	eq
 800d974:	68ec      	ldreq	r4, [r5, #12]
 800d976:	e7da      	b.n	800d92e <_fflush_r+0x22>
 800d978:	0800e774 	.word	0x0800e774
 800d97c:	0800e794 	.word	0x0800e794
 800d980:	0800e754 	.word	0x0800e754

0800d984 <std>:
 800d984:	2300      	movs	r3, #0
 800d986:	b510      	push	{r4, lr}
 800d988:	4604      	mov	r4, r0
 800d98a:	e9c0 3300 	strd	r3, r3, [r0]
 800d98e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d992:	6083      	str	r3, [r0, #8]
 800d994:	8181      	strh	r1, [r0, #12]
 800d996:	6643      	str	r3, [r0, #100]	; 0x64
 800d998:	81c2      	strh	r2, [r0, #14]
 800d99a:	6183      	str	r3, [r0, #24]
 800d99c:	4619      	mov	r1, r3
 800d99e:	2208      	movs	r2, #8
 800d9a0:	305c      	adds	r0, #92	; 0x5c
 800d9a2:	f7fb fee9 	bl	8009778 <memset>
 800d9a6:	4b05      	ldr	r3, [pc, #20]	; (800d9bc <std+0x38>)
 800d9a8:	6263      	str	r3, [r4, #36]	; 0x24
 800d9aa:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <std+0x3c>)
 800d9ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9ae:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <std+0x40>)
 800d9b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9b2:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <std+0x44>)
 800d9b4:	6224      	str	r4, [r4, #32]
 800d9b6:	6323      	str	r3, [r4, #48]	; 0x30
 800d9b8:	bd10      	pop	{r4, pc}
 800d9ba:	bf00      	nop
 800d9bc:	0800dcd1 	.word	0x0800dcd1
 800d9c0:	0800dcf3 	.word	0x0800dcf3
 800d9c4:	0800dd2b 	.word	0x0800dd2b
 800d9c8:	0800dd4f 	.word	0x0800dd4f

0800d9cc <_cleanup_r>:
 800d9cc:	4901      	ldr	r1, [pc, #4]	; (800d9d4 <_cleanup_r+0x8>)
 800d9ce:	f000 b8af 	b.w	800db30 <_fwalk_reent>
 800d9d2:	bf00      	nop
 800d9d4:	0800d90d 	.word	0x0800d90d

0800d9d8 <__sfmoreglue>:
 800d9d8:	b570      	push	{r4, r5, r6, lr}
 800d9da:	2268      	movs	r2, #104	; 0x68
 800d9dc:	1e4d      	subs	r5, r1, #1
 800d9de:	4355      	muls	r5, r2
 800d9e0:	460e      	mov	r6, r1
 800d9e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d9e6:	f7fb ff3b 	bl	8009860 <_malloc_r>
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	b140      	cbz	r0, 800da00 <__sfmoreglue+0x28>
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	e9c0 1600 	strd	r1, r6, [r0]
 800d9f4:	300c      	adds	r0, #12
 800d9f6:	60a0      	str	r0, [r4, #8]
 800d9f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d9fc:	f7fb febc 	bl	8009778 <memset>
 800da00:	4620      	mov	r0, r4
 800da02:	bd70      	pop	{r4, r5, r6, pc}

0800da04 <__sfp_lock_acquire>:
 800da04:	4801      	ldr	r0, [pc, #4]	; (800da0c <__sfp_lock_acquire+0x8>)
 800da06:	f7ff bc8e 	b.w	800d326 <__retarget_lock_acquire_recursive>
 800da0a:	bf00      	nop
 800da0c:	20000b31 	.word	0x20000b31

0800da10 <__sfp_lock_release>:
 800da10:	4801      	ldr	r0, [pc, #4]	; (800da18 <__sfp_lock_release+0x8>)
 800da12:	f7ff bc89 	b.w	800d328 <__retarget_lock_release_recursive>
 800da16:	bf00      	nop
 800da18:	20000b31 	.word	0x20000b31

0800da1c <__sinit_lock_acquire>:
 800da1c:	4801      	ldr	r0, [pc, #4]	; (800da24 <__sinit_lock_acquire+0x8>)
 800da1e:	f7ff bc82 	b.w	800d326 <__retarget_lock_acquire_recursive>
 800da22:	bf00      	nop
 800da24:	20000b32 	.word	0x20000b32

0800da28 <__sinit_lock_release>:
 800da28:	4801      	ldr	r0, [pc, #4]	; (800da30 <__sinit_lock_release+0x8>)
 800da2a:	f7ff bc7d 	b.w	800d328 <__retarget_lock_release_recursive>
 800da2e:	bf00      	nop
 800da30:	20000b32 	.word	0x20000b32

0800da34 <__sinit>:
 800da34:	b510      	push	{r4, lr}
 800da36:	4604      	mov	r4, r0
 800da38:	f7ff fff0 	bl	800da1c <__sinit_lock_acquire>
 800da3c:	69a3      	ldr	r3, [r4, #24]
 800da3e:	b11b      	cbz	r3, 800da48 <__sinit+0x14>
 800da40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da44:	f7ff bff0 	b.w	800da28 <__sinit_lock_release>
 800da48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da4c:	6523      	str	r3, [r4, #80]	; 0x50
 800da4e:	4b13      	ldr	r3, [pc, #76]	; (800da9c <__sinit+0x68>)
 800da50:	4a13      	ldr	r2, [pc, #76]	; (800daa0 <__sinit+0x6c>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	62a2      	str	r2, [r4, #40]	; 0x28
 800da56:	42a3      	cmp	r3, r4
 800da58:	bf04      	itt	eq
 800da5a:	2301      	moveq	r3, #1
 800da5c:	61a3      	streq	r3, [r4, #24]
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 f820 	bl	800daa4 <__sfp>
 800da64:	6060      	str	r0, [r4, #4]
 800da66:	4620      	mov	r0, r4
 800da68:	f000 f81c 	bl	800daa4 <__sfp>
 800da6c:	60a0      	str	r0, [r4, #8]
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 f818 	bl	800daa4 <__sfp>
 800da74:	2200      	movs	r2, #0
 800da76:	60e0      	str	r0, [r4, #12]
 800da78:	2104      	movs	r1, #4
 800da7a:	6860      	ldr	r0, [r4, #4]
 800da7c:	f7ff ff82 	bl	800d984 <std>
 800da80:	68a0      	ldr	r0, [r4, #8]
 800da82:	2201      	movs	r2, #1
 800da84:	2109      	movs	r1, #9
 800da86:	f7ff ff7d 	bl	800d984 <std>
 800da8a:	68e0      	ldr	r0, [r4, #12]
 800da8c:	2202      	movs	r2, #2
 800da8e:	2112      	movs	r1, #18
 800da90:	f7ff ff78 	bl	800d984 <std>
 800da94:	2301      	movs	r3, #1
 800da96:	61a3      	str	r3, [r4, #24]
 800da98:	e7d2      	b.n	800da40 <__sinit+0xc>
 800da9a:	bf00      	nop
 800da9c:	0800e310 	.word	0x0800e310
 800daa0:	0800d9cd 	.word	0x0800d9cd

0800daa4 <__sfp>:
 800daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa6:	4607      	mov	r7, r0
 800daa8:	f7ff ffac 	bl	800da04 <__sfp_lock_acquire>
 800daac:	4b1e      	ldr	r3, [pc, #120]	; (800db28 <__sfp+0x84>)
 800daae:	681e      	ldr	r6, [r3, #0]
 800dab0:	69b3      	ldr	r3, [r6, #24]
 800dab2:	b913      	cbnz	r3, 800daba <__sfp+0x16>
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7ff ffbd 	bl	800da34 <__sinit>
 800daba:	3648      	adds	r6, #72	; 0x48
 800dabc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dac0:	3b01      	subs	r3, #1
 800dac2:	d503      	bpl.n	800dacc <__sfp+0x28>
 800dac4:	6833      	ldr	r3, [r6, #0]
 800dac6:	b30b      	cbz	r3, 800db0c <__sfp+0x68>
 800dac8:	6836      	ldr	r6, [r6, #0]
 800daca:	e7f7      	b.n	800dabc <__sfp+0x18>
 800dacc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dad0:	b9d5      	cbnz	r5, 800db08 <__sfp+0x64>
 800dad2:	4b16      	ldr	r3, [pc, #88]	; (800db2c <__sfp+0x88>)
 800dad4:	60e3      	str	r3, [r4, #12]
 800dad6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dada:	6665      	str	r5, [r4, #100]	; 0x64
 800dadc:	f7ff fc22 	bl	800d324 <__retarget_lock_init_recursive>
 800dae0:	f7ff ff96 	bl	800da10 <__sfp_lock_release>
 800dae4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dae8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800daec:	6025      	str	r5, [r4, #0]
 800daee:	61a5      	str	r5, [r4, #24]
 800daf0:	2208      	movs	r2, #8
 800daf2:	4629      	mov	r1, r5
 800daf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800daf8:	f7fb fe3e 	bl	8009778 <memset>
 800dafc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db04:	4620      	mov	r0, r4
 800db06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db08:	3468      	adds	r4, #104	; 0x68
 800db0a:	e7d9      	b.n	800dac0 <__sfp+0x1c>
 800db0c:	2104      	movs	r1, #4
 800db0e:	4638      	mov	r0, r7
 800db10:	f7ff ff62 	bl	800d9d8 <__sfmoreglue>
 800db14:	4604      	mov	r4, r0
 800db16:	6030      	str	r0, [r6, #0]
 800db18:	2800      	cmp	r0, #0
 800db1a:	d1d5      	bne.n	800dac8 <__sfp+0x24>
 800db1c:	f7ff ff78 	bl	800da10 <__sfp_lock_release>
 800db20:	230c      	movs	r3, #12
 800db22:	603b      	str	r3, [r7, #0]
 800db24:	e7ee      	b.n	800db04 <__sfp+0x60>
 800db26:	bf00      	nop
 800db28:	0800e310 	.word	0x0800e310
 800db2c:	ffff0001 	.word	0xffff0001

0800db30 <_fwalk_reent>:
 800db30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db34:	4606      	mov	r6, r0
 800db36:	4688      	mov	r8, r1
 800db38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db3c:	2700      	movs	r7, #0
 800db3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db42:	f1b9 0901 	subs.w	r9, r9, #1
 800db46:	d505      	bpl.n	800db54 <_fwalk_reent+0x24>
 800db48:	6824      	ldr	r4, [r4, #0]
 800db4a:	2c00      	cmp	r4, #0
 800db4c:	d1f7      	bne.n	800db3e <_fwalk_reent+0xe>
 800db4e:	4638      	mov	r0, r7
 800db50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db54:	89ab      	ldrh	r3, [r5, #12]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d907      	bls.n	800db6a <_fwalk_reent+0x3a>
 800db5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db5e:	3301      	adds	r3, #1
 800db60:	d003      	beq.n	800db6a <_fwalk_reent+0x3a>
 800db62:	4629      	mov	r1, r5
 800db64:	4630      	mov	r0, r6
 800db66:	47c0      	blx	r8
 800db68:	4307      	orrs	r7, r0
 800db6a:	3568      	adds	r5, #104	; 0x68
 800db6c:	e7e9      	b.n	800db42 <_fwalk_reent+0x12>

0800db6e <__swhatbuf_r>:
 800db6e:	b570      	push	{r4, r5, r6, lr}
 800db70:	460e      	mov	r6, r1
 800db72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db76:	2900      	cmp	r1, #0
 800db78:	b096      	sub	sp, #88	; 0x58
 800db7a:	4614      	mov	r4, r2
 800db7c:	461d      	mov	r5, r3
 800db7e:	da08      	bge.n	800db92 <__swhatbuf_r+0x24>
 800db80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	602a      	str	r2, [r5, #0]
 800db88:	061a      	lsls	r2, r3, #24
 800db8a:	d410      	bmi.n	800dbae <__swhatbuf_r+0x40>
 800db8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db90:	e00e      	b.n	800dbb0 <__swhatbuf_r+0x42>
 800db92:	466a      	mov	r2, sp
 800db94:	f000 f902 	bl	800dd9c <_fstat_r>
 800db98:	2800      	cmp	r0, #0
 800db9a:	dbf1      	blt.n	800db80 <__swhatbuf_r+0x12>
 800db9c:	9a01      	ldr	r2, [sp, #4]
 800db9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dba6:	425a      	negs	r2, r3
 800dba8:	415a      	adcs	r2, r3
 800dbaa:	602a      	str	r2, [r5, #0]
 800dbac:	e7ee      	b.n	800db8c <__swhatbuf_r+0x1e>
 800dbae:	2340      	movs	r3, #64	; 0x40
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	6023      	str	r3, [r4, #0]
 800dbb4:	b016      	add	sp, #88	; 0x58
 800dbb6:	bd70      	pop	{r4, r5, r6, pc}

0800dbb8 <__smakebuf_r>:
 800dbb8:	898b      	ldrh	r3, [r1, #12]
 800dbba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbbc:	079d      	lsls	r5, r3, #30
 800dbbe:	4606      	mov	r6, r0
 800dbc0:	460c      	mov	r4, r1
 800dbc2:	d507      	bpl.n	800dbd4 <__smakebuf_r+0x1c>
 800dbc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbc8:	6023      	str	r3, [r4, #0]
 800dbca:	6123      	str	r3, [r4, #16]
 800dbcc:	2301      	movs	r3, #1
 800dbce:	6163      	str	r3, [r4, #20]
 800dbd0:	b002      	add	sp, #8
 800dbd2:	bd70      	pop	{r4, r5, r6, pc}
 800dbd4:	ab01      	add	r3, sp, #4
 800dbd6:	466a      	mov	r2, sp
 800dbd8:	f7ff ffc9 	bl	800db6e <__swhatbuf_r>
 800dbdc:	9900      	ldr	r1, [sp, #0]
 800dbde:	4605      	mov	r5, r0
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f7fb fe3d 	bl	8009860 <_malloc_r>
 800dbe6:	b948      	cbnz	r0, 800dbfc <__smakebuf_r+0x44>
 800dbe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbec:	059a      	lsls	r2, r3, #22
 800dbee:	d4ef      	bmi.n	800dbd0 <__smakebuf_r+0x18>
 800dbf0:	f023 0303 	bic.w	r3, r3, #3
 800dbf4:	f043 0302 	orr.w	r3, r3, #2
 800dbf8:	81a3      	strh	r3, [r4, #12]
 800dbfa:	e7e3      	b.n	800dbc4 <__smakebuf_r+0xc>
 800dbfc:	4b0d      	ldr	r3, [pc, #52]	; (800dc34 <__smakebuf_r+0x7c>)
 800dbfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	6020      	str	r0, [r4, #0]
 800dc04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc08:	81a3      	strh	r3, [r4, #12]
 800dc0a:	9b00      	ldr	r3, [sp, #0]
 800dc0c:	6163      	str	r3, [r4, #20]
 800dc0e:	9b01      	ldr	r3, [sp, #4]
 800dc10:	6120      	str	r0, [r4, #16]
 800dc12:	b15b      	cbz	r3, 800dc2c <__smakebuf_r+0x74>
 800dc14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f000 f8d1 	bl	800ddc0 <_isatty_r>
 800dc1e:	b128      	cbz	r0, 800dc2c <__smakebuf_r+0x74>
 800dc20:	89a3      	ldrh	r3, [r4, #12]
 800dc22:	f023 0303 	bic.w	r3, r3, #3
 800dc26:	f043 0301 	orr.w	r3, r3, #1
 800dc2a:	81a3      	strh	r3, [r4, #12]
 800dc2c:	89a0      	ldrh	r0, [r4, #12]
 800dc2e:	4305      	orrs	r5, r0
 800dc30:	81a5      	strh	r5, [r4, #12]
 800dc32:	e7cd      	b.n	800dbd0 <__smakebuf_r+0x18>
 800dc34:	0800d9cd 	.word	0x0800d9cd

0800dc38 <_malloc_usable_size_r>:
 800dc38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc3c:	1f18      	subs	r0, r3, #4
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	bfbc      	itt	lt
 800dc42:	580b      	ldrlt	r3, [r1, r0]
 800dc44:	18c0      	addlt	r0, r0, r3
 800dc46:	4770      	bx	lr

0800dc48 <_raise_r>:
 800dc48:	291f      	cmp	r1, #31
 800dc4a:	b538      	push	{r3, r4, r5, lr}
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	460d      	mov	r5, r1
 800dc50:	d904      	bls.n	800dc5c <_raise_r+0x14>
 800dc52:	2316      	movs	r3, #22
 800dc54:	6003      	str	r3, [r0, #0]
 800dc56:	f04f 30ff 	mov.w	r0, #4294967295
 800dc5a:	bd38      	pop	{r3, r4, r5, pc}
 800dc5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dc5e:	b112      	cbz	r2, 800dc66 <_raise_r+0x1e>
 800dc60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc64:	b94b      	cbnz	r3, 800dc7a <_raise_r+0x32>
 800dc66:	4620      	mov	r0, r4
 800dc68:	f000 f830 	bl	800dccc <_getpid_r>
 800dc6c:	462a      	mov	r2, r5
 800dc6e:	4601      	mov	r1, r0
 800dc70:	4620      	mov	r0, r4
 800dc72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc76:	f000 b817 	b.w	800dca8 <_kill_r>
 800dc7a:	2b01      	cmp	r3, #1
 800dc7c:	d00a      	beq.n	800dc94 <_raise_r+0x4c>
 800dc7e:	1c59      	adds	r1, r3, #1
 800dc80:	d103      	bne.n	800dc8a <_raise_r+0x42>
 800dc82:	2316      	movs	r3, #22
 800dc84:	6003      	str	r3, [r0, #0]
 800dc86:	2001      	movs	r0, #1
 800dc88:	e7e7      	b.n	800dc5a <_raise_r+0x12>
 800dc8a:	2400      	movs	r4, #0
 800dc8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc90:	4628      	mov	r0, r5
 800dc92:	4798      	blx	r3
 800dc94:	2000      	movs	r0, #0
 800dc96:	e7e0      	b.n	800dc5a <_raise_r+0x12>

0800dc98 <raise>:
 800dc98:	4b02      	ldr	r3, [pc, #8]	; (800dca4 <raise+0xc>)
 800dc9a:	4601      	mov	r1, r0
 800dc9c:	6818      	ldr	r0, [r3, #0]
 800dc9e:	f7ff bfd3 	b.w	800dc48 <_raise_r>
 800dca2:	bf00      	nop
 800dca4:	2000018c 	.word	0x2000018c

0800dca8 <_kill_r>:
 800dca8:	b538      	push	{r3, r4, r5, lr}
 800dcaa:	4d07      	ldr	r5, [pc, #28]	; (800dcc8 <_kill_r+0x20>)
 800dcac:	2300      	movs	r3, #0
 800dcae:	4604      	mov	r4, r0
 800dcb0:	4608      	mov	r0, r1
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	602b      	str	r3, [r5, #0]
 800dcb6:	f7f4 fa11 	bl	80020dc <_kill>
 800dcba:	1c43      	adds	r3, r0, #1
 800dcbc:	d102      	bne.n	800dcc4 <_kill_r+0x1c>
 800dcbe:	682b      	ldr	r3, [r5, #0]
 800dcc0:	b103      	cbz	r3, 800dcc4 <_kill_r+0x1c>
 800dcc2:	6023      	str	r3, [r4, #0]
 800dcc4:	bd38      	pop	{r3, r4, r5, pc}
 800dcc6:	bf00      	nop
 800dcc8:	20000b2c 	.word	0x20000b2c

0800dccc <_getpid_r>:
 800dccc:	f7f4 b9fe 	b.w	80020cc <_getpid>

0800dcd0 <__sread>:
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcd8:	f000 f894 	bl	800de04 <_read_r>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	bfab      	itete	ge
 800dce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dce2:	89a3      	ldrhlt	r3, [r4, #12]
 800dce4:	181b      	addge	r3, r3, r0
 800dce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcea:	bfac      	ite	ge
 800dcec:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcee:	81a3      	strhlt	r3, [r4, #12]
 800dcf0:	bd10      	pop	{r4, pc}

0800dcf2 <__swrite>:
 800dcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf6:	461f      	mov	r7, r3
 800dcf8:	898b      	ldrh	r3, [r1, #12]
 800dcfa:	05db      	lsls	r3, r3, #23
 800dcfc:	4605      	mov	r5, r0
 800dcfe:	460c      	mov	r4, r1
 800dd00:	4616      	mov	r6, r2
 800dd02:	d505      	bpl.n	800dd10 <__swrite+0x1e>
 800dd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd08:	2302      	movs	r3, #2
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	f000 f868 	bl	800dde0 <_lseek_r>
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	4632      	mov	r2, r6
 800dd1e:	463b      	mov	r3, r7
 800dd20:	4628      	mov	r0, r5
 800dd22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd26:	f000 b817 	b.w	800dd58 <_write_r>

0800dd2a <__sseek>:
 800dd2a:	b510      	push	{r4, lr}
 800dd2c:	460c      	mov	r4, r1
 800dd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd32:	f000 f855 	bl	800dde0 <_lseek_r>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	89a3      	ldrh	r3, [r4, #12]
 800dd3a:	bf15      	itete	ne
 800dd3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd46:	81a3      	strheq	r3, [r4, #12]
 800dd48:	bf18      	it	ne
 800dd4a:	81a3      	strhne	r3, [r4, #12]
 800dd4c:	bd10      	pop	{r4, pc}

0800dd4e <__sclose>:
 800dd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd52:	f000 b813 	b.w	800dd7c <_close_r>
	...

0800dd58 <_write_r>:
 800dd58:	b538      	push	{r3, r4, r5, lr}
 800dd5a:	4d07      	ldr	r5, [pc, #28]	; (800dd78 <_write_r+0x20>)
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	4608      	mov	r0, r1
 800dd60:	4611      	mov	r1, r2
 800dd62:	2200      	movs	r2, #0
 800dd64:	602a      	str	r2, [r5, #0]
 800dd66:	461a      	mov	r2, r3
 800dd68:	f7f4 f9ef 	bl	800214a <_write>
 800dd6c:	1c43      	adds	r3, r0, #1
 800dd6e:	d102      	bne.n	800dd76 <_write_r+0x1e>
 800dd70:	682b      	ldr	r3, [r5, #0]
 800dd72:	b103      	cbz	r3, 800dd76 <_write_r+0x1e>
 800dd74:	6023      	str	r3, [r4, #0]
 800dd76:	bd38      	pop	{r3, r4, r5, pc}
 800dd78:	20000b2c 	.word	0x20000b2c

0800dd7c <_close_r>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	4d06      	ldr	r5, [pc, #24]	; (800dd98 <_close_r+0x1c>)
 800dd80:	2300      	movs	r3, #0
 800dd82:	4604      	mov	r4, r0
 800dd84:	4608      	mov	r0, r1
 800dd86:	602b      	str	r3, [r5, #0]
 800dd88:	f7f4 f9fb 	bl	8002182 <_close>
 800dd8c:	1c43      	adds	r3, r0, #1
 800dd8e:	d102      	bne.n	800dd96 <_close_r+0x1a>
 800dd90:	682b      	ldr	r3, [r5, #0]
 800dd92:	b103      	cbz	r3, 800dd96 <_close_r+0x1a>
 800dd94:	6023      	str	r3, [r4, #0]
 800dd96:	bd38      	pop	{r3, r4, r5, pc}
 800dd98:	20000b2c 	.word	0x20000b2c

0800dd9c <_fstat_r>:
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4d07      	ldr	r5, [pc, #28]	; (800ddbc <_fstat_r+0x20>)
 800dda0:	2300      	movs	r3, #0
 800dda2:	4604      	mov	r4, r0
 800dda4:	4608      	mov	r0, r1
 800dda6:	4611      	mov	r1, r2
 800dda8:	602b      	str	r3, [r5, #0]
 800ddaa:	f7f4 f9f6 	bl	800219a <_fstat>
 800ddae:	1c43      	adds	r3, r0, #1
 800ddb0:	d102      	bne.n	800ddb8 <_fstat_r+0x1c>
 800ddb2:	682b      	ldr	r3, [r5, #0]
 800ddb4:	b103      	cbz	r3, 800ddb8 <_fstat_r+0x1c>
 800ddb6:	6023      	str	r3, [r4, #0]
 800ddb8:	bd38      	pop	{r3, r4, r5, pc}
 800ddba:	bf00      	nop
 800ddbc:	20000b2c 	.word	0x20000b2c

0800ddc0 <_isatty_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4d06      	ldr	r5, [pc, #24]	; (800dddc <_isatty_r+0x1c>)
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4608      	mov	r0, r1
 800ddca:	602b      	str	r3, [r5, #0]
 800ddcc:	f7f4 f9f5 	bl	80021ba <_isatty>
 800ddd0:	1c43      	adds	r3, r0, #1
 800ddd2:	d102      	bne.n	800ddda <_isatty_r+0x1a>
 800ddd4:	682b      	ldr	r3, [r5, #0]
 800ddd6:	b103      	cbz	r3, 800ddda <_isatty_r+0x1a>
 800ddd8:	6023      	str	r3, [r4, #0]
 800ddda:	bd38      	pop	{r3, r4, r5, pc}
 800dddc:	20000b2c 	.word	0x20000b2c

0800dde0 <_lseek_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4d07      	ldr	r5, [pc, #28]	; (800de00 <_lseek_r+0x20>)
 800dde4:	4604      	mov	r4, r0
 800dde6:	4608      	mov	r0, r1
 800dde8:	4611      	mov	r1, r2
 800ddea:	2200      	movs	r2, #0
 800ddec:	602a      	str	r2, [r5, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	f7f4 f9ee 	bl	80021d0 <_lseek>
 800ddf4:	1c43      	adds	r3, r0, #1
 800ddf6:	d102      	bne.n	800ddfe <_lseek_r+0x1e>
 800ddf8:	682b      	ldr	r3, [r5, #0]
 800ddfa:	b103      	cbz	r3, 800ddfe <_lseek_r+0x1e>
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	bd38      	pop	{r3, r4, r5, pc}
 800de00:	20000b2c 	.word	0x20000b2c

0800de04 <_read_r>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4d07      	ldr	r5, [pc, #28]	; (800de24 <_read_r+0x20>)
 800de08:	4604      	mov	r4, r0
 800de0a:	4608      	mov	r0, r1
 800de0c:	4611      	mov	r1, r2
 800de0e:	2200      	movs	r2, #0
 800de10:	602a      	str	r2, [r5, #0]
 800de12:	461a      	mov	r2, r3
 800de14:	f7f4 f97c 	bl	8002110 <_read>
 800de18:	1c43      	adds	r3, r0, #1
 800de1a:	d102      	bne.n	800de22 <_read_r+0x1e>
 800de1c:	682b      	ldr	r3, [r5, #0]
 800de1e:	b103      	cbz	r3, 800de22 <_read_r+0x1e>
 800de20:	6023      	str	r3, [r4, #0]
 800de22:	bd38      	pop	{r3, r4, r5, pc}
 800de24:	20000b2c 	.word	0x20000b2c

0800de28 <_init>:
 800de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2a:	bf00      	nop
 800de2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de2e:	bc08      	pop	{r3}
 800de30:	469e      	mov	lr, r3
 800de32:	4770      	bx	lr

0800de34 <_fini>:
 800de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de36:	bf00      	nop
 800de38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de3a:	bc08      	pop	{r3}
 800de3c:	469e      	mov	lr, r3
 800de3e:	4770      	bx	lr
