
SBGC32_MimicControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5b8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  0800b7b8  0800b7b8  0001b7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800beec  0800beec  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800beec  0800beec  0001beec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bef4  0800bef4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef4  0800bef4  0001bef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef8  0800bef8  0001bef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800befc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001f0  0800c0ec  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  0800c0ec  00020478  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6b1  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b31  00000000  00000000  0003b8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001398  00000000  00000000  0003f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00040798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4e9  00000000  00000000  00041988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b29a  00000000  00000000  0006de71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010826f  00000000  00000000  0008910b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019137a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000631c  00000000  00000000  001913cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b7a0 	.word	0x0800b7a0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0800b7a0 	.word	0x0800b7a0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <MX_ADC1_Init+0xb8>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <MX_ADC1_Init+0xbc>)
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a3e:	f000 ff87 	bl	8001950 <HAL_ADC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a48:	f000 fb0c 	bl	8001064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a54:	2307      	movs	r3, #7
 8000a56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a5e:	f001 f9c1 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a68:	f000 fafc 	bl	8001064 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a7a:	f001 f9b3 	bl	8001de4 <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a84:	f000 faee 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000020c 	.word	0x2000020c
 8000a94:	40012000 	.word	0x40012000
 8000a98:	0f000001 	.word	0x0f000001

08000a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_ADC_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12b      	bne.n	8000b16 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_ADC_MspInit+0x8c>)
 8000b02:	f001 fd6d 	bl	80025e0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2103      	movs	r1, #3
 8000b0a:	2012      	movs	r0, #18
 8000b0c:	f001 fc9f 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b10:	2012      	movs	r0, #18
 8000b12:	f001 fcb8 	bl	8002486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40012000 	.word	0x40012000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <InitADC>:

/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 *													 Low-Layer Functions
 */
void InitADC (InputsInfo_t *inputsInfo, __ADC_STRUCT)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	inputsInfo->adc = adc;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	609a      	str	r2, [r3, #8]
	DISABLE_ADC_CR1_EOCIE(inputsInfo->adc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0220 	bic.w	r2, r2, #32
 8000b4e:	605a      	str	r2, [r3, #4]

	inputsInfo->_curChannel = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	711a      	strb	r2, [r3, #4]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <ReadADC_Inputs>:


void ReadADC_Inputs (InputsInfo_t *inputsInfo)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	START_ADC(inputsInfo->adc);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ff32 	bl	80019d8 <HAL_ADC_Start_IT>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <ADC_DRV_EndConvCallBack>:


void ADC_DRV_EndConvCallBack (InputsInfo_t *inputsInfo)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	inputsInfo->ADC_INx[inputsInfo->_curChannel++] = GET_ADC_CONV_DATA(inputsInfo->adc);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	b2d0      	uxtb	r0, r2
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	7110      	strb	r0, [r2, #4]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	b289      	uxth	r1, r1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if (inputsInfo->_curChannel >= ADC_CHANNELS_QUAN)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d902      	bls.n	8000bb0 <ADC_DRV_EndConvCallBack+0x34>
		inputsInfo->_curChannel = 0;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	711a      	strb	r2, [r3, #4]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <ReadButtonState>:


ui8 ReadButtonState (__GPIO_STRUCT, ui16 pin)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
	return READ_PIN(gpio, pin);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f001 feb3 	bl	8002938 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_GPIO_Init+0xac>)
 8000c40:	f001 fe92 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin|REC_BTN_Pin;
 8000c44:	f242 0302 	movw	r3, #8194	; 0x2002
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <MX_GPIO_Init+0xb0>)
 8000c5a:	f001 fcc1 	bl	80025e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_GPIO_Init+0xac>)
 8000c76:	f001 fcb3 	bl	80025e0 <HAL_GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800

08000c90 <AverageInit>:

}			InputsInfo_t;


static inline void AverageInit (AverageValue_t *averageValue, ui8 factor)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
	averageValue->_factor = factor;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	719a      	strb	r2, [r3, #6]
	averageValue->avgBuff = 0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = 0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	809a      	strh	r2, [r3, #4]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <AverageValue>:


static inline void AverageValue (AverageValue_t *averageValue, i16 value)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	807b      	strh	r3, [r7, #2]
	averageValue->avgBuff += (i32)value - (i32)averageValue->avgRes;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000cd4:	1a5b      	subs	r3, r3, r1
 8000cd6:	441a      	add	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = (i16)(averageValue->avgBuff >> averageValue->_factor);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7992      	ldrb	r2, [r2, #6]
 8000ce4:	4113      	asrs	r3, r2
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	809a      	strh	r2, [r3, #4]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 fdcb 	bl	8001896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f942 	bl	8000f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f7ff ff6a 	bl	8000bdc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d08:	f000 fb44 	bl	8001394 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000d0c:	f000 fbb4 	bl	8001478 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d10:	f000 fbe2 	bl	80014d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d14:	f7ff fe62 	bl	80009dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	InitADC(&InputsInfo, JOYSTICK_ADC);
 8000d18:	498e      	ldr	r1, [pc, #568]	; (8000f54 <main+0x25c>)
 8000d1a:	488f      	ldr	r0, [pc, #572]	; (8000f58 <main+0x260>)
 8000d1c:	f7ff ff06 	bl	8000b2c <InitADC>


	/*  - - - - - - - - - - Software Initialization - - - - - - - - - */

	/* SimpleBGC32 Init */
	SBGC32_Init(&SBGC32_Device);
 8000d20:	488e      	ldr	r0, [pc, #568]	; (8000f5c <main+0x264>)
 8000d22:	f004 fea9 	bl	8005a78 <SBGC32_Init>

	/* Control Configurations */
	Control.controlMode[PITCH] = CtrlM_MODE_ANGLE;
 8000d26:	4b8e      	ldr	r3, [pc, #568]	; (8000f60 <main+0x268>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	705a      	strb	r2, [r3, #1]
	Control.controlMode[YAW] = CtrlM_MODE_ANGLE;
 8000d2c:	4b8c      	ldr	r3, [pc, #560]	; (8000f60 <main+0x268>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	709a      	strb	r2, [r3, #2]

	Control.AxisC[PITCH].angle = 0;
 8000d32:	4b8b      	ldr	r3, [pc, #556]	; (8000f60 <main+0x268>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	725a      	strb	r2, [r3, #9]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	729a      	strb	r2, [r3, #10]
	Control.AxisC[YAW].angle = 0;
 8000d3c:	4b88      	ldr	r3, [pc, #544]	; (8000f60 <main+0x268>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	735a      	strb	r2, [r3, #13]
 8000d42:	2200      	movs	r2, #0
 8000d44:	739a      	strb	r2, [r3, #14]

	#ifdef SET_SPEED

		Control.AxisC[PITCH].speed = SET_SPEED;
 8000d46:	4b86      	ldr	r3, [pc, #536]	; (8000f60 <main+0x268>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f062 020b 	orn	r2, r2, #11
 8000d4e:	71da      	strb	r2, [r3, #7]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f042 0201 	orr.w	r2, r2, #1
 8000d56:	721a      	strb	r2, [r3, #8]
		Control.AxisC[YAW].speed = SET_SPEED;
 8000d58:	4b81      	ldr	r3, [pc, #516]	; (8000f60 <main+0x268>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f062 020b 	orn	r2, r2, #11
 8000d60:	72da      	strb	r2, [r3, #11]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f042 0201 	orr.w	r2, r2, #1
 8000d68:	731a      	strb	r2, [r3, #12]

	#endif

	ControlConfig.flags = RTCCF_CONTROL_CONFIG_FLAG_NO_CONFIRM;
 8000d6a:	4b7e      	ldr	r3, [pc, #504]	; (8000f64 <main+0x26c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	775a      	strb	r2, [r3, #29]
 8000d74:	2200      	movs	r2, #0
 8000d76:	779a      	strb	r2, [r3, #30]

	InputsInfo.recBtn = BTN_RELEASED;
 8000d78:	4b77      	ldr	r3, [pc, #476]	; (8000f58 <main+0x260>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	731a      	strb	r2, [r3, #12]
	InputsInfo.menuBtn = BTN_RELEASED;
 8000d7e:	4b76      	ldr	r3, [pc, #472]	; (8000f58 <main+0x260>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	735a      	strb	r2, [r3, #13]

	AverageInit(&JoystickAverage[0], LOW_PASS_FACTOR);
 8000d84:	2108      	movs	r1, #8
 8000d86:	4878      	ldr	r0, [pc, #480]	; (8000f68 <main+0x270>)
 8000d88:	f7ff ff82 	bl	8000c90 <AverageInit>
	AverageInit(&JoystickAverage[1], LOW_PASS_FACTOR);
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4877      	ldr	r0, [pc, #476]	; (8000f6c <main+0x274>)
 8000d90:	f7ff ff7e 	bl	8000c90 <AverageInit>

	servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_OFF;
 8000d94:	4b76      	ldr	r3, [pc, #472]	; (8000f70 <main+0x278>)
 8000d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9a:	805a      	strh	r2, [r3, #2]


	/*  - - - - - - - - - Initializing commands - - - - - - - - - - - */

	SBGC32_ControlConfig(&SBGC32_Device, &ControlConfig);
 8000d9c:	4971      	ldr	r1, [pc, #452]	; (8000f64 <main+0x26c>)
 8000d9e:	486f      	ldr	r0, [pc, #444]	; (8000f5c <main+0x264>)
 8000da0:	f006 f89c 	bl	8006edc <SBGC32_ControlConfig>

	SBGC32_SetServoOut(&SBGC32_Device, servoOut);
 8000da4:	4972      	ldr	r1, [pc, #456]	; (8000f70 <main+0x278>)
 8000da6:	486d      	ldr	r0, [pc, #436]	; (8000f5c <main+0x264>)
 8000da8:	f006 f91b 	bl	8006fe2 <SBGC32_SetServoOut>
		/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ */
		/*                     Start Worker Cycle                     */
		/* __________________________________________________________ */

	  	/* Getting current time */
		currentTime = SBGC32_Device.GetTimeFunc(SBGC32_Device.Drv);
 8000dac:	4b6b      	ldr	r3, [pc, #428]	; (8000f5c <main+0x264>)
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	4a6a      	ldr	r2, [pc, #424]	; (8000f5c <main+0x264>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	4610      	mov	r0, r2
 8000db6:	4798      	blx	r3
 8000db8:	4603      	mov	r3, r0
 8000dba:	4a6e      	ldr	r2, [pc, #440]	; (8000f74 <main+0x27c>)
 8000dbc:	6013      	str	r3, [r2, #0]


		/* - - - - - - - - - - Joystick Handling - - - - - - - - - - */

		ReadADC_Inputs(&InputsInfo);
 8000dbe:	4866      	ldr	r0, [pc, #408]	; (8000f58 <main+0x260>)
 8000dc0:	f7ff fecf 	bl	8000b62 <ReadADC_Inputs>

		AverageValue(&JoystickAverage[0], (i16)DEGREE_TO_ANGLE_INT(YAW_ANGLE_MIN) +
			(i16)((i32)InputsInfo.ADC_INx[ADC_JOY_Y] * DEGREE_TO_ANGLE_INT(YAW_ANGLE_MAX - YAW_ANGLE_MIN) / (1 << ADC_RESOLUTION)));
 8000dc4:	4b64      	ldr	r3, [pc, #400]	; (8000f58 <main+0x260>)
 8000dc6:	885b      	ldrh	r3, [r3, #2]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	f241 5355 	movw	r3, #5461	; 0x1555
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da01      	bge.n	8000dda <main+0xe2>
 8000dd6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000dda:	131b      	asrs	r3, r3, #12
 8000ddc:	b29b      	uxth	r3, r3
		AverageValue(&JoystickAverage[0], (i16)DEGREE_TO_ANGLE_INT(YAW_ANGLE_MIN) +
 8000dde:	f6a3 23aa 	subw	r3, r3, #2730	; 0xaaa
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	485f      	ldr	r0, [pc, #380]	; (8000f68 <main+0x270>)
 8000dea:	f7ff ff66 	bl	8000cba <AverageValue>

		AverageValue(&JoystickAverage[1], (i16)DEGREE_TO_ANGLE_INT(PITCH_ANGLE_MIN) +
			(i16)((i32)InputsInfo.ADC_INx[ADC_JOY_X] * DEGREE_TO_ANGLE_INT(PITCH_ANGLE_MAX - PITCH_ANGLE_MIN) / (1 << ADC_RESOLUTION)));
 8000dee:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <main+0x260>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f241 5355 	movw	r3, #5461	; 0x1555
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	da01      	bge.n	8000e04 <main+0x10c>
 8000e00:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000e04:	131b      	asrs	r3, r3, #12
 8000e06:	b29b      	uxth	r3, r3
		AverageValue(&JoystickAverage[1], (i16)DEGREE_TO_ANGLE_INT(PITCH_ANGLE_MIN) +
 8000e08:	f6a3 23aa 	subw	r3, r3, #2730	; 0xaaa
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b21b      	sxth	r3, r3
 8000e10:	4619      	mov	r1, r3
 8000e12:	4856      	ldr	r0, [pc, #344]	; (8000f6c <main+0x274>)
 8000e14:	f7ff ff51 	bl	8000cba <AverageValue>


		if ((currentTime - lastControlTime ) > CMD_CONTROL_DELAY)
 8000e18:	4b56      	ldr	r3, [pc, #344]	; (8000f74 <main+0x27c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b56      	ldr	r3, [pc, #344]	; (8000f78 <main+0x280>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b14      	cmp	r3, #20
 8000e24:	d913      	bls.n	8000e4e <main+0x156>
		{
			lastControlTime = currentTime;
 8000e26:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <main+0x27c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a53      	ldr	r2, [pc, #332]	; (8000f78 <main+0x280>)
 8000e2c:	6013      	str	r3, [r2, #0]

			Control.AxisC[PITCH].angle = JoystickAverage[1].avgRes;
 8000e2e:	4b4e      	ldr	r3, [pc, #312]	; (8000f68 <main+0x270>)
 8000e30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000e34:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <main+0x268>)
 8000e36:	f8a3 2009 	strh.w	r2, [r3, #9]
			Control.AxisC[YAW].angle = JoystickAverage[0].avgRes;
 8000e3a:	4b4b      	ldr	r3, [pc, #300]	; (8000f68 <main+0x270>)
 8000e3c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <main+0x268>)
 8000e42:	f8a3 200d 	strh.w	r2, [r3, #13]

			SBGC32_Control(&SBGC32_Device, &Control);
 8000e46:	4946      	ldr	r1, [pc, #280]	; (8000f60 <main+0x268>)
 8000e48:	4844      	ldr	r0, [pc, #272]	; (8000f5c <main+0x264>)
 8000e4a:	f006 f813 	bl	8006e74 <SBGC32_Control>
		}


		/*  - - - - - - - - - - Buttons Handling - - - - - - - - - - */
		/* Rec Button - for long press */
		if (ReadButtonState(REC_BTN_PORT, REC_BTN_PIN))
 8000e4e:	2102      	movs	r1, #2
 8000e50:	484a      	ldr	r0, [pc, #296]	; (8000f7c <main+0x284>)
 8000e52:	f7ff feb3 	bl	8000bbc <ReadButtonState>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d01f      	beq.n	8000e9c <main+0x1a4>
		{
			if (InputsInfo.recBtn != BTN_PRESSED)
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <main+0x260>)
 8000e5e:	7b1b      	ldrb	r3, [r3, #12]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d006      	beq.n	8000e72 <main+0x17a>
			{
				lastButtonTime = currentTime;
 8000e64:	4b43      	ldr	r3, [pc, #268]	; (8000f74 <main+0x27c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a45      	ldr	r2, [pc, #276]	; (8000f80 <main+0x288>)
 8000e6a:	6013      	str	r3, [r2, #0]
				InputsInfo.recBtn = BTN_PRESSED;
 8000e6c:	4b3a      	ldr	r3, [pc, #232]	; (8000f58 <main+0x260>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	731a      	strb	r2, [r3, #12]
			}

			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE))
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <main+0x27c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b42      	ldr	r3, [pc, #264]	; (8000f80 <main+0x288>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b64      	cmp	r3, #100	; 0x64
 8000e7e:	d928      	bls.n	8000ed2 <main+0x1da>
			{
				servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_ON;
 8000e80:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <main+0x278>)
 8000e82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e86:	805a      	strh	r2, [r3, #2]
				SBGC32_SetServoOut(&SBGC32_Device, servoOut);
 8000e88:	4939      	ldr	r1, [pc, #228]	; (8000f70 <main+0x278>)
 8000e8a:	4834      	ldr	r0, [pc, #208]	; (8000f5c <main+0x264>)
 8000e8c:	f006 f8a9 	bl	8006fe2 <SBGC32_SetServoOut>
				DEBUG_LED_ON;
 8000e90:	2201      	movs	r2, #1
 8000e92:	2180      	movs	r1, #128	; 0x80
 8000e94:	483b      	ldr	r0, [pc, #236]	; (8000f84 <main+0x28c>)
 8000e96:	f001 fd67 	bl	8002968 <HAL_GPIO_WritePin>
 8000e9a:	e01a      	b.n	8000ed2 <main+0x1da>
			}
		}

		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000e9c:	4b35      	ldr	r3, [pc, #212]	; (8000f74 <main+0x27c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <main+0x288>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	; 0x64
 8000ea8:	d913      	bls.n	8000ed2 <main+0x1da>
				 (InputsInfo.recBtn == BTN_PRESSED))
 8000eaa:	4b2b      	ldr	r3, [pc, #172]	; (8000f58 <main+0x260>)
 8000eac:	7b1b      	ldrb	r3, [r3, #12]
		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d10f      	bne.n	8000ed2 <main+0x1da>
		{
			servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_OFF;
 8000eb2:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <main+0x278>)
 8000eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eb8:	805a      	strh	r2, [r3, #2]
			SBGC32_SetServoOut(&SBGC32_Device, servoOut);
 8000eba:	492d      	ldr	r1, [pc, #180]	; (8000f70 <main+0x278>)
 8000ebc:	4827      	ldr	r0, [pc, #156]	; (8000f5c <main+0x264>)
 8000ebe:	f006 f890 	bl	8006fe2 <SBGC32_SetServoOut>
			DEBUG_LED_OFF;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2180      	movs	r1, #128	; 0x80
 8000ec6:	482f      	ldr	r0, [pc, #188]	; (8000f84 <main+0x28c>)
 8000ec8:	f001 fd4e 	bl	8002968 <HAL_GPIO_WritePin>
			InputsInfo.recBtn = BTN_RELEASED;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <main+0x260>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	731a      	strb	r2, [r3, #12]
		}

		/* Menu Button */
		if (ReadButtonState(MENU_BTN_PORT, MENU_BTN_PIN))
 8000ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed6:	4829      	ldr	r0, [pc, #164]	; (8000f7c <main+0x284>)
 8000ed8:	f7ff fe70 	bl	8000bbc <ReadButtonState>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d01d      	beq.n	8000f1e <main+0x226>
		{
			if (InputsInfo.menuBtn == BTN_RELEASED)
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <main+0x260>)
 8000ee4:	7b5b      	ldrb	r3, [r3, #13]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <main+0x200>
			{
				lastButtonTime = currentTime;
 8000eea:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <main+0x27c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <main+0x288>)
 8000ef0:	6013      	str	r3, [r2, #0]
				InputsInfo.menuBtn = BTN_PRESSED;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <main+0x260>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	735a      	strb	r2, [r3, #13]
			}

			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <main+0x27c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <main+0x288>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	d919      	bls.n	8000f3a <main+0x242>
				(InputsInfo.menuBtn != BTN_POST_PRESSED))
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <main+0x260>)
 8000f08:	7b5b      	ldrb	r3, [r3, #13]
			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d015      	beq.n	8000f3a <main+0x242>
			{
				SBGC32_ExecuteMenu(&SBGC32_Device, MENU_BUTTON_IS_PRESSED);
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	4812      	ldr	r0, [pc, #72]	; (8000f5c <main+0x264>)
 8000f12:	f006 f824 	bl	8006f5e <SBGC32_ExecuteMenu>
				InputsInfo.menuBtn = BTN_POST_PRESSED;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <main+0x260>)
 8000f18:	2202      	movs	r2, #2
 8000f1a:	735a      	strb	r2, [r3, #13]
 8000f1c:	e00d      	b.n	8000f3a <main+0x242>
			}
		}

		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <main+0x27c>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <main+0x288>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b64      	cmp	r3, #100	; 0x64
 8000f2a:	d906      	bls.n	8000f3a <main+0x242>
				 (InputsInfo.menuBtn != BTN_RELEASED))
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <main+0x260>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d002      	beq.n	8000f3a <main+0x242>
			InputsInfo.menuBtn = BTN_RELEASED;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <main+0x260>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	735a      	strb	r2, [r3, #13]


		/* Make a constant sampling time by inserting a delay of 1 ms */
		while ((SBGC32_Device.GetTimeFunc(SBGC32_Device.Drv) - currentTime) < 1);
 8000f3a:	bf00      	nop
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <main+0x264>)
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <main+0x264>)
 8000f42:	6812      	ldr	r2, [r2, #0]
 8000f44:	4610      	mov	r0, r2
 8000f46:	4798      	blx	r3
 8000f48:	4602      	mov	r2, r0
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <main+0x27c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d0f4      	beq.n	8000f3c <main+0x244>
		currentTime = SBGC32_Device.GetTimeFunc(SBGC32_Device.Drv);
 8000f52:	e72b      	b.n	8000dac <main+0xb4>
 8000f54:	2000020c 	.word	0x2000020c
 8000f58:	200002d0 	.word	0x200002d0
 8000f5c:	20000254 	.word	0x20000254
 8000f60:	20000294 	.word	0x20000294
 8000f64:	200002a4 	.word	0x200002a4
 8000f68:	200002e0 	.word	0x200002e0
 8000f6c:	200002e8 	.word	0x200002e8
 8000f70:	20000000 	.word	0x20000000
 8000f74:	200002f0 	.word	0x200002f0
 8000f78:	200002f4 	.word	0x200002f4
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	200002f8 	.word	0x200002f8
 8000f84:	40020400 	.word	0x40020400

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b094      	sub	sp, #80	; 0x50
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	2234      	movs	r2, #52	; 0x34
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f006 f8ac 	bl	80070f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fac:	4b2b      	ldr	r3, [pc, #172]	; (800105c <SystemClock_Config+0xd4>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	4a2a      	ldr	r2, [pc, #168]	; (800105c <SystemClock_Config+0xd4>)
 8000fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <SystemClock_Config+0xd4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <SystemClock_Config+0xd8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a25      	ldr	r2, [pc, #148]	; (8001060 <SystemClock_Config+0xd8>)
 8000fca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <SystemClock_Config+0xd8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fec:	2300      	movs	r3, #0
 8000fee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ff4:	23d8      	movs	r3, #216	; 0xd8
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001000:	2302      	movs	r3, #2
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fd17 	bl	8002a3c <HAL_RCC_OscConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001014:	f000 f826 	bl	8001064 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001018:	f001 fcc0 	bl	800299c <HAL_PWREx_EnableOverDrive>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001022:	f000 f81f 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001036:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	2107      	movs	r1, #7
 8001044:	4618      	mov	r0, r3
 8001046:	f001 ffa7 	bl	8002f98 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001050:	f000 f808 	bl	8001064 <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3750      	adds	r7, #80	; 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_MspInit+0x44>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_MspInit+0x44>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_MspInit+0x44>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_MspInit+0x44>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_MspInit+0x44>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 fc04 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	/*  - - - - - ADC1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <ADC_IRQHandler+0x30>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b02      	cmp	r3, #2
 800111c:	d109      	bne.n	8001132 <ADC_IRQHandler+0x26>
		GET_FLAG_ADC_CR1_EOCIE(JOYSTICK_ADC))
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <ADC_IRQHandler+0x30>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001128:	2b20      	cmp	r3, #32
 800112a:	d102      	bne.n	8001132 <ADC_IRQHandler+0x26>
		ADC_DRV_EndConvCallBack(&InputsInfo);
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <ADC_IRQHandler+0x34>)
 800112e:	f7ff fd25 	bl	8000b7c <ADC_DRV_EndConvCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001132:	4802      	ldr	r0, [pc, #8]	; (800113c <ADC_IRQHandler+0x30>)
 8001134:	f000 fd28 	bl	8001b88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2000020c 	.word	0x2000020c
 8001140:	200002d0 	.word	0x200002d0

08001144 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/*  - - - - - TIM2 Interrupt Flags Check - - - - - */

	if (GET_FLAG_TIM_SR_UIF(SBGC_REFERENCE_TIMER) &&
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <TIM2_IRQHandler+0x34>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b01      	cmp	r3, #1
 8001154:	d10b      	bne.n	800116e <TIM2_IRQHandler+0x2a>
		GET_FLAG_TIM_DIER_UIE(SBGC_REFERENCE_TIMER))
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <TIM2_IRQHandler+0x34>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0301 	and.w	r3, r3, #1
	if (GET_FLAG_TIM_SR_UIF(SBGC_REFERENCE_TIMER) &&
 8001160:	2b01      	cmp	r3, #1
 8001162:	d104      	bne.n	800116e <TIM2_IRQHandler+0x2a>
		TimerDRV_CallBack(SBGC32_Device.Drv);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <TIM2_IRQHandler+0x38>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f004 faeb 	bl	8005744 <TimerDRV_CallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800116e:	4802      	ldr	r0, [pc, #8]	; (8001178 <TIM2_IRQHandler+0x34>)
 8001170:	f002 fdf0 	bl	8003d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000300 	.word	0x20000300
 800117c:	20000254 	.word	0x20000254

08001180 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/* - - - - - UART1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <USART1_IRQHandler+0x5c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	2b40      	cmp	r3, #64	; 0x40
 8001190:	d10b      	bne.n	80011aa <USART1_IRQHandler+0x2a>
		GET_FLAG_UART_CR1_TCIE(SBGC_SERIAL_PORT))
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <USART1_IRQHandler+0x5c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0340 	and.w	r3, r3, #64	; 0x40
	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <USART1_IRQHandler+0x2a>
		UART_DRV_TxCallBack(SBGC32_Device.Drv);
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <USART1_IRQHandler+0x60>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fb2d 	bl	8005804 <UART_DRV_TxCallBack>

	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <USART1_IRQHandler+0x5c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	69db      	ldr	r3, [r3, #28]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	2b20      	cmp	r3, #32
 80011b6:	d10b      	bne.n	80011d0 <USART1_IRQHandler+0x50>
		GET_FLAG_UART_CR1_RXNEIE(SBGC_SERIAL_PORT))
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <USART1_IRQHandler+0x5c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <USART1_IRQHandler+0x50>
		UART_DRV_RxCallBack(SBGC32_Device.Drv);
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <USART1_IRQHandler+0x60>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fbd6 	bl	800597c <UART_DRV_RxCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <USART1_IRQHandler+0x5c>)
 80011d2:	f003 fa93 	bl	80046fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000034c 	.word	0x2000034c
 80011e0:	20000254 	.word	0x20000254

080011e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
	return 1;
 80011e8:	2301      	movs	r3, #1
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_kill>:

int _kill(int pid, int sig)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011fe:	f005 ff39 	bl	8007074 <__errno>
 8001202:	4603      	mov	r3, r0
 8001204:	2216      	movs	r2, #22
 8001206:	601a      	str	r2, [r3, #0]
	return -1;
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_exit>:

void _exit (int status)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffe7 	bl	80011f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001226:	e7fe      	b.n	8001226 <_exit+0x12>

08001228 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	e00a      	b.n	8001250 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800123a:	f3af 8000 	nop.w
 800123e:	4601      	mov	r1, r0
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	1c5a      	adds	r2, r3, #1
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	b2ca      	uxtb	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	dbf0      	blt.n	800123a <_read+0x12>
	}

return len;
 8001258:	687b      	ldr	r3, [r7, #4]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e009      	b.n	8001288 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	60ba      	str	r2, [r7, #8]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	dbf1      	blt.n	8001274 <_write+0x12>
	}
	return len;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_close>:

int _close(int file)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	return -1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c2:	605a      	str	r2, [r3, #4]
	return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_isatty>:

int _isatty(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	return 1;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f005 fe9e 	bl	8007074 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20080000 	.word	0x20080000
 8001364:	00000400 	.word	0x00000400
 8001368:	200002fc 	.word	0x200002fc
 800136c:	20000478 	.word	0x20000478

08001370 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM2_Init+0x98>)
 80013b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM2_Init+0x98>)
 80013bc:	226b      	movs	r2, #107	; 0x6b
 80013be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM2_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM2_Init+0x98>)
 80013c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_TIM2_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_TIM2_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <MX_TIM2_Init+0x98>)
 80013dc:	f002 fbea 	bl	8003bb4 <HAL_TIM_Base_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013e6:	f7ff fe3d 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_TIM2_Init+0x98>)
 80013f8:	f002 fdcc 	bl	8003f94 <HAL_TIM_ConfigClockSource>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001402:	f7ff fe2f 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001406:	2320      	movs	r3, #32
 8001408:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_TIM2_Init+0x98>)
 8001414:	f002 fff4 	bl	8004400 <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800141e:	f7ff fe21 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000300 	.word	0x20000300

08001430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001440:	d113      	bne.n	800146a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_TIM_Base_MspInit+0x44>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <HAL_TIM_Base_MspInit+0x44>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_TIM_Base_MspInit+0x44>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2105      	movs	r1, #5
 800145e:	201c      	movs	r0, #28
 8001460:	f000 fff5 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001464:	201c      	movs	r0, #28
 8001466:	f001 f80e 	bl	8002486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 800147e:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <MX_USART1_UART_Init+0x5c>)
 8001480:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_USART1_UART_Init+0x58>)
 80014bc:	f003 f84c 	bl	8004558 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014c6:	f7ff fdcd 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000034c 	.word	0x2000034c
 80014d4:	40011000 	.word	0x40011000

080014d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <MX_USART2_UART_Init+0x5c>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_USART2_UART_Init+0x58>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_USART2_UART_Init+0x58>)
 800150a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800150e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_USART2_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151c:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_USART2_UART_Init+0x58>)
 800151e:	f003 f81b 	bl	8004558 <HAL_UART_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8001528:	f7ff fd9c 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200003d4 	.word	0x200003d4
 8001534:	40004400 	.word	0x40004400

08001538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0b0      	sub	sp, #192	; 0xc0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	2290      	movs	r2, #144	; 0x90
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fdcb 	bl	80070f4 <memset>
  if(uartHandle->Instance==USART1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a51      	ldr	r2, [pc, #324]	; (80016a8 <HAL_UART_MspInit+0x170>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d15a      	bne.n	800161e <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800156c:	2300      	movs	r3, #0
 800156e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	4618      	mov	r0, r3
 8001576:	f001 fef5 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001580:	f7ff fd70 	bl	8001064 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001584:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_UART_MspInit+0x174>)
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	4a48      	ldr	r2, [pc, #288]	; (80016ac <HAL_UART_MspInit+0x174>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6453      	str	r3, [r2, #68]	; 0x44
 8001590:	4b46      	ldr	r3, [pc, #280]	; (80016ac <HAL_UART_MspInit+0x174>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_UART_MspInit+0x174>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	4a42      	ldr	r2, [pc, #264]	; (80016ac <HAL_UART_MspInit+0x174>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	6313      	str	r3, [r2, #48]	; 0x30
 80015a8:	4b40      	ldr	r3, [pc, #256]	; (80016ac <HAL_UART_MspInit+0x174>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80015ce:	2304      	movs	r3, #4
 80015d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015d8:	4619      	mov	r1, r3
 80015da:	4835      	ldr	r0, [pc, #212]	; (80016b0 <HAL_UART_MspInit+0x178>)
 80015dc:	f001 f800 	bl	80025e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80015fa:	2304      	movs	r3, #4
 80015fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001604:	4619      	mov	r1, r3
 8001606:	482a      	ldr	r0, [pc, #168]	; (80016b0 <HAL_UART_MspInit+0x178>)
 8001608:	f000 ffea 	bl	80025e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2101      	movs	r1, #1
 8001610:	2025      	movs	r0, #37	; 0x25
 8001612:	f000 ff1c 	bl	800244e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001616:	2025      	movs	r0, #37	; 0x25
 8001618:	f000 ff35 	bl	8002486 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800161c:	e03f      	b.n	800169e <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <HAL_UART_MspInit+0x17c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d13a      	bne.n	800169e <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fe95 	bl	8003364 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8001640:	f7ff fd10 	bl	8001064 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HAL_UART_MspInit+0x174>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	4a18      	ldr	r2, [pc, #96]	; (80016ac <HAL_UART_MspInit+0x174>)
 800164a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_UART_MspInit+0x174>)
 8001652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HAL_UART_MspInit+0x174>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <HAL_UART_MspInit+0x174>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_UART_MspInit+0x174>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001674:	230c      	movs	r3, #12
 8001676:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168c:	2307      	movs	r3, #7
 800168e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001696:	4619      	mov	r1, r3
 8001698:	4807      	ldr	r0, [pc, #28]	; (80016b8 <HAL_UART_MspInit+0x180>)
 800169a:	f000 ffa1 	bl	80025e0 <HAL_GPIO_Init>
}
 800169e:	bf00      	nop
 80016a0:	37c0      	adds	r7, #192	; 0xc0
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40004400 	.word	0x40004400
 80016b8:	40020000 	.word	0x40020000

080016bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c2:	490e      	ldr	r1, [pc, #56]	; (80016fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d8:	4c0b      	ldr	r4, [pc, #44]	; (8001708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016e6:	f7ff fe43 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ea:	f005 fcc9 	bl	8007080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ee:	f7ff fb03 	bl	8000cf8 <main>
  bx  lr    
 80016f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001700:	0800befc 	.word	0x0800befc
  ldr r2, =_sbss
 8001704:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001708:	20000478 	.word	0x20000478

0800170c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800170c:	e7fe      	b.n	800170c <CAN1_RX0_IRQHandler>

0800170e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d104      	bne.n	8001726 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
 8001720:	f7ff fca0 	bl	8001064 <Error_Handler>
 8001724:	e7fe      	b.n	8001724 <stm32_lock_init+0x16>
  lock->flag = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	705a      	strb	r2, [r3, #1]
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001742:	f3ef 8310 	mrs	r3, PRIMASK
 8001746:	60bb      	str	r3, [r7, #8]
  return(result);
 8001748:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001752:	b672      	cpsid	i
}
 8001754:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001756:	f3bf 8f4f 	dsb	sy
}
 800175a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800175c:	f3bf 8f6f 	isb	sy
}
 8001760:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d104      	bne.n	8001772 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
 800176c:	f7ff fc7a 	bl	8001064 <Error_Handler>
 8001770:	e7fe      	b.n	8001770 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e008      	b.n	8001794 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	785b      	ldrb	r3, [r3, #1]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d104      	bne.n	8001794 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800178a:	b672      	cpsid	i
}
 800178c:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800178e:	f7ff fc69 	bl	8001064 <Error_Handler>
 8001792:	e7fe      	b.n	8001792 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	3301      	adds	r3, #1
 800179a:	b2da      	uxtb	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	705a      	strb	r2, [r3, #1]
}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d104      	bne.n	80017c0 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017b6:	b672      	cpsid	i
}
 80017b8:	bf00      	nop
 80017ba:	f7ff fc53 	bl	8001064 <Error_Handler>
 80017be:	e7fe      	b.n	80017be <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80017cc:	f7ff fc4a 	bl	8001064 <Error_Handler>
 80017d0:	e7fe      	b.n	80017d0 <stm32_lock_release+0x28>
  }
  lock->counter--;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	785b      	ldrb	r3, [r3, #1]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d105      	bne.n	80017f2 <stm32_lock_release+0x4a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d101      	bne.n	80017f2 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80017ee:	b662      	cpsie	i
}
 80017f0:	bf00      	nop
  {
    __enable_irq();
  }
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d105      	bne.n	8001814 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001808:	f005 fc34 	bl	8007074 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	2216      	movs	r2, #22
 8001810:	601a      	str	r2, [r3, #0]
    return;
 8001812:	e015      	b.n	8001840 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001814:	2002      	movs	r0, #2
 8001816:	f005 fc57 	bl	80070c8 <malloc>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff6d 	bl	800170e <stm32_lock_init>
    return;
 8001834:	e004      	b.n	8001840 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001836:	b672      	cpsid	i
}
 8001838:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800183a:	f7ff fc13 	bl	8001064 <Error_Handler>
 800183e:	e7fe      	b.n	800183e <__retarget_lock_init_recursive+0x44>
}
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d104      	bne.n	800185e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
 8001858:	f7ff fc04 	bl	8001064 <Error_Handler>
 800185c:	e7fe      	b.n	800185c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff6a 	bl	800173a <stm32_lock_acquire>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d104      	bne.n	8001886 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800187c:	b672      	cpsid	i
}
 800187e:	bf00      	nop
 8001880:	f7ff fbf0 	bl	8001064 <Error_Handler>
 8001884:	e7fe      	b.n	8001884 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff8d 	bl	80017a8 <stm32_lock_release>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189a:	2003      	movs	r0, #3
 800189c:	f000 fdcc 	bl	8002438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a0:	200f      	movs	r0, #15
 80018a2:	f000 f805 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a6:	f7ff fbe3 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fde7 	bl	80024a2 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 fdaf 	bl	800244e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000010 	.word	0x20000010
 8001908:	20000018 	.word	0x20000018
 800190c:	20000014 	.word	0x20000014

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000018 	.word	0x20000018
 8001934:	20000468 	.word	0x20000468

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000468 	.word	0x20000468

08001950 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e031      	b.n	80019ca <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff f894 	bl	8000a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_ADC_Init+0x84>)
 8001994:	4013      	ands	r3, r2
 8001996:	f043 0202 	orr.w	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fb76 	bl	8002090 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
 80019ba:	e001      	b.n	80019c0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	ffffeefd 	.word	0xffffeefd

080019d8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Start_IT+0x1a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e0b5      	b.n	8001b5e <HAL_ADC_Start_IT+0x186>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d018      	beq.n	8001a3a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a18:	4b54      	ldr	r3, [pc, #336]	; (8001b6c <HAL_ADC_Start_IT+0x194>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a54      	ldr	r2, [pc, #336]	; (8001b70 <HAL_ADC_Start_IT+0x198>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0c9a      	lsrs	r2, r3, #18
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a2c:	e002      	b.n	8001a34 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f9      	bne.n	8001a2e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d17d      	bne.n	8001b44 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4c:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <HAL_ADC_Start_IT+0x19c>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a82:	d106      	bne.n	8001a92 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f023 0206 	bic.w	r2, r3, #6
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44
 8001a90:	e002      	b.n	8001a98 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aa8:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_ADC_Start_IT+0x1a0>)
 8001ab6:	430b      	orrs	r3, r1
 8001ab8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <HAL_ADC_Start_IT+0x1a4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10f      	bne.n	8001ae6 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d143      	bne.n	8001b5c <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	e03a      	b.n	8001b5c <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a25      	ldr	r2, [pc, #148]	; (8001b80 <HAL_ADC_Start_IT+0x1a8>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d10e      	bne.n	8001b0e <HAL_ADC_Start_IT+0x136>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b0c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_ADC_Start_IT+0x1a4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d120      	bne.n	8001b5c <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <HAL_ADC_Start_IT+0x1ac>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d11b      	bne.n	8001b5c <HAL_ADC_Start_IT+0x184>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d114      	bne.n	8001b5c <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	e00b      	b.n	8001b5c <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f043 0210 	orr.w	r2, r3, #16
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	f043 0201 	orr.w	r2, r3, #1
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000010 	.word	0x20000010
 8001b70:	431bde83 	.word	0x431bde83
 8001b74:	fffff8fe 	.word	0xfffff8fe
 8001b78:	04000020 	.word	0x04000020
 8001b7c:	40012300 	.word	0x40012300
 8001b80:	40012000 	.word	0x40012000
 8001b84:	40012200 	.word	0x40012200

08001b88 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f003 0320 	and.w	r3, r3, #32
 8001bb6:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d049      	beq.n	8001c52 <HAL_ADC_IRQHandler+0xca>
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d046      	beq.n	8001c52 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f003 0310 	and.w	r3, r3, #16
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d12b      	bne.n	8001c42 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d127      	bne.n	8001c42 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d119      	bne.n	8001c42 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0220 	bic.w	r2, r2, #32
 8001c1c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8b0 	bl	8001da8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0212 	mvn.w	r2, #18
 8001c50:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d057      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x190>
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d054      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d139      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d006      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d12b      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d124      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d11d      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d119      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 fabb 	bl	8002284 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 020c 	mvn.w	r2, #12
 8001d16:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d26:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d017      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x1d6>
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d014      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d10d      	bne.n	8001d5e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f834 	bl	8001dbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0201 	mvn.w	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d6c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d015      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x218>
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d012      	beq.n	8001da0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f06f 0220 	mvn.w	r2, #32
 8001d8e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f81d 	bl	8001dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f06f 0220 	mvn.w	r2, #32
 8001d9e:	601a      	str	r2, [r3, #0]
  }
}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x1c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e136      	b.n	800206e <HAL_ADC_ConfigChannel+0x28a>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d93a      	bls.n	8001e86 <HAL_ADC_ConfigChannel+0xa2>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e18:	d035      	beq.n	8001e86 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68d9      	ldr	r1, [r3, #12]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b1e      	subs	r3, #30
 8001e30:	2207      	movs	r2, #7
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	400a      	ands	r2, r1
 8001e3e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a8d      	ldr	r2, [pc, #564]	; (800207c <HAL_ADC_ConfigChannel+0x298>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10a      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68d9      	ldr	r1, [r3, #12]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	061a      	lsls	r2, r3, #24
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e5e:	e035      	b.n	8001ecc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68d9      	ldr	r1, [r3, #12]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4403      	add	r3, r0
 8001e78:	3b1e      	subs	r3, #30
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e84:	e022      	b.n	8001ecc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6919      	ldr	r1, [r3, #16]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6919      	ldr	r1, [r3, #16]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4403      	add	r3, r0
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b06      	cmp	r3, #6
 8001ed2:	d824      	bhi.n	8001f1e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b05      	subs	r3, #5
 8001ee6:	221f      	movs	r2, #31
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43da      	mvns	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b05      	subs	r3, #5
 8001f10:	fa00 f203 	lsl.w	r2, r0, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1c:	e04c      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d824      	bhi.n	8001f70 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	3b23      	subs	r3, #35	; 0x23
 8001f38:	221f      	movs	r2, #31
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	400a      	ands	r2, r1
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4618      	mov	r0, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	3b23      	subs	r3, #35	; 0x23
 8001f62:	fa00 f203 	lsl.w	r2, r0, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6e:	e023      	b.n	8001fb8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	3b41      	subs	r3, #65	; 0x41
 8001f82:	221f      	movs	r2, #31
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	400a      	ands	r2, r1
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	3b41      	subs	r3, #65	; 0x41
 8001fac:	fa00 f203 	lsl.w	r2, r0, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a30      	ldr	r2, [pc, #192]	; (8002080 <HAL_ADC_ConfigChannel+0x29c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d10a      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1f4>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fd6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_ADC_ConfigChannel+0x29c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10f      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x21e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d10b      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fea:	4b26      	ldr	r3, [pc, #152]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a25      	ldr	r2, [pc, #148]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ff4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a22      	ldr	r2, [pc, #136]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ffc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002000:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1e      	ldr	r2, [pc, #120]	; (8002080 <HAL_ADC_ConfigChannel+0x29c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d12b      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x280>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_ADC_ConfigChannel+0x298>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d003      	beq.n	800201e <HAL_ADC_ConfigChannel+0x23a>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b11      	cmp	r3, #17
 800201c:	d122      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a18      	ldr	r2, [pc, #96]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8002024:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002028:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a15      	ldr	r2, [pc, #84]	; (8002084 <HAL_ADC_ConfigChannel+0x2a0>)
 8002030:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002034:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a10      	ldr	r2, [pc, #64]	; (800207c <HAL_ADC_ConfigChannel+0x298>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d111      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_ADC_ConfigChannel+0x2a4>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_ADC_ConfigChannel+0x2a8>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0c9a      	lsrs	r2, r3, #18
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002056:	e002      	b.n	800205e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3b01      	subs	r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1f9      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	10000012 	.word	0x10000012
 8002080:	40012000 	.word	0x40012000
 8002084:	40012300 	.word	0x40012300
 8002088:	20000010 	.word	0x20000010
 800208c:	431bde83 	.word	0x431bde83

08002090 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002098:	4b78      	ldr	r3, [pc, #480]	; (800227c <ADC_Init+0x1ec>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a77      	ldr	r2, [pc, #476]	; (800227c <ADC_Init+0x1ec>)
 800209e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020a4:	4b75      	ldr	r3, [pc, #468]	; (800227c <ADC_Init+0x1ec>)
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4973      	ldr	r1, [pc, #460]	; (800227c <ADC_Init+0x1ec>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	021a      	lsls	r2, r3, #8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002106:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6899      	ldr	r1, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	4a58      	ldr	r2, [pc, #352]	; (8002280 <ADC_Init+0x1f0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d022      	beq.n	800216a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002132:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e00f      	b.n	800218a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002178:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002188:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0202 	bic.w	r2, r2, #2
 8002198:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6899      	ldr	r1, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	005a      	lsls	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	3b01      	subs	r3, #1
 80021e4:	035a      	lsls	r2, r3, #13
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	e007      	b.n	8002200 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	3b01      	subs	r3, #1
 800221c:	051a      	lsls	r2, r3, #20
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002242:	025a      	lsls	r2, r3, #9
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	029a      	lsls	r2, r3, #10
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	609a      	str	r2, [r3, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40012300 	.word	0x40012300
 8002280:	0f000001 	.word	0x0f000001

08002284 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <__NVIC_SetPriorityGrouping+0x40>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c6:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <__NVIC_SetPriorityGrouping+0x40>)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	60d3      	str	r3, [r2, #12]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00
 80022dc:	05fa0000 	.word	0x05fa0000

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4907      	ldr	r1, [pc, #28]	; (8002334 <__NVIC_EnableIRQ+0x38>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000e100 	.word	0xe000e100

08002338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	6039      	str	r1, [r7, #0]
 8002342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db0a      	blt.n	8002362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	b2da      	uxtb	r2, r3
 8002350:	490c      	ldr	r1, [pc, #48]	; (8002384 <__NVIC_SetPriority+0x4c>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	440b      	add	r3, r1
 800235c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002360:	e00a      	b.n	8002378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4908      	ldr	r1, [pc, #32]	; (8002388 <__NVIC_SetPriority+0x50>)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	3b04      	subs	r3, #4
 8002370:	0112      	lsls	r2, r2, #4
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	440b      	add	r3, r1
 8002376:	761a      	strb	r2, [r3, #24]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000e100 	.word	0xe000e100
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800238c:	b480      	push	{r7}
 800238e:	b089      	sub	sp, #36	; 0x24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	f1c3 0307 	rsb	r3, r3, #7
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf28      	it	cs
 80023aa:	2304      	movcs	r3, #4
 80023ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	2b06      	cmp	r3, #6
 80023b4:	d902      	bls.n	80023bc <NVIC_EncodePriority+0x30>
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3b03      	subs	r3, #3
 80023ba:	e000      	b.n	80023be <NVIC_EncodePriority+0x32>
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	f04f 32ff 	mov.w	r2, #4294967295
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	401a      	ands	r2, r3
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	fa01 f303 	lsl.w	r3, r1, r3
 80023de:	43d9      	mvns	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	4313      	orrs	r3, r2
         );
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3724      	adds	r7, #36	; 0x24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002404:	d301      	bcc.n	800240a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002406:	2301      	movs	r3, #1
 8002408:	e00f      	b.n	800242a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <SysTick_Config+0x40>)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002412:	210f      	movs	r1, #15
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	f7ff ff8e 	bl	8002338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <SysTick_Config+0x40>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002422:	4b04      	ldr	r3, [pc, #16]	; (8002434 <SysTick_Config+0x40>)
 8002424:	2207      	movs	r2, #7
 8002426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	e000e010 	.word	0xe000e010

08002438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ff29 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	607a      	str	r2, [r7, #4]
 800245a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002460:	f7ff ff3e 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 8002464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	6978      	ldr	r0, [r7, #20]
 800246c:	f7ff ff8e 	bl	800238c <NVIC_EncodePriority>
 8002470:	4602      	mov	r2, r0
 8002472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff5d 	bl	8002338 <__NVIC_SetPriority>
}
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff31 	bl	80022fc <__NVIC_EnableIRQ>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ffa2 	bl	80023f4 <SysTick_Config>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fa36 	bl	8001938 <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d008      	beq.n	80024ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e052      	b.n	8002592 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0216 	bic.w	r2, r2, #22
 80024fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800250a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d103      	bne.n	800251c <HAL_DMA_Abort+0x62>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0208 	bic.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253c:	e013      	b.n	8002566 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800253e:	f7ff f9fb 	bl	8001938 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b05      	cmp	r3, #5
 800254a:	d90c      	bls.n	8002566 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2203      	movs	r2, #3
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e015      	b.n	8002592 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e4      	bne.n	800253e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	223f      	movs	r2, #63	; 0x3f
 800257a:	409a      	lsls	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d004      	beq.n	80025b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e00c      	b.n	80025d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2205      	movs	r2, #5
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e175      	b.n	80028ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	429a      	cmp	r2, r3
 800261a:	f040 8164 	bne.w	80028e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b01      	cmp	r3, #1
 8002628:	d005      	beq.n	8002636 <HAL_GPIO_Init+0x56>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d130      	bne.n	8002698 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	2203      	movs	r2, #3
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	43db      	mvns	r3, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800266c:	2201      	movs	r2, #1
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 0201 	and.w	r2, r3, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d017      	beq.n	80026d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	2203      	movs	r2, #3
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d123      	bne.n	8002728 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	08da      	lsrs	r2, r3, #3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3208      	adds	r2, #8
 80026e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	69b9      	ldr	r1, [r7, #24]
 8002724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	2203      	movs	r2, #3
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 0203 	and.w	r2, r3, #3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 80be 	beq.w	80028e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_GPIO_Init+0x324>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	4a65      	ldr	r2, [pc, #404]	; (8002904 <HAL_GPIO_Init+0x324>)
 8002770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002774:	6453      	str	r3, [r2, #68]	; 0x44
 8002776:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_GPIO_Init+0x324>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002782:	4a61      	ldr	r2, [pc, #388]	; (8002908 <HAL_GPIO_Init+0x328>)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3302      	adds	r3, #2
 800278a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4013      	ands	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a58      	ldr	r2, [pc, #352]	; (800290c <HAL_GPIO_Init+0x32c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d037      	beq.n	800281e <HAL_GPIO_Init+0x23e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_GPIO_Init+0x330>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d031      	beq.n	800281a <HAL_GPIO_Init+0x23a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_GPIO_Init+0x334>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d02b      	beq.n	8002816 <HAL_GPIO_Init+0x236>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a55      	ldr	r2, [pc, #340]	; (8002918 <HAL_GPIO_Init+0x338>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d025      	beq.n	8002812 <HAL_GPIO_Init+0x232>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_GPIO_Init+0x33c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d01f      	beq.n	800280e <HAL_GPIO_Init+0x22e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a53      	ldr	r2, [pc, #332]	; (8002920 <HAL_GPIO_Init+0x340>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x22a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x344>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x348>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_GPIO_Init+0x34c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_GPIO_Init+0x350>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x21a>
 80027f6:	2309      	movs	r3, #9
 80027f8:	e012      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fa:	230a      	movs	r3, #10
 80027fc:	e010      	b.n	8002820 <HAL_GPIO_Init+0x240>
 80027fe:	2308      	movs	r3, #8
 8002800:	e00e      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002802:	2307      	movs	r3, #7
 8002804:	e00c      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002806:	2306      	movs	r3, #6
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280a:	2305      	movs	r3, #5
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x240>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x240>
 800281e:	2300      	movs	r3, #0
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	f002 0203 	and.w	r2, r2, #3
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x328>)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b3d      	ldr	r3, [pc, #244]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002862:	4a34      	ldr	r2, [pc, #208]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_GPIO_Init+0x354>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800288c:	4a29      	ldr	r2, [pc, #164]	; (8002934 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <HAL_GPIO_Init+0x354>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b6:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b1d      	ldr	r3, [pc, #116]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e0:	4a14      	ldr	r2, [pc, #80]	; (8002934 <HAL_GPIO_Init+0x354>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3301      	adds	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	f67f ae86 	bls.w	8002600 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800
 8002908:	40013800 	.word	0x40013800
 800290c:	40020000 	.word	0x40020000
 8002910:	40020400 	.word	0x40020400
 8002914:	40020800 	.word	0x40020800
 8002918:	40020c00 	.word	0x40020c00
 800291c:	40021000 	.word	0x40021000
 8002920:	40021400 	.word	0x40021400
 8002924:	40021800 	.word	0x40021800
 8002928:	40021c00 	.word	0x40021c00
 800292c:	40022000 	.word	0x40022000
 8002930:	40022400 	.word	0x40022400
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	887b      	ldrh	r3, [r7, #2]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e001      	b.n	800295a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002984:	e003      	b.n	800298e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	041a      	lsls	r2, r3, #16
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80029ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_PWREx_EnableOverDrive+0x98>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ca:	f7fe ffb5 	bl	8001938 <HAL_GetTick>
 80029ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029d0:	e009      	b.n	80029e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029d2:	f7fe ffb1 	bl	8001938 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e0:	d901      	bls.n	80029e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e022      	b.n	8002a2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f2:	d1ee      	bne.n	80029d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a00:	f7fe ff9a 	bl	8001938 <HAL_GetTick>
 8002a04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a06:	e009      	b.n	8002a1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a08:	f7fe ff96 	bl	8001938 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a16:	d901      	bls.n	8002a1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e007      	b.n	8002a2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a28:	d1ee      	bne.n	8002a08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40007000 	.word	0x40007000

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e29b      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 8087 	beq.w	8002b6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a60:	4b96      	ldr	r3, [pc, #600]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d00c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6c:	4b93      	ldr	r3, [pc, #588]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d112      	bne.n	8002a9e <HAL_RCC_OscConfig+0x62>
 8002a78:	4b90      	ldr	r3, [pc, #576]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a84:	d10b      	bne.n	8002a9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a86:	4b8d      	ldr	r3, [pc, #564]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d06c      	beq.n	8002b6c <HAL_RCC_OscConfig+0x130>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d168      	bne.n	8002b6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e275      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x7a>
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a83      	ldr	r2, [pc, #524]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e02e      	b.n	8002b14 <HAL_RCC_OscConfig+0xd8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x9c>
 8002abe:	4b7f      	ldr	r3, [pc, #508]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a7e      	ldr	r2, [pc, #504]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4b7c      	ldr	r3, [pc, #496]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7b      	ldr	r2, [pc, #492]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e01d      	b.n	8002b14 <HAL_RCC_OscConfig+0xd8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0xc0>
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a75      	ldr	r2, [pc, #468]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a72      	ldr	r2, [pc, #456]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	e00b      	b.n	8002b14 <HAL_RCC_OscConfig+0xd8>
 8002afc:	4b6f      	ldr	r3, [pc, #444]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a6e      	ldr	r2, [pc, #440]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a6b      	ldr	r2, [pc, #428]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d013      	beq.n	8002b44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe ff0c 	bl	8001938 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b24:	f7fe ff08 	bl	8001938 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e229      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0xe8>
 8002b42:	e014      	b.n	8002b6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fef8 	bl	8001938 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4c:	f7fe fef4 	bl	8001938 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e215      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	4b57      	ldr	r3, [pc, #348]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x110>
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d069      	beq.n	8002c4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7a:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b86:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 030c 	and.w	r3, r3, #12
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d11c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x190>
 8002b92:	4b4a      	ldr	r3, [pc, #296]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d116      	bne.n	8002bcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17a>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e1e9      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb6:	4b41      	ldr	r3, [pc, #260]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	493d      	ldr	r1, [pc, #244]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bca:	e040      	b.n	8002c4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d023      	beq.n	8002c1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd4:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe feaa 	bl	8001938 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fea6 	bl	8001938 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1c7      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b30      	ldr	r3, [pc, #192]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c06:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4929      	ldr	r1, [pc, #164]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
 8002c1a:	e018      	b.n	8002c4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a26      	ldr	r2, [pc, #152]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7fe fe86 	bl	8001938 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c30:	f7fe fe82 	bl	8001938 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1a3      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c42:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d038      	beq.n	8002ccc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d019      	beq.n	8002c96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fe63 	bl	8001938 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c76:	f7fe fe5f 	bl	8001938 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e180      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x23a>
 8002c94:	e01a      	b.n	8002ccc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <HAL_RCC_OscConfig+0x280>)
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fe49 	bl	8001938 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe fe45 	bl	8001938 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d903      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e166      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
 8002cbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc0:	4b92      	ldr	r3, [pc, #584]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a4 	beq.w	8002e22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b8c      	ldr	r3, [pc, #560]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a88      	ldr	r2, [pc, #544]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b86      	ldr	r3, [pc, #536]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d02:	4b83      	ldr	r3, [pc, #524]	; (8002f10 <HAL_RCC_OscConfig+0x4d4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d118      	bne.n	8002d40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d0e:	4b80      	ldr	r3, [pc, #512]	; (8002f10 <HAL_RCC_OscConfig+0x4d4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7f      	ldr	r2, [pc, #508]	; (8002f10 <HAL_RCC_OscConfig+0x4d4>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fe0d 	bl	8001938 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fe fe09 	bl	8001938 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	; 0x64
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e12a      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d34:	4b76      	ldr	r3, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0x4d4>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x31a>
 8002d48:	4b70      	ldr	r3, [pc, #448]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	4a6f      	ldr	r2, [pc, #444]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6713      	str	r3, [r2, #112]	; 0x70
 8002d54:	e02d      	b.n	8002db2 <HAL_RCC_OscConfig+0x376>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x33c>
 8002d5e:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a6a      	ldr	r2, [pc, #424]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6a:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	4a67      	ldr	r2, [pc, #412]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	; 0x70
 8002d76:	e01c      	b.n	8002db2 <HAL_RCC_OscConfig+0x376>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x35e>
 8002d80:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	4a61      	ldr	r2, [pc, #388]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8c:	4b5f      	ldr	r3, [pc, #380]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	4a5e      	ldr	r2, [pc, #376]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6713      	str	r3, [r2, #112]	; 0x70
 8002d98:	e00b      	b.n	8002db2 <HAL_RCC_OscConfig+0x376>
 8002d9a:	4b5c      	ldr	r3, [pc, #368]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6713      	str	r3, [r2, #112]	; 0x70
 8002da6:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d015      	beq.n	8002de6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dba:	f7fe fdbd 	bl	8001938 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe fdb9 	bl	8001938 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0d8      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ee      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x386>
 8002de4:	e014      	b.n	8002e10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7fe fda7 	bl	8001938 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe fda3 	bl	8001938 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0c2      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a3c      	ldr	r2, [pc, #240]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 80ae 	beq.w	8002f88 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2c:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d06d      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d14b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a31      	ldr	r2, [pc, #196]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fd74 	bl	8001938 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fd70 	bl	8001938 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e091      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e66:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69da      	ldr	r2, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	085b      	lsrs	r3, r3, #1
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	041b      	lsls	r3, r3, #16
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	061b      	lsls	r3, r3, #24
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	071b      	lsls	r3, r3, #28
 8002e9e:	491b      	ldr	r1, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a18      	ldr	r2, [pc, #96]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fd42 	bl	8001938 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe fd3e 	bl	8001938 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e05f      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x47c>
 8002ed6:	e057      	b.n	8002f88 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fd28 	bl	8001938 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe fd24 	bl	8001938 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e045      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x4b0>
 8002f0a:	e03d      	b.n	8002f88 <HAL_RCC_OscConfig+0x54c>
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f14:	4b1f      	ldr	r3, [pc, #124]	; (8002f94 <HAL_RCC_OscConfig+0x558>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d030      	beq.n	8002f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d129      	bne.n	8002f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d122      	bne.n	8002f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d119      	bne.n	8002f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d10f      	bne.n	8002f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d107      	bne.n	8002f84 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800

08002f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0d0      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 030f 	and.w	r3, r3, #15
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d910      	bls.n	8002fe0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b67      	ldr	r3, [pc, #412]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 020f 	bic.w	r2, r3, #15
 8002fc6:	4965      	ldr	r1, [pc, #404]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0b8      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff8:	4b59      	ldr	r3, [pc, #356]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4a58      	ldr	r2, [pc, #352]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003002:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003010:	4b53      	ldr	r3, [pc, #332]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a52      	ldr	r2, [pc, #328]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800301a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	494d      	ldr	r1, [pc, #308]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d040      	beq.n	80030bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b47      	ldr	r3, [pc, #284]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d115      	bne.n	800307a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07f      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b41      	ldr	r3, [pc, #260]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e073      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06b      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307a:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4936      	ldr	r1, [pc, #216]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	4313      	orrs	r3, r2
 800308a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800308c:	f7fe fc54 	bl	8001938 <HAL_GetTick>
 8003090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fe fc50 	bl	8001938 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e053      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 020c 	and.w	r2, r3, #12
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1eb      	bne.n	8003094 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d210      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 020f 	bic.w	r2, r3, #15
 80030d2:	4922      	ldr	r1, [pc, #136]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCC_ClockConfig+0x1c4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e032      	b.n	8003152 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030f8:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4916      	ldr	r1, [pc, #88]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	490e      	ldr	r1, [pc, #56]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800312a:	f000 f821 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 800312e:	4602      	mov	r2, r0
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_RCC_ClockConfig+0x1c8>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	091b      	lsrs	r3, r3, #4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	490a      	ldr	r1, [pc, #40]	; (8003164 <HAL_RCC_ClockConfig+0x1cc>)
 800313c:	5ccb      	ldrb	r3, [r1, r3]
 800313e:	fa22 f303 	lsr.w	r3, r2, r3
 8003142:	4a09      	ldr	r2, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1d0>)
 8003144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003146:	4b09      	ldr	r3, [pc, #36]	; (800316c <HAL_RCC_ClockConfig+0x1d4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fbb0 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023c00 	.word	0x40023c00
 8003160:	40023800 	.word	0x40023800
 8003164:	0800ba2c 	.word	0x0800ba2c
 8003168:	20000010 	.word	0x20000010
 800316c:	20000014 	.word	0x20000014

08003170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	b090      	sub	sp, #64	; 0x40
 8003176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
 800317c:	2300      	movs	r3, #0
 800317e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003180:	2300      	movs	r3, #0
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003188:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d00d      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003194:	2b08      	cmp	r3, #8
 8003196:	f200 80a1 	bhi.w	80032dc <HAL_RCC_GetSysClockFreq+0x16c>
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x34>
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x3a>
 80031a2:	e09b      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b53      	ldr	r3, [pc, #332]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80031a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031a8:	e09b      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031aa:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031ae:	e098      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b0:	4b4f      	ldr	r3, [pc, #316]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80031ba:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d028      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	2200      	movs	r2, #0
 80031ce:	623b      	str	r3, [r7, #32]
 80031d0:	627a      	str	r2, [r7, #36]	; 0x24
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031d8:	2100      	movs	r1, #0
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031dc:	fb03 f201 	mul.w	r2, r3, r1
 80031e0:	2300      	movs	r3, #0
 80031e2:	fb00 f303 	mul.w	r3, r0, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	4a43      	ldr	r2, [pc, #268]	; (80032f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80031ea:	fba0 1202 	umull	r1, r2, r0, r2
 80031ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031f0:	460a      	mov	r2, r1
 80031f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80031f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f6:	4413      	add	r3, r2
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fc:	2200      	movs	r2, #0
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	61fa      	str	r2, [r7, #28]
 8003202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003206:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800320a:	f7fd fa2d 	bl	8000668 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4613      	mov	r3, r2
 8003214:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003216:	e053      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	2200      	movs	r2, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	617a      	str	r2, [r7, #20]
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800322a:	f04f 0b00 	mov.w	fp, #0
 800322e:	4652      	mov	r2, sl
 8003230:	465b      	mov	r3, fp
 8003232:	f04f 0000 	mov.w	r0, #0
 8003236:	f04f 0100 	mov.w	r1, #0
 800323a:	0159      	lsls	r1, r3, #5
 800323c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003240:	0150      	lsls	r0, r2, #5
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	ebb2 080a 	subs.w	r8, r2, sl
 800324a:	eb63 090b 	sbc.w	r9, r3, fp
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800325a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800325e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003262:	ebb2 0408 	subs.w	r4, r2, r8
 8003266:	eb63 0509 	sbc.w	r5, r3, r9
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	00eb      	lsls	r3, r5, #3
 8003274:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003278:	00e2      	lsls	r2, r4, #3
 800327a:	4614      	mov	r4, r2
 800327c:	461d      	mov	r5, r3
 800327e:	eb14 030a 	adds.w	r3, r4, sl
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	eb45 030b 	adc.w	r3, r5, fp
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003296:	4629      	mov	r1, r5
 8003298:	028b      	lsls	r3, r1, #10
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a0:	4621      	mov	r1, r4
 80032a2:	028a      	lsls	r2, r1, #10
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	2200      	movs	r2, #0
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	60fa      	str	r2, [r7, #12]
 80032b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032b4:	f7fd f9d8 	bl	8000668 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80032d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b05      	ldr	r3, [pc, #20]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80032de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3740      	adds	r7, #64	; 0x40
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	017d7840 	.word	0x017d7840

080032fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000010 	.word	0x20000010

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff0 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	; (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	0800ba3c 	.word	0x0800ba3c

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffdc 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0b5b      	lsrs	r3, r3, #13
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	; (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	0800ba3c 	.word	0x0800ba3c

08003364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d012      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800338c:	4b69      	ldr	r3, [pc, #420]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a68      	ldr	r2, [pc, #416]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003392:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003396:	6093      	str	r3, [r2, #8]
 8003398:	4b66      	ldr	r3, [pc, #408]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	4964      	ldr	r1, [pc, #400]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d017      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	4959      	ldr	r1, [pc, #356]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033dc:	d101      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80033de:	2301      	movs	r3, #1
 80033e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d017      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033fa:	4b4e      	ldr	r3, [pc, #312]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	494a      	ldr	r1, [pc, #296]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003418:	d101      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003426:	2301      	movs	r3, #1
 8003428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 808b 	beq.w	800355e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	4a39      	ldr	r2, [pc, #228]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	6413      	str	r3, [r2, #64]	; 0x40
 8003454:	4b37      	ldr	r3, [pc, #220]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003460:	4b35      	ldr	r3, [pc, #212]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a34      	ldr	r2, [pc, #208]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346c:	f7fe fa64 	bl	8001938 <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003474:	f7fe fa60 	bl	8001938 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e38f      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003486:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d035      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d02e      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b0:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034d2:	4a18      	ldr	r2, [pc, #96]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d114      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fa28 	bl	8001938 <HAL_GetTick>
 80034e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ea:	e00a      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe fa24 	bl	8001938 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e351      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0ee      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800351a:	d111      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003528:	4b04      	ldr	r3, [pc, #16]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800352a:	400b      	ands	r3, r1
 800352c:	4901      	ldr	r1, [pc, #4]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
 8003532:	e00b      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003534:	40023800 	.word	0x40023800
 8003538:	40007000 	.word	0x40007000
 800353c:	0ffffcff 	.word	0x0ffffcff
 8003540:	4bac      	ldr	r3, [pc, #688]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4aab      	ldr	r2, [pc, #684]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003546:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800354a:	6093      	str	r3, [r2, #8]
 800354c:	4ba9      	ldr	r3, [pc, #676]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800354e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	49a6      	ldr	r1, [pc, #664]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800355a:	4313      	orrs	r3, r2
 800355c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	2b00      	cmp	r3, #0
 8003568:	d010      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800356a:	4ba2      	ldr	r3, [pc, #648]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003570:	4aa0      	ldr	r2, [pc, #640]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003576:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800357a:	4b9e      	ldr	r3, [pc, #632]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800357c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	499b      	ldr	r1, [pc, #620]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003598:	4b96      	ldr	r3, [pc, #600]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a6:	4993      	ldr	r1, [pc, #588]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035ba:	4b8e      	ldr	r3, [pc, #568]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c8:	498a      	ldr	r1, [pc, #552]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035dc:	4b85      	ldr	r3, [pc, #532]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ea:	4982      	ldr	r1, [pc, #520]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035fe:	4b7d      	ldr	r3, [pc, #500]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4979      	ldr	r1, [pc, #484]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800360e:	4313      	orrs	r3, r2
 8003610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003620:	4b74      	ldr	r3, [pc, #464]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	f023 0203 	bic.w	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4971      	ldr	r1, [pc, #452]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003642:	4b6c      	ldr	r3, [pc, #432]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	f023 020c 	bic.w	r2, r3, #12
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	4968      	ldr	r1, [pc, #416]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003664:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	4960      	ldr	r1, [pc, #384]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003686:	4b5b      	ldr	r3, [pc, #364]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	4957      	ldr	r1, [pc, #348]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036a8:	4b52      	ldr	r3, [pc, #328]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	494f      	ldr	r1, [pc, #316]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036ca:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4946      	ldr	r1, [pc, #280]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036ec:	4b41      	ldr	r3, [pc, #260]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fa:	493e      	ldr	r1, [pc, #248]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800370e:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	4935      	ldr	r1, [pc, #212]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003730:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	492d      	ldr	r1, [pc, #180]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d011      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003760:	4924      	ldr	r1, [pc, #144]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003770:	d101      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003772:	2301      	movs	r3, #1
 8003774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a0:	4914      	ldr	r1, [pc, #80]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00b      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037b4:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037c4:	490b      	ldr	r1, [pc, #44]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80037d8:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037e8:	4902      	ldr	r1, [pc, #8]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037f0:	e002      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00b      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003804:	4b8a      	ldr	r3, [pc, #552]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800380a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003814:	4986      	ldr	r1, [pc, #536]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00b      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003828:	4b81      	ldr	r3, [pc, #516]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800382a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003838:	497d      	ldr	r1, [pc, #500]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d006      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80d6 	beq.w	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003854:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800385e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003860:	f7fe f86a 	bl	8001938 <HAL_GetTick>
 8003864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003868:	f7fe f866 	bl	8001938 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e195      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800387a:	4b6d      	ldr	r3, [pc, #436]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d021      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11d      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038a8:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ae:	0e1b      	lsrs	r3, r3, #24
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	019a      	lsls	r2, r3, #6
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	4958      	ldr	r1, [pc, #352]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02e      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003900:	d129      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003902:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003916:	0f1b      	lsrs	r3, r3, #28
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	019a      	lsls	r2, r3, #6
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	061b      	lsls	r3, r3, #24
 8003930:	431a      	orrs	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	071b      	lsls	r3, r3, #28
 8003936:	493e      	ldr	r1, [pc, #248]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800393e:	4b3c      	ldr	r3, [pc, #240]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003944:	f023 021f 	bic.w	r2, r3, #31
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	3b01      	subs	r3, #1
 800394e:	4938      	ldr	r1, [pc, #224]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01d      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003962:	4b33      	ldr	r3, [pc, #204]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003968:	0e1b      	lsrs	r3, r3, #24
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003970:	4b2f      	ldr	r3, [pc, #188]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003976:	0f1b      	lsrs	r3, r3, #28
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	019a      	lsls	r2, r3, #6
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	431a      	orrs	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	071b      	lsls	r3, r3, #28
 8003996:	4926      	ldr	r1, [pc, #152]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d011      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	019a      	lsls	r2, r3, #6
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	071b      	lsls	r3, r3, #28
 80039c6:	491a      	ldr	r1, [pc, #104]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039ce:	4b18      	ldr	r3, [pc, #96]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a17      	ldr	r2, [pc, #92]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039da:	f7fd ffad 	bl	8001938 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039e2:	f7fd ffa9 	bl	8001938 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b64      	cmp	r3, #100	; 0x64
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e0d8      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	f040 80ce 	bne.w	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a08:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fd ff90 	bl	8001938 <HAL_GetTick>
 8003a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a1a:	e00b      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a1c:	f7fd ff8c 	bl	8001938 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b64      	cmp	r3, #100	; 0x64
 8003a28:	d904      	bls.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0bb      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a34:	4b5e      	ldr	r3, [pc, #376]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a40:	d0ec      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02e      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d12a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a6a:	4b51      	ldr	r3, [pc, #324]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a78:	4b4d      	ldr	r3, [pc, #308]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7e:	0f1b      	lsrs	r3, r3, #28
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	019a      	lsls	r2, r3, #6
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	041b      	lsls	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	061b      	lsls	r3, r3, #24
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	071b      	lsls	r3, r3, #28
 8003a9e:	4944      	ldr	r1, [pc, #272]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003aa6:	4b42      	ldr	r3, [pc, #264]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	493d      	ldr	r1, [pc, #244]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d022      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad4:	d11d      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	0f1b      	lsrs	r3, r3, #28
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	019a      	lsls	r2, r3, #6
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	061b      	lsls	r3, r3, #24
 8003b04:	431a      	orrs	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	071b      	lsls	r3, r3, #28
 8003b0a:	4929      	ldr	r1, [pc, #164]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d028      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	0e1b      	lsrs	r3, r3, #24
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b2c:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	019a      	lsls	r2, r3, #6
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	041b      	lsls	r3, r3, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	061b      	lsls	r3, r3, #24
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	071b      	lsls	r3, r3, #28
 8003b52:	4917      	ldr	r1, [pc, #92]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	4911      	ldr	r1, [pc, #68]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b70:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0e      	ldr	r2, [pc, #56]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fedc 	bl	8001938 <HAL_GetTick>
 8003b80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b84:	f7fd fed8 	bl	8001938 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e007      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003b96:	4b06      	ldr	r3, [pc, #24]	; (8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba2:	d1ef      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e049      	b.n	8003c5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fd fc28 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	f000 faca 	bl	800418c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d001      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e054      	b.n	8003d26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d022      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x80>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d01d      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x80>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a22      	ldr	r2, [pc, #136]	; (8003d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x80>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d013      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x80>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x80>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1e      	ldr	r2, [pc, #120]	; (8003d44 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d009      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x80>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <HAL_TIM_Base_Start_IT+0xe4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <HAL_TIM_Base_Start_IT+0x80>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_TIM_Base_Start_IT+0xe8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d115      	bne.n	8003d10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_TIM_Base_Start_IT+0xec>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b06      	cmp	r3, #6
 8003cf4:	d015      	beq.n	8003d22 <HAL_TIM_Base_Start_IT+0xbe>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfc:	d011      	beq.n	8003d22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	e008      	b.n	8003d22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e000      	b.n	8003d24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40000c00 	.word	0x40000c00
 8003d44:	40010400 	.word	0x40010400
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40001800 	.word	0x40001800
 8003d50:	00010007 	.word	0x00010007

08003d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d122      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d11b      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0202 	mvn.w	r2, #2
 8003d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f9da 	bl	8004150 <HAL_TIM_IC_CaptureCallback>
 8003d9c:	e005      	b.n	8003daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f9cc 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f9dd 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d122      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d11b      	bne.n	8003e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0204 	mvn.w	r2, #4
 8003dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f9b0 	bl	8004150 <HAL_TIM_IC_CaptureCallback>
 8003df0:	e005      	b.n	8003dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f9a2 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f9b3 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0208 	mvn.w	r2, #8
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f986 	bl	8004150 <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f978 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f989 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0210 	mvn.w	r2, #16
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2208      	movs	r2, #8
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f95c 	bl	8004150 <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f94e 	bl	800413c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f95f 	bl	8004164 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0201 	mvn.w	r2, #1
 8003ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f928 	bl	8004128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d10e      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d107      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fb16 	bl	8004530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f12:	d10e      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d107      	bne.n	8003f32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fb09 	bl	8004544 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d10e      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4a:	2b40      	cmp	r3, #64	; 0x40
 8003f4c:	d107      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f90d 	bl	8004178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d10e      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0220 	mvn.w	r2, #32
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fac9 	bl	800451c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e0b4      	b.n	800411a <HAL_TIM_ConfigClockSource+0x186>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	4b56      	ldr	r3, [pc, #344]	; (8004124 <HAL_TIM_ConfigClockSource+0x190>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	d03e      	beq.n	8004068 <HAL_TIM_ConfigClockSource+0xd4>
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fee:	f200 8087 	bhi.w	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff6:	f000 8086 	beq.w	8004106 <HAL_TIM_ConfigClockSource+0x172>
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	d87f      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8004000:	2b70      	cmp	r3, #112	; 0x70
 8004002:	d01a      	beq.n	800403a <HAL_TIM_ConfigClockSource+0xa6>
 8004004:	2b70      	cmp	r3, #112	; 0x70
 8004006:	d87b      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8004008:	2b60      	cmp	r3, #96	; 0x60
 800400a:	d050      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x11a>
 800400c:	2b60      	cmp	r3, #96	; 0x60
 800400e:	d877      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8004010:	2b50      	cmp	r3, #80	; 0x50
 8004012:	d03c      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xfa>
 8004014:	2b50      	cmp	r3, #80	; 0x50
 8004016:	d873      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8004018:	2b40      	cmp	r3, #64	; 0x40
 800401a:	d058      	beq.n	80040ce <HAL_TIM_ConfigClockSource+0x13a>
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d86f      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8004020:	2b30      	cmp	r3, #48	; 0x30
 8004022:	d064      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15a>
 8004024:	2b30      	cmp	r3, #48	; 0x30
 8004026:	d86b      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	2b20      	cmp	r3, #32
 800402a:	d060      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15a>
 800402c:	2b20      	cmp	r3, #32
 800402e:	d867      	bhi.n	8004100 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d05c      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15a>
 8004034:	2b10      	cmp	r3, #16
 8004036:	d05a      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x15a>
 8004038:	e062      	b.n	8004100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6899      	ldr	r1, [r3, #8]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f000 f9b9 	bl	80043c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800405c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	609a      	str	r2, [r3, #8]
      break;
 8004066:	e04f      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6899      	ldr	r1, [r3, #8]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f000 f9a2 	bl	80043c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800408a:	609a      	str	r2, [r3, #8]
      break;
 800408c:	e03c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	461a      	mov	r2, r3
 800409c:	f000 f916 	bl	80042cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2150      	movs	r1, #80	; 0x50
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f96f 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 80040ac:	e02c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6859      	ldr	r1, [r3, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	461a      	mov	r2, r3
 80040bc:	f000 f935 	bl	800432a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2160      	movs	r1, #96	; 0x60
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f95f 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 80040cc:	e01c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	461a      	mov	r2, r3
 80040dc:	f000 f8f6 	bl	80042cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2140      	movs	r1, #64	; 0x40
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f94f 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 80040ec:	e00c      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4619      	mov	r1, r3
 80040f8:	4610      	mov	r0, r2
 80040fa:	f000 f946 	bl	800438a <TIM_ITRx_SetConfig>
      break;
 80040fe:	e003      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      break;
 8004104:	e000      	b.n	8004108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004118:	7bfb      	ldrb	r3, [r7, #15]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	fffeff88 	.word	0xfffeff88

08004128 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a40      	ldr	r2, [pc, #256]	; (80042a0 <TIM_Base_SetConfig+0x114>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d013      	beq.n	80041cc <TIM_Base_SetConfig+0x40>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041aa:	d00f      	beq.n	80041cc <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a3d      	ldr	r2, [pc, #244]	; (80042a4 <TIM_Base_SetConfig+0x118>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00b      	beq.n	80041cc <TIM_Base_SetConfig+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <TIM_Base_SetConfig+0x11c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d007      	beq.n	80041cc <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a3b      	ldr	r2, [pc, #236]	; (80042ac <TIM_Base_SetConfig+0x120>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d003      	beq.n	80041cc <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3a      	ldr	r2, [pc, #232]	; (80042b0 <TIM_Base_SetConfig+0x124>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d108      	bne.n	80041de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2f      	ldr	r2, [pc, #188]	; (80042a0 <TIM_Base_SetConfig+0x114>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d02b      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d027      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a2c      	ldr	r2, [pc, #176]	; (80042a4 <TIM_Base_SetConfig+0x118>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d023      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2b      	ldr	r2, [pc, #172]	; (80042a8 <TIM_Base_SetConfig+0x11c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01f      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2a      	ldr	r2, [pc, #168]	; (80042ac <TIM_Base_SetConfig+0x120>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01b      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a29      	ldr	r2, [pc, #164]	; (80042b0 <TIM_Base_SetConfig+0x124>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d017      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <TIM_Base_SetConfig+0x128>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a27      	ldr	r2, [pc, #156]	; (80042b8 <TIM_Base_SetConfig+0x12c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00f      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a26      	ldr	r2, [pc, #152]	; (80042bc <TIM_Base_SetConfig+0x130>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <TIM_Base_SetConfig+0x134>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a24      	ldr	r2, [pc, #144]	; (80042c4 <TIM_Base_SetConfig+0x138>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a23      	ldr	r2, [pc, #140]	; (80042c8 <TIM_Base_SetConfig+0x13c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <TIM_Base_SetConfig+0x114>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d003      	beq.n	8004284 <TIM_Base_SetConfig+0xf8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0c      	ldr	r2, [pc, #48]	; (80042b0 <TIM_Base_SetConfig+0x124>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40010000 	.word	0x40010000
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40000800 	.word	0x40000800
 80042ac:	40000c00 	.word	0x40000c00
 80042b0:	40010400 	.word	0x40010400
 80042b4:	40014000 	.word	0x40014000
 80042b8:	40014400 	.word	0x40014400
 80042bc:	40014800 	.word	0x40014800
 80042c0:	40001800 	.word	0x40001800
 80042c4:	40001c00 	.word	0x40001c00
 80042c8:	40002000 	.word	0x40002000

080042cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f023 0201 	bic.w	r2, r3, #1
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f023 030a 	bic.w	r3, r3, #10
 8004308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432a:	b480      	push	{r7}
 800432c:	b087      	sub	sp, #28
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0210 	bic.w	r2, r3, #16
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	031b      	lsls	r3, r3, #12
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438a:	b480      	push	{r7}
 800438c:	b085      	sub	sp, #20
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f043 0307 	orr.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	609a      	str	r2, [r3, #8]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004414:	2302      	movs	r3, #2
 8004416:	e06d      	b.n	80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a30      	ldr	r2, [pc, #192]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2f      	ldr	r2, [pc, #188]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d108      	bne.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004452:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004464:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a20      	ldr	r2, [pc, #128]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d022      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448a:	d01d      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d018      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d013      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a15      	ldr	r2, [pc, #84]	; (8004504 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d009      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a16      	ldr	r2, [pc, #88]	; (8004514 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d10c      	bne.n	80044e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	40010000 	.word	0x40010000
 8004504:	40010400 	.word	0x40010400
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40014000 	.word	0x40014000
 8004518:	40001800 	.word	0x40001800

0800451c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e040      	b.n	80045ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d106      	bne.n	8004580 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc ffdc 	bl	8001538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	; 0x24
 8004584:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fbc2 	bl	8004d20 <UART_SetConfig>
 800459c:	4603      	mov	r3, r0
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e022      	b.n	80045ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fe1a 	bl	80051e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 fea1 	bl	800532c <UART_CheckIdleState>
 80045ea:	4603      	mov	r3, r0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	4613      	mov	r3, r2
 8004602:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004608:	2b20      	cmp	r3, #32
 800460a:	d171      	bne.n	80046f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_UART_Transmit+0x24>
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e06a      	b.n	80046f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2221      	movs	r2, #33	; 0x21
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462a:	f7fd f985 	bl	8001938 <HAL_GetTick>
 800462e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d108      	bne.n	800465c <HAL_UART_Transmit+0x68>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	e003      	b.n	8004664 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004664:	e02c      	b.n	80046c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2200      	movs	r2, #0
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 fea8 	bl	80053c6 <UART_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e038      	b.n	80046f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004694:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	3302      	adds	r3, #2
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e007      	b.n	80046ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	3301      	adds	r3, #1
 80046ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1cc      	bne.n	8004666 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	9300      	str	r3, [sp, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2140      	movs	r1, #64	; 0x40
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fe75 	bl	80053c6 <UART_WaitOnFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e005      	b.n	80046f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b0ba      	sub	sp, #232	; 0xe8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004722:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004726:	f640 030f 	movw	r3, #2063	; 0x80f
 800472a:	4013      	ands	r3, r2
 800472c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d115      	bne.n	8004764 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00f      	beq.n	8004764 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 82ac 	beq.w	8004cb2 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
      }
      return;
 8004762:	e2a6      	b.n	8004cb2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8117 	beq.w	800499c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800476e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800477a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800477e:	4b85      	ldr	r3, [pc, #532]	; (8004994 <HAL_UART_IRQHandler+0x298>)
 8004780:	4013      	ands	r3, r2
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 810a 	beq.w	800499c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d011      	beq.n	80047b8 <HAL_UART_IRQHandler+0xbc>
 8004794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00b      	beq.n	80047b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2201      	movs	r2, #1
 80047a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d011      	beq.n	80047e8 <HAL_UART_IRQHandler+0xec>
 80047c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00b      	beq.n	80047e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2202      	movs	r2, #2
 80047d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047de:	f043 0204 	orr.w	r2, r3, #4
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d011      	beq.n	8004818 <HAL_UART_IRQHandler+0x11c>
 80047f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2204      	movs	r2, #4
 8004806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800480e:	f043 0202 	orr.w	r2, r3, #2
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d017      	beq.n	8004854 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d105      	bne.n	800483c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004834:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2208      	movs	r2, #8
 8004842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	f043 0208 	orr.w	r2, r3, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485c:	2b00      	cmp	r3, #0
 800485e:	d012      	beq.n	8004886 <HAL_UART_IRQHandler+0x18a>
 8004860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004864:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00c      	beq.n	8004886 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 8212 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800489e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d005      	beq.n	80048de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d04f      	beq.n	800497e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fe37 	bl	8005552 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d141      	bne.n	8004976 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3308      	adds	r3, #8
 80048f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004900:	e853 3f00 	ldrex	r3, [r3]
 8004904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800490c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800491e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800492a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1d9      	bne.n	80048f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004942:	2b00      	cmp	r3, #0
 8004944:	d013      	beq.n	800496e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	4a13      	ldr	r2, [pc, #76]	; (8004998 <HAL_UART_IRQHandler+0x29c>)
 800494c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd fe21 	bl	800259a <HAL_DMA_Abort_IT>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d017      	beq.n	800498e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004968:	4610      	mov	r0, r2
 800496a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	e00f      	b.n	800498e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f9b6 	bl	8004ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e00b      	b.n	800498e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9b2 	bl	8004ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e007      	b.n	800498e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f9ae 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800498c:	e193      	b.n	8004cb6 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498e:	bf00      	nop
    return;
 8004990:	e191      	b.n	8004cb6 <HAL_UART_IRQHandler+0x5ba>
 8004992:	bf00      	nop
 8004994:	04000120 	.word	0x04000120
 8004998:	0800561b 	.word	0x0800561b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	f040 814c 	bne.w	8004c3e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 8145 	beq.w	8004c3e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 813e 	beq.w	8004c3e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2210      	movs	r2, #16
 80049c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	f040 80b6 	bne.w	8004b46 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8165 	beq.w	8004cba <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049fa:	429a      	cmp	r2, r3
 80049fc:	f080 815d 	bcs.w	8004cba <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a14:	f000 8086 	beq.w	8004b24 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1da      	bne.n	8004a18 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3308      	adds	r3, #8
 8004a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e1      	bne.n	8004a62 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ac2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ac4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ac8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e3      	bne.n	8004a9e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af4:	f023 0310 	bic.w	r3, r3, #16
 8004af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e4      	bne.n	8004ae4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fd fccb 	bl	80024ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f8d8 	bl	8004cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b44:	e0b9      	b.n	8004cba <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80ab 	beq.w	8004cbe <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80a6 	beq.w	8004cbe <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b94:	647b      	str	r3, [r7, #68]	; 0x44
 8004b96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e4      	bne.n	8004b72 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3308      	adds	r3, #8
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bcc:	633a      	str	r2, [r7, #48]	; 0x30
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e3      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 0310 	bic.w	r3, r3, #16
 8004c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	461a      	mov	r2, r3
 8004c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	69b9      	ldr	r1, [r7, #24]
 8004c1c:	69fa      	ldr	r2, [r7, #28]
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	617b      	str	r3, [r7, #20]
   return(result);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e4      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f85c 	bl	8004cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c3c:	e03f      	b.n	8004cbe <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00e      	beq.n	8004c68 <HAL_UART_IRQHandler+0x56c>
 8004c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d008      	beq.n	8004c68 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f853 	bl	8004d0c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c66:	e02d      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00e      	beq.n	8004c92 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d008      	beq.n	8004c92 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01c      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
    }
    return;
 8004c90:	e017      	b.n	8004cc2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d012      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x5c8>
 8004c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fccb 	bl	8005646 <UART_EndTransmit_IT>
    return;
 8004cb0:	e008      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004cb2:	bf00      	nop
 8004cb4:	e006      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004cb6:	bf00      	nop
 8004cb8:	e004      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004cba:	bf00      	nop
 8004cbc:	e002      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004cbe:	bf00      	nop
 8004cc0:	e000      	b.n	8004cc4 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004cc2:	bf00      	nop
  }

}
 8004cc4:	37e8      	adds	r7, #232	; 0xe8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop

08004ccc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	69db      	ldr	r3, [r3, #28]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4ba6      	ldr	r3, [pc, #664]	; (8004fe4 <UART_SetConfig+0x2c4>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a94      	ldr	r2, [pc, #592]	; (8004fe8 <UART_SetConfig+0x2c8>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d120      	bne.n	8004dde <UART_SetConfig+0xbe>
 8004d9c:	4b93      	ldr	r3, [pc, #588]	; (8004fec <UART_SetConfig+0x2cc>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d816      	bhi.n	8004dd8 <UART_SetConfig+0xb8>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0x90>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004dcd 	.word	0x08004dcd
 8004db8:	08004dc7 	.word	0x08004dc7
 8004dbc:	08004dd3 	.word	0x08004dd3
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	77fb      	strb	r3, [r7, #31]
 8004dc4:	e150      	b.n	8005068 <UART_SetConfig+0x348>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	77fb      	strb	r3, [r7, #31]
 8004dca:	e14d      	b.n	8005068 <UART_SetConfig+0x348>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	77fb      	strb	r3, [r7, #31]
 8004dd0:	e14a      	b.n	8005068 <UART_SetConfig+0x348>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	77fb      	strb	r3, [r7, #31]
 8004dd6:	e147      	b.n	8005068 <UART_SetConfig+0x348>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e144      	b.n	8005068 <UART_SetConfig+0x348>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a83      	ldr	r2, [pc, #524]	; (8004ff0 <UART_SetConfig+0x2d0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d132      	bne.n	8004e4e <UART_SetConfig+0x12e>
 8004de8:	4b80      	ldr	r3, [pc, #512]	; (8004fec <UART_SetConfig+0x2cc>)
 8004dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dee:	f003 030c 	and.w	r3, r3, #12
 8004df2:	2b0c      	cmp	r3, #12
 8004df4:	d828      	bhi.n	8004e48 <UART_SetConfig+0x128>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0xdc>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e49 	.word	0x08004e49
 8004e04:	08004e49 	.word	0x08004e49
 8004e08:	08004e49 	.word	0x08004e49
 8004e0c:	08004e3d 	.word	0x08004e3d
 8004e10:	08004e49 	.word	0x08004e49
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004e49 	.word	0x08004e49
 8004e1c:	08004e37 	.word	0x08004e37
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e49 	.word	0x08004e49
 8004e28:	08004e49 	.word	0x08004e49
 8004e2c:	08004e43 	.word	0x08004e43
 8004e30:	2300      	movs	r3, #0
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e118      	b.n	8005068 <UART_SetConfig+0x348>
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e115      	b.n	8005068 <UART_SetConfig+0x348>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e112      	b.n	8005068 <UART_SetConfig+0x348>
 8004e42:	2308      	movs	r3, #8
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e10f      	b.n	8005068 <UART_SetConfig+0x348>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e10c      	b.n	8005068 <UART_SetConfig+0x348>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a68      	ldr	r2, [pc, #416]	; (8004ff4 <UART_SetConfig+0x2d4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d120      	bne.n	8004e9a <UART_SetConfig+0x17a>
 8004e58:	4b64      	ldr	r3, [pc, #400]	; (8004fec <UART_SetConfig+0x2cc>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e62:	2b30      	cmp	r3, #48	; 0x30
 8004e64:	d013      	beq.n	8004e8e <UART_SetConfig+0x16e>
 8004e66:	2b30      	cmp	r3, #48	; 0x30
 8004e68:	d814      	bhi.n	8004e94 <UART_SetConfig+0x174>
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d009      	beq.n	8004e82 <UART_SetConfig+0x162>
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d810      	bhi.n	8004e94 <UART_SetConfig+0x174>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <UART_SetConfig+0x15c>
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d006      	beq.n	8004e88 <UART_SetConfig+0x168>
 8004e7a:	e00b      	b.n	8004e94 <UART_SetConfig+0x174>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e0f2      	b.n	8005068 <UART_SetConfig+0x348>
 8004e82:	2302      	movs	r3, #2
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e0ef      	b.n	8005068 <UART_SetConfig+0x348>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e0ec      	b.n	8005068 <UART_SetConfig+0x348>
 8004e8e:	2308      	movs	r3, #8
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e0e9      	b.n	8005068 <UART_SetConfig+0x348>
 8004e94:	2310      	movs	r3, #16
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e0e6      	b.n	8005068 <UART_SetConfig+0x348>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a56      	ldr	r2, [pc, #344]	; (8004ff8 <UART_SetConfig+0x2d8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d120      	bne.n	8004ee6 <UART_SetConfig+0x1c6>
 8004ea4:	4b51      	ldr	r3, [pc, #324]	; (8004fec <UART_SetConfig+0x2cc>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004eae:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb0:	d013      	beq.n	8004eda <UART_SetConfig+0x1ba>
 8004eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004eb4:	d814      	bhi.n	8004ee0 <UART_SetConfig+0x1c0>
 8004eb6:	2b80      	cmp	r3, #128	; 0x80
 8004eb8:	d009      	beq.n	8004ece <UART_SetConfig+0x1ae>
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d810      	bhi.n	8004ee0 <UART_SetConfig+0x1c0>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <UART_SetConfig+0x1a8>
 8004ec2:	2b40      	cmp	r3, #64	; 0x40
 8004ec4:	d006      	beq.n	8004ed4 <UART_SetConfig+0x1b4>
 8004ec6:	e00b      	b.n	8004ee0 <UART_SetConfig+0x1c0>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	77fb      	strb	r3, [r7, #31]
 8004ecc:	e0cc      	b.n	8005068 <UART_SetConfig+0x348>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	77fb      	strb	r3, [r7, #31]
 8004ed2:	e0c9      	b.n	8005068 <UART_SetConfig+0x348>
 8004ed4:	2304      	movs	r3, #4
 8004ed6:	77fb      	strb	r3, [r7, #31]
 8004ed8:	e0c6      	b.n	8005068 <UART_SetConfig+0x348>
 8004eda:	2308      	movs	r3, #8
 8004edc:	77fb      	strb	r3, [r7, #31]
 8004ede:	e0c3      	b.n	8005068 <UART_SetConfig+0x348>
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e0c0      	b.n	8005068 <UART_SetConfig+0x348>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a44      	ldr	r2, [pc, #272]	; (8004ffc <UART_SetConfig+0x2dc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d125      	bne.n	8004f3c <UART_SetConfig+0x21c>
 8004ef0:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <UART_SetConfig+0x2cc>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004efe:	d017      	beq.n	8004f30 <UART_SetConfig+0x210>
 8004f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f04:	d817      	bhi.n	8004f36 <UART_SetConfig+0x216>
 8004f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0a:	d00b      	beq.n	8004f24 <UART_SetConfig+0x204>
 8004f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f10:	d811      	bhi.n	8004f36 <UART_SetConfig+0x216>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <UART_SetConfig+0x1fe>
 8004f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f1a:	d006      	beq.n	8004f2a <UART_SetConfig+0x20a>
 8004f1c:	e00b      	b.n	8004f36 <UART_SetConfig+0x216>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e0a1      	b.n	8005068 <UART_SetConfig+0x348>
 8004f24:	2302      	movs	r3, #2
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e09e      	b.n	8005068 <UART_SetConfig+0x348>
 8004f2a:	2304      	movs	r3, #4
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e09b      	b.n	8005068 <UART_SetConfig+0x348>
 8004f30:	2308      	movs	r3, #8
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e098      	b.n	8005068 <UART_SetConfig+0x348>
 8004f36:	2310      	movs	r3, #16
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e095      	b.n	8005068 <UART_SetConfig+0x348>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2f      	ldr	r2, [pc, #188]	; (8005000 <UART_SetConfig+0x2e0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d125      	bne.n	8004f92 <UART_SetConfig+0x272>
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <UART_SetConfig+0x2cc>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f54:	d017      	beq.n	8004f86 <UART_SetConfig+0x266>
 8004f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f5a:	d817      	bhi.n	8004f8c <UART_SetConfig+0x26c>
 8004f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f60:	d00b      	beq.n	8004f7a <UART_SetConfig+0x25a>
 8004f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f66:	d811      	bhi.n	8004f8c <UART_SetConfig+0x26c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <UART_SetConfig+0x254>
 8004f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f70:	d006      	beq.n	8004f80 <UART_SetConfig+0x260>
 8004f72:	e00b      	b.n	8004f8c <UART_SetConfig+0x26c>
 8004f74:	2301      	movs	r3, #1
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e076      	b.n	8005068 <UART_SetConfig+0x348>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e073      	b.n	8005068 <UART_SetConfig+0x348>
 8004f80:	2304      	movs	r3, #4
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e070      	b.n	8005068 <UART_SetConfig+0x348>
 8004f86:	2308      	movs	r3, #8
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e06d      	b.n	8005068 <UART_SetConfig+0x348>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e06a      	b.n	8005068 <UART_SetConfig+0x348>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1b      	ldr	r2, [pc, #108]	; (8005004 <UART_SetConfig+0x2e4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d138      	bne.n	800500e <UART_SetConfig+0x2ee>
 8004f9c:	4b13      	ldr	r3, [pc, #76]	; (8004fec <UART_SetConfig+0x2cc>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004faa:	d017      	beq.n	8004fdc <UART_SetConfig+0x2bc>
 8004fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fb0:	d82a      	bhi.n	8005008 <UART_SetConfig+0x2e8>
 8004fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb6:	d00b      	beq.n	8004fd0 <UART_SetConfig+0x2b0>
 8004fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbc:	d824      	bhi.n	8005008 <UART_SetConfig+0x2e8>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <UART_SetConfig+0x2aa>
 8004fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc6:	d006      	beq.n	8004fd6 <UART_SetConfig+0x2b6>
 8004fc8:	e01e      	b.n	8005008 <UART_SetConfig+0x2e8>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	77fb      	strb	r3, [r7, #31]
 8004fce:	e04b      	b.n	8005068 <UART_SetConfig+0x348>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	77fb      	strb	r3, [r7, #31]
 8004fd4:	e048      	b.n	8005068 <UART_SetConfig+0x348>
 8004fd6:	2304      	movs	r3, #4
 8004fd8:	77fb      	strb	r3, [r7, #31]
 8004fda:	e045      	b.n	8005068 <UART_SetConfig+0x348>
 8004fdc:	2308      	movs	r3, #8
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e042      	b.n	8005068 <UART_SetConfig+0x348>
 8004fe2:	bf00      	nop
 8004fe4:	efff69f3 	.word	0xefff69f3
 8004fe8:	40011000 	.word	0x40011000
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40004400 	.word	0x40004400
 8004ff4:	40004800 	.word	0x40004800
 8004ff8:	40004c00 	.word	0x40004c00
 8004ffc:	40005000 	.word	0x40005000
 8005000:	40011400 	.word	0x40011400
 8005004:	40007800 	.word	0x40007800
 8005008:	2310      	movs	r3, #16
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e02c      	b.n	8005068 <UART_SetConfig+0x348>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a72      	ldr	r2, [pc, #456]	; (80051dc <UART_SetConfig+0x4bc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d125      	bne.n	8005064 <UART_SetConfig+0x344>
 8005018:	4b71      	ldr	r3, [pc, #452]	; (80051e0 <UART_SetConfig+0x4c0>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005022:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005026:	d017      	beq.n	8005058 <UART_SetConfig+0x338>
 8005028:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800502c:	d817      	bhi.n	800505e <UART_SetConfig+0x33e>
 800502e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005032:	d00b      	beq.n	800504c <UART_SetConfig+0x32c>
 8005034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005038:	d811      	bhi.n	800505e <UART_SetConfig+0x33e>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <UART_SetConfig+0x326>
 800503e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005042:	d006      	beq.n	8005052 <UART_SetConfig+0x332>
 8005044:	e00b      	b.n	800505e <UART_SetConfig+0x33e>
 8005046:	2300      	movs	r3, #0
 8005048:	77fb      	strb	r3, [r7, #31]
 800504a:	e00d      	b.n	8005068 <UART_SetConfig+0x348>
 800504c:	2302      	movs	r3, #2
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e00a      	b.n	8005068 <UART_SetConfig+0x348>
 8005052:	2304      	movs	r3, #4
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e007      	b.n	8005068 <UART_SetConfig+0x348>
 8005058:	2308      	movs	r3, #8
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e004      	b.n	8005068 <UART_SetConfig+0x348>
 800505e:	2310      	movs	r3, #16
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e001      	b.n	8005068 <UART_SetConfig+0x348>
 8005064:	2310      	movs	r3, #16
 8005066:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005070:	d15b      	bne.n	800512a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005072:	7ffb      	ldrb	r3, [r7, #31]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d828      	bhi.n	80050ca <UART_SetConfig+0x3aa>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <UART_SetConfig+0x360>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050b5 	.word	0x080050b5
 800508c:	080050cb 	.word	0x080050cb
 8005090:	080050bb 	.word	0x080050bb
 8005094:	080050cb 	.word	0x080050cb
 8005098:	080050cb 	.word	0x080050cb
 800509c:	080050cb 	.word	0x080050cb
 80050a0:	080050c3 	.word	0x080050c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a4:	f7fe f936 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80050a8:	61b8      	str	r0, [r7, #24]
        break;
 80050aa:	e013      	b.n	80050d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ac:	f7fe f946 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 80050b0:	61b8      	str	r0, [r7, #24]
        break;
 80050b2:	e00f      	b.n	80050d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050b4:	4b4b      	ldr	r3, [pc, #300]	; (80051e4 <UART_SetConfig+0x4c4>)
 80050b6:	61bb      	str	r3, [r7, #24]
        break;
 80050b8:	e00c      	b.n	80050d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ba:	f7fe f859 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 80050be:	61b8      	str	r0, [r7, #24]
        break;
 80050c0:	e008      	b.n	80050d4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050c6:	61bb      	str	r3, [r7, #24]
        break;
 80050c8:	e004      	b.n	80050d4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	77bb      	strb	r3, [r7, #30]
        break;
 80050d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d074      	beq.n	80051c4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	005a      	lsls	r2, r3, #1
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	085b      	lsrs	r3, r3, #1
 80050e4:	441a      	add	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b0f      	cmp	r3, #15
 80050f4:	d916      	bls.n	8005124 <UART_SetConfig+0x404>
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d212      	bcs.n	8005124 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f023 030f 	bic.w	r3, r3, #15
 8005106:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	085b      	lsrs	r3, r3, #1
 800510c:	b29b      	uxth	r3, r3
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	b29a      	uxth	r2, r3
 8005114:	89fb      	ldrh	r3, [r7, #14]
 8005116:	4313      	orrs	r3, r2
 8005118:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	89fa      	ldrh	r2, [r7, #14]
 8005120:	60da      	str	r2, [r3, #12]
 8005122:	e04f      	b.n	80051c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	77bb      	strb	r3, [r7, #30]
 8005128:	e04c      	b.n	80051c4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800512a:	7ffb      	ldrb	r3, [r7, #31]
 800512c:	2b08      	cmp	r3, #8
 800512e:	d828      	bhi.n	8005182 <UART_SetConfig+0x462>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0x418>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	0800515d 	.word	0x0800515d
 800513c:	08005165 	.word	0x08005165
 8005140:	0800516d 	.word	0x0800516d
 8005144:	08005183 	.word	0x08005183
 8005148:	08005173 	.word	0x08005173
 800514c:	08005183 	.word	0x08005183
 8005150:	08005183 	.word	0x08005183
 8005154:	08005183 	.word	0x08005183
 8005158:	0800517b 	.word	0x0800517b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7fe f8da 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8005160:	61b8      	str	r0, [r7, #24]
        break;
 8005162:	e013      	b.n	800518c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005164:	f7fe f8ea 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 8005168:	61b8      	str	r0, [r7, #24]
        break;
 800516a:	e00f      	b.n	800518c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800516c:	4b1d      	ldr	r3, [pc, #116]	; (80051e4 <UART_SetConfig+0x4c4>)
 800516e:	61bb      	str	r3, [r7, #24]
        break;
 8005170:	e00c      	b.n	800518c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005172:	f7fd fffd 	bl	8003170 <HAL_RCC_GetSysClockFreq>
 8005176:	61b8      	str	r0, [r7, #24]
        break;
 8005178:	e008      	b.n	800518c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517e:	61bb      	str	r3, [r7, #24]
        break;
 8005180:	e004      	b.n	800518c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	77bb      	strb	r3, [r7, #30]
        break;
 800518a:	bf00      	nop
    }

    if (pclk != 0U)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d018      	beq.n	80051c4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	085a      	lsrs	r2, r3, #1
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	441a      	add	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d909      	bls.n	80051c0 <UART_SetConfig+0x4a0>
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b2:	d205      	bcs.n	80051c0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	e001      	b.n	80051c4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80051d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3720      	adds	r7, #32
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40007c00 	.word	0x40007c00
 80051e0:	40023800 	.word	0x40023800
 80051e4:	00f42400 	.word	0x00f42400

080051e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	f003 0304 	and.w	r3, r3, #4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01a      	beq.n	80052fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052e6:	d10a      	bne.n	80052fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
  }
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af02      	add	r7, sp, #8
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800533c:	f7fc fafc 	bl	8001938 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b08      	cmp	r3, #8
 800534e:	d10e      	bne.n	800536e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f831 	bl	80053c6 <UART_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e027      	b.n	80053be <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b04      	cmp	r3, #4
 800537a:	d10e      	bne.n	800539a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800537c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f81b 	bl	80053c6 <UART_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e011      	b.n	80053be <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b09c      	sub	sp, #112	; 0x70
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	4613      	mov	r3, r2
 80053d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053d6:	e0a7      	b.n	8005528 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	f000 80a3 	beq.w	8005528 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fc faa9 	bl	8001938 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80053f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d13f      	bne.n	8005478 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800540c:	667b      	str	r3, [r7, #100]	; 0x64
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005418:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800541c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e6      	bne.n	80053f8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	663b      	str	r3, [r7, #96]	; 0x60
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800544a:	64ba      	str	r2, [r7, #72]	; 0x48
 800544c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e068      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d050      	beq.n	8005528 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005494:	d148      	bne.n	8005528 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800549e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a8:	e853 3f00 	ldrex	r3, [r3]
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
 80054c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1e6      	bne.n	80054a0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3308      	adds	r3, #8
 80054d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	613b      	str	r3, [r7, #16]
   return(result);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f023 0301 	bic.w	r3, r3, #1
 80054e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054f2:	623a      	str	r2, [r7, #32]
 80054f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	69f9      	ldr	r1, [r7, #28]
 80054f8:	6a3a      	ldr	r2, [r7, #32]
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e5      	bne.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e010      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	69da      	ldr	r2, [r3, #28]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4013      	ands	r3, r2
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	429a      	cmp	r2, r3
 8005536:	bf0c      	ite	eq
 8005538:	2301      	moveq	r3, #1
 800553a:	2300      	movne	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	429a      	cmp	r2, r3
 8005544:	f43f af48 	beq.w	80053d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3770      	adds	r7, #112	; 0x70
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005552:	b480      	push	{r7}
 8005554:	b095      	sub	sp, #84	; 0x54
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800556e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	643b      	str	r3, [r7, #64]	; 0x40
 800557a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800557e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005580:	e841 2300 	strex	r3, r2, [r1]
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1e6      	bne.n	800555a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3308      	adds	r3, #8
 8005592:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	61fb      	str	r3, [r7, #28]
   return(result);
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f023 0301 	bic.w	r3, r3, #1
 80055a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3308      	adds	r3, #8
 80055aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e5      	bne.n	800558c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d118      	bne.n	80055fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f023 0310 	bic.w	r3, r3, #16
 80055dc:	647b      	str	r3, [r7, #68]	; 0x44
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6979      	ldr	r1, [r7, #20]
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	613b      	str	r3, [r7, #16]
   return(result);
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e6      	bne.n	80055c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800560e:	bf00      	nop
 8005610:	3754      	adds	r7, #84	; 0x54
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff fb51 	bl	8004ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b088      	sub	sp, #32
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	60bb      	str	r3, [r7, #8]
   return(result);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	6979      	ldr	r1, [r7, #20]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	613b      	str	r3, [r7, #16]
   return(result);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e6      	bne.n	800564e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2220      	movs	r2, #32
 8005684:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fb1d 	bl	8004ccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005692:	bf00      	nop
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <DriverInit>:
 *	@param	**driver - main hardware driver object
 *	@param	*uart - user defined UART object
 *	@param	*tim - user defined timer object
 */
void DriverInit (void **driver, __UART_TYPE_DEF *uart, __TIMER_TYPE_DEF *tim)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b086      	sub	sp, #24
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
	#if (DRV_USE_FREERTOS)
		*driver = pvPortMalloc(sizeof(Driver_t));
	#else
		*driver = malloc(sizeof(Driver_t));
 80056a6:	f640 0018 	movw	r0, #2072	; 0x818
 80056aa:	f001 fd0d 	bl	80070c8 <malloc>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	601a      	str	r2, [r3, #0]
	#endif

	Driver_t *drv = (Driver_t*)(*driver);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	617b      	str	r3, [r7, #20]

	#if (DRV_HAL_TIMER || DRV_LL_TIMER)
		/* Timer */
		drv->tim = tim;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	601a      	str	r2, [r3, #0]
		drv->timCount = 0;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	605a      	str	r2, [r3, #4]
		xSemaphoreGive(drv->xSemaphoreTxBusy);

	#endif

    /* UART */
	drv->uart = uart;
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	609a      	str	r2, [r3, #8]

		UART_DrvInit(drv);

	#endif

	ClearTxBuff(drv);
 80056ce:	6978      	ldr	r0, [r7, #20]
 80056d0:	f000 f8d0 	bl	8005874 <ClearTxBuff>
	ClearRxBuff(drv);
 80056d4:	6978      	ldr	r0, [r7, #20]
 80056d6:	f000 f99e 	bl	8005a16 <ClearRxBuff>

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
		/* UART Interrupts executable code */
		DISABLE_UART_CR1_TCIE(drv->uart);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056ec:	601a      	str	r2, [r3, #0]
		ENABLE_UART_CR1_RXNEIE(drv->uart);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0220 	orr.w	r2, r2, #32
 8005700:	601a      	str	r2, [r3, #0]
		DISABLE_UART_CR1_IDLEIE(drv->uart);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0210 	bic.w	r2, r2, #16
 8005714:	601a      	str	r2, [r3, #0]
		LL_DMA_EnableStream(DMA_UART_RX, DMA_UART_RX_STREAM);

	#endif

	#if (DRV_HAL_TIMER || DRV_LL_TIMER)
		START_TIMER(drv->tim);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe faa2 	bl	8003c64 <HAL_TIM_Base_Start_IT>
	#endif
}
 8005720:	bf00      	nop
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <GetTimeMs>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Current time
 */
ui32 GetTimeMs (void *driver)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	60fb      	str	r3, [r7, #12]

	#if (DRV_USE_FREERTOS)
		drv->timCount = xTaskGetTickCount();
	#endif

	return drv->timCount;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	685b      	ldr	r3, [r3, #4]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <TimerDRV_CallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void TimerDRV_CallBack (void *driver)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	605a      	str	r2, [r3, #4]

	#if (DRV_LL_TIMER)
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx overflow status (1 - ERROR | 0 - OK)
 */
ui8 UartTransmitData (void *driver, ui8 *data, ui16 size)
{
 8005766:	b480      	push	{r7}
 8005768:	b087      	sub	sp, #28
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	4613      	mov	r3, r2
 8005772:	80fb      	strh	r3, [r7, #6]
	Driver_t *drv = (Driver_t*)driver;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	613b      	str	r3, [r7, #16]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		/* Free space check */
		if (TX_FIFO_TOTAL_SIZE - ((drv->TxHead - drv->TxTail) & (TX_FIFO_TOTAL_SIZE - 1)) < size)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	b29b      	uxth	r3, r3
 8005788:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578c:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8005790:	88fb      	ldrh	r3, [r7, #6]
 8005792:	429a      	cmp	r2, r3
 8005794:	da01      	bge.n	800579a <UartTransmitData+0x34>
		{
			/* - - - - User TxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return 1;
 8005796:	2301      	movs	r3, #1
 8005798:	e02e      	b.n	80057f8 <UartTransmitData+0x92>
		}

		ui16 count = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	82fb      	strh	r3, [r7, #22]
		while (count < size)
 800579e:	e01c      	b.n	80057da <UartTransmitData+0x74>
		{
			drv->TxBuffer[drv->TxHead++] = data[count++];
 80057a0:	8afb      	ldrh	r3, [r7, #22]
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	82fa      	strh	r2, [r7, #22]
 80057a6:	461a      	mov	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	441a      	add	r2, r3
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80057b2:	1c59      	adds	r1, r3, #1
 80057b4:	b288      	uxth	r0, r1
 80057b6:	6939      	ldr	r1, [r7, #16]
 80057b8:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 80057bc:	4619      	mov	r1, r3
 80057be:	7812      	ldrb	r2, [r2, #0]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	440b      	add	r3, r1
 80057c4:	731a      	strb	r2, [r3, #12]

			if (drv->TxHead >= TX_FIFO_TOTAL_SIZE)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d303      	bcc.n	80057da <UartTransmitData+0x74>
				drv->TxHead = 0;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		while (count < size)
 80057da:	8afa      	ldrh	r2, [r7, #22]
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3de      	bcc.n	80057a0 <UartTransmitData+0x3a>
		}

		ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f4:	601a      	str	r2, [r3, #0]

		return 0;
 80057f6:	2300      	movs	r3, #0
		LL_DMA_EnableStream(DMA_UART_TX, DMA_UART_TX_STREAM);

		return 0;

	#endif
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <UART_DRV_TxCallBack>:
	/**	@brief	UART transfer completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void UART_DRV_TxCallBack (void *driver)
	{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
		Driver_t *drv = (Driver_t*)driver;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]

		#endif

		#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)

			WRITE_UART_BYTE(drv->uart, drv->TxBuffer[drv->TxTail++] & (ui32)0xFF);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	b291      	uxth	r1, r2
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8005820:	461a      	mov	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	7b1a      	ldrb	r2, [r3, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	629a      	str	r2, [r3, #40]	; 0x28

			if (drv->TxTail == TX_FIFO_TOTAL_SIZE)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8005836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583a:	d103      	bne.n	8005844 <UART_DRV_TxCallBack+0x40>
				drv->TxTail = 0;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

			if (drv->TxTail == drv->TxHead)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8005850:	429a      	cmp	r2, r3
 8005852:	d109      	bne.n	8005868 <UART_DRV_TxCallBack+0x64>
			{
				DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005866:	601a      	str	r2, [r3, #0]

				/*  - - - - - - - - - - - - - - - - - - - - - - - */
			}

		#endif
	}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void ClearTxBuff (void *driver)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART || DRV_LL_DMA_UART)

		Driver_t *drv = (Driver_t*)driver;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60fb      	str	r3, [r7, #12]

		memset(drv->TxBuffer, 0, TX_FIFO_TOTAL_SIZE);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	330c      	adds	r3, #12
 8005884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005888:	2100      	movs	r1, #0
 800588a:	4618      	mov	r0, r3
 800588c:	f001 fc32 	bl	80070f4 <memset>
		drv->TxTail = 0;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
		drv->TxHead = 0;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e

	#else
		unused_(driver);
	#endif
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <GetAvailableBytes>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 GetAvailableBytes (void *driver)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	613b      	str	r3, [r7, #16]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->RxOverflowFlag)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <GetAvailableBytes+0x1c>
			return 0xFFFF;
 80058be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058c2:	e01b      	b.n	80058fc <GetAvailableBytes+0x54>

		ui16 rxHead = drv->RxHead;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80058ca:	82fb      	strh	r3, [r7, #22]
		ui16 rxTail = drv->RxTail;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 80058d2:	81fb      	strh	r3, [r7, #14]

		ui16 count = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	82bb      	strh	r3, [r7, #20]
		while (rxHead != rxTail)
 80058d8:	e00b      	b.n	80058f2 <GetAvailableBytes+0x4a>
		{
			if (!rxHead)
 80058da:	8afb      	ldrh	r3, [r7, #22]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d102      	bne.n	80058e6 <GetAvailableBytes+0x3e>
				rxHead = RX_FIFO_TOTAL_SIZE;
 80058e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058e4:	82fb      	strh	r3, [r7, #22]

			rxHead--;
 80058e6:	8afb      	ldrh	r3, [r7, #22]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	82fb      	strh	r3, [r7, #22]
			count++;
 80058ec:	8abb      	ldrh	r3, [r7, #20]
 80058ee:	3301      	adds	r3, #1
 80058f0:	82bb      	strh	r3, [r7, #20]
		while (rxHead != rxTail)
 80058f2:	8afa      	ldrh	r2, [r7, #22]
 80058f4:	89fb      	ldrh	r3, [r7, #14]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d1ef      	bne.n	80058da <GetAvailableBytes+0x32>
		}

		return count;
 80058fa:	8abb      	ldrh	r3, [r7, #20]
		/* UART DMA executable code */
		drv->RxHead = RX_FIFO_TOTAL_SIZE - GET_DMA_RX_COUNTER(DMA_UART_RX);
		return (drv->RxHead - drv->RxTail) & (RX_FIFO_TOTAL_SIZE - 1);

	#endif
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Receipt status (0 - receiving in progress | 1 - receive completed)
 */
ui8 UartReceiveByte (void *driver, ui8 *data)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
	Driver_t *drv = (Driver_t*)driver;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->RxTail == drv->RxHead)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8b3 2810 	ldrh.w	r2, [r3, #2064]	; 0x810
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 8005922:	429a      	cmp	r2, r3
 8005924:	d101      	bne.n	800592a <UartReceiveByte+0x22>
		{
			/*  - - - - User Receive-Complete Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return 1;
 8005926:	2301      	movs	r3, #1
 8005928:	e022      	b.n	8005970 <UartReceiveByte+0x68>
		}

		*data = drv->RxBuffer[drv->RxTail++];
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	b291      	uxth	r1, r2
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	f8a2 1810 	strh.w	r1, [r2, #2064]	; 0x810
 800593a:	461a      	mov	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	701a      	strb	r2, [r3, #0]

		if (drv->RxTail >= RX_FIFO_TOTAL_SIZE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 800594e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005952:	d303      	bcc.n	800595c <UartReceiveByte+0x54>
		   drv->RxTail = 0;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810

		if (drv->RxOverflowFlag == 1)  // Reset the overflow flag
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 8005962:	2b01      	cmp	r3, #1
 8005964:	d103      	bne.n	800596e <UartReceiveByte+0x66>
			drv->RxOverflowFlag = 0;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

		return 0;  // Rx ring buffer isn't empty
 800596e:	2300      	movs	r3, #0
		}

		return 0;

	#endif
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <UART_DRV_RxCallBack>:
	/**	@brief	UART receive completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void UART_DRV_RxCallBack (void *driver)
	{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
		Driver_t *drv = (Driver_t*)driver;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60fb      	str	r3, [r7, #12]

		if ((drv->RxHead - drv->RxTail == RX_FIFO_TOTAL_SIZE - 1) ||
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800599c:	4293      	cmp	r3, r2
 800599e:	d009      	beq.n	80059b4 <UART_DRV_RxCallBack+0x38>
			(drv->RxTail - drv->RxHead == 1))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 80059a6:	461a      	mov	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80059ae:	1ad3      	subs	r3, r2, r3
		if ((drv->RxHead - drv->RxTail == RX_FIFO_TOTAL_SIZE - 1) ||
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d10d      	bne.n	80059d0 <UART_DRV_RxCallBack+0x54>
		{
			/* - - - - User RxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */

			(void)READ_UART_BYTE(drv->uart);  // Prevent hardware overflow error (USART_ISR_ORE)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24

			if (drv->RxOverflowFlag == 0)  // Set the overflow flag
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d121      	bne.n	8005a0a <UART_DRV_RxCallBack+0x8e>
				drv->RxOverflowFlag = 1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

			return;
 80059ce:	e01c      	b.n	8005a0a <UART_DRV_RxCallBack+0x8e>
		}

		drv->RxBuffer[drv->RxHead++] = READ_UART_BYTE(drv->uart);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	b291      	uxth	r1, r2
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f8a2 1812 	strh.w	r1, [r2, #2066]	; 0x812
 80059e8:	4619      	mov	r1, r3
 80059ea:	b2c2      	uxtb	r2, r0
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	440b      	add	r3, r1
 80059f0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

		if (drv->RxHead >= RX_FIFO_TOTAL_SIZE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80059fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059fe:	d305      	bcc.n	8005a0c <UART_DRV_RxCallBack+0x90>
			drv->RxHead = 0;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
 8005a08:	e000      	b.n	8005a0c <UART_DRV_RxCallBack+0x90>
			return;
 8005a0a:	bf00      	nop
	}
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void ClearRxBuff (void *driver)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60fb      	str	r3, [r7, #12]

	memset(drv->RxBuffer, 0, RX_FIFO_TOTAL_SIZE);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8005a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fb60 	bl	80070f4 <memset>
	drv->RxTail = 0;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810
	drv->RxHead = 0;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
	drv->RxOverflowFlag = 0;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <UartTransmitDebugData>:
 *
 *	@param	*data - debug data
 *	@param	length - size of debug data
 */
void UartTransmitDebugData (char *data, ui16 length)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	807b      	strh	r3, [r7, #2]
	#if (DRV_USE_UART_DEBUG)
		#if (DRV_HAL_NVIC_UART || DRV_HAL_DMA_UART)

			/* UART HAL executable code */
			HAL_UART_Transmit(DEBUG_SERIAL_PORT, (ui8*)data, length, 100);
 8005a60:	887a      	ldrh	r2, [r7, #2]
 8005a62:	2364      	movs	r3, #100	; 0x64
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4803      	ldr	r0, [pc, #12]	; (8005a74 <UartTransmitDebugData+0x20>)
 8005a68:	f7fe fdc4 	bl	80045f4 <HAL_UART_Transmit>
				LL_USART_TransmitData8(DEBUG_SERIAL_PORT, data[count++]);
			}

		#endif
	#endif
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	200003d4 	.word	0x200003d4

08005a78 <SBGC32_Init>:
 * 	@param	*generalSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
TxRxStatus_t SBGC32_Init (GeneralSBGC_t *generalSBGC)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af04      	add	r7, sp, #16
 8005a7e:	6078      	str	r0, [r7, #4]
		return SBGC32_ManualInit(generalSBGC, PortTransmitData, PortReceiveByte, GetAvailableBytes,
								 PrintDebugData, GetTimeMs, sprintf, SBGC_PROTOCOL_V2);

	#elif (SBGC_USE_STM32_DRIVER)

		DriverInit(&generalSBGC->Drv, SBGC_SERIAL_PORT, SBGC_REFERENCE_TIMER);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a0c      	ldr	r2, [pc, #48]	; (8005ab4 <SBGC32_Init+0x3c>)
 8005a84:	490c      	ldr	r1, [pc, #48]	; (8005ab8 <SBGC32_Init+0x40>)
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fe07 	bl	800569a <DriverInit>

		return SBGC32_ManualInit(generalSBGC, UartTransmitData, UartReceiveByte, GetAvailableBytes,
 8005a8c:	2324      	movs	r3, #36	; 0x24
 8005a8e:	9303      	str	r3, [sp, #12]
 8005a90:	4b0a      	ldr	r3, [pc, #40]	; (8005abc <SBGC32_Init+0x44>)
 8005a92:	9302      	str	r3, [sp, #8]
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <SBGC32_Init+0x48>)
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <SBGC32_Init+0x4c>)
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <SBGC32_Init+0x50>)
 8005a9e:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <SBGC32_Init+0x54>)
 8005aa0:	490b      	ldr	r1, [pc, #44]	; (8005ad0 <SBGC32_Init+0x58>)
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fcba 	bl	800641c <SBGC32_ManualInit>
 8005aa8:	4603      	mov	r3, r0
								 UartTransmitDebugData, GetTimeMs, sprintf, SBGC_PROTOCOL_V2);

	#else
		#error "When using a custom driver, use the SBGC32_ManualInit() function!"
	#endif
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000300 	.word	0x20000300
 8005ab8:	2000034c 	.word	0x2000034c
 8005abc:	08007f85 	.word	0x08007f85
 8005ac0:	08005729 	.word	0x08005729
 8005ac4:	08005a55 	.word	0x08005a55
 8005ac8:	080058a9 	.word	0x080058a9
 8005acc:	08005909 	.word	0x08005909
 8005ad0:	08005767 	.word	0x08005767

08005ad4 <FormatBoardVersion>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	boardVer - BoardInfo_t.boardVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatBoardVersion (GeneralSBGC_t *generalSBGC, ui8 boardVer, char* pBuff)
{
 8005ad4:	b590      	push	{r4, r7, lr}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	460b      	mov	r3, r1
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	72fb      	strb	r3, [r7, #11]
	ui8 majorVer = boardVer / 10;
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	4a0d      	ldr	r2, [pc, #52]	; (8005b1c <FormatBoardVersion+0x48>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	08db      	lsrs	r3, r3, #3
 8005aec:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = boardVer % 10;
 8005aee:	7afa      	ldrb	r2, [r7, #11]
 8005af0:	4b0a      	ldr	r3, [pc, #40]	; (8005b1c <FormatBoardVersion+0x48>)
 8005af2:	fba3 1302 	umull	r1, r3, r3, r2
 8005af6:	08d9      	lsrs	r1, r3, #3
 8005af8:	460b      	mov	r3, r1
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	75bb      	strb	r3, [r7, #22]
	generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	699c      	ldr	r4, [r3, #24]
 8005b08:	7dfa      	ldrb	r2, [r7, #23]
 8005b0a:	7dbb      	ldrb	r3, [r7, #22]
 8005b0c:	4904      	ldr	r1, [pc, #16]	; (8005b20 <FormatBoardVersion+0x4c>)
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	47a0      	blx	r4
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd90      	pop	{r4, r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	cccccccd 	.word	0xcccccccd
 8005b20:	0800b7b8 	.word	0x0800b7b8

08005b24 <FormatFirmwareVersion>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	firmwareVer - BoardInfo_t.firmwareVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatFirmwareVersion (GeneralSBGC_t *generalSBGC, ui16 firmwareVer, char* pBuff)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b089      	sub	sp, #36	; 0x24
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	817b      	strh	r3, [r7, #10]
	ui8 majorVer = firmwareVer / 1000;
 8005b32:	897b      	ldrh	r3, [r7, #10]
 8005b34:	4a1d      	ldr	r2, [pc, #116]	; (8005bac <FormatFirmwareVersion+0x88>)
 8005b36:	fba2 2303 	umull	r2, r3, r2, r3
 8005b3a:	099b      	lsrs	r3, r3, #6
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = (firmwareVer % 1000) / 10;
 8005b40:	897b      	ldrh	r3, [r7, #10]
 8005b42:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <FormatFirmwareVersion+0x88>)
 8005b44:	fba2 1203 	umull	r1, r2, r2, r3
 8005b48:	0992      	lsrs	r2, r2, #6
 8005b4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b4e:	fb01 f202 	mul.w	r2, r1, r2
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <FormatFirmwareVersion+0x8c>)
 8005b58:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	75bb      	strb	r3, [r7, #22]
	ui8 betaVer = firmwareVer % 10;
 8005b62:	897a      	ldrh	r2, [r7, #10]
 8005b64:	4b12      	ldr	r3, [pc, #72]	; (8005bb0 <FormatFirmwareVersion+0x8c>)
 8005b66:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6a:	08d9      	lsrs	r1, r3, #3
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	757b      	strb	r3, [r7, #21]

	if (betaVer != 0)
 8005b7a:	7d7b      	ldrb	r3, [r7, #21]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <FormatFirmwareVersion+0x72>
		generalSBGC->SprintfFunc(pBuff, "%u.%ub%u", majorVer, minorVer, betaVer);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	699c      	ldr	r4, [r3, #24]
 8005b84:	7dfa      	ldrb	r2, [r7, #23]
 8005b86:	7db9      	ldrb	r1, [r7, #22]
 8005b88:	7d7b      	ldrb	r3, [r7, #21]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4909      	ldr	r1, [pc, #36]	; (8005bb4 <FormatFirmwareVersion+0x90>)
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	47a0      	blx	r4

	else
		generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
}
 8005b94:	e006      	b.n	8005ba4 <FormatFirmwareVersion+0x80>
		generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	699c      	ldr	r4, [r3, #24]
 8005b9a:	7dfa      	ldrb	r2, [r7, #23]
 8005b9c:	7dbb      	ldrb	r3, [r7, #22]
 8005b9e:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <FormatFirmwareVersion+0x94>)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	47a0      	blx	r4
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd90      	pop	{r4, r7, pc}
 8005bac:	10624dd3 	.word	0x10624dd3
 8005bb0:	cccccccd 	.word	0xcccccccd
 8005bb4:	0800b7c0 	.word	0x0800b7c0
 8005bb8:	0800b7b8 	.word	0x0800b7b8

08005bbc <SBGC32_TX>:
 *			to be transmitted
 *
 *	@return	Transmission status
 */
TxRxStatus_t SBGC32_TX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b0c5      	sub	sp, #276	; 0x114
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bc6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bca:	6018      	str	r0, [r3, #0]
 8005bcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bd0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bd4:	6019      	str	r1, [r3, #0]
	ui8 buff [MAX_BUFF_SIZE];
	ui32 currentTime;

	buff[0] = generalSBGC->protocolVersion;
 8005bd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	7f1a      	ldrb	r2, [r3, #28]
 8005be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bea:	701a      	strb	r2, [r3, #0]
	buff[1] = serialCommand->commandID;
 8005bec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bf0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	781a      	ldrb	r2, [r3, #0]
 8005bf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c00:	705a      	strb	r2, [r3, #1]
	buff[2] = serialCommand->payloadSize;
 8005c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8005c10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c18:	709a      	strb	r2, [r3, #2]
	buff[3] = buff[1] + buff[2];
 8005c1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c22:	785a      	ldrb	r2, [r3, #1]
 8005c24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2c:	789b      	ldrb	r3, [r3, #2]
 8005c2e:	4413      	add	r3, r2
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3a:	70da      	strb	r2, [r3, #3]

	memcpy(&buff[4], serialCommand->payload, serialCommand->payloadSize);
 8005c3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	1c59      	adds	r1, r3, #1
 8005c48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c56:	461a      	mov	r2, r3
 8005c58:	f107 0308 	add.w	r3, r7, #8
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 fa3a 	bl	80070d8 <memcpy>

	/* ui8 size = real size current serialCommand */
	ui8 size = serialCommand->payloadSize + 4 + ((generalSBGC->protocolVersion == PR2_START_CHARACTER) ? 2 : 1);
 8005c64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c72:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005c76:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	7f12      	ldrb	r2, [r2, #28]
 8005c7e:	2a24      	cmp	r2, #36	; 0x24
 8005c80:	d101      	bne.n	8005c86 <SBGC32_TX+0xca>
 8005c82:	2202      	movs	r2, #2
 8005c84:	e000      	b.n	8005c88 <SBGC32_TX+0xcc>
 8005c86:	2201      	movs	r2, #1
 8005c88:	4413      	add	r3, r2
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if (generalSBGC->protocolVersion == PR1_START_CHARACTER)
 8005c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	7f1b      	ldrb	r3, [r3, #28]
 8005c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8005ca0:	d120      	bne.n	8005ce4 <SBGC32_TX+0x128>
		buff[4 + serialCommand->payloadSize] = Modulo256_Calculate(serialCommand->payload, serialCommand->payloadSize);
 8005ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ca6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cb2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005cbc:	b299      	uxth	r1, r3
 8005cbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cc2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005ccc:	1d1c      	adds	r4, r3, #4
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f000 ffc8 	bl	8006c64 <Modulo256_Calculate>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce0:	551a      	strb	r2, [r3, r4]
 8005ce2:	e035      	b.n	8005d50 <SBGC32_TX+0x194>

	else
	{
		ui16 CRC16_Res = CRC16_Calculate(&buff[1], (4 + serialCommand->payloadSize - 1));
 8005ce4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ce8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3303      	adds	r3, #3
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	f107 0308 	add.w	r3, r7, #8
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 ffd6 	bl	8006cb2 <CRC16_Calculate>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		buff[4 + serialCommand->payloadSize] = CRC16_Res & 0x00FF;
 8005d0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8005d20:	b2d1      	uxtb	r1, r2
 8005d22:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005d26:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005d2a:	54d1      	strb	r1, [r2, r3]
		buff[5 + serialCommand->payloadSize] = (CRC16_Res >> 8) & 0x00FF;
 8005d2c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005d30:	0a1b      	lsrs	r3, r3, #8
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005d42:	3305      	adds	r3, #5
 8005d44:	b2d1      	uxtb	r1, r2
 8005d46:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005d4a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005d4e:	54d1      	strb	r1, [r2, r3]
	}

	currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005d50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005d60:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8005d70:	e029      	b.n	8005dc6 <SBGC32_TX+0x20a>
	{
		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txTimeout)
 8005d72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005d82:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	6812      	ldr	r2, [r2, #0]
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4798      	blx	r3
 8005d8e:	4602      	mov	r2, r0
 8005d90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d94:	1ad2      	subs	r2, r2, r3
 8005d96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d30f      	bcc.n	8005dc6 <SBGC32_TX+0x20a>
		{
			generalSBGC->_txErrorsCount++;
 8005da6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005daa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005db2:	3301      	adds	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	861a      	strh	r2, [r3, #48]	; 0x30
			return TX_BUFFER_OVERFLOW_ERROR;  // aka timeout error
 8005dc2:	2309      	movs	r3, #9
 8005dc4:	e015      	b.n	8005df2 <SBGC32_TX+0x236>
	while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8005dc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005dd6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	6810      	ldr	r0, [r2, #0]
 8005dde:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8005de2:	b292      	uxth	r2, r2
 8005de4:	f107 0108 	add.w	r1, r7, #8
 8005de8:	4798      	blx	r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1c0      	bne.n	8005d72 <SBGC32_TX+0x1b6>
		}
	}

	return TX_RX_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd90      	pop	{r4, r7, pc}

08005dfc <SBGC32_RX>:
 *			time for receiving one whole SerialCommand
 *
 *	@return	TX_RX_OK or last state of lastParserStatus variable
 */
TxRxStatus_t SBGC32_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, ui32 timeout)
{
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	b08c      	sub	sp, #48	; 0x30
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
	serialCommand->readPos = 0;  // Prepare for reading
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
		ui8 startSim;
		ui8 headBuff [3];  /* Header buffer:
		headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */
		ui16 availableBytes;

		TxRxStatus_t lastParserStatus = RX_START_PARSE;
 8005e12:	2302      	movs	r3, #2
 8005e14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		ParserState_t parserState = STATE_IDLE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		/* Launch timer */
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	4610      	mov	r0, r2
 8005e28:	4798      	blx	r3
 8005e2a:	62b8      	str	r0, [r7, #40]	; 0x28

		while (1)
		{
			switch (parserState)
 8005e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	d070      	beq.n	8005f16 <SBGC32_RX+0x11a>
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	f300 8132 	bgt.w	800609e <SBGC32_RX+0x2a2>
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	dc02      	bgt.n	8005e44 <SBGC32_RX+0x48>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da03      	bge.n	8005e4a <SBGC32_RX+0x4e>
 8005e42:	e12c      	b.n	800609e <SBGC32_RX+0x2a2>
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d024      	beq.n	8005e92 <SBGC32_RX+0x96>
 8005e48:	e129      	b.n	800609e <SBGC32_RX+0x2a2>
			{
				/* Waiting start byte */
				case STATE_IDLE :
				case STATE_RESYNC :
				{
					if (generalSBGC->AvailableBytesFunc(generalSBGC->Drv))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	4610      	mov	r0, r2
 8005e54:	4798      	blx	r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d016      	beq.n	8005e8a <SBGC32_RX+0x8e>
					{
						startSim = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	75fb      	strb	r3, [r7, #23]

						generalSBGC->RxFunc(generalSBGC->Drv, &startSim);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	6812      	ldr	r2, [r2, #0]
 8005e68:	f107 0117 	add.w	r1, r7, #23
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4798      	blx	r3

						if (startSim == generalSBGC->protocolVersion)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	7f1a      	ldrb	r2, [r3, #28]
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d103      	bne.n	8005e82 <SBGC32_RX+0x86>
							parserState = STATE_CHECK_HEADER;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					}

					else
						lastParserStatus = RX_EMPTY_BUFF_ERROR;

					break;  // Passing to next state
 8005e80:	e10d      	b.n	800609e <SBGC32_RX+0x2a2>
							lastParserStatus = RX_START_PARSE;
 8005e82:	2302      	movs	r3, #2
 8005e84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;  // Passing to next state
 8005e88:	e109      	b.n	800609e <SBGC32_RX+0x2a2>
						lastParserStatus = RX_EMPTY_BUFF_ERROR;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;  // Passing to next state
 8005e90:	e105      	b.n	800609e <SBGC32_RX+0x2a2>
				}

				/* Waiting whole header */
				case STATE_CHECK_HEADER :
				{
					availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	6812      	ldr	r2, [r2, #0]
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4798      	blx	r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	837b      	strh	r3, [r7, #26]

					if ((availableBytes >= 3) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8005ea2:	8b7b      	ldrh	r3, [r7, #26]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d91d      	bls.n	8005ee4 <SBGC32_RX+0xe8>
 8005ea8:	8b7b      	ldrh	r3, [r7, #26]
 8005eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d018      	beq.n	8005ee4 <SBGC32_RX+0xe8>
						for (ui8 i = 0; i < 3; i++)
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005eb8:	e00f      	b.n	8005eda <SBGC32_RX+0xde>
							generalSBGC->RxFunc(generalSBGC->Drv, &headBuff[i]);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	6810      	ldr	r0, [r2, #0]
 8005ec2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005ec6:	f107 0114 	add.w	r1, r7, #20
 8005eca:	440a      	add	r2, r1
 8005ecc:	4611      	mov	r1, r2
 8005ece:	4798      	blx	r3
						for (ui8 i = 0; i < 3; i++)
 8005ed0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005eda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d9eb      	bls.n	8005eba <SBGC32_RX+0xbe>
 8005ee2:	e003      	b.n	8005eec <SBGC32_RX+0xf0>

					else
					{
						lastParserStatus = RX_BUFFER_REALTIME_ERROR;
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						break;
 8005eea:	e0d8      	b.n	800609e <SBGC32_RX+0x2a2>
					}

					if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8005eec:	7d3a      	ldrb	r2, [r7, #20]
 8005eee:	7d7b      	ldrb	r3, [r7, #21]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	7dbb      	ldrb	r3, [r7, #22]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d102      	bne.n	8005f00 <SBGC32_RX+0x104>
						(headBuff[0] == 0))
 8005efa:	7d3b      	ldrb	r3, [r7, #20]
					if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d106      	bne.n	8005f0e <SBGC32_RX+0x112>
					{
						lastParserStatus = RX_HEADER_CHECKSUM_ERROR;
 8005f00:	2305      	movs	r3, #5
 8005f02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						parserState = STATE_RESYNC;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
 8005f0c:	e0c7      	b.n	800609e <SBGC32_RX+0x2a2>
					}

					parserState = STATE_CHECK_PAYLOAD;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;  // Passing to next state
 8005f14:	e0c3      	b.n	800609e <SBGC32_RX+0x2a2>
				}

				/* Waiting whole payload and checksum */
				case STATE_CHECK_PAYLOAD :
				{
 8005f16:	466b      	mov	r3, sp
 8005f18:	469a      	mov	sl, r3
					ui8 checksumSize = ((generalSBGC->protocolVersion == PR2_START_CHARACTER) ? 2 : 1);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	7f1b      	ldrb	r3, [r3, #28]
 8005f1e:	2b24      	cmp	r3, #36	; 0x24
 8005f20:	d101      	bne.n	8005f26 <SBGC32_RX+0x12a>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e000      	b.n	8005f28 <SBGC32_RX+0x12c>
 8005f26:	2301      	movs	r3, #1
 8005f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					ui8 complexBuff [3 + headBuff[1] + checksumSize];  // (Header + payload + checksum) buffer
 8005f2c:	7d7b      	ldrb	r3, [r7, #21]
 8005f2e:	1cda      	adds	r2, r3, #3
 8005f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f34:	18d1      	adds	r1, r2, r3
 8005f36:	1e4b      	subs	r3, r1, #1
 8005f38:	623b      	str	r3, [r7, #32]
 8005f3a:	460a      	mov	r2, r1
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4614      	mov	r4, r2
 8005f40:	461d      	mov	r5, r3
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	00eb      	lsls	r3, r5, #3
 8005f4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f50:	00e2      	lsls	r2, r4, #3
 8005f52:	460a      	mov	r2, r1
 8005f54:	2300      	movs	r3, #0
 8005f56:	4690      	mov	r8, r2
 8005f58:	4699      	mov	r9, r3
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f6e:	460b      	mov	r3, r1
 8005f70:	3307      	adds	r3, #7
 8005f72:	08db      	lsrs	r3, r3, #3
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	ebad 0d03 	sub.w	sp, sp, r3
 8005f7a:	466b      	mov	r3, sp
 8005f7c:	3300      	adds	r3, #0
 8005f7e:	61fb      	str	r3, [r7, #28]

					availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4798      	blx	r3
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	837b      	strh	r3, [r7, #26]

					if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8005f90:	8b7a      	ldrh	r2, [r7, #26]
 8005f92:	7d7b      	ldrb	r3, [r7, #21]
 8005f94:	4619      	mov	r1, r3
 8005f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f9a:	440b      	add	r3, r1
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	db22      	blt.n	8005fe6 <SBGC32_RX+0x1ea>
 8005fa0:	8b7b      	ldrh	r3, [r7, #26]
 8005fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01d      	beq.n	8005fe6 <SBGC32_RX+0x1ea>
						for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005fb0:	e00f      	b.n	8005fd2 <SBGC32_RX+0x1d6>
							generalSBGC->RxFunc(generalSBGC->Drv, &complexBuff[i + 3]);  // Offset from header space
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	6810      	ldr	r0, [r2, #0]
 8005fba:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005fbe:	3203      	adds	r2, #3
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	4798      	blx	r3
						for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 8005fc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fcc:	3301      	adds	r3, #1
 8005fce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005fd2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8005fd6:	7d7b      	ldrb	r3, [r7, #21]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fde:	440b      	add	r3, r1
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	dbe6      	blt.n	8005fb2 <SBGC32_RX+0x1b6>
 8005fe4:	e003      	b.n	8005fee <SBGC32_RX+0x1f2>

					else
					{
						lastParserStatus = RX_BUFFER_REALTIME_ERROR;
 8005fe6:	2304      	movs	r3, #4
 8005fe8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						break;
 8005fec:	e056      	b.n	800609c <SBGC32_RX+0x2a0>
					}

					/* Checksum checking */
					if (!(checksumSize - 1))  // If SBGC_PROTOCOL_V1
 8005fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d115      	bne.n	8006022 <SBGC32_RX+0x226>
					{
						if (complexBuff[3 + headBuff[1]] != Modulo256_Calculate(&complexBuff[3], headBuff[1]))
 8005ff6:	7d7b      	ldrb	r3, [r7, #21]
 8005ff8:	3303      	adds	r3, #3
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	5cd6      	ldrb	r6, [r2, r3]
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3303      	adds	r3, #3
 8006002:	7d7a      	ldrb	r2, [r7, #21]
 8006004:	b292      	uxth	r2, r2
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fe2b 	bl	8006c64 <Modulo256_Calculate>
 800600e:	4603      	mov	r3, r0
 8006010:	429e      	cmp	r6, r3
 8006012:	d031      	beq.n	8006078 <SBGC32_RX+0x27c>
						{
							lastParserStatus = RX_PAYLOAD_CHECKSUM_ERROR;
 8006014:	2306      	movs	r3, #6
 8006016:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							parserState = STATE_RESYNC;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
 8006020:	e03c      	b.n	800609c <SBGC32_RX+0x2a0>
						}
					}

					else
					{
						memcpy(complexBuff, headBuff, 3);
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	461a      	mov	r2, r3
 8006026:	f107 0314 	add.w	r3, r7, #20
 800602a:	8819      	ldrh	r1, [r3, #0]
 800602c:	789b      	ldrb	r3, [r3, #2]
 800602e:	8011      	strh	r1, [r2, #0]
 8006030:	7093      	strb	r3, [r2, #2]
						ui16 CRC_Res = CRC16_Calculate(complexBuff, headBuff[1] + 3);
 8006032:	7d7b      	ldrb	r3, [r7, #21]
 8006034:	b29b      	uxth	r3, r3
 8006036:	3303      	adds	r3, #3
 8006038:	b29b      	uxth	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	69f8      	ldr	r0, [r7, #28]
 800603e:	f000 fe38 	bl	8006cb2 <CRC16_Calculate>
 8006042:	4603      	mov	r3, r0
 8006044:	833b      	strh	r3, [r7, #24]

						if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8006046:	8b3b      	ldrh	r3, [r7, #24]
 8006048:	b2db      	uxtb	r3, r3
 800604a:	7d7a      	ldrb	r2, [r7, #21]
 800604c:	3203      	adds	r2, #3
 800604e:	69f9      	ldr	r1, [r7, #28]
 8006050:	5c8a      	ldrb	r2, [r1, r2]
 8006052:	4293      	cmp	r3, r2
 8006054:	d010      	beq.n	8006078 <SBGC32_RX+0x27c>
						   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 8006056:	8b3b      	ldrh	r3, [r7, #24]
 8006058:	0a1b      	lsrs	r3, r3, #8
 800605a:	b29b      	uxth	r3, r3
 800605c:	b2db      	uxtb	r3, r3
 800605e:	7d7a      	ldrb	r2, [r7, #21]
 8006060:	3204      	adds	r2, #4
 8006062:	69f9      	ldr	r1, [r7, #28]
 8006064:	5c8a      	ldrb	r2, [r1, r2]
						if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8006066:	4293      	cmp	r3, r2
 8006068:	d006      	beq.n	8006078 <SBGC32_RX+0x27c>
						{
							lastParserStatus = RX_PAYLOAD_CHECKSUM_ERROR;
 800606a:	2306      	movs	r3, #6
 800606c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							parserState = STATE_RESYNC;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
 8006076:	e011      	b.n	800609c <SBGC32_RX+0x2a0>
						}
					}

					/* Data passed all checks. Filling the serialCommand struct */
					serialCommand->commandID = (SBGC_Command_t)headBuff[0];
 8006078:	7d3a      	ldrb	r2, [r7, #20]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	701a      	strb	r2, [r3, #0]
					memcpy(serialCommand->payload, &complexBuff[3], headBuff[1]);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	1c58      	adds	r0, r3, #1
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3303      	adds	r3, #3
 8006086:	7d7a      	ldrb	r2, [r7, #21]
 8006088:	4619      	mov	r1, r3
 800608a:	f001 f825 	bl	80070d8 <memcpy>
					serialCommand->payloadSize = headBuff[1];
 800608e:	7d7a      	ldrb	r2, [r7, #21]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

					return TX_RX_OK;  // Incoming command was received fine
 8006096:	2300      	movs	r3, #0
 8006098:	46d5      	mov	sp, sl
 800609a:	e00f      	b.n	80060bc <SBGC32_RX+0x2c0>
 800609c:	46d5      	mov	sp, sl
				}
			}

			/* Timeout checking */
			if ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) >= timeout)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	4610      	mov	r0, r2
 80060a8:	4798      	blx	r3
 80060aa:	4602      	mov	r2, r0
 80060ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	f63f aeba 	bhi.w	8005e2c <SBGC32_RX+0x30>
				return lastParserStatus;
 80060b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
		}
	}
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3730      	adds	r7, #48	; 0x30
 80060c0:	46bd      	mov	sp, r7
 80060c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080060c6 <SBGC32_TX_RX>:
 *	@param	cmdID - SBGC32 command identifier
 *
 *	@return	Request response result
 */
TxRxStatus_t SBGC32_TX_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, SBGC_Command_t cmdID)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b086      	sub	sp, #24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	4613      	mov	r3, r2
 80060d2:	71fb      	strb	r3, [r7, #7]
	TxRxStatus_t lastParserStatus;

	/* Send request */
	lastParserStatus = SBGC32_TX(generalSBGC, serialCommand);
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fd70 	bl	8005bbc <SBGC32_TX>
 80060dc:	4603      	mov	r3, r0
 80060de:	75fb      	strb	r3, [r7, #23]

	if (lastParserStatus != TX_RX_OK)
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <SBGC32_TX_RX+0x24>
		return lastParserStatus;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	e01a      	b.n	8006120 <SBGC32_TX_RX+0x5a>

	lastParserStatus = SBGC32_FindCommand(generalSBGC, serialCommand, cmdID, generalSBGC->txrxTimeout);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	79fa      	ldrb	r2, [r7, #7]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f818 	bl	8006128 <SBGC32_FindCommand>
 80060f8:	4603      	mov	r3, r0
 80060fa:	75fb      	strb	r3, [r7, #23]

	if (getcommstatus_(lastParserStatus) == FALSE__)
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d002      	beq.n	8006108 <SBGC32_TX_RX+0x42>
 8006102:	7dfb      	ldrb	r3, [r7, #23]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <SBGC32_TX_RX+0x46>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <SBGC32_TX_RX+0x48>
 800610c:	2300      	movs	r3, #0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d105      	bne.n	800611e <SBGC32_TX_RX+0x58>
		generalSBGC->_missedCommandCount++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006116:	3301      	adds	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	869a      	strh	r2, [r3, #52]	; 0x34

	return lastParserStatus;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <SBGC32_FindCommand>:
 *			time for receiving desired SerialCommand
 *
 *	@return	Found result
 */
TxRxStatus_t SBGC32_FindCommand (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, SBGC_Command_t cmdID, ui32 timeout)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4613      	mov	r3, r2
 8006136:	71fb      	strb	r3, [r7, #7]
	#if (UNEXP_CMD_BUFFER)
		ui16 unexpectedCommandsBuffTailTemp = generalSBGC->_unexpectedCommandsBuffTail;
	#endif

	TxRxStatus_t lastParserStatus;
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	6812      	ldr	r2, [r2, #0]
 8006140:	4610      	mov	r0, r2
 8006142:	4798      	blx	r3
 8006144:	6178      	str	r0, [r7, #20]

	while (1)
	{
		lastParserStatus = SBGC32_RX(generalSBGC, serialCommand, generalSBGC->rxTimeout);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	461a      	mov	r2, r3
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff fe54 	bl	8005dfc <SBGC32_RX>
 8006154:	4603      	mov	r3, r0
 8006156:	74fb      	strb	r3, [r7, #19]

		if (getcommstatus_(lastParserStatus) &&
 8006158:	7cfb      	ldrb	r3, [r7, #19]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <SBGC32_FindCommand+0x3c>
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d106      	bne.n	8006172 <SBGC32_FindCommand+0x4a>
			(serialCommand->commandID == cmdID))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	781b      	ldrb	r3, [r3, #0]
		if (getcommstatus_(lastParserStatus) &&
 8006168:	79fa      	ldrb	r2, [r7, #7]
 800616a:	429a      	cmp	r2, r3
 800616c:	d101      	bne.n	8006172 <SBGC32_FindCommand+0x4a>

				generalSBGC->_unexpectedCommandsBuffTail = unexpectedCommandsBuffTailTemp;

			#endif

			return lastParserStatus;
 800616e:	7cfb      	ldrb	r3, [r7, #19]
 8006170:	e00c      	b.n	800618c <SBGC32_FindCommand+0x64>
			}

		#endif

		/* Timeout checking */
		if ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) >= timeout)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	6812      	ldr	r2, [r2, #0]
 800617a:	4610      	mov	r0, r2
 800617c:	4798      	blx	r3
 800617e:	4602      	mov	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d8dd      	bhi.n	8006146 <SBGC32_FindCommand+0x1e>
		{
			#if (UNEXP_CMD_BUFFER)
				generalSBGC->_unexpectedCommandsBuffTail = unexpectedCommandsBuffTailTemp;
			#endif

			return RX_TIMEOUT_ERROR;
 800618a:	2308      	movs	r3, #8
		}
	}
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <ConvertWithPM>:
 *	@param	parserMap - data type required for correct parsing
 *
 *	@return	size of written data
 */
ui8 ConvertWithPM (void *pDestination, const void *pSource, ui8 size, ParserMap_t parserMap)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	4611      	mov	r1, r2
 80061a0:	461a      	mov	r2, r3
 80061a2:	460b      	mov	r3, r1
 80061a4:	71fb      	strb	r3, [r7, #7]
 80061a6:	4613      	mov	r3, r2
 80061a8:	71bb      	strb	r3, [r7, #6]
	if (size == 0)
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <ConvertWithPM+0x20>
		return 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e00c      	b.n	80061ce <ConvertWithPM+0x3a>

	memcpy(pDestination, pSource, size);
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	461a      	mov	r2, r3
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 ff8c 	bl	80070d8 <memcpy>
	SwapBytesInStruct((ui8*)pDestination, size, parserMap);
 80061c0:	79ba      	ldrb	r2, [r7, #6]
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	4619      	mov	r1, r3
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f000 f862 	bl	8006290 <SwapBytesInStruct>
	return size;
 80061cc:	79fb      	ldrb	r3, [r7, #7]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <WriteBuff>:
 * 	@param	*buff - write data
 * 	@param	size - write data size
 * 	@param	parserMap - data type required for correct parsing
 */
void WriteBuff (SerialCommand_t *cmd, const void *buff, ui8 size, ParserMap_t parserMap)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	4611      	mov	r1, r2
 80061e2:	461a      	mov	r2, r3
 80061e4:	460b      	mov	r3, r1
 80061e6:	71fb      	strb	r3, [r7, #7]
 80061e8:	4613      	mov	r3, r2
 80061ea:	71bb      	strb	r3, [r7, #6]
	if (cmd->payloadSize > MAX_BUFF_SIZE - size)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80061f2:	461a      	mov	r2, r3
 80061f4:	79fb      	ldrb	r3, [r7, #7]
 80061f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80061fa:	429a      	cmp	r2, r3
 80061fc:	dc16      	bgt.n	800622c <WriteBuff+0x56>
		return;  // data will not fit
	
	cmd->payloadSize += ConvertWithPM(&cmd->payload[cmd->payloadSize], buff, size, parserMap);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006204:	461a      	mov	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	1c58      	adds	r0, r3, #1
 800620c:	79bb      	ldrb	r3, [r7, #6]
 800620e:	79fa      	ldrb	r2, [r7, #7]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	f7ff ffbf 	bl	8006194 <ConvertWithPM>
 8006216:	4603      	mov	r3, r0
 8006218:	461a      	mov	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006220:	4413      	add	r3, r2
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 800622a:	e000      	b.n	800622e <WriteBuff+0x58>
		return;  // data will not fit
 800622c:	bf00      	nop
}
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <ReadBuff>:
 *	@param	*buff - read data buffer
 *	@param	size - read data size
 *	@param	parserMap - data type required for correct parsing
 */
void ReadBuff (SerialCommand_t *cmd, void *buff, ui8 size, ParserMap_t parserMap)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	4611      	mov	r1, r2
 8006240:	461a      	mov	r2, r3
 8006242:	460b      	mov	r3, r1
 8006244:	71fb      	strb	r3, [r7, #7]
 8006246:	4613      	mov	r3, r2
 8006248:	71bb      	strb	r3, [r7, #6]
	if (size > (MAX_BUFF_SIZE - cmd->readPos))
 800624a:	79fa      	ldrb	r2, [r7, #7]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006252:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006256:	429a      	cmp	r2, r3
 8006258:	dc16      	bgt.n	8006288 <ReadBuff+0x54>
		return;  // data will not fit
	
	cmd->readPos += ConvertWithPM(buff, &cmd->payload[cmd->readPos], size, parserMap);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006260:	461a      	mov	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	79bb      	ldrb	r3, [r7, #6]
 800626a:	79fa      	ldrb	r2, [r7, #7]
 800626c:	68b8      	ldr	r0, [r7, #8]
 800626e:	f7ff ff91 	bl	8006194 <ConvertWithPM>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800627c:	4413      	add	r3, r2
 800627e:	b2da      	uxtb	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8006286:	e000      	b.n	800628a <ReadBuff+0x56>
		return;  // data will not fit
 8006288:	bf00      	nop
}
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <SwapBytesInStruct>:
 *	@param 	*structure - structure buffer to bytes rearrange
 *	@param	size - structure buffer size
 *	@param	parserMap - data type required for correct parsing
 */
void SwapBytesInStruct (ui8 *structure, ui8 size, ParserMap_t parserMap)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
 800629c:	4613      	mov	r3, r2
 800629e:	70bb      	strb	r3, [r7, #2]
		unused_(structure);
		unused_(size);
		unused_(parserMap);

	#endif
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
void ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d80b      	bhi.n	80062d8 <ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d101      	bne.n	80062ca <ToLittleEndian+0x1e>
 80062c6:	2304      	movs	r3, #4
 80062c8:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	461a      	mov	r2, r3
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	68b8      	ldr	r0, [r7, #8]
 80062d2:	f000 ff01 	bl	80070d8 <memcpy>
 80062d6:	e000      	b.n	80062da <ToLittleEndian+0x2e>
	if (size > 4) return;
 80062d8:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
void FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	4613      	mov	r3, r2
 80062ec:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	2b04      	cmp	r3, #4
 80062f2:	d80b      	bhi.n	800630c <FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 80062f4:	79fb      	ldrb	r3, [r7, #7]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d101      	bne.n	80062fe <FromLittleEndian+0x1e>
 80062fa:	2304      	movs	r3, #4
 80062fc:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	461a      	mov	r2, r3
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 fee7 	bl	80070d8 <memcpy>
 800630a:	e000      	b.n	800630e <FromLittleEndian+0x2e>
	if (size > 4) return;
 800630c:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <WriteByte>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	byte - byte to write
 */
void WriteByte (SerialCommand_t *cmd, const ui8 byte)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
	if (cmd->payloadSize < MAX_BUFF_SIZE)
		cmd->payload[cmd->payloadSize++] = byte;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	b2d1      	uxtb	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4413      	add	r3, r2
 8006336:	78fa      	ldrb	r2, [r7, #3]
 8006338:	705a      	strb	r2, [r3, #1]
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <ReadByte>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Byte read
 */
ui8 ReadByte (SerialCommand_t *cmd)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
	return cmd->payload[cmd->readPos++];
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	b2d1      	uxtb	r1, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	f882 1102 	strb.w	r1, [r2, #258]	; 0x102
 800635e:	461a      	mov	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4413      	add	r3, r2
 8006364:	785b      	ldrb	r3, [r3, #1]
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <WriteWord>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	word - two bytes to write
 */
void WriteWord (SerialCommand_t *cmd, const ui16 word)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	807b      	strh	r3, [r7, #2]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 2)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006384:	2bff      	cmp	r3, #255	; 0xff
 8006386:	d013      	beq.n	80063b0 <WriteWord+0x3e>
	{
		ToLittleEndian(&word, &cmd->payload[cmd->payloadSize], 2);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800638e:	461a      	mov	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4413      	add	r3, r2
 8006394:	1c59      	adds	r1, r3, #1
 8006396:	1cbb      	adds	r3, r7, #2
 8006398:	2202      	movs	r2, #2
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff ff86 	bl	80062ac <ToLittleEndian>
		cmd->payloadSize += 2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80063a6:	3302      	adds	r3, #2
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <ReadWord>:
 *	@param 	*cmd - SerialCommand
 *
 *	@return	Word read
 */
ui16 ReadWord (SerialCommand_t *cmd)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	ui16 word;
	FromLittleEndian(&word, &cmd->payload[cmd->readPos], 2);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80063c6:	461a      	mov	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4413      	add	r3, r2
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	f107 030e 	add.w	r3, r7, #14
 80063d2:	2202      	movs	r2, #2
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff ff83 	bl	80062e0 <FromLittleEndian>
	cmd->readPos += 2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80063e0:	3302      	adds	r3, #2
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return word;
 80063ea:	89fb      	ldrh	r3, [r7, #14]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <InitCmdWrite>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	cmdID - SBGC32 command identifier
 */
void InitCmdWrite (SerialCommand_t *cmd, SBGC_Command_t cmdID)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	70fb      	strb	r3, [r7, #3]
	cmd->commandID = cmdID;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	701a      	strb	r2, [r3, #0]
	cmd->payloadSize = 0;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <SBGC32_ManualInit>:
 */
TxRxStatus_t SBGC32_ManualInit (GeneralSBGC_t *generalSBGC, TxFunc_t TxFunc, RxFunc_t RxFunc,
								AvailableBytesFunc_t AvailableBytesFunc, TxDebugFunc_t TxDebugFunc,
								GetTimeFunc_t GetTimeFunc, SprintfFunc_t SprintfFunc,
								SBGC_ProtocolVersion_t protocolVersion)
{
 800641c:	b590      	push	{r4, r7, lr}
 800641e:	b0cb      	sub	sp, #300	; 0x12c
 8006420:	af00      	add	r7, sp, #0
 8006422:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8006426:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 800642a:	6020      	str	r0, [r4, #0]
 800642c:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8006430:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8006434:	6001      	str	r1, [r0, #0]
 8006436:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800643a:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 800643e:	600a      	str	r2, [r1, #0]
 8006440:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006444:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8006448:	6013      	str	r3, [r2, #0]
	generalSBGC->TxFunc = TxFunc;
 800644a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800644e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006458:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	605a      	str	r2, [r3, #4]
	generalSBGC->RxFunc = RxFunc;
 8006460:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006464:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800646e:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	609a      	str	r2, [r3, #8]
	generalSBGC->AvailableBytesFunc = AvailableBytesFunc;
 8006476:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800647a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006484:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	60da      	str	r2, [r3, #12]
	generalSBGC->TxDebugFunc = TxDebugFunc;
 800648c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006490:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800649a:	611a      	str	r2, [r3, #16]
	generalSBGC->GetTimeFunc = GetTimeFunc;
 800649c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80064aa:	615a      	str	r2, [r3, #20]
	generalSBGC->SprintfFunc = SprintfFunc;
 80064ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80064ba:	619a      	str	r2, [r3, #24]
	generalSBGC->protocolVersion = protocolVersion;
 80064bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80064ca:	771a      	strb	r2, [r3, #28]

	generalSBGC->txTimeout = SBGC_TX_WAITING;
 80064cc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2264      	movs	r2, #100	; 0x64
 80064d8:	621a      	str	r2, [r3, #32]
	generalSBGC->rxTimeout = SBGC_RX_WAITING;
 80064da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80064e8:	625a      	str	r2, [r3, #36]	; 0x24
	generalSBGC->txrxTimeout = SBGC_REQ_WAITING;
 80064ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80064f8:	629a      	str	r2, [r3, #40]	; 0x28

	generalSBGC->_txErrorsCount = 0;
 80064fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2200      	movs	r2, #0
 8006506:	861a      	strh	r2, [r3, #48]	; 0x30
	generalSBGC->_rxErrorsCount = 0;
 8006508:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800650c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	865a      	strh	r2, [r3, #50]	; 0x32
		generalSBGC->_unexpectedCommandsBuffTail = 0;
		generalSBGC->_unexpectedCommandsBuffHead = 0;

	#endif

	generalSBGC->_missedCommandCount = 0;
 8006516:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800651a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2200      	movs	r2, #0
 8006522:	869a      	strh	r2, [r3, #52]	; 0x34

	/* Startup delay */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8006524:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006528:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006534:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	4610      	mov	r0, r2
 800653e:	4798      	blx	r3
 8006540:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	while ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) < SBGC_STARTUP_DELAY);
 8006544:	bf00      	nop
 8006546:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800654a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006556:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800655a:	6812      	ldr	r2, [r2, #0]
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	4610      	mov	r0, r2
 8006560:	4798      	blx	r3
 8006562:	4602      	mov	r2, r0
 8006564:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800656e:	d3ea      	bcc.n	8006546 <SBGC32_ManualInit+0x12a>

	/* Getting board information */
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO);
 8006570:	f107 0320 	add.w	r3, r7, #32
 8006574:	2156      	movs	r1, #86	; 0x56
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff ff3c 	bl	80063f4 <InitCmdWrite>
	WriteWord(&cmd, 0);  // cfg = 0
 800657c:	f107 0320 	add.w	r3, r7, #32
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f7ff fef5 	bl	8006372 <WriteWord>

	if (getcommstatus_(CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO), "Board Info:")))
 8006588:	f107 0120 	add.w	r1, r7, #32
 800658c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006590:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006594:	2256      	movs	r2, #86	; 0x56
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	f7ff fd95 	bl	80060c6 <SBGC32_TX_RX>
 800659c:	4603      	mov	r3, r0
 800659e:	4619      	mov	r1, r3
 80065a0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065a8:	4a7f      	ldr	r2, [pc, #508]	; (80067a8 <SBGC32_ManualInit+0x38c>)
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	f000 fa9e 	bl	8006aec <CheckReceipt>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d016      	beq.n	80065e4 <SBGC32_ManualInit+0x1c8>
 80065b6:	f107 0120 	add.w	r1, r7, #32
 80065ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065c2:	2256      	movs	r2, #86	; 0x56
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	f7ff fd7e 	bl	80060c6 <SBGC32_TX_RX>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4619      	mov	r1, r3
 80065ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065d6:	4a74      	ldr	r2, [pc, #464]	; (80067a8 <SBGC32_ManualInit+0x38c>)
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	f000 fa87 	bl	8006aec <CheckReceipt>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d11a      	bne.n	800661a <SBGC32_ManualInit+0x1fe>
	{
		generalSBGC->_boardVersion = cmd.payload[0];
 80065e4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ec:	785a      	ldrb	r2, [r3, #1]
 80065ee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		FromLittleEndian(&generalSBGC->_firmwareVersion, &cmd.payload[1], 2);
 80065fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006600:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 800660a:	f107 0320 	add.w	r3, r7, #32
 800660e:	3302      	adds	r3, #2
 8006610:	2202      	movs	r2, #2
 8006612:	4619      	mov	r1, r3
 8006614:	f7ff fe64 	bl	80062e0 <FromLittleEndian>
 8006618:	e00e      	b.n	8006638 <SBGC32_ManualInit+0x21c>
	}

	else
	{
		generalSBGC->_boardVersion = 0;
 800661a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800661e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		generalSBGC->_firmwareVersion = 0;
 800662a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800662e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2200      	movs	r2, #0
 8006636:	85da      	strh	r2, [r3, #46]	; 0x2e
	#if (SBGC_DEBUG_MODE)

		char boardVersionStr [5],
			 firmwareVersionStr [8];

		FormatBoardVersion(generalSBGC, generalSBGC->_boardVersion, boardVersionStr);
 8006638:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800663c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8006646:	f107 0218 	add.w	r2, r7, #24
 800664a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800664e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	f7ff fa3e 	bl	8005ad4 <FormatBoardVersion>
		FormatFirmwareVersion(generalSBGC, generalSBGC->_firmwareVersion, firmwareVersionStr);
 8006658:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800665c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8006664:	f107 0210 	add.w	r2, r7, #16
 8006668:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800666c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f7ff fa57 	bl	8005b24 <FormatFirmwareVersion>

		PrintMessage(generalSBGC, TEXT_SIZE_(" \n"));
 8006676:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800667a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800667e:	2202      	movs	r2, #2
 8006680:	494a      	ldr	r1, [pc, #296]	; (80067ac <SBGC32_ManualInit+0x390>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	f000 fb56 	bl	8006d34 <PrintMessage>
		PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n"));
 8006688:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800668c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006690:	221f      	movs	r2, #31
 8006692:	4947      	ldr	r1, [pc, #284]	; (80067b0 <SBGC32_ManualInit+0x394>)
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	f000 fb4d 	bl	8006d34 <PrintMessage>

		if (getcommstatus_(generalSBGC->_parserCurrentStatus))
 800669a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800669e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d008      	beq.n	80066be <SBGC32_ManualInit+0x2a2>
 80066ac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d156      	bne.n	800676c <SBGC32_ManualInit+0x350>
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("The system is ready to go!\n"));
 80066be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066c6:	221b      	movs	r2, #27
 80066c8:	493a      	ldr	r1, [pc, #232]	; (80067b4 <SBGC32_ManualInit+0x398>)
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	f000 fb32 	bl	8006d34 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)"Board Version: "));
 80066d0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066d8:	220f      	movs	r2, #15
 80066da:	4937      	ldr	r1, [pc, #220]	; (80067b8 <SBGC32_ManualInit+0x39c>)
 80066dc:	6818      	ldr	r0, [r3, #0]
 80066de:	f000 fb29 	bl	8006d34 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_(boardVersionStr));
 80066e2:	f107 0318 	add.w	r3, r7, #24
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7f9 fdaa 	bl	8000240 <strlen>
 80066ec:	4603      	mov	r3, r0
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	f107 0118 	add.w	r1, r7, #24
 80066f4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	f000 fb19 	bl	8006d34 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)" \n"));
 8006702:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006706:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800670a:	2202      	movs	r2, #2
 800670c:	4927      	ldr	r1, [pc, #156]	; (80067ac <SBGC32_ManualInit+0x390>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	f000 fb10 	bl	8006d34 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)"Firmware Version: "));
 8006714:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006718:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800671c:	2212      	movs	r2, #18
 800671e:	4927      	ldr	r1, [pc, #156]	; (80067bc <SBGC32_ManualInit+0x3a0>)
 8006720:	6818      	ldr	r0, [r3, #0]
 8006722:	f000 fb07 	bl	8006d34 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_(firmwareVersionStr));
 8006726:	f107 0310 	add.w	r3, r7, #16
 800672a:	4618      	mov	r0, r3
 800672c:	f7f9 fd88 	bl	8000240 <strlen>
 8006730:	4603      	mov	r3, r0
 8006732:	b29a      	uxth	r2, r3
 8006734:	f107 0110 	add.w	r1, r7, #16
 8006738:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800673c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	f000 faf7 	bl	8006d34 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)" \n"));
 8006746:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800674a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800674e:	2202      	movs	r2, #2
 8006750:	4916      	ldr	r1, [pc, #88]	; (80067ac <SBGC32_ManualInit+0x390>)
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	f000 faee 	bl	8006d34 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\n"));
 8006758:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800675c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006760:	2220      	movs	r2, #32
 8006762:	4917      	ldr	r1, [pc, #92]	; (80067c0 <SBGC32_ManualInit+0x3a4>)
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	f000 fae5 	bl	8006d34 <PrintMessage>
 800676a:	e011      	b.n	8006790 <SBGC32_ManualInit+0x374>
		}

		else
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("Communication Error!\n"));
 800676c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006770:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006774:	2215      	movs	r2, #21
 8006776:	4913      	ldr	r1, [pc, #76]	; (80067c4 <SBGC32_ManualInit+0x3a8>)
 8006778:	6818      	ldr	r0, [r3, #0]
 800677a:	f000 fadb 	bl	8006d34 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\n"));
 800677e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006782:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006786:	2220      	movs	r2, #32
 8006788:	490d      	ldr	r1, [pc, #52]	; (80067c0 <SBGC32_ManualInit+0x3a4>)
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	f000 fad2 	bl	8006d34 <PrintMessage>
		}

	#endif

	return generalSBGC->_parserCurrentStatus;
 8006790:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006794:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 800679e:	4618      	mov	r0, r3
 80067a0:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd90      	pop	{r4, r7, pc}
 80067a8:	0800b7cc 	.word	0x0800b7cc
 80067ac:	0800b7d8 	.word	0x0800b7d8
 80067b0:	0800b7dc 	.word	0x0800b7dc
 80067b4:	0800b7fc 	.word	0x0800b7fc
 80067b8:	0800b818 	.word	0x0800b818
 80067bc:	0800b828 	.word	0x0800b828
 80067c0:	0800b83c 	.word	0x0800b83c
 80067c4:	0800b860 	.word	0x0800b860

080067c8 <SBGC32_CheckConfirmation>:
 *	@param	cmdID - identifier of the SerialCommand being confirmed
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_CheckConfirmation (GeneralSBGC_t *generalSBGC, SBGC_Command_t cmdID)
{
 80067c8:	b590      	push	{r4, r7, lr}
 80067ca:	b0cd      	sub	sp, #308	; 0x134
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067d6:	6018      	str	r0, [r3, #0]
 80067d8:	460a      	mov	r2, r1
 80067da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067de:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80067e2:	701a      	strb	r2, [r3, #0]
	#if (SBGC_CONFIRM_CMD)

		SerialCommand_t cmd;
		TxRxStatus_t lastParserStatus;
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 80067e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	6812      	ldr	r2, [r2, #0]
 80067fc:	4610      	mov	r0, r2
 80067fe:	4798      	blx	r3
 8006800:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			char debugStr [30];
		#endif

		while (1)
		{
			lastParserStatus = SBGC32_FindCommand(generalSBGC, &cmd, CMD_CONFIRM, generalSBGC->rxTimeout);
 8006804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006814:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006818:	f5a2 7096 	sub.w	r0, r2, #300	; 0x12c
 800681c:	2243      	movs	r2, #67	; 0x43
 800681e:	6800      	ldr	r0, [r0, #0]
 8006820:	f7ff fc82 	bl	8006128 <SBGC32_FindCommand>
 8006824:	4603      	mov	r3, r0
 8006826:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

			if (getcommstatus_(lastParserStatus) &&
 800682a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800682e:	2b00      	cmp	r3, #0
 8006830:	d004      	beq.n	800683c <SBGC32_CheckConfirmation+0x74>
 8006832:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006836:	2b01      	cmp	r3, #1
 8006838:	f040 80a2 	bne.w	8006980 <SBGC32_CheckConfirmation+0x1b8>
				((cmd.commandID == CMD_CONFIRM) && (cmdID == cmd.payload[0])))
 800683c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006844:	781b      	ldrb	r3, [r3, #0]
			if (getcommstatus_(lastParserStatus) &&
 8006846:	2b43      	cmp	r3, #67	; 0x43
 8006848:	f040 809a 	bne.w	8006980 <SBGC32_CheckConfirmation+0x1b8>
				((cmd.commandID == CMD_CONFIRM) && (cmdID == cmd.payload[0])))
 800684c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006854:	785b      	ldrb	r3, [r3, #1]
 8006856:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800685a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800685e:	7812      	ldrb	r2, [r2, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	f040 808d 	bne.w	8006980 <SBGC32_CheckConfirmation+0x1b8>
			{
				generalSBGC->_confirmationParams.cmdID = ReadByte(&cmd);
 8006866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff fd6b 	bl	8006346 <ReadByte>
 8006870:	4603      	mov	r3, r0
 8006872:	461a      	mov	r2, r3
 8006874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

				if (cmd.payloadSize == 2)
 8006882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800688a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800688e:	2b02      	cmp	r3, #2
 8006890:	d10d      	bne.n	80068ae <SBGC32_CheckConfirmation+0xe6>
					generalSBGC->_confirmationParams.cmdData = ReadByte(&cmd);
 8006892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fd55 	bl	8006346 <ReadByte>
 800689c:	4603      	mov	r3, r0
 800689e:	b29a      	uxth	r2, r3
 80068a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	871a      	strh	r2, [r3, #56]	; 0x38
 80068ac:	e014      	b.n	80068d8 <SBGC32_CheckConfirmation+0x110>
				else if (cmd.payloadSize == 3)
 80068ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068b6:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80068ba:	2b03      	cmp	r3, #3
 80068bc:	d10c      	bne.n	80068d8 <SBGC32_CheckConfirmation+0x110>
					generalSBGC->_confirmationParams.cmdData = ReadWord(&cmd);
 80068be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fd78 	bl	80063b8 <ReadWord>
 80068c8:	4603      	mov	r3, r0
 80068ca:	461a      	mov	r2, r3
 80068cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	871a      	strh	r2, [r3, #56]	; 0x38

				#if (SBGC_DEBUG_MODE)

					if (cmd.payloadSize <= 1)
 80068d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e0:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d811      	bhi.n	800690c <SBGC32_CheckConfirmation+0x144>
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d\n", generalSBGC->_confirmationParams.cmdID);
 80068e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068f8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 8006902:	f107 0008 	add.w	r0, r7, #8
 8006906:	4975      	ldr	r1, [pc, #468]	; (8006adc <SBGC32_CheckConfirmation+0x314>)
 8006908:	4798      	blx	r3
 800690a:	e017      	b.n	800693c <SBGC32_CheckConfirmation+0x174>
					else
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d (%u)\n", generalSBGC->_confirmationParams.cmdID,
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	699c      	ldr	r4, [r3, #24]
 8006918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8006926:	461a      	mov	r2, r3
																					 generalSBGC->_confirmationParams.cmdData);
 8006928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800692c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d (%u)\n", generalSBGC->_confirmationParams.cmdID,
 8006934:	f107 0008 	add.w	r0, r7, #8
 8006938:	4969      	ldr	r1, [pc, #420]	; (8006ae0 <SBGC32_CheckConfirmation+0x318>)
 800693a:	47a0      	blx	r4

					PrintMessage(generalSBGC, debugStr, strlen(debugStr));
 800693c:	f107 0308 	add.w	r3, r7, #8
 8006940:	4618      	mov	r0, r3
 8006942:	f7f9 fc7d 	bl	8000240 <strlen>
 8006946:	4603      	mov	r3, r0
 8006948:	b29a      	uxth	r2, r3
 800694a:	f107 0108 	add.w	r1, r7, #8
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	f000 f9ec 	bl	8006d34 <PrintMessage>

				#endif

				generalSBGC->_parserCurrentStatus = lastParserStatus;
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800696a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				generalSBGC->_confirmationStatus = CONFIRMATION_OK;
 800696e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 800697e:	e0a0      	b.n	8006ac2 <SBGC32_CheckConfirmation+0x2fa>
			}

			else if (getcommstatus_(lastParserStatus) && (cmd.commandID == CMD_ERROR))
 8006980:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <SBGC32_CheckConfirmation+0x1c8>
 8006988:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800698c:	2b01      	cmp	r3, #1
 800698e:	d164      	bne.n	8006a5a <SBGC32_CheckConfirmation+0x292>
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2bff      	cmp	r3, #255	; 0xff
 800699c:	d15d      	bne.n	8006a5a <SBGC32_CheckConfirmation+0x292>
			{
				generalSBGC->_confirmationParams.errCode = ReadByte(&cmd);
 800699e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fccf 	bl	8006346 <ReadByte>
 80069a8:	4603      	mov	r3, r0
 80069aa:	461a      	mov	r2, r3
 80069ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

				if (cmd.payloadSize > 1)
 80069ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d90c      	bls.n	80069e4 <SBGC32_CheckConfirmation+0x21c>
					ReadBuff(&cmd, &generalSBGC->_confirmationParams.errData, 4, PM_DEFAULT_8BIT);
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f103 013b 	add.w	r1, r3, #59	; 0x3b
 80069d8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80069dc:	2300      	movs	r3, #0
 80069de:	2204      	movs	r2, #4
 80069e0:	f7ff fc28 	bl	8006234 <ReadBuff>

				#if (SBGC_DEBUG_MODE)

					generalSBGC->SprintfFunc(debugStr, "CMD_ERROR: #%d (%d)\n", generalSBGC->_confirmationParams.errCode,
 80069e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699c      	ldr	r4, [r3, #24]
 80069f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80069fe:	461a      	mov	r2, r3
																				generalSBGC->_confirmationParams.errData[0]);
 8006a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
					generalSBGC->SprintfFunc(debugStr, "CMD_ERROR: #%d (%d)\n", generalSBGC->_confirmationParams.errCode,
 8006a0e:	f107 0008 	add.w	r0, r7, #8
 8006a12:	4934      	ldr	r1, [pc, #208]	; (8006ae4 <SBGC32_CheckConfirmation+0x31c>)
 8006a14:	47a0      	blx	r4

					PrintMessage(generalSBGC, debugStr, strlen(debugStr));
 8006a16:	f107 0308 	add.w	r3, r7, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7f9 fc10 	bl	8000240 <strlen>
 8006a20:	4603      	mov	r3, r0
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	f107 0108 	add.w	r1, r7, #8
 8006a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	f000 f97f 	bl	8006d34 <PrintMessage>

				#endif

				generalSBGC->_parserCurrentStatus = lastParserStatus;
 8006a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006a44:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				generalSBGC->_confirmationStatus = CONFIRMATION_ERROR;
 8006a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
				break;
 8006a58:	e033      	b.n	8006ac2 <SBGC32_CheckConfirmation+0x2fa>
			}

			if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 8006a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a6a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a6e:	6812      	ldr	r2, [r2, #0]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	4610      	mov	r0, r2
 8006a74:	4798      	blx	r3
 8006a76:	4602      	mov	r2, r0
 8006a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a7c:	1ad2      	subs	r2, r2, r3
 8006a7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	f4ff aeba 	bcc.w	8006804 <SBGC32_CheckConfirmation+0x3c>
			{
				#if (SBGC_DEBUG_MODE)
					PrintMessage(generalSBGC, TEXT_SIZE_("CONFIRM_TIMEOUT_ERROR!\n"));
 8006a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a98:	2217      	movs	r2, #23
 8006a9a:	4913      	ldr	r1, [pc, #76]	; (8006ae8 <SBGC32_CheckConfirmation+0x320>)
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	f000 f949 	bl	8006d34 <PrintMessage>
				#endif

				generalSBGC->_parserCurrentStatus = RX_TIMEOUT_ERROR;
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2208      	movs	r2, #8
 8006aae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				generalSBGC->_confirmationStatus = CONFIRMATION_TIMEOUT;
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			}
		}

	#endif

	return generalSBGC->_parserCurrentStatus;
 8006ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd90      	pop	{r4, r7, pc}
 8006ada:	bf00      	nop
 8006adc:	0800b878 	.word	0x0800b878
 8006ae0:	0800b88c 	.word	0x0800b88c
 8006ae4:	0800b8a4 	.word	0x0800b8a4
 8006ae8:	0800b8bc 	.word	0x0800b8bc

08006aec <CheckReceipt>:
 *	@param 	*message - debug info string
 *
 *	@return Communication status
 */
TxRxStatus_t CheckReceipt (GeneralSBGC_t *generalSBGC, TxRxStatus_t receiveStatus, char *message)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b094      	sub	sp, #80	; 0x50
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	460b      	mov	r3, r1
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	72fb      	strb	r3, [r7, #11]
	generalSBGC->_parserCurrentStatus = receiveStatus;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	7afa      	ldrb	r2, [r7, #11]
 8006afe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	if (getcommstatus_(generalSBGC->_parserCurrentStatus) == FALSE__)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <CheckReceipt+0x2a>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <CheckReceipt+0x2e>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <CheckReceipt+0x30>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <CheckReceipt+0x40>
		generalSBGC->_rxErrorsCount++;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b24:	3301      	adds	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	865a      	strh	r2, [r3, #50]	; 0x32

	#if (SBGC_DEBUG_MODE)

		char totalStr [60];
		ui8 pos = 0;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (getcommstatus_(generalSBGC->_parserCurrentStatus))
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <CheckReceipt+0x5a>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d132      	bne.n	8006bac <CheckReceipt+0xc0>
		{
			memcpy(totalStr, TEXT_SIZE_(message));
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7f9 fb7a 	bl	8000240 <strlen>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	f107 0310 	add.w	r3, r7, #16
 8006b52:	6879      	ldr	r1, [r7, #4]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 fabf 	bl	80070d8 <memcpy>
			pos += strlen(message);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7f9 fb70 	bl	8000240 <strlen>
 8006b60:	4603      	mov	r3, r0
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006b68:	4413      	add	r3, r2
 8006b6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive OK!"));
 8006b6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006b72:	f107 0210 	add.w	r2, r7, #16
 8006b76:	4413      	add	r3, r2
 8006b78:	220c      	movs	r2, #12
 8006b7a:	4938      	ldr	r1, [pc, #224]	; (8006c5c <CheckReceipt+0x170>)
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f000 faab 	bl	80070d8 <memcpy>
			pos += strlen(" Receive OK!");
 8006b82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006b86:	330c      	adds	r3, #12
 8006b88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8006b8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006b90:	3350      	adds	r3, #80	; 0x50
 8006b92:	443b      	add	r3, r7
 8006b94:	220a      	movs	r2, #10
 8006b96:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8006b9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	3350      	adds	r3, #80	; 0x50
 8006ba2:	443b      	add	r3, r7
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f803 2c40 	strb.w	r2, [r3, #-64]
 8006baa:	e043      	b.n	8006c34 <CheckReceipt+0x148>
		}

		else
		{
			memcpy(totalStr, TEXT_SIZE_(message));
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7f9 fb47 	bl	8000240 <strlen>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	f107 0310 	add.w	r3, r7, #16
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fa8c 	bl	80070d8 <memcpy>
			pos += strlen(message);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7f9 fb3d 	bl	8000240 <strlen>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bce:	4413      	add	r3, r2
 8006bd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive Error: "));
 8006bd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bd8:	f107 0210 	add.w	r2, r7, #16
 8006bdc:	4413      	add	r3, r2
 8006bde:	2210      	movs	r2, #16
 8006be0:	491f      	ldr	r1, [pc, #124]	; (8006c60 <CheckReceipt+0x174>)
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fa78 	bl	80070d8 <memcpy>
			pos += strlen(" Receive Error: ");
 8006be8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bec:	3310      	adds	r3, #16
 8006bee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pos += ConvertErrorToString(generalSBGC->_parserCurrentStatus, &totalStr[pos]);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8006bf8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bfc:	f107 0210 	add.w	r2, r7, #16
 8006c00:	4413      	add	r3, r2
 8006c02:	4619      	mov	r1, r3
 8006c04:	f000 f8ac 	bl	8006d60 <ConvertErrorToString>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c10:	4413      	add	r3, r2
 8006c12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8006c16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c1a:	3350      	adds	r3, #80	; 0x50
 8006c1c:	443b      	add	r3, r7
 8006c1e:	220a      	movs	r2, #10
 8006c20:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8006c24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006c28:	3301      	adds	r3, #1
 8006c2a:	3350      	adds	r3, #80	; 0x50
 8006c2c:	443b      	add	r3, r7
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f803 2c40 	strb.w	r2, [r3, #-64]
		}

		PrintMessage(generalSBGC, TEXT_SIZE_(totalStr));
 8006c34:	f107 0310 	add.w	r3, r7, #16
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7f9 fb01 	bl	8000240 <strlen>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f107 0310 	add.w	r3, r7, #16
 8006c46:	4619      	mov	r1, r3
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f873 	bl	8006d34 <PrintMessage>

	#endif

	return generalSBGC->_parserCurrentStatus;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3750      	adds	r7, #80	; 0x50
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	0800b8d4 	.word	0x0800b8d4
 8006c60:	0800b8e4 	.word	0x0800b8e4

08006c64 <Modulo256_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui8 Modulo256_Calculate (ui8 *data, ui16 length)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	807b      	strh	r3, [r7, #2]
	i32 totalSum = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]

	ui16 count = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	817b      	strh	r3, [r7, #10]
	while (count < length)
 8006c78:	e00a      	b.n	8006c90 <Modulo256_Calculate+0x2c>
		totalSum += data[count++];
 8006c7a:	897b      	ldrh	r3, [r7, #10]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	817a      	strh	r2, [r7, #10]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4413      	add	r3, r2
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
	while (count < length)
 8006c90:	897a      	ldrh	r2, [r7, #10]
 8006c92:	887b      	ldrh	r3, [r7, #2]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d3f0      	bcc.n	8006c7a <Modulo256_Calculate+0x16>

	return totalSum % 256;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	425a      	negs	r2, r3
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	bf58      	it	pl
 8006ca2:	4253      	negpl	r3, r2
 8006ca4:	b2db      	uxtb	r3, r3
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui16 CRC16_Calculate (ui8 *data, ui16 length)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	807b      	strh	r3, [r7, #2]
	ui16 CRC_Register = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	81fb      	strh	r3, [r7, #14]
	ui8 shiftRegister,
		dataBit,
		CRC_Bit;

	for (ui16 i = 0; i < length; i++)
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	817b      	strh	r3, [r7, #10]
 8006cc6:	e02a      	b.n	8006d1e <CRC16_Calculate+0x6c>
	{
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006cc8:	2301      	movs	r3, #1
 8006cca:	737b      	strb	r3, [r7, #13]
 8006ccc:	e021      	b.n	8006d12 <CRC16_Calculate+0x60>
		{
			dataBit = (data[i] & shiftRegister) ? 1 : 0;
 8006cce:	897b      	ldrh	r3, [r7, #10]
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	781a      	ldrb	r2, [r3, #0]
 8006cd6:	7b7b      	ldrb	r3, [r7, #13]
 8006cd8:	4013      	ands	r3, r2
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	727b      	strb	r3, [r7, #9]
			CRC_Bit = CRC_Register >> 15;
 8006ce8:	89fb      	ldrh	r3, [r7, #14]
 8006cea:	0bdb      	lsrs	r3, r3, #15
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	723b      	strb	r3, [r7, #8]
			CRC_Register <<= 1;
 8006cf0:	89fb      	ldrh	r3, [r7, #14]
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	81fb      	strh	r3, [r7, #14]

			if (dataBit != CRC_Bit)
 8006cf6:	7a7a      	ldrb	r2, [r7, #9]
 8006cf8:	7a3b      	ldrb	r3, [r7, #8]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d006      	beq.n	8006d0c <CRC16_Calculate+0x5a>
				CRC_Register ^= PR2_CRC16_POLYNOM;
 8006cfe:	89fb      	ldrh	r3, [r7, #14]
 8006d00:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8006d04:	f083 037a 	eor.w	r3, r3, #122	; 0x7a
 8006d08:	43db      	mvns	r3, r3
 8006d0a:	81fb      	strh	r3, [r7, #14]
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006d0c:	7b7b      	ldrb	r3, [r7, #13]
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	737b      	strb	r3, [r7, #13]
 8006d12:	7b7b      	ldrb	r3, [r7, #13]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1da      	bne.n	8006cce <CRC16_Calculate+0x1c>
	for (ui16 i = 0; i < length; i++)
 8006d18:	897b      	ldrh	r3, [r7, #10]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	817b      	strh	r3, [r7, #10]
 8006d1e:	897a      	ldrh	r2, [r7, #10]
 8006d20:	887b      	ldrh	r3, [r7, #2]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d3d0      	bcc.n	8006cc8 <CRC16_Calculate+0x16>
		}
	}

	return CRC_Register;
 8006d26:	89fb      	ldrh	r3, [r7, #14]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <PrintMessage>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	*data - printable data
 *	@param	length - printable data size
 */
void PrintMessage (GeneralSBGC_t *generalSBGC, char *data, ui16 length)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	80fb      	strh	r3, [r7, #6]
	if (generalSBGC->TxDebugFunc == NULL)  // Prevent HardFault errors
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d006      	beq.n	8006d58 <PrintMessage+0x24>
		return;

	generalSBGC->TxDebugFunc(data, length);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	4611      	mov	r1, r2
 8006d52:	68b8      	ldr	r0, [r7, #8]
 8006d54:	4798      	blx	r3
 8006d56:	e000      	b.n	8006d5a <PrintMessage+0x26>
		return;
 8006d58:	bf00      	nop
}
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <ConvertErrorToString>:
 *	@param	*str - writable buffer
 *
 *	@return	Length of a writable string
 */
ui8 ConvertErrorToString (TxRxStatus_t txRxStatus, char *str)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	71fb      	strb	r3, [r7, #7]
	switch (txRxStatus)
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	2b0a      	cmp	r3, #10
 8006d70:	d865      	bhi.n	8006e3e <ConvertErrorToString+0xde>
 8006d72:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <ConvertErrorToString+0x18>)
 8006d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	08006db3 	.word	0x08006db3
 8006d80:	08006dc1 	.word	0x08006dc1
 8006d84:	08006dcf 	.word	0x08006dcf
 8006d88:	08006ddd 	.word	0x08006ddd
 8006d8c:	08006deb 	.word	0x08006deb
 8006d90:	08006df9 	.word	0x08006df9
 8006d94:	08006e07 	.word	0x08006e07
 8006d98:	08006e15 	.word	0x08006e15
 8006d9c:	08006e23 	.word	0x08006e23
 8006da0:	08006e31 	.word	0x08006e31
	{
		case TX_RX_OK :
			memcpy(str, TEXT_SIZE_(nameof_(TX_RX_OK)));
 8006da4:	2208      	movs	r2, #8
 8006da6:	4928      	ldr	r1, [pc, #160]	; (8006e48 <ConvertErrorToString+0xe8>)
 8006da8:	6838      	ldr	r0, [r7, #0]
 8006daa:	f000 f995 	bl	80070d8 <memcpy>
			return strlen(nameof_(TX_RX_OK));
 8006dae:	2308      	movs	r3, #8
 8006db0:	e046      	b.n	8006e40 <ConvertErrorToString+0xe0>

					case RX_BUFFERED_COMMAND :
						memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFERED_COMMAND)));
 8006db2:	2213      	movs	r2, #19
 8006db4:	4925      	ldr	r1, [pc, #148]	; (8006e4c <ConvertErrorToString+0xec>)
 8006db6:	6838      	ldr	r0, [r7, #0]
 8006db8:	f000 f98e 	bl	80070d8 <memcpy>
						return strlen(nameof_(RX_BUFFERED_COMMAND));
 8006dbc:	2313      	movs	r3, #19
 8006dbe:	e03f      	b.n	8006e40 <ConvertErrorToString+0xe0>

		case RX_START_PARSE :
			memcpy(str, TEXT_SIZE_(nameof_(RX_START_PARSE)));
 8006dc0:	220e      	movs	r2, #14
 8006dc2:	4923      	ldr	r1, [pc, #140]	; (8006e50 <ConvertErrorToString+0xf0>)
 8006dc4:	6838      	ldr	r0, [r7, #0]
 8006dc6:	f000 f987 	bl	80070d8 <memcpy>
			return strlen(nameof_(RX_START_PARSE));
 8006dca:	230e      	movs	r3, #14
 8006dcc:	e038      	b.n	8006e40 <ConvertErrorToString+0xe0>

					case RX_EMPTY_BUFF_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_EMPTY_BUFF_ERROR)));
 8006dce:	2213      	movs	r2, #19
 8006dd0:	4920      	ldr	r1, [pc, #128]	; (8006e54 <ConvertErrorToString+0xf4>)
 8006dd2:	6838      	ldr	r0, [r7, #0]
 8006dd4:	f000 f980 	bl	80070d8 <memcpy>
						return strlen(nameof_(RX_EMPTY_BUFF_ERROR));
 8006dd8:	2313      	movs	r3, #19
 8006dda:	e031      	b.n	8006e40 <ConvertErrorToString+0xe0>

		case RX_BUFFER_REALTIME_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFER_REALTIME_ERROR)));
 8006ddc:	2218      	movs	r2, #24
 8006dde:	491e      	ldr	r1, [pc, #120]	; (8006e58 <ConvertErrorToString+0xf8>)
 8006de0:	6838      	ldr	r0, [r7, #0]
 8006de2:	f000 f979 	bl	80070d8 <memcpy>
			return strlen(nameof_(RX_BUFFER_REALTIME_ERROR));
 8006de6:	2318      	movs	r3, #24
 8006de8:	e02a      	b.n	8006e40 <ConvertErrorToString+0xe0>

					case RX_HEADER_CHECKSUM_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_HEADER_CHECKSUM_ERROR)));
 8006dea:	2218      	movs	r2, #24
 8006dec:	491b      	ldr	r1, [pc, #108]	; (8006e5c <ConvertErrorToString+0xfc>)
 8006dee:	6838      	ldr	r0, [r7, #0]
 8006df0:	f000 f972 	bl	80070d8 <memcpy>
						return strlen(nameof_(RX_HEADER_CHECKSUM_ERROR));
 8006df4:	2318      	movs	r3, #24
 8006df6:	e023      	b.n	8006e40 <ConvertErrorToString+0xe0>

		case RX_PAYLOAD_CHECKSUM_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_PAYLOAD_CHECKSUM_ERROR)));
 8006df8:	2219      	movs	r2, #25
 8006dfa:	4919      	ldr	r1, [pc, #100]	; (8006e60 <ConvertErrorToString+0x100>)
 8006dfc:	6838      	ldr	r0, [r7, #0]
 8006dfe:	f000 f96b 	bl	80070d8 <memcpy>
			return strlen(nameof_(RX_PAYLOAD_CHECKSUM_ERROR));
 8006e02:	2319      	movs	r3, #25
 8006e04:	e01c      	b.n	8006e40 <ConvertErrorToString+0xe0>

					case RX_BUFFER_OVERFLOW_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFER_OVERFLOW_ERROR)));
 8006e06:	2218      	movs	r2, #24
 8006e08:	4916      	ldr	r1, [pc, #88]	; (8006e64 <ConvertErrorToString+0x104>)
 8006e0a:	6838      	ldr	r0, [r7, #0]
 8006e0c:	f000 f964 	bl	80070d8 <memcpy>
						return strlen(nameof_(RX_BUFFER_OVERFLOW_ERROR));
 8006e10:	2318      	movs	r3, #24
 8006e12:	e015      	b.n	8006e40 <ConvertErrorToString+0xe0>

		case RX_TIMEOUT_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_TIMEOUT_ERROR)));
 8006e14:	2210      	movs	r2, #16
 8006e16:	4914      	ldr	r1, [pc, #80]	; (8006e68 <ConvertErrorToString+0x108>)
 8006e18:	6838      	ldr	r0, [r7, #0]
 8006e1a:	f000 f95d 	bl	80070d8 <memcpy>
			return strlen(nameof_(RX_TIMEOUT_ERROR));
 8006e1e:	2310      	movs	r3, #16
 8006e20:	e00e      	b.n	8006e40 <ConvertErrorToString+0xe0>

					case TX_BUFFER_OVERFLOW_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(TX_BUFFER_OVERFLOW_ERROR)));
 8006e22:	2218      	movs	r2, #24
 8006e24:	4911      	ldr	r1, [pc, #68]	; (8006e6c <ConvertErrorToString+0x10c>)
 8006e26:	6838      	ldr	r0, [r7, #0]
 8006e28:	f000 f956 	bl	80070d8 <memcpy>
						return strlen(nameof_(TX_BUFFER_OVERFLOW_ERROR));
 8006e2c:	2318      	movs	r3, #24
 8006e2e:	e007      	b.n	8006e40 <ConvertErrorToString+0xe0>

		case NOT_SUPPORTED_BY_FIRMWARE :
			memcpy(str, TEXT_SIZE_(nameof_(NOT_SUPPORTED_BY_FIRMWARE)));
 8006e30:	2219      	movs	r2, #25
 8006e32:	490f      	ldr	r1, [pc, #60]	; (8006e70 <ConvertErrorToString+0x110>)
 8006e34:	6838      	ldr	r0, [r7, #0]
 8006e36:	f000 f94f 	bl	80070d8 <memcpy>
			return strlen(nameof_(NOT_SUPPORTED_BY_FIRMWARE));
 8006e3a:	2319      	movs	r3, #25
 8006e3c:	e000      	b.n	8006e40 <ConvertErrorToString+0xe0>
	}

	return 0;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	0800b92c 	.word	0x0800b92c
 8006e4c:	0800b938 	.word	0x0800b938
 8006e50:	0800b94c 	.word	0x0800b94c
 8006e54:	0800b95c 	.word	0x0800b95c
 8006e58:	0800b970 	.word	0x0800b970
 8006e5c:	0800b98c 	.word	0x0800b98c
 8006e60:	0800b9a8 	.word	0x0800b9a8
 8006e64:	0800b9c4 	.word	0x0800b9c4
 8006e68:	0800b9e0 	.word	0x0800b9e0
 8006e6c:	0800b9f4 	.word	0x0800b9f4
 8006e70:	0800ba10 	.word	0x0800ba10

08006e74 <SBGC32_Control>:
 * 	@param 	*control - structure containing gimbal control data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_Control (GeneralSBGC_t *generalSBGC, const Control_t *control)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b0c4      	sub	sp, #272	; 0x110
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e82:	6018      	str	r0, [r3, #0]
 8006e84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e8c:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL);
 8006e8e:	f107 030c 	add.w	r3, r7, #12
 8006e92:	2143      	movs	r1, #67	; 0x43
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff faad 	bl	80063f4 <InitCmdWrite>
	WriteBuff(&cmd, control, sizeof(Control_t), PM_CONTROL);
 8006e9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e9e:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8006ea2:	f107 000c 	add.w	r0, r7, #12
 8006ea6:	230b      	movs	r3, #11
 8006ea8:	220f      	movs	r2, #15
 8006eaa:	6809      	ldr	r1, [r1, #0]
 8006eac:	f7ff f993 	bl	80061d6 <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8006eb0:	f107 020c 	add.w	r2, r7, #12
 8006eb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006eb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	6818      	ldr	r0, [r3, #0]
 8006ec0:	f7fe fe7c 	bl	8005bbc <SBGC32_TX>
	return generalSBGC->_parserCurrentStatus;
 8006ec4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ec8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <SBGC32_ControlConfig>:
 * 			control configuration data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ControlConfig (GeneralSBGC_t *generalSBGC, const ControlConfig_t *controlConfig)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b0c4      	sub	sp, #272	; 0x110
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ee6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006eea:	6018      	str	r0, [r3, #0]
 8006eec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ef0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ef4:	6019      	str	r1, [r3, #0]
			return NOT_SUPPORTED_BY_FIRMWARE;

	#endif

	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL_CONFIG);
 8006ef6:	f107 030c 	add.w	r3, r7, #12
 8006efa:	215a      	movs	r1, #90	; 0x5a
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7ff fa79 	bl	80063f4 <InitCmdWrite>
	WriteBuff(&cmd, controlConfig, sizeof(ControlConfig_t), PM_CONTROL_CONFIG);
 8006f02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f06:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8006f0a:	f107 000c 	add.w	r0, r7, #12
 8006f0e:	230c      	movs	r3, #12
 8006f10:	2229      	movs	r2, #41	; 0x29
 8006f12:	6809      	ldr	r1, [r1, #0]
 8006f14:	f7ff f95f 	bl	80061d6 <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8006f18:	f107 020c 	add.w	r2, r7, #12
 8006f1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f24:	4611      	mov	r1, r2
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	f7fe fe48 	bl	8005bbc <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 8006f2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f3e:	4611      	mov	r1, r2
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f7ff fc41 	bl	80067c8 <SBGC32_CheckConfirmation>
	return generalSBGC->_parserCurrentStatus;
 8006f46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <SBGC32_ExecuteMenu>:
 *	@param	cmdID - menu command identifier
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ExecuteMenu (GeneralSBGC_t *generalSBGC, MenuCommand_t cmdID)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b0c4      	sub	sp, #272	; 0x110
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f6c:	6018      	str	r0, [r3, #0]
 8006f6e:	460a      	mov	r2, r1
 8006f70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f74:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8006f78:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_EXECUTE_MENU);
 8006f7a:	f107 030c 	add.w	r3, r7, #12
 8006f7e:	2145      	movs	r1, #69	; 0x45
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fa37 	bl	80063f4 <InitCmdWrite>
	WriteByte(&cmd, cmdID);
 8006f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f8a:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8006f8e:	781a      	ldrb	r2, [r3, #0]
 8006f90:	f107 030c 	add.w	r3, r7, #12
 8006f94:	4611      	mov	r1, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff f9bc 	bl	8006314 <WriteByte>
	SBGC32_TX(generalSBGC, &cmd);
 8006f9c:	f107 020c 	add.w	r2, r7, #12
 8006fa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fa4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fa8:	4611      	mov	r1, r2
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	f7fe fe06 	bl	8005bbc <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 8006fb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fb8:	781a      	ldrb	r2, [r3, #0]
 8006fba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	f7ff fbff 	bl	80067c8 <SBGC32_CheckConfirmation>
	return generalSBGC->_parserCurrentStatus;
 8006fca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <SBGC32_SetServoOut>:
 *			values for each output
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_SetServoOut (GeneralSBGC_t *generalSBGC, const i16 servoTime [8])
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b0c4      	sub	sp, #272	; 0x110
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ff0:	6018      	str	r0, [r3, #0]
 8006ff2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ff6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ffa:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_SERVO_OUT);
 8006ffc:	f107 030c 	add.w	r3, r7, #12
 8007000:	2124      	movs	r1, #36	; 0x24
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff f9f6 	bl	80063f4 <InitCmdWrite>
	for (ui8 i = 0; i < 8; i++) WriteWord(&cmd, servoTime[i]);
 8007008:	2300      	movs	r3, #0
 800700a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800700e:	e016      	b.n	800703e <SBGC32_SetServoOut+0x5c>
 8007010:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800701a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	4413      	add	r3, r2
 8007022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007026:	b29a      	uxth	r2, r3
 8007028:	f107 030c 	add.w	r3, r7, #12
 800702c:	4611      	mov	r1, r2
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff f99f 	bl	8006372 <WriteWord>
 8007034:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007038:	3301      	adds	r3, #1
 800703a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800703e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007042:	2b07      	cmp	r3, #7
 8007044:	d9e4      	bls.n	8007010 <SBGC32_SetServoOut+0x2e>
	SBGC32_TX(generalSBGC, &cmd);
 8007046:	f107 020c 	add.w	r2, r7, #12
 800704a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800704e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007052:	4611      	mov	r1, r2
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	f7fe fdb1 	bl	8005bbc <SBGC32_TX>
	/* no need confirmation */
	return generalSBGC->_parserCurrentStatus;
 800705a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800705e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8007068:	4618      	mov	r0, r3
 800706a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
	...

08007074 <__errno>:
 8007074:	4b01      	ldr	r3, [pc, #4]	; (800707c <__errno+0x8>)
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	2000001c 	.word	0x2000001c

08007080 <__libc_init_array>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	4d0d      	ldr	r5, [pc, #52]	; (80070b8 <__libc_init_array+0x38>)
 8007084:	4c0d      	ldr	r4, [pc, #52]	; (80070bc <__libc_init_array+0x3c>)
 8007086:	1b64      	subs	r4, r4, r5
 8007088:	10a4      	asrs	r4, r4, #2
 800708a:	2600      	movs	r6, #0
 800708c:	42a6      	cmp	r6, r4
 800708e:	d109      	bne.n	80070a4 <__libc_init_array+0x24>
 8007090:	4d0b      	ldr	r5, [pc, #44]	; (80070c0 <__libc_init_array+0x40>)
 8007092:	4c0c      	ldr	r4, [pc, #48]	; (80070c4 <__libc_init_array+0x44>)
 8007094:	f004 fb84 	bl	800b7a0 <_init>
 8007098:	1b64      	subs	r4, r4, r5
 800709a:	10a4      	asrs	r4, r4, #2
 800709c:	2600      	movs	r6, #0
 800709e:	42a6      	cmp	r6, r4
 80070a0:	d105      	bne.n	80070ae <__libc_init_array+0x2e>
 80070a2:	bd70      	pop	{r4, r5, r6, pc}
 80070a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a8:	4798      	blx	r3
 80070aa:	3601      	adds	r6, #1
 80070ac:	e7ee      	b.n	800708c <__libc_init_array+0xc>
 80070ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b2:	4798      	blx	r3
 80070b4:	3601      	adds	r6, #1
 80070b6:	e7f2      	b.n	800709e <__libc_init_array+0x1e>
 80070b8:	0800bef4 	.word	0x0800bef4
 80070bc:	0800bef4 	.word	0x0800bef4
 80070c0:	0800bef4 	.word	0x0800bef4
 80070c4:	0800bef8 	.word	0x0800bef8

080070c8 <malloc>:
 80070c8:	4b02      	ldr	r3, [pc, #8]	; (80070d4 <malloc+0xc>)
 80070ca:	4601      	mov	r1, r0
 80070cc:	6818      	ldr	r0, [r3, #0]
 80070ce:	f000 b885 	b.w	80071dc <_malloc_r>
 80070d2:	bf00      	nop
 80070d4:	2000001c 	.word	0x2000001c

080070d8 <memcpy>:
 80070d8:	440a      	add	r2, r1
 80070da:	4291      	cmp	r1, r2
 80070dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80070e0:	d100      	bne.n	80070e4 <memcpy+0xc>
 80070e2:	4770      	bx	lr
 80070e4:	b510      	push	{r4, lr}
 80070e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ee:	4291      	cmp	r1, r2
 80070f0:	d1f9      	bne.n	80070e6 <memcpy+0xe>
 80070f2:	bd10      	pop	{r4, pc}

080070f4 <memset>:
 80070f4:	4402      	add	r2, r0
 80070f6:	4603      	mov	r3, r0
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d100      	bne.n	80070fe <memset+0xa>
 80070fc:	4770      	bx	lr
 80070fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007102:	e7f9      	b.n	80070f8 <memset+0x4>

08007104 <_free_r>:
 8007104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007106:	2900      	cmp	r1, #0
 8007108:	d044      	beq.n	8007194 <_free_r+0x90>
 800710a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800710e:	9001      	str	r0, [sp, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f1a1 0404 	sub.w	r4, r1, #4
 8007116:	bfb8      	it	lt
 8007118:	18e4      	addlt	r4, r4, r3
 800711a:	f002 ff2d 	bl	8009f78 <__malloc_lock>
 800711e:	4a1e      	ldr	r2, [pc, #120]	; (8007198 <_free_r+0x94>)
 8007120:	9801      	ldr	r0, [sp, #4]
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	b933      	cbnz	r3, 8007134 <_free_r+0x30>
 8007126:	6063      	str	r3, [r4, #4]
 8007128:	6014      	str	r4, [r2, #0]
 800712a:	b003      	add	sp, #12
 800712c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007130:	f002 bf28 	b.w	8009f84 <__malloc_unlock>
 8007134:	42a3      	cmp	r3, r4
 8007136:	d908      	bls.n	800714a <_free_r+0x46>
 8007138:	6825      	ldr	r5, [r4, #0]
 800713a:	1961      	adds	r1, r4, r5
 800713c:	428b      	cmp	r3, r1
 800713e:	bf01      	itttt	eq
 8007140:	6819      	ldreq	r1, [r3, #0]
 8007142:	685b      	ldreq	r3, [r3, #4]
 8007144:	1949      	addeq	r1, r1, r5
 8007146:	6021      	streq	r1, [r4, #0]
 8007148:	e7ed      	b.n	8007126 <_free_r+0x22>
 800714a:	461a      	mov	r2, r3
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	b10b      	cbz	r3, 8007154 <_free_r+0x50>
 8007150:	42a3      	cmp	r3, r4
 8007152:	d9fa      	bls.n	800714a <_free_r+0x46>
 8007154:	6811      	ldr	r1, [r2, #0]
 8007156:	1855      	adds	r5, r2, r1
 8007158:	42a5      	cmp	r5, r4
 800715a:	d10b      	bne.n	8007174 <_free_r+0x70>
 800715c:	6824      	ldr	r4, [r4, #0]
 800715e:	4421      	add	r1, r4
 8007160:	1854      	adds	r4, r2, r1
 8007162:	42a3      	cmp	r3, r4
 8007164:	6011      	str	r1, [r2, #0]
 8007166:	d1e0      	bne.n	800712a <_free_r+0x26>
 8007168:	681c      	ldr	r4, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	6053      	str	r3, [r2, #4]
 800716e:	4421      	add	r1, r4
 8007170:	6011      	str	r1, [r2, #0]
 8007172:	e7da      	b.n	800712a <_free_r+0x26>
 8007174:	d902      	bls.n	800717c <_free_r+0x78>
 8007176:	230c      	movs	r3, #12
 8007178:	6003      	str	r3, [r0, #0]
 800717a:	e7d6      	b.n	800712a <_free_r+0x26>
 800717c:	6825      	ldr	r5, [r4, #0]
 800717e:	1961      	adds	r1, r4, r5
 8007180:	428b      	cmp	r3, r1
 8007182:	bf04      	itt	eq
 8007184:	6819      	ldreq	r1, [r3, #0]
 8007186:	685b      	ldreq	r3, [r3, #4]
 8007188:	6063      	str	r3, [r4, #4]
 800718a:	bf04      	itt	eq
 800718c:	1949      	addeq	r1, r1, r5
 800718e:	6021      	streq	r1, [r4, #0]
 8007190:	6054      	str	r4, [r2, #4]
 8007192:	e7ca      	b.n	800712a <_free_r+0x26>
 8007194:	b003      	add	sp, #12
 8007196:	bd30      	pop	{r4, r5, pc}
 8007198:	2000046c 	.word	0x2000046c

0800719c <sbrk_aligned>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4e0e      	ldr	r6, [pc, #56]	; (80071d8 <sbrk_aligned+0x3c>)
 80071a0:	460c      	mov	r4, r1
 80071a2:	6831      	ldr	r1, [r6, #0]
 80071a4:	4605      	mov	r5, r0
 80071a6:	b911      	cbnz	r1, 80071ae <sbrk_aligned+0x12>
 80071a8:	f000 fed6 	bl	8007f58 <_sbrk_r>
 80071ac:	6030      	str	r0, [r6, #0]
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 fed1 	bl	8007f58 <_sbrk_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	d00a      	beq.n	80071d0 <sbrk_aligned+0x34>
 80071ba:	1cc4      	adds	r4, r0, #3
 80071bc:	f024 0403 	bic.w	r4, r4, #3
 80071c0:	42a0      	cmp	r0, r4
 80071c2:	d007      	beq.n	80071d4 <sbrk_aligned+0x38>
 80071c4:	1a21      	subs	r1, r4, r0
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 fec6 	bl	8007f58 <_sbrk_r>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d101      	bne.n	80071d4 <sbrk_aligned+0x38>
 80071d0:	f04f 34ff 	mov.w	r4, #4294967295
 80071d4:	4620      	mov	r0, r4
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	20000470 	.word	0x20000470

080071dc <_malloc_r>:
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	1ccd      	adds	r5, r1, #3
 80071e2:	f025 0503 	bic.w	r5, r5, #3
 80071e6:	3508      	adds	r5, #8
 80071e8:	2d0c      	cmp	r5, #12
 80071ea:	bf38      	it	cc
 80071ec:	250c      	movcc	r5, #12
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	4607      	mov	r7, r0
 80071f2:	db01      	blt.n	80071f8 <_malloc_r+0x1c>
 80071f4:	42a9      	cmp	r1, r5
 80071f6:	d905      	bls.n	8007204 <_malloc_r+0x28>
 80071f8:	230c      	movs	r3, #12
 80071fa:	603b      	str	r3, [r7, #0]
 80071fc:	2600      	movs	r6, #0
 80071fe:	4630      	mov	r0, r6
 8007200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007204:	4e2e      	ldr	r6, [pc, #184]	; (80072c0 <_malloc_r+0xe4>)
 8007206:	f002 feb7 	bl	8009f78 <__malloc_lock>
 800720a:	6833      	ldr	r3, [r6, #0]
 800720c:	461c      	mov	r4, r3
 800720e:	bb34      	cbnz	r4, 800725e <_malloc_r+0x82>
 8007210:	4629      	mov	r1, r5
 8007212:	4638      	mov	r0, r7
 8007214:	f7ff ffc2 	bl	800719c <sbrk_aligned>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	4604      	mov	r4, r0
 800721c:	d14d      	bne.n	80072ba <_malloc_r+0xde>
 800721e:	6834      	ldr	r4, [r6, #0]
 8007220:	4626      	mov	r6, r4
 8007222:	2e00      	cmp	r6, #0
 8007224:	d140      	bne.n	80072a8 <_malloc_r+0xcc>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	4631      	mov	r1, r6
 800722a:	4638      	mov	r0, r7
 800722c:	eb04 0803 	add.w	r8, r4, r3
 8007230:	f000 fe92 	bl	8007f58 <_sbrk_r>
 8007234:	4580      	cmp	r8, r0
 8007236:	d13a      	bne.n	80072ae <_malloc_r+0xd2>
 8007238:	6821      	ldr	r1, [r4, #0]
 800723a:	3503      	adds	r5, #3
 800723c:	1a6d      	subs	r5, r5, r1
 800723e:	f025 0503 	bic.w	r5, r5, #3
 8007242:	3508      	adds	r5, #8
 8007244:	2d0c      	cmp	r5, #12
 8007246:	bf38      	it	cc
 8007248:	250c      	movcc	r5, #12
 800724a:	4629      	mov	r1, r5
 800724c:	4638      	mov	r0, r7
 800724e:	f7ff ffa5 	bl	800719c <sbrk_aligned>
 8007252:	3001      	adds	r0, #1
 8007254:	d02b      	beq.n	80072ae <_malloc_r+0xd2>
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	442b      	add	r3, r5
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	e00e      	b.n	800727c <_malloc_r+0xa0>
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	1b52      	subs	r2, r2, r5
 8007262:	d41e      	bmi.n	80072a2 <_malloc_r+0xc6>
 8007264:	2a0b      	cmp	r2, #11
 8007266:	d916      	bls.n	8007296 <_malloc_r+0xba>
 8007268:	1961      	adds	r1, r4, r5
 800726a:	42a3      	cmp	r3, r4
 800726c:	6025      	str	r5, [r4, #0]
 800726e:	bf18      	it	ne
 8007270:	6059      	strne	r1, [r3, #4]
 8007272:	6863      	ldr	r3, [r4, #4]
 8007274:	bf08      	it	eq
 8007276:	6031      	streq	r1, [r6, #0]
 8007278:	5162      	str	r2, [r4, r5]
 800727a:	604b      	str	r3, [r1, #4]
 800727c:	4638      	mov	r0, r7
 800727e:	f104 060b 	add.w	r6, r4, #11
 8007282:	f002 fe7f 	bl	8009f84 <__malloc_unlock>
 8007286:	f026 0607 	bic.w	r6, r6, #7
 800728a:	1d23      	adds	r3, r4, #4
 800728c:	1af2      	subs	r2, r6, r3
 800728e:	d0b6      	beq.n	80071fe <_malloc_r+0x22>
 8007290:	1b9b      	subs	r3, r3, r6
 8007292:	50a3      	str	r3, [r4, r2]
 8007294:	e7b3      	b.n	80071fe <_malloc_r+0x22>
 8007296:	6862      	ldr	r2, [r4, #4]
 8007298:	42a3      	cmp	r3, r4
 800729a:	bf0c      	ite	eq
 800729c:	6032      	streq	r2, [r6, #0]
 800729e:	605a      	strne	r2, [r3, #4]
 80072a0:	e7ec      	b.n	800727c <_malloc_r+0xa0>
 80072a2:	4623      	mov	r3, r4
 80072a4:	6864      	ldr	r4, [r4, #4]
 80072a6:	e7b2      	b.n	800720e <_malloc_r+0x32>
 80072a8:	4634      	mov	r4, r6
 80072aa:	6876      	ldr	r6, [r6, #4]
 80072ac:	e7b9      	b.n	8007222 <_malloc_r+0x46>
 80072ae:	230c      	movs	r3, #12
 80072b0:	603b      	str	r3, [r7, #0]
 80072b2:	4638      	mov	r0, r7
 80072b4:	f002 fe66 	bl	8009f84 <__malloc_unlock>
 80072b8:	e7a1      	b.n	80071fe <_malloc_r+0x22>
 80072ba:	6025      	str	r5, [r4, #0]
 80072bc:	e7de      	b.n	800727c <_malloc_r+0xa0>
 80072be:	bf00      	nop
 80072c0:	2000046c 	.word	0x2000046c

080072c4 <__cvt>:
 80072c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c6:	ed2d 8b02 	vpush	{d8}
 80072ca:	eeb0 8b40 	vmov.f64	d8, d0
 80072ce:	b085      	sub	sp, #20
 80072d0:	4617      	mov	r7, r2
 80072d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80072d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072d6:	ee18 2a90 	vmov	r2, s17
 80072da:	f025 0520 	bic.w	r5, r5, #32
 80072de:	2a00      	cmp	r2, #0
 80072e0:	bfb6      	itet	lt
 80072e2:	222d      	movlt	r2, #45	; 0x2d
 80072e4:	2200      	movge	r2, #0
 80072e6:	eeb1 8b40 	vneglt.f64	d8, d0
 80072ea:	2d46      	cmp	r5, #70	; 0x46
 80072ec:	460c      	mov	r4, r1
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	d004      	beq.n	80072fc <__cvt+0x38>
 80072f2:	2d45      	cmp	r5, #69	; 0x45
 80072f4:	d100      	bne.n	80072f8 <__cvt+0x34>
 80072f6:	3401      	adds	r4, #1
 80072f8:	2102      	movs	r1, #2
 80072fa:	e000      	b.n	80072fe <__cvt+0x3a>
 80072fc:	2103      	movs	r1, #3
 80072fe:	ab03      	add	r3, sp, #12
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	ab02      	add	r3, sp, #8
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	4622      	mov	r2, r4
 8007308:	4633      	mov	r3, r6
 800730a:	eeb0 0b48 	vmov.f64	d0, d8
 800730e:	f001 fd3f 	bl	8008d90 <_dtoa_r>
 8007312:	2d47      	cmp	r5, #71	; 0x47
 8007314:	d101      	bne.n	800731a <__cvt+0x56>
 8007316:	07fb      	lsls	r3, r7, #31
 8007318:	d51a      	bpl.n	8007350 <__cvt+0x8c>
 800731a:	2d46      	cmp	r5, #70	; 0x46
 800731c:	eb00 0204 	add.w	r2, r0, r4
 8007320:	d10c      	bne.n	800733c <__cvt+0x78>
 8007322:	7803      	ldrb	r3, [r0, #0]
 8007324:	2b30      	cmp	r3, #48	; 0x30
 8007326:	d107      	bne.n	8007338 <__cvt+0x74>
 8007328:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800732c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007330:	bf1c      	itt	ne
 8007332:	f1c4 0401 	rsbne	r4, r4, #1
 8007336:	6034      	strne	r4, [r6, #0]
 8007338:	6833      	ldr	r3, [r6, #0]
 800733a:	441a      	add	r2, r3
 800733c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007344:	bf08      	it	eq
 8007346:	9203      	streq	r2, [sp, #12]
 8007348:	2130      	movs	r1, #48	; 0x30
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	4293      	cmp	r3, r2
 800734e:	d307      	bcc.n	8007360 <__cvt+0x9c>
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007354:	1a1b      	subs	r3, r3, r0
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	b005      	add	sp, #20
 800735a:	ecbd 8b02 	vpop	{d8}
 800735e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007360:	1c5c      	adds	r4, r3, #1
 8007362:	9403      	str	r4, [sp, #12]
 8007364:	7019      	strb	r1, [r3, #0]
 8007366:	e7f0      	b.n	800734a <__cvt+0x86>

08007368 <__exponent>:
 8007368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800736a:	4603      	mov	r3, r0
 800736c:	2900      	cmp	r1, #0
 800736e:	bfb8      	it	lt
 8007370:	4249      	neglt	r1, r1
 8007372:	f803 2b02 	strb.w	r2, [r3], #2
 8007376:	bfb4      	ite	lt
 8007378:	222d      	movlt	r2, #45	; 0x2d
 800737a:	222b      	movge	r2, #43	; 0x2b
 800737c:	2909      	cmp	r1, #9
 800737e:	7042      	strb	r2, [r0, #1]
 8007380:	dd2a      	ble.n	80073d8 <__exponent+0x70>
 8007382:	f10d 0407 	add.w	r4, sp, #7
 8007386:	46a4      	mov	ip, r4
 8007388:	270a      	movs	r7, #10
 800738a:	46a6      	mov	lr, r4
 800738c:	460a      	mov	r2, r1
 800738e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007392:	fb07 1516 	mls	r5, r7, r6, r1
 8007396:	3530      	adds	r5, #48	; 0x30
 8007398:	2a63      	cmp	r2, #99	; 0x63
 800739a:	f104 34ff 	add.w	r4, r4, #4294967295
 800739e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073a2:	4631      	mov	r1, r6
 80073a4:	dcf1      	bgt.n	800738a <__exponent+0x22>
 80073a6:	3130      	adds	r1, #48	; 0x30
 80073a8:	f1ae 0502 	sub.w	r5, lr, #2
 80073ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073b0:	1c44      	adds	r4, r0, #1
 80073b2:	4629      	mov	r1, r5
 80073b4:	4561      	cmp	r1, ip
 80073b6:	d30a      	bcc.n	80073ce <__exponent+0x66>
 80073b8:	f10d 0209 	add.w	r2, sp, #9
 80073bc:	eba2 020e 	sub.w	r2, r2, lr
 80073c0:	4565      	cmp	r5, ip
 80073c2:	bf88      	it	hi
 80073c4:	2200      	movhi	r2, #0
 80073c6:	4413      	add	r3, r2
 80073c8:	1a18      	subs	r0, r3, r0
 80073ca:	b003      	add	sp, #12
 80073cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073d6:	e7ed      	b.n	80073b4 <__exponent+0x4c>
 80073d8:	2330      	movs	r3, #48	; 0x30
 80073da:	3130      	adds	r1, #48	; 0x30
 80073dc:	7083      	strb	r3, [r0, #2]
 80073de:	70c1      	strb	r1, [r0, #3]
 80073e0:	1d03      	adds	r3, r0, #4
 80073e2:	e7f1      	b.n	80073c8 <__exponent+0x60>
 80073e4:	0000      	movs	r0, r0
	...

080073e8 <_printf_float>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	b08b      	sub	sp, #44	; 0x2c
 80073ee:	460c      	mov	r4, r1
 80073f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80073f4:	4616      	mov	r6, r2
 80073f6:	461f      	mov	r7, r3
 80073f8:	4605      	mov	r5, r0
 80073fa:	f002 fda7 	bl	8009f4c <_localeconv_r>
 80073fe:	f8d0 b000 	ldr.w	fp, [r0]
 8007402:	4658      	mov	r0, fp
 8007404:	f7f8 ff1c 	bl	8000240 <strlen>
 8007408:	2300      	movs	r3, #0
 800740a:	9308      	str	r3, [sp, #32]
 800740c:	f8d8 3000 	ldr.w	r3, [r8]
 8007410:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007414:	6822      	ldr	r2, [r4, #0]
 8007416:	3307      	adds	r3, #7
 8007418:	f023 0307 	bic.w	r3, r3, #7
 800741c:	f103 0108 	add.w	r1, r3, #8
 8007420:	f8c8 1000 	str.w	r1, [r8]
 8007424:	4682      	mov	sl, r0
 8007426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800742a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800742e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007690 <_printf_float+0x2a8>
 8007432:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007436:	eeb0 6bc0 	vabs.f64	d6, d0
 800743a:	eeb4 6b47 	vcmp.f64	d6, d7
 800743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007442:	dd24      	ble.n	800748e <_printf_float+0xa6>
 8007444:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	d502      	bpl.n	8007454 <_printf_float+0x6c>
 800744e:	232d      	movs	r3, #45	; 0x2d
 8007450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007454:	4b90      	ldr	r3, [pc, #576]	; (8007698 <_printf_float+0x2b0>)
 8007456:	4891      	ldr	r0, [pc, #580]	; (800769c <_printf_float+0x2b4>)
 8007458:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800745c:	bf94      	ite	ls
 800745e:	4698      	movls	r8, r3
 8007460:	4680      	movhi	r8, r0
 8007462:	2303      	movs	r3, #3
 8007464:	6123      	str	r3, [r4, #16]
 8007466:	f022 0204 	bic.w	r2, r2, #4
 800746a:	2300      	movs	r3, #0
 800746c:	6022      	str	r2, [r4, #0]
 800746e:	9304      	str	r3, [sp, #16]
 8007470:	9700      	str	r7, [sp, #0]
 8007472:	4633      	mov	r3, r6
 8007474:	aa09      	add	r2, sp, #36	; 0x24
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f000 f9d3 	bl	8007824 <_printf_common>
 800747e:	3001      	adds	r0, #1
 8007480:	f040 808a 	bne.w	8007598 <_printf_float+0x1b0>
 8007484:	f04f 30ff 	mov.w	r0, #4294967295
 8007488:	b00b      	add	sp, #44	; 0x2c
 800748a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007496:	d709      	bvc.n	80074ac <_printf_float+0xc4>
 8007498:	ee10 3a90 	vmov	r3, s1
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfbc      	itt	lt
 80074a0:	232d      	movlt	r3, #45	; 0x2d
 80074a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074a6:	487e      	ldr	r0, [pc, #504]	; (80076a0 <_printf_float+0x2b8>)
 80074a8:	4b7e      	ldr	r3, [pc, #504]	; (80076a4 <_printf_float+0x2bc>)
 80074aa:	e7d5      	b.n	8007458 <_printf_float+0x70>
 80074ac:	6863      	ldr	r3, [r4, #4]
 80074ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80074b2:	9104      	str	r1, [sp, #16]
 80074b4:	1c59      	adds	r1, r3, #1
 80074b6:	d13c      	bne.n	8007532 <_printf_float+0x14a>
 80074b8:	2306      	movs	r3, #6
 80074ba:	6063      	str	r3, [r4, #4]
 80074bc:	2300      	movs	r3, #0
 80074be:	9303      	str	r3, [sp, #12]
 80074c0:	ab08      	add	r3, sp, #32
 80074c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80074c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ca:	ab07      	add	r3, sp, #28
 80074cc:	6861      	ldr	r1, [r4, #4]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	6022      	str	r2, [r4, #0]
 80074d2:	f10d 031b 	add.w	r3, sp, #27
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7ff fef4 	bl	80072c4 <__cvt>
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	9907      	ldr	r1, [sp, #28]
 80074e0:	2b47      	cmp	r3, #71	; 0x47
 80074e2:	4680      	mov	r8, r0
 80074e4:	d108      	bne.n	80074f8 <_printf_float+0x110>
 80074e6:	1cc8      	adds	r0, r1, #3
 80074e8:	db02      	blt.n	80074f0 <_printf_float+0x108>
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	4299      	cmp	r1, r3
 80074ee:	dd41      	ble.n	8007574 <_printf_float+0x18c>
 80074f0:	f1a9 0902 	sub.w	r9, r9, #2
 80074f4:	fa5f f989 	uxtb.w	r9, r9
 80074f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80074fc:	d820      	bhi.n	8007540 <_printf_float+0x158>
 80074fe:	3901      	subs	r1, #1
 8007500:	464a      	mov	r2, r9
 8007502:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007506:	9107      	str	r1, [sp, #28]
 8007508:	f7ff ff2e 	bl	8007368 <__exponent>
 800750c:	9a08      	ldr	r2, [sp, #32]
 800750e:	9004      	str	r0, [sp, #16]
 8007510:	1813      	adds	r3, r2, r0
 8007512:	2a01      	cmp	r2, #1
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	dc02      	bgt.n	800751e <_printf_float+0x136>
 8007518:	6822      	ldr	r2, [r4, #0]
 800751a:	07d2      	lsls	r2, r2, #31
 800751c:	d501      	bpl.n	8007522 <_printf_float+0x13a>
 800751e:	3301      	adds	r3, #1
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0a2      	beq.n	8007470 <_printf_float+0x88>
 800752a:	232d      	movs	r3, #45	; 0x2d
 800752c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007530:	e79e      	b.n	8007470 <_printf_float+0x88>
 8007532:	9904      	ldr	r1, [sp, #16]
 8007534:	2947      	cmp	r1, #71	; 0x47
 8007536:	d1c1      	bne.n	80074bc <_printf_float+0xd4>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1bf      	bne.n	80074bc <_printf_float+0xd4>
 800753c:	2301      	movs	r3, #1
 800753e:	e7bc      	b.n	80074ba <_printf_float+0xd2>
 8007540:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007544:	d118      	bne.n	8007578 <_printf_float+0x190>
 8007546:	2900      	cmp	r1, #0
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	dd0b      	ble.n	8007564 <_printf_float+0x17c>
 800754c:	6121      	str	r1, [r4, #16]
 800754e:	b913      	cbnz	r3, 8007556 <_printf_float+0x16e>
 8007550:	6822      	ldr	r2, [r4, #0]
 8007552:	07d0      	lsls	r0, r2, #31
 8007554:	d502      	bpl.n	800755c <_printf_float+0x174>
 8007556:	3301      	adds	r3, #1
 8007558:	440b      	add	r3, r1
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	2300      	movs	r3, #0
 800755e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007560:	9304      	str	r3, [sp, #16]
 8007562:	e7de      	b.n	8007522 <_printf_float+0x13a>
 8007564:	b913      	cbnz	r3, 800756c <_printf_float+0x184>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	07d2      	lsls	r2, r2, #31
 800756a:	d501      	bpl.n	8007570 <_printf_float+0x188>
 800756c:	3302      	adds	r3, #2
 800756e:	e7f4      	b.n	800755a <_printf_float+0x172>
 8007570:	2301      	movs	r3, #1
 8007572:	e7f2      	b.n	800755a <_printf_float+0x172>
 8007574:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	4299      	cmp	r1, r3
 800757c:	db05      	blt.n	800758a <_printf_float+0x1a2>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	6121      	str	r1, [r4, #16]
 8007582:	07d8      	lsls	r0, r3, #31
 8007584:	d5ea      	bpl.n	800755c <_printf_float+0x174>
 8007586:	1c4b      	adds	r3, r1, #1
 8007588:	e7e7      	b.n	800755a <_printf_float+0x172>
 800758a:	2900      	cmp	r1, #0
 800758c:	bfd4      	ite	le
 800758e:	f1c1 0202 	rsble	r2, r1, #2
 8007592:	2201      	movgt	r2, #1
 8007594:	4413      	add	r3, r2
 8007596:	e7e0      	b.n	800755a <_printf_float+0x172>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	055a      	lsls	r2, r3, #21
 800759c:	d407      	bmi.n	80075ae <_printf_float+0x1c6>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	4642      	mov	r2, r8
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	d12a      	bne.n	8007602 <_printf_float+0x21a>
 80075ac:	e76a      	b.n	8007484 <_printf_float+0x9c>
 80075ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075b2:	f240 80e2 	bls.w	800777a <_printf_float+0x392>
 80075b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80075ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c2:	d133      	bne.n	800762c <_printf_float+0x244>
 80075c4:	4a38      	ldr	r2, [pc, #224]	; (80076a8 <_printf_float+0x2c0>)
 80075c6:	2301      	movs	r3, #1
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	f43f af58 	beq.w	8007484 <_printf_float+0x9c>
 80075d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80075d8:	429a      	cmp	r2, r3
 80075da:	db02      	blt.n	80075e2 <_printf_float+0x1fa>
 80075dc:	6823      	ldr	r3, [r4, #0]
 80075de:	07d8      	lsls	r0, r3, #31
 80075e0:	d50f      	bpl.n	8007602 <_printf_float+0x21a>
 80075e2:	4653      	mov	r3, sl
 80075e4:	465a      	mov	r2, fp
 80075e6:	4631      	mov	r1, r6
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b8      	blx	r7
 80075ec:	3001      	adds	r0, #1
 80075ee:	f43f af49 	beq.w	8007484 <_printf_float+0x9c>
 80075f2:	f04f 0800 	mov.w	r8, #0
 80075f6:	f104 091a 	add.w	r9, r4, #26
 80075fa:	9b08      	ldr	r3, [sp, #32]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	4543      	cmp	r3, r8
 8007600:	dc09      	bgt.n	8007616 <_printf_float+0x22e>
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	079b      	lsls	r3, r3, #30
 8007606:	f100 8108 	bmi.w	800781a <_printf_float+0x432>
 800760a:	68e0      	ldr	r0, [r4, #12]
 800760c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800760e:	4298      	cmp	r0, r3
 8007610:	bfb8      	it	lt
 8007612:	4618      	movlt	r0, r3
 8007614:	e738      	b.n	8007488 <_printf_float+0xa0>
 8007616:	2301      	movs	r3, #1
 8007618:	464a      	mov	r2, r9
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	f43f af2f 	beq.w	8007484 <_printf_float+0x9c>
 8007626:	f108 0801 	add.w	r8, r8, #1
 800762a:	e7e6      	b.n	80075fa <_printf_float+0x212>
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	dc3c      	bgt.n	80076ac <_printf_float+0x2c4>
 8007632:	4a1d      	ldr	r2, [pc, #116]	; (80076a8 <_printf_float+0x2c0>)
 8007634:	2301      	movs	r3, #1
 8007636:	4631      	mov	r1, r6
 8007638:	4628      	mov	r0, r5
 800763a:	47b8      	blx	r7
 800763c:	3001      	adds	r0, #1
 800763e:	f43f af21 	beq.w	8007484 <_printf_float+0x9c>
 8007642:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007646:	4313      	orrs	r3, r2
 8007648:	d102      	bne.n	8007650 <_printf_float+0x268>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	07d9      	lsls	r1, r3, #31
 800764e:	d5d8      	bpl.n	8007602 <_printf_float+0x21a>
 8007650:	4653      	mov	r3, sl
 8007652:	465a      	mov	r2, fp
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f af12 	beq.w	8007484 <_printf_float+0x9c>
 8007660:	f04f 0900 	mov.w	r9, #0
 8007664:	f104 0a1a 	add.w	sl, r4, #26
 8007668:	9b07      	ldr	r3, [sp, #28]
 800766a:	425b      	negs	r3, r3
 800766c:	454b      	cmp	r3, r9
 800766e:	dc01      	bgt.n	8007674 <_printf_float+0x28c>
 8007670:	9b08      	ldr	r3, [sp, #32]
 8007672:	e795      	b.n	80075a0 <_printf_float+0x1b8>
 8007674:	2301      	movs	r3, #1
 8007676:	4652      	mov	r2, sl
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	f43f af00 	beq.w	8007484 <_printf_float+0x9c>
 8007684:	f109 0901 	add.w	r9, r9, #1
 8007688:	e7ee      	b.n	8007668 <_printf_float+0x280>
 800768a:	bf00      	nop
 800768c:	f3af 8000 	nop.w
 8007690:	ffffffff 	.word	0xffffffff
 8007694:	7fefffff 	.word	0x7fefffff
 8007698:	0800ba48 	.word	0x0800ba48
 800769c:	0800ba4c 	.word	0x0800ba4c
 80076a0:	0800ba54 	.word	0x0800ba54
 80076a4:	0800ba50 	.word	0x0800ba50
 80076a8:	0800ba58 	.word	0x0800ba58
 80076ac:	9a08      	ldr	r2, [sp, #32]
 80076ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076b0:	429a      	cmp	r2, r3
 80076b2:	bfa8      	it	ge
 80076b4:	461a      	movge	r2, r3
 80076b6:	2a00      	cmp	r2, #0
 80076b8:	4691      	mov	r9, r2
 80076ba:	dc38      	bgt.n	800772e <_printf_float+0x346>
 80076bc:	2300      	movs	r3, #0
 80076be:	9305      	str	r3, [sp, #20]
 80076c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c4:	f104 021a 	add.w	r2, r4, #26
 80076c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ca:	9905      	ldr	r1, [sp, #20]
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	eba3 0309 	sub.w	r3, r3, r9
 80076d2:	428b      	cmp	r3, r1
 80076d4:	dc33      	bgt.n	800773e <_printf_float+0x356>
 80076d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80076da:	429a      	cmp	r2, r3
 80076dc:	db3c      	blt.n	8007758 <_printf_float+0x370>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	07da      	lsls	r2, r3, #31
 80076e2:	d439      	bmi.n	8007758 <_printf_float+0x370>
 80076e4:	9b08      	ldr	r3, [sp, #32]
 80076e6:	9a04      	ldr	r2, [sp, #16]
 80076e8:	9907      	ldr	r1, [sp, #28]
 80076ea:	1a9a      	subs	r2, r3, r2
 80076ec:	eba3 0901 	sub.w	r9, r3, r1
 80076f0:	4591      	cmp	r9, r2
 80076f2:	bfa8      	it	ge
 80076f4:	4691      	movge	r9, r2
 80076f6:	f1b9 0f00 	cmp.w	r9, #0
 80076fa:	dc35      	bgt.n	8007768 <_printf_float+0x380>
 80076fc:	f04f 0800 	mov.w	r8, #0
 8007700:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007704:	f104 0a1a 	add.w	sl, r4, #26
 8007708:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800770c:	1a9b      	subs	r3, r3, r2
 800770e:	eba3 0309 	sub.w	r3, r3, r9
 8007712:	4543      	cmp	r3, r8
 8007714:	f77f af75 	ble.w	8007602 <_printf_float+0x21a>
 8007718:	2301      	movs	r3, #1
 800771a:	4652      	mov	r2, sl
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f aeae 	beq.w	8007484 <_printf_float+0x9c>
 8007728:	f108 0801 	add.w	r8, r8, #1
 800772c:	e7ec      	b.n	8007708 <_printf_float+0x320>
 800772e:	4613      	mov	r3, r2
 8007730:	4631      	mov	r1, r6
 8007732:	4642      	mov	r2, r8
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	d1bf      	bne.n	80076bc <_printf_float+0x2d4>
 800773c:	e6a2      	b.n	8007484 <_printf_float+0x9c>
 800773e:	2301      	movs	r3, #1
 8007740:	4631      	mov	r1, r6
 8007742:	4628      	mov	r0, r5
 8007744:	9204      	str	r2, [sp, #16]
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	f43f ae9b 	beq.w	8007484 <_printf_float+0x9c>
 800774e:	9b05      	ldr	r3, [sp, #20]
 8007750:	9a04      	ldr	r2, [sp, #16]
 8007752:	3301      	adds	r3, #1
 8007754:	9305      	str	r3, [sp, #20]
 8007756:	e7b7      	b.n	80076c8 <_printf_float+0x2e0>
 8007758:	4653      	mov	r3, sl
 800775a:	465a      	mov	r2, fp
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	d1be      	bne.n	80076e4 <_printf_float+0x2fc>
 8007766:	e68d      	b.n	8007484 <_printf_float+0x9c>
 8007768:	9a04      	ldr	r2, [sp, #16]
 800776a:	464b      	mov	r3, r9
 800776c:	4442      	add	r2, r8
 800776e:	4631      	mov	r1, r6
 8007770:	4628      	mov	r0, r5
 8007772:	47b8      	blx	r7
 8007774:	3001      	adds	r0, #1
 8007776:	d1c1      	bne.n	80076fc <_printf_float+0x314>
 8007778:	e684      	b.n	8007484 <_printf_float+0x9c>
 800777a:	9a08      	ldr	r2, [sp, #32]
 800777c:	2a01      	cmp	r2, #1
 800777e:	dc01      	bgt.n	8007784 <_printf_float+0x39c>
 8007780:	07db      	lsls	r3, r3, #31
 8007782:	d537      	bpl.n	80077f4 <_printf_float+0x40c>
 8007784:	2301      	movs	r3, #1
 8007786:	4642      	mov	r2, r8
 8007788:	4631      	mov	r1, r6
 800778a:	4628      	mov	r0, r5
 800778c:	47b8      	blx	r7
 800778e:	3001      	adds	r0, #1
 8007790:	f43f ae78 	beq.w	8007484 <_printf_float+0x9c>
 8007794:	4653      	mov	r3, sl
 8007796:	465a      	mov	r2, fp
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f ae70 	beq.w	8007484 <_printf_float+0x9c>
 80077a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80077a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80077ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b0:	d01b      	beq.n	80077ea <_printf_float+0x402>
 80077b2:	9b08      	ldr	r3, [sp, #32]
 80077b4:	f108 0201 	add.w	r2, r8, #1
 80077b8:	3b01      	subs	r3, #1
 80077ba:	4631      	mov	r1, r6
 80077bc:	4628      	mov	r0, r5
 80077be:	47b8      	blx	r7
 80077c0:	3001      	adds	r0, #1
 80077c2:	d10e      	bne.n	80077e2 <_printf_float+0x3fa>
 80077c4:	e65e      	b.n	8007484 <_printf_float+0x9c>
 80077c6:	2301      	movs	r3, #1
 80077c8:	464a      	mov	r2, r9
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f ae57 	beq.w	8007484 <_printf_float+0x9c>
 80077d6:	f108 0801 	add.w	r8, r8, #1
 80077da:	9b08      	ldr	r3, [sp, #32]
 80077dc:	3b01      	subs	r3, #1
 80077de:	4543      	cmp	r3, r8
 80077e0:	dcf1      	bgt.n	80077c6 <_printf_float+0x3de>
 80077e2:	9b04      	ldr	r3, [sp, #16]
 80077e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077e8:	e6db      	b.n	80075a2 <_printf_float+0x1ba>
 80077ea:	f04f 0800 	mov.w	r8, #0
 80077ee:	f104 091a 	add.w	r9, r4, #26
 80077f2:	e7f2      	b.n	80077da <_printf_float+0x3f2>
 80077f4:	2301      	movs	r3, #1
 80077f6:	4642      	mov	r2, r8
 80077f8:	e7df      	b.n	80077ba <_printf_float+0x3d2>
 80077fa:	2301      	movs	r3, #1
 80077fc:	464a      	mov	r2, r9
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	47b8      	blx	r7
 8007804:	3001      	adds	r0, #1
 8007806:	f43f ae3d 	beq.w	8007484 <_printf_float+0x9c>
 800780a:	f108 0801 	add.w	r8, r8, #1
 800780e:	68e3      	ldr	r3, [r4, #12]
 8007810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007812:	1a5b      	subs	r3, r3, r1
 8007814:	4543      	cmp	r3, r8
 8007816:	dcf0      	bgt.n	80077fa <_printf_float+0x412>
 8007818:	e6f7      	b.n	800760a <_printf_float+0x222>
 800781a:	f04f 0800 	mov.w	r8, #0
 800781e:	f104 0919 	add.w	r9, r4, #25
 8007822:	e7f4      	b.n	800780e <_printf_float+0x426>

08007824 <_printf_common>:
 8007824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	4616      	mov	r6, r2
 800782a:	4699      	mov	r9, r3
 800782c:	688a      	ldr	r2, [r1, #8]
 800782e:	690b      	ldr	r3, [r1, #16]
 8007830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007834:	4293      	cmp	r3, r2
 8007836:	bfb8      	it	lt
 8007838:	4613      	movlt	r3, r2
 800783a:	6033      	str	r3, [r6, #0]
 800783c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007840:	4607      	mov	r7, r0
 8007842:	460c      	mov	r4, r1
 8007844:	b10a      	cbz	r2, 800784a <_printf_common+0x26>
 8007846:	3301      	adds	r3, #1
 8007848:	6033      	str	r3, [r6, #0]
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	0699      	lsls	r1, r3, #26
 800784e:	bf42      	ittt	mi
 8007850:	6833      	ldrmi	r3, [r6, #0]
 8007852:	3302      	addmi	r3, #2
 8007854:	6033      	strmi	r3, [r6, #0]
 8007856:	6825      	ldr	r5, [r4, #0]
 8007858:	f015 0506 	ands.w	r5, r5, #6
 800785c:	d106      	bne.n	800786c <_printf_common+0x48>
 800785e:	f104 0a19 	add.w	sl, r4, #25
 8007862:	68e3      	ldr	r3, [r4, #12]
 8007864:	6832      	ldr	r2, [r6, #0]
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	42ab      	cmp	r3, r5
 800786a:	dc26      	bgt.n	80078ba <_printf_common+0x96>
 800786c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007870:	1e13      	subs	r3, r2, #0
 8007872:	6822      	ldr	r2, [r4, #0]
 8007874:	bf18      	it	ne
 8007876:	2301      	movne	r3, #1
 8007878:	0692      	lsls	r2, r2, #26
 800787a:	d42b      	bmi.n	80078d4 <_printf_common+0xb0>
 800787c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007880:	4649      	mov	r1, r9
 8007882:	4638      	mov	r0, r7
 8007884:	47c0      	blx	r8
 8007886:	3001      	adds	r0, #1
 8007888:	d01e      	beq.n	80078c8 <_printf_common+0xa4>
 800788a:	6823      	ldr	r3, [r4, #0]
 800788c:	68e5      	ldr	r5, [r4, #12]
 800788e:	6832      	ldr	r2, [r6, #0]
 8007890:	f003 0306 	and.w	r3, r3, #6
 8007894:	2b04      	cmp	r3, #4
 8007896:	bf08      	it	eq
 8007898:	1aad      	subeq	r5, r5, r2
 800789a:	68a3      	ldr	r3, [r4, #8]
 800789c:	6922      	ldr	r2, [r4, #16]
 800789e:	bf0c      	ite	eq
 80078a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a4:	2500      	movne	r5, #0
 80078a6:	4293      	cmp	r3, r2
 80078a8:	bfc4      	itt	gt
 80078aa:	1a9b      	subgt	r3, r3, r2
 80078ac:	18ed      	addgt	r5, r5, r3
 80078ae:	2600      	movs	r6, #0
 80078b0:	341a      	adds	r4, #26
 80078b2:	42b5      	cmp	r5, r6
 80078b4:	d11a      	bne.n	80078ec <_printf_common+0xc8>
 80078b6:	2000      	movs	r0, #0
 80078b8:	e008      	b.n	80078cc <_printf_common+0xa8>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4652      	mov	r2, sl
 80078be:	4649      	mov	r1, r9
 80078c0:	4638      	mov	r0, r7
 80078c2:	47c0      	blx	r8
 80078c4:	3001      	adds	r0, #1
 80078c6:	d103      	bne.n	80078d0 <_printf_common+0xac>
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295
 80078cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d0:	3501      	adds	r5, #1
 80078d2:	e7c6      	b.n	8007862 <_printf_common+0x3e>
 80078d4:	18e1      	adds	r1, r4, r3
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	2030      	movs	r0, #48	; 0x30
 80078da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078de:	4422      	add	r2, r4
 80078e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078e8:	3302      	adds	r3, #2
 80078ea:	e7c7      	b.n	800787c <_printf_common+0x58>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4622      	mov	r2, r4
 80078f0:	4649      	mov	r1, r9
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c0      	blx	r8
 80078f6:	3001      	adds	r0, #1
 80078f8:	d0e6      	beq.n	80078c8 <_printf_common+0xa4>
 80078fa:	3601      	adds	r6, #1
 80078fc:	e7d9      	b.n	80078b2 <_printf_common+0x8e>
	...

08007900 <_printf_i>:
 8007900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007904:	7e0f      	ldrb	r7, [r1, #24]
 8007906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007908:	2f78      	cmp	r7, #120	; 0x78
 800790a:	4691      	mov	r9, r2
 800790c:	4680      	mov	r8, r0
 800790e:	460c      	mov	r4, r1
 8007910:	469a      	mov	sl, r3
 8007912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007916:	d807      	bhi.n	8007928 <_printf_i+0x28>
 8007918:	2f62      	cmp	r7, #98	; 0x62
 800791a:	d80a      	bhi.n	8007932 <_printf_i+0x32>
 800791c:	2f00      	cmp	r7, #0
 800791e:	f000 80d8 	beq.w	8007ad2 <_printf_i+0x1d2>
 8007922:	2f58      	cmp	r7, #88	; 0x58
 8007924:	f000 80a3 	beq.w	8007a6e <_printf_i+0x16e>
 8007928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800792c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007930:	e03a      	b.n	80079a8 <_printf_i+0xa8>
 8007932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007936:	2b15      	cmp	r3, #21
 8007938:	d8f6      	bhi.n	8007928 <_printf_i+0x28>
 800793a:	a101      	add	r1, pc, #4	; (adr r1, 8007940 <_printf_i+0x40>)
 800793c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007940:	08007999 	.word	0x08007999
 8007944:	080079ad 	.word	0x080079ad
 8007948:	08007929 	.word	0x08007929
 800794c:	08007929 	.word	0x08007929
 8007950:	08007929 	.word	0x08007929
 8007954:	08007929 	.word	0x08007929
 8007958:	080079ad 	.word	0x080079ad
 800795c:	08007929 	.word	0x08007929
 8007960:	08007929 	.word	0x08007929
 8007964:	08007929 	.word	0x08007929
 8007968:	08007929 	.word	0x08007929
 800796c:	08007ab9 	.word	0x08007ab9
 8007970:	080079dd 	.word	0x080079dd
 8007974:	08007a9b 	.word	0x08007a9b
 8007978:	08007929 	.word	0x08007929
 800797c:	08007929 	.word	0x08007929
 8007980:	08007adb 	.word	0x08007adb
 8007984:	08007929 	.word	0x08007929
 8007988:	080079dd 	.word	0x080079dd
 800798c:	08007929 	.word	0x08007929
 8007990:	08007929 	.word	0x08007929
 8007994:	08007aa3 	.word	0x08007aa3
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	1d1a      	adds	r2, r3, #4
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	602a      	str	r2, [r5, #0]
 80079a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079a8:	2301      	movs	r3, #1
 80079aa:	e0a3      	b.n	8007af4 <_printf_i+0x1f4>
 80079ac:	6820      	ldr	r0, [r4, #0]
 80079ae:	6829      	ldr	r1, [r5, #0]
 80079b0:	0606      	lsls	r6, r0, #24
 80079b2:	f101 0304 	add.w	r3, r1, #4
 80079b6:	d50a      	bpl.n	80079ce <_printf_i+0xce>
 80079b8:	680e      	ldr	r6, [r1, #0]
 80079ba:	602b      	str	r3, [r5, #0]
 80079bc:	2e00      	cmp	r6, #0
 80079be:	da03      	bge.n	80079c8 <_printf_i+0xc8>
 80079c0:	232d      	movs	r3, #45	; 0x2d
 80079c2:	4276      	negs	r6, r6
 80079c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c8:	485e      	ldr	r0, [pc, #376]	; (8007b44 <_printf_i+0x244>)
 80079ca:	230a      	movs	r3, #10
 80079cc:	e019      	b.n	8007a02 <_printf_i+0x102>
 80079ce:	680e      	ldr	r6, [r1, #0]
 80079d0:	602b      	str	r3, [r5, #0]
 80079d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079d6:	bf18      	it	ne
 80079d8:	b236      	sxthne	r6, r6
 80079da:	e7ef      	b.n	80079bc <_printf_i+0xbc>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	6820      	ldr	r0, [r4, #0]
 80079e0:	1d19      	adds	r1, r3, #4
 80079e2:	6029      	str	r1, [r5, #0]
 80079e4:	0601      	lsls	r1, r0, #24
 80079e6:	d501      	bpl.n	80079ec <_printf_i+0xec>
 80079e8:	681e      	ldr	r6, [r3, #0]
 80079ea:	e002      	b.n	80079f2 <_printf_i+0xf2>
 80079ec:	0646      	lsls	r6, r0, #25
 80079ee:	d5fb      	bpl.n	80079e8 <_printf_i+0xe8>
 80079f0:	881e      	ldrh	r6, [r3, #0]
 80079f2:	4854      	ldr	r0, [pc, #336]	; (8007b44 <_printf_i+0x244>)
 80079f4:	2f6f      	cmp	r7, #111	; 0x6f
 80079f6:	bf0c      	ite	eq
 80079f8:	2308      	moveq	r3, #8
 80079fa:	230a      	movne	r3, #10
 80079fc:	2100      	movs	r1, #0
 80079fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a02:	6865      	ldr	r5, [r4, #4]
 8007a04:	60a5      	str	r5, [r4, #8]
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	bfa2      	ittt	ge
 8007a0a:	6821      	ldrge	r1, [r4, #0]
 8007a0c:	f021 0104 	bicge.w	r1, r1, #4
 8007a10:	6021      	strge	r1, [r4, #0]
 8007a12:	b90e      	cbnz	r6, 8007a18 <_printf_i+0x118>
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	d04d      	beq.n	8007ab4 <_printf_i+0x1b4>
 8007a18:	4615      	mov	r5, r2
 8007a1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a1e:	fb03 6711 	mls	r7, r3, r1, r6
 8007a22:	5dc7      	ldrb	r7, [r0, r7]
 8007a24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a28:	4637      	mov	r7, r6
 8007a2a:	42bb      	cmp	r3, r7
 8007a2c:	460e      	mov	r6, r1
 8007a2e:	d9f4      	bls.n	8007a1a <_printf_i+0x11a>
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d10b      	bne.n	8007a4c <_printf_i+0x14c>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	07de      	lsls	r6, r3, #31
 8007a38:	d508      	bpl.n	8007a4c <_printf_i+0x14c>
 8007a3a:	6923      	ldr	r3, [r4, #16]
 8007a3c:	6861      	ldr	r1, [r4, #4]
 8007a3e:	4299      	cmp	r1, r3
 8007a40:	bfde      	ittt	le
 8007a42:	2330      	movle	r3, #48	; 0x30
 8007a44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a4c:	1b52      	subs	r2, r2, r5
 8007a4e:	6122      	str	r2, [r4, #16]
 8007a50:	f8cd a000 	str.w	sl, [sp]
 8007a54:	464b      	mov	r3, r9
 8007a56:	aa03      	add	r2, sp, #12
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4640      	mov	r0, r8
 8007a5c:	f7ff fee2 	bl	8007824 <_printf_common>
 8007a60:	3001      	adds	r0, #1
 8007a62:	d14c      	bne.n	8007afe <_printf_i+0x1fe>
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	b004      	add	sp, #16
 8007a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6e:	4835      	ldr	r0, [pc, #212]	; (8007b44 <_printf_i+0x244>)
 8007a70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a74:	6829      	ldr	r1, [r5, #0]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a7c:	6029      	str	r1, [r5, #0]
 8007a7e:	061d      	lsls	r5, r3, #24
 8007a80:	d514      	bpl.n	8007aac <_printf_i+0x1ac>
 8007a82:	07df      	lsls	r7, r3, #31
 8007a84:	bf44      	itt	mi
 8007a86:	f043 0320 	orrmi.w	r3, r3, #32
 8007a8a:	6023      	strmi	r3, [r4, #0]
 8007a8c:	b91e      	cbnz	r6, 8007a96 <_printf_i+0x196>
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	f023 0320 	bic.w	r3, r3, #32
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	2310      	movs	r3, #16
 8007a98:	e7b0      	b.n	80079fc <_printf_i+0xfc>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	f043 0320 	orr.w	r3, r3, #32
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	2378      	movs	r3, #120	; 0x78
 8007aa4:	4828      	ldr	r0, [pc, #160]	; (8007b48 <_printf_i+0x248>)
 8007aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aaa:	e7e3      	b.n	8007a74 <_printf_i+0x174>
 8007aac:	0659      	lsls	r1, r3, #25
 8007aae:	bf48      	it	mi
 8007ab0:	b2b6      	uxthmi	r6, r6
 8007ab2:	e7e6      	b.n	8007a82 <_printf_i+0x182>
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	e7bb      	b.n	8007a30 <_printf_i+0x130>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	6826      	ldr	r6, [r4, #0]
 8007abc:	6961      	ldr	r1, [r4, #20]
 8007abe:	1d18      	adds	r0, r3, #4
 8007ac0:	6028      	str	r0, [r5, #0]
 8007ac2:	0635      	lsls	r5, r6, #24
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	d501      	bpl.n	8007acc <_printf_i+0x1cc>
 8007ac8:	6019      	str	r1, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <_printf_i+0x1d2>
 8007acc:	0670      	lsls	r0, r6, #25
 8007ace:	d5fb      	bpl.n	8007ac8 <_printf_i+0x1c8>
 8007ad0:	8019      	strh	r1, [r3, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6123      	str	r3, [r4, #16]
 8007ad6:	4615      	mov	r5, r2
 8007ad8:	e7ba      	b.n	8007a50 <_printf_i+0x150>
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	1d1a      	adds	r2, r3, #4
 8007ade:	602a      	str	r2, [r5, #0]
 8007ae0:	681d      	ldr	r5, [r3, #0]
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	f7f8 fbb2 	bl	8000250 <memchr>
 8007aec:	b108      	cbz	r0, 8007af2 <_printf_i+0x1f2>
 8007aee:	1b40      	subs	r0, r0, r5
 8007af0:	6060      	str	r0, [r4, #4]
 8007af2:	6863      	ldr	r3, [r4, #4]
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	2300      	movs	r3, #0
 8007af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007afc:	e7a8      	b.n	8007a50 <_printf_i+0x150>
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	462a      	mov	r2, r5
 8007b02:	4649      	mov	r1, r9
 8007b04:	4640      	mov	r0, r8
 8007b06:	47d0      	blx	sl
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d0ab      	beq.n	8007a64 <_printf_i+0x164>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	079b      	lsls	r3, r3, #30
 8007b10:	d413      	bmi.n	8007b3a <_printf_i+0x23a>
 8007b12:	68e0      	ldr	r0, [r4, #12]
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	4298      	cmp	r0, r3
 8007b18:	bfb8      	it	lt
 8007b1a:	4618      	movlt	r0, r3
 8007b1c:	e7a4      	b.n	8007a68 <_printf_i+0x168>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4632      	mov	r2, r6
 8007b22:	4649      	mov	r1, r9
 8007b24:	4640      	mov	r0, r8
 8007b26:	47d0      	blx	sl
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d09b      	beq.n	8007a64 <_printf_i+0x164>
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	9903      	ldr	r1, [sp, #12]
 8007b32:	1a5b      	subs	r3, r3, r1
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	dcf2      	bgt.n	8007b1e <_printf_i+0x21e>
 8007b38:	e7eb      	b.n	8007b12 <_printf_i+0x212>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	f104 0619 	add.w	r6, r4, #25
 8007b40:	e7f5      	b.n	8007b2e <_printf_i+0x22e>
 8007b42:	bf00      	nop
 8007b44:	0800ba5a 	.word	0x0800ba5a
 8007b48:	0800ba6b 	.word	0x0800ba6b

08007b4c <_scanf_float>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	b087      	sub	sp, #28
 8007b52:	4617      	mov	r7, r2
 8007b54:	9303      	str	r3, [sp, #12]
 8007b56:	688b      	ldr	r3, [r1, #8]
 8007b58:	1e5a      	subs	r2, r3, #1
 8007b5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007b5e:	bf83      	ittte	hi
 8007b60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007b64:	195b      	addhi	r3, r3, r5
 8007b66:	9302      	strhi	r3, [sp, #8]
 8007b68:	2300      	movls	r3, #0
 8007b6a:	bf86      	itte	hi
 8007b6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007b70:	608b      	strhi	r3, [r1, #8]
 8007b72:	9302      	strls	r3, [sp, #8]
 8007b74:	680b      	ldr	r3, [r1, #0]
 8007b76:	468b      	mov	fp, r1
 8007b78:	2500      	movs	r5, #0
 8007b7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007b7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007b82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b86:	4680      	mov	r8, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	465e      	mov	r6, fp
 8007b8c:	46aa      	mov	sl, r5
 8007b8e:	46a9      	mov	r9, r5
 8007b90:	9501      	str	r5, [sp, #4]
 8007b92:	68a2      	ldr	r2, [r4, #8]
 8007b94:	b152      	cbz	r2, 8007bac <_scanf_float+0x60>
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b4e      	cmp	r3, #78	; 0x4e
 8007b9c:	d864      	bhi.n	8007c68 <_scanf_float+0x11c>
 8007b9e:	2b40      	cmp	r3, #64	; 0x40
 8007ba0:	d83c      	bhi.n	8007c1c <_scanf_float+0xd0>
 8007ba2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ba6:	b2c8      	uxtb	r0, r1
 8007ba8:	280e      	cmp	r0, #14
 8007baa:	d93a      	bls.n	8007c22 <_scanf_float+0xd6>
 8007bac:	f1b9 0f00 	cmp.w	r9, #0
 8007bb0:	d003      	beq.n	8007bba <_scanf_float+0x6e>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bbe:	f1ba 0f01 	cmp.w	sl, #1
 8007bc2:	f200 8113 	bhi.w	8007dec <_scanf_float+0x2a0>
 8007bc6:	455e      	cmp	r6, fp
 8007bc8:	f200 8105 	bhi.w	8007dd6 <_scanf_float+0x28a>
 8007bcc:	2501      	movs	r5, #1
 8007bce:	4628      	mov	r0, r5
 8007bd0:	b007      	add	sp, #28
 8007bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007bda:	2a0d      	cmp	r2, #13
 8007bdc:	d8e6      	bhi.n	8007bac <_scanf_float+0x60>
 8007bde:	a101      	add	r1, pc, #4	; (adr r1, 8007be4 <_scanf_float+0x98>)
 8007be0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007be4:	08007d23 	.word	0x08007d23
 8007be8:	08007bad 	.word	0x08007bad
 8007bec:	08007bad 	.word	0x08007bad
 8007bf0:	08007bad 	.word	0x08007bad
 8007bf4:	08007d83 	.word	0x08007d83
 8007bf8:	08007d5b 	.word	0x08007d5b
 8007bfc:	08007bad 	.word	0x08007bad
 8007c00:	08007bad 	.word	0x08007bad
 8007c04:	08007d31 	.word	0x08007d31
 8007c08:	08007bad 	.word	0x08007bad
 8007c0c:	08007bad 	.word	0x08007bad
 8007c10:	08007bad 	.word	0x08007bad
 8007c14:	08007bad 	.word	0x08007bad
 8007c18:	08007ce9 	.word	0x08007ce9
 8007c1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007c20:	e7db      	b.n	8007bda <_scanf_float+0x8e>
 8007c22:	290e      	cmp	r1, #14
 8007c24:	d8c2      	bhi.n	8007bac <_scanf_float+0x60>
 8007c26:	a001      	add	r0, pc, #4	; (adr r0, 8007c2c <_scanf_float+0xe0>)
 8007c28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c2c:	08007cdb 	.word	0x08007cdb
 8007c30:	08007bad 	.word	0x08007bad
 8007c34:	08007cdb 	.word	0x08007cdb
 8007c38:	08007d6f 	.word	0x08007d6f
 8007c3c:	08007bad 	.word	0x08007bad
 8007c40:	08007c89 	.word	0x08007c89
 8007c44:	08007cc5 	.word	0x08007cc5
 8007c48:	08007cc5 	.word	0x08007cc5
 8007c4c:	08007cc5 	.word	0x08007cc5
 8007c50:	08007cc5 	.word	0x08007cc5
 8007c54:	08007cc5 	.word	0x08007cc5
 8007c58:	08007cc5 	.word	0x08007cc5
 8007c5c:	08007cc5 	.word	0x08007cc5
 8007c60:	08007cc5 	.word	0x08007cc5
 8007c64:	08007cc5 	.word	0x08007cc5
 8007c68:	2b6e      	cmp	r3, #110	; 0x6e
 8007c6a:	d809      	bhi.n	8007c80 <_scanf_float+0x134>
 8007c6c:	2b60      	cmp	r3, #96	; 0x60
 8007c6e:	d8b2      	bhi.n	8007bd6 <_scanf_float+0x8a>
 8007c70:	2b54      	cmp	r3, #84	; 0x54
 8007c72:	d077      	beq.n	8007d64 <_scanf_float+0x218>
 8007c74:	2b59      	cmp	r3, #89	; 0x59
 8007c76:	d199      	bne.n	8007bac <_scanf_float+0x60>
 8007c78:	2d07      	cmp	r5, #7
 8007c7a:	d197      	bne.n	8007bac <_scanf_float+0x60>
 8007c7c:	2508      	movs	r5, #8
 8007c7e:	e029      	b.n	8007cd4 <_scanf_float+0x188>
 8007c80:	2b74      	cmp	r3, #116	; 0x74
 8007c82:	d06f      	beq.n	8007d64 <_scanf_float+0x218>
 8007c84:	2b79      	cmp	r3, #121	; 0x79
 8007c86:	e7f6      	b.n	8007c76 <_scanf_float+0x12a>
 8007c88:	6821      	ldr	r1, [r4, #0]
 8007c8a:	05c8      	lsls	r0, r1, #23
 8007c8c:	d51a      	bpl.n	8007cc4 <_scanf_float+0x178>
 8007c8e:	9b02      	ldr	r3, [sp, #8]
 8007c90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c94:	6021      	str	r1, [r4, #0]
 8007c96:	f109 0901 	add.w	r9, r9, #1
 8007c9a:	b11b      	cbz	r3, 8007ca4 <_scanf_float+0x158>
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	3201      	adds	r2, #1
 8007ca0:	9302      	str	r3, [sp, #8]
 8007ca2:	60a2      	str	r2, [r4, #8]
 8007ca4:	68a3      	ldr	r3, [r4, #8]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	3301      	adds	r3, #1
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	607b      	str	r3, [r7, #4]
 8007cb8:	f340 8084 	ble.w	8007dc4 <_scanf_float+0x278>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	603b      	str	r3, [r7, #0]
 8007cc2:	e766      	b.n	8007b92 <_scanf_float+0x46>
 8007cc4:	eb1a 0f05 	cmn.w	sl, r5
 8007cc8:	f47f af70 	bne.w	8007bac <_scanf_float+0x60>
 8007ccc:	6822      	ldr	r2, [r4, #0]
 8007cce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007cd2:	6022      	str	r2, [r4, #0]
 8007cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8007cd8:	e7e4      	b.n	8007ca4 <_scanf_float+0x158>
 8007cda:	6822      	ldr	r2, [r4, #0]
 8007cdc:	0610      	lsls	r0, r2, #24
 8007cde:	f57f af65 	bpl.w	8007bac <_scanf_float+0x60>
 8007ce2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ce6:	e7f4      	b.n	8007cd2 <_scanf_float+0x186>
 8007ce8:	f1ba 0f00 	cmp.w	sl, #0
 8007cec:	d10e      	bne.n	8007d0c <_scanf_float+0x1c0>
 8007cee:	f1b9 0f00 	cmp.w	r9, #0
 8007cf2:	d10e      	bne.n	8007d12 <_scanf_float+0x1c6>
 8007cf4:	6822      	ldr	r2, [r4, #0]
 8007cf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007cfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007cfe:	d108      	bne.n	8007d12 <_scanf_float+0x1c6>
 8007d00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	f04f 0a01 	mov.w	sl, #1
 8007d0a:	e7e3      	b.n	8007cd4 <_scanf_float+0x188>
 8007d0c:	f1ba 0f02 	cmp.w	sl, #2
 8007d10:	d055      	beq.n	8007dbe <_scanf_float+0x272>
 8007d12:	2d01      	cmp	r5, #1
 8007d14:	d002      	beq.n	8007d1c <_scanf_float+0x1d0>
 8007d16:	2d04      	cmp	r5, #4
 8007d18:	f47f af48 	bne.w	8007bac <_scanf_float+0x60>
 8007d1c:	3501      	adds	r5, #1
 8007d1e:	b2ed      	uxtb	r5, r5
 8007d20:	e7d8      	b.n	8007cd4 <_scanf_float+0x188>
 8007d22:	f1ba 0f01 	cmp.w	sl, #1
 8007d26:	f47f af41 	bne.w	8007bac <_scanf_float+0x60>
 8007d2a:	f04f 0a02 	mov.w	sl, #2
 8007d2e:	e7d1      	b.n	8007cd4 <_scanf_float+0x188>
 8007d30:	b97d      	cbnz	r5, 8007d52 <_scanf_float+0x206>
 8007d32:	f1b9 0f00 	cmp.w	r9, #0
 8007d36:	f47f af3c 	bne.w	8007bb2 <_scanf_float+0x66>
 8007d3a:	6822      	ldr	r2, [r4, #0]
 8007d3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d44:	f47f af39 	bne.w	8007bba <_scanf_float+0x6e>
 8007d48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d4c:	6022      	str	r2, [r4, #0]
 8007d4e:	2501      	movs	r5, #1
 8007d50:	e7c0      	b.n	8007cd4 <_scanf_float+0x188>
 8007d52:	2d03      	cmp	r5, #3
 8007d54:	d0e2      	beq.n	8007d1c <_scanf_float+0x1d0>
 8007d56:	2d05      	cmp	r5, #5
 8007d58:	e7de      	b.n	8007d18 <_scanf_float+0x1cc>
 8007d5a:	2d02      	cmp	r5, #2
 8007d5c:	f47f af26 	bne.w	8007bac <_scanf_float+0x60>
 8007d60:	2503      	movs	r5, #3
 8007d62:	e7b7      	b.n	8007cd4 <_scanf_float+0x188>
 8007d64:	2d06      	cmp	r5, #6
 8007d66:	f47f af21 	bne.w	8007bac <_scanf_float+0x60>
 8007d6a:	2507      	movs	r5, #7
 8007d6c:	e7b2      	b.n	8007cd4 <_scanf_float+0x188>
 8007d6e:	6822      	ldr	r2, [r4, #0]
 8007d70:	0591      	lsls	r1, r2, #22
 8007d72:	f57f af1b 	bpl.w	8007bac <_scanf_float+0x60>
 8007d76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007d7a:	6022      	str	r2, [r4, #0]
 8007d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d80:	e7a8      	b.n	8007cd4 <_scanf_float+0x188>
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007d88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007d8c:	d006      	beq.n	8007d9c <_scanf_float+0x250>
 8007d8e:	0550      	lsls	r0, r2, #21
 8007d90:	f57f af0c 	bpl.w	8007bac <_scanf_float+0x60>
 8007d94:	f1b9 0f00 	cmp.w	r9, #0
 8007d98:	f43f af0f 	beq.w	8007bba <_scanf_float+0x6e>
 8007d9c:	0591      	lsls	r1, r2, #22
 8007d9e:	bf58      	it	pl
 8007da0:	9901      	ldrpl	r1, [sp, #4]
 8007da2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007da6:	bf58      	it	pl
 8007da8:	eba9 0101 	subpl.w	r1, r9, r1
 8007dac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007db0:	bf58      	it	pl
 8007db2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007db6:	6022      	str	r2, [r4, #0]
 8007db8:	f04f 0900 	mov.w	r9, #0
 8007dbc:	e78a      	b.n	8007cd4 <_scanf_float+0x188>
 8007dbe:	f04f 0a03 	mov.w	sl, #3
 8007dc2:	e787      	b.n	8007cd4 <_scanf_float+0x188>
 8007dc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4798      	blx	r3
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f aedf 	beq.w	8007b92 <_scanf_float+0x46>
 8007dd4:	e6ea      	b.n	8007bac <_scanf_float+0x60>
 8007dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dde:	463a      	mov	r2, r7
 8007de0:	4640      	mov	r0, r8
 8007de2:	4798      	blx	r3
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	6123      	str	r3, [r4, #16]
 8007dea:	e6ec      	b.n	8007bc6 <_scanf_float+0x7a>
 8007dec:	1e6b      	subs	r3, r5, #1
 8007dee:	2b06      	cmp	r3, #6
 8007df0:	d825      	bhi.n	8007e3e <_scanf_float+0x2f2>
 8007df2:	2d02      	cmp	r5, #2
 8007df4:	d836      	bhi.n	8007e64 <_scanf_float+0x318>
 8007df6:	455e      	cmp	r6, fp
 8007df8:	f67f aee8 	bls.w	8007bcc <_scanf_float+0x80>
 8007dfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e04:	463a      	mov	r2, r7
 8007e06:	4640      	mov	r0, r8
 8007e08:	4798      	blx	r3
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	6123      	str	r3, [r4, #16]
 8007e10:	e7f1      	b.n	8007df6 <_scanf_float+0x2aa>
 8007e12:	9802      	ldr	r0, [sp, #8]
 8007e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007e1c:	9002      	str	r0, [sp, #8]
 8007e1e:	463a      	mov	r2, r7
 8007e20:	4640      	mov	r0, r8
 8007e22:	4798      	blx	r3
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e2e:	fa5f fa8a 	uxtb.w	sl, sl
 8007e32:	f1ba 0f02 	cmp.w	sl, #2
 8007e36:	d1ec      	bne.n	8007e12 <_scanf_float+0x2c6>
 8007e38:	3d03      	subs	r5, #3
 8007e3a:	b2ed      	uxtb	r5, r5
 8007e3c:	1b76      	subs	r6, r6, r5
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	05da      	lsls	r2, r3, #23
 8007e42:	d52f      	bpl.n	8007ea4 <_scanf_float+0x358>
 8007e44:	055b      	lsls	r3, r3, #21
 8007e46:	d510      	bpl.n	8007e6a <_scanf_float+0x31e>
 8007e48:	455e      	cmp	r6, fp
 8007e4a:	f67f aebf 	bls.w	8007bcc <_scanf_float+0x80>
 8007e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e56:	463a      	mov	r2, r7
 8007e58:	4640      	mov	r0, r8
 8007e5a:	4798      	blx	r3
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	6123      	str	r3, [r4, #16]
 8007e62:	e7f1      	b.n	8007e48 <_scanf_float+0x2fc>
 8007e64:	46aa      	mov	sl, r5
 8007e66:	9602      	str	r6, [sp, #8]
 8007e68:	e7df      	b.n	8007e2a <_scanf_float+0x2de>
 8007e6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	2965      	cmp	r1, #101	; 0x65
 8007e72:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e76:	f106 35ff 	add.w	r5, r6, #4294967295
 8007e7a:	6123      	str	r3, [r4, #16]
 8007e7c:	d00c      	beq.n	8007e98 <_scanf_float+0x34c>
 8007e7e:	2945      	cmp	r1, #69	; 0x45
 8007e80:	d00a      	beq.n	8007e98 <_scanf_float+0x34c>
 8007e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e86:	463a      	mov	r2, r7
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4798      	blx	r3
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	1eb5      	subs	r5, r6, #2
 8007e96:	6123      	str	r3, [r4, #16]
 8007e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e9c:	463a      	mov	r2, r7
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	4798      	blx	r3
 8007ea2:	462e      	mov	r6, r5
 8007ea4:	6825      	ldr	r5, [r4, #0]
 8007ea6:	f015 0510 	ands.w	r5, r5, #16
 8007eaa:	d14e      	bne.n	8007f4a <_scanf_float+0x3fe>
 8007eac:	7035      	strb	r5, [r6, #0]
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eb8:	d119      	bne.n	8007eee <_scanf_float+0x3a2>
 8007eba:	9b01      	ldr	r3, [sp, #4]
 8007ebc:	454b      	cmp	r3, r9
 8007ebe:	eba3 0209 	sub.w	r2, r3, r9
 8007ec2:	d121      	bne.n	8007f08 <_scanf_float+0x3bc>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4659      	mov	r1, fp
 8007ec8:	4640      	mov	r0, r8
 8007eca:	f000 fe4b 	bl	8008b64 <_strtod_r>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	f012 0f02 	tst.w	r2, #2
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	d021      	beq.n	8007f1e <_scanf_float+0x3d2>
 8007eda:	9903      	ldr	r1, [sp, #12]
 8007edc:	1d1a      	adds	r2, r3, #4
 8007ede:	600a      	str	r2, [r1, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	ed83 0b00 	vstr	d0, [r3]
 8007ee6:	68e3      	ldr	r3, [r4, #12]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	60e3      	str	r3, [r4, #12]
 8007eec:	e66f      	b.n	8007bce <_scanf_float+0x82>
 8007eee:	9b04      	ldr	r3, [sp, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0e7      	beq.n	8007ec4 <_scanf_float+0x378>
 8007ef4:	9905      	ldr	r1, [sp, #20]
 8007ef6:	230a      	movs	r3, #10
 8007ef8:	462a      	mov	r2, r5
 8007efa:	3101      	adds	r1, #1
 8007efc:	4640      	mov	r0, r8
 8007efe:	f000 feb9 	bl	8008c74 <_strtol_r>
 8007f02:	9b04      	ldr	r3, [sp, #16]
 8007f04:	9e05      	ldr	r6, [sp, #20]
 8007f06:	1ac2      	subs	r2, r0, r3
 8007f08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007f0c:	429e      	cmp	r6, r3
 8007f0e:	bf28      	it	cs
 8007f10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007f14:	490e      	ldr	r1, [pc, #56]	; (8007f50 <_scanf_float+0x404>)
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 f834 	bl	8007f84 <siprintf>
 8007f1c:	e7d2      	b.n	8007ec4 <_scanf_float+0x378>
 8007f1e:	9903      	ldr	r1, [sp, #12]
 8007f20:	f012 0f04 	tst.w	r2, #4
 8007f24:	f103 0204 	add.w	r2, r3, #4
 8007f28:	600a      	str	r2, [r1, #0]
 8007f2a:	d1d9      	bne.n	8007ee0 <_scanf_float+0x394>
 8007f2c:	eeb4 0b40 	vcmp.f64	d0, d0
 8007f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f34:	681e      	ldr	r6, [r3, #0]
 8007f36:	d705      	bvc.n	8007f44 <_scanf_float+0x3f8>
 8007f38:	4806      	ldr	r0, [pc, #24]	; (8007f54 <_scanf_float+0x408>)
 8007f3a:	f000 f81d 	bl	8007f78 <nanf>
 8007f3e:	ed86 0a00 	vstr	s0, [r6]
 8007f42:	e7d0      	b.n	8007ee6 <_scanf_float+0x39a>
 8007f44:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007f48:	e7f9      	b.n	8007f3e <_scanf_float+0x3f2>
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	e63f      	b.n	8007bce <_scanf_float+0x82>
 8007f4e:	bf00      	nop
 8007f50:	0800ba7c 	.word	0x0800ba7c
 8007f54:	0800be88 	.word	0x0800be88

08007f58 <_sbrk_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d06      	ldr	r5, [pc, #24]	; (8007f74 <_sbrk_r+0x1c>)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	f7f9 f9ce 	bl	8001304 <_sbrk>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_sbrk_r+0x1a>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_sbrk_r+0x1a>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	20000474 	.word	0x20000474

08007f78 <nanf>:
 8007f78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f80 <nanf+0x8>
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	7fc00000 	.word	0x7fc00000

08007f84 <siprintf>:
 8007f84:	b40e      	push	{r1, r2, r3}
 8007f86:	b500      	push	{lr}
 8007f88:	b09c      	sub	sp, #112	; 0x70
 8007f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f8c:	9002      	str	r0, [sp, #8]
 8007f8e:	9006      	str	r0, [sp, #24]
 8007f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f94:	4809      	ldr	r0, [pc, #36]	; (8007fbc <siprintf+0x38>)
 8007f96:	9107      	str	r1, [sp, #28]
 8007f98:	9104      	str	r1, [sp, #16]
 8007f9a:	4909      	ldr	r1, [pc, #36]	; (8007fc0 <siprintf+0x3c>)
 8007f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa0:	9105      	str	r1, [sp, #20]
 8007fa2:	6800      	ldr	r0, [r0, #0]
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	a902      	add	r1, sp, #8
 8007fa8:	f002 fd22 	bl	800a9f0 <_svfiprintf_r>
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	b01c      	add	sp, #112	; 0x70
 8007fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb8:	b003      	add	sp, #12
 8007fba:	4770      	bx	lr
 8007fbc:	2000001c 	.word	0x2000001c
 8007fc0:	ffff0208 	.word	0xffff0208

08007fc4 <sulp>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460d      	mov	r5, r1
 8007fca:	4616      	mov	r6, r2
 8007fcc:	ec45 4b10 	vmov	d0, r4, r5
 8007fd0:	f002 fb50 	bl	800a674 <__ulp>
 8007fd4:	b17e      	cbz	r6, 8007ff6 <sulp+0x32>
 8007fd6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dd09      	ble.n	8007ff6 <sulp+0x32>
 8007fe2:	051b      	lsls	r3, r3, #20
 8007fe4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007fee:	ec41 0b17 	vmov	d7, r0, r1
 8007ff2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}

08007ff8 <_strtod_l>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	ed2d 8b0e 	vpush	{d8-d14}
 8008000:	b097      	sub	sp, #92	; 0x5c
 8008002:	461f      	mov	r7, r3
 8008004:	2300      	movs	r3, #0
 8008006:	9312      	str	r3, [sp, #72]	; 0x48
 8008008:	4ba1      	ldr	r3, [pc, #644]	; (8008290 <_strtod_l+0x298>)
 800800a:	920d      	str	r2, [sp, #52]	; 0x34
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	9307      	str	r3, [sp, #28]
 8008010:	4604      	mov	r4, r0
 8008012:	4618      	mov	r0, r3
 8008014:	468b      	mov	fp, r1
 8008016:	f7f8 f913 	bl	8000240 <strlen>
 800801a:	f04f 0800 	mov.w	r8, #0
 800801e:	4605      	mov	r5, r0
 8008020:	f04f 0900 	mov.w	r9, #0
 8008024:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008028:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800802a:	7813      	ldrb	r3, [r2, #0]
 800802c:	2b2b      	cmp	r3, #43	; 0x2b
 800802e:	d04d      	beq.n	80080cc <_strtod_l+0xd4>
 8008030:	d83a      	bhi.n	80080a8 <_strtod_l+0xb0>
 8008032:	2b0d      	cmp	r3, #13
 8008034:	d833      	bhi.n	800809e <_strtod_l+0xa6>
 8008036:	2b08      	cmp	r3, #8
 8008038:	d833      	bhi.n	80080a2 <_strtod_l+0xaa>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d03d      	beq.n	80080ba <_strtod_l+0xc2>
 800803e:	2300      	movs	r3, #0
 8008040:	9308      	str	r3, [sp, #32]
 8008042:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008044:	7833      	ldrb	r3, [r6, #0]
 8008046:	2b30      	cmp	r3, #48	; 0x30
 8008048:	f040 80b0 	bne.w	80081ac <_strtod_l+0x1b4>
 800804c:	7873      	ldrb	r3, [r6, #1]
 800804e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008052:	2b58      	cmp	r3, #88	; 0x58
 8008054:	d167      	bne.n	8008126 <_strtod_l+0x12e>
 8008056:	9b08      	ldr	r3, [sp, #32]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	ab12      	add	r3, sp, #72	; 0x48
 800805c:	9702      	str	r7, [sp, #8]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4a8c      	ldr	r2, [pc, #560]	; (8008294 <_strtod_l+0x29c>)
 8008062:	ab13      	add	r3, sp, #76	; 0x4c
 8008064:	a911      	add	r1, sp, #68	; 0x44
 8008066:	4620      	mov	r0, r4
 8008068:	f001 fc68 	bl	800993c <__gethex>
 800806c:	f010 0507 	ands.w	r5, r0, #7
 8008070:	4607      	mov	r7, r0
 8008072:	d005      	beq.n	8008080 <_strtod_l+0x88>
 8008074:	2d06      	cmp	r5, #6
 8008076:	d12b      	bne.n	80080d0 <_strtod_l+0xd8>
 8008078:	3601      	adds	r6, #1
 800807a:	2300      	movs	r3, #0
 800807c:	9611      	str	r6, [sp, #68]	; 0x44
 800807e:	9308      	str	r3, [sp, #32]
 8008080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008082:	2b00      	cmp	r3, #0
 8008084:	f040 854e 	bne.w	8008b24 <_strtod_l+0xb2c>
 8008088:	9b08      	ldr	r3, [sp, #32]
 800808a:	b1e3      	cbz	r3, 80080c6 <_strtod_l+0xce>
 800808c:	ec49 8b17 	vmov	d7, r8, r9
 8008090:	eeb1 0b47 	vneg.f64	d0, d7
 8008094:	b017      	add	sp, #92	; 0x5c
 8008096:	ecbd 8b0e 	vpop	{d8-d14}
 800809a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800809e:	2b20      	cmp	r3, #32
 80080a0:	d1cd      	bne.n	800803e <_strtod_l+0x46>
 80080a2:	3201      	adds	r2, #1
 80080a4:	9211      	str	r2, [sp, #68]	; 0x44
 80080a6:	e7bf      	b.n	8008028 <_strtod_l+0x30>
 80080a8:	2b2d      	cmp	r3, #45	; 0x2d
 80080aa:	d1c8      	bne.n	800803e <_strtod_l+0x46>
 80080ac:	2301      	movs	r3, #1
 80080ae:	9308      	str	r3, [sp, #32]
 80080b0:	1c53      	adds	r3, r2, #1
 80080b2:	9311      	str	r3, [sp, #68]	; 0x44
 80080b4:	7853      	ldrb	r3, [r2, #1]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1c3      	bne.n	8008042 <_strtod_l+0x4a>
 80080ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f040 852d 	bne.w	8008b20 <_strtod_l+0xb28>
 80080c6:	ec49 8b10 	vmov	d0, r8, r9
 80080ca:	e7e3      	b.n	8008094 <_strtod_l+0x9c>
 80080cc:	2300      	movs	r3, #0
 80080ce:	e7ee      	b.n	80080ae <_strtod_l+0xb6>
 80080d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080d2:	b13a      	cbz	r2, 80080e4 <_strtod_l+0xec>
 80080d4:	2135      	movs	r1, #53	; 0x35
 80080d6:	a814      	add	r0, sp, #80	; 0x50
 80080d8:	f002 fbd4 	bl	800a884 <__copybits>
 80080dc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80080de:	4620      	mov	r0, r4
 80080e0:	f001 ff96 	bl	800a010 <_Bfree>
 80080e4:	3d01      	subs	r5, #1
 80080e6:	2d04      	cmp	r5, #4
 80080e8:	d806      	bhi.n	80080f8 <_strtod_l+0x100>
 80080ea:	e8df f005 	tbb	[pc, r5]
 80080ee:	030a      	.short	0x030a
 80080f0:	1714      	.short	0x1714
 80080f2:	0a          	.byte	0x0a
 80080f3:	00          	.byte	0x00
 80080f4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80080f8:	073f      	lsls	r7, r7, #28
 80080fa:	d5c1      	bpl.n	8008080 <_strtod_l+0x88>
 80080fc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008100:	e7be      	b.n	8008080 <_strtod_l+0x88>
 8008102:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008106:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008108:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800810c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008110:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008114:	e7f0      	b.n	80080f8 <_strtod_l+0x100>
 8008116:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008298 <_strtod_l+0x2a0>
 800811a:	e7ed      	b.n	80080f8 <_strtod_l+0x100>
 800811c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008120:	f04f 38ff 	mov.w	r8, #4294967295
 8008124:	e7e8      	b.n	80080f8 <_strtod_l+0x100>
 8008126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	9211      	str	r2, [sp, #68]	; 0x44
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	2b30      	cmp	r3, #48	; 0x30
 8008130:	d0f9      	beq.n	8008126 <_strtod_l+0x12e>
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0a4      	beq.n	8008080 <_strtod_l+0x88>
 8008136:	2301      	movs	r3, #1
 8008138:	f04f 0a00 	mov.w	sl, #0
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008140:	930a      	str	r3, [sp, #40]	; 0x28
 8008142:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008146:	f8cd a018 	str.w	sl, [sp, #24]
 800814a:	220a      	movs	r2, #10
 800814c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800814e:	7807      	ldrb	r7, [r0, #0]
 8008150:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008154:	b2d9      	uxtb	r1, r3
 8008156:	2909      	cmp	r1, #9
 8008158:	d92a      	bls.n	80081b0 <_strtod_l+0x1b8>
 800815a:	9907      	ldr	r1, [sp, #28]
 800815c:	462a      	mov	r2, r5
 800815e:	f002 fd4f 	bl	800ac00 <strncmp>
 8008162:	2800      	cmp	r0, #0
 8008164:	d033      	beq.n	80081ce <_strtod_l+0x1d6>
 8008166:	2000      	movs	r0, #0
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	463a      	mov	r2, r7
 800816c:	4601      	mov	r1, r0
 800816e:	4607      	mov	r7, r0
 8008170:	2a65      	cmp	r2, #101	; 0x65
 8008172:	d001      	beq.n	8008178 <_strtod_l+0x180>
 8008174:	2a45      	cmp	r2, #69	; 0x45
 8008176:	d117      	bne.n	80081a8 <_strtod_l+0x1b0>
 8008178:	b91b      	cbnz	r3, 8008182 <_strtod_l+0x18a>
 800817a:	9b04      	ldr	r3, [sp, #16]
 800817c:	4303      	orrs	r3, r0
 800817e:	d09c      	beq.n	80080ba <_strtod_l+0xc2>
 8008180:	2300      	movs	r3, #0
 8008182:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008186:	f10b 0201 	add.w	r2, fp, #1
 800818a:	9211      	str	r2, [sp, #68]	; 0x44
 800818c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008190:	2a2b      	cmp	r2, #43	; 0x2b
 8008192:	d071      	beq.n	8008278 <_strtod_l+0x280>
 8008194:	2a2d      	cmp	r2, #45	; 0x2d
 8008196:	d077      	beq.n	8008288 <_strtod_l+0x290>
 8008198:	f04f 0e00 	mov.w	lr, #0
 800819c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80081a0:	2d09      	cmp	r5, #9
 80081a2:	d97f      	bls.n	80082a4 <_strtod_l+0x2ac>
 80081a4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80081a8:	2500      	movs	r5, #0
 80081aa:	e09b      	b.n	80082e4 <_strtod_l+0x2ec>
 80081ac:	2300      	movs	r3, #0
 80081ae:	e7c3      	b.n	8008138 <_strtod_l+0x140>
 80081b0:	9906      	ldr	r1, [sp, #24]
 80081b2:	2908      	cmp	r1, #8
 80081b4:	bfdd      	ittte	le
 80081b6:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80081b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80081bc:	9309      	strle	r3, [sp, #36]	; 0x24
 80081be:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80081c2:	9b06      	ldr	r3, [sp, #24]
 80081c4:	3001      	adds	r0, #1
 80081c6:	3301      	adds	r3, #1
 80081c8:	9306      	str	r3, [sp, #24]
 80081ca:	9011      	str	r0, [sp, #68]	; 0x44
 80081cc:	e7be      	b.n	800814c <_strtod_l+0x154>
 80081ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081d0:	195a      	adds	r2, r3, r5
 80081d2:	9211      	str	r2, [sp, #68]	; 0x44
 80081d4:	5d5a      	ldrb	r2, [r3, r5]
 80081d6:	9b06      	ldr	r3, [sp, #24]
 80081d8:	b3a3      	cbz	r3, 8008244 <_strtod_l+0x24c>
 80081da:	4607      	mov	r7, r0
 80081dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80081e0:	2909      	cmp	r1, #9
 80081e2:	d912      	bls.n	800820a <_strtod_l+0x212>
 80081e4:	2101      	movs	r1, #1
 80081e6:	e7c3      	b.n	8008170 <_strtod_l+0x178>
 80081e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ea:	1c5a      	adds	r2, r3, #1
 80081ec:	9211      	str	r2, [sp, #68]	; 0x44
 80081ee:	785a      	ldrb	r2, [r3, #1]
 80081f0:	3001      	adds	r0, #1
 80081f2:	2a30      	cmp	r2, #48	; 0x30
 80081f4:	d0f8      	beq.n	80081e8 <_strtod_l+0x1f0>
 80081f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80081fa:	2b08      	cmp	r3, #8
 80081fc:	f200 8497 	bhi.w	8008b2e <_strtod_l+0xb36>
 8008200:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008202:	930a      	str	r3, [sp, #40]	; 0x28
 8008204:	4607      	mov	r7, r0
 8008206:	2000      	movs	r0, #0
 8008208:	4603      	mov	r3, r0
 800820a:	3a30      	subs	r2, #48	; 0x30
 800820c:	f100 0101 	add.w	r1, r0, #1
 8008210:	d012      	beq.n	8008238 <_strtod_l+0x240>
 8008212:	440f      	add	r7, r1
 8008214:	eb00 0c03 	add.w	ip, r0, r3
 8008218:	4619      	mov	r1, r3
 800821a:	250a      	movs	r5, #10
 800821c:	4561      	cmp	r1, ip
 800821e:	d113      	bne.n	8008248 <_strtod_l+0x250>
 8008220:	1819      	adds	r1, r3, r0
 8008222:	2908      	cmp	r1, #8
 8008224:	f103 0301 	add.w	r3, r3, #1
 8008228:	4403      	add	r3, r0
 800822a:	dc1c      	bgt.n	8008266 <_strtod_l+0x26e>
 800822c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800822e:	210a      	movs	r1, #10
 8008230:	fb01 2200 	mla	r2, r1, r0, r2
 8008234:	9209      	str	r2, [sp, #36]	; 0x24
 8008236:	2100      	movs	r1, #0
 8008238:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800823a:	1c50      	adds	r0, r2, #1
 800823c:	9011      	str	r0, [sp, #68]	; 0x44
 800823e:	7852      	ldrb	r2, [r2, #1]
 8008240:	4608      	mov	r0, r1
 8008242:	e7cb      	b.n	80081dc <_strtod_l+0x1e4>
 8008244:	9806      	ldr	r0, [sp, #24]
 8008246:	e7d4      	b.n	80081f2 <_strtod_l+0x1fa>
 8008248:	2908      	cmp	r1, #8
 800824a:	dc04      	bgt.n	8008256 <_strtod_l+0x25e>
 800824c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800824e:	436e      	muls	r6, r5
 8008250:	9609      	str	r6, [sp, #36]	; 0x24
 8008252:	3101      	adds	r1, #1
 8008254:	e7e2      	b.n	800821c <_strtod_l+0x224>
 8008256:	f101 0e01 	add.w	lr, r1, #1
 800825a:	f1be 0f10 	cmp.w	lr, #16
 800825e:	bfd8      	it	le
 8008260:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008264:	e7f5      	b.n	8008252 <_strtod_l+0x25a>
 8008266:	2b10      	cmp	r3, #16
 8008268:	bfdc      	itt	le
 800826a:	210a      	movle	r1, #10
 800826c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008270:	e7e1      	b.n	8008236 <_strtod_l+0x23e>
 8008272:	2700      	movs	r7, #0
 8008274:	2101      	movs	r1, #1
 8008276:	e780      	b.n	800817a <_strtod_l+0x182>
 8008278:	f04f 0e00 	mov.w	lr, #0
 800827c:	f10b 0202 	add.w	r2, fp, #2
 8008280:	9211      	str	r2, [sp, #68]	; 0x44
 8008282:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008286:	e789      	b.n	800819c <_strtod_l+0x1a4>
 8008288:	f04f 0e01 	mov.w	lr, #1
 800828c:	e7f6      	b.n	800827c <_strtod_l+0x284>
 800828e:	bf00      	nop
 8008290:	0800bcd0 	.word	0x0800bcd0
 8008294:	0800ba84 	.word	0x0800ba84
 8008298:	7ff00000 	.word	0x7ff00000
 800829c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800829e:	1c55      	adds	r5, r2, #1
 80082a0:	9511      	str	r5, [sp, #68]	; 0x44
 80082a2:	7852      	ldrb	r2, [r2, #1]
 80082a4:	2a30      	cmp	r2, #48	; 0x30
 80082a6:	d0f9      	beq.n	800829c <_strtod_l+0x2a4>
 80082a8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80082ac:	2d08      	cmp	r5, #8
 80082ae:	f63f af7b 	bhi.w	80081a8 <_strtod_l+0x1b0>
 80082b2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80082b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082b8:	9207      	str	r2, [sp, #28]
 80082ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082bc:	1c55      	adds	r5, r2, #1
 80082be:	9511      	str	r5, [sp, #68]	; 0x44
 80082c0:	7852      	ldrb	r2, [r2, #1]
 80082c2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80082c6:	2e09      	cmp	r6, #9
 80082c8:	d937      	bls.n	800833a <_strtod_l+0x342>
 80082ca:	9e07      	ldr	r6, [sp, #28]
 80082cc:	1bad      	subs	r5, r5, r6
 80082ce:	2d08      	cmp	r5, #8
 80082d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80082d4:	dc02      	bgt.n	80082dc <_strtod_l+0x2e4>
 80082d6:	4565      	cmp	r5, ip
 80082d8:	bfa8      	it	ge
 80082da:	4665      	movge	r5, ip
 80082dc:	f1be 0f00 	cmp.w	lr, #0
 80082e0:	d000      	beq.n	80082e4 <_strtod_l+0x2ec>
 80082e2:	426d      	negs	r5, r5
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d14d      	bne.n	8008384 <_strtod_l+0x38c>
 80082e8:	9b04      	ldr	r3, [sp, #16]
 80082ea:	4303      	orrs	r3, r0
 80082ec:	f47f aec8 	bne.w	8008080 <_strtod_l+0x88>
 80082f0:	2900      	cmp	r1, #0
 80082f2:	f47f aee2 	bne.w	80080ba <_strtod_l+0xc2>
 80082f6:	2a69      	cmp	r2, #105	; 0x69
 80082f8:	d027      	beq.n	800834a <_strtod_l+0x352>
 80082fa:	dc24      	bgt.n	8008346 <_strtod_l+0x34e>
 80082fc:	2a49      	cmp	r2, #73	; 0x49
 80082fe:	d024      	beq.n	800834a <_strtod_l+0x352>
 8008300:	2a4e      	cmp	r2, #78	; 0x4e
 8008302:	f47f aeda 	bne.w	80080ba <_strtod_l+0xc2>
 8008306:	4996      	ldr	r1, [pc, #600]	; (8008560 <_strtod_l+0x568>)
 8008308:	a811      	add	r0, sp, #68	; 0x44
 800830a:	f001 fd6f 	bl	8009dec <__match>
 800830e:	2800      	cmp	r0, #0
 8008310:	f43f aed3 	beq.w	80080ba <_strtod_l+0xc2>
 8008314:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b28      	cmp	r3, #40	; 0x28
 800831a:	d12d      	bne.n	8008378 <_strtod_l+0x380>
 800831c:	4991      	ldr	r1, [pc, #580]	; (8008564 <_strtod_l+0x56c>)
 800831e:	aa14      	add	r2, sp, #80	; 0x50
 8008320:	a811      	add	r0, sp, #68	; 0x44
 8008322:	f001 fd77 	bl	8009e14 <__hexnan>
 8008326:	2805      	cmp	r0, #5
 8008328:	d126      	bne.n	8008378 <_strtod_l+0x380>
 800832a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800832c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008330:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008334:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008338:	e6a2      	b.n	8008080 <_strtod_l+0x88>
 800833a:	250a      	movs	r5, #10
 800833c:	fb05 250c 	mla	r5, r5, ip, r2
 8008340:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008344:	e7b9      	b.n	80082ba <_strtod_l+0x2c2>
 8008346:	2a6e      	cmp	r2, #110	; 0x6e
 8008348:	e7db      	b.n	8008302 <_strtod_l+0x30a>
 800834a:	4987      	ldr	r1, [pc, #540]	; (8008568 <_strtod_l+0x570>)
 800834c:	a811      	add	r0, sp, #68	; 0x44
 800834e:	f001 fd4d 	bl	8009dec <__match>
 8008352:	2800      	cmp	r0, #0
 8008354:	f43f aeb1 	beq.w	80080ba <_strtod_l+0xc2>
 8008358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800835a:	4984      	ldr	r1, [pc, #528]	; (800856c <_strtod_l+0x574>)
 800835c:	3b01      	subs	r3, #1
 800835e:	a811      	add	r0, sp, #68	; 0x44
 8008360:	9311      	str	r3, [sp, #68]	; 0x44
 8008362:	f001 fd43 	bl	8009dec <__match>
 8008366:	b910      	cbnz	r0, 800836e <_strtod_l+0x376>
 8008368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800836a:	3301      	adds	r3, #1
 800836c:	9311      	str	r3, [sp, #68]	; 0x44
 800836e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008580 <_strtod_l+0x588>
 8008372:	f04f 0800 	mov.w	r8, #0
 8008376:	e683      	b.n	8008080 <_strtod_l+0x88>
 8008378:	487d      	ldr	r0, [pc, #500]	; (8008570 <_strtod_l+0x578>)
 800837a:	f002 fc39 	bl	800abf0 <nan>
 800837e:	ec59 8b10 	vmov	r8, r9, d0
 8008382:	e67d      	b.n	8008080 <_strtod_l+0x88>
 8008384:	1bea      	subs	r2, r5, r7
 8008386:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800838a:	9207      	str	r2, [sp, #28]
 800838c:	9a06      	ldr	r2, [sp, #24]
 800838e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008392:	2a00      	cmp	r2, #0
 8008394:	bf08      	it	eq
 8008396:	461a      	moveq	r2, r3
 8008398:	2b10      	cmp	r3, #16
 800839a:	9206      	str	r2, [sp, #24]
 800839c:	461a      	mov	r2, r3
 800839e:	bfa8      	it	ge
 80083a0:	2210      	movge	r2, #16
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	ec59 8b17 	vmov	r8, r9, d7
 80083a8:	dd0c      	ble.n	80083c4 <_strtod_l+0x3cc>
 80083aa:	4972      	ldr	r1, [pc, #456]	; (8008574 <_strtod_l+0x57c>)
 80083ac:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80083b0:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80083b4:	ee06 aa90 	vmov	s13, sl
 80083b8:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80083bc:	eea7 6b05 	vfma.f64	d6, d7, d5
 80083c0:	ec59 8b16 	vmov	r8, r9, d6
 80083c4:	2b0f      	cmp	r3, #15
 80083c6:	dc36      	bgt.n	8008436 <_strtod_l+0x43e>
 80083c8:	9907      	ldr	r1, [sp, #28]
 80083ca:	2900      	cmp	r1, #0
 80083cc:	f43f ae58 	beq.w	8008080 <_strtod_l+0x88>
 80083d0:	dd23      	ble.n	800841a <_strtod_l+0x422>
 80083d2:	2916      	cmp	r1, #22
 80083d4:	dc0b      	bgt.n	80083ee <_strtod_l+0x3f6>
 80083d6:	4b67      	ldr	r3, [pc, #412]	; (8008574 <_strtod_l+0x57c>)
 80083d8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80083dc:	ed93 7b00 	vldr	d7, [r3]
 80083e0:	ec49 8b16 	vmov	d6, r8, r9
 80083e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083e8:	ec59 8b17 	vmov	r8, r9, d7
 80083ec:	e648      	b.n	8008080 <_strtod_l+0x88>
 80083ee:	9807      	ldr	r0, [sp, #28]
 80083f0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80083f4:	4281      	cmp	r1, r0
 80083f6:	db1e      	blt.n	8008436 <_strtod_l+0x43e>
 80083f8:	4a5e      	ldr	r2, [pc, #376]	; (8008574 <_strtod_l+0x57c>)
 80083fa:	f1c3 030f 	rsb	r3, r3, #15
 80083fe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008402:	ed91 7b00 	vldr	d7, [r1]
 8008406:	ec49 8b16 	vmov	d6, r8, r9
 800840a:	1ac3      	subs	r3, r0, r3
 800840c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008410:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008414:	ed92 6b00 	vldr	d6, [r2]
 8008418:	e7e4      	b.n	80083e4 <_strtod_l+0x3ec>
 800841a:	9907      	ldr	r1, [sp, #28]
 800841c:	3116      	adds	r1, #22
 800841e:	db0a      	blt.n	8008436 <_strtod_l+0x43e>
 8008420:	4b54      	ldr	r3, [pc, #336]	; (8008574 <_strtod_l+0x57c>)
 8008422:	1b7d      	subs	r5, r7, r5
 8008424:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008428:	ed95 7b00 	vldr	d7, [r5]
 800842c:	ec49 8b16 	vmov	d6, r8, r9
 8008430:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008434:	e7d8      	b.n	80083e8 <_strtod_l+0x3f0>
 8008436:	9907      	ldr	r1, [sp, #28]
 8008438:	1a9a      	subs	r2, r3, r2
 800843a:	440a      	add	r2, r1
 800843c:	2a00      	cmp	r2, #0
 800843e:	dd6f      	ble.n	8008520 <_strtod_l+0x528>
 8008440:	f012 000f 	ands.w	r0, r2, #15
 8008444:	d00a      	beq.n	800845c <_strtod_l+0x464>
 8008446:	494b      	ldr	r1, [pc, #300]	; (8008574 <_strtod_l+0x57c>)
 8008448:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800844c:	ed91 7b00 	vldr	d7, [r1]
 8008450:	ec49 8b16 	vmov	d6, r8, r9
 8008454:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008458:	ec59 8b17 	vmov	r8, r9, d7
 800845c:	f032 020f 	bics.w	r2, r2, #15
 8008460:	d04f      	beq.n	8008502 <_strtod_l+0x50a>
 8008462:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008466:	dd22      	ble.n	80084ae <_strtod_l+0x4b6>
 8008468:	2500      	movs	r5, #0
 800846a:	462e      	mov	r6, r5
 800846c:	9506      	str	r5, [sp, #24]
 800846e:	462f      	mov	r7, r5
 8008470:	2322      	movs	r3, #34	; 0x22
 8008472:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008580 <_strtod_l+0x588>
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	f04f 0800 	mov.w	r8, #0
 800847c:	9b06      	ldr	r3, [sp, #24]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f43f adfe 	beq.w	8008080 <_strtod_l+0x88>
 8008484:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008486:	4620      	mov	r0, r4
 8008488:	f001 fdc2 	bl	800a010 <_Bfree>
 800848c:	4639      	mov	r1, r7
 800848e:	4620      	mov	r0, r4
 8008490:	f001 fdbe 	bl	800a010 <_Bfree>
 8008494:	4631      	mov	r1, r6
 8008496:	4620      	mov	r0, r4
 8008498:	f001 fdba 	bl	800a010 <_Bfree>
 800849c:	9906      	ldr	r1, [sp, #24]
 800849e:	4620      	mov	r0, r4
 80084a0:	f001 fdb6 	bl	800a010 <_Bfree>
 80084a4:	4629      	mov	r1, r5
 80084a6:	4620      	mov	r0, r4
 80084a8:	f001 fdb2 	bl	800a010 <_Bfree>
 80084ac:	e5e8      	b.n	8008080 <_strtod_l+0x88>
 80084ae:	2000      	movs	r0, #0
 80084b0:	ec49 8b17 	vmov	d7, r8, r9
 80084b4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008578 <_strtod_l+0x580>
 80084b8:	1112      	asrs	r2, r2, #4
 80084ba:	4601      	mov	r1, r0
 80084bc:	2a01      	cmp	r2, #1
 80084be:	dc23      	bgt.n	8008508 <_strtod_l+0x510>
 80084c0:	b108      	cbz	r0, 80084c6 <_strtod_l+0x4ce>
 80084c2:	ec59 8b17 	vmov	r8, r9, d7
 80084c6:	4a2c      	ldr	r2, [pc, #176]	; (8008578 <_strtod_l+0x580>)
 80084c8:	482c      	ldr	r0, [pc, #176]	; (800857c <_strtod_l+0x584>)
 80084ca:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80084ce:	ed92 7b00 	vldr	d7, [r2]
 80084d2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80084d6:	ec49 8b16 	vmov	d6, r8, r9
 80084da:	4a29      	ldr	r2, [pc, #164]	; (8008580 <_strtod_l+0x588>)
 80084dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80084e0:	ee17 1a90 	vmov	r1, s15
 80084e4:	400a      	ands	r2, r1
 80084e6:	4282      	cmp	r2, r0
 80084e8:	ec59 8b17 	vmov	r8, r9, d7
 80084ec:	d8bc      	bhi.n	8008468 <_strtod_l+0x470>
 80084ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80084f2:	4282      	cmp	r2, r0
 80084f4:	bf86      	itte	hi
 80084f6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008584 <_strtod_l+0x58c>
 80084fa:	f04f 38ff 	movhi.w	r8, #4294967295
 80084fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008502:	2200      	movs	r2, #0
 8008504:	9204      	str	r2, [sp, #16]
 8008506:	e078      	b.n	80085fa <_strtod_l+0x602>
 8008508:	07d6      	lsls	r6, r2, #31
 800850a:	d504      	bpl.n	8008516 <_strtod_l+0x51e>
 800850c:	ed9c 6b00 	vldr	d6, [ip]
 8008510:	2001      	movs	r0, #1
 8008512:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008516:	3101      	adds	r1, #1
 8008518:	1052      	asrs	r2, r2, #1
 800851a:	f10c 0c08 	add.w	ip, ip, #8
 800851e:	e7cd      	b.n	80084bc <_strtod_l+0x4c4>
 8008520:	d0ef      	beq.n	8008502 <_strtod_l+0x50a>
 8008522:	4252      	negs	r2, r2
 8008524:	f012 000f 	ands.w	r0, r2, #15
 8008528:	d00a      	beq.n	8008540 <_strtod_l+0x548>
 800852a:	4912      	ldr	r1, [pc, #72]	; (8008574 <_strtod_l+0x57c>)
 800852c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008530:	ed91 7b00 	vldr	d7, [r1]
 8008534:	ec49 8b16 	vmov	d6, r8, r9
 8008538:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800853c:	ec59 8b17 	vmov	r8, r9, d7
 8008540:	1112      	asrs	r2, r2, #4
 8008542:	d0de      	beq.n	8008502 <_strtod_l+0x50a>
 8008544:	2a1f      	cmp	r2, #31
 8008546:	dd1f      	ble.n	8008588 <_strtod_l+0x590>
 8008548:	2500      	movs	r5, #0
 800854a:	462e      	mov	r6, r5
 800854c:	9506      	str	r5, [sp, #24]
 800854e:	462f      	mov	r7, r5
 8008550:	2322      	movs	r3, #34	; 0x22
 8008552:	f04f 0800 	mov.w	r8, #0
 8008556:	f04f 0900 	mov.w	r9, #0
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	e78e      	b.n	800847c <_strtod_l+0x484>
 800855e:	bf00      	nop
 8008560:	0800ba55 	.word	0x0800ba55
 8008564:	0800ba98 	.word	0x0800ba98
 8008568:	0800ba4d 	.word	0x0800ba4d
 800856c:	0800bbdc 	.word	0x0800bbdc
 8008570:	0800be88 	.word	0x0800be88
 8008574:	0800bd68 	.word	0x0800bd68
 8008578:	0800bd40 	.word	0x0800bd40
 800857c:	7ca00000 	.word	0x7ca00000
 8008580:	7ff00000 	.word	0x7ff00000
 8008584:	7fefffff 	.word	0x7fefffff
 8008588:	f012 0110 	ands.w	r1, r2, #16
 800858c:	bf18      	it	ne
 800858e:	216a      	movne	r1, #106	; 0x6a
 8008590:	9104      	str	r1, [sp, #16]
 8008592:	ec49 8b17 	vmov	d7, r8, r9
 8008596:	49be      	ldr	r1, [pc, #760]	; (8008890 <_strtod_l+0x898>)
 8008598:	2000      	movs	r0, #0
 800859a:	07d6      	lsls	r6, r2, #31
 800859c:	d504      	bpl.n	80085a8 <_strtod_l+0x5b0>
 800859e:	ed91 6b00 	vldr	d6, [r1]
 80085a2:	2001      	movs	r0, #1
 80085a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80085a8:	1052      	asrs	r2, r2, #1
 80085aa:	f101 0108 	add.w	r1, r1, #8
 80085ae:	d1f4      	bne.n	800859a <_strtod_l+0x5a2>
 80085b0:	b108      	cbz	r0, 80085b6 <_strtod_l+0x5be>
 80085b2:	ec59 8b17 	vmov	r8, r9, d7
 80085b6:	9a04      	ldr	r2, [sp, #16]
 80085b8:	b1c2      	cbz	r2, 80085ec <_strtod_l+0x5f4>
 80085ba:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80085be:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80085c2:	2a00      	cmp	r2, #0
 80085c4:	4648      	mov	r0, r9
 80085c6:	dd11      	ble.n	80085ec <_strtod_l+0x5f4>
 80085c8:	2a1f      	cmp	r2, #31
 80085ca:	f340 812e 	ble.w	800882a <_strtod_l+0x832>
 80085ce:	2a34      	cmp	r2, #52	; 0x34
 80085d0:	bfde      	ittt	le
 80085d2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80085d6:	f04f 32ff 	movle.w	r2, #4294967295
 80085da:	fa02 f101 	lslle.w	r1, r2, r1
 80085de:	f04f 0800 	mov.w	r8, #0
 80085e2:	bfcc      	ite	gt
 80085e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80085e8:	ea01 0900 	andle.w	r9, r1, r0
 80085ec:	ec49 8b17 	vmov	d7, r8, r9
 80085f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80085f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f8:	d0a6      	beq.n	8008548 <_strtod_l+0x550>
 80085fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085fc:	9200      	str	r2, [sp, #0]
 80085fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008600:	9a06      	ldr	r2, [sp, #24]
 8008602:	4620      	mov	r0, r4
 8008604:	f001 fd6c 	bl	800a0e0 <__s2b>
 8008608:	9006      	str	r0, [sp, #24]
 800860a:	2800      	cmp	r0, #0
 800860c:	f43f af2c 	beq.w	8008468 <_strtod_l+0x470>
 8008610:	9b07      	ldr	r3, [sp, #28]
 8008612:	1b7d      	subs	r5, r7, r5
 8008614:	2b00      	cmp	r3, #0
 8008616:	bfb4      	ite	lt
 8008618:	462b      	movlt	r3, r5
 800861a:	2300      	movge	r3, #0
 800861c:	9309      	str	r3, [sp, #36]	; 0x24
 800861e:	9b07      	ldr	r3, [sp, #28]
 8008620:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008870 <_strtod_l+0x878>
 8008624:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008878 <_strtod_l+0x880>
 8008628:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008880 <_strtod_l+0x888>
 800862c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008630:	2500      	movs	r5, #0
 8008632:	930c      	str	r3, [sp, #48]	; 0x30
 8008634:	462e      	mov	r6, r5
 8008636:	9b06      	ldr	r3, [sp, #24]
 8008638:	4620      	mov	r0, r4
 800863a:	6859      	ldr	r1, [r3, #4]
 800863c:	f001 fca8 	bl	8009f90 <_Balloc>
 8008640:	4607      	mov	r7, r0
 8008642:	2800      	cmp	r0, #0
 8008644:	f43f af14 	beq.w	8008470 <_strtod_l+0x478>
 8008648:	9b06      	ldr	r3, [sp, #24]
 800864a:	691a      	ldr	r2, [r3, #16]
 800864c:	3202      	adds	r2, #2
 800864e:	f103 010c 	add.w	r1, r3, #12
 8008652:	0092      	lsls	r2, r2, #2
 8008654:	300c      	adds	r0, #12
 8008656:	f7fe fd3f 	bl	80070d8 <memcpy>
 800865a:	ec49 8b10 	vmov	d0, r8, r9
 800865e:	aa14      	add	r2, sp, #80	; 0x50
 8008660:	a913      	add	r1, sp, #76	; 0x4c
 8008662:	4620      	mov	r0, r4
 8008664:	f002 f882 	bl	800a76c <__d2b>
 8008668:	ec49 8b18 	vmov	d8, r8, r9
 800866c:	9012      	str	r0, [sp, #72]	; 0x48
 800866e:	2800      	cmp	r0, #0
 8008670:	f43f aefe 	beq.w	8008470 <_strtod_l+0x478>
 8008674:	2101      	movs	r1, #1
 8008676:	4620      	mov	r0, r4
 8008678:	f001 fdcc 	bl	800a214 <__i2b>
 800867c:	4606      	mov	r6, r0
 800867e:	2800      	cmp	r0, #0
 8008680:	f43f aef6 	beq.w	8008470 <_strtod_l+0x478>
 8008684:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008686:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008688:	2b00      	cmp	r3, #0
 800868a:	bfab      	itete	ge
 800868c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800868e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008690:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008694:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008698:	bfac      	ite	ge
 800869a:	eb03 0b02 	addge.w	fp, r3, r2
 800869e:	eba2 0a03 	sublt.w	sl, r2, r3
 80086a2:	9a04      	ldr	r2, [sp, #16]
 80086a4:	1a9b      	subs	r3, r3, r2
 80086a6:	440b      	add	r3, r1
 80086a8:	4a7a      	ldr	r2, [pc, #488]	; (8008894 <_strtod_l+0x89c>)
 80086aa:	3b01      	subs	r3, #1
 80086ac:	4293      	cmp	r3, r2
 80086ae:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80086b2:	f280 80cd 	bge.w	8008850 <_strtod_l+0x858>
 80086b6:	1ad2      	subs	r2, r2, r3
 80086b8:	2a1f      	cmp	r2, #31
 80086ba:	eba1 0102 	sub.w	r1, r1, r2
 80086be:	f04f 0001 	mov.w	r0, #1
 80086c2:	f300 80b9 	bgt.w	8008838 <_strtod_l+0x840>
 80086c6:	fa00 f302 	lsl.w	r3, r0, r2
 80086ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80086cc:	2300      	movs	r3, #0
 80086ce:	930a      	str	r3, [sp, #40]	; 0x28
 80086d0:	eb0b 0301 	add.w	r3, fp, r1
 80086d4:	9a04      	ldr	r2, [sp, #16]
 80086d6:	459b      	cmp	fp, r3
 80086d8:	448a      	add	sl, r1
 80086da:	4492      	add	sl, r2
 80086dc:	465a      	mov	r2, fp
 80086de:	bfa8      	it	ge
 80086e0:	461a      	movge	r2, r3
 80086e2:	4552      	cmp	r2, sl
 80086e4:	bfa8      	it	ge
 80086e6:	4652      	movge	r2, sl
 80086e8:	2a00      	cmp	r2, #0
 80086ea:	bfc2      	ittt	gt
 80086ec:	1a9b      	subgt	r3, r3, r2
 80086ee:	ebaa 0a02 	subgt.w	sl, sl, r2
 80086f2:	ebab 0b02 	subgt.w	fp, fp, r2
 80086f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	dd18      	ble.n	800872e <_strtod_l+0x736>
 80086fc:	4631      	mov	r1, r6
 80086fe:	4620      	mov	r0, r4
 8008700:	930f      	str	r3, [sp, #60]	; 0x3c
 8008702:	f001 fe47 	bl	800a394 <__pow5mult>
 8008706:	4606      	mov	r6, r0
 8008708:	2800      	cmp	r0, #0
 800870a:	f43f aeb1 	beq.w	8008470 <_strtod_l+0x478>
 800870e:	4601      	mov	r1, r0
 8008710:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008712:	4620      	mov	r0, r4
 8008714:	f001 fd94 	bl	800a240 <__multiply>
 8008718:	900e      	str	r0, [sp, #56]	; 0x38
 800871a:	2800      	cmp	r0, #0
 800871c:	f43f aea8 	beq.w	8008470 <_strtod_l+0x478>
 8008720:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008722:	4620      	mov	r0, r4
 8008724:	f001 fc74 	bl	800a010 <_Bfree>
 8008728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800872a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800872c:	9212      	str	r2, [sp, #72]	; 0x48
 800872e:	2b00      	cmp	r3, #0
 8008730:	f300 8093 	bgt.w	800885a <_strtod_l+0x862>
 8008734:	9b07      	ldr	r3, [sp, #28]
 8008736:	2b00      	cmp	r3, #0
 8008738:	dd08      	ble.n	800874c <_strtod_l+0x754>
 800873a:	4639      	mov	r1, r7
 800873c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800873e:	4620      	mov	r0, r4
 8008740:	f001 fe28 	bl	800a394 <__pow5mult>
 8008744:	4607      	mov	r7, r0
 8008746:	2800      	cmp	r0, #0
 8008748:	f43f ae92 	beq.w	8008470 <_strtod_l+0x478>
 800874c:	f1ba 0f00 	cmp.w	sl, #0
 8008750:	dd08      	ble.n	8008764 <_strtod_l+0x76c>
 8008752:	4639      	mov	r1, r7
 8008754:	4652      	mov	r2, sl
 8008756:	4620      	mov	r0, r4
 8008758:	f001 fe76 	bl	800a448 <__lshift>
 800875c:	4607      	mov	r7, r0
 800875e:	2800      	cmp	r0, #0
 8008760:	f43f ae86 	beq.w	8008470 <_strtod_l+0x478>
 8008764:	f1bb 0f00 	cmp.w	fp, #0
 8008768:	dd08      	ble.n	800877c <_strtod_l+0x784>
 800876a:	4631      	mov	r1, r6
 800876c:	465a      	mov	r2, fp
 800876e:	4620      	mov	r0, r4
 8008770:	f001 fe6a 	bl	800a448 <__lshift>
 8008774:	4606      	mov	r6, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f ae7a 	beq.w	8008470 <_strtod_l+0x478>
 800877c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800877e:	463a      	mov	r2, r7
 8008780:	4620      	mov	r0, r4
 8008782:	f001 feed 	bl	800a560 <__mdiff>
 8008786:	4605      	mov	r5, r0
 8008788:	2800      	cmp	r0, #0
 800878a:	f43f ae71 	beq.w	8008470 <_strtod_l+0x478>
 800878e:	2300      	movs	r3, #0
 8008790:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008794:	60c3      	str	r3, [r0, #12]
 8008796:	4631      	mov	r1, r6
 8008798:	f001 fec6 	bl	800a528 <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	da7d      	bge.n	800889c <_strtod_l+0x8a4>
 80087a0:	ea5a 0308 	orrs.w	r3, sl, r8
 80087a4:	f040 80a3 	bne.w	80088ee <_strtod_l+0x8f6>
 80087a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f040 809e 	bne.w	80088ee <_strtod_l+0x8f6>
 80087b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80087b6:	0d1b      	lsrs	r3, r3, #20
 80087b8:	051b      	lsls	r3, r3, #20
 80087ba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80087be:	f240 8096 	bls.w	80088ee <_strtod_l+0x8f6>
 80087c2:	696b      	ldr	r3, [r5, #20]
 80087c4:	b91b      	cbnz	r3, 80087ce <_strtod_l+0x7d6>
 80087c6:	692b      	ldr	r3, [r5, #16]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	f340 8090 	ble.w	80088ee <_strtod_l+0x8f6>
 80087ce:	4629      	mov	r1, r5
 80087d0:	2201      	movs	r2, #1
 80087d2:	4620      	mov	r0, r4
 80087d4:	f001 fe38 	bl	800a448 <__lshift>
 80087d8:	4631      	mov	r1, r6
 80087da:	4605      	mov	r5, r0
 80087dc:	f001 fea4 	bl	800a528 <__mcmp>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	f340 8084 	ble.w	80088ee <_strtod_l+0x8f6>
 80087e6:	9904      	ldr	r1, [sp, #16]
 80087e8:	4a2b      	ldr	r2, [pc, #172]	; (8008898 <_strtod_l+0x8a0>)
 80087ea:	464b      	mov	r3, r9
 80087ec:	2900      	cmp	r1, #0
 80087ee:	f000 809d 	beq.w	800892c <_strtod_l+0x934>
 80087f2:	ea02 0109 	and.w	r1, r2, r9
 80087f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80087fa:	f300 8097 	bgt.w	800892c <_strtod_l+0x934>
 80087fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008802:	f77f aea5 	ble.w	8008550 <_strtod_l+0x558>
 8008806:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008888 <_strtod_l+0x890>
 800880a:	ec49 8b16 	vmov	d6, r8, r9
 800880e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008812:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008816:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	bf08      	it	eq
 800881e:	2322      	moveq	r3, #34	; 0x22
 8008820:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008824:	bf08      	it	eq
 8008826:	6023      	streq	r3, [r4, #0]
 8008828:	e62c      	b.n	8008484 <_strtod_l+0x48c>
 800882a:	f04f 31ff 	mov.w	r1, #4294967295
 800882e:	fa01 f202 	lsl.w	r2, r1, r2
 8008832:	ea02 0808 	and.w	r8, r2, r8
 8008836:	e6d9      	b.n	80085ec <_strtod_l+0x5f4>
 8008838:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800883c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008840:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008844:	33e2      	adds	r3, #226	; 0xe2
 8008846:	fa00 f303 	lsl.w	r3, r0, r3
 800884a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800884e:	e73f      	b.n	80086d0 <_strtod_l+0x6d8>
 8008850:	2200      	movs	r2, #0
 8008852:	2301      	movs	r3, #1
 8008854:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008858:	e73a      	b.n	80086d0 <_strtod_l+0x6d8>
 800885a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800885c:	461a      	mov	r2, r3
 800885e:	4620      	mov	r0, r4
 8008860:	f001 fdf2 	bl	800a448 <__lshift>
 8008864:	9012      	str	r0, [sp, #72]	; 0x48
 8008866:	2800      	cmp	r0, #0
 8008868:	f47f af64 	bne.w	8008734 <_strtod_l+0x73c>
 800886c:	e600      	b.n	8008470 <_strtod_l+0x478>
 800886e:	bf00      	nop
 8008870:	94a03595 	.word	0x94a03595
 8008874:	3fcfffff 	.word	0x3fcfffff
 8008878:	94a03595 	.word	0x94a03595
 800887c:	3fdfffff 	.word	0x3fdfffff
 8008880:	35afe535 	.word	0x35afe535
 8008884:	3fe00000 	.word	0x3fe00000
 8008888:	00000000 	.word	0x00000000
 800888c:	39500000 	.word	0x39500000
 8008890:	0800bab0 	.word	0x0800bab0
 8008894:	fffffc02 	.word	0xfffffc02
 8008898:	7ff00000 	.word	0x7ff00000
 800889c:	46cb      	mov	fp, r9
 800889e:	d15f      	bne.n	8008960 <_strtod_l+0x968>
 80088a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088a4:	f1ba 0f00 	cmp.w	sl, #0
 80088a8:	d02a      	beq.n	8008900 <_strtod_l+0x908>
 80088aa:	4aa7      	ldr	r2, [pc, #668]	; (8008b48 <_strtod_l+0xb50>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d12b      	bne.n	8008908 <_strtod_l+0x910>
 80088b0:	9b04      	ldr	r3, [sp, #16]
 80088b2:	4642      	mov	r2, r8
 80088b4:	b1fb      	cbz	r3, 80088f6 <_strtod_l+0x8fe>
 80088b6:	4ba5      	ldr	r3, [pc, #660]	; (8008b4c <_strtod_l+0xb54>)
 80088b8:	ea09 0303 	and.w	r3, r9, r3
 80088bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80088c0:	f04f 31ff 	mov.w	r1, #4294967295
 80088c4:	d81a      	bhi.n	80088fc <_strtod_l+0x904>
 80088c6:	0d1b      	lsrs	r3, r3, #20
 80088c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80088cc:	fa01 f303 	lsl.w	r3, r1, r3
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d119      	bne.n	8008908 <_strtod_l+0x910>
 80088d4:	4b9e      	ldr	r3, [pc, #632]	; (8008b50 <_strtod_l+0xb58>)
 80088d6:	459b      	cmp	fp, r3
 80088d8:	d102      	bne.n	80088e0 <_strtod_l+0x8e8>
 80088da:	3201      	adds	r2, #1
 80088dc:	f43f adc8 	beq.w	8008470 <_strtod_l+0x478>
 80088e0:	4b9a      	ldr	r3, [pc, #616]	; (8008b4c <_strtod_l+0xb54>)
 80088e2:	ea0b 0303 	and.w	r3, fp, r3
 80088e6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80088ea:	f04f 0800 	mov.w	r8, #0
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d188      	bne.n	8008806 <_strtod_l+0x80e>
 80088f4:	e5c6      	b.n	8008484 <_strtod_l+0x48c>
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	e7e9      	b.n	80088d0 <_strtod_l+0x8d8>
 80088fc:	460b      	mov	r3, r1
 80088fe:	e7e7      	b.n	80088d0 <_strtod_l+0x8d8>
 8008900:	ea53 0308 	orrs.w	r3, r3, r8
 8008904:	f43f af6f 	beq.w	80087e6 <_strtod_l+0x7ee>
 8008908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890a:	b1cb      	cbz	r3, 8008940 <_strtod_l+0x948>
 800890c:	ea13 0f0b 	tst.w	r3, fp
 8008910:	d0ed      	beq.n	80088ee <_strtod_l+0x8f6>
 8008912:	9a04      	ldr	r2, [sp, #16]
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	f1ba 0f00 	cmp.w	sl, #0
 800891c:	d014      	beq.n	8008948 <_strtod_l+0x950>
 800891e:	f7ff fb51 	bl	8007fc4 <sulp>
 8008922:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008926:	ec59 8b17 	vmov	r8, r9, d7
 800892a:	e7e0      	b.n	80088ee <_strtod_l+0x8f6>
 800892c:	4013      	ands	r3, r2
 800892e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008932:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008936:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800893a:	f04f 38ff 	mov.w	r8, #4294967295
 800893e:	e7d6      	b.n	80088ee <_strtod_l+0x8f6>
 8008940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008942:	ea13 0f08 	tst.w	r3, r8
 8008946:	e7e3      	b.n	8008910 <_strtod_l+0x918>
 8008948:	f7ff fb3c 	bl	8007fc4 <sulp>
 800894c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008950:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008958:	ec59 8b10 	vmov	r8, r9, d0
 800895c:	d1c7      	bne.n	80088ee <_strtod_l+0x8f6>
 800895e:	e5f7      	b.n	8008550 <_strtod_l+0x558>
 8008960:	4631      	mov	r1, r6
 8008962:	4628      	mov	r0, r5
 8008964:	f001 ff5e 	bl	800a824 <__ratio>
 8008968:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800896c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008974:	d865      	bhi.n	8008a42 <_strtod_l+0xa4a>
 8008976:	f1ba 0f00 	cmp.w	sl, #0
 800897a:	d042      	beq.n	8008a02 <_strtod_l+0xa0a>
 800897c:	4b75      	ldr	r3, [pc, #468]	; (8008b54 <_strtod_l+0xb5c>)
 800897e:	2200      	movs	r2, #0
 8008980:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008984:	4871      	ldr	r0, [pc, #452]	; (8008b4c <_strtod_l+0xb54>)
 8008986:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008b60 <_strtod_l+0xb68>
 800898a:	ea0b 0100 	and.w	r1, fp, r0
 800898e:	4561      	cmp	r1, ip
 8008990:	f040 808e 	bne.w	8008ab0 <_strtod_l+0xab8>
 8008994:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008998:	ec49 8b10 	vmov	d0, r8, r9
 800899c:	ec43 2b1c 	vmov	d12, r2, r3
 80089a0:	910a      	str	r1, [sp, #40]	; 0x28
 80089a2:	f001 fe67 	bl	800a674 <__ulp>
 80089a6:	ec49 8b1e 	vmov	d14, r8, r9
 80089aa:	4868      	ldr	r0, [pc, #416]	; (8008b4c <_strtod_l+0xb54>)
 80089ac:	eeac eb00 	vfma.f64	d14, d12, d0
 80089b0:	ee1e 3a90 	vmov	r3, s29
 80089b4:	4a68      	ldr	r2, [pc, #416]	; (8008b58 <_strtod_l+0xb60>)
 80089b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089b8:	4018      	ands	r0, r3
 80089ba:	4290      	cmp	r0, r2
 80089bc:	ec59 8b1e 	vmov	r8, r9, d14
 80089c0:	d94e      	bls.n	8008a60 <_strtod_l+0xa68>
 80089c2:	ee18 3a90 	vmov	r3, s17
 80089c6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d104      	bne.n	80089d8 <_strtod_l+0x9e0>
 80089ce:	ee18 3a10 	vmov	r3, s16
 80089d2:	3301      	adds	r3, #1
 80089d4:	f43f ad4c 	beq.w	8008470 <_strtod_l+0x478>
 80089d8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8008b50 <_strtod_l+0xb58>
 80089dc:	f04f 38ff 	mov.w	r8, #4294967295
 80089e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80089e2:	4620      	mov	r0, r4
 80089e4:	f001 fb14 	bl	800a010 <_Bfree>
 80089e8:	4639      	mov	r1, r7
 80089ea:	4620      	mov	r0, r4
 80089ec:	f001 fb10 	bl	800a010 <_Bfree>
 80089f0:	4631      	mov	r1, r6
 80089f2:	4620      	mov	r0, r4
 80089f4:	f001 fb0c 	bl	800a010 <_Bfree>
 80089f8:	4629      	mov	r1, r5
 80089fa:	4620      	mov	r0, r4
 80089fc:	f001 fb08 	bl	800a010 <_Bfree>
 8008a00:	e619      	b.n	8008636 <_strtod_l+0x63e>
 8008a02:	f1b8 0f00 	cmp.w	r8, #0
 8008a06:	d112      	bne.n	8008a2e <_strtod_l+0xa36>
 8008a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a0c:	b9b3      	cbnz	r3, 8008a3c <_strtod_l+0xa44>
 8008a0e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008a12:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008a1e:	bf58      	it	pl
 8008a20:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8008a24:	eeb1 7b4d 	vneg.f64	d7, d13
 8008a28:	ec53 2b17 	vmov	r2, r3, d7
 8008a2c:	e7aa      	b.n	8008984 <_strtod_l+0x98c>
 8008a2e:	f1b8 0f01 	cmp.w	r8, #1
 8008a32:	d103      	bne.n	8008a3c <_strtod_l+0xa44>
 8008a34:	f1b9 0f00 	cmp.w	r9, #0
 8008a38:	f43f ad8a 	beq.w	8008550 <_strtod_l+0x558>
 8008a3c:	4b47      	ldr	r3, [pc, #284]	; (8008b5c <_strtod_l+0xb64>)
 8008a3e:	2200      	movs	r2, #0
 8008a40:	e79e      	b.n	8008980 <_strtod_l+0x988>
 8008a42:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008a46:	ee20 db0d 	vmul.f64	d13, d0, d13
 8008a4a:	f1ba 0f00 	cmp.w	sl, #0
 8008a4e:	d104      	bne.n	8008a5a <_strtod_l+0xa62>
 8008a50:	eeb1 7b4d 	vneg.f64	d7, d13
 8008a54:	ec53 2b17 	vmov	r2, r3, d7
 8008a58:	e794      	b.n	8008984 <_strtod_l+0x98c>
 8008a5a:	eeb0 7b4d 	vmov.f64	d7, d13
 8008a5e:	e7f9      	b.n	8008a54 <_strtod_l+0xa5c>
 8008a60:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1ba      	bne.n	80089e0 <_strtod_l+0x9e8>
 8008a6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a6e:	0d1b      	lsrs	r3, r3, #20
 8008a70:	051b      	lsls	r3, r3, #20
 8008a72:	4299      	cmp	r1, r3
 8008a74:	d1b4      	bne.n	80089e0 <_strtod_l+0x9e8>
 8008a76:	ec51 0b1d 	vmov	r0, r1, d13
 8008a7a:	f7f7 fe0d 	bl	8000698 <__aeabi_d2lz>
 8008a7e:	f7f7 fdc5 	bl	800060c <__aeabi_l2d>
 8008a82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a86:	ec41 0b17 	vmov	d7, r0, r1
 8008a8a:	ea43 0308 	orr.w	r3, r3, r8
 8008a8e:	ea53 030a 	orrs.w	r3, r3, sl
 8008a92:	ee3d db47 	vsub.f64	d13, d13, d7
 8008a96:	d03c      	beq.n	8008b12 <_strtod_l+0xb1a>
 8008a98:	eeb4 dbca 	vcmpe.f64	d13, d10
 8008a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aa0:	f53f acf0 	bmi.w	8008484 <_strtod_l+0x48c>
 8008aa4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8008aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aac:	dd98      	ble.n	80089e0 <_strtod_l+0x9e8>
 8008aae:	e4e9      	b.n	8008484 <_strtod_l+0x48c>
 8008ab0:	9804      	ldr	r0, [sp, #16]
 8008ab2:	b1f0      	cbz	r0, 8008af2 <_strtod_l+0xafa>
 8008ab4:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008ab8:	d81b      	bhi.n	8008af2 <_strtod_l+0xafa>
 8008aba:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008b40 <_strtod_l+0xb48>
 8008abe:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac6:	d811      	bhi.n	8008aec <_strtod_l+0xaf4>
 8008ac8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8008acc:	ee1d 3a10 	vmov	r3, s26
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	bf38      	it	cc
 8008ad4:	2301      	movcc	r3, #1
 8008ad6:	ee0d 3a10 	vmov	s26, r3
 8008ada:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8008ade:	f1ba 0f00 	cmp.w	sl, #0
 8008ae2:	d113      	bne.n	8008b0c <_strtod_l+0xb14>
 8008ae4:	eeb1 7b4d 	vneg.f64	d7, d13
 8008ae8:	ec53 2b17 	vmov	r2, r3, d7
 8008aec:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008af0:	1a43      	subs	r3, r0, r1
 8008af2:	eeb0 0b48 	vmov.f64	d0, d8
 8008af6:	ec43 2b1c 	vmov	d12, r2, r3
 8008afa:	910a      	str	r1, [sp, #40]	; 0x28
 8008afc:	f001 fdba 	bl	800a674 <__ulp>
 8008b00:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b02:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008b06:	ec59 8b18 	vmov	r8, r9, d8
 8008b0a:	e7ab      	b.n	8008a64 <_strtod_l+0xa6c>
 8008b0c:	eeb0 7b4d 	vmov.f64	d7, d13
 8008b10:	e7ea      	b.n	8008ae8 <_strtod_l+0xaf0>
 8008b12:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1a:	f57f af61 	bpl.w	80089e0 <_strtod_l+0x9e8>
 8008b1e:	e4b1      	b.n	8008484 <_strtod_l+0x48c>
 8008b20:	2300      	movs	r3, #0
 8008b22:	9308      	str	r3, [sp, #32]
 8008b24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b28:	6013      	str	r3, [r2, #0]
 8008b2a:	f7ff baad 	b.w	8008088 <_strtod_l+0x90>
 8008b2e:	2a65      	cmp	r2, #101	; 0x65
 8008b30:	f43f ab9f 	beq.w	8008272 <_strtod_l+0x27a>
 8008b34:	2a45      	cmp	r2, #69	; 0x45
 8008b36:	f43f ab9c 	beq.w	8008272 <_strtod_l+0x27a>
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	f7ff bbd4 	b.w	80082e8 <_strtod_l+0x2f0>
 8008b40:	ffc00000 	.word	0xffc00000
 8008b44:	41dfffff 	.word	0x41dfffff
 8008b48:	000fffff 	.word	0x000fffff
 8008b4c:	7ff00000 	.word	0x7ff00000
 8008b50:	7fefffff 	.word	0x7fefffff
 8008b54:	3ff00000 	.word	0x3ff00000
 8008b58:	7c9fffff 	.word	0x7c9fffff
 8008b5c:	bff00000 	.word	0xbff00000
 8008b60:	7fe00000 	.word	0x7fe00000

08008b64 <_strtod_r>:
 8008b64:	4b01      	ldr	r3, [pc, #4]	; (8008b6c <_strtod_r+0x8>)
 8008b66:	f7ff ba47 	b.w	8007ff8 <_strtod_l>
 8008b6a:	bf00      	nop
 8008b6c:	20000084 	.word	0x20000084

08008b70 <_strtol_l.constprop.0>:
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b76:	d001      	beq.n	8008b7c <_strtol_l.constprop.0+0xc>
 8008b78:	2b24      	cmp	r3, #36	; 0x24
 8008b7a:	d906      	bls.n	8008b8a <_strtol_l.constprop.0+0x1a>
 8008b7c:	f7fe fa7a 	bl	8007074 <__errno>
 8008b80:	2316      	movs	r3, #22
 8008b82:	6003      	str	r3, [r0, #0]
 8008b84:	2000      	movs	r0, #0
 8008b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c70 <_strtol_l.constprop.0+0x100>
 8008b8e:	460d      	mov	r5, r1
 8008b90:	462e      	mov	r6, r5
 8008b92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b96:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008b9a:	f017 0708 	ands.w	r7, r7, #8
 8008b9e:	d1f7      	bne.n	8008b90 <_strtol_l.constprop.0+0x20>
 8008ba0:	2c2d      	cmp	r4, #45	; 0x2d
 8008ba2:	d132      	bne.n	8008c0a <_strtol_l.constprop.0+0x9a>
 8008ba4:	782c      	ldrb	r4, [r5, #0]
 8008ba6:	2701      	movs	r7, #1
 8008ba8:	1cb5      	adds	r5, r6, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d05b      	beq.n	8008c66 <_strtol_l.constprop.0+0xf6>
 8008bae:	2b10      	cmp	r3, #16
 8008bb0:	d109      	bne.n	8008bc6 <_strtol_l.constprop.0+0x56>
 8008bb2:	2c30      	cmp	r4, #48	; 0x30
 8008bb4:	d107      	bne.n	8008bc6 <_strtol_l.constprop.0+0x56>
 8008bb6:	782c      	ldrb	r4, [r5, #0]
 8008bb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bbc:	2c58      	cmp	r4, #88	; 0x58
 8008bbe:	d14d      	bne.n	8008c5c <_strtol_l.constprop.0+0xec>
 8008bc0:	786c      	ldrb	r4, [r5, #1]
 8008bc2:	2310      	movs	r3, #16
 8008bc4:	3502      	adds	r5, #2
 8008bc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008bca:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bce:	f04f 0c00 	mov.w	ip, #0
 8008bd2:	fbb8 f9f3 	udiv	r9, r8, r3
 8008bd6:	4666      	mov	r6, ip
 8008bd8:	fb03 8a19 	mls	sl, r3, r9, r8
 8008bdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008be0:	f1be 0f09 	cmp.w	lr, #9
 8008be4:	d816      	bhi.n	8008c14 <_strtol_l.constprop.0+0xa4>
 8008be6:	4674      	mov	r4, lr
 8008be8:	42a3      	cmp	r3, r4
 8008bea:	dd24      	ble.n	8008c36 <_strtol_l.constprop.0+0xc6>
 8008bec:	f1bc 0f00 	cmp.w	ip, #0
 8008bf0:	db1e      	blt.n	8008c30 <_strtol_l.constprop.0+0xc0>
 8008bf2:	45b1      	cmp	r9, r6
 8008bf4:	d31c      	bcc.n	8008c30 <_strtol_l.constprop.0+0xc0>
 8008bf6:	d101      	bne.n	8008bfc <_strtol_l.constprop.0+0x8c>
 8008bf8:	45a2      	cmp	sl, r4
 8008bfa:	db19      	blt.n	8008c30 <_strtol_l.constprop.0+0xc0>
 8008bfc:	fb06 4603 	mla	r6, r6, r3, r4
 8008c00:	f04f 0c01 	mov.w	ip, #1
 8008c04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c08:	e7e8      	b.n	8008bdc <_strtol_l.constprop.0+0x6c>
 8008c0a:	2c2b      	cmp	r4, #43	; 0x2b
 8008c0c:	bf04      	itt	eq
 8008c0e:	782c      	ldrbeq	r4, [r5, #0]
 8008c10:	1cb5      	addeq	r5, r6, #2
 8008c12:	e7ca      	b.n	8008baa <_strtol_l.constprop.0+0x3a>
 8008c14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c18:	f1be 0f19 	cmp.w	lr, #25
 8008c1c:	d801      	bhi.n	8008c22 <_strtol_l.constprop.0+0xb2>
 8008c1e:	3c37      	subs	r4, #55	; 0x37
 8008c20:	e7e2      	b.n	8008be8 <_strtol_l.constprop.0+0x78>
 8008c22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c26:	f1be 0f19 	cmp.w	lr, #25
 8008c2a:	d804      	bhi.n	8008c36 <_strtol_l.constprop.0+0xc6>
 8008c2c:	3c57      	subs	r4, #87	; 0x57
 8008c2e:	e7db      	b.n	8008be8 <_strtol_l.constprop.0+0x78>
 8008c30:	f04f 3cff 	mov.w	ip, #4294967295
 8008c34:	e7e6      	b.n	8008c04 <_strtol_l.constprop.0+0x94>
 8008c36:	f1bc 0f00 	cmp.w	ip, #0
 8008c3a:	da05      	bge.n	8008c48 <_strtol_l.constprop.0+0xd8>
 8008c3c:	2322      	movs	r3, #34	; 0x22
 8008c3e:	6003      	str	r3, [r0, #0]
 8008c40:	4646      	mov	r6, r8
 8008c42:	b942      	cbnz	r2, 8008c56 <_strtol_l.constprop.0+0xe6>
 8008c44:	4630      	mov	r0, r6
 8008c46:	e79e      	b.n	8008b86 <_strtol_l.constprop.0+0x16>
 8008c48:	b107      	cbz	r7, 8008c4c <_strtol_l.constprop.0+0xdc>
 8008c4a:	4276      	negs	r6, r6
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	d0f9      	beq.n	8008c44 <_strtol_l.constprop.0+0xd4>
 8008c50:	f1bc 0f00 	cmp.w	ip, #0
 8008c54:	d000      	beq.n	8008c58 <_strtol_l.constprop.0+0xe8>
 8008c56:	1e69      	subs	r1, r5, #1
 8008c58:	6011      	str	r1, [r2, #0]
 8008c5a:	e7f3      	b.n	8008c44 <_strtol_l.constprop.0+0xd4>
 8008c5c:	2430      	movs	r4, #48	; 0x30
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1b1      	bne.n	8008bc6 <_strtol_l.constprop.0+0x56>
 8008c62:	2308      	movs	r3, #8
 8008c64:	e7af      	b.n	8008bc6 <_strtol_l.constprop.0+0x56>
 8008c66:	2c30      	cmp	r4, #48	; 0x30
 8008c68:	d0a5      	beq.n	8008bb6 <_strtol_l.constprop.0+0x46>
 8008c6a:	230a      	movs	r3, #10
 8008c6c:	e7ab      	b.n	8008bc6 <_strtol_l.constprop.0+0x56>
 8008c6e:	bf00      	nop
 8008c70:	0800bad9 	.word	0x0800bad9

08008c74 <_strtol_r>:
 8008c74:	f7ff bf7c 	b.w	8008b70 <_strtol_l.constprop.0>

08008c78 <quorem>:
 8008c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c7c:	6903      	ldr	r3, [r0, #16]
 8008c7e:	690c      	ldr	r4, [r1, #16]
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	4607      	mov	r7, r0
 8008c84:	f2c0 8081 	blt.w	8008d8a <quorem+0x112>
 8008c88:	3c01      	subs	r4, #1
 8008c8a:	f101 0814 	add.w	r8, r1, #20
 8008c8e:	f100 0514 	add.w	r5, r0, #20
 8008c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ca8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cac:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cb0:	d331      	bcc.n	8008d16 <quorem+0x9e>
 8008cb2:	f04f 0e00 	mov.w	lr, #0
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	46ac      	mov	ip, r5
 8008cba:	46f2      	mov	sl, lr
 8008cbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cc0:	b293      	uxth	r3, r2
 8008cc2:	fb06 e303 	mla	r3, r6, r3, lr
 8008cc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	ebaa 0303 	sub.w	r3, sl, r3
 8008cd0:	f8dc a000 	ldr.w	sl, [ip]
 8008cd4:	0c12      	lsrs	r2, r2, #16
 8008cd6:	fa13 f38a 	uxtah	r3, r3, sl
 8008cda:	fb06 e202 	mla	r2, r6, r2, lr
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	9b00      	ldr	r3, [sp, #0]
 8008ce2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ce6:	b292      	uxth	r2, r2
 8008ce8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008cec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cf0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008cf4:	4581      	cmp	r9, r0
 8008cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cfa:	f84c 3b04 	str.w	r3, [ip], #4
 8008cfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d02:	d2db      	bcs.n	8008cbc <quorem+0x44>
 8008d04:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d08:	b92b      	cbnz	r3, 8008d16 <quorem+0x9e>
 8008d0a:	9b01      	ldr	r3, [sp, #4]
 8008d0c:	3b04      	subs	r3, #4
 8008d0e:	429d      	cmp	r5, r3
 8008d10:	461a      	mov	r2, r3
 8008d12:	d32e      	bcc.n	8008d72 <quorem+0xfa>
 8008d14:	613c      	str	r4, [r7, #16]
 8008d16:	4638      	mov	r0, r7
 8008d18:	f001 fc06 	bl	800a528 <__mcmp>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	db24      	blt.n	8008d6a <quorem+0xf2>
 8008d20:	3601      	adds	r6, #1
 8008d22:	4628      	mov	r0, r5
 8008d24:	f04f 0c00 	mov.w	ip, #0
 8008d28:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d2c:	f8d0 e000 	ldr.w	lr, [r0]
 8008d30:	b293      	uxth	r3, r2
 8008d32:	ebac 0303 	sub.w	r3, ip, r3
 8008d36:	0c12      	lsrs	r2, r2, #16
 8008d38:	fa13 f38e 	uxtah	r3, r3, lr
 8008d3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d4a:	45c1      	cmp	r9, r8
 8008d4c:	f840 3b04 	str.w	r3, [r0], #4
 8008d50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d54:	d2e8      	bcs.n	8008d28 <quorem+0xb0>
 8008d56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d5e:	b922      	cbnz	r2, 8008d6a <quorem+0xf2>
 8008d60:	3b04      	subs	r3, #4
 8008d62:	429d      	cmp	r5, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	d30a      	bcc.n	8008d7e <quorem+0x106>
 8008d68:	613c      	str	r4, [r7, #16]
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	b003      	add	sp, #12
 8008d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d72:	6812      	ldr	r2, [r2, #0]
 8008d74:	3b04      	subs	r3, #4
 8008d76:	2a00      	cmp	r2, #0
 8008d78:	d1cc      	bne.n	8008d14 <quorem+0x9c>
 8008d7a:	3c01      	subs	r4, #1
 8008d7c:	e7c7      	b.n	8008d0e <quorem+0x96>
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	3b04      	subs	r3, #4
 8008d82:	2a00      	cmp	r2, #0
 8008d84:	d1f0      	bne.n	8008d68 <quorem+0xf0>
 8008d86:	3c01      	subs	r4, #1
 8008d88:	e7eb      	b.n	8008d62 <quorem+0xea>
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	e7ee      	b.n	8008d6c <quorem+0xf4>
	...

08008d90 <_dtoa_r>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	ed2d 8b02 	vpush	{d8}
 8008d98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d9a:	b091      	sub	sp, #68	; 0x44
 8008d9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008da0:	ec59 8b10 	vmov	r8, r9, d0
 8008da4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008da6:	9106      	str	r1, [sp, #24]
 8008da8:	4606      	mov	r6, r0
 8008daa:	9208      	str	r2, [sp, #32]
 8008dac:	930c      	str	r3, [sp, #48]	; 0x30
 8008dae:	b975      	cbnz	r5, 8008dce <_dtoa_r+0x3e>
 8008db0:	2010      	movs	r0, #16
 8008db2:	f7fe f989 	bl	80070c8 <malloc>
 8008db6:	4602      	mov	r2, r0
 8008db8:	6270      	str	r0, [r6, #36]	; 0x24
 8008dba:	b920      	cbnz	r0, 8008dc6 <_dtoa_r+0x36>
 8008dbc:	4baa      	ldr	r3, [pc, #680]	; (8009068 <_dtoa_r+0x2d8>)
 8008dbe:	21ea      	movs	r1, #234	; 0xea
 8008dc0:	48aa      	ldr	r0, [pc, #680]	; (800906c <_dtoa_r+0x2dc>)
 8008dc2:	f001 ff3f 	bl	800ac44 <__assert_func>
 8008dc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008dca:	6005      	str	r5, [r0, #0]
 8008dcc:	60c5      	str	r5, [r0, #12]
 8008dce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dd0:	6819      	ldr	r1, [r3, #0]
 8008dd2:	b151      	cbz	r1, 8008dea <_dtoa_r+0x5a>
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	604a      	str	r2, [r1, #4]
 8008dd8:	2301      	movs	r3, #1
 8008dda:	4093      	lsls	r3, r2
 8008ddc:	608b      	str	r3, [r1, #8]
 8008dde:	4630      	mov	r0, r6
 8008de0:	f001 f916 	bl	800a010 <_Bfree>
 8008de4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	f1b9 0300 	subs.w	r3, r9, #0
 8008dee:	bfbb      	ittet	lt
 8008df0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008df4:	9303      	strlt	r3, [sp, #12]
 8008df6:	2300      	movge	r3, #0
 8008df8:	2201      	movlt	r2, #1
 8008dfa:	bfac      	ite	ge
 8008dfc:	6023      	strge	r3, [r4, #0]
 8008dfe:	6022      	strlt	r2, [r4, #0]
 8008e00:	4b9b      	ldr	r3, [pc, #620]	; (8009070 <_dtoa_r+0x2e0>)
 8008e02:	9c03      	ldr	r4, [sp, #12]
 8008e04:	43a3      	bics	r3, r4
 8008e06:	d11c      	bne.n	8008e42 <_dtoa_r+0xb2>
 8008e08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e0a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e0e:	6013      	str	r3, [r2, #0]
 8008e10:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008e14:	ea53 0308 	orrs.w	r3, r3, r8
 8008e18:	f000 84fd 	beq.w	8009816 <_dtoa_r+0xa86>
 8008e1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e1e:	b963      	cbnz	r3, 8008e3a <_dtoa_r+0xaa>
 8008e20:	4b94      	ldr	r3, [pc, #592]	; (8009074 <_dtoa_r+0x2e4>)
 8008e22:	e01f      	b.n	8008e64 <_dtoa_r+0xd4>
 8008e24:	4b94      	ldr	r3, [pc, #592]	; (8009078 <_dtoa_r+0x2e8>)
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	9801      	ldr	r0, [sp, #4]
 8008e30:	b011      	add	sp, #68	; 0x44
 8008e32:	ecbd 8b02 	vpop	{d8}
 8008e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e3a:	4b8e      	ldr	r3, [pc, #568]	; (8009074 <_dtoa_r+0x2e4>)
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	3303      	adds	r3, #3
 8008e40:	e7f3      	b.n	8008e2a <_dtoa_r+0x9a>
 8008e42:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008e46:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4e:	d10b      	bne.n	8008e68 <_dtoa_r+0xd8>
 8008e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e52:	2301      	movs	r3, #1
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 84d9 	beq.w	8009810 <_dtoa_r+0xa80>
 8008e5e:	4887      	ldr	r0, [pc, #540]	; (800907c <_dtoa_r+0x2ec>)
 8008e60:	6018      	str	r0, [r3, #0]
 8008e62:	1e43      	subs	r3, r0, #1
 8008e64:	9301      	str	r3, [sp, #4]
 8008e66:	e7e2      	b.n	8008e2e <_dtoa_r+0x9e>
 8008e68:	a90f      	add	r1, sp, #60	; 0x3c
 8008e6a:	aa0e      	add	r2, sp, #56	; 0x38
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	eeb0 0b48 	vmov.f64	d0, d8
 8008e72:	f001 fc7b 	bl	800a76c <__d2b>
 8008e76:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008e7a:	4605      	mov	r5, r0
 8008e7c:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d046      	beq.n	8008f10 <_dtoa_r+0x180>
 8008e82:	ee18 4a90 	vmov	r4, s17
 8008e86:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008e8a:	ec53 2b18 	vmov	r2, r3, d8
 8008e8e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008e92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e96:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008e9a:	2400      	movs	r4, #0
 8008e9c:	ec43 2b16 	vmov	d6, r2, r3
 8008ea0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008ea4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009050 <_dtoa_r+0x2c0>
 8008ea8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008eac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009058 <_dtoa_r+0x2c8>
 8008eb0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008eb4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009060 <_dtoa_r+0x2d0>
 8008eb8:	ee07 1a90 	vmov	s15, r1
 8008ebc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008ec0:	eeb0 7b46 	vmov.f64	d7, d6
 8008ec4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008ec8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008ecc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed4:	ee16 ba90 	vmov	fp, s13
 8008ed8:	940a      	str	r4, [sp, #40]	; 0x28
 8008eda:	d508      	bpl.n	8008eee <_dtoa_r+0x15e>
 8008edc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008ee0:	eeb4 6b47 	vcmp.f64	d6, d7
 8008ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee8:	bf18      	it	ne
 8008eea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008eee:	f1bb 0f16 	cmp.w	fp, #22
 8008ef2:	d82f      	bhi.n	8008f54 <_dtoa_r+0x1c4>
 8008ef4:	4b62      	ldr	r3, [pc, #392]	; (8009080 <_dtoa_r+0x2f0>)
 8008ef6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008efa:	ed93 7b00 	vldr	d7, [r3]
 8008efe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f06:	d501      	bpl.n	8008f0c <_dtoa_r+0x17c>
 8008f08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e022      	b.n	8008f56 <_dtoa_r+0x1c6>
 8008f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008f12:	4401      	add	r1, r0
 8008f14:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008f18:	2b20      	cmp	r3, #32
 8008f1a:	bfc1      	itttt	gt
 8008f1c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f20:	fa04 f303 	lslgt.w	r3, r4, r3
 8008f24:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008f28:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008f2c:	bfd6      	itet	le
 8008f2e:	f1c3 0320 	rsble	r3, r3, #32
 8008f32:	ea43 0808 	orrgt.w	r8, r3, r8
 8008f36:	fa08 f803 	lslle.w	r8, r8, r3
 8008f3a:	ee07 8a90 	vmov	s15, r8
 8008f3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008f42:	3901      	subs	r1, #1
 8008f44:	ee17 4a90 	vmov	r4, s15
 8008f48:	ec53 2b17 	vmov	r2, r3, d7
 8008f4c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008f50:	2401      	movs	r4, #1
 8008f52:	e7a3      	b.n	8008e9c <_dtoa_r+0x10c>
 8008f54:	2301      	movs	r3, #1
 8008f56:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f58:	1a43      	subs	r3, r0, r1
 8008f5a:	1e5a      	subs	r2, r3, #1
 8008f5c:	bf45      	ittet	mi
 8008f5e:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f62:	9304      	strmi	r3, [sp, #16]
 8008f64:	2300      	movpl	r3, #0
 8008f66:	2300      	movmi	r3, #0
 8008f68:	9205      	str	r2, [sp, #20]
 8008f6a:	bf54      	ite	pl
 8008f6c:	9304      	strpl	r3, [sp, #16]
 8008f6e:	9305      	strmi	r3, [sp, #20]
 8008f70:	f1bb 0f00 	cmp.w	fp, #0
 8008f74:	db18      	blt.n	8008fa8 <_dtoa_r+0x218>
 8008f76:	9b05      	ldr	r3, [sp, #20]
 8008f78:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008f7c:	445b      	add	r3, fp
 8008f7e:	9305      	str	r3, [sp, #20]
 8008f80:	2300      	movs	r3, #0
 8008f82:	9a06      	ldr	r2, [sp, #24]
 8008f84:	2a09      	cmp	r2, #9
 8008f86:	d849      	bhi.n	800901c <_dtoa_r+0x28c>
 8008f88:	2a05      	cmp	r2, #5
 8008f8a:	bfc4      	itt	gt
 8008f8c:	3a04      	subgt	r2, #4
 8008f8e:	9206      	strgt	r2, [sp, #24]
 8008f90:	9a06      	ldr	r2, [sp, #24]
 8008f92:	f1a2 0202 	sub.w	r2, r2, #2
 8008f96:	bfcc      	ite	gt
 8008f98:	2400      	movgt	r4, #0
 8008f9a:	2401      	movle	r4, #1
 8008f9c:	2a03      	cmp	r2, #3
 8008f9e:	d848      	bhi.n	8009032 <_dtoa_r+0x2a2>
 8008fa0:	e8df f002 	tbb	[pc, r2]
 8008fa4:	3a2c2e0b 	.word	0x3a2c2e0b
 8008fa8:	9b04      	ldr	r3, [sp, #16]
 8008faa:	2200      	movs	r2, #0
 8008fac:	eba3 030b 	sub.w	r3, r3, fp
 8008fb0:	9304      	str	r3, [sp, #16]
 8008fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8008fb4:	f1cb 0300 	rsb	r3, fp, #0
 8008fb8:	e7e3      	b.n	8008f82 <_dtoa_r+0x1f2>
 8008fba:	2200      	movs	r2, #0
 8008fbc:	9207      	str	r2, [sp, #28]
 8008fbe:	9a08      	ldr	r2, [sp, #32]
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	dc39      	bgt.n	8009038 <_dtoa_r+0x2a8>
 8008fc4:	f04f 0a01 	mov.w	sl, #1
 8008fc8:	46d1      	mov	r9, sl
 8008fca:	4652      	mov	r2, sl
 8008fcc:	f8cd a020 	str.w	sl, [sp, #32]
 8008fd0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	6079      	str	r1, [r7, #4]
 8008fd6:	2004      	movs	r0, #4
 8008fd8:	f100 0c14 	add.w	ip, r0, #20
 8008fdc:	4594      	cmp	ip, r2
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	d92f      	bls.n	8009042 <_dtoa_r+0x2b2>
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	930d      	str	r3, [sp, #52]	; 0x34
 8008fe6:	f000 ffd3 	bl	8009f90 <_Balloc>
 8008fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fec:	9001      	str	r0, [sp, #4]
 8008fee:	4602      	mov	r2, r0
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d149      	bne.n	8009088 <_dtoa_r+0x2f8>
 8008ff4:	4b23      	ldr	r3, [pc, #140]	; (8009084 <_dtoa_r+0x2f4>)
 8008ff6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ffa:	e6e1      	b.n	8008dc0 <_dtoa_r+0x30>
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	e7dd      	b.n	8008fbc <_dtoa_r+0x22c>
 8009000:	2200      	movs	r2, #0
 8009002:	9207      	str	r2, [sp, #28]
 8009004:	9a08      	ldr	r2, [sp, #32]
 8009006:	eb0b 0a02 	add.w	sl, fp, r2
 800900a:	f10a 0901 	add.w	r9, sl, #1
 800900e:	464a      	mov	r2, r9
 8009010:	2a01      	cmp	r2, #1
 8009012:	bfb8      	it	lt
 8009014:	2201      	movlt	r2, #1
 8009016:	e7db      	b.n	8008fd0 <_dtoa_r+0x240>
 8009018:	2201      	movs	r2, #1
 800901a:	e7f2      	b.n	8009002 <_dtoa_r+0x272>
 800901c:	2401      	movs	r4, #1
 800901e:	2200      	movs	r2, #0
 8009020:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009024:	f04f 3aff 	mov.w	sl, #4294967295
 8009028:	2100      	movs	r1, #0
 800902a:	46d1      	mov	r9, sl
 800902c:	2212      	movs	r2, #18
 800902e:	9108      	str	r1, [sp, #32]
 8009030:	e7ce      	b.n	8008fd0 <_dtoa_r+0x240>
 8009032:	2201      	movs	r2, #1
 8009034:	9207      	str	r2, [sp, #28]
 8009036:	e7f5      	b.n	8009024 <_dtoa_r+0x294>
 8009038:	f8dd a020 	ldr.w	sl, [sp, #32]
 800903c:	46d1      	mov	r9, sl
 800903e:	4652      	mov	r2, sl
 8009040:	e7c6      	b.n	8008fd0 <_dtoa_r+0x240>
 8009042:	3101      	adds	r1, #1
 8009044:	6079      	str	r1, [r7, #4]
 8009046:	0040      	lsls	r0, r0, #1
 8009048:	e7c6      	b.n	8008fd8 <_dtoa_r+0x248>
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w
 8009050:	636f4361 	.word	0x636f4361
 8009054:	3fd287a7 	.word	0x3fd287a7
 8009058:	8b60c8b3 	.word	0x8b60c8b3
 800905c:	3fc68a28 	.word	0x3fc68a28
 8009060:	509f79fb 	.word	0x509f79fb
 8009064:	3fd34413 	.word	0x3fd34413
 8009068:	0800bbe6 	.word	0x0800bbe6
 800906c:	0800bbfd 	.word	0x0800bbfd
 8009070:	7ff00000 	.word	0x7ff00000
 8009074:	0800bbe2 	.word	0x0800bbe2
 8009078:	0800bbd9 	.word	0x0800bbd9
 800907c:	0800ba59 	.word	0x0800ba59
 8009080:	0800bd68 	.word	0x0800bd68
 8009084:	0800bc58 	.word	0x0800bc58
 8009088:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800908a:	9901      	ldr	r1, [sp, #4]
 800908c:	6011      	str	r1, [r2, #0]
 800908e:	f1b9 0f0e 	cmp.w	r9, #14
 8009092:	d86c      	bhi.n	800916e <_dtoa_r+0x3de>
 8009094:	2c00      	cmp	r4, #0
 8009096:	d06a      	beq.n	800916e <_dtoa_r+0x3de>
 8009098:	f1bb 0f00 	cmp.w	fp, #0
 800909c:	f340 80a0 	ble.w	80091e0 <_dtoa_r+0x450>
 80090a0:	49c1      	ldr	r1, [pc, #772]	; (80093a8 <_dtoa_r+0x618>)
 80090a2:	f00b 020f 	and.w	r2, fp, #15
 80090a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80090aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80090ae:	ed92 7b00 	vldr	d7, [r2]
 80090b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80090b6:	f000 8087 	beq.w	80091c8 <_dtoa_r+0x438>
 80090ba:	4abc      	ldr	r2, [pc, #752]	; (80093ac <_dtoa_r+0x61c>)
 80090bc:	ed92 6b08 	vldr	d6, [r2, #32]
 80090c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80090c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80090c8:	f001 010f 	and.w	r1, r1, #15
 80090cc:	2203      	movs	r2, #3
 80090ce:	48b7      	ldr	r0, [pc, #732]	; (80093ac <_dtoa_r+0x61c>)
 80090d0:	2900      	cmp	r1, #0
 80090d2:	d17b      	bne.n	80091cc <_dtoa_r+0x43c>
 80090d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80090d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80090dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80090e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090e2:	2900      	cmp	r1, #0
 80090e4:	f000 80a2 	beq.w	800922c <_dtoa_r+0x49c>
 80090e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80090ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80090f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f8:	f140 8098 	bpl.w	800922c <_dtoa_r+0x49c>
 80090fc:	f1b9 0f00 	cmp.w	r9, #0
 8009100:	f000 8094 	beq.w	800922c <_dtoa_r+0x49c>
 8009104:	f1ba 0f00 	cmp.w	sl, #0
 8009108:	dd2f      	ble.n	800916a <_dtoa_r+0x3da>
 800910a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800910e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009112:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009116:	f10b 37ff 	add.w	r7, fp, #4294967295
 800911a:	3201      	adds	r2, #1
 800911c:	4650      	mov	r0, sl
 800911e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009122:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009126:	ee07 2a90 	vmov	s15, r2
 800912a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800912e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009132:	ee15 4a90 	vmov	r4, s11
 8009136:	ec52 1b15 	vmov	r1, r2, d5
 800913a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800913e:	2800      	cmp	r0, #0
 8009140:	d177      	bne.n	8009232 <_dtoa_r+0x4a2>
 8009142:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009146:	ee36 6b47 	vsub.f64	d6, d6, d7
 800914a:	ec42 1b17 	vmov	d7, r1, r2
 800914e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009156:	f300 8263 	bgt.w	8009620 <_dtoa_r+0x890>
 800915a:	eeb1 7b47 	vneg.f64	d7, d7
 800915e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009166:	f100 8258 	bmi.w	800961a <_dtoa_r+0x88a>
 800916a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800916e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009170:	2a00      	cmp	r2, #0
 8009172:	f2c0 811d 	blt.w	80093b0 <_dtoa_r+0x620>
 8009176:	f1bb 0f0e 	cmp.w	fp, #14
 800917a:	f300 8119 	bgt.w	80093b0 <_dtoa_r+0x620>
 800917e:	4b8a      	ldr	r3, [pc, #552]	; (80093a8 <_dtoa_r+0x618>)
 8009180:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009184:	ed93 6b00 	vldr	d6, [r3]
 8009188:	9b08      	ldr	r3, [sp, #32]
 800918a:	2b00      	cmp	r3, #0
 800918c:	f280 80b7 	bge.w	80092fe <_dtoa_r+0x56e>
 8009190:	f1b9 0f00 	cmp.w	r9, #0
 8009194:	f300 80b3 	bgt.w	80092fe <_dtoa_r+0x56e>
 8009198:	f040 823f 	bne.w	800961a <_dtoa_r+0x88a>
 800919c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80091a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80091a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	464c      	mov	r4, r9
 80091b2:	464f      	mov	r7, r9
 80091b4:	f280 8215 	bge.w	80095e2 <_dtoa_r+0x852>
 80091b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80091bc:	2331      	movs	r3, #49	; 0x31
 80091be:	f808 3b01 	strb.w	r3, [r8], #1
 80091c2:	f10b 0b01 	add.w	fp, fp, #1
 80091c6:	e211      	b.n	80095ec <_dtoa_r+0x85c>
 80091c8:	2202      	movs	r2, #2
 80091ca:	e780      	b.n	80090ce <_dtoa_r+0x33e>
 80091cc:	07cc      	lsls	r4, r1, #31
 80091ce:	d504      	bpl.n	80091da <_dtoa_r+0x44a>
 80091d0:	ed90 6b00 	vldr	d6, [r0]
 80091d4:	3201      	adds	r2, #1
 80091d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091da:	1049      	asrs	r1, r1, #1
 80091dc:	3008      	adds	r0, #8
 80091de:	e777      	b.n	80090d0 <_dtoa_r+0x340>
 80091e0:	d022      	beq.n	8009228 <_dtoa_r+0x498>
 80091e2:	f1cb 0100 	rsb	r1, fp, #0
 80091e6:	4a70      	ldr	r2, [pc, #448]	; (80093a8 <_dtoa_r+0x618>)
 80091e8:	f001 000f 	and.w	r0, r1, #15
 80091ec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80091f0:	ed92 7b00 	vldr	d7, [r2]
 80091f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80091f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80091fc:	486b      	ldr	r0, [pc, #428]	; (80093ac <_dtoa_r+0x61c>)
 80091fe:	1109      	asrs	r1, r1, #4
 8009200:	2400      	movs	r4, #0
 8009202:	2202      	movs	r2, #2
 8009204:	b929      	cbnz	r1, 8009212 <_dtoa_r+0x482>
 8009206:	2c00      	cmp	r4, #0
 8009208:	f43f af6a 	beq.w	80090e0 <_dtoa_r+0x350>
 800920c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009210:	e766      	b.n	80090e0 <_dtoa_r+0x350>
 8009212:	07cf      	lsls	r7, r1, #31
 8009214:	d505      	bpl.n	8009222 <_dtoa_r+0x492>
 8009216:	ed90 6b00 	vldr	d6, [r0]
 800921a:	3201      	adds	r2, #1
 800921c:	2401      	movs	r4, #1
 800921e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009222:	1049      	asrs	r1, r1, #1
 8009224:	3008      	adds	r0, #8
 8009226:	e7ed      	b.n	8009204 <_dtoa_r+0x474>
 8009228:	2202      	movs	r2, #2
 800922a:	e759      	b.n	80090e0 <_dtoa_r+0x350>
 800922c:	465f      	mov	r7, fp
 800922e:	4648      	mov	r0, r9
 8009230:	e775      	b.n	800911e <_dtoa_r+0x38e>
 8009232:	ec42 1b17 	vmov	d7, r1, r2
 8009236:	4a5c      	ldr	r2, [pc, #368]	; (80093a8 <_dtoa_r+0x618>)
 8009238:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800923c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009240:	9a01      	ldr	r2, [sp, #4]
 8009242:	1814      	adds	r4, r2, r0
 8009244:	9a07      	ldr	r2, [sp, #28]
 8009246:	b352      	cbz	r2, 800929e <_dtoa_r+0x50e>
 8009248:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800924c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009250:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009254:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009258:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800925c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009260:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009264:	ee14 2a90 	vmov	r2, s9
 8009268:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800926c:	3230      	adds	r2, #48	; 0x30
 800926e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009272:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927a:	f808 2b01 	strb.w	r2, [r8], #1
 800927e:	d439      	bmi.n	80092f4 <_dtoa_r+0x564>
 8009280:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009284:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928c:	d472      	bmi.n	8009374 <_dtoa_r+0x5e4>
 800928e:	45a0      	cmp	r8, r4
 8009290:	f43f af6b 	beq.w	800916a <_dtoa_r+0x3da>
 8009294:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009298:	ee26 6b03 	vmul.f64	d6, d6, d3
 800929c:	e7e0      	b.n	8009260 <_dtoa_r+0x4d0>
 800929e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80092a6:	4621      	mov	r1, r4
 80092a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80092ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80092b0:	ee14 2a90 	vmov	r2, s9
 80092b4:	3230      	adds	r2, #48	; 0x30
 80092b6:	f808 2b01 	strb.w	r2, [r8], #1
 80092ba:	45a0      	cmp	r8, r4
 80092bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80092c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80092c4:	d118      	bne.n	80092f8 <_dtoa_r+0x568>
 80092c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80092ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 80092ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80092d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092d6:	dc4d      	bgt.n	8009374 <_dtoa_r+0x5e4>
 80092d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80092dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80092e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e4:	f57f af41 	bpl.w	800916a <_dtoa_r+0x3da>
 80092e8:	4688      	mov	r8, r1
 80092ea:	3901      	subs	r1, #1
 80092ec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80092f0:	2b30      	cmp	r3, #48	; 0x30
 80092f2:	d0f9      	beq.n	80092e8 <_dtoa_r+0x558>
 80092f4:	46bb      	mov	fp, r7
 80092f6:	e02a      	b.n	800934e <_dtoa_r+0x5be>
 80092f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80092fc:	e7d6      	b.n	80092ac <_dtoa_r+0x51c>
 80092fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009302:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009306:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800930a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800930e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009312:	ee15 3a10 	vmov	r3, s10
 8009316:	3330      	adds	r3, #48	; 0x30
 8009318:	f808 3b01 	strb.w	r3, [r8], #1
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	eba8 0303 	sub.w	r3, r8, r3
 8009322:	4599      	cmp	r9, r3
 8009324:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009328:	eea3 7b46 	vfms.f64	d7, d3, d6
 800932c:	d133      	bne.n	8009396 <_dtoa_r+0x606>
 800932e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009332:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800933a:	dc1a      	bgt.n	8009372 <_dtoa_r+0x5e2>
 800933c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009344:	d103      	bne.n	800934e <_dtoa_r+0x5be>
 8009346:	ee15 3a10 	vmov	r3, s10
 800934a:	07d9      	lsls	r1, r3, #31
 800934c:	d411      	bmi.n	8009372 <_dtoa_r+0x5e2>
 800934e:	4629      	mov	r1, r5
 8009350:	4630      	mov	r0, r6
 8009352:	f000 fe5d 	bl	800a010 <_Bfree>
 8009356:	2300      	movs	r3, #0
 8009358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800935a:	f888 3000 	strb.w	r3, [r8]
 800935e:	f10b 0301 	add.w	r3, fp, #1
 8009362:	6013      	str	r3, [r2, #0]
 8009364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009366:	2b00      	cmp	r3, #0
 8009368:	f43f ad61 	beq.w	8008e2e <_dtoa_r+0x9e>
 800936c:	f8c3 8000 	str.w	r8, [r3]
 8009370:	e55d      	b.n	8008e2e <_dtoa_r+0x9e>
 8009372:	465f      	mov	r7, fp
 8009374:	4643      	mov	r3, r8
 8009376:	4698      	mov	r8, r3
 8009378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800937c:	2a39      	cmp	r2, #57	; 0x39
 800937e:	d106      	bne.n	800938e <_dtoa_r+0x5fe>
 8009380:	9a01      	ldr	r2, [sp, #4]
 8009382:	429a      	cmp	r2, r3
 8009384:	d1f7      	bne.n	8009376 <_dtoa_r+0x5e6>
 8009386:	9901      	ldr	r1, [sp, #4]
 8009388:	2230      	movs	r2, #48	; 0x30
 800938a:	3701      	adds	r7, #1
 800938c:	700a      	strb	r2, [r1, #0]
 800938e:	781a      	ldrb	r2, [r3, #0]
 8009390:	3201      	adds	r2, #1
 8009392:	701a      	strb	r2, [r3, #0]
 8009394:	e7ae      	b.n	80092f4 <_dtoa_r+0x564>
 8009396:	ee27 7b04 	vmul.f64	d7, d7, d4
 800939a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a2:	d1b2      	bne.n	800930a <_dtoa_r+0x57a>
 80093a4:	e7d3      	b.n	800934e <_dtoa_r+0x5be>
 80093a6:	bf00      	nop
 80093a8:	0800bd68 	.word	0x0800bd68
 80093ac:	0800bd40 	.word	0x0800bd40
 80093b0:	9907      	ldr	r1, [sp, #28]
 80093b2:	2900      	cmp	r1, #0
 80093b4:	f000 80d0 	beq.w	8009558 <_dtoa_r+0x7c8>
 80093b8:	9906      	ldr	r1, [sp, #24]
 80093ba:	2901      	cmp	r1, #1
 80093bc:	f300 80b4 	bgt.w	8009528 <_dtoa_r+0x798>
 80093c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80093c2:	2900      	cmp	r1, #0
 80093c4:	f000 80ac 	beq.w	8009520 <_dtoa_r+0x790>
 80093c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093cc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80093d0:	461c      	mov	r4, r3
 80093d2:	930a      	str	r3, [sp, #40]	; 0x28
 80093d4:	9b04      	ldr	r3, [sp, #16]
 80093d6:	4413      	add	r3, r2
 80093d8:	9304      	str	r3, [sp, #16]
 80093da:	9b05      	ldr	r3, [sp, #20]
 80093dc:	2101      	movs	r1, #1
 80093de:	4413      	add	r3, r2
 80093e0:	4630      	mov	r0, r6
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	f000 ff16 	bl	800a214 <__i2b>
 80093e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ea:	4607      	mov	r7, r0
 80093ec:	f1b8 0f00 	cmp.w	r8, #0
 80093f0:	dd0d      	ble.n	800940e <_dtoa_r+0x67e>
 80093f2:	9a05      	ldr	r2, [sp, #20]
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	dd0a      	ble.n	800940e <_dtoa_r+0x67e>
 80093f8:	4542      	cmp	r2, r8
 80093fa:	9904      	ldr	r1, [sp, #16]
 80093fc:	bfa8      	it	ge
 80093fe:	4642      	movge	r2, r8
 8009400:	1a89      	subs	r1, r1, r2
 8009402:	9104      	str	r1, [sp, #16]
 8009404:	9905      	ldr	r1, [sp, #20]
 8009406:	eba8 0802 	sub.w	r8, r8, r2
 800940a:	1a8a      	subs	r2, r1, r2
 800940c:	9205      	str	r2, [sp, #20]
 800940e:	b303      	cbz	r3, 8009452 <_dtoa_r+0x6c2>
 8009410:	9a07      	ldr	r2, [sp, #28]
 8009412:	2a00      	cmp	r2, #0
 8009414:	f000 80a5 	beq.w	8009562 <_dtoa_r+0x7d2>
 8009418:	2c00      	cmp	r4, #0
 800941a:	dd13      	ble.n	8009444 <_dtoa_r+0x6b4>
 800941c:	4639      	mov	r1, r7
 800941e:	4622      	mov	r2, r4
 8009420:	4630      	mov	r0, r6
 8009422:	930d      	str	r3, [sp, #52]	; 0x34
 8009424:	f000 ffb6 	bl	800a394 <__pow5mult>
 8009428:	462a      	mov	r2, r5
 800942a:	4601      	mov	r1, r0
 800942c:	4607      	mov	r7, r0
 800942e:	4630      	mov	r0, r6
 8009430:	f000 ff06 	bl	800a240 <__multiply>
 8009434:	4629      	mov	r1, r5
 8009436:	900a      	str	r0, [sp, #40]	; 0x28
 8009438:	4630      	mov	r0, r6
 800943a:	f000 fde9 	bl	800a010 <_Bfree>
 800943e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009442:	4615      	mov	r5, r2
 8009444:	1b1a      	subs	r2, r3, r4
 8009446:	d004      	beq.n	8009452 <_dtoa_r+0x6c2>
 8009448:	4629      	mov	r1, r5
 800944a:	4630      	mov	r0, r6
 800944c:	f000 ffa2 	bl	800a394 <__pow5mult>
 8009450:	4605      	mov	r5, r0
 8009452:	2101      	movs	r1, #1
 8009454:	4630      	mov	r0, r6
 8009456:	f000 fedd 	bl	800a214 <__i2b>
 800945a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	4604      	mov	r4, r0
 8009460:	f340 8081 	ble.w	8009566 <_dtoa_r+0x7d6>
 8009464:	461a      	mov	r2, r3
 8009466:	4601      	mov	r1, r0
 8009468:	4630      	mov	r0, r6
 800946a:	f000 ff93 	bl	800a394 <__pow5mult>
 800946e:	9b06      	ldr	r3, [sp, #24]
 8009470:	2b01      	cmp	r3, #1
 8009472:	4604      	mov	r4, r0
 8009474:	dd7a      	ble.n	800956c <_dtoa_r+0x7dc>
 8009476:	2300      	movs	r3, #0
 8009478:	930a      	str	r3, [sp, #40]	; 0x28
 800947a:	6922      	ldr	r2, [r4, #16]
 800947c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009480:	6910      	ldr	r0, [r2, #16]
 8009482:	f000 fe77 	bl	800a174 <__hi0bits>
 8009486:	f1c0 0020 	rsb	r0, r0, #32
 800948a:	9b05      	ldr	r3, [sp, #20]
 800948c:	4418      	add	r0, r3
 800948e:	f010 001f 	ands.w	r0, r0, #31
 8009492:	f000 808c 	beq.w	80095ae <_dtoa_r+0x81e>
 8009496:	f1c0 0220 	rsb	r2, r0, #32
 800949a:	2a04      	cmp	r2, #4
 800949c:	f340 8085 	ble.w	80095aa <_dtoa_r+0x81a>
 80094a0:	f1c0 001c 	rsb	r0, r0, #28
 80094a4:	9b04      	ldr	r3, [sp, #16]
 80094a6:	4403      	add	r3, r0
 80094a8:	9304      	str	r3, [sp, #16]
 80094aa:	9b05      	ldr	r3, [sp, #20]
 80094ac:	4403      	add	r3, r0
 80094ae:	4480      	add	r8, r0
 80094b0:	9305      	str	r3, [sp, #20]
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	dd05      	ble.n	80094c4 <_dtoa_r+0x734>
 80094b8:	4629      	mov	r1, r5
 80094ba:	461a      	mov	r2, r3
 80094bc:	4630      	mov	r0, r6
 80094be:	f000 ffc3 	bl	800a448 <__lshift>
 80094c2:	4605      	mov	r5, r0
 80094c4:	9b05      	ldr	r3, [sp, #20]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	dd05      	ble.n	80094d6 <_dtoa_r+0x746>
 80094ca:	4621      	mov	r1, r4
 80094cc:	461a      	mov	r2, r3
 80094ce:	4630      	mov	r0, r6
 80094d0:	f000 ffba 	bl	800a448 <__lshift>
 80094d4:	4604      	mov	r4, r0
 80094d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d06a      	beq.n	80095b2 <_dtoa_r+0x822>
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f001 f822 	bl	800a528 <__mcmp>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	da64      	bge.n	80095b2 <_dtoa_r+0x822>
 80094e8:	2300      	movs	r3, #0
 80094ea:	4629      	mov	r1, r5
 80094ec:	220a      	movs	r2, #10
 80094ee:	4630      	mov	r0, r6
 80094f0:	f000 fdb0 	bl	800a054 <__multadd>
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094fa:	4605      	mov	r5, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8191 	beq.w	8009824 <_dtoa_r+0xa94>
 8009502:	4639      	mov	r1, r7
 8009504:	2300      	movs	r3, #0
 8009506:	220a      	movs	r2, #10
 8009508:	4630      	mov	r0, r6
 800950a:	f000 fda3 	bl	800a054 <__multadd>
 800950e:	f1ba 0f00 	cmp.w	sl, #0
 8009512:	4607      	mov	r7, r0
 8009514:	f300 808d 	bgt.w	8009632 <_dtoa_r+0x8a2>
 8009518:	9b06      	ldr	r3, [sp, #24]
 800951a:	2b02      	cmp	r3, #2
 800951c:	dc50      	bgt.n	80095c0 <_dtoa_r+0x830>
 800951e:	e088      	b.n	8009632 <_dtoa_r+0x8a2>
 8009520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009522:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009526:	e751      	b.n	80093cc <_dtoa_r+0x63c>
 8009528:	f109 34ff 	add.w	r4, r9, #4294967295
 800952c:	42a3      	cmp	r3, r4
 800952e:	bfbf      	itttt	lt
 8009530:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009532:	1ae3      	sublt	r3, r4, r3
 8009534:	18d2      	addlt	r2, r2, r3
 8009536:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009538:	bfb6      	itet	lt
 800953a:	4623      	movlt	r3, r4
 800953c:	1b1c      	subge	r4, r3, r4
 800953e:	2400      	movlt	r4, #0
 8009540:	f1b9 0f00 	cmp.w	r9, #0
 8009544:	bfb5      	itete	lt
 8009546:	9a04      	ldrlt	r2, [sp, #16]
 8009548:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800954c:	eba2 0809 	sublt.w	r8, r2, r9
 8009550:	464a      	movge	r2, r9
 8009552:	bfb8      	it	lt
 8009554:	2200      	movlt	r2, #0
 8009556:	e73c      	b.n	80093d2 <_dtoa_r+0x642>
 8009558:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800955c:	9f07      	ldr	r7, [sp, #28]
 800955e:	461c      	mov	r4, r3
 8009560:	e744      	b.n	80093ec <_dtoa_r+0x65c>
 8009562:	461a      	mov	r2, r3
 8009564:	e770      	b.n	8009448 <_dtoa_r+0x6b8>
 8009566:	9b06      	ldr	r3, [sp, #24]
 8009568:	2b01      	cmp	r3, #1
 800956a:	dc18      	bgt.n	800959e <_dtoa_r+0x80e>
 800956c:	9b02      	ldr	r3, [sp, #8]
 800956e:	b9b3      	cbnz	r3, 800959e <_dtoa_r+0x80e>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009576:	b9a2      	cbnz	r2, 80095a2 <_dtoa_r+0x812>
 8009578:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800957c:	0d12      	lsrs	r2, r2, #20
 800957e:	0512      	lsls	r2, r2, #20
 8009580:	b18a      	cbz	r2, 80095a6 <_dtoa_r+0x816>
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	3301      	adds	r3, #1
 8009586:	9304      	str	r3, [sp, #16]
 8009588:	9b05      	ldr	r3, [sp, #20]
 800958a:	3301      	adds	r3, #1
 800958c:	9305      	str	r3, [sp, #20]
 800958e:	2301      	movs	r3, #1
 8009590:	930a      	str	r3, [sp, #40]	; 0x28
 8009592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009594:	2b00      	cmp	r3, #0
 8009596:	f47f af70 	bne.w	800947a <_dtoa_r+0x6ea>
 800959a:	2001      	movs	r0, #1
 800959c:	e775      	b.n	800948a <_dtoa_r+0x6fa>
 800959e:	2300      	movs	r3, #0
 80095a0:	e7f6      	b.n	8009590 <_dtoa_r+0x800>
 80095a2:	9b02      	ldr	r3, [sp, #8]
 80095a4:	e7f4      	b.n	8009590 <_dtoa_r+0x800>
 80095a6:	920a      	str	r2, [sp, #40]	; 0x28
 80095a8:	e7f3      	b.n	8009592 <_dtoa_r+0x802>
 80095aa:	d082      	beq.n	80094b2 <_dtoa_r+0x722>
 80095ac:	4610      	mov	r0, r2
 80095ae:	301c      	adds	r0, #28
 80095b0:	e778      	b.n	80094a4 <_dtoa_r+0x714>
 80095b2:	f1b9 0f00 	cmp.w	r9, #0
 80095b6:	dc37      	bgt.n	8009628 <_dtoa_r+0x898>
 80095b8:	9b06      	ldr	r3, [sp, #24]
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	dd34      	ble.n	8009628 <_dtoa_r+0x898>
 80095be:	46ca      	mov	sl, r9
 80095c0:	f1ba 0f00 	cmp.w	sl, #0
 80095c4:	d10d      	bne.n	80095e2 <_dtoa_r+0x852>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4653      	mov	r3, sl
 80095ca:	2205      	movs	r2, #5
 80095cc:	4630      	mov	r0, r6
 80095ce:	f000 fd41 	bl	800a054 <__multadd>
 80095d2:	4601      	mov	r1, r0
 80095d4:	4604      	mov	r4, r0
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 ffa6 	bl	800a528 <__mcmp>
 80095dc:	2800      	cmp	r0, #0
 80095de:	f73f adeb 	bgt.w	80091b8 <_dtoa_r+0x428>
 80095e2:	9b08      	ldr	r3, [sp, #32]
 80095e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80095e8:	ea6f 0b03 	mvn.w	fp, r3
 80095ec:	f04f 0900 	mov.w	r9, #0
 80095f0:	4621      	mov	r1, r4
 80095f2:	4630      	mov	r0, r6
 80095f4:	f000 fd0c 	bl	800a010 <_Bfree>
 80095f8:	2f00      	cmp	r7, #0
 80095fa:	f43f aea8 	beq.w	800934e <_dtoa_r+0x5be>
 80095fe:	f1b9 0f00 	cmp.w	r9, #0
 8009602:	d005      	beq.n	8009610 <_dtoa_r+0x880>
 8009604:	45b9      	cmp	r9, r7
 8009606:	d003      	beq.n	8009610 <_dtoa_r+0x880>
 8009608:	4649      	mov	r1, r9
 800960a:	4630      	mov	r0, r6
 800960c:	f000 fd00 	bl	800a010 <_Bfree>
 8009610:	4639      	mov	r1, r7
 8009612:	4630      	mov	r0, r6
 8009614:	f000 fcfc 	bl	800a010 <_Bfree>
 8009618:	e699      	b.n	800934e <_dtoa_r+0x5be>
 800961a:	2400      	movs	r4, #0
 800961c:	4627      	mov	r7, r4
 800961e:	e7e0      	b.n	80095e2 <_dtoa_r+0x852>
 8009620:	46bb      	mov	fp, r7
 8009622:	4604      	mov	r4, r0
 8009624:	4607      	mov	r7, r0
 8009626:	e5c7      	b.n	80091b8 <_dtoa_r+0x428>
 8009628:	9b07      	ldr	r3, [sp, #28]
 800962a:	46ca      	mov	sl, r9
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8100 	beq.w	8009832 <_dtoa_r+0xaa2>
 8009632:	f1b8 0f00 	cmp.w	r8, #0
 8009636:	dd05      	ble.n	8009644 <_dtoa_r+0x8b4>
 8009638:	4639      	mov	r1, r7
 800963a:	4642      	mov	r2, r8
 800963c:	4630      	mov	r0, r6
 800963e:	f000 ff03 	bl	800a448 <__lshift>
 8009642:	4607      	mov	r7, r0
 8009644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009646:	2b00      	cmp	r3, #0
 8009648:	d05d      	beq.n	8009706 <_dtoa_r+0x976>
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	4630      	mov	r0, r6
 800964e:	f000 fc9f 	bl	8009f90 <_Balloc>
 8009652:	4680      	mov	r8, r0
 8009654:	b928      	cbnz	r0, 8009662 <_dtoa_r+0x8d2>
 8009656:	4b82      	ldr	r3, [pc, #520]	; (8009860 <_dtoa_r+0xad0>)
 8009658:	4602      	mov	r2, r0
 800965a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800965e:	f7ff bbaf 	b.w	8008dc0 <_dtoa_r+0x30>
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	3202      	adds	r2, #2
 8009666:	0092      	lsls	r2, r2, #2
 8009668:	f107 010c 	add.w	r1, r7, #12
 800966c:	300c      	adds	r0, #12
 800966e:	f7fd fd33 	bl	80070d8 <memcpy>
 8009672:	2201      	movs	r2, #1
 8009674:	4641      	mov	r1, r8
 8009676:	4630      	mov	r0, r6
 8009678:	f000 fee6 	bl	800a448 <__lshift>
 800967c:	9b01      	ldr	r3, [sp, #4]
 800967e:	3301      	adds	r3, #1
 8009680:	9304      	str	r3, [sp, #16]
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	4453      	add	r3, sl
 8009686:	9308      	str	r3, [sp, #32]
 8009688:	9b02      	ldr	r3, [sp, #8]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	46b9      	mov	r9, r7
 8009690:	9307      	str	r3, [sp, #28]
 8009692:	4607      	mov	r7, r0
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	4621      	mov	r1, r4
 8009698:	3b01      	subs	r3, #1
 800969a:	4628      	mov	r0, r5
 800969c:	9302      	str	r3, [sp, #8]
 800969e:	f7ff faeb 	bl	8008c78 <quorem>
 80096a2:	4603      	mov	r3, r0
 80096a4:	3330      	adds	r3, #48	; 0x30
 80096a6:	9005      	str	r0, [sp, #20]
 80096a8:	4649      	mov	r1, r9
 80096aa:	4628      	mov	r0, r5
 80096ac:	9309      	str	r3, [sp, #36]	; 0x24
 80096ae:	f000 ff3b 	bl	800a528 <__mcmp>
 80096b2:	463a      	mov	r2, r7
 80096b4:	4682      	mov	sl, r0
 80096b6:	4621      	mov	r1, r4
 80096b8:	4630      	mov	r0, r6
 80096ba:	f000 ff51 	bl	800a560 <__mdiff>
 80096be:	68c2      	ldr	r2, [r0, #12]
 80096c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c2:	4680      	mov	r8, r0
 80096c4:	bb0a      	cbnz	r2, 800970a <_dtoa_r+0x97a>
 80096c6:	4601      	mov	r1, r0
 80096c8:	4628      	mov	r0, r5
 80096ca:	f000 ff2d 	bl	800a528 <__mcmp>
 80096ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d0:	4602      	mov	r2, r0
 80096d2:	4641      	mov	r1, r8
 80096d4:	4630      	mov	r0, r6
 80096d6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80096da:	f000 fc99 	bl	800a010 <_Bfree>
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80096e6:	ea43 0102 	orr.w	r1, r3, r2
 80096ea:	9b07      	ldr	r3, [sp, #28]
 80096ec:	430b      	orrs	r3, r1
 80096ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f0:	d10d      	bne.n	800970e <_dtoa_r+0x97e>
 80096f2:	2b39      	cmp	r3, #57	; 0x39
 80096f4:	d029      	beq.n	800974a <_dtoa_r+0x9ba>
 80096f6:	f1ba 0f00 	cmp.w	sl, #0
 80096fa:	dd01      	ble.n	8009700 <_dtoa_r+0x970>
 80096fc:	9b05      	ldr	r3, [sp, #20]
 80096fe:	3331      	adds	r3, #49	; 0x31
 8009700:	9a02      	ldr	r2, [sp, #8]
 8009702:	7013      	strb	r3, [r2, #0]
 8009704:	e774      	b.n	80095f0 <_dtoa_r+0x860>
 8009706:	4638      	mov	r0, r7
 8009708:	e7b8      	b.n	800967c <_dtoa_r+0x8ec>
 800970a:	2201      	movs	r2, #1
 800970c:	e7e1      	b.n	80096d2 <_dtoa_r+0x942>
 800970e:	f1ba 0f00 	cmp.w	sl, #0
 8009712:	db06      	blt.n	8009722 <_dtoa_r+0x992>
 8009714:	9906      	ldr	r1, [sp, #24]
 8009716:	ea41 0a0a 	orr.w	sl, r1, sl
 800971a:	9907      	ldr	r1, [sp, #28]
 800971c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009720:	d120      	bne.n	8009764 <_dtoa_r+0x9d4>
 8009722:	2a00      	cmp	r2, #0
 8009724:	ddec      	ble.n	8009700 <_dtoa_r+0x970>
 8009726:	4629      	mov	r1, r5
 8009728:	2201      	movs	r2, #1
 800972a:	4630      	mov	r0, r6
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	f000 fe8b 	bl	800a448 <__lshift>
 8009732:	4621      	mov	r1, r4
 8009734:	4605      	mov	r5, r0
 8009736:	f000 fef7 	bl	800a528 <__mcmp>
 800973a:	2800      	cmp	r0, #0
 800973c:	9b04      	ldr	r3, [sp, #16]
 800973e:	dc02      	bgt.n	8009746 <_dtoa_r+0x9b6>
 8009740:	d1de      	bne.n	8009700 <_dtoa_r+0x970>
 8009742:	07da      	lsls	r2, r3, #31
 8009744:	d5dc      	bpl.n	8009700 <_dtoa_r+0x970>
 8009746:	2b39      	cmp	r3, #57	; 0x39
 8009748:	d1d8      	bne.n	80096fc <_dtoa_r+0x96c>
 800974a:	9a02      	ldr	r2, [sp, #8]
 800974c:	2339      	movs	r3, #57	; 0x39
 800974e:	7013      	strb	r3, [r2, #0]
 8009750:	4643      	mov	r3, r8
 8009752:	4698      	mov	r8, r3
 8009754:	3b01      	subs	r3, #1
 8009756:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800975a:	2a39      	cmp	r2, #57	; 0x39
 800975c:	d051      	beq.n	8009802 <_dtoa_r+0xa72>
 800975e:	3201      	adds	r2, #1
 8009760:	701a      	strb	r2, [r3, #0]
 8009762:	e745      	b.n	80095f0 <_dtoa_r+0x860>
 8009764:	2a00      	cmp	r2, #0
 8009766:	dd03      	ble.n	8009770 <_dtoa_r+0x9e0>
 8009768:	2b39      	cmp	r3, #57	; 0x39
 800976a:	d0ee      	beq.n	800974a <_dtoa_r+0x9ba>
 800976c:	3301      	adds	r3, #1
 800976e:	e7c7      	b.n	8009700 <_dtoa_r+0x970>
 8009770:	9a04      	ldr	r2, [sp, #16]
 8009772:	9908      	ldr	r1, [sp, #32]
 8009774:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009778:	428a      	cmp	r2, r1
 800977a:	d02b      	beq.n	80097d4 <_dtoa_r+0xa44>
 800977c:	4629      	mov	r1, r5
 800977e:	2300      	movs	r3, #0
 8009780:	220a      	movs	r2, #10
 8009782:	4630      	mov	r0, r6
 8009784:	f000 fc66 	bl	800a054 <__multadd>
 8009788:	45b9      	cmp	r9, r7
 800978a:	4605      	mov	r5, r0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	f04f 020a 	mov.w	r2, #10
 8009794:	4649      	mov	r1, r9
 8009796:	4630      	mov	r0, r6
 8009798:	d107      	bne.n	80097aa <_dtoa_r+0xa1a>
 800979a:	f000 fc5b 	bl	800a054 <__multadd>
 800979e:	4681      	mov	r9, r0
 80097a0:	4607      	mov	r7, r0
 80097a2:	9b04      	ldr	r3, [sp, #16]
 80097a4:	3301      	adds	r3, #1
 80097a6:	9304      	str	r3, [sp, #16]
 80097a8:	e774      	b.n	8009694 <_dtoa_r+0x904>
 80097aa:	f000 fc53 	bl	800a054 <__multadd>
 80097ae:	4639      	mov	r1, r7
 80097b0:	4681      	mov	r9, r0
 80097b2:	2300      	movs	r3, #0
 80097b4:	220a      	movs	r2, #10
 80097b6:	4630      	mov	r0, r6
 80097b8:	f000 fc4c 	bl	800a054 <__multadd>
 80097bc:	4607      	mov	r7, r0
 80097be:	e7f0      	b.n	80097a2 <_dtoa_r+0xa12>
 80097c0:	f1ba 0f00 	cmp.w	sl, #0
 80097c4:	9a01      	ldr	r2, [sp, #4]
 80097c6:	bfcc      	ite	gt
 80097c8:	46d0      	movgt	r8, sl
 80097ca:	f04f 0801 	movle.w	r8, #1
 80097ce:	4490      	add	r8, r2
 80097d0:	f04f 0900 	mov.w	r9, #0
 80097d4:	4629      	mov	r1, r5
 80097d6:	2201      	movs	r2, #1
 80097d8:	4630      	mov	r0, r6
 80097da:	9302      	str	r3, [sp, #8]
 80097dc:	f000 fe34 	bl	800a448 <__lshift>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4605      	mov	r5, r0
 80097e4:	f000 fea0 	bl	800a528 <__mcmp>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	dcb1      	bgt.n	8009750 <_dtoa_r+0x9c0>
 80097ec:	d102      	bne.n	80097f4 <_dtoa_r+0xa64>
 80097ee:	9b02      	ldr	r3, [sp, #8]
 80097f0:	07db      	lsls	r3, r3, #31
 80097f2:	d4ad      	bmi.n	8009750 <_dtoa_r+0x9c0>
 80097f4:	4643      	mov	r3, r8
 80097f6:	4698      	mov	r8, r3
 80097f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097fc:	2a30      	cmp	r2, #48	; 0x30
 80097fe:	d0fa      	beq.n	80097f6 <_dtoa_r+0xa66>
 8009800:	e6f6      	b.n	80095f0 <_dtoa_r+0x860>
 8009802:	9a01      	ldr	r2, [sp, #4]
 8009804:	429a      	cmp	r2, r3
 8009806:	d1a4      	bne.n	8009752 <_dtoa_r+0x9c2>
 8009808:	f10b 0b01 	add.w	fp, fp, #1
 800980c:	2331      	movs	r3, #49	; 0x31
 800980e:	e778      	b.n	8009702 <_dtoa_r+0x972>
 8009810:	4b14      	ldr	r3, [pc, #80]	; (8009864 <_dtoa_r+0xad4>)
 8009812:	f7ff bb27 	b.w	8008e64 <_dtoa_r+0xd4>
 8009816:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009818:	2b00      	cmp	r3, #0
 800981a:	f47f ab03 	bne.w	8008e24 <_dtoa_r+0x94>
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <_dtoa_r+0xad8>)
 8009820:	f7ff bb20 	b.w	8008e64 <_dtoa_r+0xd4>
 8009824:	f1ba 0f00 	cmp.w	sl, #0
 8009828:	dc03      	bgt.n	8009832 <_dtoa_r+0xaa2>
 800982a:	9b06      	ldr	r3, [sp, #24]
 800982c:	2b02      	cmp	r3, #2
 800982e:	f73f aec7 	bgt.w	80095c0 <_dtoa_r+0x830>
 8009832:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009836:	4621      	mov	r1, r4
 8009838:	4628      	mov	r0, r5
 800983a:	f7ff fa1d 	bl	8008c78 <quorem>
 800983e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009842:	f808 3b01 	strb.w	r3, [r8], #1
 8009846:	9a01      	ldr	r2, [sp, #4]
 8009848:	eba8 0202 	sub.w	r2, r8, r2
 800984c:	4592      	cmp	sl, r2
 800984e:	ddb7      	ble.n	80097c0 <_dtoa_r+0xa30>
 8009850:	4629      	mov	r1, r5
 8009852:	2300      	movs	r3, #0
 8009854:	220a      	movs	r2, #10
 8009856:	4630      	mov	r0, r6
 8009858:	f000 fbfc 	bl	800a054 <__multadd>
 800985c:	4605      	mov	r5, r0
 800985e:	e7ea      	b.n	8009836 <_dtoa_r+0xaa6>
 8009860:	0800bc58 	.word	0x0800bc58
 8009864:	0800ba58 	.word	0x0800ba58
 8009868:	0800bbd9 	.word	0x0800bbd9

0800986c <rshift>:
 800986c:	6903      	ldr	r3, [r0, #16]
 800986e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009872:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009876:	ea4f 1261 	mov.w	r2, r1, asr #5
 800987a:	f100 0414 	add.w	r4, r0, #20
 800987e:	dd45      	ble.n	800990c <rshift+0xa0>
 8009880:	f011 011f 	ands.w	r1, r1, #31
 8009884:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009888:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800988c:	d10c      	bne.n	80098a8 <rshift+0x3c>
 800988e:	f100 0710 	add.w	r7, r0, #16
 8009892:	4629      	mov	r1, r5
 8009894:	42b1      	cmp	r1, r6
 8009896:	d334      	bcc.n	8009902 <rshift+0x96>
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	1eea      	subs	r2, r5, #3
 800989e:	4296      	cmp	r6, r2
 80098a0:	bf38      	it	cc
 80098a2:	2300      	movcc	r3, #0
 80098a4:	4423      	add	r3, r4
 80098a6:	e015      	b.n	80098d4 <rshift+0x68>
 80098a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80098ac:	f1c1 0820 	rsb	r8, r1, #32
 80098b0:	40cf      	lsrs	r7, r1
 80098b2:	f105 0e04 	add.w	lr, r5, #4
 80098b6:	46a1      	mov	r9, r4
 80098b8:	4576      	cmp	r6, lr
 80098ba:	46f4      	mov	ip, lr
 80098bc:	d815      	bhi.n	80098ea <rshift+0x7e>
 80098be:	1a9a      	subs	r2, r3, r2
 80098c0:	0092      	lsls	r2, r2, #2
 80098c2:	3a04      	subs	r2, #4
 80098c4:	3501      	adds	r5, #1
 80098c6:	42ae      	cmp	r6, r5
 80098c8:	bf38      	it	cc
 80098ca:	2200      	movcc	r2, #0
 80098cc:	18a3      	adds	r3, r4, r2
 80098ce:	50a7      	str	r7, [r4, r2]
 80098d0:	b107      	cbz	r7, 80098d4 <rshift+0x68>
 80098d2:	3304      	adds	r3, #4
 80098d4:	1b1a      	subs	r2, r3, r4
 80098d6:	42a3      	cmp	r3, r4
 80098d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098dc:	bf08      	it	eq
 80098de:	2300      	moveq	r3, #0
 80098e0:	6102      	str	r2, [r0, #16]
 80098e2:	bf08      	it	eq
 80098e4:	6143      	streq	r3, [r0, #20]
 80098e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ea:	f8dc c000 	ldr.w	ip, [ip]
 80098ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80098f2:	ea4c 0707 	orr.w	r7, ip, r7
 80098f6:	f849 7b04 	str.w	r7, [r9], #4
 80098fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80098fe:	40cf      	lsrs	r7, r1
 8009900:	e7da      	b.n	80098b8 <rshift+0x4c>
 8009902:	f851 cb04 	ldr.w	ip, [r1], #4
 8009906:	f847 cf04 	str.w	ip, [r7, #4]!
 800990a:	e7c3      	b.n	8009894 <rshift+0x28>
 800990c:	4623      	mov	r3, r4
 800990e:	e7e1      	b.n	80098d4 <rshift+0x68>

08009910 <__hexdig_fun>:
 8009910:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009914:	2b09      	cmp	r3, #9
 8009916:	d802      	bhi.n	800991e <__hexdig_fun+0xe>
 8009918:	3820      	subs	r0, #32
 800991a:	b2c0      	uxtb	r0, r0
 800991c:	4770      	bx	lr
 800991e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009922:	2b05      	cmp	r3, #5
 8009924:	d801      	bhi.n	800992a <__hexdig_fun+0x1a>
 8009926:	3847      	subs	r0, #71	; 0x47
 8009928:	e7f7      	b.n	800991a <__hexdig_fun+0xa>
 800992a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800992e:	2b05      	cmp	r3, #5
 8009930:	d801      	bhi.n	8009936 <__hexdig_fun+0x26>
 8009932:	3827      	subs	r0, #39	; 0x27
 8009934:	e7f1      	b.n	800991a <__hexdig_fun+0xa>
 8009936:	2000      	movs	r0, #0
 8009938:	4770      	bx	lr
	...

0800993c <__gethex>:
 800993c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009940:	ed2d 8b02 	vpush	{d8}
 8009944:	b089      	sub	sp, #36	; 0x24
 8009946:	ee08 0a10 	vmov	s16, r0
 800994a:	9304      	str	r3, [sp, #16]
 800994c:	4bb4      	ldr	r3, [pc, #720]	; (8009c20 <__gethex+0x2e4>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	9301      	str	r3, [sp, #4]
 8009952:	4618      	mov	r0, r3
 8009954:	468b      	mov	fp, r1
 8009956:	4690      	mov	r8, r2
 8009958:	f7f6 fc72 	bl	8000240 <strlen>
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	f8db 2000 	ldr.w	r2, [fp]
 8009962:	4403      	add	r3, r0
 8009964:	4682      	mov	sl, r0
 8009966:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800996a:	9305      	str	r3, [sp, #20]
 800996c:	1c93      	adds	r3, r2, #2
 800996e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009972:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009976:	32fe      	adds	r2, #254	; 0xfe
 8009978:	18d1      	adds	r1, r2, r3
 800997a:	461f      	mov	r7, r3
 800997c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009980:	9100      	str	r1, [sp, #0]
 8009982:	2830      	cmp	r0, #48	; 0x30
 8009984:	d0f8      	beq.n	8009978 <__gethex+0x3c>
 8009986:	f7ff ffc3 	bl	8009910 <__hexdig_fun>
 800998a:	4604      	mov	r4, r0
 800998c:	2800      	cmp	r0, #0
 800998e:	d13a      	bne.n	8009a06 <__gethex+0xca>
 8009990:	9901      	ldr	r1, [sp, #4]
 8009992:	4652      	mov	r2, sl
 8009994:	4638      	mov	r0, r7
 8009996:	f001 f933 	bl	800ac00 <strncmp>
 800999a:	4605      	mov	r5, r0
 800999c:	2800      	cmp	r0, #0
 800999e:	d168      	bne.n	8009a72 <__gethex+0x136>
 80099a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80099a4:	eb07 060a 	add.w	r6, r7, sl
 80099a8:	f7ff ffb2 	bl	8009910 <__hexdig_fun>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d062      	beq.n	8009a76 <__gethex+0x13a>
 80099b0:	4633      	mov	r3, r6
 80099b2:	7818      	ldrb	r0, [r3, #0]
 80099b4:	2830      	cmp	r0, #48	; 0x30
 80099b6:	461f      	mov	r7, r3
 80099b8:	f103 0301 	add.w	r3, r3, #1
 80099bc:	d0f9      	beq.n	80099b2 <__gethex+0x76>
 80099be:	f7ff ffa7 	bl	8009910 <__hexdig_fun>
 80099c2:	2301      	movs	r3, #1
 80099c4:	fab0 f480 	clz	r4, r0
 80099c8:	0964      	lsrs	r4, r4, #5
 80099ca:	4635      	mov	r5, r6
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	463a      	mov	r2, r7
 80099d0:	4616      	mov	r6, r2
 80099d2:	3201      	adds	r2, #1
 80099d4:	7830      	ldrb	r0, [r6, #0]
 80099d6:	f7ff ff9b 	bl	8009910 <__hexdig_fun>
 80099da:	2800      	cmp	r0, #0
 80099dc:	d1f8      	bne.n	80099d0 <__gethex+0x94>
 80099de:	9901      	ldr	r1, [sp, #4]
 80099e0:	4652      	mov	r2, sl
 80099e2:	4630      	mov	r0, r6
 80099e4:	f001 f90c 	bl	800ac00 <strncmp>
 80099e8:	b980      	cbnz	r0, 8009a0c <__gethex+0xd0>
 80099ea:	b94d      	cbnz	r5, 8009a00 <__gethex+0xc4>
 80099ec:	eb06 050a 	add.w	r5, r6, sl
 80099f0:	462a      	mov	r2, r5
 80099f2:	4616      	mov	r6, r2
 80099f4:	3201      	adds	r2, #1
 80099f6:	7830      	ldrb	r0, [r6, #0]
 80099f8:	f7ff ff8a 	bl	8009910 <__hexdig_fun>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d1f8      	bne.n	80099f2 <__gethex+0xb6>
 8009a00:	1bad      	subs	r5, r5, r6
 8009a02:	00ad      	lsls	r5, r5, #2
 8009a04:	e004      	b.n	8009a10 <__gethex+0xd4>
 8009a06:	2400      	movs	r4, #0
 8009a08:	4625      	mov	r5, r4
 8009a0a:	e7e0      	b.n	80099ce <__gethex+0x92>
 8009a0c:	2d00      	cmp	r5, #0
 8009a0e:	d1f7      	bne.n	8009a00 <__gethex+0xc4>
 8009a10:	7833      	ldrb	r3, [r6, #0]
 8009a12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a16:	2b50      	cmp	r3, #80	; 0x50
 8009a18:	d13b      	bne.n	8009a92 <__gethex+0x156>
 8009a1a:	7873      	ldrb	r3, [r6, #1]
 8009a1c:	2b2b      	cmp	r3, #43	; 0x2b
 8009a1e:	d02c      	beq.n	8009a7a <__gethex+0x13e>
 8009a20:	2b2d      	cmp	r3, #45	; 0x2d
 8009a22:	d02e      	beq.n	8009a82 <__gethex+0x146>
 8009a24:	1c71      	adds	r1, r6, #1
 8009a26:	f04f 0900 	mov.w	r9, #0
 8009a2a:	7808      	ldrb	r0, [r1, #0]
 8009a2c:	f7ff ff70 	bl	8009910 <__hexdig_fun>
 8009a30:	1e43      	subs	r3, r0, #1
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b18      	cmp	r3, #24
 8009a36:	d82c      	bhi.n	8009a92 <__gethex+0x156>
 8009a38:	f1a0 0210 	sub.w	r2, r0, #16
 8009a3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a40:	f7ff ff66 	bl	8009910 <__hexdig_fun>
 8009a44:	1e43      	subs	r3, r0, #1
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b18      	cmp	r3, #24
 8009a4a:	d91d      	bls.n	8009a88 <__gethex+0x14c>
 8009a4c:	f1b9 0f00 	cmp.w	r9, #0
 8009a50:	d000      	beq.n	8009a54 <__gethex+0x118>
 8009a52:	4252      	negs	r2, r2
 8009a54:	4415      	add	r5, r2
 8009a56:	f8cb 1000 	str.w	r1, [fp]
 8009a5a:	b1e4      	cbz	r4, 8009a96 <__gethex+0x15a>
 8009a5c:	9b00      	ldr	r3, [sp, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	bf14      	ite	ne
 8009a62:	2700      	movne	r7, #0
 8009a64:	2706      	moveq	r7, #6
 8009a66:	4638      	mov	r0, r7
 8009a68:	b009      	add	sp, #36	; 0x24
 8009a6a:	ecbd 8b02 	vpop	{d8}
 8009a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a72:	463e      	mov	r6, r7
 8009a74:	4625      	mov	r5, r4
 8009a76:	2401      	movs	r4, #1
 8009a78:	e7ca      	b.n	8009a10 <__gethex+0xd4>
 8009a7a:	f04f 0900 	mov.w	r9, #0
 8009a7e:	1cb1      	adds	r1, r6, #2
 8009a80:	e7d3      	b.n	8009a2a <__gethex+0xee>
 8009a82:	f04f 0901 	mov.w	r9, #1
 8009a86:	e7fa      	b.n	8009a7e <__gethex+0x142>
 8009a88:	230a      	movs	r3, #10
 8009a8a:	fb03 0202 	mla	r2, r3, r2, r0
 8009a8e:	3a10      	subs	r2, #16
 8009a90:	e7d4      	b.n	8009a3c <__gethex+0x100>
 8009a92:	4631      	mov	r1, r6
 8009a94:	e7df      	b.n	8009a56 <__gethex+0x11a>
 8009a96:	1bf3      	subs	r3, r6, r7
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	2b07      	cmp	r3, #7
 8009a9e:	dc0b      	bgt.n	8009ab8 <__gethex+0x17c>
 8009aa0:	ee18 0a10 	vmov	r0, s16
 8009aa4:	f000 fa74 	bl	8009f90 <_Balloc>
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	b940      	cbnz	r0, 8009abe <__gethex+0x182>
 8009aac:	4b5d      	ldr	r3, [pc, #372]	; (8009c24 <__gethex+0x2e8>)
 8009aae:	4602      	mov	r2, r0
 8009ab0:	21de      	movs	r1, #222	; 0xde
 8009ab2:	485d      	ldr	r0, [pc, #372]	; (8009c28 <__gethex+0x2ec>)
 8009ab4:	f001 f8c6 	bl	800ac44 <__assert_func>
 8009ab8:	3101      	adds	r1, #1
 8009aba:	105b      	asrs	r3, r3, #1
 8009abc:	e7ee      	b.n	8009a9c <__gethex+0x160>
 8009abe:	f100 0914 	add.w	r9, r0, #20
 8009ac2:	f04f 0b00 	mov.w	fp, #0
 8009ac6:	f1ca 0301 	rsb	r3, sl, #1
 8009aca:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ace:	f8cd b000 	str.w	fp, [sp]
 8009ad2:	9306      	str	r3, [sp, #24]
 8009ad4:	42b7      	cmp	r7, r6
 8009ad6:	d340      	bcc.n	8009b5a <__gethex+0x21e>
 8009ad8:	9802      	ldr	r0, [sp, #8]
 8009ada:	9b00      	ldr	r3, [sp, #0]
 8009adc:	f840 3b04 	str.w	r3, [r0], #4
 8009ae0:	eba0 0009 	sub.w	r0, r0, r9
 8009ae4:	1080      	asrs	r0, r0, #2
 8009ae6:	0146      	lsls	r6, r0, #5
 8009ae8:	6120      	str	r0, [r4, #16]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f000 fb42 	bl	800a174 <__hi0bits>
 8009af0:	1a30      	subs	r0, r6, r0
 8009af2:	f8d8 6000 	ldr.w	r6, [r8]
 8009af6:	42b0      	cmp	r0, r6
 8009af8:	dd63      	ble.n	8009bc2 <__gethex+0x286>
 8009afa:	1b87      	subs	r7, r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	4620      	mov	r0, r4
 8009b00:	f000 fee3 	bl	800a8ca <__any_on>
 8009b04:	4682      	mov	sl, r0
 8009b06:	b1a8      	cbz	r0, 8009b34 <__gethex+0x1f8>
 8009b08:	1e7b      	subs	r3, r7, #1
 8009b0a:	1159      	asrs	r1, r3, #5
 8009b0c:	f003 021f 	and.w	r2, r3, #31
 8009b10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b14:	f04f 0a01 	mov.w	sl, #1
 8009b18:	fa0a f202 	lsl.w	r2, sl, r2
 8009b1c:	420a      	tst	r2, r1
 8009b1e:	d009      	beq.n	8009b34 <__gethex+0x1f8>
 8009b20:	4553      	cmp	r3, sl
 8009b22:	dd05      	ble.n	8009b30 <__gethex+0x1f4>
 8009b24:	1eb9      	subs	r1, r7, #2
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 fecf 	bl	800a8ca <__any_on>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d145      	bne.n	8009bbc <__gethex+0x280>
 8009b30:	f04f 0a02 	mov.w	sl, #2
 8009b34:	4639      	mov	r1, r7
 8009b36:	4620      	mov	r0, r4
 8009b38:	f7ff fe98 	bl	800986c <rshift>
 8009b3c:	443d      	add	r5, r7
 8009b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b42:	42ab      	cmp	r3, r5
 8009b44:	da4c      	bge.n	8009be0 <__gethex+0x2a4>
 8009b46:	ee18 0a10 	vmov	r0, s16
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	f000 fa60 	bl	800a010 <_Bfree>
 8009b50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b52:	2300      	movs	r3, #0
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	27a3      	movs	r7, #163	; 0xa3
 8009b58:	e785      	b.n	8009a66 <__gethex+0x12a>
 8009b5a:	1e73      	subs	r3, r6, #1
 8009b5c:	9a05      	ldr	r2, [sp, #20]
 8009b5e:	9303      	str	r3, [sp, #12]
 8009b60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d019      	beq.n	8009b9c <__gethex+0x260>
 8009b68:	f1bb 0f20 	cmp.w	fp, #32
 8009b6c:	d107      	bne.n	8009b7e <__gethex+0x242>
 8009b6e:	9b02      	ldr	r3, [sp, #8]
 8009b70:	9a00      	ldr	r2, [sp, #0]
 8009b72:	f843 2b04 	str.w	r2, [r3], #4
 8009b76:	9302      	str	r3, [sp, #8]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	469b      	mov	fp, r3
 8009b7e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b82:	f7ff fec5 	bl	8009910 <__hexdig_fun>
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	f000 000f 	and.w	r0, r0, #15
 8009b8c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b90:	4303      	orrs	r3, r0
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	f10b 0b04 	add.w	fp, fp, #4
 8009b98:	9b03      	ldr	r3, [sp, #12]
 8009b9a:	e00d      	b.n	8009bb8 <__gethex+0x27c>
 8009b9c:	9b03      	ldr	r3, [sp, #12]
 8009b9e:	9a06      	ldr	r2, [sp, #24]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	42bb      	cmp	r3, r7
 8009ba4:	d3e0      	bcc.n	8009b68 <__gethex+0x22c>
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	9901      	ldr	r1, [sp, #4]
 8009baa:	9307      	str	r3, [sp, #28]
 8009bac:	4652      	mov	r2, sl
 8009bae:	f001 f827 	bl	800ac00 <strncmp>
 8009bb2:	9b07      	ldr	r3, [sp, #28]
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d1d7      	bne.n	8009b68 <__gethex+0x22c>
 8009bb8:	461e      	mov	r6, r3
 8009bba:	e78b      	b.n	8009ad4 <__gethex+0x198>
 8009bbc:	f04f 0a03 	mov.w	sl, #3
 8009bc0:	e7b8      	b.n	8009b34 <__gethex+0x1f8>
 8009bc2:	da0a      	bge.n	8009bda <__gethex+0x29e>
 8009bc4:	1a37      	subs	r7, r6, r0
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	ee18 0a10 	vmov	r0, s16
 8009bcc:	463a      	mov	r2, r7
 8009bce:	f000 fc3b 	bl	800a448 <__lshift>
 8009bd2:	1bed      	subs	r5, r5, r7
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	f100 0914 	add.w	r9, r0, #20
 8009bda:	f04f 0a00 	mov.w	sl, #0
 8009bde:	e7ae      	b.n	8009b3e <__gethex+0x202>
 8009be0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009be4:	42a8      	cmp	r0, r5
 8009be6:	dd72      	ble.n	8009cce <__gethex+0x392>
 8009be8:	1b45      	subs	r5, r0, r5
 8009bea:	42ae      	cmp	r6, r5
 8009bec:	dc36      	bgt.n	8009c5c <__gethex+0x320>
 8009bee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d02a      	beq.n	8009c4c <__gethex+0x310>
 8009bf6:	2b03      	cmp	r3, #3
 8009bf8:	d02c      	beq.n	8009c54 <__gethex+0x318>
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d11c      	bne.n	8009c38 <__gethex+0x2fc>
 8009bfe:	42ae      	cmp	r6, r5
 8009c00:	d11a      	bne.n	8009c38 <__gethex+0x2fc>
 8009c02:	2e01      	cmp	r6, #1
 8009c04:	d112      	bne.n	8009c2c <__gethex+0x2f0>
 8009c06:	9a04      	ldr	r2, [sp, #16]
 8009c08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	2301      	movs	r3, #1
 8009c10:	6123      	str	r3, [r4, #16]
 8009c12:	f8c9 3000 	str.w	r3, [r9]
 8009c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c18:	2762      	movs	r7, #98	; 0x62
 8009c1a:	601c      	str	r4, [r3, #0]
 8009c1c:	e723      	b.n	8009a66 <__gethex+0x12a>
 8009c1e:	bf00      	nop
 8009c20:	0800bcd0 	.word	0x0800bcd0
 8009c24:	0800bc58 	.word	0x0800bc58
 8009c28:	0800bc69 	.word	0x0800bc69
 8009c2c:	1e71      	subs	r1, r6, #1
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 fe4b 	bl	800a8ca <__any_on>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d1e6      	bne.n	8009c06 <__gethex+0x2ca>
 8009c38:	ee18 0a10 	vmov	r0, s16
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	f000 f9e7 	bl	800a010 <_Bfree>
 8009c42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c44:	2300      	movs	r3, #0
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	2750      	movs	r7, #80	; 0x50
 8009c4a:	e70c      	b.n	8009a66 <__gethex+0x12a>
 8009c4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f2      	bne.n	8009c38 <__gethex+0x2fc>
 8009c52:	e7d8      	b.n	8009c06 <__gethex+0x2ca>
 8009c54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1d5      	bne.n	8009c06 <__gethex+0x2ca>
 8009c5a:	e7ed      	b.n	8009c38 <__gethex+0x2fc>
 8009c5c:	1e6f      	subs	r7, r5, #1
 8009c5e:	f1ba 0f00 	cmp.w	sl, #0
 8009c62:	d131      	bne.n	8009cc8 <__gethex+0x38c>
 8009c64:	b127      	cbz	r7, 8009c70 <__gethex+0x334>
 8009c66:	4639      	mov	r1, r7
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 fe2e 	bl	800a8ca <__any_on>
 8009c6e:	4682      	mov	sl, r0
 8009c70:	117b      	asrs	r3, r7, #5
 8009c72:	2101      	movs	r1, #1
 8009c74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c78:	f007 071f 	and.w	r7, r7, #31
 8009c7c:	fa01 f707 	lsl.w	r7, r1, r7
 8009c80:	421f      	tst	r7, r3
 8009c82:	4629      	mov	r1, r5
 8009c84:	4620      	mov	r0, r4
 8009c86:	bf18      	it	ne
 8009c88:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c8c:	1b76      	subs	r6, r6, r5
 8009c8e:	f7ff fded 	bl	800986c <rshift>
 8009c92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c96:	2702      	movs	r7, #2
 8009c98:	f1ba 0f00 	cmp.w	sl, #0
 8009c9c:	d048      	beq.n	8009d30 <__gethex+0x3f4>
 8009c9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d015      	beq.n	8009cd2 <__gethex+0x396>
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d017      	beq.n	8009cda <__gethex+0x39e>
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d109      	bne.n	8009cc2 <__gethex+0x386>
 8009cae:	f01a 0f02 	tst.w	sl, #2
 8009cb2:	d006      	beq.n	8009cc2 <__gethex+0x386>
 8009cb4:	f8d9 0000 	ldr.w	r0, [r9]
 8009cb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8009cbc:	f01a 0f01 	tst.w	sl, #1
 8009cc0:	d10e      	bne.n	8009ce0 <__gethex+0x3a4>
 8009cc2:	f047 0710 	orr.w	r7, r7, #16
 8009cc6:	e033      	b.n	8009d30 <__gethex+0x3f4>
 8009cc8:	f04f 0a01 	mov.w	sl, #1
 8009ccc:	e7d0      	b.n	8009c70 <__gethex+0x334>
 8009cce:	2701      	movs	r7, #1
 8009cd0:	e7e2      	b.n	8009c98 <__gethex+0x35c>
 8009cd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cd4:	f1c3 0301 	rsb	r3, r3, #1
 8009cd8:	9315      	str	r3, [sp, #84]	; 0x54
 8009cda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d0f0      	beq.n	8009cc2 <__gethex+0x386>
 8009ce0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ce4:	f104 0314 	add.w	r3, r4, #20
 8009ce8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009cec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009cf0:	f04f 0c00 	mov.w	ip, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cfa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009cfe:	d01c      	beq.n	8009d3a <__gethex+0x3fe>
 8009d00:	3201      	adds	r2, #1
 8009d02:	6002      	str	r2, [r0, #0]
 8009d04:	2f02      	cmp	r7, #2
 8009d06:	f104 0314 	add.w	r3, r4, #20
 8009d0a:	d13f      	bne.n	8009d8c <__gethex+0x450>
 8009d0c:	f8d8 2000 	ldr.w	r2, [r8]
 8009d10:	3a01      	subs	r2, #1
 8009d12:	42b2      	cmp	r2, r6
 8009d14:	d10a      	bne.n	8009d2c <__gethex+0x3f0>
 8009d16:	1171      	asrs	r1, r6, #5
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d1e:	f006 061f 	and.w	r6, r6, #31
 8009d22:	fa02 f606 	lsl.w	r6, r2, r6
 8009d26:	421e      	tst	r6, r3
 8009d28:	bf18      	it	ne
 8009d2a:	4617      	movne	r7, r2
 8009d2c:	f047 0720 	orr.w	r7, r7, #32
 8009d30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d32:	601c      	str	r4, [r3, #0]
 8009d34:	9b04      	ldr	r3, [sp, #16]
 8009d36:	601d      	str	r5, [r3, #0]
 8009d38:	e695      	b.n	8009a66 <__gethex+0x12a>
 8009d3a:	4299      	cmp	r1, r3
 8009d3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d40:	d8d8      	bhi.n	8009cf4 <__gethex+0x3b8>
 8009d42:	68a3      	ldr	r3, [r4, #8]
 8009d44:	459b      	cmp	fp, r3
 8009d46:	db19      	blt.n	8009d7c <__gethex+0x440>
 8009d48:	6861      	ldr	r1, [r4, #4]
 8009d4a:	ee18 0a10 	vmov	r0, s16
 8009d4e:	3101      	adds	r1, #1
 8009d50:	f000 f91e 	bl	8009f90 <_Balloc>
 8009d54:	4681      	mov	r9, r0
 8009d56:	b918      	cbnz	r0, 8009d60 <__gethex+0x424>
 8009d58:	4b1a      	ldr	r3, [pc, #104]	; (8009dc4 <__gethex+0x488>)
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	2184      	movs	r1, #132	; 0x84
 8009d5e:	e6a8      	b.n	8009ab2 <__gethex+0x176>
 8009d60:	6922      	ldr	r2, [r4, #16]
 8009d62:	3202      	adds	r2, #2
 8009d64:	f104 010c 	add.w	r1, r4, #12
 8009d68:	0092      	lsls	r2, r2, #2
 8009d6a:	300c      	adds	r0, #12
 8009d6c:	f7fd f9b4 	bl	80070d8 <memcpy>
 8009d70:	4621      	mov	r1, r4
 8009d72:	ee18 0a10 	vmov	r0, s16
 8009d76:	f000 f94b 	bl	800a010 <_Bfree>
 8009d7a:	464c      	mov	r4, r9
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d84:	6122      	str	r2, [r4, #16]
 8009d86:	2201      	movs	r2, #1
 8009d88:	615a      	str	r2, [r3, #20]
 8009d8a:	e7bb      	b.n	8009d04 <__gethex+0x3c8>
 8009d8c:	6922      	ldr	r2, [r4, #16]
 8009d8e:	455a      	cmp	r2, fp
 8009d90:	dd0b      	ble.n	8009daa <__gethex+0x46e>
 8009d92:	2101      	movs	r1, #1
 8009d94:	4620      	mov	r0, r4
 8009d96:	f7ff fd69 	bl	800986c <rshift>
 8009d9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d9e:	3501      	adds	r5, #1
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	f6ff aed0 	blt.w	8009b46 <__gethex+0x20a>
 8009da6:	2701      	movs	r7, #1
 8009da8:	e7c0      	b.n	8009d2c <__gethex+0x3f0>
 8009daa:	f016 061f 	ands.w	r6, r6, #31
 8009dae:	d0fa      	beq.n	8009da6 <__gethex+0x46a>
 8009db0:	4453      	add	r3, sl
 8009db2:	f1c6 0620 	rsb	r6, r6, #32
 8009db6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009dba:	f000 f9db 	bl	800a174 <__hi0bits>
 8009dbe:	42b0      	cmp	r0, r6
 8009dc0:	dbe7      	blt.n	8009d92 <__gethex+0x456>
 8009dc2:	e7f0      	b.n	8009da6 <__gethex+0x46a>
 8009dc4:	0800bc58 	.word	0x0800bc58

08009dc8 <L_shift>:
 8009dc8:	f1c2 0208 	rsb	r2, r2, #8
 8009dcc:	0092      	lsls	r2, r2, #2
 8009dce:	b570      	push	{r4, r5, r6, lr}
 8009dd0:	f1c2 0620 	rsb	r6, r2, #32
 8009dd4:	6843      	ldr	r3, [r0, #4]
 8009dd6:	6804      	ldr	r4, [r0, #0]
 8009dd8:	fa03 f506 	lsl.w	r5, r3, r6
 8009ddc:	432c      	orrs	r4, r5
 8009dde:	40d3      	lsrs	r3, r2
 8009de0:	6004      	str	r4, [r0, #0]
 8009de2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009de6:	4288      	cmp	r0, r1
 8009de8:	d3f4      	bcc.n	8009dd4 <L_shift+0xc>
 8009dea:	bd70      	pop	{r4, r5, r6, pc}

08009dec <__match>:
 8009dec:	b530      	push	{r4, r5, lr}
 8009dee:	6803      	ldr	r3, [r0, #0]
 8009df0:	3301      	adds	r3, #1
 8009df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009df6:	b914      	cbnz	r4, 8009dfe <__match+0x12>
 8009df8:	6003      	str	r3, [r0, #0]
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	bd30      	pop	{r4, r5, pc}
 8009dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e06:	2d19      	cmp	r5, #25
 8009e08:	bf98      	it	ls
 8009e0a:	3220      	addls	r2, #32
 8009e0c:	42a2      	cmp	r2, r4
 8009e0e:	d0f0      	beq.n	8009df2 <__match+0x6>
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7f3      	b.n	8009dfc <__match+0x10>

08009e14 <__hexnan>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	680b      	ldr	r3, [r1, #0]
 8009e1a:	115e      	asrs	r6, r3, #5
 8009e1c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e20:	f013 031f 	ands.w	r3, r3, #31
 8009e24:	b087      	sub	sp, #28
 8009e26:	bf18      	it	ne
 8009e28:	3604      	addne	r6, #4
 8009e2a:	2500      	movs	r5, #0
 8009e2c:	1f37      	subs	r7, r6, #4
 8009e2e:	4690      	mov	r8, r2
 8009e30:	6802      	ldr	r2, [r0, #0]
 8009e32:	9301      	str	r3, [sp, #4]
 8009e34:	4682      	mov	sl, r0
 8009e36:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e3a:	46b9      	mov	r9, r7
 8009e3c:	463c      	mov	r4, r7
 8009e3e:	9502      	str	r5, [sp, #8]
 8009e40:	46ab      	mov	fp, r5
 8009e42:	7851      	ldrb	r1, [r2, #1]
 8009e44:	1c53      	adds	r3, r2, #1
 8009e46:	9303      	str	r3, [sp, #12]
 8009e48:	b341      	cbz	r1, 8009e9c <__hexnan+0x88>
 8009e4a:	4608      	mov	r0, r1
 8009e4c:	9205      	str	r2, [sp, #20]
 8009e4e:	9104      	str	r1, [sp, #16]
 8009e50:	f7ff fd5e 	bl	8009910 <__hexdig_fun>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d14f      	bne.n	8009ef8 <__hexnan+0xe4>
 8009e58:	9904      	ldr	r1, [sp, #16]
 8009e5a:	9a05      	ldr	r2, [sp, #20]
 8009e5c:	2920      	cmp	r1, #32
 8009e5e:	d818      	bhi.n	8009e92 <__hexnan+0x7e>
 8009e60:	9b02      	ldr	r3, [sp, #8]
 8009e62:	459b      	cmp	fp, r3
 8009e64:	dd13      	ble.n	8009e8e <__hexnan+0x7a>
 8009e66:	454c      	cmp	r4, r9
 8009e68:	d206      	bcs.n	8009e78 <__hexnan+0x64>
 8009e6a:	2d07      	cmp	r5, #7
 8009e6c:	dc04      	bgt.n	8009e78 <__hexnan+0x64>
 8009e6e:	462a      	mov	r2, r5
 8009e70:	4649      	mov	r1, r9
 8009e72:	4620      	mov	r0, r4
 8009e74:	f7ff ffa8 	bl	8009dc8 <L_shift>
 8009e78:	4544      	cmp	r4, r8
 8009e7a:	d950      	bls.n	8009f1e <__hexnan+0x10a>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f1a4 0904 	sub.w	r9, r4, #4
 8009e82:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e86:	f8cd b008 	str.w	fp, [sp, #8]
 8009e8a:	464c      	mov	r4, r9
 8009e8c:	461d      	mov	r5, r3
 8009e8e:	9a03      	ldr	r2, [sp, #12]
 8009e90:	e7d7      	b.n	8009e42 <__hexnan+0x2e>
 8009e92:	2929      	cmp	r1, #41	; 0x29
 8009e94:	d156      	bne.n	8009f44 <__hexnan+0x130>
 8009e96:	3202      	adds	r2, #2
 8009e98:	f8ca 2000 	str.w	r2, [sl]
 8009e9c:	f1bb 0f00 	cmp.w	fp, #0
 8009ea0:	d050      	beq.n	8009f44 <__hexnan+0x130>
 8009ea2:	454c      	cmp	r4, r9
 8009ea4:	d206      	bcs.n	8009eb4 <__hexnan+0xa0>
 8009ea6:	2d07      	cmp	r5, #7
 8009ea8:	dc04      	bgt.n	8009eb4 <__hexnan+0xa0>
 8009eaa:	462a      	mov	r2, r5
 8009eac:	4649      	mov	r1, r9
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f7ff ff8a 	bl	8009dc8 <L_shift>
 8009eb4:	4544      	cmp	r4, r8
 8009eb6:	d934      	bls.n	8009f22 <__hexnan+0x10e>
 8009eb8:	f1a8 0204 	sub.w	r2, r8, #4
 8009ebc:	4623      	mov	r3, r4
 8009ebe:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ec2:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ec6:	429f      	cmp	r7, r3
 8009ec8:	d2f9      	bcs.n	8009ebe <__hexnan+0xaa>
 8009eca:	1b3b      	subs	r3, r7, r4
 8009ecc:	f023 0303 	bic.w	r3, r3, #3
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	3401      	adds	r4, #1
 8009ed4:	3e03      	subs	r6, #3
 8009ed6:	42b4      	cmp	r4, r6
 8009ed8:	bf88      	it	hi
 8009eda:	2304      	movhi	r3, #4
 8009edc:	4443      	add	r3, r8
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f843 2b04 	str.w	r2, [r3], #4
 8009ee4:	429f      	cmp	r7, r3
 8009ee6:	d2fb      	bcs.n	8009ee0 <__hexnan+0xcc>
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	b91b      	cbnz	r3, 8009ef4 <__hexnan+0xe0>
 8009eec:	4547      	cmp	r7, r8
 8009eee:	d127      	bne.n	8009f40 <__hexnan+0x12c>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	603b      	str	r3, [r7, #0]
 8009ef4:	2005      	movs	r0, #5
 8009ef6:	e026      	b.n	8009f46 <__hexnan+0x132>
 8009ef8:	3501      	adds	r5, #1
 8009efa:	2d08      	cmp	r5, #8
 8009efc:	f10b 0b01 	add.w	fp, fp, #1
 8009f00:	dd06      	ble.n	8009f10 <__hexnan+0xfc>
 8009f02:	4544      	cmp	r4, r8
 8009f04:	d9c3      	bls.n	8009e8e <__hexnan+0x7a>
 8009f06:	2300      	movs	r3, #0
 8009f08:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f0c:	2501      	movs	r5, #1
 8009f0e:	3c04      	subs	r4, #4
 8009f10:	6822      	ldr	r2, [r4, #0]
 8009f12:	f000 000f 	and.w	r0, r0, #15
 8009f16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009f1a:	6022      	str	r2, [r4, #0]
 8009f1c:	e7b7      	b.n	8009e8e <__hexnan+0x7a>
 8009f1e:	2508      	movs	r5, #8
 8009f20:	e7b5      	b.n	8009e8e <__hexnan+0x7a>
 8009f22:	9b01      	ldr	r3, [sp, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d0df      	beq.n	8009ee8 <__hexnan+0xd4>
 8009f28:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2c:	f1c3 0320 	rsb	r3, r3, #32
 8009f30:	fa22 f303 	lsr.w	r3, r2, r3
 8009f34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f38:	401a      	ands	r2, r3
 8009f3a:	f846 2c04 	str.w	r2, [r6, #-4]
 8009f3e:	e7d3      	b.n	8009ee8 <__hexnan+0xd4>
 8009f40:	3f04      	subs	r7, #4
 8009f42:	e7d1      	b.n	8009ee8 <__hexnan+0xd4>
 8009f44:	2004      	movs	r0, #4
 8009f46:	b007      	add	sp, #28
 8009f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f4c <_localeconv_r>:
 8009f4c:	4800      	ldr	r0, [pc, #0]	; (8009f50 <_localeconv_r+0x4>)
 8009f4e:	4770      	bx	lr
 8009f50:	20000174 	.word	0x20000174

08009f54 <__ascii_mbtowc>:
 8009f54:	b082      	sub	sp, #8
 8009f56:	b901      	cbnz	r1, 8009f5a <__ascii_mbtowc+0x6>
 8009f58:	a901      	add	r1, sp, #4
 8009f5a:	b142      	cbz	r2, 8009f6e <__ascii_mbtowc+0x1a>
 8009f5c:	b14b      	cbz	r3, 8009f72 <__ascii_mbtowc+0x1e>
 8009f5e:	7813      	ldrb	r3, [r2, #0]
 8009f60:	600b      	str	r3, [r1, #0]
 8009f62:	7812      	ldrb	r2, [r2, #0]
 8009f64:	1e10      	subs	r0, r2, #0
 8009f66:	bf18      	it	ne
 8009f68:	2001      	movne	r0, #1
 8009f6a:	b002      	add	sp, #8
 8009f6c:	4770      	bx	lr
 8009f6e:	4610      	mov	r0, r2
 8009f70:	e7fb      	b.n	8009f6a <__ascii_mbtowc+0x16>
 8009f72:	f06f 0001 	mvn.w	r0, #1
 8009f76:	e7f8      	b.n	8009f6a <__ascii_mbtowc+0x16>

08009f78 <__malloc_lock>:
 8009f78:	4801      	ldr	r0, [pc, #4]	; (8009f80 <__malloc_lock+0x8>)
 8009f7a:	f7f7 bc64 	b.w	8001846 <__retarget_lock_acquire_recursive>
 8009f7e:	bf00      	nop
 8009f80:	20000464 	.word	0x20000464

08009f84 <__malloc_unlock>:
 8009f84:	4801      	ldr	r0, [pc, #4]	; (8009f8c <__malloc_unlock+0x8>)
 8009f86:	f7f7 bc72 	b.w	800186e <__retarget_lock_release_recursive>
 8009f8a:	bf00      	nop
 8009f8c:	20000464 	.word	0x20000464

08009f90 <_Balloc>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f94:	4604      	mov	r4, r0
 8009f96:	460d      	mov	r5, r1
 8009f98:	b976      	cbnz	r6, 8009fb8 <_Balloc+0x28>
 8009f9a:	2010      	movs	r0, #16
 8009f9c:	f7fd f894 	bl	80070c8 <malloc>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	6260      	str	r0, [r4, #36]	; 0x24
 8009fa4:	b920      	cbnz	r0, 8009fb0 <_Balloc+0x20>
 8009fa6:	4b18      	ldr	r3, [pc, #96]	; (800a008 <_Balloc+0x78>)
 8009fa8:	4818      	ldr	r0, [pc, #96]	; (800a00c <_Balloc+0x7c>)
 8009faa:	2166      	movs	r1, #102	; 0x66
 8009fac:	f000 fe4a 	bl	800ac44 <__assert_func>
 8009fb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fb4:	6006      	str	r6, [r0, #0]
 8009fb6:	60c6      	str	r6, [r0, #12]
 8009fb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009fba:	68f3      	ldr	r3, [r6, #12]
 8009fbc:	b183      	cbz	r3, 8009fe0 <_Balloc+0x50>
 8009fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fc6:	b9b8      	cbnz	r0, 8009ff8 <_Balloc+0x68>
 8009fc8:	2101      	movs	r1, #1
 8009fca:	fa01 f605 	lsl.w	r6, r1, r5
 8009fce:	1d72      	adds	r2, r6, #5
 8009fd0:	0092      	lsls	r2, r2, #2
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 fc9a 	bl	800a90c <_calloc_r>
 8009fd8:	b160      	cbz	r0, 8009ff4 <_Balloc+0x64>
 8009fda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fde:	e00e      	b.n	8009ffe <_Balloc+0x6e>
 8009fe0:	2221      	movs	r2, #33	; 0x21
 8009fe2:	2104      	movs	r1, #4
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f000 fc91 	bl	800a90c <_calloc_r>
 8009fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fec:	60f0      	str	r0, [r6, #12]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e4      	bne.n	8009fbe <_Balloc+0x2e>
 8009ff4:	2000      	movs	r0, #0
 8009ff6:	bd70      	pop	{r4, r5, r6, pc}
 8009ff8:	6802      	ldr	r2, [r0, #0]
 8009ffa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ffe:	2300      	movs	r3, #0
 800a000:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a004:	e7f7      	b.n	8009ff6 <_Balloc+0x66>
 800a006:	bf00      	nop
 800a008:	0800bbe6 	.word	0x0800bbe6
 800a00c:	0800bce4 	.word	0x0800bce4

0800a010 <_Bfree>:
 800a010:	b570      	push	{r4, r5, r6, lr}
 800a012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a014:	4605      	mov	r5, r0
 800a016:	460c      	mov	r4, r1
 800a018:	b976      	cbnz	r6, 800a038 <_Bfree+0x28>
 800a01a:	2010      	movs	r0, #16
 800a01c:	f7fd f854 	bl	80070c8 <malloc>
 800a020:	4602      	mov	r2, r0
 800a022:	6268      	str	r0, [r5, #36]	; 0x24
 800a024:	b920      	cbnz	r0, 800a030 <_Bfree+0x20>
 800a026:	4b09      	ldr	r3, [pc, #36]	; (800a04c <_Bfree+0x3c>)
 800a028:	4809      	ldr	r0, [pc, #36]	; (800a050 <_Bfree+0x40>)
 800a02a:	218a      	movs	r1, #138	; 0x8a
 800a02c:	f000 fe0a 	bl	800ac44 <__assert_func>
 800a030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a034:	6006      	str	r6, [r0, #0]
 800a036:	60c6      	str	r6, [r0, #12]
 800a038:	b13c      	cbz	r4, 800a04a <_Bfree+0x3a>
 800a03a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a03c:	6862      	ldr	r2, [r4, #4]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a044:	6021      	str	r1, [r4, #0]
 800a046:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	0800bbe6 	.word	0x0800bbe6
 800a050:	0800bce4 	.word	0x0800bce4

0800a054 <__multadd>:
 800a054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a058:	690d      	ldr	r5, [r1, #16]
 800a05a:	4607      	mov	r7, r0
 800a05c:	460c      	mov	r4, r1
 800a05e:	461e      	mov	r6, r3
 800a060:	f101 0c14 	add.w	ip, r1, #20
 800a064:	2000      	movs	r0, #0
 800a066:	f8dc 3000 	ldr.w	r3, [ip]
 800a06a:	b299      	uxth	r1, r3
 800a06c:	fb02 6101 	mla	r1, r2, r1, r6
 800a070:	0c1e      	lsrs	r6, r3, #16
 800a072:	0c0b      	lsrs	r3, r1, #16
 800a074:	fb02 3306 	mla	r3, r2, r6, r3
 800a078:	b289      	uxth	r1, r1
 800a07a:	3001      	adds	r0, #1
 800a07c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a080:	4285      	cmp	r5, r0
 800a082:	f84c 1b04 	str.w	r1, [ip], #4
 800a086:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a08a:	dcec      	bgt.n	800a066 <__multadd+0x12>
 800a08c:	b30e      	cbz	r6, 800a0d2 <__multadd+0x7e>
 800a08e:	68a3      	ldr	r3, [r4, #8]
 800a090:	42ab      	cmp	r3, r5
 800a092:	dc19      	bgt.n	800a0c8 <__multadd+0x74>
 800a094:	6861      	ldr	r1, [r4, #4]
 800a096:	4638      	mov	r0, r7
 800a098:	3101      	adds	r1, #1
 800a09a:	f7ff ff79 	bl	8009f90 <_Balloc>
 800a09e:	4680      	mov	r8, r0
 800a0a0:	b928      	cbnz	r0, 800a0ae <__multadd+0x5a>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	4b0c      	ldr	r3, [pc, #48]	; (800a0d8 <__multadd+0x84>)
 800a0a6:	480d      	ldr	r0, [pc, #52]	; (800a0dc <__multadd+0x88>)
 800a0a8:	21b5      	movs	r1, #181	; 0xb5
 800a0aa:	f000 fdcb 	bl	800ac44 <__assert_func>
 800a0ae:	6922      	ldr	r2, [r4, #16]
 800a0b0:	3202      	adds	r2, #2
 800a0b2:	f104 010c 	add.w	r1, r4, #12
 800a0b6:	0092      	lsls	r2, r2, #2
 800a0b8:	300c      	adds	r0, #12
 800a0ba:	f7fd f80d 	bl	80070d8 <memcpy>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff ffa5 	bl	800a010 <_Bfree>
 800a0c6:	4644      	mov	r4, r8
 800a0c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	615e      	str	r6, [r3, #20]
 800a0d0:	6125      	str	r5, [r4, #16]
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0d8:	0800bc58 	.word	0x0800bc58
 800a0dc:	0800bce4 	.word	0x0800bce4

0800a0e0 <__s2b>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	4615      	mov	r5, r2
 800a0e8:	461f      	mov	r7, r3
 800a0ea:	2209      	movs	r2, #9
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	db09      	blt.n	800a110 <__s2b+0x30>
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7ff ff47 	bl	8009f90 <_Balloc>
 800a102:	b940      	cbnz	r0, 800a116 <__s2b+0x36>
 800a104:	4602      	mov	r2, r0
 800a106:	4b19      	ldr	r3, [pc, #100]	; (800a16c <__s2b+0x8c>)
 800a108:	4819      	ldr	r0, [pc, #100]	; (800a170 <__s2b+0x90>)
 800a10a:	21ce      	movs	r1, #206	; 0xce
 800a10c:	f000 fd9a 	bl	800ac44 <__assert_func>
 800a110:	0052      	lsls	r2, r2, #1
 800a112:	3101      	adds	r1, #1
 800a114:	e7f0      	b.n	800a0f8 <__s2b+0x18>
 800a116:	9b08      	ldr	r3, [sp, #32]
 800a118:	6143      	str	r3, [r0, #20]
 800a11a:	2d09      	cmp	r5, #9
 800a11c:	f04f 0301 	mov.w	r3, #1
 800a120:	6103      	str	r3, [r0, #16]
 800a122:	dd16      	ble.n	800a152 <__s2b+0x72>
 800a124:	f104 0909 	add.w	r9, r4, #9
 800a128:	46c8      	mov	r8, r9
 800a12a:	442c      	add	r4, r5
 800a12c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a130:	4601      	mov	r1, r0
 800a132:	3b30      	subs	r3, #48	; 0x30
 800a134:	220a      	movs	r2, #10
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ff8c 	bl	800a054 <__multadd>
 800a13c:	45a0      	cmp	r8, r4
 800a13e:	d1f5      	bne.n	800a12c <__s2b+0x4c>
 800a140:	f1a5 0408 	sub.w	r4, r5, #8
 800a144:	444c      	add	r4, r9
 800a146:	1b2d      	subs	r5, r5, r4
 800a148:	1963      	adds	r3, r4, r5
 800a14a:	42bb      	cmp	r3, r7
 800a14c:	db04      	blt.n	800a158 <__s2b+0x78>
 800a14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a152:	340a      	adds	r4, #10
 800a154:	2509      	movs	r5, #9
 800a156:	e7f6      	b.n	800a146 <__s2b+0x66>
 800a158:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a15c:	4601      	mov	r1, r0
 800a15e:	3b30      	subs	r3, #48	; 0x30
 800a160:	220a      	movs	r2, #10
 800a162:	4630      	mov	r0, r6
 800a164:	f7ff ff76 	bl	800a054 <__multadd>
 800a168:	e7ee      	b.n	800a148 <__s2b+0x68>
 800a16a:	bf00      	nop
 800a16c:	0800bc58 	.word	0x0800bc58
 800a170:	0800bce4 	.word	0x0800bce4

0800a174 <__hi0bits>:
 800a174:	0c03      	lsrs	r3, r0, #16
 800a176:	041b      	lsls	r3, r3, #16
 800a178:	b9d3      	cbnz	r3, 800a1b0 <__hi0bits+0x3c>
 800a17a:	0400      	lsls	r0, r0, #16
 800a17c:	2310      	movs	r3, #16
 800a17e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a182:	bf04      	itt	eq
 800a184:	0200      	lsleq	r0, r0, #8
 800a186:	3308      	addeq	r3, #8
 800a188:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a18c:	bf04      	itt	eq
 800a18e:	0100      	lsleq	r0, r0, #4
 800a190:	3304      	addeq	r3, #4
 800a192:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a196:	bf04      	itt	eq
 800a198:	0080      	lsleq	r0, r0, #2
 800a19a:	3302      	addeq	r3, #2
 800a19c:	2800      	cmp	r0, #0
 800a19e:	db05      	blt.n	800a1ac <__hi0bits+0x38>
 800a1a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a1a4:	f103 0301 	add.w	r3, r3, #1
 800a1a8:	bf08      	it	eq
 800a1aa:	2320      	moveq	r3, #32
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	4770      	bx	lr
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	e7e4      	b.n	800a17e <__hi0bits+0xa>

0800a1b4 <__lo0bits>:
 800a1b4:	6803      	ldr	r3, [r0, #0]
 800a1b6:	f013 0207 	ands.w	r2, r3, #7
 800a1ba:	4601      	mov	r1, r0
 800a1bc:	d00b      	beq.n	800a1d6 <__lo0bits+0x22>
 800a1be:	07da      	lsls	r2, r3, #31
 800a1c0:	d423      	bmi.n	800a20a <__lo0bits+0x56>
 800a1c2:	0798      	lsls	r0, r3, #30
 800a1c4:	bf49      	itett	mi
 800a1c6:	085b      	lsrmi	r3, r3, #1
 800a1c8:	089b      	lsrpl	r3, r3, #2
 800a1ca:	2001      	movmi	r0, #1
 800a1cc:	600b      	strmi	r3, [r1, #0]
 800a1ce:	bf5c      	itt	pl
 800a1d0:	600b      	strpl	r3, [r1, #0]
 800a1d2:	2002      	movpl	r0, #2
 800a1d4:	4770      	bx	lr
 800a1d6:	b298      	uxth	r0, r3
 800a1d8:	b9a8      	cbnz	r0, 800a206 <__lo0bits+0x52>
 800a1da:	0c1b      	lsrs	r3, r3, #16
 800a1dc:	2010      	movs	r0, #16
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	b90a      	cbnz	r2, 800a1e6 <__lo0bits+0x32>
 800a1e2:	3008      	adds	r0, #8
 800a1e4:	0a1b      	lsrs	r3, r3, #8
 800a1e6:	071a      	lsls	r2, r3, #28
 800a1e8:	bf04      	itt	eq
 800a1ea:	091b      	lsreq	r3, r3, #4
 800a1ec:	3004      	addeq	r0, #4
 800a1ee:	079a      	lsls	r2, r3, #30
 800a1f0:	bf04      	itt	eq
 800a1f2:	089b      	lsreq	r3, r3, #2
 800a1f4:	3002      	addeq	r0, #2
 800a1f6:	07da      	lsls	r2, r3, #31
 800a1f8:	d403      	bmi.n	800a202 <__lo0bits+0x4e>
 800a1fa:	085b      	lsrs	r3, r3, #1
 800a1fc:	f100 0001 	add.w	r0, r0, #1
 800a200:	d005      	beq.n	800a20e <__lo0bits+0x5a>
 800a202:	600b      	str	r3, [r1, #0]
 800a204:	4770      	bx	lr
 800a206:	4610      	mov	r0, r2
 800a208:	e7e9      	b.n	800a1de <__lo0bits+0x2a>
 800a20a:	2000      	movs	r0, #0
 800a20c:	4770      	bx	lr
 800a20e:	2020      	movs	r0, #32
 800a210:	4770      	bx	lr
	...

0800a214 <__i2b>:
 800a214:	b510      	push	{r4, lr}
 800a216:	460c      	mov	r4, r1
 800a218:	2101      	movs	r1, #1
 800a21a:	f7ff feb9 	bl	8009f90 <_Balloc>
 800a21e:	4602      	mov	r2, r0
 800a220:	b928      	cbnz	r0, 800a22e <__i2b+0x1a>
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <__i2b+0x24>)
 800a224:	4805      	ldr	r0, [pc, #20]	; (800a23c <__i2b+0x28>)
 800a226:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a22a:	f000 fd0b 	bl	800ac44 <__assert_func>
 800a22e:	2301      	movs	r3, #1
 800a230:	6144      	str	r4, [r0, #20]
 800a232:	6103      	str	r3, [r0, #16]
 800a234:	bd10      	pop	{r4, pc}
 800a236:	bf00      	nop
 800a238:	0800bc58 	.word	0x0800bc58
 800a23c:	0800bce4 	.word	0x0800bce4

0800a240 <__multiply>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	4691      	mov	r9, r2
 800a246:	690a      	ldr	r2, [r1, #16]
 800a248:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	bfb8      	it	lt
 800a250:	460b      	movlt	r3, r1
 800a252:	460c      	mov	r4, r1
 800a254:	bfbc      	itt	lt
 800a256:	464c      	movlt	r4, r9
 800a258:	4699      	movlt	r9, r3
 800a25a:	6927      	ldr	r7, [r4, #16]
 800a25c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a260:	68a3      	ldr	r3, [r4, #8]
 800a262:	6861      	ldr	r1, [r4, #4]
 800a264:	eb07 060a 	add.w	r6, r7, sl
 800a268:	42b3      	cmp	r3, r6
 800a26a:	b085      	sub	sp, #20
 800a26c:	bfb8      	it	lt
 800a26e:	3101      	addlt	r1, #1
 800a270:	f7ff fe8e 	bl	8009f90 <_Balloc>
 800a274:	b930      	cbnz	r0, 800a284 <__multiply+0x44>
 800a276:	4602      	mov	r2, r0
 800a278:	4b44      	ldr	r3, [pc, #272]	; (800a38c <__multiply+0x14c>)
 800a27a:	4845      	ldr	r0, [pc, #276]	; (800a390 <__multiply+0x150>)
 800a27c:	f240 115d 	movw	r1, #349	; 0x15d
 800a280:	f000 fce0 	bl	800ac44 <__assert_func>
 800a284:	f100 0514 	add.w	r5, r0, #20
 800a288:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a28c:	462b      	mov	r3, r5
 800a28e:	2200      	movs	r2, #0
 800a290:	4543      	cmp	r3, r8
 800a292:	d321      	bcc.n	800a2d8 <__multiply+0x98>
 800a294:	f104 0314 	add.w	r3, r4, #20
 800a298:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a29c:	f109 0314 	add.w	r3, r9, #20
 800a2a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a2a4:	9202      	str	r2, [sp, #8]
 800a2a6:	1b3a      	subs	r2, r7, r4
 800a2a8:	3a15      	subs	r2, #21
 800a2aa:	f022 0203 	bic.w	r2, r2, #3
 800a2ae:	3204      	adds	r2, #4
 800a2b0:	f104 0115 	add.w	r1, r4, #21
 800a2b4:	428f      	cmp	r7, r1
 800a2b6:	bf38      	it	cc
 800a2b8:	2204      	movcc	r2, #4
 800a2ba:	9201      	str	r2, [sp, #4]
 800a2bc:	9a02      	ldr	r2, [sp, #8]
 800a2be:	9303      	str	r3, [sp, #12]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d80c      	bhi.n	800a2de <__multiply+0x9e>
 800a2c4:	2e00      	cmp	r6, #0
 800a2c6:	dd03      	ble.n	800a2d0 <__multiply+0x90>
 800a2c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d05a      	beq.n	800a386 <__multiply+0x146>
 800a2d0:	6106      	str	r6, [r0, #16]
 800a2d2:	b005      	add	sp, #20
 800a2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d8:	f843 2b04 	str.w	r2, [r3], #4
 800a2dc:	e7d8      	b.n	800a290 <__multiply+0x50>
 800a2de:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2e2:	f1ba 0f00 	cmp.w	sl, #0
 800a2e6:	d024      	beq.n	800a332 <__multiply+0xf2>
 800a2e8:	f104 0e14 	add.w	lr, r4, #20
 800a2ec:	46a9      	mov	r9, r5
 800a2ee:	f04f 0c00 	mov.w	ip, #0
 800a2f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a2f6:	f8d9 1000 	ldr.w	r1, [r9]
 800a2fa:	fa1f fb82 	uxth.w	fp, r2
 800a2fe:	b289      	uxth	r1, r1
 800a300:	fb0a 110b 	mla	r1, sl, fp, r1
 800a304:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a308:	f8d9 2000 	ldr.w	r2, [r9]
 800a30c:	4461      	add	r1, ip
 800a30e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a312:	fb0a c20b 	mla	r2, sl, fp, ip
 800a316:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a31a:	b289      	uxth	r1, r1
 800a31c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a320:	4577      	cmp	r7, lr
 800a322:	f849 1b04 	str.w	r1, [r9], #4
 800a326:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a32a:	d8e2      	bhi.n	800a2f2 <__multiply+0xb2>
 800a32c:	9a01      	ldr	r2, [sp, #4]
 800a32e:	f845 c002 	str.w	ip, [r5, r2]
 800a332:	9a03      	ldr	r2, [sp, #12]
 800a334:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a338:	3304      	adds	r3, #4
 800a33a:	f1b9 0f00 	cmp.w	r9, #0
 800a33e:	d020      	beq.n	800a382 <__multiply+0x142>
 800a340:	6829      	ldr	r1, [r5, #0]
 800a342:	f104 0c14 	add.w	ip, r4, #20
 800a346:	46ae      	mov	lr, r5
 800a348:	f04f 0a00 	mov.w	sl, #0
 800a34c:	f8bc b000 	ldrh.w	fp, [ip]
 800a350:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a354:	fb09 220b 	mla	r2, r9, fp, r2
 800a358:	4492      	add	sl, r2
 800a35a:	b289      	uxth	r1, r1
 800a35c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a360:	f84e 1b04 	str.w	r1, [lr], #4
 800a364:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a368:	f8be 1000 	ldrh.w	r1, [lr]
 800a36c:	0c12      	lsrs	r2, r2, #16
 800a36e:	fb09 1102 	mla	r1, r9, r2, r1
 800a372:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a376:	4567      	cmp	r7, ip
 800a378:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a37c:	d8e6      	bhi.n	800a34c <__multiply+0x10c>
 800a37e:	9a01      	ldr	r2, [sp, #4]
 800a380:	50a9      	str	r1, [r5, r2]
 800a382:	3504      	adds	r5, #4
 800a384:	e79a      	b.n	800a2bc <__multiply+0x7c>
 800a386:	3e01      	subs	r6, #1
 800a388:	e79c      	b.n	800a2c4 <__multiply+0x84>
 800a38a:	bf00      	nop
 800a38c:	0800bc58 	.word	0x0800bc58
 800a390:	0800bce4 	.word	0x0800bce4

0800a394 <__pow5mult>:
 800a394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a398:	4615      	mov	r5, r2
 800a39a:	f012 0203 	ands.w	r2, r2, #3
 800a39e:	4606      	mov	r6, r0
 800a3a0:	460f      	mov	r7, r1
 800a3a2:	d007      	beq.n	800a3b4 <__pow5mult+0x20>
 800a3a4:	4c25      	ldr	r4, [pc, #148]	; (800a43c <__pow5mult+0xa8>)
 800a3a6:	3a01      	subs	r2, #1
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3ae:	f7ff fe51 	bl	800a054 <__multadd>
 800a3b2:	4607      	mov	r7, r0
 800a3b4:	10ad      	asrs	r5, r5, #2
 800a3b6:	d03d      	beq.n	800a434 <__pow5mult+0xa0>
 800a3b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3ba:	b97c      	cbnz	r4, 800a3dc <__pow5mult+0x48>
 800a3bc:	2010      	movs	r0, #16
 800a3be:	f7fc fe83 	bl	80070c8 <malloc>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	6270      	str	r0, [r6, #36]	; 0x24
 800a3c6:	b928      	cbnz	r0, 800a3d4 <__pow5mult+0x40>
 800a3c8:	4b1d      	ldr	r3, [pc, #116]	; (800a440 <__pow5mult+0xac>)
 800a3ca:	481e      	ldr	r0, [pc, #120]	; (800a444 <__pow5mult+0xb0>)
 800a3cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3d0:	f000 fc38 	bl	800ac44 <__assert_func>
 800a3d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3d8:	6004      	str	r4, [r0, #0]
 800a3da:	60c4      	str	r4, [r0, #12]
 800a3dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3e4:	b94c      	cbnz	r4, 800a3fa <__pow5mult+0x66>
 800a3e6:	f240 2171 	movw	r1, #625	; 0x271
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	f7ff ff12 	bl	800a214 <__i2b>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	6003      	str	r3, [r0, #0]
 800a3fa:	f04f 0900 	mov.w	r9, #0
 800a3fe:	07eb      	lsls	r3, r5, #31
 800a400:	d50a      	bpl.n	800a418 <__pow5mult+0x84>
 800a402:	4639      	mov	r1, r7
 800a404:	4622      	mov	r2, r4
 800a406:	4630      	mov	r0, r6
 800a408:	f7ff ff1a 	bl	800a240 <__multiply>
 800a40c:	4639      	mov	r1, r7
 800a40e:	4680      	mov	r8, r0
 800a410:	4630      	mov	r0, r6
 800a412:	f7ff fdfd 	bl	800a010 <_Bfree>
 800a416:	4647      	mov	r7, r8
 800a418:	106d      	asrs	r5, r5, #1
 800a41a:	d00b      	beq.n	800a434 <__pow5mult+0xa0>
 800a41c:	6820      	ldr	r0, [r4, #0]
 800a41e:	b938      	cbnz	r0, 800a430 <__pow5mult+0x9c>
 800a420:	4622      	mov	r2, r4
 800a422:	4621      	mov	r1, r4
 800a424:	4630      	mov	r0, r6
 800a426:	f7ff ff0b 	bl	800a240 <__multiply>
 800a42a:	6020      	str	r0, [r4, #0]
 800a42c:	f8c0 9000 	str.w	r9, [r0]
 800a430:	4604      	mov	r4, r0
 800a432:	e7e4      	b.n	800a3fe <__pow5mult+0x6a>
 800a434:	4638      	mov	r0, r7
 800a436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a43a:	bf00      	nop
 800a43c:	0800be30 	.word	0x0800be30
 800a440:	0800bbe6 	.word	0x0800bbe6
 800a444:	0800bce4 	.word	0x0800bce4

0800a448 <__lshift>:
 800a448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a44c:	460c      	mov	r4, r1
 800a44e:	6849      	ldr	r1, [r1, #4]
 800a450:	6923      	ldr	r3, [r4, #16]
 800a452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a456:	68a3      	ldr	r3, [r4, #8]
 800a458:	4607      	mov	r7, r0
 800a45a:	4691      	mov	r9, r2
 800a45c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a460:	f108 0601 	add.w	r6, r8, #1
 800a464:	42b3      	cmp	r3, r6
 800a466:	db0b      	blt.n	800a480 <__lshift+0x38>
 800a468:	4638      	mov	r0, r7
 800a46a:	f7ff fd91 	bl	8009f90 <_Balloc>
 800a46e:	4605      	mov	r5, r0
 800a470:	b948      	cbnz	r0, 800a486 <__lshift+0x3e>
 800a472:	4602      	mov	r2, r0
 800a474:	4b2a      	ldr	r3, [pc, #168]	; (800a520 <__lshift+0xd8>)
 800a476:	482b      	ldr	r0, [pc, #172]	; (800a524 <__lshift+0xdc>)
 800a478:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a47c:	f000 fbe2 	bl	800ac44 <__assert_func>
 800a480:	3101      	adds	r1, #1
 800a482:	005b      	lsls	r3, r3, #1
 800a484:	e7ee      	b.n	800a464 <__lshift+0x1c>
 800a486:	2300      	movs	r3, #0
 800a488:	f100 0114 	add.w	r1, r0, #20
 800a48c:	f100 0210 	add.w	r2, r0, #16
 800a490:	4618      	mov	r0, r3
 800a492:	4553      	cmp	r3, sl
 800a494:	db37      	blt.n	800a506 <__lshift+0xbe>
 800a496:	6920      	ldr	r0, [r4, #16]
 800a498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a49c:	f104 0314 	add.w	r3, r4, #20
 800a4a0:	f019 091f 	ands.w	r9, r9, #31
 800a4a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a4ac:	d02f      	beq.n	800a50e <__lshift+0xc6>
 800a4ae:	f1c9 0e20 	rsb	lr, r9, #32
 800a4b2:	468a      	mov	sl, r1
 800a4b4:	f04f 0c00 	mov.w	ip, #0
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	fa02 f209 	lsl.w	r2, r2, r9
 800a4be:	ea42 020c 	orr.w	r2, r2, ip
 800a4c2:	f84a 2b04 	str.w	r2, [sl], #4
 800a4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ca:	4298      	cmp	r0, r3
 800a4cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a4d0:	d8f2      	bhi.n	800a4b8 <__lshift+0x70>
 800a4d2:	1b03      	subs	r3, r0, r4
 800a4d4:	3b15      	subs	r3, #21
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	3304      	adds	r3, #4
 800a4dc:	f104 0215 	add.w	r2, r4, #21
 800a4e0:	4290      	cmp	r0, r2
 800a4e2:	bf38      	it	cc
 800a4e4:	2304      	movcc	r3, #4
 800a4e6:	f841 c003 	str.w	ip, [r1, r3]
 800a4ea:	f1bc 0f00 	cmp.w	ip, #0
 800a4ee:	d001      	beq.n	800a4f4 <__lshift+0xac>
 800a4f0:	f108 0602 	add.w	r6, r8, #2
 800a4f4:	3e01      	subs	r6, #1
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	612e      	str	r6, [r5, #16]
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	f7ff fd88 	bl	800a010 <_Bfree>
 800a500:	4628      	mov	r0, r5
 800a502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a506:	f842 0f04 	str.w	r0, [r2, #4]!
 800a50a:	3301      	adds	r3, #1
 800a50c:	e7c1      	b.n	800a492 <__lshift+0x4a>
 800a50e:	3904      	subs	r1, #4
 800a510:	f853 2b04 	ldr.w	r2, [r3], #4
 800a514:	f841 2f04 	str.w	r2, [r1, #4]!
 800a518:	4298      	cmp	r0, r3
 800a51a:	d8f9      	bhi.n	800a510 <__lshift+0xc8>
 800a51c:	e7ea      	b.n	800a4f4 <__lshift+0xac>
 800a51e:	bf00      	nop
 800a520:	0800bc58 	.word	0x0800bc58
 800a524:	0800bce4 	.word	0x0800bce4

0800a528 <__mcmp>:
 800a528:	b530      	push	{r4, r5, lr}
 800a52a:	6902      	ldr	r2, [r0, #16]
 800a52c:	690c      	ldr	r4, [r1, #16]
 800a52e:	1b12      	subs	r2, r2, r4
 800a530:	d10e      	bne.n	800a550 <__mcmp+0x28>
 800a532:	f100 0314 	add.w	r3, r0, #20
 800a536:	3114      	adds	r1, #20
 800a538:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a53c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a540:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a544:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a548:	42a5      	cmp	r5, r4
 800a54a:	d003      	beq.n	800a554 <__mcmp+0x2c>
 800a54c:	d305      	bcc.n	800a55a <__mcmp+0x32>
 800a54e:	2201      	movs	r2, #1
 800a550:	4610      	mov	r0, r2
 800a552:	bd30      	pop	{r4, r5, pc}
 800a554:	4283      	cmp	r3, r0
 800a556:	d3f3      	bcc.n	800a540 <__mcmp+0x18>
 800a558:	e7fa      	b.n	800a550 <__mcmp+0x28>
 800a55a:	f04f 32ff 	mov.w	r2, #4294967295
 800a55e:	e7f7      	b.n	800a550 <__mcmp+0x28>

0800a560 <__mdiff>:
 800a560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	460c      	mov	r4, r1
 800a566:	4606      	mov	r6, r0
 800a568:	4611      	mov	r1, r2
 800a56a:	4620      	mov	r0, r4
 800a56c:	4690      	mov	r8, r2
 800a56e:	f7ff ffdb 	bl	800a528 <__mcmp>
 800a572:	1e05      	subs	r5, r0, #0
 800a574:	d110      	bne.n	800a598 <__mdiff+0x38>
 800a576:	4629      	mov	r1, r5
 800a578:	4630      	mov	r0, r6
 800a57a:	f7ff fd09 	bl	8009f90 <_Balloc>
 800a57e:	b930      	cbnz	r0, 800a58e <__mdiff+0x2e>
 800a580:	4b3a      	ldr	r3, [pc, #232]	; (800a66c <__mdiff+0x10c>)
 800a582:	4602      	mov	r2, r0
 800a584:	f240 2132 	movw	r1, #562	; 0x232
 800a588:	4839      	ldr	r0, [pc, #228]	; (800a670 <__mdiff+0x110>)
 800a58a:	f000 fb5b 	bl	800ac44 <__assert_func>
 800a58e:	2301      	movs	r3, #1
 800a590:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	bfa4      	itt	ge
 800a59a:	4643      	movge	r3, r8
 800a59c:	46a0      	movge	r8, r4
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a5a4:	bfa6      	itte	ge
 800a5a6:	461c      	movge	r4, r3
 800a5a8:	2500      	movge	r5, #0
 800a5aa:	2501      	movlt	r5, #1
 800a5ac:	f7ff fcf0 	bl	8009f90 <_Balloc>
 800a5b0:	b920      	cbnz	r0, 800a5bc <__mdiff+0x5c>
 800a5b2:	4b2e      	ldr	r3, [pc, #184]	; (800a66c <__mdiff+0x10c>)
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5ba:	e7e5      	b.n	800a588 <__mdiff+0x28>
 800a5bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a5c0:	6926      	ldr	r6, [r4, #16]
 800a5c2:	60c5      	str	r5, [r0, #12]
 800a5c4:	f104 0914 	add.w	r9, r4, #20
 800a5c8:	f108 0514 	add.w	r5, r8, #20
 800a5cc:	f100 0e14 	add.w	lr, r0, #20
 800a5d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a5d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a5d8:	f108 0210 	add.w	r2, r8, #16
 800a5dc:	46f2      	mov	sl, lr
 800a5de:	2100      	movs	r1, #0
 800a5e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5e8:	fa1f f883 	uxth.w	r8, r3
 800a5ec:	fa11 f18b 	uxtah	r1, r1, fp
 800a5f0:	0c1b      	lsrs	r3, r3, #16
 800a5f2:	eba1 0808 	sub.w	r8, r1, r8
 800a5f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5fe:	fa1f f888 	uxth.w	r8, r8
 800a602:	1419      	asrs	r1, r3, #16
 800a604:	454e      	cmp	r6, r9
 800a606:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a60a:	f84a 3b04 	str.w	r3, [sl], #4
 800a60e:	d8e7      	bhi.n	800a5e0 <__mdiff+0x80>
 800a610:	1b33      	subs	r3, r6, r4
 800a612:	3b15      	subs	r3, #21
 800a614:	f023 0303 	bic.w	r3, r3, #3
 800a618:	3304      	adds	r3, #4
 800a61a:	3415      	adds	r4, #21
 800a61c:	42a6      	cmp	r6, r4
 800a61e:	bf38      	it	cc
 800a620:	2304      	movcc	r3, #4
 800a622:	441d      	add	r5, r3
 800a624:	4473      	add	r3, lr
 800a626:	469e      	mov	lr, r3
 800a628:	462e      	mov	r6, r5
 800a62a:	4566      	cmp	r6, ip
 800a62c:	d30e      	bcc.n	800a64c <__mdiff+0xec>
 800a62e:	f10c 0203 	add.w	r2, ip, #3
 800a632:	1b52      	subs	r2, r2, r5
 800a634:	f022 0203 	bic.w	r2, r2, #3
 800a638:	3d03      	subs	r5, #3
 800a63a:	45ac      	cmp	ip, r5
 800a63c:	bf38      	it	cc
 800a63e:	2200      	movcc	r2, #0
 800a640:	441a      	add	r2, r3
 800a642:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a646:	b17b      	cbz	r3, 800a668 <__mdiff+0x108>
 800a648:	6107      	str	r7, [r0, #16]
 800a64a:	e7a3      	b.n	800a594 <__mdiff+0x34>
 800a64c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a650:	fa11 f288 	uxtah	r2, r1, r8
 800a654:	1414      	asrs	r4, r2, #16
 800a656:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a65a:	b292      	uxth	r2, r2
 800a65c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a660:	f84e 2b04 	str.w	r2, [lr], #4
 800a664:	1421      	asrs	r1, r4, #16
 800a666:	e7e0      	b.n	800a62a <__mdiff+0xca>
 800a668:	3f01      	subs	r7, #1
 800a66a:	e7ea      	b.n	800a642 <__mdiff+0xe2>
 800a66c:	0800bc58 	.word	0x0800bc58
 800a670:	0800bce4 	.word	0x0800bce4

0800a674 <__ulp>:
 800a674:	b082      	sub	sp, #8
 800a676:	ed8d 0b00 	vstr	d0, [sp]
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	4912      	ldr	r1, [pc, #72]	; (800a6c8 <__ulp+0x54>)
 800a67e:	4019      	ands	r1, r3
 800a680:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a684:	2900      	cmp	r1, #0
 800a686:	dd05      	ble.n	800a694 <__ulp+0x20>
 800a688:	2200      	movs	r2, #0
 800a68a:	460b      	mov	r3, r1
 800a68c:	ec43 2b10 	vmov	d0, r2, r3
 800a690:	b002      	add	sp, #8
 800a692:	4770      	bx	lr
 800a694:	4249      	negs	r1, r1
 800a696:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a69a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a69e:	f04f 0200 	mov.w	r2, #0
 800a6a2:	f04f 0300 	mov.w	r3, #0
 800a6a6:	da04      	bge.n	800a6b2 <__ulp+0x3e>
 800a6a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a6ac:	fa41 f300 	asr.w	r3, r1, r0
 800a6b0:	e7ec      	b.n	800a68c <__ulp+0x18>
 800a6b2:	f1a0 0114 	sub.w	r1, r0, #20
 800a6b6:	291e      	cmp	r1, #30
 800a6b8:	bfda      	itte	le
 800a6ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a6be:	fa20 f101 	lsrle.w	r1, r0, r1
 800a6c2:	2101      	movgt	r1, #1
 800a6c4:	460a      	mov	r2, r1
 800a6c6:	e7e1      	b.n	800a68c <__ulp+0x18>
 800a6c8:	7ff00000 	.word	0x7ff00000

0800a6cc <__b2d>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	6905      	ldr	r5, [r0, #16]
 800a6d0:	f100 0714 	add.w	r7, r0, #20
 800a6d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a6d8:	1f2e      	subs	r6, r5, #4
 800a6da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f7ff fd48 	bl	800a174 <__hi0bits>
 800a6e4:	f1c0 0320 	rsb	r3, r0, #32
 800a6e8:	280a      	cmp	r0, #10
 800a6ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a768 <__b2d+0x9c>
 800a6ee:	600b      	str	r3, [r1, #0]
 800a6f0:	dc14      	bgt.n	800a71c <__b2d+0x50>
 800a6f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a6f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a6fa:	42b7      	cmp	r7, r6
 800a6fc:	ea41 030c 	orr.w	r3, r1, ip
 800a700:	bf34      	ite	cc
 800a702:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a706:	2100      	movcs	r1, #0
 800a708:	3015      	adds	r0, #21
 800a70a:	fa04 f000 	lsl.w	r0, r4, r0
 800a70e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a712:	ea40 0201 	orr.w	r2, r0, r1
 800a716:	ec43 2b10 	vmov	d0, r2, r3
 800a71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a71c:	42b7      	cmp	r7, r6
 800a71e:	bf3a      	itte	cc
 800a720:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a724:	f1a5 0608 	subcc.w	r6, r5, #8
 800a728:	2100      	movcs	r1, #0
 800a72a:	380b      	subs	r0, #11
 800a72c:	d017      	beq.n	800a75e <__b2d+0x92>
 800a72e:	f1c0 0c20 	rsb	ip, r0, #32
 800a732:	fa04 f500 	lsl.w	r5, r4, r0
 800a736:	42be      	cmp	r6, r7
 800a738:	fa21 f40c 	lsr.w	r4, r1, ip
 800a73c:	ea45 0504 	orr.w	r5, r5, r4
 800a740:	bf8c      	ite	hi
 800a742:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a746:	2400      	movls	r4, #0
 800a748:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a74c:	fa01 f000 	lsl.w	r0, r1, r0
 800a750:	fa24 f40c 	lsr.w	r4, r4, ip
 800a754:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a758:	ea40 0204 	orr.w	r2, r0, r4
 800a75c:	e7db      	b.n	800a716 <__b2d+0x4a>
 800a75e:	ea44 030c 	orr.w	r3, r4, ip
 800a762:	460a      	mov	r2, r1
 800a764:	e7d7      	b.n	800a716 <__b2d+0x4a>
 800a766:	bf00      	nop
 800a768:	3ff00000 	.word	0x3ff00000

0800a76c <__d2b>:
 800a76c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a770:	4689      	mov	r9, r1
 800a772:	2101      	movs	r1, #1
 800a774:	ec57 6b10 	vmov	r6, r7, d0
 800a778:	4690      	mov	r8, r2
 800a77a:	f7ff fc09 	bl	8009f90 <_Balloc>
 800a77e:	4604      	mov	r4, r0
 800a780:	b930      	cbnz	r0, 800a790 <__d2b+0x24>
 800a782:	4602      	mov	r2, r0
 800a784:	4b25      	ldr	r3, [pc, #148]	; (800a81c <__d2b+0xb0>)
 800a786:	4826      	ldr	r0, [pc, #152]	; (800a820 <__d2b+0xb4>)
 800a788:	f240 310a 	movw	r1, #778	; 0x30a
 800a78c:	f000 fa5a 	bl	800ac44 <__assert_func>
 800a790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a798:	bb35      	cbnz	r5, 800a7e8 <__d2b+0x7c>
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	d028      	beq.n	800a7f2 <__d2b+0x86>
 800a7a0:	4668      	mov	r0, sp
 800a7a2:	9600      	str	r6, [sp, #0]
 800a7a4:	f7ff fd06 	bl	800a1b4 <__lo0bits>
 800a7a8:	9900      	ldr	r1, [sp, #0]
 800a7aa:	b300      	cbz	r0, 800a7ee <__d2b+0x82>
 800a7ac:	9a01      	ldr	r2, [sp, #4]
 800a7ae:	f1c0 0320 	rsb	r3, r0, #32
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	430b      	orrs	r3, r1
 800a7b8:	40c2      	lsrs	r2, r0
 800a7ba:	6163      	str	r3, [r4, #20]
 800a7bc:	9201      	str	r2, [sp, #4]
 800a7be:	9b01      	ldr	r3, [sp, #4]
 800a7c0:	61a3      	str	r3, [r4, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	bf14      	ite	ne
 800a7c6:	2202      	movne	r2, #2
 800a7c8:	2201      	moveq	r2, #1
 800a7ca:	6122      	str	r2, [r4, #16]
 800a7cc:	b1d5      	cbz	r5, 800a804 <__d2b+0x98>
 800a7ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7d2:	4405      	add	r5, r0
 800a7d4:	f8c9 5000 	str.w	r5, [r9]
 800a7d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7dc:	f8c8 0000 	str.w	r0, [r8]
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	b003      	add	sp, #12
 800a7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7ec:	e7d5      	b.n	800a79a <__d2b+0x2e>
 800a7ee:	6161      	str	r1, [r4, #20]
 800a7f0:	e7e5      	b.n	800a7be <__d2b+0x52>
 800a7f2:	a801      	add	r0, sp, #4
 800a7f4:	f7ff fcde 	bl	800a1b4 <__lo0bits>
 800a7f8:	9b01      	ldr	r3, [sp, #4]
 800a7fa:	6163      	str	r3, [r4, #20]
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	6122      	str	r2, [r4, #16]
 800a800:	3020      	adds	r0, #32
 800a802:	e7e3      	b.n	800a7cc <__d2b+0x60>
 800a804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a80c:	f8c9 0000 	str.w	r0, [r9]
 800a810:	6918      	ldr	r0, [r3, #16]
 800a812:	f7ff fcaf 	bl	800a174 <__hi0bits>
 800a816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a81a:	e7df      	b.n	800a7dc <__d2b+0x70>
 800a81c:	0800bc58 	.word	0x0800bc58
 800a820:	0800bce4 	.word	0x0800bce4

0800a824 <__ratio>:
 800a824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	4688      	mov	r8, r1
 800a82a:	4669      	mov	r1, sp
 800a82c:	4681      	mov	r9, r0
 800a82e:	f7ff ff4d 	bl	800a6cc <__b2d>
 800a832:	a901      	add	r1, sp, #4
 800a834:	4640      	mov	r0, r8
 800a836:	ec55 4b10 	vmov	r4, r5, d0
 800a83a:	ee10 aa10 	vmov	sl, s0
 800a83e:	f7ff ff45 	bl	800a6cc <__b2d>
 800a842:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a846:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a84a:	1a59      	subs	r1, r3, r1
 800a84c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a856:	ec57 6b10 	vmov	r6, r7, d0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bfd6      	itet	le
 800a85e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a862:	462a      	movgt	r2, r5
 800a864:	463a      	movle	r2, r7
 800a866:	46ab      	mov	fp, r5
 800a868:	bfd6      	itet	le
 800a86a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a86e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a872:	ee00 3a90 	vmovle	s1, r3
 800a876:	ec4b ab17 	vmov	d7, sl, fp
 800a87a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a87e:	b003      	add	sp, #12
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a884 <__copybits>:
 800a884:	3901      	subs	r1, #1
 800a886:	b570      	push	{r4, r5, r6, lr}
 800a888:	1149      	asrs	r1, r1, #5
 800a88a:	6914      	ldr	r4, [r2, #16]
 800a88c:	3101      	adds	r1, #1
 800a88e:	f102 0314 	add.w	r3, r2, #20
 800a892:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a896:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a89a:	1f05      	subs	r5, r0, #4
 800a89c:	42a3      	cmp	r3, r4
 800a89e:	d30c      	bcc.n	800a8ba <__copybits+0x36>
 800a8a0:	1aa3      	subs	r3, r4, r2
 800a8a2:	3b11      	subs	r3, #17
 800a8a4:	f023 0303 	bic.w	r3, r3, #3
 800a8a8:	3211      	adds	r2, #17
 800a8aa:	42a2      	cmp	r2, r4
 800a8ac:	bf88      	it	hi
 800a8ae:	2300      	movhi	r3, #0
 800a8b0:	4418      	add	r0, r3
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	4288      	cmp	r0, r1
 800a8b6:	d305      	bcc.n	800a8c4 <__copybits+0x40>
 800a8b8:	bd70      	pop	{r4, r5, r6, pc}
 800a8ba:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8be:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8c2:	e7eb      	b.n	800a89c <__copybits+0x18>
 800a8c4:	f840 3b04 	str.w	r3, [r0], #4
 800a8c8:	e7f4      	b.n	800a8b4 <__copybits+0x30>

0800a8ca <__any_on>:
 800a8ca:	f100 0214 	add.w	r2, r0, #20
 800a8ce:	6900      	ldr	r0, [r0, #16]
 800a8d0:	114b      	asrs	r3, r1, #5
 800a8d2:	4298      	cmp	r0, r3
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	db11      	blt.n	800a8fc <__any_on+0x32>
 800a8d8:	dd0a      	ble.n	800a8f0 <__any_on+0x26>
 800a8da:	f011 011f 	ands.w	r1, r1, #31
 800a8de:	d007      	beq.n	800a8f0 <__any_on+0x26>
 800a8e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8e4:	fa24 f001 	lsr.w	r0, r4, r1
 800a8e8:	fa00 f101 	lsl.w	r1, r0, r1
 800a8ec:	428c      	cmp	r4, r1
 800a8ee:	d10b      	bne.n	800a908 <__any_on+0x3e>
 800a8f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d803      	bhi.n	800a900 <__any_on+0x36>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	bd10      	pop	{r4, pc}
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	e7f7      	b.n	800a8f0 <__any_on+0x26>
 800a900:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a904:	2900      	cmp	r1, #0
 800a906:	d0f5      	beq.n	800a8f4 <__any_on+0x2a>
 800a908:	2001      	movs	r0, #1
 800a90a:	e7f6      	b.n	800a8fa <__any_on+0x30>

0800a90c <_calloc_r>:
 800a90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a90e:	fba1 2402 	umull	r2, r4, r1, r2
 800a912:	b94c      	cbnz	r4, 800a928 <_calloc_r+0x1c>
 800a914:	4611      	mov	r1, r2
 800a916:	9201      	str	r2, [sp, #4]
 800a918:	f7fc fc60 	bl	80071dc <_malloc_r>
 800a91c:	9a01      	ldr	r2, [sp, #4]
 800a91e:	4605      	mov	r5, r0
 800a920:	b930      	cbnz	r0, 800a930 <_calloc_r+0x24>
 800a922:	4628      	mov	r0, r5
 800a924:	b003      	add	sp, #12
 800a926:	bd30      	pop	{r4, r5, pc}
 800a928:	220c      	movs	r2, #12
 800a92a:	6002      	str	r2, [r0, #0]
 800a92c:	2500      	movs	r5, #0
 800a92e:	e7f8      	b.n	800a922 <_calloc_r+0x16>
 800a930:	4621      	mov	r1, r4
 800a932:	f7fc fbdf 	bl	80070f4 <memset>
 800a936:	e7f4      	b.n	800a922 <_calloc_r+0x16>

0800a938 <__ssputs_r>:
 800a938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93c:	688e      	ldr	r6, [r1, #8]
 800a93e:	429e      	cmp	r6, r3
 800a940:	4682      	mov	sl, r0
 800a942:	460c      	mov	r4, r1
 800a944:	4690      	mov	r8, r2
 800a946:	461f      	mov	r7, r3
 800a948:	d838      	bhi.n	800a9bc <__ssputs_r+0x84>
 800a94a:	898a      	ldrh	r2, [r1, #12]
 800a94c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a950:	d032      	beq.n	800a9b8 <__ssputs_r+0x80>
 800a952:	6825      	ldr	r5, [r4, #0]
 800a954:	6909      	ldr	r1, [r1, #16]
 800a956:	eba5 0901 	sub.w	r9, r5, r1
 800a95a:	6965      	ldr	r5, [r4, #20]
 800a95c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a960:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a964:	3301      	adds	r3, #1
 800a966:	444b      	add	r3, r9
 800a968:	106d      	asrs	r5, r5, #1
 800a96a:	429d      	cmp	r5, r3
 800a96c:	bf38      	it	cc
 800a96e:	461d      	movcc	r5, r3
 800a970:	0553      	lsls	r3, r2, #21
 800a972:	d531      	bpl.n	800a9d8 <__ssputs_r+0xa0>
 800a974:	4629      	mov	r1, r5
 800a976:	f7fc fc31 	bl	80071dc <_malloc_r>
 800a97a:	4606      	mov	r6, r0
 800a97c:	b950      	cbnz	r0, 800a994 <__ssputs_r+0x5c>
 800a97e:	230c      	movs	r3, #12
 800a980:	f8ca 3000 	str.w	r3, [sl]
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295
 800a990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a994:	6921      	ldr	r1, [r4, #16]
 800a996:	464a      	mov	r2, r9
 800a998:	f7fc fb9e 	bl	80070d8 <memcpy>
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9a6:	81a3      	strh	r3, [r4, #12]
 800a9a8:	6126      	str	r6, [r4, #16]
 800a9aa:	6165      	str	r5, [r4, #20]
 800a9ac:	444e      	add	r6, r9
 800a9ae:	eba5 0509 	sub.w	r5, r5, r9
 800a9b2:	6026      	str	r6, [r4, #0]
 800a9b4:	60a5      	str	r5, [r4, #8]
 800a9b6:	463e      	mov	r6, r7
 800a9b8:	42be      	cmp	r6, r7
 800a9ba:	d900      	bls.n	800a9be <__ssputs_r+0x86>
 800a9bc:	463e      	mov	r6, r7
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	4632      	mov	r2, r6
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	f000 f96e 	bl	800aca4 <memmove>
 800a9c8:	68a3      	ldr	r3, [r4, #8]
 800a9ca:	1b9b      	subs	r3, r3, r6
 800a9cc:	60a3      	str	r3, [r4, #8]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	4433      	add	r3, r6
 800a9d2:	6023      	str	r3, [r4, #0]
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	e7db      	b.n	800a990 <__ssputs_r+0x58>
 800a9d8:	462a      	mov	r2, r5
 800a9da:	f000 f97d 	bl	800acd8 <_realloc_r>
 800a9de:	4606      	mov	r6, r0
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1e1      	bne.n	800a9a8 <__ssputs_r+0x70>
 800a9e4:	6921      	ldr	r1, [r4, #16]
 800a9e6:	4650      	mov	r0, sl
 800a9e8:	f7fc fb8c 	bl	8007104 <_free_r>
 800a9ec:	e7c7      	b.n	800a97e <__ssputs_r+0x46>
	...

0800a9f0 <_svfiprintf_r>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	4698      	mov	r8, r3
 800a9f6:	898b      	ldrh	r3, [r1, #12]
 800a9f8:	061b      	lsls	r3, r3, #24
 800a9fa:	b09d      	sub	sp, #116	; 0x74
 800a9fc:	4607      	mov	r7, r0
 800a9fe:	460d      	mov	r5, r1
 800aa00:	4614      	mov	r4, r2
 800aa02:	d50e      	bpl.n	800aa22 <_svfiprintf_r+0x32>
 800aa04:	690b      	ldr	r3, [r1, #16]
 800aa06:	b963      	cbnz	r3, 800aa22 <_svfiprintf_r+0x32>
 800aa08:	2140      	movs	r1, #64	; 0x40
 800aa0a:	f7fc fbe7 	bl	80071dc <_malloc_r>
 800aa0e:	6028      	str	r0, [r5, #0]
 800aa10:	6128      	str	r0, [r5, #16]
 800aa12:	b920      	cbnz	r0, 800aa1e <_svfiprintf_r+0x2e>
 800aa14:	230c      	movs	r3, #12
 800aa16:	603b      	str	r3, [r7, #0]
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	e0d1      	b.n	800abc2 <_svfiprintf_r+0x1d2>
 800aa1e:	2340      	movs	r3, #64	; 0x40
 800aa20:	616b      	str	r3, [r5, #20]
 800aa22:	2300      	movs	r3, #0
 800aa24:	9309      	str	r3, [sp, #36]	; 0x24
 800aa26:	2320      	movs	r3, #32
 800aa28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa30:	2330      	movs	r3, #48	; 0x30
 800aa32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800abdc <_svfiprintf_r+0x1ec>
 800aa36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa3a:	f04f 0901 	mov.w	r9, #1
 800aa3e:	4623      	mov	r3, r4
 800aa40:	469a      	mov	sl, r3
 800aa42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa46:	b10a      	cbz	r2, 800aa4c <_svfiprintf_r+0x5c>
 800aa48:	2a25      	cmp	r2, #37	; 0x25
 800aa4a:	d1f9      	bne.n	800aa40 <_svfiprintf_r+0x50>
 800aa4c:	ebba 0b04 	subs.w	fp, sl, r4
 800aa50:	d00b      	beq.n	800aa6a <_svfiprintf_r+0x7a>
 800aa52:	465b      	mov	r3, fp
 800aa54:	4622      	mov	r2, r4
 800aa56:	4629      	mov	r1, r5
 800aa58:	4638      	mov	r0, r7
 800aa5a:	f7ff ff6d 	bl	800a938 <__ssputs_r>
 800aa5e:	3001      	adds	r0, #1
 800aa60:	f000 80aa 	beq.w	800abb8 <_svfiprintf_r+0x1c8>
 800aa64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa66:	445a      	add	r2, fp
 800aa68:	9209      	str	r2, [sp, #36]	; 0x24
 800aa6a:	f89a 3000 	ldrb.w	r3, [sl]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f000 80a2 	beq.w	800abb8 <_svfiprintf_r+0x1c8>
 800aa74:	2300      	movs	r3, #0
 800aa76:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa7e:	f10a 0a01 	add.w	sl, sl, #1
 800aa82:	9304      	str	r3, [sp, #16]
 800aa84:	9307      	str	r3, [sp, #28]
 800aa86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa8a:	931a      	str	r3, [sp, #104]	; 0x68
 800aa8c:	4654      	mov	r4, sl
 800aa8e:	2205      	movs	r2, #5
 800aa90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa94:	4851      	ldr	r0, [pc, #324]	; (800abdc <_svfiprintf_r+0x1ec>)
 800aa96:	f7f5 fbdb 	bl	8000250 <memchr>
 800aa9a:	9a04      	ldr	r2, [sp, #16]
 800aa9c:	b9d8      	cbnz	r0, 800aad6 <_svfiprintf_r+0xe6>
 800aa9e:	06d0      	lsls	r0, r2, #27
 800aaa0:	bf44      	itt	mi
 800aaa2:	2320      	movmi	r3, #32
 800aaa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaa8:	0711      	lsls	r1, r2, #28
 800aaaa:	bf44      	itt	mi
 800aaac:	232b      	movmi	r3, #43	; 0x2b
 800aaae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab2:	f89a 3000 	ldrb.w	r3, [sl]
 800aab6:	2b2a      	cmp	r3, #42	; 0x2a
 800aab8:	d015      	beq.n	800aae6 <_svfiprintf_r+0xf6>
 800aaba:	9a07      	ldr	r2, [sp, #28]
 800aabc:	4654      	mov	r4, sl
 800aabe:	2000      	movs	r0, #0
 800aac0:	f04f 0c0a 	mov.w	ip, #10
 800aac4:	4621      	mov	r1, r4
 800aac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaca:	3b30      	subs	r3, #48	; 0x30
 800aacc:	2b09      	cmp	r3, #9
 800aace:	d94e      	bls.n	800ab6e <_svfiprintf_r+0x17e>
 800aad0:	b1b0      	cbz	r0, 800ab00 <_svfiprintf_r+0x110>
 800aad2:	9207      	str	r2, [sp, #28]
 800aad4:	e014      	b.n	800ab00 <_svfiprintf_r+0x110>
 800aad6:	eba0 0308 	sub.w	r3, r0, r8
 800aada:	fa09 f303 	lsl.w	r3, r9, r3
 800aade:	4313      	orrs	r3, r2
 800aae0:	9304      	str	r3, [sp, #16]
 800aae2:	46a2      	mov	sl, r4
 800aae4:	e7d2      	b.n	800aa8c <_svfiprintf_r+0x9c>
 800aae6:	9b03      	ldr	r3, [sp, #12]
 800aae8:	1d19      	adds	r1, r3, #4
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	9103      	str	r1, [sp, #12]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	bfbb      	ittet	lt
 800aaf2:	425b      	neglt	r3, r3
 800aaf4:	f042 0202 	orrlt.w	r2, r2, #2
 800aaf8:	9307      	strge	r3, [sp, #28]
 800aafa:	9307      	strlt	r3, [sp, #28]
 800aafc:	bfb8      	it	lt
 800aafe:	9204      	strlt	r2, [sp, #16]
 800ab00:	7823      	ldrb	r3, [r4, #0]
 800ab02:	2b2e      	cmp	r3, #46	; 0x2e
 800ab04:	d10c      	bne.n	800ab20 <_svfiprintf_r+0x130>
 800ab06:	7863      	ldrb	r3, [r4, #1]
 800ab08:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0a:	d135      	bne.n	800ab78 <_svfiprintf_r+0x188>
 800ab0c:	9b03      	ldr	r3, [sp, #12]
 800ab0e:	1d1a      	adds	r2, r3, #4
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	9203      	str	r2, [sp, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfb8      	it	lt
 800ab18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab1c:	3402      	adds	r4, #2
 800ab1e:	9305      	str	r3, [sp, #20]
 800ab20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abec <_svfiprintf_r+0x1fc>
 800ab24:	7821      	ldrb	r1, [r4, #0]
 800ab26:	2203      	movs	r2, #3
 800ab28:	4650      	mov	r0, sl
 800ab2a:	f7f5 fb91 	bl	8000250 <memchr>
 800ab2e:	b140      	cbz	r0, 800ab42 <_svfiprintf_r+0x152>
 800ab30:	2340      	movs	r3, #64	; 0x40
 800ab32:	eba0 000a 	sub.w	r0, r0, sl
 800ab36:	fa03 f000 	lsl.w	r0, r3, r0
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	4303      	orrs	r3, r0
 800ab3e:	3401      	adds	r4, #1
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab46:	4826      	ldr	r0, [pc, #152]	; (800abe0 <_svfiprintf_r+0x1f0>)
 800ab48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab4c:	2206      	movs	r2, #6
 800ab4e:	f7f5 fb7f 	bl	8000250 <memchr>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d038      	beq.n	800abc8 <_svfiprintf_r+0x1d8>
 800ab56:	4b23      	ldr	r3, [pc, #140]	; (800abe4 <_svfiprintf_r+0x1f4>)
 800ab58:	bb1b      	cbnz	r3, 800aba2 <_svfiprintf_r+0x1b2>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	3307      	adds	r3, #7
 800ab5e:	f023 0307 	bic.w	r3, r3, #7
 800ab62:	3308      	adds	r3, #8
 800ab64:	9303      	str	r3, [sp, #12]
 800ab66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab68:	4433      	add	r3, r6
 800ab6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6c:	e767      	b.n	800aa3e <_svfiprintf_r+0x4e>
 800ab6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab72:	460c      	mov	r4, r1
 800ab74:	2001      	movs	r0, #1
 800ab76:	e7a5      	b.n	800aac4 <_svfiprintf_r+0xd4>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	3401      	adds	r4, #1
 800ab7c:	9305      	str	r3, [sp, #20]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	f04f 0c0a 	mov.w	ip, #10
 800ab84:	4620      	mov	r0, r4
 800ab86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8a:	3a30      	subs	r2, #48	; 0x30
 800ab8c:	2a09      	cmp	r2, #9
 800ab8e:	d903      	bls.n	800ab98 <_svfiprintf_r+0x1a8>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0c5      	beq.n	800ab20 <_svfiprintf_r+0x130>
 800ab94:	9105      	str	r1, [sp, #20]
 800ab96:	e7c3      	b.n	800ab20 <_svfiprintf_r+0x130>
 800ab98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e7f0      	b.n	800ab84 <_svfiprintf_r+0x194>
 800aba2:	ab03      	add	r3, sp, #12
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	462a      	mov	r2, r5
 800aba8:	4b0f      	ldr	r3, [pc, #60]	; (800abe8 <_svfiprintf_r+0x1f8>)
 800abaa:	a904      	add	r1, sp, #16
 800abac:	4638      	mov	r0, r7
 800abae:	f7fc fc1b 	bl	80073e8 <_printf_float>
 800abb2:	1c42      	adds	r2, r0, #1
 800abb4:	4606      	mov	r6, r0
 800abb6:	d1d6      	bne.n	800ab66 <_svfiprintf_r+0x176>
 800abb8:	89ab      	ldrh	r3, [r5, #12]
 800abba:	065b      	lsls	r3, r3, #25
 800abbc:	f53f af2c 	bmi.w	800aa18 <_svfiprintf_r+0x28>
 800abc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abc2:	b01d      	add	sp, #116	; 0x74
 800abc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc8:	ab03      	add	r3, sp, #12
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	462a      	mov	r2, r5
 800abce:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <_svfiprintf_r+0x1f8>)
 800abd0:	a904      	add	r1, sp, #16
 800abd2:	4638      	mov	r0, r7
 800abd4:	f7fc fe94 	bl	8007900 <_printf_i>
 800abd8:	e7eb      	b.n	800abb2 <_svfiprintf_r+0x1c2>
 800abda:	bf00      	nop
 800abdc:	0800be3c 	.word	0x0800be3c
 800abe0:	0800be46 	.word	0x0800be46
 800abe4:	080073e9 	.word	0x080073e9
 800abe8:	0800a939 	.word	0x0800a939
 800abec:	0800be42 	.word	0x0800be42

0800abf0 <nan>:
 800abf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800abf8 <nan+0x8>
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	00000000 	.word	0x00000000
 800abfc:	7ff80000 	.word	0x7ff80000

0800ac00 <strncmp>:
 800ac00:	b510      	push	{r4, lr}
 800ac02:	b17a      	cbz	r2, 800ac24 <strncmp+0x24>
 800ac04:	4603      	mov	r3, r0
 800ac06:	3901      	subs	r1, #1
 800ac08:	1884      	adds	r4, r0, r2
 800ac0a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac12:	4290      	cmp	r0, r2
 800ac14:	d101      	bne.n	800ac1a <strncmp+0x1a>
 800ac16:	42a3      	cmp	r3, r4
 800ac18:	d101      	bne.n	800ac1e <strncmp+0x1e>
 800ac1a:	1a80      	subs	r0, r0, r2
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d1f3      	bne.n	800ac0a <strncmp+0xa>
 800ac22:	e7fa      	b.n	800ac1a <strncmp+0x1a>
 800ac24:	4610      	mov	r0, r2
 800ac26:	e7f9      	b.n	800ac1c <strncmp+0x1c>

0800ac28 <__ascii_wctomb>:
 800ac28:	b149      	cbz	r1, 800ac3e <__ascii_wctomb+0x16>
 800ac2a:	2aff      	cmp	r2, #255	; 0xff
 800ac2c:	bf85      	ittet	hi
 800ac2e:	238a      	movhi	r3, #138	; 0x8a
 800ac30:	6003      	strhi	r3, [r0, #0]
 800ac32:	700a      	strbls	r2, [r1, #0]
 800ac34:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac38:	bf98      	it	ls
 800ac3a:	2001      	movls	r0, #1
 800ac3c:	4770      	bx	lr
 800ac3e:	4608      	mov	r0, r1
 800ac40:	4770      	bx	lr
	...

0800ac44 <__assert_func>:
 800ac44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac46:	4614      	mov	r4, r2
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <__assert_func+0x2c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4605      	mov	r5, r0
 800ac50:	68d8      	ldr	r0, [r3, #12]
 800ac52:	b14c      	cbz	r4, 800ac68 <__assert_func+0x24>
 800ac54:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <__assert_func+0x30>)
 800ac56:	9100      	str	r1, [sp, #0]
 800ac58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac5c:	4906      	ldr	r1, [pc, #24]	; (800ac78 <__assert_func+0x34>)
 800ac5e:	462b      	mov	r3, r5
 800ac60:	f000 f80e 	bl	800ac80 <fiprintf>
 800ac64:	f000 fa80 	bl	800b168 <abort>
 800ac68:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <__assert_func+0x38>)
 800ac6a:	461c      	mov	r4, r3
 800ac6c:	e7f3      	b.n	800ac56 <__assert_func+0x12>
 800ac6e:	bf00      	nop
 800ac70:	2000001c 	.word	0x2000001c
 800ac74:	0800be4d 	.word	0x0800be4d
 800ac78:	0800be5a 	.word	0x0800be5a
 800ac7c:	0800be88 	.word	0x0800be88

0800ac80 <fiprintf>:
 800ac80:	b40e      	push	{r1, r2, r3}
 800ac82:	b503      	push	{r0, r1, lr}
 800ac84:	4601      	mov	r1, r0
 800ac86:	ab03      	add	r3, sp, #12
 800ac88:	4805      	ldr	r0, [pc, #20]	; (800aca0 <fiprintf+0x20>)
 800ac8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac8e:	6800      	ldr	r0, [r0, #0]
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	f000 f879 	bl	800ad88 <_vfiprintf_r>
 800ac96:	b002      	add	sp, #8
 800ac98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac9c:	b003      	add	sp, #12
 800ac9e:	4770      	bx	lr
 800aca0:	2000001c 	.word	0x2000001c

0800aca4 <memmove>:
 800aca4:	4288      	cmp	r0, r1
 800aca6:	b510      	push	{r4, lr}
 800aca8:	eb01 0402 	add.w	r4, r1, r2
 800acac:	d902      	bls.n	800acb4 <memmove+0x10>
 800acae:	4284      	cmp	r4, r0
 800acb0:	4623      	mov	r3, r4
 800acb2:	d807      	bhi.n	800acc4 <memmove+0x20>
 800acb4:	1e43      	subs	r3, r0, #1
 800acb6:	42a1      	cmp	r1, r4
 800acb8:	d008      	beq.n	800accc <memmove+0x28>
 800acba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acc2:	e7f8      	b.n	800acb6 <memmove+0x12>
 800acc4:	4402      	add	r2, r0
 800acc6:	4601      	mov	r1, r0
 800acc8:	428a      	cmp	r2, r1
 800acca:	d100      	bne.n	800acce <memmove+0x2a>
 800accc:	bd10      	pop	{r4, pc}
 800acce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acd6:	e7f7      	b.n	800acc8 <memmove+0x24>

0800acd8 <_realloc_r>:
 800acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acdc:	4680      	mov	r8, r0
 800acde:	4614      	mov	r4, r2
 800ace0:	460e      	mov	r6, r1
 800ace2:	b921      	cbnz	r1, 800acee <_realloc_r+0x16>
 800ace4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ace8:	4611      	mov	r1, r2
 800acea:	f7fc ba77 	b.w	80071dc <_malloc_r>
 800acee:	b92a      	cbnz	r2, 800acfc <_realloc_r+0x24>
 800acf0:	f7fc fa08 	bl	8007104 <_free_r>
 800acf4:	4625      	mov	r5, r4
 800acf6:	4628      	mov	r0, r5
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfc:	f000 fc58 	bl	800b5b0 <_malloc_usable_size_r>
 800ad00:	4284      	cmp	r4, r0
 800ad02:	4607      	mov	r7, r0
 800ad04:	d802      	bhi.n	800ad0c <_realloc_r+0x34>
 800ad06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad0a:	d812      	bhi.n	800ad32 <_realloc_r+0x5a>
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	4640      	mov	r0, r8
 800ad10:	f7fc fa64 	bl	80071dc <_malloc_r>
 800ad14:	4605      	mov	r5, r0
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d0ed      	beq.n	800acf6 <_realloc_r+0x1e>
 800ad1a:	42bc      	cmp	r4, r7
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	4631      	mov	r1, r6
 800ad20:	bf28      	it	cs
 800ad22:	463a      	movcs	r2, r7
 800ad24:	f7fc f9d8 	bl	80070d8 <memcpy>
 800ad28:	4631      	mov	r1, r6
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	f7fc f9ea 	bl	8007104 <_free_r>
 800ad30:	e7e1      	b.n	800acf6 <_realloc_r+0x1e>
 800ad32:	4635      	mov	r5, r6
 800ad34:	e7df      	b.n	800acf6 <_realloc_r+0x1e>

0800ad36 <__sfputc_r>:
 800ad36:	6893      	ldr	r3, [r2, #8]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	b410      	push	{r4}
 800ad3e:	6093      	str	r3, [r2, #8]
 800ad40:	da08      	bge.n	800ad54 <__sfputc_r+0x1e>
 800ad42:	6994      	ldr	r4, [r2, #24]
 800ad44:	42a3      	cmp	r3, r4
 800ad46:	db01      	blt.n	800ad4c <__sfputc_r+0x16>
 800ad48:	290a      	cmp	r1, #10
 800ad4a:	d103      	bne.n	800ad54 <__sfputc_r+0x1e>
 800ad4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad50:	f000 b94a 	b.w	800afe8 <__swbuf_r>
 800ad54:	6813      	ldr	r3, [r2, #0]
 800ad56:	1c58      	adds	r0, r3, #1
 800ad58:	6010      	str	r0, [r2, #0]
 800ad5a:	7019      	strb	r1, [r3, #0]
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <__sfputs_r>:
 800ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad66:	4606      	mov	r6, r0
 800ad68:	460f      	mov	r7, r1
 800ad6a:	4614      	mov	r4, r2
 800ad6c:	18d5      	adds	r5, r2, r3
 800ad6e:	42ac      	cmp	r4, r5
 800ad70:	d101      	bne.n	800ad76 <__sfputs_r+0x12>
 800ad72:	2000      	movs	r0, #0
 800ad74:	e007      	b.n	800ad86 <__sfputs_r+0x22>
 800ad76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad7a:	463a      	mov	r2, r7
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	f7ff ffda 	bl	800ad36 <__sfputc_r>
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	d1f3      	bne.n	800ad6e <__sfputs_r+0xa>
 800ad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad88 <_vfiprintf_r>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	460d      	mov	r5, r1
 800ad8e:	b09d      	sub	sp, #116	; 0x74
 800ad90:	4614      	mov	r4, r2
 800ad92:	4698      	mov	r8, r3
 800ad94:	4606      	mov	r6, r0
 800ad96:	b118      	cbz	r0, 800ada0 <_vfiprintf_r+0x18>
 800ad98:	6983      	ldr	r3, [r0, #24]
 800ad9a:	b90b      	cbnz	r3, 800ada0 <_vfiprintf_r+0x18>
 800ad9c:	f000 fb06 	bl	800b3ac <__sinit>
 800ada0:	4b89      	ldr	r3, [pc, #548]	; (800afc8 <_vfiprintf_r+0x240>)
 800ada2:	429d      	cmp	r5, r3
 800ada4:	d11b      	bne.n	800adde <_vfiprintf_r+0x56>
 800ada6:	6875      	ldr	r5, [r6, #4]
 800ada8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adaa:	07d9      	lsls	r1, r3, #31
 800adac:	d405      	bmi.n	800adba <_vfiprintf_r+0x32>
 800adae:	89ab      	ldrh	r3, [r5, #12]
 800adb0:	059a      	lsls	r2, r3, #22
 800adb2:	d402      	bmi.n	800adba <_vfiprintf_r+0x32>
 800adb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adb6:	f7f6 fd46 	bl	8001846 <__retarget_lock_acquire_recursive>
 800adba:	89ab      	ldrh	r3, [r5, #12]
 800adbc:	071b      	lsls	r3, r3, #28
 800adbe:	d501      	bpl.n	800adc4 <_vfiprintf_r+0x3c>
 800adc0:	692b      	ldr	r3, [r5, #16]
 800adc2:	b9eb      	cbnz	r3, 800ae00 <_vfiprintf_r+0x78>
 800adc4:	4629      	mov	r1, r5
 800adc6:	4630      	mov	r0, r6
 800adc8:	f000 f960 	bl	800b08c <__swsetup_r>
 800adcc:	b1c0      	cbz	r0, 800ae00 <_vfiprintf_r+0x78>
 800adce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800add0:	07dc      	lsls	r4, r3, #31
 800add2:	d50e      	bpl.n	800adf2 <_vfiprintf_r+0x6a>
 800add4:	f04f 30ff 	mov.w	r0, #4294967295
 800add8:	b01d      	add	sp, #116	; 0x74
 800adda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adde:	4b7b      	ldr	r3, [pc, #492]	; (800afcc <_vfiprintf_r+0x244>)
 800ade0:	429d      	cmp	r5, r3
 800ade2:	d101      	bne.n	800ade8 <_vfiprintf_r+0x60>
 800ade4:	68b5      	ldr	r5, [r6, #8]
 800ade6:	e7df      	b.n	800ada8 <_vfiprintf_r+0x20>
 800ade8:	4b79      	ldr	r3, [pc, #484]	; (800afd0 <_vfiprintf_r+0x248>)
 800adea:	429d      	cmp	r5, r3
 800adec:	bf08      	it	eq
 800adee:	68f5      	ldreq	r5, [r6, #12]
 800adf0:	e7da      	b.n	800ada8 <_vfiprintf_r+0x20>
 800adf2:	89ab      	ldrh	r3, [r5, #12]
 800adf4:	0598      	lsls	r0, r3, #22
 800adf6:	d4ed      	bmi.n	800add4 <_vfiprintf_r+0x4c>
 800adf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adfa:	f7f6 fd38 	bl	800186e <__retarget_lock_release_recursive>
 800adfe:	e7e9      	b.n	800add4 <_vfiprintf_r+0x4c>
 800ae00:	2300      	movs	r3, #0
 800ae02:	9309      	str	r3, [sp, #36]	; 0x24
 800ae04:	2320      	movs	r3, #32
 800ae06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae0e:	2330      	movs	r3, #48	; 0x30
 800ae10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800afd4 <_vfiprintf_r+0x24c>
 800ae14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae18:	f04f 0901 	mov.w	r9, #1
 800ae1c:	4623      	mov	r3, r4
 800ae1e:	469a      	mov	sl, r3
 800ae20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae24:	b10a      	cbz	r2, 800ae2a <_vfiprintf_r+0xa2>
 800ae26:	2a25      	cmp	r2, #37	; 0x25
 800ae28:	d1f9      	bne.n	800ae1e <_vfiprintf_r+0x96>
 800ae2a:	ebba 0b04 	subs.w	fp, sl, r4
 800ae2e:	d00b      	beq.n	800ae48 <_vfiprintf_r+0xc0>
 800ae30:	465b      	mov	r3, fp
 800ae32:	4622      	mov	r2, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	4630      	mov	r0, r6
 800ae38:	f7ff ff94 	bl	800ad64 <__sfputs_r>
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	f000 80aa 	beq.w	800af96 <_vfiprintf_r+0x20e>
 800ae42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae44:	445a      	add	r2, fp
 800ae46:	9209      	str	r2, [sp, #36]	; 0x24
 800ae48:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 80a2 	beq.w	800af96 <_vfiprintf_r+0x20e>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f04f 32ff 	mov.w	r2, #4294967295
 800ae58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae5c:	f10a 0a01 	add.w	sl, sl, #1
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	9307      	str	r3, [sp, #28]
 800ae64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae68:	931a      	str	r3, [sp, #104]	; 0x68
 800ae6a:	4654      	mov	r4, sl
 800ae6c:	2205      	movs	r2, #5
 800ae6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae72:	4858      	ldr	r0, [pc, #352]	; (800afd4 <_vfiprintf_r+0x24c>)
 800ae74:	f7f5 f9ec 	bl	8000250 <memchr>
 800ae78:	9a04      	ldr	r2, [sp, #16]
 800ae7a:	b9d8      	cbnz	r0, 800aeb4 <_vfiprintf_r+0x12c>
 800ae7c:	06d1      	lsls	r1, r2, #27
 800ae7e:	bf44      	itt	mi
 800ae80:	2320      	movmi	r3, #32
 800ae82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae86:	0713      	lsls	r3, r2, #28
 800ae88:	bf44      	itt	mi
 800ae8a:	232b      	movmi	r3, #43	; 0x2b
 800ae8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae90:	f89a 3000 	ldrb.w	r3, [sl]
 800ae94:	2b2a      	cmp	r3, #42	; 0x2a
 800ae96:	d015      	beq.n	800aec4 <_vfiprintf_r+0x13c>
 800ae98:	9a07      	ldr	r2, [sp, #28]
 800ae9a:	4654      	mov	r4, sl
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	f04f 0c0a 	mov.w	ip, #10
 800aea2:	4621      	mov	r1, r4
 800aea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aea8:	3b30      	subs	r3, #48	; 0x30
 800aeaa:	2b09      	cmp	r3, #9
 800aeac:	d94e      	bls.n	800af4c <_vfiprintf_r+0x1c4>
 800aeae:	b1b0      	cbz	r0, 800aede <_vfiprintf_r+0x156>
 800aeb0:	9207      	str	r2, [sp, #28]
 800aeb2:	e014      	b.n	800aede <_vfiprintf_r+0x156>
 800aeb4:	eba0 0308 	sub.w	r3, r0, r8
 800aeb8:	fa09 f303 	lsl.w	r3, r9, r3
 800aebc:	4313      	orrs	r3, r2
 800aebe:	9304      	str	r3, [sp, #16]
 800aec0:	46a2      	mov	sl, r4
 800aec2:	e7d2      	b.n	800ae6a <_vfiprintf_r+0xe2>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	1d19      	adds	r1, r3, #4
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	9103      	str	r1, [sp, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	bfbb      	ittet	lt
 800aed0:	425b      	neglt	r3, r3
 800aed2:	f042 0202 	orrlt.w	r2, r2, #2
 800aed6:	9307      	strge	r3, [sp, #28]
 800aed8:	9307      	strlt	r3, [sp, #28]
 800aeda:	bfb8      	it	lt
 800aedc:	9204      	strlt	r2, [sp, #16]
 800aede:	7823      	ldrb	r3, [r4, #0]
 800aee0:	2b2e      	cmp	r3, #46	; 0x2e
 800aee2:	d10c      	bne.n	800aefe <_vfiprintf_r+0x176>
 800aee4:	7863      	ldrb	r3, [r4, #1]
 800aee6:	2b2a      	cmp	r3, #42	; 0x2a
 800aee8:	d135      	bne.n	800af56 <_vfiprintf_r+0x1ce>
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	1d1a      	adds	r2, r3, #4
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	9203      	str	r2, [sp, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	bfb8      	it	lt
 800aef6:	f04f 33ff 	movlt.w	r3, #4294967295
 800aefa:	3402      	adds	r4, #2
 800aefc:	9305      	str	r3, [sp, #20]
 800aefe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800afe4 <_vfiprintf_r+0x25c>
 800af02:	7821      	ldrb	r1, [r4, #0]
 800af04:	2203      	movs	r2, #3
 800af06:	4650      	mov	r0, sl
 800af08:	f7f5 f9a2 	bl	8000250 <memchr>
 800af0c:	b140      	cbz	r0, 800af20 <_vfiprintf_r+0x198>
 800af0e:	2340      	movs	r3, #64	; 0x40
 800af10:	eba0 000a 	sub.w	r0, r0, sl
 800af14:	fa03 f000 	lsl.w	r0, r3, r0
 800af18:	9b04      	ldr	r3, [sp, #16]
 800af1a:	4303      	orrs	r3, r0
 800af1c:	3401      	adds	r4, #1
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	482c      	ldr	r0, [pc, #176]	; (800afd8 <_vfiprintf_r+0x250>)
 800af26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af2a:	2206      	movs	r2, #6
 800af2c:	f7f5 f990 	bl	8000250 <memchr>
 800af30:	2800      	cmp	r0, #0
 800af32:	d03f      	beq.n	800afb4 <_vfiprintf_r+0x22c>
 800af34:	4b29      	ldr	r3, [pc, #164]	; (800afdc <_vfiprintf_r+0x254>)
 800af36:	bb1b      	cbnz	r3, 800af80 <_vfiprintf_r+0x1f8>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	3307      	adds	r3, #7
 800af3c:	f023 0307 	bic.w	r3, r3, #7
 800af40:	3308      	adds	r3, #8
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af46:	443b      	add	r3, r7
 800af48:	9309      	str	r3, [sp, #36]	; 0x24
 800af4a:	e767      	b.n	800ae1c <_vfiprintf_r+0x94>
 800af4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af50:	460c      	mov	r4, r1
 800af52:	2001      	movs	r0, #1
 800af54:	e7a5      	b.n	800aea2 <_vfiprintf_r+0x11a>
 800af56:	2300      	movs	r3, #0
 800af58:	3401      	adds	r4, #1
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	4619      	mov	r1, r3
 800af5e:	f04f 0c0a 	mov.w	ip, #10
 800af62:	4620      	mov	r0, r4
 800af64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af68:	3a30      	subs	r2, #48	; 0x30
 800af6a:	2a09      	cmp	r2, #9
 800af6c:	d903      	bls.n	800af76 <_vfiprintf_r+0x1ee>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0c5      	beq.n	800aefe <_vfiprintf_r+0x176>
 800af72:	9105      	str	r1, [sp, #20]
 800af74:	e7c3      	b.n	800aefe <_vfiprintf_r+0x176>
 800af76:	fb0c 2101 	mla	r1, ip, r1, r2
 800af7a:	4604      	mov	r4, r0
 800af7c:	2301      	movs	r3, #1
 800af7e:	e7f0      	b.n	800af62 <_vfiprintf_r+0x1da>
 800af80:	ab03      	add	r3, sp, #12
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	462a      	mov	r2, r5
 800af86:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <_vfiprintf_r+0x258>)
 800af88:	a904      	add	r1, sp, #16
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7fc fa2c 	bl	80073e8 <_printf_float>
 800af90:	4607      	mov	r7, r0
 800af92:	1c78      	adds	r0, r7, #1
 800af94:	d1d6      	bne.n	800af44 <_vfiprintf_r+0x1bc>
 800af96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af98:	07d9      	lsls	r1, r3, #31
 800af9a:	d405      	bmi.n	800afa8 <_vfiprintf_r+0x220>
 800af9c:	89ab      	ldrh	r3, [r5, #12]
 800af9e:	059a      	lsls	r2, r3, #22
 800afa0:	d402      	bmi.n	800afa8 <_vfiprintf_r+0x220>
 800afa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afa4:	f7f6 fc63 	bl	800186e <__retarget_lock_release_recursive>
 800afa8:	89ab      	ldrh	r3, [r5, #12]
 800afaa:	065b      	lsls	r3, r3, #25
 800afac:	f53f af12 	bmi.w	800add4 <_vfiprintf_r+0x4c>
 800afb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afb2:	e711      	b.n	800add8 <_vfiprintf_r+0x50>
 800afb4:	ab03      	add	r3, sp, #12
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	462a      	mov	r2, r5
 800afba:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <_vfiprintf_r+0x258>)
 800afbc:	a904      	add	r1, sp, #16
 800afbe:	4630      	mov	r0, r6
 800afc0:	f7fc fc9e 	bl	8007900 <_printf_i>
 800afc4:	e7e4      	b.n	800af90 <_vfiprintf_r+0x208>
 800afc6:	bf00      	nop
 800afc8:	0800beac 	.word	0x0800beac
 800afcc:	0800becc 	.word	0x0800becc
 800afd0:	0800be8c 	.word	0x0800be8c
 800afd4:	0800be3c 	.word	0x0800be3c
 800afd8:	0800be46 	.word	0x0800be46
 800afdc:	080073e9 	.word	0x080073e9
 800afe0:	0800ad65 	.word	0x0800ad65
 800afe4:	0800be42 	.word	0x0800be42

0800afe8 <__swbuf_r>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	460e      	mov	r6, r1
 800afec:	4614      	mov	r4, r2
 800afee:	4605      	mov	r5, r0
 800aff0:	b118      	cbz	r0, 800affa <__swbuf_r+0x12>
 800aff2:	6983      	ldr	r3, [r0, #24]
 800aff4:	b90b      	cbnz	r3, 800affa <__swbuf_r+0x12>
 800aff6:	f000 f9d9 	bl	800b3ac <__sinit>
 800affa:	4b21      	ldr	r3, [pc, #132]	; (800b080 <__swbuf_r+0x98>)
 800affc:	429c      	cmp	r4, r3
 800affe:	d12b      	bne.n	800b058 <__swbuf_r+0x70>
 800b000:	686c      	ldr	r4, [r5, #4]
 800b002:	69a3      	ldr	r3, [r4, #24]
 800b004:	60a3      	str	r3, [r4, #8]
 800b006:	89a3      	ldrh	r3, [r4, #12]
 800b008:	071a      	lsls	r2, r3, #28
 800b00a:	d52f      	bpl.n	800b06c <__swbuf_r+0x84>
 800b00c:	6923      	ldr	r3, [r4, #16]
 800b00e:	b36b      	cbz	r3, 800b06c <__swbuf_r+0x84>
 800b010:	6923      	ldr	r3, [r4, #16]
 800b012:	6820      	ldr	r0, [r4, #0]
 800b014:	1ac0      	subs	r0, r0, r3
 800b016:	6963      	ldr	r3, [r4, #20]
 800b018:	b2f6      	uxtb	r6, r6
 800b01a:	4283      	cmp	r3, r0
 800b01c:	4637      	mov	r7, r6
 800b01e:	dc04      	bgt.n	800b02a <__swbuf_r+0x42>
 800b020:	4621      	mov	r1, r4
 800b022:	4628      	mov	r0, r5
 800b024:	f000 f92e 	bl	800b284 <_fflush_r>
 800b028:	bb30      	cbnz	r0, 800b078 <__swbuf_r+0x90>
 800b02a:	68a3      	ldr	r3, [r4, #8]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	60a3      	str	r3, [r4, #8]
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	6022      	str	r2, [r4, #0]
 800b036:	701e      	strb	r6, [r3, #0]
 800b038:	6963      	ldr	r3, [r4, #20]
 800b03a:	3001      	adds	r0, #1
 800b03c:	4283      	cmp	r3, r0
 800b03e:	d004      	beq.n	800b04a <__swbuf_r+0x62>
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	07db      	lsls	r3, r3, #31
 800b044:	d506      	bpl.n	800b054 <__swbuf_r+0x6c>
 800b046:	2e0a      	cmp	r6, #10
 800b048:	d104      	bne.n	800b054 <__swbuf_r+0x6c>
 800b04a:	4621      	mov	r1, r4
 800b04c:	4628      	mov	r0, r5
 800b04e:	f000 f919 	bl	800b284 <_fflush_r>
 800b052:	b988      	cbnz	r0, 800b078 <__swbuf_r+0x90>
 800b054:	4638      	mov	r0, r7
 800b056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b058:	4b0a      	ldr	r3, [pc, #40]	; (800b084 <__swbuf_r+0x9c>)
 800b05a:	429c      	cmp	r4, r3
 800b05c:	d101      	bne.n	800b062 <__swbuf_r+0x7a>
 800b05e:	68ac      	ldr	r4, [r5, #8]
 800b060:	e7cf      	b.n	800b002 <__swbuf_r+0x1a>
 800b062:	4b09      	ldr	r3, [pc, #36]	; (800b088 <__swbuf_r+0xa0>)
 800b064:	429c      	cmp	r4, r3
 800b066:	bf08      	it	eq
 800b068:	68ec      	ldreq	r4, [r5, #12]
 800b06a:	e7ca      	b.n	800b002 <__swbuf_r+0x1a>
 800b06c:	4621      	mov	r1, r4
 800b06e:	4628      	mov	r0, r5
 800b070:	f000 f80c 	bl	800b08c <__swsetup_r>
 800b074:	2800      	cmp	r0, #0
 800b076:	d0cb      	beq.n	800b010 <__swbuf_r+0x28>
 800b078:	f04f 37ff 	mov.w	r7, #4294967295
 800b07c:	e7ea      	b.n	800b054 <__swbuf_r+0x6c>
 800b07e:	bf00      	nop
 800b080:	0800beac 	.word	0x0800beac
 800b084:	0800becc 	.word	0x0800becc
 800b088:	0800be8c 	.word	0x0800be8c

0800b08c <__swsetup_r>:
 800b08c:	4b32      	ldr	r3, [pc, #200]	; (800b158 <__swsetup_r+0xcc>)
 800b08e:	b570      	push	{r4, r5, r6, lr}
 800b090:	681d      	ldr	r5, [r3, #0]
 800b092:	4606      	mov	r6, r0
 800b094:	460c      	mov	r4, r1
 800b096:	b125      	cbz	r5, 800b0a2 <__swsetup_r+0x16>
 800b098:	69ab      	ldr	r3, [r5, #24]
 800b09a:	b913      	cbnz	r3, 800b0a2 <__swsetup_r+0x16>
 800b09c:	4628      	mov	r0, r5
 800b09e:	f000 f985 	bl	800b3ac <__sinit>
 800b0a2:	4b2e      	ldr	r3, [pc, #184]	; (800b15c <__swsetup_r+0xd0>)
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	d10f      	bne.n	800b0c8 <__swsetup_r+0x3c>
 800b0a8:	686c      	ldr	r4, [r5, #4]
 800b0aa:	89a3      	ldrh	r3, [r4, #12]
 800b0ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0b0:	0719      	lsls	r1, r3, #28
 800b0b2:	d42c      	bmi.n	800b10e <__swsetup_r+0x82>
 800b0b4:	06dd      	lsls	r5, r3, #27
 800b0b6:	d411      	bmi.n	800b0dc <__swsetup_r+0x50>
 800b0b8:	2309      	movs	r3, #9
 800b0ba:	6033      	str	r3, [r6, #0]
 800b0bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c6:	e03e      	b.n	800b146 <__swsetup_r+0xba>
 800b0c8:	4b25      	ldr	r3, [pc, #148]	; (800b160 <__swsetup_r+0xd4>)
 800b0ca:	429c      	cmp	r4, r3
 800b0cc:	d101      	bne.n	800b0d2 <__swsetup_r+0x46>
 800b0ce:	68ac      	ldr	r4, [r5, #8]
 800b0d0:	e7eb      	b.n	800b0aa <__swsetup_r+0x1e>
 800b0d2:	4b24      	ldr	r3, [pc, #144]	; (800b164 <__swsetup_r+0xd8>)
 800b0d4:	429c      	cmp	r4, r3
 800b0d6:	bf08      	it	eq
 800b0d8:	68ec      	ldreq	r4, [r5, #12]
 800b0da:	e7e6      	b.n	800b0aa <__swsetup_r+0x1e>
 800b0dc:	0758      	lsls	r0, r3, #29
 800b0de:	d512      	bpl.n	800b106 <__swsetup_r+0x7a>
 800b0e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0e2:	b141      	cbz	r1, 800b0f6 <__swsetup_r+0x6a>
 800b0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0e8:	4299      	cmp	r1, r3
 800b0ea:	d002      	beq.n	800b0f2 <__swsetup_r+0x66>
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7fc f809 	bl	8007104 <_free_r>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	6363      	str	r3, [r4, #52]	; 0x34
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b0fc:	81a3      	strh	r3, [r4, #12]
 800b0fe:	2300      	movs	r3, #0
 800b100:	6063      	str	r3, [r4, #4]
 800b102:	6923      	ldr	r3, [r4, #16]
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	89a3      	ldrh	r3, [r4, #12]
 800b108:	f043 0308 	orr.w	r3, r3, #8
 800b10c:	81a3      	strh	r3, [r4, #12]
 800b10e:	6923      	ldr	r3, [r4, #16]
 800b110:	b94b      	cbnz	r3, 800b126 <__swsetup_r+0x9a>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b11c:	d003      	beq.n	800b126 <__swsetup_r+0x9a>
 800b11e:	4621      	mov	r1, r4
 800b120:	4630      	mov	r0, r6
 800b122:	f000 fa05 	bl	800b530 <__smakebuf_r>
 800b126:	89a0      	ldrh	r0, [r4, #12]
 800b128:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b12c:	f010 0301 	ands.w	r3, r0, #1
 800b130:	d00a      	beq.n	800b148 <__swsetup_r+0xbc>
 800b132:	2300      	movs	r3, #0
 800b134:	60a3      	str	r3, [r4, #8]
 800b136:	6963      	ldr	r3, [r4, #20]
 800b138:	425b      	negs	r3, r3
 800b13a:	61a3      	str	r3, [r4, #24]
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	b943      	cbnz	r3, 800b152 <__swsetup_r+0xc6>
 800b140:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b144:	d1ba      	bne.n	800b0bc <__swsetup_r+0x30>
 800b146:	bd70      	pop	{r4, r5, r6, pc}
 800b148:	0781      	lsls	r1, r0, #30
 800b14a:	bf58      	it	pl
 800b14c:	6963      	ldrpl	r3, [r4, #20]
 800b14e:	60a3      	str	r3, [r4, #8]
 800b150:	e7f4      	b.n	800b13c <__swsetup_r+0xb0>
 800b152:	2000      	movs	r0, #0
 800b154:	e7f7      	b.n	800b146 <__swsetup_r+0xba>
 800b156:	bf00      	nop
 800b158:	2000001c 	.word	0x2000001c
 800b15c:	0800beac 	.word	0x0800beac
 800b160:	0800becc 	.word	0x0800becc
 800b164:	0800be8c 	.word	0x0800be8c

0800b168 <abort>:
 800b168:	b508      	push	{r3, lr}
 800b16a:	2006      	movs	r0, #6
 800b16c:	f000 fa50 	bl	800b610 <raise>
 800b170:	2001      	movs	r0, #1
 800b172:	f7f6 f84f 	bl	8001214 <_exit>
	...

0800b178 <__sflush_r>:
 800b178:	898a      	ldrh	r2, [r1, #12]
 800b17a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b17e:	4605      	mov	r5, r0
 800b180:	0710      	lsls	r0, r2, #28
 800b182:	460c      	mov	r4, r1
 800b184:	d458      	bmi.n	800b238 <__sflush_r+0xc0>
 800b186:	684b      	ldr	r3, [r1, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dc05      	bgt.n	800b198 <__sflush_r+0x20>
 800b18c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b18e:	2b00      	cmp	r3, #0
 800b190:	dc02      	bgt.n	800b198 <__sflush_r+0x20>
 800b192:	2000      	movs	r0, #0
 800b194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	d0f9      	beq.n	800b192 <__sflush_r+0x1a>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1a4:	682f      	ldr	r7, [r5, #0]
 800b1a6:	602b      	str	r3, [r5, #0]
 800b1a8:	d032      	beq.n	800b210 <__sflush_r+0x98>
 800b1aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	075a      	lsls	r2, r3, #29
 800b1b0:	d505      	bpl.n	800b1be <__sflush_r+0x46>
 800b1b2:	6863      	ldr	r3, [r4, #4]
 800b1b4:	1ac0      	subs	r0, r0, r3
 800b1b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1b8:	b10b      	cbz	r3, 800b1be <__sflush_r+0x46>
 800b1ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1bc:	1ac0      	subs	r0, r0, r3
 800b1be:	2300      	movs	r3, #0
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1c4:	6a21      	ldr	r1, [r4, #32]
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	47b0      	blx	r6
 800b1ca:	1c43      	adds	r3, r0, #1
 800b1cc:	89a3      	ldrh	r3, [r4, #12]
 800b1ce:	d106      	bne.n	800b1de <__sflush_r+0x66>
 800b1d0:	6829      	ldr	r1, [r5, #0]
 800b1d2:	291d      	cmp	r1, #29
 800b1d4:	d82c      	bhi.n	800b230 <__sflush_r+0xb8>
 800b1d6:	4a2a      	ldr	r2, [pc, #168]	; (800b280 <__sflush_r+0x108>)
 800b1d8:	40ca      	lsrs	r2, r1
 800b1da:	07d6      	lsls	r6, r2, #31
 800b1dc:	d528      	bpl.n	800b230 <__sflush_r+0xb8>
 800b1de:	2200      	movs	r2, #0
 800b1e0:	6062      	str	r2, [r4, #4]
 800b1e2:	04d9      	lsls	r1, r3, #19
 800b1e4:	6922      	ldr	r2, [r4, #16]
 800b1e6:	6022      	str	r2, [r4, #0]
 800b1e8:	d504      	bpl.n	800b1f4 <__sflush_r+0x7c>
 800b1ea:	1c42      	adds	r2, r0, #1
 800b1ec:	d101      	bne.n	800b1f2 <__sflush_r+0x7a>
 800b1ee:	682b      	ldr	r3, [r5, #0]
 800b1f0:	b903      	cbnz	r3, 800b1f4 <__sflush_r+0x7c>
 800b1f2:	6560      	str	r0, [r4, #84]	; 0x54
 800b1f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1f6:	602f      	str	r7, [r5, #0]
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	d0ca      	beq.n	800b192 <__sflush_r+0x1a>
 800b1fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b200:	4299      	cmp	r1, r3
 800b202:	d002      	beq.n	800b20a <__sflush_r+0x92>
 800b204:	4628      	mov	r0, r5
 800b206:	f7fb ff7d 	bl	8007104 <_free_r>
 800b20a:	2000      	movs	r0, #0
 800b20c:	6360      	str	r0, [r4, #52]	; 0x34
 800b20e:	e7c1      	b.n	800b194 <__sflush_r+0x1c>
 800b210:	6a21      	ldr	r1, [r4, #32]
 800b212:	2301      	movs	r3, #1
 800b214:	4628      	mov	r0, r5
 800b216:	47b0      	blx	r6
 800b218:	1c41      	adds	r1, r0, #1
 800b21a:	d1c7      	bne.n	800b1ac <__sflush_r+0x34>
 800b21c:	682b      	ldr	r3, [r5, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0c4      	beq.n	800b1ac <__sflush_r+0x34>
 800b222:	2b1d      	cmp	r3, #29
 800b224:	d001      	beq.n	800b22a <__sflush_r+0xb2>
 800b226:	2b16      	cmp	r3, #22
 800b228:	d101      	bne.n	800b22e <__sflush_r+0xb6>
 800b22a:	602f      	str	r7, [r5, #0]
 800b22c:	e7b1      	b.n	800b192 <__sflush_r+0x1a>
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b234:	81a3      	strh	r3, [r4, #12]
 800b236:	e7ad      	b.n	800b194 <__sflush_r+0x1c>
 800b238:	690f      	ldr	r7, [r1, #16]
 800b23a:	2f00      	cmp	r7, #0
 800b23c:	d0a9      	beq.n	800b192 <__sflush_r+0x1a>
 800b23e:	0793      	lsls	r3, r2, #30
 800b240:	680e      	ldr	r6, [r1, #0]
 800b242:	bf08      	it	eq
 800b244:	694b      	ldreq	r3, [r1, #20]
 800b246:	600f      	str	r7, [r1, #0]
 800b248:	bf18      	it	ne
 800b24a:	2300      	movne	r3, #0
 800b24c:	eba6 0807 	sub.w	r8, r6, r7
 800b250:	608b      	str	r3, [r1, #8]
 800b252:	f1b8 0f00 	cmp.w	r8, #0
 800b256:	dd9c      	ble.n	800b192 <__sflush_r+0x1a>
 800b258:	6a21      	ldr	r1, [r4, #32]
 800b25a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b25c:	4643      	mov	r3, r8
 800b25e:	463a      	mov	r2, r7
 800b260:	4628      	mov	r0, r5
 800b262:	47b0      	blx	r6
 800b264:	2800      	cmp	r0, #0
 800b266:	dc06      	bgt.n	800b276 <__sflush_r+0xfe>
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b26e:	81a3      	strh	r3, [r4, #12]
 800b270:	f04f 30ff 	mov.w	r0, #4294967295
 800b274:	e78e      	b.n	800b194 <__sflush_r+0x1c>
 800b276:	4407      	add	r7, r0
 800b278:	eba8 0800 	sub.w	r8, r8, r0
 800b27c:	e7e9      	b.n	800b252 <__sflush_r+0xda>
 800b27e:	bf00      	nop
 800b280:	20400001 	.word	0x20400001

0800b284 <_fflush_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	690b      	ldr	r3, [r1, #16]
 800b288:	4605      	mov	r5, r0
 800b28a:	460c      	mov	r4, r1
 800b28c:	b913      	cbnz	r3, 800b294 <_fflush_r+0x10>
 800b28e:	2500      	movs	r5, #0
 800b290:	4628      	mov	r0, r5
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	b118      	cbz	r0, 800b29e <_fflush_r+0x1a>
 800b296:	6983      	ldr	r3, [r0, #24]
 800b298:	b90b      	cbnz	r3, 800b29e <_fflush_r+0x1a>
 800b29a:	f000 f887 	bl	800b3ac <__sinit>
 800b29e:	4b14      	ldr	r3, [pc, #80]	; (800b2f0 <_fflush_r+0x6c>)
 800b2a0:	429c      	cmp	r4, r3
 800b2a2:	d11b      	bne.n	800b2dc <_fflush_r+0x58>
 800b2a4:	686c      	ldr	r4, [r5, #4]
 800b2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0ef      	beq.n	800b28e <_fflush_r+0xa>
 800b2ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2b0:	07d0      	lsls	r0, r2, #31
 800b2b2:	d404      	bmi.n	800b2be <_fflush_r+0x3a>
 800b2b4:	0599      	lsls	r1, r3, #22
 800b2b6:	d402      	bmi.n	800b2be <_fflush_r+0x3a>
 800b2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ba:	f7f6 fac4 	bl	8001846 <__retarget_lock_acquire_recursive>
 800b2be:	4628      	mov	r0, r5
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	f7ff ff59 	bl	800b178 <__sflush_r>
 800b2c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2c8:	07da      	lsls	r2, r3, #31
 800b2ca:	4605      	mov	r5, r0
 800b2cc:	d4e0      	bmi.n	800b290 <_fflush_r+0xc>
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	059b      	lsls	r3, r3, #22
 800b2d2:	d4dd      	bmi.n	800b290 <_fflush_r+0xc>
 800b2d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2d6:	f7f6 faca 	bl	800186e <__retarget_lock_release_recursive>
 800b2da:	e7d9      	b.n	800b290 <_fflush_r+0xc>
 800b2dc:	4b05      	ldr	r3, [pc, #20]	; (800b2f4 <_fflush_r+0x70>)
 800b2de:	429c      	cmp	r4, r3
 800b2e0:	d101      	bne.n	800b2e6 <_fflush_r+0x62>
 800b2e2:	68ac      	ldr	r4, [r5, #8]
 800b2e4:	e7df      	b.n	800b2a6 <_fflush_r+0x22>
 800b2e6:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <_fflush_r+0x74>)
 800b2e8:	429c      	cmp	r4, r3
 800b2ea:	bf08      	it	eq
 800b2ec:	68ec      	ldreq	r4, [r5, #12]
 800b2ee:	e7da      	b.n	800b2a6 <_fflush_r+0x22>
 800b2f0:	0800beac 	.word	0x0800beac
 800b2f4:	0800becc 	.word	0x0800becc
 800b2f8:	0800be8c 	.word	0x0800be8c

0800b2fc <std>:
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	b510      	push	{r4, lr}
 800b300:	4604      	mov	r4, r0
 800b302:	e9c0 3300 	strd	r3, r3, [r0]
 800b306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b30a:	6083      	str	r3, [r0, #8]
 800b30c:	8181      	strh	r1, [r0, #12]
 800b30e:	6643      	str	r3, [r0, #100]	; 0x64
 800b310:	81c2      	strh	r2, [r0, #14]
 800b312:	6183      	str	r3, [r0, #24]
 800b314:	4619      	mov	r1, r3
 800b316:	2208      	movs	r2, #8
 800b318:	305c      	adds	r0, #92	; 0x5c
 800b31a:	f7fb feeb 	bl	80070f4 <memset>
 800b31e:	4b05      	ldr	r3, [pc, #20]	; (800b334 <std+0x38>)
 800b320:	6263      	str	r3, [r4, #36]	; 0x24
 800b322:	4b05      	ldr	r3, [pc, #20]	; (800b338 <std+0x3c>)
 800b324:	62a3      	str	r3, [r4, #40]	; 0x28
 800b326:	4b05      	ldr	r3, [pc, #20]	; (800b33c <std+0x40>)
 800b328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b32a:	4b05      	ldr	r3, [pc, #20]	; (800b340 <std+0x44>)
 800b32c:	6224      	str	r4, [r4, #32]
 800b32e:	6323      	str	r3, [r4, #48]	; 0x30
 800b330:	bd10      	pop	{r4, pc}
 800b332:	bf00      	nop
 800b334:	0800b649 	.word	0x0800b649
 800b338:	0800b66b 	.word	0x0800b66b
 800b33c:	0800b6a3 	.word	0x0800b6a3
 800b340:	0800b6c7 	.word	0x0800b6c7

0800b344 <_cleanup_r>:
 800b344:	4901      	ldr	r1, [pc, #4]	; (800b34c <_cleanup_r+0x8>)
 800b346:	f000 b8af 	b.w	800b4a8 <_fwalk_reent>
 800b34a:	bf00      	nop
 800b34c:	0800b285 	.word	0x0800b285

0800b350 <__sfmoreglue>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	2268      	movs	r2, #104	; 0x68
 800b354:	1e4d      	subs	r5, r1, #1
 800b356:	4355      	muls	r5, r2
 800b358:	460e      	mov	r6, r1
 800b35a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b35e:	f7fb ff3d 	bl	80071dc <_malloc_r>
 800b362:	4604      	mov	r4, r0
 800b364:	b140      	cbz	r0, 800b378 <__sfmoreglue+0x28>
 800b366:	2100      	movs	r1, #0
 800b368:	e9c0 1600 	strd	r1, r6, [r0]
 800b36c:	300c      	adds	r0, #12
 800b36e:	60a0      	str	r0, [r4, #8]
 800b370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b374:	f7fb febe 	bl	80070f4 <memset>
 800b378:	4620      	mov	r0, r4
 800b37a:	bd70      	pop	{r4, r5, r6, pc}

0800b37c <__sfp_lock_acquire>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__sfp_lock_acquire+0x8>)
 800b37e:	f7f6 ba62 	b.w	8001846 <__retarget_lock_acquire_recursive>
 800b382:	bf00      	nop
 800b384:	20000460 	.word	0x20000460

0800b388 <__sfp_lock_release>:
 800b388:	4801      	ldr	r0, [pc, #4]	; (800b390 <__sfp_lock_release+0x8>)
 800b38a:	f7f6 ba70 	b.w	800186e <__retarget_lock_release_recursive>
 800b38e:	bf00      	nop
 800b390:	20000460 	.word	0x20000460

0800b394 <__sinit_lock_acquire>:
 800b394:	4801      	ldr	r0, [pc, #4]	; (800b39c <__sinit_lock_acquire+0x8>)
 800b396:	f7f6 ba56 	b.w	8001846 <__retarget_lock_acquire_recursive>
 800b39a:	bf00      	nop
 800b39c:	2000045c 	.word	0x2000045c

0800b3a0 <__sinit_lock_release>:
 800b3a0:	4801      	ldr	r0, [pc, #4]	; (800b3a8 <__sinit_lock_release+0x8>)
 800b3a2:	f7f6 ba64 	b.w	800186e <__retarget_lock_release_recursive>
 800b3a6:	bf00      	nop
 800b3a8:	2000045c 	.word	0x2000045c

0800b3ac <__sinit>:
 800b3ac:	b510      	push	{r4, lr}
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	f7ff fff0 	bl	800b394 <__sinit_lock_acquire>
 800b3b4:	69a3      	ldr	r3, [r4, #24]
 800b3b6:	b11b      	cbz	r3, 800b3c0 <__sinit+0x14>
 800b3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3bc:	f7ff bff0 	b.w	800b3a0 <__sinit_lock_release>
 800b3c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b3c4:	6523      	str	r3, [r4, #80]	; 0x50
 800b3c6:	4b13      	ldr	r3, [pc, #76]	; (800b414 <__sinit+0x68>)
 800b3c8:	4a13      	ldr	r2, [pc, #76]	; (800b418 <__sinit+0x6c>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b3ce:	42a3      	cmp	r3, r4
 800b3d0:	bf04      	itt	eq
 800b3d2:	2301      	moveq	r3, #1
 800b3d4:	61a3      	streq	r3, [r4, #24]
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f000 f820 	bl	800b41c <__sfp>
 800b3dc:	6060      	str	r0, [r4, #4]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	f000 f81c 	bl	800b41c <__sfp>
 800b3e4:	60a0      	str	r0, [r4, #8]
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 f818 	bl	800b41c <__sfp>
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	60e0      	str	r0, [r4, #12]
 800b3f0:	2104      	movs	r1, #4
 800b3f2:	6860      	ldr	r0, [r4, #4]
 800b3f4:	f7ff ff82 	bl	800b2fc <std>
 800b3f8:	68a0      	ldr	r0, [r4, #8]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	2109      	movs	r1, #9
 800b3fe:	f7ff ff7d 	bl	800b2fc <std>
 800b402:	68e0      	ldr	r0, [r4, #12]
 800b404:	2202      	movs	r2, #2
 800b406:	2112      	movs	r1, #18
 800b408:	f7ff ff78 	bl	800b2fc <std>
 800b40c:	2301      	movs	r3, #1
 800b40e:	61a3      	str	r3, [r4, #24]
 800b410:	e7d2      	b.n	800b3b8 <__sinit+0xc>
 800b412:	bf00      	nop
 800b414:	0800ba44 	.word	0x0800ba44
 800b418:	0800b345 	.word	0x0800b345

0800b41c <__sfp>:
 800b41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41e:	4607      	mov	r7, r0
 800b420:	f7ff ffac 	bl	800b37c <__sfp_lock_acquire>
 800b424:	4b1e      	ldr	r3, [pc, #120]	; (800b4a0 <__sfp+0x84>)
 800b426:	681e      	ldr	r6, [r3, #0]
 800b428:	69b3      	ldr	r3, [r6, #24]
 800b42a:	b913      	cbnz	r3, 800b432 <__sfp+0x16>
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7ff ffbd 	bl	800b3ac <__sinit>
 800b432:	3648      	adds	r6, #72	; 0x48
 800b434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b438:	3b01      	subs	r3, #1
 800b43a:	d503      	bpl.n	800b444 <__sfp+0x28>
 800b43c:	6833      	ldr	r3, [r6, #0]
 800b43e:	b30b      	cbz	r3, 800b484 <__sfp+0x68>
 800b440:	6836      	ldr	r6, [r6, #0]
 800b442:	e7f7      	b.n	800b434 <__sfp+0x18>
 800b444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b448:	b9d5      	cbnz	r5, 800b480 <__sfp+0x64>
 800b44a:	4b16      	ldr	r3, [pc, #88]	; (800b4a4 <__sfp+0x88>)
 800b44c:	60e3      	str	r3, [r4, #12]
 800b44e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b452:	6665      	str	r5, [r4, #100]	; 0x64
 800b454:	f7f6 f9d1 	bl	80017fa <__retarget_lock_init_recursive>
 800b458:	f7ff ff96 	bl	800b388 <__sfp_lock_release>
 800b45c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b464:	6025      	str	r5, [r4, #0]
 800b466:	61a5      	str	r5, [r4, #24]
 800b468:	2208      	movs	r2, #8
 800b46a:	4629      	mov	r1, r5
 800b46c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b470:	f7fb fe40 	bl	80070f4 <memset>
 800b474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b47c:	4620      	mov	r0, r4
 800b47e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b480:	3468      	adds	r4, #104	; 0x68
 800b482:	e7d9      	b.n	800b438 <__sfp+0x1c>
 800b484:	2104      	movs	r1, #4
 800b486:	4638      	mov	r0, r7
 800b488:	f7ff ff62 	bl	800b350 <__sfmoreglue>
 800b48c:	4604      	mov	r4, r0
 800b48e:	6030      	str	r0, [r6, #0]
 800b490:	2800      	cmp	r0, #0
 800b492:	d1d5      	bne.n	800b440 <__sfp+0x24>
 800b494:	f7ff ff78 	bl	800b388 <__sfp_lock_release>
 800b498:	230c      	movs	r3, #12
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	e7ee      	b.n	800b47c <__sfp+0x60>
 800b49e:	bf00      	nop
 800b4a0:	0800ba44 	.word	0x0800ba44
 800b4a4:	ffff0001 	.word	0xffff0001

0800b4a8 <_fwalk_reent>:
 800b4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	4688      	mov	r8, r1
 800b4b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b4b4:	2700      	movs	r7, #0
 800b4b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4ba:	f1b9 0901 	subs.w	r9, r9, #1
 800b4be:	d505      	bpl.n	800b4cc <_fwalk_reent+0x24>
 800b4c0:	6824      	ldr	r4, [r4, #0]
 800b4c2:	2c00      	cmp	r4, #0
 800b4c4:	d1f7      	bne.n	800b4b6 <_fwalk_reent+0xe>
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4cc:	89ab      	ldrh	r3, [r5, #12]
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d907      	bls.n	800b4e2 <_fwalk_reent+0x3a>
 800b4d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	d003      	beq.n	800b4e2 <_fwalk_reent+0x3a>
 800b4da:	4629      	mov	r1, r5
 800b4dc:	4630      	mov	r0, r6
 800b4de:	47c0      	blx	r8
 800b4e0:	4307      	orrs	r7, r0
 800b4e2:	3568      	adds	r5, #104	; 0x68
 800b4e4:	e7e9      	b.n	800b4ba <_fwalk_reent+0x12>

0800b4e6 <__swhatbuf_r>:
 800b4e6:	b570      	push	{r4, r5, r6, lr}
 800b4e8:	460e      	mov	r6, r1
 800b4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ee:	2900      	cmp	r1, #0
 800b4f0:	b096      	sub	sp, #88	; 0x58
 800b4f2:	4614      	mov	r4, r2
 800b4f4:	461d      	mov	r5, r3
 800b4f6:	da08      	bge.n	800b50a <__swhatbuf_r+0x24>
 800b4f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	602a      	str	r2, [r5, #0]
 800b500:	061a      	lsls	r2, r3, #24
 800b502:	d410      	bmi.n	800b526 <__swhatbuf_r+0x40>
 800b504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b508:	e00e      	b.n	800b528 <__swhatbuf_r+0x42>
 800b50a:	466a      	mov	r2, sp
 800b50c:	f000 f902 	bl	800b714 <_fstat_r>
 800b510:	2800      	cmp	r0, #0
 800b512:	dbf1      	blt.n	800b4f8 <__swhatbuf_r+0x12>
 800b514:	9a01      	ldr	r2, [sp, #4]
 800b516:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b51a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b51e:	425a      	negs	r2, r3
 800b520:	415a      	adcs	r2, r3
 800b522:	602a      	str	r2, [r5, #0]
 800b524:	e7ee      	b.n	800b504 <__swhatbuf_r+0x1e>
 800b526:	2340      	movs	r3, #64	; 0x40
 800b528:	2000      	movs	r0, #0
 800b52a:	6023      	str	r3, [r4, #0]
 800b52c:	b016      	add	sp, #88	; 0x58
 800b52e:	bd70      	pop	{r4, r5, r6, pc}

0800b530 <__smakebuf_r>:
 800b530:	898b      	ldrh	r3, [r1, #12]
 800b532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b534:	079d      	lsls	r5, r3, #30
 800b536:	4606      	mov	r6, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d507      	bpl.n	800b54c <__smakebuf_r+0x1c>
 800b53c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2301      	movs	r3, #1
 800b546:	6163      	str	r3, [r4, #20]
 800b548:	b002      	add	sp, #8
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	ab01      	add	r3, sp, #4
 800b54e:	466a      	mov	r2, sp
 800b550:	f7ff ffc9 	bl	800b4e6 <__swhatbuf_r>
 800b554:	9900      	ldr	r1, [sp, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	4630      	mov	r0, r6
 800b55a:	f7fb fe3f 	bl	80071dc <_malloc_r>
 800b55e:	b948      	cbnz	r0, 800b574 <__smakebuf_r+0x44>
 800b560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b564:	059a      	lsls	r2, r3, #22
 800b566:	d4ef      	bmi.n	800b548 <__smakebuf_r+0x18>
 800b568:	f023 0303 	bic.w	r3, r3, #3
 800b56c:	f043 0302 	orr.w	r3, r3, #2
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	e7e3      	b.n	800b53c <__smakebuf_r+0xc>
 800b574:	4b0d      	ldr	r3, [pc, #52]	; (800b5ac <__smakebuf_r+0x7c>)
 800b576:	62b3      	str	r3, [r6, #40]	; 0x28
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	6020      	str	r0, [r4, #0]
 800b57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b580:	81a3      	strh	r3, [r4, #12]
 800b582:	9b00      	ldr	r3, [sp, #0]
 800b584:	6163      	str	r3, [r4, #20]
 800b586:	9b01      	ldr	r3, [sp, #4]
 800b588:	6120      	str	r0, [r4, #16]
 800b58a:	b15b      	cbz	r3, 800b5a4 <__smakebuf_r+0x74>
 800b58c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b590:	4630      	mov	r0, r6
 800b592:	f000 f8d1 	bl	800b738 <_isatty_r>
 800b596:	b128      	cbz	r0, 800b5a4 <__smakebuf_r+0x74>
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	f023 0303 	bic.w	r3, r3, #3
 800b59e:	f043 0301 	orr.w	r3, r3, #1
 800b5a2:	81a3      	strh	r3, [r4, #12]
 800b5a4:	89a0      	ldrh	r0, [r4, #12]
 800b5a6:	4305      	orrs	r5, r0
 800b5a8:	81a5      	strh	r5, [r4, #12]
 800b5aa:	e7cd      	b.n	800b548 <__smakebuf_r+0x18>
 800b5ac:	0800b345 	.word	0x0800b345

0800b5b0 <_malloc_usable_size_r>:
 800b5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5b4:	1f18      	subs	r0, r3, #4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bfbc      	itt	lt
 800b5ba:	580b      	ldrlt	r3, [r1, r0]
 800b5bc:	18c0      	addlt	r0, r0, r3
 800b5be:	4770      	bx	lr

0800b5c0 <_raise_r>:
 800b5c0:	291f      	cmp	r1, #31
 800b5c2:	b538      	push	{r3, r4, r5, lr}
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	460d      	mov	r5, r1
 800b5c8:	d904      	bls.n	800b5d4 <_raise_r+0x14>
 800b5ca:	2316      	movs	r3, #22
 800b5cc:	6003      	str	r3, [r0, #0]
 800b5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5d6:	b112      	cbz	r2, 800b5de <_raise_r+0x1e>
 800b5d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5dc:	b94b      	cbnz	r3, 800b5f2 <_raise_r+0x32>
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f000 f830 	bl	800b644 <_getpid_r>
 800b5e4:	462a      	mov	r2, r5
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5ee:	f000 b817 	b.w	800b620 <_kill_r>
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d00a      	beq.n	800b60c <_raise_r+0x4c>
 800b5f6:	1c59      	adds	r1, r3, #1
 800b5f8:	d103      	bne.n	800b602 <_raise_r+0x42>
 800b5fa:	2316      	movs	r3, #22
 800b5fc:	6003      	str	r3, [r0, #0]
 800b5fe:	2001      	movs	r0, #1
 800b600:	e7e7      	b.n	800b5d2 <_raise_r+0x12>
 800b602:	2400      	movs	r4, #0
 800b604:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b608:	4628      	mov	r0, r5
 800b60a:	4798      	blx	r3
 800b60c:	2000      	movs	r0, #0
 800b60e:	e7e0      	b.n	800b5d2 <_raise_r+0x12>

0800b610 <raise>:
 800b610:	4b02      	ldr	r3, [pc, #8]	; (800b61c <raise+0xc>)
 800b612:	4601      	mov	r1, r0
 800b614:	6818      	ldr	r0, [r3, #0]
 800b616:	f7ff bfd3 	b.w	800b5c0 <_raise_r>
 800b61a:	bf00      	nop
 800b61c:	2000001c 	.word	0x2000001c

0800b620 <_kill_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	4d07      	ldr	r5, [pc, #28]	; (800b640 <_kill_r+0x20>)
 800b624:	2300      	movs	r3, #0
 800b626:	4604      	mov	r4, r0
 800b628:	4608      	mov	r0, r1
 800b62a:	4611      	mov	r1, r2
 800b62c:	602b      	str	r3, [r5, #0]
 800b62e:	f7f5 fde1 	bl	80011f4 <_kill>
 800b632:	1c43      	adds	r3, r0, #1
 800b634:	d102      	bne.n	800b63c <_kill_r+0x1c>
 800b636:	682b      	ldr	r3, [r5, #0]
 800b638:	b103      	cbz	r3, 800b63c <_kill_r+0x1c>
 800b63a:	6023      	str	r3, [r4, #0]
 800b63c:	bd38      	pop	{r3, r4, r5, pc}
 800b63e:	bf00      	nop
 800b640:	20000474 	.word	0x20000474

0800b644 <_getpid_r>:
 800b644:	f7f5 bdce 	b.w	80011e4 <_getpid>

0800b648 <__sread>:
 800b648:	b510      	push	{r4, lr}
 800b64a:	460c      	mov	r4, r1
 800b64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b650:	f000 f894 	bl	800b77c <_read_r>
 800b654:	2800      	cmp	r0, #0
 800b656:	bfab      	itete	ge
 800b658:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b65a:	89a3      	ldrhlt	r3, [r4, #12]
 800b65c:	181b      	addge	r3, r3, r0
 800b65e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b662:	bfac      	ite	ge
 800b664:	6563      	strge	r3, [r4, #84]	; 0x54
 800b666:	81a3      	strhlt	r3, [r4, #12]
 800b668:	bd10      	pop	{r4, pc}

0800b66a <__swrite>:
 800b66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66e:	461f      	mov	r7, r3
 800b670:	898b      	ldrh	r3, [r1, #12]
 800b672:	05db      	lsls	r3, r3, #23
 800b674:	4605      	mov	r5, r0
 800b676:	460c      	mov	r4, r1
 800b678:	4616      	mov	r6, r2
 800b67a:	d505      	bpl.n	800b688 <__swrite+0x1e>
 800b67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b680:	2302      	movs	r3, #2
 800b682:	2200      	movs	r2, #0
 800b684:	f000 f868 	bl	800b758 <_lseek_r>
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b68e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b692:	81a3      	strh	r3, [r4, #12]
 800b694:	4632      	mov	r2, r6
 800b696:	463b      	mov	r3, r7
 800b698:	4628      	mov	r0, r5
 800b69a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69e:	f000 b817 	b.w	800b6d0 <_write_r>

0800b6a2 <__sseek>:
 800b6a2:	b510      	push	{r4, lr}
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6aa:	f000 f855 	bl	800b758 <_lseek_r>
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	bf15      	itete	ne
 800b6b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6be:	81a3      	strheq	r3, [r4, #12]
 800b6c0:	bf18      	it	ne
 800b6c2:	81a3      	strhne	r3, [r4, #12]
 800b6c4:	bd10      	pop	{r4, pc}

0800b6c6 <__sclose>:
 800b6c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ca:	f000 b813 	b.w	800b6f4 <_close_r>
	...

0800b6d0 <_write_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4d07      	ldr	r5, [pc, #28]	; (800b6f0 <_write_r+0x20>)
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	4608      	mov	r0, r1
 800b6d8:	4611      	mov	r1, r2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	602a      	str	r2, [r5, #0]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	f7f5 fdbf 	bl	8001262 <_write>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d102      	bne.n	800b6ee <_write_r+0x1e>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	b103      	cbz	r3, 800b6ee <_write_r+0x1e>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	20000474 	.word	0x20000474

0800b6f4 <_close_r>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4d06      	ldr	r5, [pc, #24]	; (800b710 <_close_r+0x1c>)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	4608      	mov	r0, r1
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	f7f5 fdcb 	bl	800129a <_close>
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	d102      	bne.n	800b70e <_close_r+0x1a>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	b103      	cbz	r3, 800b70e <_close_r+0x1a>
 800b70c:	6023      	str	r3, [r4, #0]
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	20000474 	.word	0x20000474

0800b714 <_fstat_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4d07      	ldr	r5, [pc, #28]	; (800b734 <_fstat_r+0x20>)
 800b718:	2300      	movs	r3, #0
 800b71a:	4604      	mov	r4, r0
 800b71c:	4608      	mov	r0, r1
 800b71e:	4611      	mov	r1, r2
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	f7f5 fdc6 	bl	80012b2 <_fstat>
 800b726:	1c43      	adds	r3, r0, #1
 800b728:	d102      	bne.n	800b730 <_fstat_r+0x1c>
 800b72a:	682b      	ldr	r3, [r5, #0]
 800b72c:	b103      	cbz	r3, 800b730 <_fstat_r+0x1c>
 800b72e:	6023      	str	r3, [r4, #0]
 800b730:	bd38      	pop	{r3, r4, r5, pc}
 800b732:	bf00      	nop
 800b734:	20000474 	.word	0x20000474

0800b738 <_isatty_r>:
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4d06      	ldr	r5, [pc, #24]	; (800b754 <_isatty_r+0x1c>)
 800b73c:	2300      	movs	r3, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	4608      	mov	r0, r1
 800b742:	602b      	str	r3, [r5, #0]
 800b744:	f7f5 fdc5 	bl	80012d2 <_isatty>
 800b748:	1c43      	adds	r3, r0, #1
 800b74a:	d102      	bne.n	800b752 <_isatty_r+0x1a>
 800b74c:	682b      	ldr	r3, [r5, #0]
 800b74e:	b103      	cbz	r3, 800b752 <_isatty_r+0x1a>
 800b750:	6023      	str	r3, [r4, #0]
 800b752:	bd38      	pop	{r3, r4, r5, pc}
 800b754:	20000474 	.word	0x20000474

0800b758 <_lseek_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d07      	ldr	r5, [pc, #28]	; (800b778 <_lseek_r+0x20>)
 800b75c:	4604      	mov	r4, r0
 800b75e:	4608      	mov	r0, r1
 800b760:	4611      	mov	r1, r2
 800b762:	2200      	movs	r2, #0
 800b764:	602a      	str	r2, [r5, #0]
 800b766:	461a      	mov	r2, r3
 800b768:	f7f5 fdbe 	bl	80012e8 <_lseek>
 800b76c:	1c43      	adds	r3, r0, #1
 800b76e:	d102      	bne.n	800b776 <_lseek_r+0x1e>
 800b770:	682b      	ldr	r3, [r5, #0]
 800b772:	b103      	cbz	r3, 800b776 <_lseek_r+0x1e>
 800b774:	6023      	str	r3, [r4, #0]
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	20000474 	.word	0x20000474

0800b77c <_read_r>:
 800b77c:	b538      	push	{r3, r4, r5, lr}
 800b77e:	4d07      	ldr	r5, [pc, #28]	; (800b79c <_read_r+0x20>)
 800b780:	4604      	mov	r4, r0
 800b782:	4608      	mov	r0, r1
 800b784:	4611      	mov	r1, r2
 800b786:	2200      	movs	r2, #0
 800b788:	602a      	str	r2, [r5, #0]
 800b78a:	461a      	mov	r2, r3
 800b78c:	f7f5 fd4c 	bl	8001228 <_read>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d102      	bne.n	800b79a <_read_r+0x1e>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	b103      	cbz	r3, 800b79a <_read_r+0x1e>
 800b798:	6023      	str	r3, [r4, #0]
 800b79a:	bd38      	pop	{r3, r4, r5, pc}
 800b79c:	20000474 	.word	0x20000474

0800b7a0 <_init>:
 800b7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a2:	bf00      	nop
 800b7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7a6:	bc08      	pop	{r3}
 800b7a8:	469e      	mov	lr, r3
 800b7aa:	4770      	bx	lr

0800b7ac <_fini>:
 800b7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ae:	bf00      	nop
 800b7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7b2:	bc08      	pop	{r3}
 800b7b4:	469e      	mov	lr, r3
 800b7b6:	4770      	bx	lr
