
SBGC32_MimicControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b408  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  0800b608  0800b608  0001b608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd64  0800bd64  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd6c  0800bd6c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001f0  0800bf64  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800bf64  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198d5  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345a  00000000  00000000  00039af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0003cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  0003e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b723  00000000  00000000  0003f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162aa  00000000  00000000  0006ab5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106df6  00000000  00000000  00080e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  00187bfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006200  00000000  00000000  00187c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b5f0 	.word	0x0800b5f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0800b5f0 	.word	0x0800b5f0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <MX_ADC1_Init+0xb8>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <MX_ADC1_Init+0xbc>)
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a3e:	f000 ffb3 	bl	80019a8 <HAL_ADC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a48:	f000 fb38 	bl	80010bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a54:	2307      	movs	r3, #7
 8000a56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a5e:	f001 f9ed 	bl	8001e3c <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a68:	f000 fb28 	bl	80010bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a7a:	f001 f9df 	bl	8001e3c <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a84:	f000 fb1a 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000020c 	.word	0x2000020c
 8000a94:	40012000 	.word	0x40012000
 8000a98:	0f000001 	.word	0x0f000001

08000a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_ADC_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12b      	bne.n	8000b16 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_ADC_MspInit+0x8c>)
 8000b02:	f001 fd99 	bl	8002638 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2103      	movs	r1, #3
 8000b0a:	2012      	movs	r0, #18
 8000b0c:	f001 fccb 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b10:	2012      	movs	r0, #18
 8000b12:	f001 fce4 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40012000 	.word	0x40012000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <InitADC>:

/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 *													 Low-Layer Functions
 */
void InitADC (InputsInfo_t *inputsInfo, __ADC_STRUCT)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	inputsInfo->adc = adc;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	609a      	str	r2, [r3, #8]
	DISABLE_ADC_CR1_EOCIE(inputsInfo->adc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0220 	bic.w	r2, r2, #32
 8000b4e:	605a      	str	r2, [r3, #4]

	inputsInfo->_curChannel = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	711a      	strb	r2, [r3, #4]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <ReadADC_Inputs>:


void ReadADC_Inputs (InputsInfo_t *inputsInfo)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	START_ADC(inputsInfo->adc);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ff5e 	bl	8001a30 <HAL_ADC_Start_IT>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <ADC_DRV_EndConvCallBack>:


void ADC_DRV_EndConvCallBack (InputsInfo_t *inputsInfo)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	inputsInfo->ADC_INx[inputsInfo->_curChannel++] = GET_ADC_CONV_DATA(inputsInfo->adc);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	b2d0      	uxtb	r0, r2
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	7110      	strb	r0, [r2, #4]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	b289      	uxth	r1, r1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if (inputsInfo->_curChannel >= ADC_CHANNELS_QUAN)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d902      	bls.n	8000bb0 <ADC_DRV_EndConvCallBack+0x34>
		inputsInfo->_curChannel = 0;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	711a      	strb	r2, [r3, #4]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <ReadButtonState>:


ui8 ReadButtonState (__GPIO_STRUCT, ui16 pin)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
	return READ_PIN(gpio, pin);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f001 fedf 	bl	8002990 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_GPIO_Init+0xac>)
 8000c40:	f001 febe 	bl	80029c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin|REC_BTN_Pin;
 8000c44:	f242 0302 	movw	r3, #8194	; 0x2002
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <MX_GPIO_Init+0xb0>)
 8000c5a:	f001 fced 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_GPIO_Init+0xac>)
 8000c76:	f001 fcdf 	bl	8002638 <HAL_GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800

08000c90 <AverageInit>:

}			InputsInfo_t;


static inline void AverageInit (AverageValue_t *averageValue, ui8 factor)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	70fb      	strb	r3, [r7, #3]
	averageValue->_factor = factor;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	719a      	strb	r2, [r3, #6]
	averageValue->avgBuff = 0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = 0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	809a      	strh	r2, [r3, #4]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <AverageValue>:


static inline void AverageValue (AverageValue_t *averageValue, i16 value)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	460b      	mov	r3, r1
 8000cc4:	807b      	strh	r3, [r7, #2]
	averageValue->avgBuff += (i32)value - (i32)averageValue->avgRes;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000cd4:	1a5b      	subs	r3, r3, r1
 8000cd6:	441a      	add	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = (i16)(averageValue->avgBuff >> averageValue->_factor);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	7992      	ldrb	r2, [r2, #6]
 8000ce4:	4113      	asrs	r3, r2
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	809a      	strh	r2, [r3, #4]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f000 fdf6 	bl	80018ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f96d 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f7ff ff69 	bl	8000bdc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d0a:	f000 fb6f 	bl	80013ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000d0e:	f000 fbdf 	bl	80014d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d12:	f000 fc0d 	bl	8001530 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d16:	f7ff fe61 	bl	80009dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	InitADC(&InputsInfo, JOYSTICK_ADC);
 8000d1a:	499c      	ldr	r1, [pc, #624]	; (8000f8c <main+0x294>)
 8000d1c:	489c      	ldr	r0, [pc, #624]	; (8000f90 <main+0x298>)
 8000d1e:	f7ff ff05 	bl	8000b2c <InitADC>


	/*  - - - - - - - - SBGC Hardware-Software Init - - - - - - - - - */

	/* Driver Init */
	SBGC_1.Drv = malloc(sizeof(Driver_t));
 8000d22:	f44f 7006 	mov.w	r0, #536	; 0x218
 8000d26:	f006 f8f7 	bl	8006f18 <malloc>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b99      	ldr	r3, [pc, #612]	; (8000f94 <main+0x29c>)
 8000d30:	601a      	str	r2, [r3, #0]
	DriverInit(SBGC_1.Drv, SBGC_SERIAL_PORT, INTERNAL_MAIN_TIMER);
 8000d32:	4b98      	ldr	r3, [pc, #608]	; (8000f94 <main+0x29c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a98      	ldr	r2, [pc, #608]	; (8000f98 <main+0x2a0>)
 8000d38:	4998      	ldr	r1, [pc, #608]	; (8000f9c <main+0x2a4>)
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 fcda 	bl	80056f4 <DriverInit>

	/* High Layer Init */
	SBGC32_DefaultInit(&SBGC_1, UartTransmitData, UartReceiveByte, GetAvailableBytes,
 8000d40:	2324      	movs	r3, #36	; 0x24
 8000d42:	9302      	str	r3, [sp, #8]
 8000d44:	4b96      	ldr	r3, [pc, #600]	; (8000fa0 <main+0x2a8>)
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	4b96      	ldr	r3, [pc, #600]	; (8000fa4 <main+0x2ac>)
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	4b96      	ldr	r3, [pc, #600]	; (8000fa8 <main+0x2b0>)
 8000d4e:	4a97      	ldr	r2, [pc, #604]	; (8000fac <main+0x2b4>)
 8000d50:	4997      	ldr	r1, [pc, #604]	; (8000fb0 <main+0x2b8>)
 8000d52:	4890      	ldr	r0, [pc, #576]	; (8000f94 <main+0x29c>)
 8000d54:	f005 fabe 	bl	80062d4 <SBGC32_DefaultInit>
						UartTransmitDebugData, GetTimeMs, SBGC_PROTOCOL_V2);


	/* - - - - - - - - - High Layer Software Init - - - - - - - - - - */

	Control.controlMode[PITCH] = CtrlM_MODE_ANGLE;
 8000d58:	4b96      	ldr	r3, [pc, #600]	; (8000fb4 <main+0x2bc>)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	705a      	strb	r2, [r3, #1]
	Control.controlMode[YAW] = CtrlM_MODE_ANGLE;
 8000d5e:	4b95      	ldr	r3, [pc, #596]	; (8000fb4 <main+0x2bc>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	709a      	strb	r2, [r3, #2]

	Control.AxisC[PITCH].angle = 0;
 8000d64:	4b93      	ldr	r3, [pc, #588]	; (8000fb4 <main+0x2bc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	725a      	strb	r2, [r3, #9]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	729a      	strb	r2, [r3, #10]
	Control.AxisC[YAW].angle = 0;
 8000d6e:	4b91      	ldr	r3, [pc, #580]	; (8000fb4 <main+0x2bc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	735a      	strb	r2, [r3, #13]
 8000d74:	2200      	movs	r2, #0
 8000d76:	739a      	strb	r2, [r3, #14]

	#ifdef SET_SPEED

		Control.AxisC[PITCH].speed = SET_SPEED;
 8000d78:	4b8e      	ldr	r3, [pc, #568]	; (8000fb4 <main+0x2bc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f062 020b 	orn	r2, r2, #11
 8000d80:	71da      	strb	r2, [r3, #7]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f042 0201 	orr.w	r2, r2, #1
 8000d88:	721a      	strb	r2, [r3, #8]
		Control.AxisC[YAW].speed = SET_SPEED;
 8000d8a:	4b8a      	ldr	r3, [pc, #552]	; (8000fb4 <main+0x2bc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f062 020b 	orn	r2, r2, #11
 8000d92:	72da      	strb	r2, [r3, #11]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	731a      	strb	r2, [r3, #12]

	#endif

	ControlConfig.flags = RTCCF_CONTROL_CONFIG_FLAG_NO_CONFIRM;
 8000d9c:	4b86      	ldr	r3, [pc, #536]	; (8000fb8 <main+0x2c0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f042 0201 	orr.w	r2, r2, #1
 8000da4:	775a      	strb	r2, [r3, #29]
 8000da6:	2200      	movs	r2, #0
 8000da8:	779a      	strb	r2, [r3, #30]

	InputsInfo.recBtn = BTN_RELEASED;
 8000daa:	4b79      	ldr	r3, [pc, #484]	; (8000f90 <main+0x298>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	731a      	strb	r2, [r3, #12]
	InputsInfo.menuBtn = BTN_RELEASED;
 8000db0:	4b77      	ldr	r3, [pc, #476]	; (8000f90 <main+0x298>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	735a      	strb	r2, [r3, #13]

	AverageInit(&JoystickAverage[0], LOW_PASS_FACTOR);
 8000db6:	2108      	movs	r1, #8
 8000db8:	4880      	ldr	r0, [pc, #512]	; (8000fbc <main+0x2c4>)
 8000dba:	f7ff ff69 	bl	8000c90 <AverageInit>
	AverageInit(&JoystickAverage[1], LOW_PASS_FACTOR);
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	487f      	ldr	r0, [pc, #508]	; (8000fc0 <main+0x2c8>)
 8000dc2:	f7ff ff65 	bl	8000c90 <AverageInit>

	servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_OFF;
 8000dc6:	4b7f      	ldr	r3, [pc, #508]	; (8000fc4 <main+0x2cc>)
 8000dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dcc:	805a      	strh	r2, [r3, #2]


	/*  - - - - - - - - - Initializing commands - - - - - - - - - - - */

	SBGC32_ControlConfig(&SBGC_1, &ControlConfig, &Confirm);
 8000dce:	4a7e      	ldr	r2, [pc, #504]	; (8000fc8 <main+0x2d0>)
 8000dd0:	4979      	ldr	r1, [pc, #484]	; (8000fb8 <main+0x2c0>)
 8000dd2:	4870      	ldr	r0, [pc, #448]	; (8000f94 <main+0x29c>)
 8000dd4:	f005 ff8c 	bl	8006cf0 <SBGC32_ControlConfig>

	SBGC32_SetServoOut(&SBGC_1, servoOut);
 8000dd8:	497a      	ldr	r1, [pc, #488]	; (8000fc4 <main+0x2cc>)
 8000dda:	486e      	ldr	r0, [pc, #440]	; (8000f94 <main+0x29c>)
 8000ddc:	f006 f829 	bl	8006e32 <SBGC32_SetServoOut>
		/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ */
		/*                     Start Worker Cycle                     */
		/* __________________________________________________________ */

	  	/* Getting current time */
		currentTime = SBGC_1.GetTimeFunc(SBGC_1.Drv);
 8000de0:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <main+0x29c>)
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	4a6b      	ldr	r2, [pc, #428]	; (8000f94 <main+0x29c>)
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	4610      	mov	r0, r2
 8000dea:	4798      	blx	r3
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a77      	ldr	r2, [pc, #476]	; (8000fcc <main+0x2d4>)
 8000df0:	6013      	str	r3, [r2, #0]


		/* - - - - - - - - - - Joystick Handling - - - - - - - - - - */

		ReadADC_Inputs(&InputsInfo);
 8000df2:	4867      	ldr	r0, [pc, #412]	; (8000f90 <main+0x298>)
 8000df4:	f7ff feb5 	bl	8000b62 <ReadADC_Inputs>

		AverageValue(&JoystickAverage[0], (i16)DEGREE_TO_ANGLE_INT(YAW_ANGLE_MIN) +
			(i16)((i32)InputsInfo.ADC_INx[ADC_JOY_Y] * DEGREE_TO_ANGLE_INT(YAW_ANGLE_MAX - YAW_ANGLE_MIN) / (1 << ADC_RESOLUTION)));
 8000df8:	4b65      	ldr	r3, [pc, #404]	; (8000f90 <main+0x298>)
 8000dfa:	885b      	ldrh	r3, [r3, #2]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f241 5355 	movw	r3, #5461	; 0x1555
 8000e02:	fb02 f303 	mul.w	r3, r2, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	da01      	bge.n	8000e0e <main+0x116>
 8000e0a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000e0e:	131b      	asrs	r3, r3, #12
 8000e10:	b29b      	uxth	r3, r3
		AverageValue(&JoystickAverage[0], (i16)DEGREE_TO_ANGLE_INT(YAW_ANGLE_MIN) +
 8000e12:	f6a3 23aa 	subw	r3, r3, #2730	; 0xaaa
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4867      	ldr	r0, [pc, #412]	; (8000fbc <main+0x2c4>)
 8000e1e:	f7ff ff4c 	bl	8000cba <AverageValue>

		AverageValue(&JoystickAverage[1], (i16)DEGREE_TO_ANGLE_INT(PITCH_ANGLE_MIN) +
			(i16)((i32)InputsInfo.ADC_INx[ADC_JOY_X] * DEGREE_TO_ANGLE_INT(PITCH_ANGLE_MAX - PITCH_ANGLE_MIN) / (1 << ADC_RESOLUTION)));
 8000e22:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <main+0x298>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	f241 5355 	movw	r3, #5461	; 0x1555
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	da01      	bge.n	8000e38 <main+0x140>
 8000e34:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000e38:	131b      	asrs	r3, r3, #12
 8000e3a:	b29b      	uxth	r3, r3
		AverageValue(&JoystickAverage[1], (i16)DEGREE_TO_ANGLE_INT(PITCH_ANGLE_MIN) +
 8000e3c:	f6a3 23aa 	subw	r3, r3, #2730	; 0xaaa
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	4619      	mov	r1, r3
 8000e46:	485e      	ldr	r0, [pc, #376]	; (8000fc0 <main+0x2c8>)
 8000e48:	f7ff ff37 	bl	8000cba <AverageValue>


		if ((currentTime - lastControlTime ) > CMD_CONTROL_DELAY)
 8000e4c:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <main+0x2d4>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b5f      	ldr	r3, [pc, #380]	; (8000fd0 <main+0x2d8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b14      	cmp	r3, #20
 8000e58:	d913      	bls.n	8000e82 <main+0x18a>
		{
			lastControlTime = currentTime;
 8000e5a:	4b5c      	ldr	r3, [pc, #368]	; (8000fcc <main+0x2d4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a5c      	ldr	r2, [pc, #368]	; (8000fd0 <main+0x2d8>)
 8000e60:	6013      	str	r3, [r2, #0]

			Control.AxisC[PITCH].angle = JoystickAverage[1].avgRes;
 8000e62:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <main+0x2c4>)
 8000e64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000e68:	4b52      	ldr	r3, [pc, #328]	; (8000fb4 <main+0x2bc>)
 8000e6a:	f8a3 2009 	strh.w	r2, [r3, #9]
			Control.AxisC[YAW].angle = JoystickAverage[0].avgRes;
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <main+0x2c4>)
 8000e70:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000e74:	4b4f      	ldr	r3, [pc, #316]	; (8000fb4 <main+0x2bc>)
 8000e76:	f8a3 200d 	strh.w	r2, [r3, #13]

			SBGC32_Control(&SBGC_1, &Control);
 8000e7a:	494e      	ldr	r1, [pc, #312]	; (8000fb4 <main+0x2bc>)
 8000e7c:	4845      	ldr	r0, [pc, #276]	; (8000f94 <main+0x29c>)
 8000e7e:	f005 ff03 	bl	8006c88 <SBGC32_Control>
		}


		/*  - - - - - - - - - - Buttons Handling - - - - - - - - - - */
		/* Rec Button - for long press */
		if (ReadButtonState(REC_BTN_PORT, REC_BTN_PIN))
 8000e82:	2102      	movs	r1, #2
 8000e84:	4853      	ldr	r0, [pc, #332]	; (8000fd4 <main+0x2dc>)
 8000e86:	f7ff fe99 	bl	8000bbc <ReadButtonState>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d01f      	beq.n	8000ed0 <main+0x1d8>
		{
			if (InputsInfo.recBtn != BTN_PRESSED)
 8000e90:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <main+0x298>)
 8000e92:	7b1b      	ldrb	r3, [r3, #12]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d006      	beq.n	8000ea6 <main+0x1ae>
			{
				lastButtonTime = currentTime;
 8000e98:	4b4c      	ldr	r3, [pc, #304]	; (8000fcc <main+0x2d4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a4e      	ldr	r2, [pc, #312]	; (8000fd8 <main+0x2e0>)
 8000e9e:	6013      	str	r3, [r2, #0]
				InputsInfo.recBtn = BTN_PRESSED;
 8000ea0:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <main+0x298>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	731a      	strb	r2, [r3, #12]
			}

			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE))
 8000ea6:	4b49      	ldr	r3, [pc, #292]	; (8000fcc <main+0x2d4>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <main+0x2e0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b64      	cmp	r3, #100	; 0x64
 8000eb2:	d928      	bls.n	8000f06 <main+0x20e>
			{
				servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_ON;
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <main+0x2cc>)
 8000eb6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000eba:	805a      	strh	r2, [r3, #2]
				SBGC32_SetServoOut(&SBGC_1, servoOut);
 8000ebc:	4941      	ldr	r1, [pc, #260]	; (8000fc4 <main+0x2cc>)
 8000ebe:	4835      	ldr	r0, [pc, #212]	; (8000f94 <main+0x29c>)
 8000ec0:	f005 ffb7 	bl	8006e32 <SBGC32_SetServoOut>
				DEBUG_LED_ON;
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	4844      	ldr	r0, [pc, #272]	; (8000fdc <main+0x2e4>)
 8000eca:	f001 fd79 	bl	80029c0 <HAL_GPIO_WritePin>
 8000ece:	e01a      	b.n	8000f06 <main+0x20e>
			}
		}

		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <main+0x2d4>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <main+0x2e0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b64      	cmp	r3, #100	; 0x64
 8000edc:	d913      	bls.n	8000f06 <main+0x20e>
				 (InputsInfo.recBtn == BTN_PRESSED))
 8000ede:	4b2c      	ldr	r3, [pc, #176]	; (8000f90 <main+0x298>)
 8000ee0:	7b1b      	ldrb	r3, [r3, #12]
		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d10f      	bne.n	8000f06 <main+0x20e>
		{
			servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_OFF;
 8000ee6:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <main+0x2cc>)
 8000ee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000eec:	805a      	strh	r2, [r3, #2]
			SBGC32_SetServoOut(&SBGC_1, servoOut);
 8000eee:	4935      	ldr	r1, [pc, #212]	; (8000fc4 <main+0x2cc>)
 8000ef0:	4828      	ldr	r0, [pc, #160]	; (8000f94 <main+0x29c>)
 8000ef2:	f005 ff9e 	bl	8006e32 <SBGC32_SetServoOut>
			DEBUG_LED_OFF;
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	4838      	ldr	r0, [pc, #224]	; (8000fdc <main+0x2e4>)
 8000efc:	f001 fd60 	bl	80029c0 <HAL_GPIO_WritePin>
			InputsInfo.recBtn = BTN_RELEASED;
 8000f00:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <main+0x298>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	731a      	strb	r2, [r3, #12]
		}

		/* Menu Button */
		if (ReadButtonState(MENU_BTN_PORT, MENU_BTN_PIN))
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	4832      	ldr	r0, [pc, #200]	; (8000fd4 <main+0x2dc>)
 8000f0c:	f7ff fe56 	bl	8000bbc <ReadButtonState>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d01e      	beq.n	8000f54 <main+0x25c>
		{
			if (InputsInfo.menuBtn == BTN_RELEASED)
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <main+0x298>)
 8000f18:	7b5b      	ldrb	r3, [r3, #13]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d106      	bne.n	8000f2c <main+0x234>
			{
				lastButtonTime = currentTime;
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <main+0x2d4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a2d      	ldr	r2, [pc, #180]	; (8000fd8 <main+0x2e0>)
 8000f24:	6013      	str	r3, [r2, #0]
				InputsInfo.menuBtn = BTN_PRESSED;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <main+0x298>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	735a      	strb	r2, [r3, #13]
			}

			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <main+0x2d4>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <main+0x2e0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d91a      	bls.n	8000f70 <main+0x278>
				(InputsInfo.menuBtn != BTN_POST_PRESSED))
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <main+0x298>)
 8000f3c:	7b5b      	ldrb	r3, [r3, #13]
			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d016      	beq.n	8000f70 <main+0x278>
			{
				SBGC32_ExecuteMenu(&SBGC_1, MENU_BUTTON_IS_PRESSED, &Confirm);
 8000f42:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <main+0x2d0>)
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	4813      	ldr	r0, [pc, #76]	; (8000f94 <main+0x29c>)
 8000f48:	f005 ff28 	bl	8006d9c <SBGC32_ExecuteMenu>
				InputsInfo.menuBtn = BTN_POST_PRESSED;
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <main+0x298>)
 8000f4e:	2202      	movs	r2, #2
 8000f50:	735a      	strb	r2, [r3, #13]
 8000f52:	e00d      	b.n	8000f70 <main+0x278>
			}
		}

		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <main+0x2d4>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <main+0x2e0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d906      	bls.n	8000f70 <main+0x278>
				 (InputsInfo.menuBtn != BTN_RELEASED))
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <main+0x298>)
 8000f64:	7b5b      	ldrb	r3, [r3, #13]
		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <main+0x278>
			InputsInfo.menuBtn = BTN_RELEASED;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <main+0x298>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	735a      	strb	r2, [r3, #13]


		/* Make a constant sampling time by inserting a delay of 1 ms */
		while ((SBGC_1.GetTimeFunc(SBGC_1.Drv) - currentTime) < 1);
 8000f70:	bf00      	nop
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <main+0x29c>)
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <main+0x29c>)
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4798      	blx	r3
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <main+0x2d4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d0f4      	beq.n	8000f72 <main+0x27a>
		currentTime = SBGC_1.GetTimeFunc(SBGC_1.Drv);
 8000f88:	e72a      	b.n	8000de0 <main+0xe8>
 8000f8a:	bf00      	nop
 8000f8c:	2000020c 	.word	0x2000020c
 8000f90:	200002cc 	.word	0x200002cc
 8000f94:	20000254 	.word	0x20000254
 8000f98:	200002fc 	.word	0x200002fc
 8000f9c:	20000348 	.word	0x20000348
 8000fa0:	0800577f 	.word	0x0800577f
 8000fa4:	08005ad5 	.word	0x08005ad5
 8000fa8:	0800592b 	.word	0x0800592b
 8000fac:	0800598b 	.word	0x0800598b
 8000fb0:	080057bd 	.word	0x080057bd
 8000fb4:	20000288 	.word	0x20000288
 8000fb8:	20000298 	.word	0x20000298
 8000fbc:	200002dc 	.word	0x200002dc
 8000fc0:	200002e4 	.word	0x200002e4
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	200002c4 	.word	0x200002c4
 8000fcc:	200002ec 	.word	0x200002ec
 8000fd0:	200002f0 	.word	0x200002f0
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	200002f4 	.word	0x200002f4
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2234      	movs	r2, #52	; 0x34
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f005 ffa8 	bl	8006f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <SystemClock_Config+0xd4>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a2a      	ldr	r2, [pc, #168]	; (80010b4 <SystemClock_Config+0xd4>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <SystemClock_Config+0xd4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <SystemClock_Config+0xd8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a25      	ldr	r2, [pc, #148]	; (80010b8 <SystemClock_Config+0xd8>)
 8001022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <SystemClock_Config+0xd8>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001034:	2302      	movs	r3, #2
 8001036:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001038:	2301      	movs	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103c:	2310      	movs	r3, #16
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001044:	2300      	movs	r3, #0
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001048:	2308      	movs	r3, #8
 800104a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800104c:	23d8      	movs	r3, #216	; 0xd8
 800104e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001050:	2302      	movs	r3, #2
 8001052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001058:	2302      	movs	r3, #2
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fd17 	bl	8002a94 <HAL_RCC_OscConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800106c:	f000 f826 	bl	80010bc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001070:	f001 fcc0 	bl	80029f4 <HAL_PWREx_EnableOverDrive>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800107a:	f000 f81f 	bl	80010bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2302      	movs	r3, #2
 8001084:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800108a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2107      	movs	r1, #7
 800109c:	4618      	mov	r0, r3
 800109e:	f001 ffa7 	bl	8002ff0 <HAL_RCC_ClockConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80010a8:	f000 f808 	bl	80010bc <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	; 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x8>
	...

080010c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_MspInit+0x44>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_MspInit+0x44>)
 80010d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_MspInit+0x44>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_MspInit+0x44>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_MspInit+0x44>)
 80010ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f0:	6453      	str	r3, [r2, #68]	; 0x44
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_MspInit+0x44>)
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 fc04 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	/*  - - - - - ADC1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <ADC_IRQHandler+0x30>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b02      	cmp	r3, #2
 8001174:	d109      	bne.n	800118a <ADC_IRQHandler+0x26>
		GET_FLAG_ADC_CR1_EOCIE(JOYSTICK_ADC))
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <ADC_IRQHandler+0x30>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001180:	2b20      	cmp	r3, #32
 8001182:	d102      	bne.n	800118a <ADC_IRQHandler+0x26>
		ADC_DRV_EndConvCallBack(&InputsInfo);
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <ADC_IRQHandler+0x34>)
 8001186:	f7ff fcf9 	bl	8000b7c <ADC_DRV_EndConvCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800118a:	4802      	ldr	r0, [pc, #8]	; (8001194 <ADC_IRQHandler+0x30>)
 800118c:	f000 fd28 	bl	8001be0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000020c 	.word	0x2000020c
 8001198:	200002cc 	.word	0x200002cc

0800119c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/*  - - - - - TIM2 Interrupt Flags Check - - - - - */

	if (GET_FLAG_TIM_SR_UIF(INTERNAL_MAIN_TIMER) &&
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <TIM2_IRQHandler+0x34>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	691b      	ldr	r3, [r3, #16]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10b      	bne.n	80011c6 <TIM2_IRQHandler+0x2a>
		GET_FLAG_TIM_DIER_UIE(INTERNAL_MAIN_TIMER))
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <TIM2_IRQHandler+0x34>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 0301 	and.w	r3, r3, #1
	if (GET_FLAG_TIM_SR_UIF(INTERNAL_MAIN_TIMER) &&
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d104      	bne.n	80011c6 <TIM2_IRQHandler+0x2a>
		TimerDRV_CallBack(SBGC_1.Drv);
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <TIM2_IRQHandler+0x38>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 faea 	bl	800579a <TimerDRV_CallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c6:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM2_IRQHandler+0x34>)
 80011c8:	f002 fdf0 	bl	8003dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200002fc 	.word	0x200002fc
 80011d4:	20000254 	.word	0x20000254

080011d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/* - - - - - UART1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <USART1_IRQHandler+0x5c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e6:	2b40      	cmp	r3, #64	; 0x40
 80011e8:	d10b      	bne.n	8001202 <USART1_IRQHandler+0x2a>
		GET_FLAG_UART_CR1_TCIE(SBGC_SERIAL_PORT))
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <USART1_IRQHandler+0x5c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <USART1_IRQHandler+0x2a>
		UART_DRV_TxCallBack(SBGC_1.Drv);
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <USART1_IRQHandler+0x60>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 fb3f 	bl	8005880 <UART_DRV_TxCallBack>

	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <USART1_IRQHandler+0x5c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b20      	cmp	r3, #32
 800120e:	d10b      	bne.n	8001228 <USART1_IRQHandler+0x50>
		GET_FLAG_UART_CR1_RXNEIE(SBGC_SERIAL_PORT))
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <USART1_IRQHandler+0x5c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <USART1_IRQHandler+0x50>
		UART_DRV_RxCallBack(SBGC_1.Drv);
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <USART1_IRQHandler+0x60>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f004 fbea 	bl	80059fc <UART_DRV_RxCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <USART1_IRQHandler+0x5c>)
 800122a:	f003 faa3 	bl	8004774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000348 	.word	0x20000348
 8001238:	20000254 	.word	0x20000254

0800123c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	return 1;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_kill>:

int _kill(int pid, int sig)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001256:	f005 fe35 	bl	8006ec4 <__errno>
 800125a:	4603      	mov	r3, r0
 800125c:	2216      	movs	r2, #22
 800125e:	601a      	str	r2, [r3, #0]
	return -1;
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <_exit>:

void _exit (int status)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffe7 	bl	800124c <_kill>
	while (1) {}		/* Make sure we hang here */
 800127e:	e7fe      	b.n	800127e <_exit+0x12>

08001280 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e00a      	b.n	80012a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001292:	f3af 8000 	nop.w
 8001296:	4601      	mov	r1, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dbf0      	blt.n	8001292 <_read+0x12>
	}

return len;
 80012b0:	687b      	ldr	r3, [r7, #4]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e009      	b.n	80012e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf1      	blt.n	80012cc <_write+0x12>
	}
	return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_close>:

int _close(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
	return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131a:	605a      	str	r2, [r3, #4]
	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_isatty>:

int _isatty(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
	return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
	return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f005 fd9a 	bl	8006ec4 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20080000 	.word	0x20080000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	200002f8 	.word	0x200002f8
 80013c4:	20000470 	.word	0x20000470

080013c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <MX_TIM2_Init+0x98>)
 800140c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001410:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_TIM2_Init+0x98>)
 8001414:	226b      	movs	r2, #107	; 0x6b
 8001416:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_TIM2_Init+0x98>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800141e:	4b19      	ldr	r3, [pc, #100]	; (8001484 <MX_TIM2_Init+0x98>)
 8001420:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001424:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_TIM2_Init+0x98>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_TIM2_Init+0x98>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001432:	4814      	ldr	r0, [pc, #80]	; (8001484 <MX_TIM2_Init+0x98>)
 8001434:	f002 fbea 	bl	8003c0c <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800143e:	f7ff fe3d 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001446:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_TIM2_Init+0x98>)
 8001450:	f002 fdcc 	bl	8003fec <HAL_TIM_ConfigClockSource>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800145a:	f7ff fe2f 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800145e:	2320      	movs	r3, #32
 8001460:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_TIM2_Init+0x98>)
 800146c:	f002 fff4 	bl	8004458 <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001476:	f7ff fe21 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3720      	adds	r7, #32
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200002fc 	.word	0x200002fc

08001488 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d113      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2105      	movs	r1, #5
 80014b6:	201c      	movs	r0, #28
 80014b8:	f000 fff5 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014bc:	201c      	movs	r0, #28
 80014be:	f001 f80e 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014d6:	4a15      	ldr	r2, [pc, #84]	; (800152c <MX_USART1_UART_Init+0x5c>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART1_UART_Init+0x58>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART1_UART_Init+0x58>)
 8001502:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001506:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001508:	4b07      	ldr	r3, [pc, #28]	; (8001528 <MX_USART1_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART1_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	; (8001528 <MX_USART1_UART_Init+0x58>)
 8001516:	f003 f84b 	bl	80045b0 <HAL_UART_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001520:	f7ff fdcc 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000348 	.word	0x20000348
 800152c:	40011000 	.word	0x40011000

08001530 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001536:	4a15      	ldr	r2, [pc, #84]	; (800158c <MX_USART2_UART_Init+0x5c>)
 8001538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001562:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001566:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_USART2_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_USART2_UART_Init+0x58>)
 8001576:	f003 f81b 	bl	80045b0 <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8001580:	f7ff fd9c 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200003cc 	.word	0x200003cc
 800158c:	40004400 	.word	0x40004400

08001590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b0b0      	sub	sp, #192	; 0xc0
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2290      	movs	r2, #144	; 0x90
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 fcc7 	bl	8006f44 <memset>
  if(uartHandle->Instance==USART1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a51      	ldr	r2, [pc, #324]	; (8001700 <HAL_UART_MspInit+0x170>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d15a      	bne.n	8001676 <HAL_UART_MspInit+0xe6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015c0:	2340      	movs	r3, #64	; 0x40
 80015c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015c4:	2300      	movs	r3, #0
 80015c6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	4618      	mov	r0, r3
 80015ce:	f001 fef5 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015d8:	f7ff fd70 	bl	80010bc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015dc:	4b49      	ldr	r3, [pc, #292]	; (8001704 <HAL_UART_MspInit+0x174>)
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	4a48      	ldr	r2, [pc, #288]	; (8001704 <HAL_UART_MspInit+0x174>)
 80015e2:	f043 0310 	orr.w	r3, r3, #16
 80015e6:	6453      	str	r3, [r2, #68]	; 0x44
 80015e8:	4b46      	ldr	r3, [pc, #280]	; (8001704 <HAL_UART_MspInit+0x174>)
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	61bb      	str	r3, [r7, #24]
 80015f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_UART_MspInit+0x174>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4a42      	ldr	r2, [pc, #264]	; (8001704 <HAL_UART_MspInit+0x174>)
 80015fa:	f043 0302 	orr.w	r3, r3, #2
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <HAL_UART_MspInit+0x174>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800160c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001626:	2304      	movs	r3, #4
 8001628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001630:	4619      	mov	r1, r3
 8001632:	4835      	ldr	r0, [pc, #212]	; (8001708 <HAL_UART_MspInit+0x178>)
 8001634:	f001 f800 	bl	8002638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001638:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800163c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001646:	2301      	movs	r3, #1
 8001648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001652:	2304      	movs	r3, #4
 8001654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800165c:	4619      	mov	r1, r3
 800165e:	482a      	ldr	r0, [pc, #168]	; (8001708 <HAL_UART_MspInit+0x178>)
 8001660:	f000 ffea 	bl	8002638 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001664:	2200      	movs	r2, #0
 8001666:	2101      	movs	r1, #1
 8001668:	2025      	movs	r0, #37	; 0x25
 800166a:	f000 ff1c 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800166e:	2025      	movs	r0, #37	; 0x25
 8001670:	f000 ff35 	bl	80024de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001674:	e03f      	b.n	80016f6 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a24      	ldr	r2, [pc, #144]	; (800170c <HAL_UART_MspInit+0x17c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d13a      	bne.n	80016f6 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001684:	2300      	movs	r3, #0
 8001686:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4618      	mov	r0, r3
 800168e:	f001 fe95 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8001698:	f7ff fd10 	bl	80010bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_UART_MspInit+0x174>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	4a18      	ldr	r2, [pc, #96]	; (8001704 <HAL_UART_MspInit+0x174>)
 80016a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a6:	6413      	str	r3, [r2, #64]	; 0x40
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_UART_MspInit+0x174>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <HAL_UART_MspInit+0x174>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a12      	ldr	r2, [pc, #72]	; (8001704 <HAL_UART_MspInit+0x174>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b10      	ldr	r3, [pc, #64]	; (8001704 <HAL_UART_MspInit+0x174>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016cc:	230c      	movs	r3, #12
 80016ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e4:	2307      	movs	r3, #7
 80016e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016ee:	4619      	mov	r1, r3
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <HAL_UART_MspInit+0x180>)
 80016f2:	f000 ffa1 	bl	8002638 <HAL_GPIO_Init>
}
 80016f6:	bf00      	nop
 80016f8:	37c0      	adds	r7, #192	; 0xc0
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40011000 	.word	0x40011000
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400
 800170c:	40004400 	.word	0x40004400
 8001710:	40020000 	.word	0x40020000

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001718:	480d      	ldr	r0, [pc, #52]	; (8001750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800171a:	490e      	ldr	r1, [pc, #56]	; (8001754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800171c:	4a0e      	ldr	r2, [pc, #56]	; (8001758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001720:	e002      	b.n	8001728 <LoopCopyDataInit>

08001722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001726:	3304      	adds	r3, #4

08001728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800172c:	d3f9      	bcc.n	8001722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001730:	4c0b      	ldr	r4, [pc, #44]	; (8001760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001734:	e001      	b.n	800173a <LoopFillZerobss>

08001736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001738:	3204      	adds	r2, #4

0800173a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800173c:	d3fb      	bcc.n	8001736 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800173e:	f7ff fe43 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f005 fbc5 	bl	8006ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff fad7 	bl	8000cf8 <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800174c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001758:	0800bd74 	.word	0x0800bd74
  ldr r2, =_sbss
 800175c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001760:	2000046c 	.word	0x2000046c

08001764 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <CAN1_RX0_IRQHandler>

08001766 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d104      	bne.n	800177e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
 8001778:	f7ff fca0 	bl	80010bc <Error_Handler>
 800177c:	e7fe      	b.n	800177c <stm32_lock_init+0x16>
  lock->flag = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	705a      	strb	r2, [r3, #1]
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800179a:	f3ef 8310 	mrs	r3, PRIMASK
 800179e:	60bb      	str	r3, [r7, #8]
  return(result);
 80017a0:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80017aa:	b672      	cpsid	i
}
 80017ac:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017ae:	f3bf 8f4f 	dsb	sy
}
 80017b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017b4:	f3bf 8f6f 	isb	sy
}
 80017b8:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d104      	bne.n	80017ca <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
 80017c4:	f7ff fc7a 	bl	80010bc <Error_Handler>
 80017c8:	e7fe      	b.n	80017c8 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	785b      	ldrb	r3, [r3, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d103      	bne.n	80017da <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	701a      	strb	r2, [r3, #0]
 80017d8:	e008      	b.n	80017ec <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d104      	bne.n	80017ec <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80017e2:	b672      	cpsid	i
}
 80017e4:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80017e6:	f7ff fc69 	bl	80010bc <Error_Handler>
 80017ea:	e7fe      	b.n	80017ea <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	3301      	adds	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	705a      	strb	r2, [r3, #1]
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d104      	bne.n	8001818 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800180e:	b672      	cpsid	i
}
 8001810:	bf00      	nop
 8001812:	f7ff fc53 	bl	80010bc <Error_Handler>
 8001816:	e7fe      	b.n	8001816 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d104      	bne.n	800182a <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
}
 8001822:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001824:	f7ff fc4a 	bl	80010bc <Error_Handler>
 8001828:	e7fe      	b.n	8001828 <stm32_lock_release+0x28>
  }
  lock->counter--;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	785b      	ldrb	r3, [r3, #1]
 800182e:	3b01      	subs	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	785b      	ldrb	r3, [r3, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d105      	bne.n	800184a <stm32_lock_release+0x4a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001846:	b662      	cpsie	i
}
 8001848:	bf00      	nop
  {
    __enable_irq();
  }
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d105      	bne.n	800186c <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001860:	f005 fb30 	bl	8006ec4 <__errno>
 8001864:	4603      	mov	r3, r0
 8001866:	2216      	movs	r2, #22
 8001868:	601a      	str	r2, [r3, #0]
    return;
 800186a:	e015      	b.n	8001898 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800186c:	2002      	movs	r0, #2
 800186e:	f005 fb53 	bl	8006f18 <malloc>
 8001872:	4603      	mov	r3, r0
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff6d 	bl	8001766 <stm32_lock_init>
    return;
 800188c:	e004      	b.n	8001898 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800188e:	b672      	cpsid	i
}
 8001890:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001892:	f7ff fc13 	bl	80010bc <Error_Handler>
 8001896:	e7fe      	b.n	8001896 <__retarget_lock_init_recursive+0x44>
}
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d104      	bne.n	80018b6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
 80018b0:	f7ff fc04 	bl	80010bc <Error_Handler>
 80018b4:	e7fe      	b.n	80018b4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff6a 	bl	8001792 <stm32_lock_acquire>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
 80018d8:	f7ff fbf0 	bl	80010bc <Error_Handler>
 80018dc:	e7fe      	b.n	80018dc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff8d 	bl	8001800 <stm32_lock_release>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f2:	2003      	movs	r0, #3
 80018f4:	f000 fdcc 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f8:	200f      	movs	r0, #15
 80018fa:	f000 f805 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018fe:	f7ff fbe3 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fde7 	bl	80024fa <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 fdaf 	bl	80024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	; (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000010 	.word	0x20000010
 8001960:	20000018 	.word	0x20000018
 8001964:	20000014 	.word	0x20000014

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000018 	.word	0x20000018
 800198c:	2000045c 	.word	0x2000045c

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	2000045c 	.word	0x2000045c

080019a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e031      	b.n	8001a22 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d109      	bne.n	80019da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff f868 	bl	8000a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d116      	bne.n	8001a14 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_ADC_Init+0x84>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	f043 0202 	orr.w	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fb76 	bl	80020e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
 8001a12:	e001      	b.n	8001a18 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	ffffeefd 	.word	0xffffeefd

08001a30 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Start_IT+0x1a>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e0b5      	b.n	8001bb6 <HAL_ADC_Start_IT+0x186>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d018      	beq.n	8001a92 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a70:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_ADC_Start_IT+0x194>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a54      	ldr	r2, [pc, #336]	; (8001bc8 <HAL_ADC_Start_IT+0x198>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0c9a      	lsrs	r2, r3, #18
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	4413      	add	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a84:	e002      	b.n	8001a8c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f9      	bne.n	8001a86 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d17d      	bne.n	8001b9c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa4:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <HAL_ADC_Start_IT+0x19c>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ac6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ada:	d106      	bne.n	8001aea <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f023 0206 	bic.w	r2, r3, #6
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ae8:	e002      	b.n	8001af0 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b00:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6859      	ldr	r1, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_ADC_Start_IT+0x1a0>)
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_ADC_Start_IT+0x1a4>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10f      	bne.n	8001b3e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d143      	bne.n	8001bb4 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	e03a      	b.n	8001bb4 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a25      	ldr	r2, [pc, #148]	; (8001bd8 <HAL_ADC_Start_IT+0x1a8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d10e      	bne.n	8001b66 <HAL_ADC_Start_IT+0x136>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b64:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_ADC_Start_IT+0x1a4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d120      	bne.n	8001bb4 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <HAL_ADC_Start_IT+0x1ac>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d11b      	bne.n	8001bb4 <HAL_ADC_Start_IT+0x184>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d114      	bne.n	8001bb4 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	f043 0210 	orr.w	r2, r3, #16
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bac:	f043 0201 	orr.w	r2, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000010 	.word	0x20000010
 8001bc8:	431bde83 	.word	0x431bde83
 8001bcc:	fffff8fe 	.word	0xfffff8fe
 8001bd0:	04000020 	.word	0x04000020
 8001bd4:	40012300 	.word	0x40012300
 8001bd8:	40012000 	.word	0x40012000
 8001bdc:	40012200 	.word	0x40012200

08001be0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d049      	beq.n	8001caa <HAL_ADC_IRQHandler+0xca>
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d046      	beq.n	8001caa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d12b      	bne.n	8001c9a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d127      	bne.n	8001c9a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d006      	beq.n	8001c66 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d119      	bne.n	8001c9a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0220 	bic.w	r2, r2, #32
 8001c74:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d105      	bne.n	8001c9a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f043 0201 	orr.w	r2, r3, #1
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f8b0 	bl	8001e00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f06f 0212 	mvn.w	r2, #18
 8001ca8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d057      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x190>
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d054      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d139      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d006      	beq.n	8001d08 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12b      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d124      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d11d      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d119      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fabb 	bl	80022dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f06f 020c 	mvn.w	r2, #12
 8001d6e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d017      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x1d6>
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d014      	beq.n	8001db6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10d      	bne.n	8001db6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f834 	bl	8001e14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0201 	mvn.w	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dc4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d015      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x218>
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d012      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f043 0202 	orr.w	r2, r3, #2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f06f 0220 	mvn.w	r2, #32
 8001de6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f81d 	bl	8001e28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f06f 0220 	mvn.w	r2, #32
 8001df6:	601a      	str	r2, [r3, #0]
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x1c>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e136      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x28a>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d93a      	bls.n	8001ede <HAL_ADC_ConfigChannel+0xa2>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e70:	d035      	beq.n	8001ede <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68d9      	ldr	r1, [r3, #12]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	3b1e      	subs	r3, #30
 8001e88:	2207      	movs	r2, #7
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	400a      	ands	r2, r1
 8001e96:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a8d      	ldr	r2, [pc, #564]	; (80020d4 <HAL_ADC_ConfigChannel+0x298>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10a      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	061a      	lsls	r2, r3, #24
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb6:	e035      	b.n	8001f24 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68d9      	ldr	r1, [r3, #12]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4403      	add	r3, r0
 8001ed0:	3b1e      	subs	r3, #30
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001edc:	e022      	b.n	8001f24 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6919      	ldr	r1, [r3, #16]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	400a      	ands	r2, r1
 8001f00:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6919      	ldr	r1, [r3, #16]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	4603      	mov	r3, r0
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4403      	add	r3, r0
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d824      	bhi.n	8001f76 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b05      	subs	r3, #5
 8001f3e:	221f      	movs	r2, #31
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43da      	mvns	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	3b05      	subs	r3, #5
 8001f68:	fa00 f203 	lsl.w	r2, r0, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34
 8001f74:	e04c      	b.n	8002010 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d824      	bhi.n	8001fc8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3b23      	subs	r3, #35	; 0x23
 8001f90:	221f      	movs	r2, #31
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	400a      	ands	r2, r1
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3b23      	subs	r3, #35	; 0x23
 8001fba:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001fc6:	e023      	b.n	8002010 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3b41      	subs	r3, #65	; 0x41
 8001fda:	221f      	movs	r2, #31
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3b41      	subs	r3, #65	; 0x41
 8002004:	fa00 f203 	lsl.w	r2, r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a30      	ldr	r2, [pc, #192]	; (80020d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10a      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1f4>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002022:	d105      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4a2c      	ldr	r2, [pc, #176]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 800202a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800202e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a28      	ldr	r2, [pc, #160]	; (80020d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10f      	bne.n	800205a <HAL_ADC_ConfigChannel+0x21e>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b12      	cmp	r3, #18
 8002040:	d10b      	bne.n	800205a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	4a25      	ldr	r2, [pc, #148]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002048:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800204c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002054:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002058:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1e      	ldr	r2, [pc, #120]	; (80020d8 <HAL_ADC_ConfigChannel+0x29c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d12b      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x280>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1a      	ldr	r2, [pc, #104]	; (80020d4 <HAL_ADC_ConfigChannel+0x298>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d003      	beq.n	8002076 <HAL_ADC_ConfigChannel+0x23a>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b11      	cmp	r3, #17
 8002074:	d122      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002076:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 800207c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002080:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4a15      	ldr	r2, [pc, #84]	; (80020dc <HAL_ADC_ConfigChannel+0x2a0>)
 8002088:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800208c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_ADC_ConfigChannel+0x298>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d111      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002098:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a11      	ldr	r2, [pc, #68]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9a      	lsrs	r2, r3, #18
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020ae:	e002      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f9      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	10000012 	.word	0x10000012
 80020d8:	40012000 	.word	0x40012000
 80020dc:	40012300 	.word	0x40012300
 80020e0:	20000010 	.word	0x20000010
 80020e4:	431bde83 	.word	0x431bde83

080020e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020f0:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <ADC_Init+0x1ec>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a77      	ldr	r2, [pc, #476]	; (80022d4 <ADC_Init+0x1ec>)
 80020f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80020fc:	4b75      	ldr	r3, [pc, #468]	; (80022d4 <ADC_Init+0x1ec>)
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	4973      	ldr	r1, [pc, #460]	; (80022d4 <ADC_Init+0x1ec>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002118:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	021a      	lsls	r2, r3, #8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800213c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6859      	ldr	r1, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800215e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	4a58      	ldr	r2, [pc, #352]	; (80022d8 <ADC_Init+0x1f0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d022      	beq.n	80021c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800218a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6899      	ldr	r1, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	e00f      	b.n	80021e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0202 	bic.w	r2, r2, #2
 80021f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6899      	ldr	r1, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	005a      	lsls	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01b      	beq.n	8002248 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800222e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	3b01      	subs	r3, #1
 800223c:	035a      	lsls	r2, r3, #13
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	e007      	b.n	8002258 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002256:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	3b01      	subs	r3, #1
 8002274:	051a      	lsls	r2, r3, #20
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800228c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6899      	ldr	r1, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800229a:	025a      	lsls	r2, r3, #9
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	029a      	lsls	r2, r3, #10
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40012300 	.word	0x40012300
 80022d8:	0f000001 	.word	0x0f000001

080022dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <__NVIC_SetPriorityGrouping+0x40>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800230c:	4013      	ands	r3, r2
 800230e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <__NVIC_SetPriorityGrouping+0x44>)
 800231a:	4313      	orrs	r3, r2
 800231c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800231e:	4a04      	ldr	r2, [pc, #16]	; (8002330 <__NVIC_SetPriorityGrouping+0x40>)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	60d3      	str	r3, [r2, #12]
}
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00
 8002334:	05fa0000 	.word	0x05fa0000

08002338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <__NVIC_GetPriorityGrouping+0x18>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	f003 0307 	and.w	r3, r3, #7
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	2b00      	cmp	r3, #0
 8002364:	db0b      	blt.n	800237e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	4907      	ldr	r1, [pc, #28]	; (800238c <__NVIC_EnableIRQ+0x38>)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	095b      	lsrs	r3, r3, #5
 8002374:	2001      	movs	r0, #1
 8002376:	fa00 f202 	lsl.w	r2, r0, r2
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000e100 	.word	0xe000e100

08002390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	db0a      	blt.n	80023ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <__NVIC_SetPriority+0x4c>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	440b      	add	r3, r1
 80023b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023b8:	e00a      	b.n	80023d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4908      	ldr	r1, [pc, #32]	; (80023e0 <__NVIC_SetPriority+0x50>)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	3b04      	subs	r3, #4
 80023c8:	0112      	lsls	r2, r2, #4
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	440b      	add	r3, r1
 80023ce:	761a      	strb	r2, [r3, #24]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	bf28      	it	cs
 8002402:	2304      	movcs	r3, #4
 8002404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	3304      	adds	r3, #4
 800240a:	2b06      	cmp	r3, #6
 800240c:	d902      	bls.n	8002414 <NVIC_EncodePriority+0x30>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3b03      	subs	r3, #3
 8002412:	e000      	b.n	8002416 <NVIC_EncodePriority+0x32>
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	f04f 32ff 	mov.w	r2, #4294967295
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	401a      	ands	r2, r3
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800242c:	f04f 31ff 	mov.w	r1, #4294967295
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43d9      	mvns	r1, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	4313      	orrs	r3, r2
         );
}
 800243e:	4618      	mov	r0, r3
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff8e 	bl	8002390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff29 	bl	80022f0 <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff3e 	bl	8002338 <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff8e 	bl	80023e4 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5d 	bl	8002390 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff31 	bl	8002354 <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa2 	bl	800244c <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff fa36 	bl	8001990 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d008      	beq.n	8002544 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e052      	b.n	80025ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0216 	bic.w	r2, r2, #22
 8002552:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002562:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d103      	bne.n	8002574 <HAL_DMA_Abort+0x62>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0208 	bic.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002594:	e013      	b.n	80025be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002596:	f7ff f9fb 	bl	8001990 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b05      	cmp	r3, #5
 80025a2:	d90c      	bls.n	80025be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2203      	movs	r2, #3
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e015      	b.n	80025ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e4      	bne.n	8002596 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d004      	beq.n	8002610 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e00c      	b.n	800262a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2205      	movs	r2, #5
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e175      	b.n	8002944 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	429a      	cmp	r2, r3
 8002672:	f040 8164 	bne.w	800293e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d005      	beq.n	800268e <HAL_GPIO_Init+0x56>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d130      	bne.n	80026f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d017      	beq.n	800272c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d123      	bne.n	8002780 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80be 	beq.w	800293e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_GPIO_Init+0x324>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a65      	ldr	r2, [pc, #404]	; (800295c <HAL_GPIO_Init+0x324>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_GPIO_Init+0x324>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027da:	4a61      	ldr	r2, [pc, #388]	; (8002960 <HAL_GPIO_Init+0x328>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a58      	ldr	r2, [pc, #352]	; (8002964 <HAL_GPIO_Init+0x32c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d037      	beq.n	8002876 <HAL_GPIO_Init+0x23e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_GPIO_Init+0x330>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d031      	beq.n	8002872 <HAL_GPIO_Init+0x23a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_GPIO_Init+0x334>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d02b      	beq.n	800286e <HAL_GPIO_Init+0x236>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a55      	ldr	r2, [pc, #340]	; (8002970 <HAL_GPIO_Init+0x338>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d025      	beq.n	800286a <HAL_GPIO_Init+0x232>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a54      	ldr	r2, [pc, #336]	; (8002974 <HAL_GPIO_Init+0x33c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01f      	beq.n	8002866 <HAL_GPIO_Init+0x22e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a53      	ldr	r2, [pc, #332]	; (8002978 <HAL_GPIO_Init+0x340>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d019      	beq.n	8002862 <HAL_GPIO_Init+0x22a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a52      	ldr	r2, [pc, #328]	; (800297c <HAL_GPIO_Init+0x344>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_GPIO_Init+0x226>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a51      	ldr	r2, [pc, #324]	; (8002980 <HAL_GPIO_Init+0x348>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00d      	beq.n	800285a <HAL_GPIO_Init+0x222>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a50      	ldr	r2, [pc, #320]	; (8002984 <HAL_GPIO_Init+0x34c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <HAL_GPIO_Init+0x21e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <HAL_GPIO_Init+0x350>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_GPIO_Init+0x21a>
 800284e:	2309      	movs	r3, #9
 8002850:	e012      	b.n	8002878 <HAL_GPIO_Init+0x240>
 8002852:	230a      	movs	r3, #10
 8002854:	e010      	b.n	8002878 <HAL_GPIO_Init+0x240>
 8002856:	2308      	movs	r3, #8
 8002858:	e00e      	b.n	8002878 <HAL_GPIO_Init+0x240>
 800285a:	2307      	movs	r3, #7
 800285c:	e00c      	b.n	8002878 <HAL_GPIO_Init+0x240>
 800285e:	2306      	movs	r3, #6
 8002860:	e00a      	b.n	8002878 <HAL_GPIO_Init+0x240>
 8002862:	2305      	movs	r3, #5
 8002864:	e008      	b.n	8002878 <HAL_GPIO_Init+0x240>
 8002866:	2304      	movs	r3, #4
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x240>
 800286a:	2303      	movs	r3, #3
 800286c:	e004      	b.n	8002878 <HAL_GPIO_Init+0x240>
 800286e:	2302      	movs	r3, #2
 8002870:	e002      	b.n	8002878 <HAL_GPIO_Init+0x240>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_GPIO_Init+0x240>
 8002876:	2300      	movs	r3, #0
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	f002 0203 	and.w	r2, r2, #3
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4093      	lsls	r3, r2
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002888:	4935      	ldr	r1, [pc, #212]	; (8002960 <HAL_GPIO_Init+0x328>)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	3302      	adds	r3, #2
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002896:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_GPIO_Init+0x354>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ba:	4a34      	ldr	r2, [pc, #208]	; (800298c <HAL_GPIO_Init+0x354>)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c0:	4b32      	ldr	r3, [pc, #200]	; (800298c <HAL_GPIO_Init+0x354>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4013      	ands	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e4:	4a29      	ldr	r2, [pc, #164]	; (800298c <HAL_GPIO_Init+0x354>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_GPIO_Init+0x354>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800290e:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_GPIO_Init+0x354>)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_GPIO_Init+0x354>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <HAL_GPIO_Init+0x354>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b0f      	cmp	r3, #15
 8002948:	f67f ae86 	bls.w	8002658 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3724      	adds	r7, #36	; 0x24
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40013800 	.word	0x40013800
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400
 800296c:	40020800 	.word	0x40020800
 8002970:	40020c00 	.word	0x40020c00
 8002974:	40021000 	.word	0x40021000
 8002978:	40021400 	.word	0x40021400
 800297c:	40021800 	.word	0x40021800
 8002980:	40021c00 	.word	0x40021c00
 8002984:	40022000 	.word	0x40022000
 8002988:	40022400 	.word	0x40022400
 800298c:	40013c00 	.word	0x40013c00

08002990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	887b      	ldrh	r3, [r7, #2]
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d002      	beq.n	80029ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
 80029cc:	4613      	mov	r3, r2
 80029ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d0:	787b      	ldrb	r3, [r7, #1]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029dc:	e003      	b.n	80029e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029de:	887b      	ldrh	r3, [r7, #2]
 80029e0:	041a      	lsls	r2, r3, #16
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	619a      	str	r2, [r3, #24]
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4a22      	ldr	r2, [pc, #136]	; (8002a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6413      	str	r3, [r2, #64]	; 0x40
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_PWREx_EnableOverDrive+0x98>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1d      	ldr	r2, [pc, #116]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a22:	f7fe ffb5 	bl	8001990 <HAL_GetTick>
 8002a26:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a28:	e009      	b.n	8002a3e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a2a:	f7fe ffb1 	bl	8001990 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a38:	d901      	bls.n	8002a3e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e022      	b.n	8002a84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a3e:	4b14      	ldr	r3, [pc, #80]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4a:	d1ee      	bne.n	8002a2a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a58:	f7fe ff9a 	bl	8001990 <HAL_GetTick>
 8002a5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a5e:	e009      	b.n	8002a74 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a60:	f7fe ff96 	bl	8001990 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6e:	d901      	bls.n	8002a74 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e007      	b.n	8002a84 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a80:	d1ee      	bne.n	8002a60 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40007000 	.word	0x40007000

08002a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e29b      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8087 	beq.w	8002bc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab8:	4b96      	ldr	r3, [pc, #600]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d00c      	beq.n	8002ade <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ac4:	4b93      	ldr	r3, [pc, #588]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d112      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62>
 8002ad0:	4b90      	ldr	r3, [pc, #576]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002adc:	d10b      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ade:	4b8d      	ldr	r3, [pc, #564]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d06c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x130>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d168      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e275      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002afe:	d106      	bne.n	8002b0e <HAL_RCC_OscConfig+0x7a>
 8002b00:	4b84      	ldr	r3, [pc, #528]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a83      	ldr	r2, [pc, #524]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	e02e      	b.n	8002b6c <HAL_RCC_OscConfig+0xd8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x9c>
 8002b16:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a7e      	ldr	r2, [pc, #504]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a7b      	ldr	r2, [pc, #492]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	e01d      	b.n	8002b6c <HAL_RCC_OscConfig+0xd8>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0xc0>
 8002b3a:	4b76      	ldr	r3, [pc, #472]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a75      	ldr	r2, [pc, #468]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a72      	ldr	r2, [pc, #456]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0xd8>
 8002b54:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a6e      	ldr	r2, [pc, #440]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b6c      	ldr	r3, [pc, #432]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a6b      	ldr	r2, [pc, #428]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d013      	beq.n	8002b9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe ff0c 	bl	8001990 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7fe ff08 	bl	8001990 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e229      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0xe8>
 8002b9a:	e014      	b.n	8002bc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fef8 	bl	8001990 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fef4 	bl	8001990 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e215      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb6:	4b57      	ldr	r3, [pc, #348]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x110>
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d069      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bd2:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bde:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d11c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x190>
 8002bea:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d116      	bne.n	8002c24 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf6:	4b47      	ldr	r3, [pc, #284]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_RCC_OscConfig+0x17a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d001      	beq.n	8002c0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e1e9      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	493d      	ldr	r1, [pc, #244]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	e040      	b.n	8002ca6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d023      	beq.n	8002c74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a38      	ldr	r2, [pc, #224]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c32:	f043 0301 	orr.w	r3, r3, #1
 8002c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe feaa 	bl	8001990 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c40:	f7fe fea6 	bl	8001990 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e1c7      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c52:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4929      	ldr	r1, [pc, #164]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
 8002c72:	e018      	b.n	8002ca6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a26      	ldr	r2, [pc, #152]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fe86 	bl	8001990 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c88:	f7fe fe82 	bl	8001990 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1a3      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d038      	beq.n	8002d24 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d019      	beq.n	8002cee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cba:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fe63 	bl	8001990 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cce:	f7fe fe5f 	bl	8001990 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e180      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x23a>
 8002cec:	e01a      	b.n	8002d24 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fe49 	bl	8001990 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe fe45 	bl	8001990 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d903      	bls.n	8002d18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e166      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
 8002d14:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	4b92      	ldr	r3, [pc, #584]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ee      	bne.n	8002d02 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80a4 	beq.w	8002e7a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d32:	4b8c      	ldr	r3, [pc, #560]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3e:	4b89      	ldr	r3, [pc, #548]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	4a88      	ldr	r2, [pc, #544]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d48:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4a:	4b86      	ldr	r3, [pc, #536]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d56:	2301      	movs	r3, #1
 8002d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5a:	4b83      	ldr	r3, [pc, #524]	; (8002f68 <HAL_RCC_OscConfig+0x4d4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d118      	bne.n	8002d98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d66:	4b80      	ldr	r3, [pc, #512]	; (8002f68 <HAL_RCC_OscConfig+0x4d4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7f      	ldr	r2, [pc, #508]	; (8002f68 <HAL_RCC_OscConfig+0x4d4>)
 8002d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d72:	f7fe fe0d 	bl	8001990 <HAL_GetTick>
 8002d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7fe fe09 	bl	8001990 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b64      	cmp	r3, #100	; 0x64
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e12a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8c:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCC_OscConfig+0x4d4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d106      	bne.n	8002dae <HAL_RCC_OscConfig+0x31a>
 8002da0:	4b70      	ldr	r3, [pc, #448]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4a6f      	ldr	r2, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dac:	e02d      	b.n	8002e0a <HAL_RCC_OscConfig+0x376>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x33c>
 8002db6:	4b6b      	ldr	r3, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dba:	4a6a      	ldr	r2, [pc, #424]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc2:	4b68      	ldr	r3, [pc, #416]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a67      	ldr	r2, [pc, #412]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	e01c      	b.n	8002e0a <HAL_RCC_OscConfig+0x376>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d10c      	bne.n	8002df2 <HAL_RCC_OscConfig+0x35e>
 8002dd8:	4b62      	ldr	r3, [pc, #392]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	4a61      	ldr	r2, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	6713      	str	r3, [r2, #112]	; 0x70
 8002de4:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a5e      	ldr	r2, [pc, #376]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	e00b      	b.n	8002e0a <HAL_RCC_OscConfig+0x376>
 8002df2:	4b5c      	ldr	r3, [pc, #368]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df6:	4a5b      	ldr	r2, [pc, #364]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfe:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	4a58      	ldr	r2, [pc, #352]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	f023 0304 	bic.w	r3, r3, #4
 8002e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d015      	beq.n	8002e3e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe fdbd 	bl	8001990 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fe fdb9 	bl	8001990 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e0d8      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e30:	4b4c      	ldr	r3, [pc, #304]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ee      	beq.n	8002e1a <HAL_RCC_OscConfig+0x386>
 8002e3c:	e014      	b.n	8002e68 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fda7 	bl	8001990 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe fda3 	bl	8001990 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0c2      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5c:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1ee      	bne.n	8002e46 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4b3d      	ldr	r3, [pc, #244]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a3c      	ldr	r2, [pc, #240]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 80ae 	beq.w	8002fe0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e84:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d06d      	beq.n	8002f6c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d14b      	bne.n	8002f30 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e98:	4b32      	ldr	r3, [pc, #200]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fd74 	bl	8001990 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe fd70 	bl	8001990 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e091      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	4b29      	ldr	r3, [pc, #164]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	085b      	lsrs	r3, r3, #1
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	061b      	lsls	r3, r3, #24
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	071b      	lsls	r3, r3, #28
 8002ef6:	491b      	ldr	r1, [pc, #108]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002efc:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a18      	ldr	r2, [pc, #96]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe fd42 	bl	8001990 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f10:	f7fe fd3e 	bl	8001990 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e05f      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x47c>
 8002f2e:	e057      	b.n	8002fe0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0b      	ldr	r2, [pc, #44]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fd28 	bl	8001990 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7fe fd24 	bl	8001990 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e045      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f56:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_RCC_OscConfig+0x4d0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4b0>
 8002f62:	e03d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x54c>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <HAL_RCC_OscConfig+0x558>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d030      	beq.n	8002fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d129      	bne.n	8002fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d122      	bne.n	8002fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fa2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d119      	bne.n	8002fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	085b      	lsrs	r3, r3, #1
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d10f      	bne.n	8002fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d107      	bne.n	8002fdc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800

08002ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0d0      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003008:	4b6a      	ldr	r3, [pc, #424]	; (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d910      	bls.n	8003038 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003016:	4b67      	ldr	r3, [pc, #412]	; (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 020f 	bic.w	r2, r3, #15
 800301e:	4965      	ldr	r1, [pc, #404]	; (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b63      	ldr	r3, [pc, #396]	; (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0b8      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003050:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a58      	ldr	r2, [pc, #352]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800305a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a52      	ldr	r2, [pc, #328]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800306e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003072:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003074:	4b50      	ldr	r3, [pc, #320]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	494d      	ldr	r1, [pc, #308]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d040      	beq.n	8003114 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d107      	bne.n	80030aa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d115      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e07f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d107      	bne.n	80030c2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b2:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e073      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c2:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06b      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f023 0203 	bic.w	r2, r3, #3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4936      	ldr	r1, [pc, #216]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e4:	f7fe fc54 	bl	8001990 <HAL_GetTick>
 80030e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ec:	f7fe fc50 	bl	8001990 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e053      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003102:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 020c 	and.w	r2, r3, #12
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	429a      	cmp	r2, r3
 8003112:	d1eb      	bne.n	80030ec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003114:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d210      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 020f 	bic.w	r2, r3, #15
 800312a:	4922      	ldr	r1, [pc, #136]	; (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e032      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4916      	ldr	r1, [pc, #88]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800316e:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	490e      	ldr	r1, [pc, #56]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003182:	f000 f821 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003186:	4602      	mov	r2, r0
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	490a      	ldr	r1, [pc, #40]	; (80031bc <HAL_RCC_ClockConfig+0x1cc>)
 8003194:	5ccb      	ldrb	r3, [r1, r3]
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_RCC_ClockConfig+0x1d0>)
 800319c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1d4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fbb0 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	0800b840 	.word	0x0800b840
 80031c0:	20000010 	.word	0x20000010
 80031c4:	20000014 	.word	0x20000014

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b090      	sub	sp, #64	; 0x40
 80031ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
 80031d4:	2300      	movs	r3, #0
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d8:	2300      	movs	r3, #0
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e0:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d00d      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x40>
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	f200 80a1 	bhi.w	8003334 <HAL_RCC_GetSysClockFreq+0x16c>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x34>
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fa:	e09b      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b53      	ldr	r3, [pc, #332]	; (800334c <HAL_RCC_GetSysClockFreq+0x184>)
 80031fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003200:	e09b      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003202:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_GetSysClockFreq+0x188>)
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003206:	e098      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003208:	4b4f      	ldr	r3, [pc, #316]	; (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003210:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003212:	4b4d      	ldr	r3, [pc, #308]	; (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d028      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321e:	4b4a      	ldr	r3, [pc, #296]	; (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	099b      	lsrs	r3, r3, #6
 8003224:	2200      	movs	r2, #0
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	627a      	str	r2, [r7, #36]	; 0x24
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003230:	2100      	movs	r1, #0
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_GetSysClockFreq+0x188>)
 8003234:	fb03 f201 	mul.w	r2, r3, r1
 8003238:	2300      	movs	r3, #0
 800323a:	fb00 f303 	mul.w	r3, r0, r3
 800323e:	4413      	add	r3, r2
 8003240:	4a43      	ldr	r2, [pc, #268]	; (8003350 <HAL_RCC_GetSysClockFreq+0x188>)
 8003242:	fba0 1202 	umull	r1, r2, r0, r2
 8003246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003248:	460a      	mov	r2, r1
 800324a:	62ba      	str	r2, [r7, #40]	; 0x28
 800324c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800324e:	4413      	add	r3, r2
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003254:	2200      	movs	r2, #0
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	61fa      	str	r2, [r7, #28]
 800325a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800325e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003262:	f7fd fa01 	bl	8000668 <__aeabi_uldivmod>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4613      	mov	r3, r2
 800326c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800326e:	e053      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003270:	4b35      	ldr	r3, [pc, #212]	; (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	099b      	lsrs	r3, r3, #6
 8003276:	2200      	movs	r2, #0
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	617a      	str	r2, [r7, #20]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003282:	f04f 0b00 	mov.w	fp, #0
 8003286:	4652      	mov	r2, sl
 8003288:	465b      	mov	r3, fp
 800328a:	f04f 0000 	mov.w	r0, #0
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	0159      	lsls	r1, r3, #5
 8003294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003298:	0150      	lsls	r0, r2, #5
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	ebb2 080a 	subs.w	r8, r2, sl
 80032a2:	eb63 090b 	sbc.w	r9, r3, fp
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032ba:	ebb2 0408 	subs.w	r4, r2, r8
 80032be:	eb63 0509 	sbc.w	r5, r3, r9
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	00eb      	lsls	r3, r5, #3
 80032cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d0:	00e2      	lsls	r2, r4, #3
 80032d2:	4614      	mov	r4, r2
 80032d4:	461d      	mov	r5, r3
 80032d6:	eb14 030a 	adds.w	r3, r4, sl
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	eb45 030b 	adc.w	r3, r5, fp
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ee:	4629      	mov	r1, r5
 80032f0:	028b      	lsls	r3, r1, #10
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032f8:	4621      	mov	r1, r4
 80032fa:	028a      	lsls	r2, r1, #10
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003302:	2200      	movs	r2, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	60fa      	str	r2, [r7, #12]
 8003308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800330c:	f7fd f9ac 	bl	8000668 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_GetSysClockFreq+0x180>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	3301      	adds	r3, #1
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003328:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003332:	e002      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003334:	4b05      	ldr	r3, [pc, #20]	; (800334c <HAL_RCC_GetSysClockFreq+0x184>)
 8003336:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800333c:	4618      	mov	r0, r3
 800333e:	3740      	adds	r7, #64	; 0x40
 8003340:	46bd      	mov	sp, r7
 8003342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	00f42400 	.word	0x00f42400
 8003350:	017d7840 	.word	0x017d7840

08003354 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003358:	4b03      	ldr	r3, [pc, #12]	; (8003368 <HAL_RCC_GetHCLKFreq+0x14>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20000010 	.word	0x20000010

0800336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003370:	f7ff fff0 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 8003374:	4602      	mov	r2, r0
 8003376:	4b05      	ldr	r3, [pc, #20]	; (800338c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	0a9b      	lsrs	r3, r3, #10
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	4903      	ldr	r1, [pc, #12]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003382:	5ccb      	ldrb	r3, [r1, r3]
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	0800b850 	.word	0x0800b850

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003398:	f7ff ffdc 	bl	8003354 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0b5b      	lsrs	r3, r3, #13
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	0800b850 	.word	0x0800b850

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d012      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033e4:	4b69      	ldr	r3, [pc, #420]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a68      	ldr	r2, [pc, #416]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033ee:	6093      	str	r3, [r2, #8]
 80033f0:	4b66      	ldr	r3, [pc, #408]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f8:	4964      	ldr	r1, [pc, #400]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d017      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800341c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	4959      	ldr	r1, [pc, #356]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003434:	d101      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003442:	2301      	movs	r3, #1
 8003444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d017      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003452:	4b4e      	ldr	r3, [pc, #312]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	494a      	ldr	r1, [pc, #296]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003470:	d101      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003472:	2301      	movs	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800347e:	2301      	movs	r3, #1
 8003480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 808b 	beq.w	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	4b3a      	ldr	r3, [pc, #232]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	4a39      	ldr	r2, [pc, #228]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6413      	str	r3, [r2, #64]	; 0x40
 80034ac:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a34      	ldr	r2, [pc, #208]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c4:	f7fe fa64 	bl	8001990 <HAL_GetTick>
 80034c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034cc:	f7fe fa60 	bl	8001990 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e38f      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034de:	4b2c      	ldr	r3, [pc, #176]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ea:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d035      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d02e      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003508:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003510:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a1d      	ldr	r2, [pc, #116]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800351e:	4b1b      	ldr	r3, [pc, #108]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003528:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800352a:	4a18      	ldr	r2, [pc, #96]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003530:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d114      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353c:	f7fe fa28 	bl	8001990 <HAL_GetTick>
 8003540:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003542:	e00a      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003544:	f7fe fa24 	bl	8001990 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e351      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0ee      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003572:	d111      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003582:	400b      	ands	r3, r1
 8003584:	4901      	ldr	r1, [pc, #4]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
 800358a:	e00b      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800358c:	40023800 	.word	0x40023800
 8003590:	40007000 	.word	0x40007000
 8003594:	0ffffcff 	.word	0x0ffffcff
 8003598:	4bac      	ldr	r3, [pc, #688]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4aab      	ldr	r2, [pc, #684]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035a2:	6093      	str	r3, [r2, #8]
 80035a4:	4ba9      	ldr	r3, [pc, #676]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b0:	49a6      	ldr	r1, [pc, #664]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d010      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035c2:	4ba2      	ldr	r3, [pc, #648]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c8:	4aa0      	ldr	r2, [pc, #640]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035d2:	4b9e      	ldr	r3, [pc, #632]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	499b      	ldr	r1, [pc, #620]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f0:	4b96      	ldr	r3, [pc, #600]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035fe:	4993      	ldr	r1, [pc, #588]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003612:	4b8e      	ldr	r3, [pc, #568]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003620:	498a      	ldr	r1, [pc, #552]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003634:	4b85      	ldr	r3, [pc, #532]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003642:	4982      	ldr	r1, [pc, #520]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003656:	4b7d      	ldr	r3, [pc, #500]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003664:	4979      	ldr	r1, [pc, #484]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003678:	4b74      	ldr	r3, [pc, #464]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f023 0203 	bic.w	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	4971      	ldr	r1, [pc, #452]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800369a:	4b6c      	ldr	r3, [pc, #432]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	f023 020c 	bic.w	r2, r3, #12
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	4968      	ldr	r1, [pc, #416]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036bc:	4b63      	ldr	r3, [pc, #396]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	4960      	ldr	r1, [pc, #384]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036de:	4b5b      	ldr	r3, [pc, #364]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	4957      	ldr	r1, [pc, #348]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003700:	4b52      	ldr	r3, [pc, #328]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	494f      	ldr	r1, [pc, #316]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003722:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	4946      	ldr	r1, [pc, #280]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003744:	4b41      	ldr	r3, [pc, #260]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003752:	493e      	ldr	r1, [pc, #248]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003766:	4b39      	ldr	r3, [pc, #228]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003774:	4935      	ldr	r1, [pc, #212]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003788:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003796:	492d      	ldr	r1, [pc, #180]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d011      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037b8:	4924      	ldr	r1, [pc, #144]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037c8:	d101      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	4914      	ldr	r1, [pc, #80]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800381c:	490b      	ldr	r1, [pc, #44]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800381e:	4313      	orrs	r3, r2
 8003820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003840:	4902      	ldr	r1, [pc, #8]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003848:	e002      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00b      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800385c:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800385e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003862:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	4986      	ldr	r1, [pc, #536]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003880:	4b81      	ldr	r3, [pc, #516]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003886:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	497d      	ldr	r1, [pc, #500]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d006      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80d6 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038ac:	4b76      	ldr	r3, [pc, #472]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a75      	ldr	r2, [pc, #468]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fe f86a 	bl	8001990 <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038c0:	f7fe f866 	bl	8001990 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e195      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038d2:	4b6d      	ldr	r3, [pc, #436]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d021      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11d      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038f2:	4b65      	ldr	r3, [pc, #404]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003900:	4b61      	ldr	r3, [pc, #388]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003906:	0e1b      	lsrs	r3, r3, #24
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	019a      	lsls	r2, r3, #6
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	431a      	orrs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	071b      	lsls	r3, r3, #28
 8003926:	4958      	ldr	r1, [pc, #352]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d004      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003942:	d00a      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800394c:	2b00      	cmp	r3, #0
 800394e:	d02e      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003958:	d129      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800395a:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003968:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800396a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396e:	0f1b      	lsrs	r3, r3, #28
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	019a      	lsls	r2, r3, #6
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	061b      	lsls	r3, r3, #24
 8003988:	431a      	orrs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	493e      	ldr	r1, [pc, #248]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003996:	4b3c      	ldr	r3, [pc, #240]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	f023 021f 	bic.w	r2, r3, #31
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	3b01      	subs	r3, #1
 80039a6:	4938      	ldr	r1, [pc, #224]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01d      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039ba:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c0:	0e1b      	lsrs	r3, r3, #24
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039c8:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ce:	0f1b      	lsrs	r3, r3, #28
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	019a      	lsls	r2, r3, #6
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	431a      	orrs	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	061b      	lsls	r3, r3, #24
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	071b      	lsls	r3, r3, #28
 80039ee:	4926      	ldr	r1, [pc, #152]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d011      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	019a      	lsls	r2, r3, #6
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	071b      	lsls	r3, r3, #28
 8003a1e:	491a      	ldr	r1, [pc, #104]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a26:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a32:	f7fd ffad 	bl	8001990 <HAL_GetTick>
 8003a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a3a:	f7fd ffa9 	bl	8001990 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	; 0x64
 8003a46:	d901      	bls.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0d8      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a4c:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	f040 80ce 	bne.w	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a08      	ldr	r2, [pc, #32]	; (8003a88 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a6c:	f7fd ff90 	bl	8001990 <HAL_GetTick>
 8003a70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a72:	e00b      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a74:	f7fd ff8c 	bl	8001990 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d904      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0bb      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a8c:	4b5e      	ldr	r3, [pc, #376]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a98:	d0ec      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02e      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d12a      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ac2:	4b51      	ldr	r3, [pc, #324]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ad0:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	0f1b      	lsrs	r3, r3, #28
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	019a      	lsls	r2, r3, #6
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	061b      	lsls	r3, r3, #24
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	071b      	lsls	r3, r3, #28
 8003af6:	4944      	ldr	r1, [pc, #272]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003afe:	4b42      	ldr	r3, [pc, #264]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	493d      	ldr	r1, [pc, #244]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d022      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b2c:	d11d      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b2e:	4b36      	ldr	r3, [pc, #216]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	0e1b      	lsrs	r3, r3, #24
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b3c:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	0f1b      	lsrs	r3, r3, #28
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	019a      	lsls	r2, r3, #6
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	431a      	orrs	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	061b      	lsls	r3, r3, #24
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	071b      	lsls	r3, r3, #28
 8003b62:	4929      	ldr	r1, [pc, #164]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d028      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	0e1b      	lsrs	r3, r3, #24
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b84:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8a:	0c1b      	lsrs	r3, r3, #16
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	019a      	lsls	r2, r3, #6
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	071b      	lsls	r3, r3, #28
 8003baa:	4917      	ldr	r1, [pc, #92]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	4911      	ldr	r1, [pc, #68]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fd fedc 	bl	8001990 <HAL_GetTick>
 8003bd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bdc:	f7fd fed8 	bl	8001990 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e007      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfa:	d1ef      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e049      	b.n	8003cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fc28 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 faca 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d001      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e054      	b.n	8003d7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_TIM_Base_Start_IT+0xd0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d022      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x80>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d01d      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x80>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d018      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x80>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d013      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x80>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00e      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x80>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1e      	ldr	r2, [pc, #120]	; (8003d9c <HAL_TIM_Base_Start_IT+0xe0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d009      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x80>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_TIM_Base_Start_IT+0x80>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d115      	bne.n	8003d68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_TIM_Base_Start_IT+0xec>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d015      	beq.n	8003d7a <HAL_TIM_Base_Start_IT+0xbe>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d54:	d011      	beq.n	8003d7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0201 	orr.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d66:	e008      	b.n	8003d7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0201 	orr.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e000      	b.n	8003d7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010000 	.word	0x40010000
 8003d90:	40000400 	.word	0x40000400
 8003d94:	40000800 	.word	0x40000800
 8003d98:	40000c00 	.word	0x40000c00
 8003d9c:	40010400 	.word	0x40010400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	40001800 	.word	0x40001800
 8003da8:	00010007 	.word	0x00010007

08003dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d122      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d11b      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0202 	mvn.w	r2, #2
 8003dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f9da 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f9cc 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f9dd 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d122      	bne.n	8003e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d11b      	bne.n	8003e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0204 	mvn.w	r2, #4
 8003e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2202      	movs	r2, #2
 8003e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f9b0 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003e48:	e005      	b.n	8003e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f9a2 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f9b3 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d122      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d11b      	bne.n	8003eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0208 	mvn.w	r2, #8
 8003e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2204      	movs	r2, #4
 8003e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f986 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003e9c:	e005      	b.n	8003eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f978 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f989 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	2b10      	cmp	r3, #16
 8003ebc:	d122      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d11b      	bne.n	8003f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f06f 0210 	mvn.w	r2, #16
 8003ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f95c 	bl	80041a8 <HAL_TIM_IC_CaptureCallback>
 8003ef0:	e005      	b.n	8003efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f94e 	bl	8004194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f95f 	bl	80041bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d10e      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0201 	mvn.w	r2, #1
 8003f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f928 	bl	8004180 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	d10e      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b80      	cmp	r3, #128	; 0x80
 8003f4a:	d107      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fb16 	bl	8004588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6a:	d10e      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f76:	2b80      	cmp	r3, #128	; 0x80
 8003f78:	d107      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 fb09 	bl	800459c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f94:	2b40      	cmp	r3, #64	; 0x40
 8003f96:	d10e      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f90d 	bl	80041d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0220 	mvn.w	r2, #32
 8003fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fac9 	bl	8004574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_TIM_ConfigClockSource+0x1c>
 8004004:	2302      	movs	r3, #2
 8004006:	e0b4      	b.n	8004172 <HAL_TIM_ConfigClockSource+0x186>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	4b56      	ldr	r3, [pc, #344]	; (800417c <HAL_TIM_ConfigClockSource+0x190>)
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004040:	d03e      	beq.n	80040c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004046:	f200 8087 	bhi.w	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 800404a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404e:	f000 8086 	beq.w	800415e <HAL_TIM_ConfigClockSource+0x172>
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	d87f      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 8004058:	2b70      	cmp	r3, #112	; 0x70
 800405a:	d01a      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0xa6>
 800405c:	2b70      	cmp	r3, #112	; 0x70
 800405e:	d87b      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b60      	cmp	r3, #96	; 0x60
 8004062:	d050      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0x11a>
 8004064:	2b60      	cmp	r3, #96	; 0x60
 8004066:	d877      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d03c      	beq.n	80040e6 <HAL_TIM_ConfigClockSource+0xfa>
 800406c:	2b50      	cmp	r3, #80	; 0x50
 800406e:	d873      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 8004070:	2b40      	cmp	r3, #64	; 0x40
 8004072:	d058      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x13a>
 8004074:	2b40      	cmp	r3, #64	; 0x40
 8004076:	d86f      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b30      	cmp	r3, #48	; 0x30
 800407a:	d064      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x15a>
 800407c:	2b30      	cmp	r3, #48	; 0x30
 800407e:	d86b      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d060      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x15a>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d867      	bhi.n	8004158 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d05c      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x15a>
 800408c:	2b10      	cmp	r3, #16
 800408e:	d05a      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	e062      	b.n	8004158 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6899      	ldr	r1, [r3, #8]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f000 f9b9 	bl	8004418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	609a      	str	r2, [r3, #8]
      break;
 80040be:	e04f      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6818      	ldr	r0, [r3, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	6899      	ldr	r1, [r3, #8]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f000 f9a2 	bl	8004418 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040e2:	609a      	str	r2, [r3, #8]
      break;
 80040e4:	e03c      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6859      	ldr	r1, [r3, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	461a      	mov	r2, r3
 80040f4:	f000 f916 	bl	8004324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2150      	movs	r1, #80	; 0x50
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f96f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8004104:	e02c      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6859      	ldr	r1, [r3, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	461a      	mov	r2, r3
 8004114:	f000 f935 	bl	8004382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2160      	movs	r1, #96	; 0x60
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f95f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8004124:	e01c      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	461a      	mov	r2, r3
 8004134:	f000 f8f6 	bl	8004324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2140      	movs	r1, #64	; 0x40
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f94f 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8004144:	e00c      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4619      	mov	r1, r3
 8004150:	4610      	mov	r0, r2
 8004152:	f000 f946 	bl	80043e2 <TIM_ITRx_SetConfig>
      break;
 8004156:	e003      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      break;
 800415c:	e000      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800415e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	fffeff88 	.word	0xfffeff88

08004180 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a40      	ldr	r2, [pc, #256]	; (80042f8 <TIM_Base_SetConfig+0x114>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d013      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d00f      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a3d      	ldr	r2, [pc, #244]	; (80042fc <TIM_Base_SetConfig+0x118>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d00b      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3c      	ldr	r2, [pc, #240]	; (8004300 <TIM_Base_SetConfig+0x11c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3b      	ldr	r2, [pc, #236]	; (8004304 <TIM_Base_SetConfig+0x120>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3a      	ldr	r2, [pc, #232]	; (8004308 <TIM_Base_SetConfig+0x124>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d108      	bne.n	8004236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2f      	ldr	r2, [pc, #188]	; (80042f8 <TIM_Base_SetConfig+0x114>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004244:	d027      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a2c      	ldr	r2, [pc, #176]	; (80042fc <TIM_Base_SetConfig+0x118>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d023      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2b      	ldr	r2, [pc, #172]	; (8004300 <TIM_Base_SetConfig+0x11c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d01f      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2a      	ldr	r2, [pc, #168]	; (8004304 <TIM_Base_SetConfig+0x120>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a29      	ldr	r2, [pc, #164]	; (8004308 <TIM_Base_SetConfig+0x124>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d017      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a28      	ldr	r2, [pc, #160]	; (800430c <TIM_Base_SetConfig+0x128>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d013      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a27      	ldr	r2, [pc, #156]	; (8004310 <TIM_Base_SetConfig+0x12c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00f      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a26      	ldr	r2, [pc, #152]	; (8004314 <TIM_Base_SetConfig+0x130>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a25      	ldr	r2, [pc, #148]	; (8004318 <TIM_Base_SetConfig+0x134>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a24      	ldr	r2, [pc, #144]	; (800431c <TIM_Base_SetConfig+0x138>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a23      	ldr	r2, [pc, #140]	; (8004320 <TIM_Base_SetConfig+0x13c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d108      	bne.n	80042a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800429c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <TIM_Base_SetConfig+0x114>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_Base_SetConfig+0xf8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0c      	ldr	r2, [pc, #48]	; (8004308 <TIM_Base_SetConfig+0x124>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	615a      	str	r2, [r3, #20]
}
 80042ea:	bf00      	nop
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40010000 	.word	0x40010000
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40010400 	.word	0x40010400
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800
 8004318:	40001800 	.word	0x40001800
 800431c:	40001c00 	.word	0x40001c00
 8004320:	40002000 	.word	0x40002000

08004324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	f023 0201 	bic.w	r2, r3, #1
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800434e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 030a 	bic.w	r3, r3, #10
 8004360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004382:	b480      	push	{r7}
 8004384:	b087      	sub	sp, #28
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	f023 0210 	bic.w	r2, r3, #16
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	031b      	lsls	r3, r3, #12
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	f043 0307 	orr.w	r3, r3, #7
 8004404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	021a      	lsls	r2, r3, #8
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	431a      	orrs	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4313      	orrs	r3, r2
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800446c:	2302      	movs	r3, #2
 800446e:	e06d      	b.n	800454c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a30      	ldr	r2, [pc, #192]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a2f      	ldr	r2, [pc, #188]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d108      	bne.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a20      	ldr	r2, [pc, #128]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d022      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d01d      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d018      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1a      	ldr	r2, [pc, #104]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a16      	ldr	r2, [pc, #88]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d10c      	bne.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004526:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	4313      	orrs	r3, r2
 8004530:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40010000 	.word	0x40010000
 800455c:	40010400 	.word	0x40010400
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800
 8004568:	40000c00 	.word	0x40000c00
 800456c:	40014000 	.word	0x40014000
 8004570:	40001800 	.word	0x40001800

08004574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e040      	b.n	8004644 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc ffdc 	bl	8001590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2224      	movs	r2, #36	; 0x24
 80045dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fbca 	bl	8004d88 <UART_SetConfig>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d101      	bne.n	80045fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e022      	b.n	8004644 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fe22 	bl	8005250 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800461a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800462a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fea9 	bl	8005394 <UART_CheckIdleState>
 8004642:	4603      	mov	r3, r0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08a      	sub	sp, #40	; 0x28
 8004650:	af02      	add	r7, sp, #8
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	4613      	mov	r3, r2
 800465a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004660:	2b20      	cmp	r3, #32
 8004662:	f040 8081 	bne.w	8004768 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_UART_Transmit+0x26>
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e079      	b.n	800476a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_UART_Transmit+0x38>
 8004680:	2302      	movs	r3, #2
 8004682:	e072      	b.n	800476a <HAL_UART_Transmit+0x11e>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2221      	movs	r2, #33	; 0x21
 8004698:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800469a:	f7fd f979 	bl	8001990 <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b8:	d108      	bne.n	80046cc <HAL_UART_Transmit+0x80>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e003      	b.n	80046d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046dc:	e02c      	b.n	8004738 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2200      	movs	r2, #0
 80046e6:	2180      	movs	r1, #128	; 0x80
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fe9c 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e038      	b.n	800476a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10b      	bne.n	8004716 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800470c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	3302      	adds	r3, #2
 8004712:	61bb      	str	r3, [r7, #24]
 8004714:	e007      	b.n	8004726 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	781a      	ldrb	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	3301      	adds	r3, #1
 8004724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1cc      	bne.n	80046de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2200      	movs	r2, #0
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 fe69 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e005      	b.n	800476a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2220      	movs	r2, #32
 8004762:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e000      	b.n	800476a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004768:	2302      	movs	r3, #2
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3720      	adds	r7, #32
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b0ba      	sub	sp, #232	; 0xe8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800479a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800479e:	f640 030f 	movw	r3, #2063	; 0x80f
 80047a2:	4013      	ands	r3, r2
 80047a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d115      	bne.n	80047dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80047b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00f      	beq.n	80047dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 82a4 	beq.w	8004d1a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
      }
      return;
 80047da:	e29e      	b.n	8004d1a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8117 	beq.w	8004a14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80047e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80047f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80047f6:	4b85      	ldr	r3, [pc, #532]	; (8004a0c <HAL_UART_IRQHandler+0x298>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 810a 	beq.w	8004a14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d011      	beq.n	8004830 <HAL_UART_IRQHandler+0xbc>
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00b      	beq.n	8004830 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004826:	f043 0201 	orr.w	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d011      	beq.n	8004860 <HAL_UART_IRQHandler+0xec>
 800483c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00b      	beq.n	8004860 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2202      	movs	r2, #2
 800484e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004856:	f043 0204 	orr.w	r2, r3, #4
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d011      	beq.n	8004890 <HAL_UART_IRQHandler+0x11c>
 800486c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2204      	movs	r2, #4
 800487e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004886:	f043 0202 	orr.w	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004894:	f003 0308 	and.w	r3, r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	d017      	beq.n	80048cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80048a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c2:	f043 0208 	orr.w	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <HAL_UART_IRQHandler+0x18a>
 80048d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 820a 	beq.w	8004d1e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00d      	beq.n	8004932 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004938:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d005      	beq.n	8004956 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800494a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800494e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004952:	2b00      	cmp	r3, #0
 8004954:	d04f      	beq.n	80049f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fe29 	bl	80055ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d141      	bne.n	80049ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3308      	adds	r3, #8
 8004970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004996:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800499a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1d9      	bne.n	800496a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d013      	beq.n	80049e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a13      	ldr	r2, [pc, #76]	; (8004a10 <HAL_UART_IRQHandler+0x29c>)
 80049c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fe11 	bl	80025f2 <HAL_DMA_Abort_IT>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d017      	beq.n	8004a06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80049e0:	4610      	mov	r0, r2
 80049e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	e00f      	b.n	8004a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f9ae 	bl	8004d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	e00b      	b.n	8004a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f9aa 	bl	8004d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e007      	b.n	8004a06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9a6 	bl	8004d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004a04:	e18b      	b.n	8004d1e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a06:	bf00      	nop
    return;
 8004a08:	e189      	b.n	8004d1e <HAL_UART_IRQHandler+0x5aa>
 8004a0a:	bf00      	nop
 8004a0c:	04000120 	.word	0x04000120
 8004a10:	08005675 	.word	0x08005675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	f040 8144 	bne.w	8004ca6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 813d 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8136 	beq.w	8004ca6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2210      	movs	r2, #16
 8004a40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	f040 80b2 	bne.w	8004bb6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 815d 	beq.w	8004d22 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a72:	429a      	cmp	r2, r3
 8004a74:	f080 8155 	bcs.w	8004d22 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a8c:	f000 8085 	beq.w	8004b9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a9c:	e853 3f00 	ldrex	r3, [r3]
 8004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004aba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004abe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ac6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1da      	bne.n	8004a90 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3308      	adds	r3, #8
 8004afa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004afe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e1      	bne.n	8004ada <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e3      	bne.n	8004b16 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6a:	f023 0310 	bic.w	r3, r3, #16
 8004b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e4      	bne.n	8004b5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fd fcbc 	bl	8002512 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f8d4 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bb4:	e0b5      	b.n	8004d22 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80a7 	beq.w	8004d26 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004bd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80a2 	beq.w	8004d26 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bf6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c04:	647b      	str	r3, [r7, #68]	; 0x44
 8004c06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c0c:	e841 2300 	strex	r3, r2, [r1]
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1e4      	bne.n	8004be2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	623b      	str	r3, [r7, #32]
   return(result);
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c3c:	633a      	str	r2, [r7, #48]	; 0x30
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e3      	bne.n	8004c18 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	e853 3f00 	ldrex	r3, [r3]
 8004c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0310 	bic.w	r3, r3, #16
 8004c76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c84:	61fb      	str	r3, [r7, #28]
 8004c86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c88:	69b9      	ldr	r1, [r7, #24]
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	e841 2300 	strex	r3, r2, [r1]
 8004c90:	617b      	str	r3, [r7, #20]
   return(result);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1e4      	bne.n	8004c62 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f85c 	bl	8004d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ca4:	e03f      	b.n	8004d26 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x55c>
 8004cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f853 	bl	8004d74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cce:	e02d      	b.n	8004d2c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00e      	beq.n	8004cfa <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01c      	beq.n	8004d2a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
    }
    return;
 8004cf8:	e017      	b.n	8004d2a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d012      	beq.n	8004d2c <HAL_UART_IRQHandler+0x5b8>
 8004d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00c      	beq.n	8004d2c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 fcc4 	bl	80056a0 <UART_EndTransmit_IT>
    return;
 8004d18:	e008      	b.n	8004d2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d1a:	bf00      	nop
 8004d1c:	e006      	b.n	8004d2c <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d1e:	bf00      	nop
 8004d20:	e004      	b.n	8004d2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d22:	bf00      	nop
 8004d24:	e002      	b.n	8004d2c <HAL_UART_IRQHandler+0x5b8>
      return;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <HAL_UART_IRQHandler+0x5b8>
    return;
 8004d2a:	bf00      	nop
  }

}
 8004d2c:	37e8      	adds	r7, #232	; 0xe8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop

08004d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4ba6      	ldr	r3, [pc, #664]	; (800504c <UART_SetConfig+0x2c4>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	6979      	ldr	r1, [r7, #20]
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a94      	ldr	r2, [pc, #592]	; (8005050 <UART_SetConfig+0x2c8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d120      	bne.n	8004e46 <UART_SetConfig+0xbe>
 8004e04:	4b93      	ldr	r3, [pc, #588]	; (8005054 <UART_SetConfig+0x2cc>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d816      	bhi.n	8004e40 <UART_SetConfig+0xb8>
 8004e12:	a201      	add	r2, pc, #4	; (adr r2, 8004e18 <UART_SetConfig+0x90>)
 8004e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e18:	08004e29 	.word	0x08004e29
 8004e1c:	08004e35 	.word	0x08004e35
 8004e20:	08004e2f 	.word	0x08004e2f
 8004e24:	08004e3b 	.word	0x08004e3b
 8004e28:	2301      	movs	r3, #1
 8004e2a:	77fb      	strb	r3, [r7, #31]
 8004e2c:	e150      	b.n	80050d0 <UART_SetConfig+0x348>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	77fb      	strb	r3, [r7, #31]
 8004e32:	e14d      	b.n	80050d0 <UART_SetConfig+0x348>
 8004e34:	2304      	movs	r3, #4
 8004e36:	77fb      	strb	r3, [r7, #31]
 8004e38:	e14a      	b.n	80050d0 <UART_SetConfig+0x348>
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e147      	b.n	80050d0 <UART_SetConfig+0x348>
 8004e40:	2310      	movs	r3, #16
 8004e42:	77fb      	strb	r3, [r7, #31]
 8004e44:	e144      	b.n	80050d0 <UART_SetConfig+0x348>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a83      	ldr	r2, [pc, #524]	; (8005058 <UART_SetConfig+0x2d0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d132      	bne.n	8004eb6 <UART_SetConfig+0x12e>
 8004e50:	4b80      	ldr	r3, [pc, #512]	; (8005054 <UART_SetConfig+0x2cc>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d828      	bhi.n	8004eb0 <UART_SetConfig+0x128>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <UART_SetConfig+0xdc>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e99 	.word	0x08004e99
 8004e68:	08004eb1 	.word	0x08004eb1
 8004e6c:	08004eb1 	.word	0x08004eb1
 8004e70:	08004eb1 	.word	0x08004eb1
 8004e74:	08004ea5 	.word	0x08004ea5
 8004e78:	08004eb1 	.word	0x08004eb1
 8004e7c:	08004eb1 	.word	0x08004eb1
 8004e80:	08004eb1 	.word	0x08004eb1
 8004e84:	08004e9f 	.word	0x08004e9f
 8004e88:	08004eb1 	.word	0x08004eb1
 8004e8c:	08004eb1 	.word	0x08004eb1
 8004e90:	08004eb1 	.word	0x08004eb1
 8004e94:	08004eab 	.word	0x08004eab
 8004e98:	2300      	movs	r3, #0
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e118      	b.n	80050d0 <UART_SetConfig+0x348>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	e115      	b.n	80050d0 <UART_SetConfig+0x348>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e112      	b.n	80050d0 <UART_SetConfig+0x348>
 8004eaa:	2308      	movs	r3, #8
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e10f      	b.n	80050d0 <UART_SetConfig+0x348>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e10c      	b.n	80050d0 <UART_SetConfig+0x348>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a68      	ldr	r2, [pc, #416]	; (800505c <UART_SetConfig+0x2d4>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d120      	bne.n	8004f02 <UART_SetConfig+0x17a>
 8004ec0:	4b64      	ldr	r3, [pc, #400]	; (8005054 <UART_SetConfig+0x2cc>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004eca:	2b30      	cmp	r3, #48	; 0x30
 8004ecc:	d013      	beq.n	8004ef6 <UART_SetConfig+0x16e>
 8004ece:	2b30      	cmp	r3, #48	; 0x30
 8004ed0:	d814      	bhi.n	8004efc <UART_SetConfig+0x174>
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d009      	beq.n	8004eea <UART_SetConfig+0x162>
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d810      	bhi.n	8004efc <UART_SetConfig+0x174>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <UART_SetConfig+0x15c>
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d006      	beq.n	8004ef0 <UART_SetConfig+0x168>
 8004ee2:	e00b      	b.n	8004efc <UART_SetConfig+0x174>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e0f2      	b.n	80050d0 <UART_SetConfig+0x348>
 8004eea:	2302      	movs	r3, #2
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e0ef      	b.n	80050d0 <UART_SetConfig+0x348>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	77fb      	strb	r3, [r7, #31]
 8004ef4:	e0ec      	b.n	80050d0 <UART_SetConfig+0x348>
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	77fb      	strb	r3, [r7, #31]
 8004efa:	e0e9      	b.n	80050d0 <UART_SetConfig+0x348>
 8004efc:	2310      	movs	r3, #16
 8004efe:	77fb      	strb	r3, [r7, #31]
 8004f00:	e0e6      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a56      	ldr	r2, [pc, #344]	; (8005060 <UART_SetConfig+0x2d8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d120      	bne.n	8004f4e <UART_SetConfig+0x1c6>
 8004f0c:	4b51      	ldr	r3, [pc, #324]	; (8005054 <UART_SetConfig+0x2cc>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f16:	2bc0      	cmp	r3, #192	; 0xc0
 8004f18:	d013      	beq.n	8004f42 <UART_SetConfig+0x1ba>
 8004f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f1c:	d814      	bhi.n	8004f48 <UART_SetConfig+0x1c0>
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d009      	beq.n	8004f36 <UART_SetConfig+0x1ae>
 8004f22:	2b80      	cmp	r3, #128	; 0x80
 8004f24:	d810      	bhi.n	8004f48 <UART_SetConfig+0x1c0>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <UART_SetConfig+0x1a8>
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	d006      	beq.n	8004f3c <UART_SetConfig+0x1b4>
 8004f2e:	e00b      	b.n	8004f48 <UART_SetConfig+0x1c0>
 8004f30:	2300      	movs	r3, #0
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e0cc      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f36:	2302      	movs	r3, #2
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e0c9      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e0c6      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f42:	2308      	movs	r3, #8
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e0c3      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f48:	2310      	movs	r3, #16
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e0c0      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a44      	ldr	r2, [pc, #272]	; (8005064 <UART_SetConfig+0x2dc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d125      	bne.n	8004fa4 <UART_SetConfig+0x21c>
 8004f58:	4b3e      	ldr	r3, [pc, #248]	; (8005054 <UART_SetConfig+0x2cc>)
 8004f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f66:	d017      	beq.n	8004f98 <UART_SetConfig+0x210>
 8004f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6c:	d817      	bhi.n	8004f9e <UART_SetConfig+0x216>
 8004f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f72:	d00b      	beq.n	8004f8c <UART_SetConfig+0x204>
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f78:	d811      	bhi.n	8004f9e <UART_SetConfig+0x216>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <UART_SetConfig+0x1fe>
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f82:	d006      	beq.n	8004f92 <UART_SetConfig+0x20a>
 8004f84:	e00b      	b.n	8004f9e <UART_SetConfig+0x216>
 8004f86:	2300      	movs	r3, #0
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e0a1      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e09e      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f92:	2304      	movs	r3, #4
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e09b      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e098      	b.n	80050d0 <UART_SetConfig+0x348>
 8004f9e:	2310      	movs	r3, #16
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e095      	b.n	80050d0 <UART_SetConfig+0x348>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <UART_SetConfig+0x2e0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d125      	bne.n	8004ffa <UART_SetConfig+0x272>
 8004fae:	4b29      	ldr	r3, [pc, #164]	; (8005054 <UART_SetConfig+0x2cc>)
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fbc:	d017      	beq.n	8004fee <UART_SetConfig+0x266>
 8004fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc2:	d817      	bhi.n	8004ff4 <UART_SetConfig+0x26c>
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc8:	d00b      	beq.n	8004fe2 <UART_SetConfig+0x25a>
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d811      	bhi.n	8004ff4 <UART_SetConfig+0x26c>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <UART_SetConfig+0x254>
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd8:	d006      	beq.n	8004fe8 <UART_SetConfig+0x260>
 8004fda:	e00b      	b.n	8004ff4 <UART_SetConfig+0x26c>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	77fb      	strb	r3, [r7, #31]
 8004fe0:	e076      	b.n	80050d0 <UART_SetConfig+0x348>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e073      	b.n	80050d0 <UART_SetConfig+0x348>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e070      	b.n	80050d0 <UART_SetConfig+0x348>
 8004fee:	2308      	movs	r3, #8
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e06d      	b.n	80050d0 <UART_SetConfig+0x348>
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e06a      	b.n	80050d0 <UART_SetConfig+0x348>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a1b      	ldr	r2, [pc, #108]	; (800506c <UART_SetConfig+0x2e4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d138      	bne.n	8005076 <UART_SetConfig+0x2ee>
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <UART_SetConfig+0x2cc>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800500e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005012:	d017      	beq.n	8005044 <UART_SetConfig+0x2bc>
 8005014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005018:	d82a      	bhi.n	8005070 <UART_SetConfig+0x2e8>
 800501a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501e:	d00b      	beq.n	8005038 <UART_SetConfig+0x2b0>
 8005020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005024:	d824      	bhi.n	8005070 <UART_SetConfig+0x2e8>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <UART_SetConfig+0x2aa>
 800502a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800502e:	d006      	beq.n	800503e <UART_SetConfig+0x2b6>
 8005030:	e01e      	b.n	8005070 <UART_SetConfig+0x2e8>
 8005032:	2300      	movs	r3, #0
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e04b      	b.n	80050d0 <UART_SetConfig+0x348>
 8005038:	2302      	movs	r3, #2
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e048      	b.n	80050d0 <UART_SetConfig+0x348>
 800503e:	2304      	movs	r3, #4
 8005040:	77fb      	strb	r3, [r7, #31]
 8005042:	e045      	b.n	80050d0 <UART_SetConfig+0x348>
 8005044:	2308      	movs	r3, #8
 8005046:	77fb      	strb	r3, [r7, #31]
 8005048:	e042      	b.n	80050d0 <UART_SetConfig+0x348>
 800504a:	bf00      	nop
 800504c:	efff69f3 	.word	0xefff69f3
 8005050:	40011000 	.word	0x40011000
 8005054:	40023800 	.word	0x40023800
 8005058:	40004400 	.word	0x40004400
 800505c:	40004800 	.word	0x40004800
 8005060:	40004c00 	.word	0x40004c00
 8005064:	40005000 	.word	0x40005000
 8005068:	40011400 	.word	0x40011400
 800506c:	40007800 	.word	0x40007800
 8005070:	2310      	movs	r3, #16
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e02c      	b.n	80050d0 <UART_SetConfig+0x348>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a72      	ldr	r2, [pc, #456]	; (8005244 <UART_SetConfig+0x4bc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d125      	bne.n	80050cc <UART_SetConfig+0x344>
 8005080:	4b71      	ldr	r3, [pc, #452]	; (8005248 <UART_SetConfig+0x4c0>)
 8005082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005086:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800508a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800508e:	d017      	beq.n	80050c0 <UART_SetConfig+0x338>
 8005090:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005094:	d817      	bhi.n	80050c6 <UART_SetConfig+0x33e>
 8005096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800509a:	d00b      	beq.n	80050b4 <UART_SetConfig+0x32c>
 800509c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a0:	d811      	bhi.n	80050c6 <UART_SetConfig+0x33e>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <UART_SetConfig+0x326>
 80050a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050aa:	d006      	beq.n	80050ba <UART_SetConfig+0x332>
 80050ac:	e00b      	b.n	80050c6 <UART_SetConfig+0x33e>
 80050ae:	2300      	movs	r3, #0
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e00d      	b.n	80050d0 <UART_SetConfig+0x348>
 80050b4:	2302      	movs	r3, #2
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e00a      	b.n	80050d0 <UART_SetConfig+0x348>
 80050ba:	2304      	movs	r3, #4
 80050bc:	77fb      	strb	r3, [r7, #31]
 80050be:	e007      	b.n	80050d0 <UART_SetConfig+0x348>
 80050c0:	2308      	movs	r3, #8
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e004      	b.n	80050d0 <UART_SetConfig+0x348>
 80050c6:	2310      	movs	r3, #16
 80050c8:	77fb      	strb	r3, [r7, #31]
 80050ca:	e001      	b.n	80050d0 <UART_SetConfig+0x348>
 80050cc:	2310      	movs	r3, #16
 80050ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d8:	d15b      	bne.n	8005192 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80050da:	7ffb      	ldrb	r3, [r7, #31]
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d828      	bhi.n	8005132 <UART_SetConfig+0x3aa>
 80050e0:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <UART_SetConfig+0x360>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	08005115 	.word	0x08005115
 80050f0:	0800511d 	.word	0x0800511d
 80050f4:	08005133 	.word	0x08005133
 80050f8:	08005123 	.word	0x08005123
 80050fc:	08005133 	.word	0x08005133
 8005100:	08005133 	.word	0x08005133
 8005104:	08005133 	.word	0x08005133
 8005108:	0800512b 	.word	0x0800512b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800510c:	f7fe f92e 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 8005110:	61b8      	str	r0, [r7, #24]
        break;
 8005112:	e013      	b.n	800513c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005114:	f7fe f93e 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 8005118:	61b8      	str	r0, [r7, #24]
        break;
 800511a:	e00f      	b.n	800513c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800511c:	4b4b      	ldr	r3, [pc, #300]	; (800524c <UART_SetConfig+0x4c4>)
 800511e:	61bb      	str	r3, [r7, #24]
        break;
 8005120:	e00c      	b.n	800513c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005122:	f7fe f851 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8005126:	61b8      	str	r0, [r7, #24]
        break;
 8005128:	e008      	b.n	800513c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512e:	61bb      	str	r3, [r7, #24]
        break;
 8005130:	e004      	b.n	800513c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	77bb      	strb	r3, [r7, #30]
        break;
 800513a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d074      	beq.n	800522c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	005a      	lsls	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	441a      	add	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	fbb2 f3f3 	udiv	r3, r2, r3
 8005156:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b0f      	cmp	r3, #15
 800515c:	d916      	bls.n	800518c <UART_SetConfig+0x404>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005164:	d212      	bcs.n	800518c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	b29b      	uxth	r3, r3
 800516a:	f023 030f 	bic.w	r3, r3, #15
 800516e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	085b      	lsrs	r3, r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	b29a      	uxth	r2, r3
 800517c:	89fb      	ldrh	r3, [r7, #14]
 800517e:	4313      	orrs	r3, r2
 8005180:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	89fa      	ldrh	r2, [r7, #14]
 8005188:	60da      	str	r2, [r3, #12]
 800518a:	e04f      	b.n	800522c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	77bb      	strb	r3, [r7, #30]
 8005190:	e04c      	b.n	800522c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005192:	7ffb      	ldrb	r3, [r7, #31]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d828      	bhi.n	80051ea <UART_SetConfig+0x462>
 8005198:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <UART_SetConfig+0x418>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051c5 	.word	0x080051c5
 80051a4:	080051cd 	.word	0x080051cd
 80051a8:	080051d5 	.word	0x080051d5
 80051ac:	080051eb 	.word	0x080051eb
 80051b0:	080051db 	.word	0x080051db
 80051b4:	080051eb 	.word	0x080051eb
 80051b8:	080051eb 	.word	0x080051eb
 80051bc:	080051eb 	.word	0x080051eb
 80051c0:	080051e3 	.word	0x080051e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051c4:	f7fe f8d2 	bl	800336c <HAL_RCC_GetPCLK1Freq>
 80051c8:	61b8      	str	r0, [r7, #24]
        break;
 80051ca:	e013      	b.n	80051f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051cc:	f7fe f8e2 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 80051d0:	61b8      	str	r0, [r7, #24]
        break;
 80051d2:	e00f      	b.n	80051f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051d4:	4b1d      	ldr	r3, [pc, #116]	; (800524c <UART_SetConfig+0x4c4>)
 80051d6:	61bb      	str	r3, [r7, #24]
        break;
 80051d8:	e00c      	b.n	80051f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051da:	f7fd fff5 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 80051de:	61b8      	str	r0, [r7, #24]
        break;
 80051e0:	e008      	b.n	80051f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051e6:	61bb      	str	r3, [r7, #24]
        break;
 80051e8:	e004      	b.n	80051f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	77bb      	strb	r3, [r7, #30]
        break;
 80051f2:	bf00      	nop
    }

    if (pclk != 0U)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d018      	beq.n	800522c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	085a      	lsrs	r2, r3, #1
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	441a      	add	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b0f      	cmp	r3, #15
 8005212:	d909      	bls.n	8005228 <UART_SetConfig+0x4a0>
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521a:	d205      	bcs.n	8005228 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	b29a      	uxth	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	e001      	b.n	800522c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005238:	7fbb      	ldrb	r3, [r7, #30]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40007c00 	.word	0x40007c00
 8005248:	40023800 	.word	0x40023800
 800524c:	00f42400 	.word	0x00f42400

08005250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01a      	beq.n	8005366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534e:	d10a      	bne.n	8005366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	605a      	str	r2, [r3, #4]
  }
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053a4:	f7fc faf4 	bl	8001990 <HAL_GetTick>
 80053a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d10e      	bne.n	80053d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f82d 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e023      	b.n	800541e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d10e      	bne.n	8005402 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f817 	bl	8005426 <UART_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e00d      	b.n	800541e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b09c      	sub	sp, #112	; 0x70
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	603b      	str	r3, [r7, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005436:	e0a5      	b.n	8005584 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543e:	f000 80a1 	beq.w	8005584 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005442:	f7fc faa5 	bl	8001990 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800544e:	429a      	cmp	r2, r3
 8005450:	d302      	bcc.n	8005458 <UART_WaitOnFlagUntilTimeout+0x32>
 8005452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005454:	2b00      	cmp	r3, #0
 8005456:	d13e      	bne.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800546c:	667b      	str	r3, [r7, #100]	; 0x64
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005478:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800547c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e6      	bne.n	8005458 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	663b      	str	r3, [r7, #96]	; 0x60
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3308      	adds	r3, #8
 80054a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e5      	bne.n	800548a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e067      	b.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d04f      	beq.n	8005584 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f2:	d147      	bne.n	8005584 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	e853 3f00 	ldrex	r3, [r3]
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	461a      	mov	r2, r3
 800551a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
 800551e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005522:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e6      	bne.n	80054fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	613b      	str	r3, [r7, #16]
   return(result);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	66bb      	str	r3, [r7, #104]	; 0x68
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3308      	adds	r3, #8
 800554e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005550:	623a      	str	r2, [r7, #32]
 8005552:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	69f9      	ldr	r1, [r7, #28]
 8005556:	6a3a      	ldr	r2, [r7, #32]
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	61bb      	str	r3, [r7, #24]
   return(result);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e5      	bne.n	8005530 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2220      	movs	r2, #32
 8005568:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2220      	movs	r2, #32
 800556e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e010      	b.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69da      	ldr	r2, [r3, #28]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4013      	ands	r3, r2
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	429a      	cmp	r2, r3
 8005592:	bf0c      	ite	eq
 8005594:	2301      	moveq	r3, #1
 8005596:	2300      	movne	r3, #0
 8005598:	b2db      	uxtb	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	429a      	cmp	r2, r3
 80055a0:	f43f af4a 	beq.w	8005438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3770      	adds	r7, #112	; 0x70
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b095      	sub	sp, #84	; 0x54
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d4:	643b      	str	r3, [r7, #64]	; 0x40
 80055d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3308      	adds	r3, #8
 80055ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3308      	adds	r3, #8
 8005606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800560a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800560e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005620:	2b01      	cmp	r3, #1
 8005622:	d118      	bne.n	8005656 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	60bb      	str	r3, [r7, #8]
   return(result);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f023 0310 	bic.w	r3, r3, #16
 8005638:	647b      	str	r3, [r7, #68]	; 0x44
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	461a      	mov	r2, r3
 8005640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6979      	ldr	r1, [r7, #20]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	613b      	str	r3, [r7, #16]
   return(result);
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e6      	bne.n	8005624 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005668:	bf00      	nop
 800566a:	3754      	adds	r7, #84	; 0x54
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fb58 	bl	8004d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	61bb      	str	r3, [r7, #24]
 80056c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6979      	ldr	r1, [r7, #20]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	613b      	str	r3, [r7, #16]
   return(result);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e6      	bne.n	80056a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff fb24 	bl	8004d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ec:	bf00      	nop
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <DriverInit>:
 *	@param	*Driver - main hardware driver object
 *	@param	__UART_STRUCT - (aka *uart) user defined UART object
 *	@param	__TIMER_STRUCT - (aka *tim) user defined timer object
 */
void DriverInit (void *Driver, __UART_STRUCT, __TIMER_STRUCT)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	617b      	str	r3, [r7, #20]

	drv->tim = tim;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	605a      	str	r2, [r3, #4]
	drv->timCount = 0;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]


	drv->uart = uart;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	ClearTxBuff(drv);
 8005718:	6978      	ldr	r0, [r7, #20]
 800571a:	f000 f8ec 	bl	80058f6 <ClearTxBuff>
	ClearRxBuff(drv);
 800571e:	6978      	ldr	r0, [r7, #20]
 8005720:	f000 f9b8 	bl	8005a94 <ClearRxBuff>

	DISABLE_UART_CR1_TCIE(drv->uart);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800573a:	601a      	str	r2, [r3, #0]
	ENABLE_UART_CR1_RXNEIE(drv->uart);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0220 	orr.w	r2, r2, #32
 8005752:	601a      	str	r2, [r3, #0]
	DISABLE_UART_CR1_IDLEIE(drv->uart);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0210 	bic.w	r2, r2, #16
 800576a:	601a      	str	r2, [r3, #0]


	START_TIMER(drv->tim);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe faa3 	bl	8003cbc <HAL_TIM_Base_Start_IT>
}
 8005776:	bf00      	nop
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <GetTimeMs>:
 *	@param	*Driver - main hardware driver object
 *
 *	@return	Current time
 */
ui32 GetTimeMs (void *Driver)
{
 800577e:	b480      	push	{r7}
 8005780:	b085      	sub	sp, #20
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60fb      	str	r3, [r7, #12]

	return drv->timCount;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <TimerDRV_CallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void TimerDRV_CallBack (void *Driver)
{
 800579a:	b480      	push	{r7}
 800579c:	b085      	sub	sp, #20
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	601a      	str	r2, [r3, #0]

	#ifndef HAL_TIM_MODULE_ENABLED
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx overflow status (1 - ERROR | 0 - OK)
 */
ui8 UartTransmitData (void *Driver, ui8 *data, ui16 size)
{
 80057bc:	b480      	push	{r7}
 80057be:	b089      	sub	sp, #36	; 0x24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
	Driver_t *drv = (Driver_t*)Driver;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	61bb      	str	r3, [r7, #24]

	/* Free space check */
	ui16 txHead = drv->TxHead;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80057d4:	83fb      	strh	r3, [r7, #30]
	ui16 txTail = drv->TxTail;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80057dc:	82fb      	strh	r3, [r7, #22]

	ui16 count = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	83bb      	strh	r3, [r7, #28]
	while (txHead != txTail)
 80057e2:	e00b      	b.n	80057fc <UartTransmitData+0x40>
	{
		if (!txHead)
 80057e4:	8bfb      	ldrh	r3, [r7, #30]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d102      	bne.n	80057f0 <UartTransmitData+0x34>
			txHead = TX_BUFFER_SIZE;
 80057ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057ee:	83fb      	strh	r3, [r7, #30]

		txHead--;
 80057f0:	8bfb      	ldrh	r3, [r7, #30]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	83fb      	strh	r3, [r7, #30]
		count++;
 80057f6:	8bbb      	ldrh	r3, [r7, #28]
 80057f8:	3301      	adds	r3, #1
 80057fa:	83bb      	strh	r3, [r7, #28]
	while (txHead != txTail)
 80057fc:	8bfa      	ldrh	r2, [r7, #30]
 80057fe:	8afb      	ldrh	r3, [r7, #22]
 8005800:	429a      	cmp	r2, r3
 8005802:	d1ef      	bne.n	80057e4 <UartTransmitData+0x28>
	}

	if (TX_BUFFER_SIZE - count < size)
 8005804:	8bbb      	ldrh	r3, [r7, #28]
 8005806:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	429a      	cmp	r2, r3
 800580e:	da01      	bge.n	8005814 <UartTransmitData+0x58>
	{
		/* - - - - User TxBuffer Overflow Handler - - - - -*/

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
		return 1;
 8005810:	2301      	movs	r3, #1
 8005812:	e02f      	b.n	8005874 <UartTransmitData+0xb8>
	}

	count = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	83bb      	strh	r3, [r7, #28]
	while (count < size)
 8005818:	e01b      	b.n	8005852 <UartTransmitData+0x96>
	{
		drv->TxBuffer[drv->TxHead++] = data[count++];
 800581a:	8bbb      	ldrh	r3, [r7, #28]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	83ba      	strh	r2, [r7, #28]
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	441a      	add	r2, r3
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800582c:	1c59      	adds	r1, r3, #1
 800582e:	b288      	uxth	r0, r1
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	f8a1 010a 	strh.w	r0, [r1, #266]	; 0x10a
 8005836:	4619      	mov	r1, r3
 8005838:	7812      	ldrb	r2, [r2, #0]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	440b      	add	r3, r1
 800583e:	721a      	strb	r2, [r3, #8]

		if (drv->TxHead >= TX_BUFFER_SIZE)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8005846:	2bff      	cmp	r3, #255	; 0xff
 8005848:	d903      	bls.n	8005852 <UartTransmitData+0x96>
			drv->TxHead = 0;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	2200      	movs	r2, #0
 800584e:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	while (count < size)
 8005852:	8bba      	ldrh	r2, [r7, #28]
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	429a      	cmp	r2, r3
 8005858:	d3df      	bcc.n	800581a <UartTransmitData+0x5e>
	}

	ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005870:	601a      	str	r2, [r3, #0]

	return 0;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3724      	adds	r7, #36	; 0x24
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <UART_DRV_TxCallBack>:
/**	@brief	UART transfer completion interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void UART_DRV_TxCallBack (void *Driver)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60fb      	str	r3, [r7, #12]

	WRITE_UART_BYTE(drv->uart, drv->TxBuffer[drv->TxTail++] & (ui32)0xFF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	b291      	uxth	r1, r2
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f8a2 1108 	strh.w	r1, [r2, #264]	; 0x108
 800589c:	461a      	mov	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	7a1a      	ldrb	r2, [r3, #8]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28

	if (drv->TxTail == TX_BUFFER_SIZE)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80058b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b8:	d103      	bne.n	80058c2 <UART_DRV_TxCallBack+0x42>
		drv->TxTail = 0;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108

	if (drv->TxTail == drv->TxHead)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d10b      	bne.n	80058ea <UART_DRV_TxCallBack+0x6a>
	{
		DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]

		/*  - - - - User Complete Transmit Handler - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
	}
}
 80058ea:	bf00      	nop
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*Driver - main hardware driver object
 */
void ClearTxBuff (void *Driver)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60fb      	str	r3, [r7, #12]

	memset(drv->TxBuffer, 0, TX_BUFFER_SIZE);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3308      	adds	r3, #8
 8005906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590a:	2100      	movs	r1, #0
 800590c:	4618      	mov	r0, r3
 800590e:	f001 fb19 	bl	8006f44 <memset>
	drv->TxTail = 0;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	drv->TxHead = 0;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
}
 8005922:	bf00      	nop
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <GetAvailableBytes>:
 *	@param	*Driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 GetAvailableBytes (void *Driver)
{
 800592a:	b480      	push	{r7}
 800592c:	b087      	sub	sp, #28
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	613b      	str	r3, [r7, #16]

	if (drv->RxOverflowFlag)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <GetAvailableBytes+0x1c>
		return 0xFFFF;
 8005940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005944:	e01b      	b.n	800597e <GetAvailableBytes+0x54>

	ui16 rxHead = drv->RxHead;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800594c:	82fb      	strh	r3, [r7, #22]
	ui16 rxTail = drv->RxTail;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8005954:	81fb      	strh	r3, [r7, #14]

	ui16 count = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	82bb      	strh	r3, [r7, #20]
	while (rxHead != rxTail)
 800595a:	e00b      	b.n	8005974 <GetAvailableBytes+0x4a>
	{
		if (!rxHead)
 800595c:	8afb      	ldrh	r3, [r7, #22]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <GetAvailableBytes+0x3e>
			rxHead = RX_BUFFER_SIZE;
 8005962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005966:	82fb      	strh	r3, [r7, #22]

		rxHead--;
 8005968:	8afb      	ldrh	r3, [r7, #22]
 800596a:	3b01      	subs	r3, #1
 800596c:	82fb      	strh	r3, [r7, #22]
		count++;
 800596e:	8abb      	ldrh	r3, [r7, #20]
 8005970:	3301      	adds	r3, #1
 8005972:	82bb      	strh	r3, [r7, #20]
	while (rxHead != rxTail)
 8005974:	8afa      	ldrh	r2, [r7, #22]
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	429a      	cmp	r2, r3
 800597a:	d1ef      	bne.n	800595c <GetAvailableBytes+0x32>
	}

	return count;
 800597c:	8abb      	ldrh	r3, [r7, #20]
}
 800597e:	4618      	mov	r0, r3
 8005980:	371c      	adds	r7, #28
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Receipt status (0 - receiving in progress | 1 - receive completed)
 */
ui8 UartReceiveByte (void *Driver, ui8 *data)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
	Driver_t *drv = (Driver_t*)Driver;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]

	if (drv->RxTail == drv->RxHead)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8b3 220c 	ldrh.w	r2, [r3, #524]	; 0x20c
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d101      	bne.n	80059ac <UartReceiveByte+0x22>
	{
		/* - - - - User Complete Receive Handler - - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
		return 1;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e021      	b.n	80059f0 <UartReceiveByte+0x66>
	}

	*data = drv->RxBuffer[drv->RxTail++];
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	b291      	uxth	r1, r2
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	f8a2 120c 	strh.w	r1, [r2, #524]	; 0x20c
 80059bc:	461a      	mov	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	701a      	strb	r2, [r3, #0]

	if (drv->RxTail >= RX_BUFFER_SIZE)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80059d0:	2bff      	cmp	r3, #255	; 0xff
 80059d2:	d903      	bls.n	80059dc <UartReceiveByte+0x52>
	   drv->RxTail = 0;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c

	if (drv->RxOverflowFlag == 1)  // Reset the overflow flag
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d103      	bne.n	80059ee <UartReceiveByte+0x64>
		drv->RxOverflowFlag = 0;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

	return 0;	// Rx ring buffer isn't empty
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <UART_DRV_RxCallBack>:
/**	@brief	UART receive completion interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void UART_DRV_RxCallBack (void *Driver)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	60fb      	str	r3, [r7, #12]

	if ((drv->RxHead - drv->RxTail == RX_BUFFER_SIZE - 1) ||
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005a0e:	461a      	mov	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2bff      	cmp	r3, #255	; 0xff
 8005a1a:	d009      	beq.n	8005a30 <UART_DRV_RxCallBack+0x34>
		(drv->RxTail - drv->RxHead == 1))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8005a22:	461a      	mov	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005a2a:	1ad3      	subs	r3, r2, r3
	if ((drv->RxHead - drv->RxTail == RX_BUFFER_SIZE - 1) ||
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10e      	bne.n	8005a4e <UART_DRV_RxCallBack+0x52>
	{
		/*  - - - - User RxBuffer Overflow Handler - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */

		(void)READ_UART_BYTE(drv->uart);  // Prevents overflow error (USART_ISR_ORE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		if (drv->RxOverflowFlag == 0)  // Set the overflow flag
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d121      	bne.n	8005a88 <UART_DRV_RxCallBack+0x8c>
			drv->RxOverflowFlag = 1;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

		return;
 8005a4c:	e01c      	b.n	8005a88 <UART_DRV_RxCallBack+0x8c>
	}

	drv->RxBuffer[drv->RxHead++] = READ_UART_BYTE(drv->uart);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	b291      	uxth	r1, r2
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8005a68:	4619      	mov	r1, r3
 8005a6a:	b2c2      	uxtb	r2, r0
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	440b      	add	r3, r1
 8005a70:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

	if (drv->RxHead >= RX_BUFFER_SIZE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005a7a:	2bff      	cmp	r3, #255	; 0xff
 8005a7c:	d905      	bls.n	8005a8a <UART_DRV_RxCallBack+0x8e>
		drv->RxHead = 0;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 8005a86:	e000      	b.n	8005a8a <UART_DRV_RxCallBack+0x8e>
		return;
 8005a88:	bf00      	nop
}
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*Driver - main hardware driver object
 */
void ClearRxBuff (void *Driver)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60fb      	str	r3, [r7, #12]

	memset(drv->RxBuffer, 0, RX_BUFFER_SIZE);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fa49 	bl	8006f44 <memset>
	drv->RxTail = 0;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	drv->RxHead = 0;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	drv->RxOverflowFlag = 0;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <UartTransmitDebugData>:
	 *
	 *	@param	*data - debug data
	 *	@param	length - size of debug data
	 */
	void UartTransmitDebugData (char *data, ui16 length)
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	807b      	strh	r3, [r7, #2]
		HAL_UART_Transmit(DEBUG_SERIAL_PORT, (ui8*)data, length, 100);
 8005ae0:	887a      	ldrh	r2, [r7, #2]
 8005ae2:	2364      	movs	r3, #100	; 0x64
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4803      	ldr	r0, [pc, #12]	; (8005af4 <UartTransmitDebugData+0x20>)
 8005ae8:	f7fe fdb0 	bl	800464c <HAL_UART_Transmit>
	}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	200003cc 	.word	0x200003cc

08005af8 <SBGC32_TX>:
 *  		to be transmitted
 *
 *  @return	Transmission status
 */
TxRxStatus_t SBGC32_TX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
{
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b0c5      	sub	sp, #276	; 0x114
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b06:	6018      	str	r0, [r3, #0]
 8005b08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b0c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b10:	6019      	str	r1, [r3, #0]
	ui8 buff [MAX_BUFF_SIZE];
	ui32 currentTime;

    buff[0] = generalSBGC->protocolVersion;
 8005b12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	7e1a      	ldrb	r2, [r3, #24]
 8005b1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b26:	701a      	strb	r2, [r3, #0]
    buff[1] = serialCommand->commandID;
 8005b28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b2c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	781a      	ldrb	r2, [r3, #0]
 8005b34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	705a      	strb	r2, [r3, #1]
    buff[2] = serialCommand->payloadSize;
 8005b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b42:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8005b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b54:	709a      	strb	r2, [r3, #2]
    buff[3] = buff[1] + buff[2];
 8005b56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b5e:	785a      	ldrb	r2, [r3, #1]
 8005b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b68:	789b      	ldrb	r3, [r3, #2]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b76:	70da      	strb	r2, [r3, #3]

    memcpy(&buff[4], serialCommand->payload, serialCommand->payloadSize);
 8005b78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	1c59      	adds	r1, r3, #1
 8005b84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005b92:	461a      	mov	r2, r3
 8005b94:	f107 0308 	add.w	r3, r7, #8
 8005b98:	3304      	adds	r3, #4
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 f9c4 	bl	8006f28 <memcpy>

    /* ui8 size = real size current serialCommand */
    ui8 size = serialCommand->payloadSize + 4 + (generalSBGC->protocolVersion == PR2_START_CHARACTER ? 2 : 1);
 8005ba0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ba4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005bae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005bb2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	7e12      	ldrb	r2, [r2, #24]
 8005bba:	2a24      	cmp	r2, #36	; 0x24
 8005bbc:	d101      	bne.n	8005bc2 <SBGC32_TX+0xca>
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	e000      	b.n	8005bc4 <SBGC32_TX+0xcc>
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	4413      	add	r3, r2
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	3304      	adds	r3, #4
 8005bca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

    if (generalSBGC->protocolVersion == PR1_START_CHARACTER)
 8005bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	7e1b      	ldrb	r3, [r3, #24]
 8005bda:	2b3e      	cmp	r3, #62	; 0x3e
 8005bdc:	d120      	bne.n	8005c20 <SBGC32_TX+0x128>
    	buff[4 + serialCommand->payloadSize] = Modulo256_Calculate(serialCommand->payload, serialCommand->payloadSize);
 8005bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005be2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	1c5a      	adds	r2, r3, #1
 8005bea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bee:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005bf8:	b299      	uxth	r1, r3
 8005bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bfe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c08:	1d1c      	adds	r4, r3, #4
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f000 fee2 	bl	80069d4 <Modulo256_Calculate>
 8005c10:	4603      	mov	r3, r0
 8005c12:	461a      	mov	r2, r3
 8005c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1c:	551a      	strb	r2, [r3, r4]
 8005c1e:	e035      	b.n	8005c8c <SBGC32_TX+0x194>

    else
    {
    	ui16 CRC16_Res = CRC16_Calculate(&buff[1], (4 + serialCommand->payloadSize - 1));
 8005c20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3303      	adds	r3, #3
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	f107 0308 	add.w	r3, r7, #8
 8005c38:	3301      	adds	r3, #1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fef0 	bl	8006a22 <CRC16_Calculate>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    	buff[4 + serialCommand->payloadSize] = CRC16_Res & 0x00FF;
 8005c48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c56:	3304      	adds	r3, #4
 8005c58:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8005c5c:	b2d1      	uxtb	r1, r2
 8005c5e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005c62:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005c66:	54d1      	strb	r1, [r2, r3]
    	buff[5 + serialCommand->payloadSize] = (CRC16_Res >> 8) & 0x00FF;
 8005c68:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005c6c:	0a1b      	lsrs	r3, r3, #8
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c7e:	3305      	adds	r3, #5
 8005c80:	b2d1      	uxtb	r1, r2
 8005c82:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005c86:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005c8a:	54d1      	strb	r1, [r2, r3]
    }

    currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005c8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005c9c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	4610      	mov	r0, r2
 8005ca6:	4798      	blx	r3
 8005ca8:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8005cac:	e029      	b.n	8005d02 <SBGC32_TX+0x20a>
    {
    	if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txTimeout)
 8005cae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005cbe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4798      	blx	r3
 8005cca:	4602      	mov	r2, r0
 8005ccc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d30f      	bcc.n	8005d02 <SBGC32_TX+0x20a>
    	{
    		generalSBGC->_txErrorsCount++;
 8005ce2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ce6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cee:	3301      	adds	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cf6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	851a      	strh	r2, [r3, #40]	; 0x28
    		return TX_BUFFER_OVERFLOW_ERROR;  // aka timeout error
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e015      	b.n	8005d2e <SBGC32_TX+0x236>
    while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8005d02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005d12:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	6810      	ldr	r0, [r2, #0]
 8005d1a:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	f107 0108 	add.w	r1, r7, #8
 8005d24:	4798      	blx	r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1c0      	bne.n	8005cae <SBGC32_TX+0x1b6>
    	}
    }

	return TX_RX_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd90      	pop	{r4, r7, pc}

08005d38 <SBGC32_RX>:
 *   		time for receiving one whole SerialCommand
 *
 *  @return	TX_RX_OK or last state of lastParserError variable
 */
TxRxStatus_t SBGC32_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, ui32 timeout)
{
 8005d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d3c:	b08e      	sub	sp, #56	; 0x38
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
	ui8 startSim;
	ui8 headBuff [3];  /* Header buffer:
	headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */
	ui16 availableBytes;

	TxRxStatus_t lastParserError = RX_START_PARSE;
 8005d46:	2302      	movs	r3, #2
 8005d48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	ParserStates_t parserState = STATE_IDLE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Launching timer */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	6812      	ldr	r2, [r2, #0]
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	4798      	blx	r3
 8005d5e:	62b8      	str	r0, [r7, #40]	; 0x28

	serialCommand->readPos = 0;  // Prepare for reading
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

	while (1)
	{
		switch (parserState)
 8005d68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d063      	beq.n	8005e38 <SBGC32_RX+0x100>
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	f300 8122 	bgt.w	8005fba <SBGC32_RX+0x282>
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	dc02      	bgt.n	8005d80 <SBGC32_RX+0x48>
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	da03      	bge.n	8005d86 <SBGC32_RX+0x4e>
 8005d7e:	e11c      	b.n	8005fba <SBGC32_RX+0x282>
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d01f      	beq.n	8005dc4 <SBGC32_RX+0x8c>
 8005d84:	e119      	b.n	8005fba <SBGC32_RX+0x282>
		{
			/* Waiting start byte */
			case STATE_IDLE :
			case STATE_RESYNC :
			{
				startSim = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	75fb      	strb	r3, [r7, #23]

				if (generalSBGC->RxFunc(generalSBGC->Drv, &startSim) &&
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	f107 0117 	add.w	r1, r7, #23
 8005d96:	4610      	mov	r0, r2
 8005d98:	4798      	blx	r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <SBGC32_RX+0x78>
 8005da0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d103      	bne.n	8005db0 <SBGC32_RX+0x78>
					lastParserError == RX_START_PARSE)
					lastParserError = RX_EMPTY_BUFF_ERROR;
 8005da8:	2303      	movs	r3, #3
 8005daa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

				else if (startSim == generalSBGC->protocolVersion)
					parserState = STATE_CHECK_HEADER;

				break;  // Passing to next state
 8005dae:	e103      	b.n	8005fb8 <SBGC32_RX+0x280>
				else if (startSim == generalSBGC->protocolVersion)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	7e1a      	ldrb	r2, [r3, #24]
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	f040 80fe 	bne.w	8005fb8 <SBGC32_RX+0x280>
					parserState = STATE_CHECK_HEADER;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;  // Passing to next state
 8005dc2:	e0f9      	b.n	8005fb8 <SBGC32_RX+0x280>
			}

			/* Waiting whole header */
			case STATE_CHECK_HEADER :
			{
				availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	6812      	ldr	r2, [r2, #0]
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4798      	blx	r3
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	837b      	strh	r3, [r7, #26]

				if ((availableBytes >= 3) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8005dd4:	8b7b      	ldrh	r3, [r7, #26]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d918      	bls.n	8005e0c <SBGC32_RX+0xd4>
 8005dda:	8b7b      	ldrh	r3, [r7, #26]
 8005ddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <SBGC32_RX+0xd4>
					FOR_(i, 3)
 8005de4:	2300      	movs	r3, #0
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
 8005de8:	e00c      	b.n	8005e04 <SBGC32_RX+0xcc>
						generalSBGC->RxFunc(generalSBGC->Drv, &headBuff[i]);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	6810      	ldr	r0, [r2, #0]
 8005df2:	f107 0114 	add.w	r1, r7, #20
 8005df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005df8:	440a      	add	r2, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4798      	blx	r3
					FOR_(i, 3)
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	3301      	adds	r3, #1
 8005e02:	633b      	str	r3, [r7, #48]	; 0x30
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	ddef      	ble.n	8005dea <SBGC32_RX+0xb2>
 8005e0a:	e003      	b.n	8005e14 <SBGC32_RX+0xdc>

				else
				{
					lastParserError = RX_BUFFER_REALTIME_ERROR;
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8005e12:	e0d2      	b.n	8005fba <SBGC32_RX+0x282>
				}

				if ((headBuff[0] + headBuff[1]) % 256 != headBuff[2])  // % 256 necessary needed here
 8005e14:	7d3a      	ldrb	r2, [r7, #20]
 8005e16:	7d7b      	ldrb	r3, [r7, #21]
 8005e18:	4413      	add	r3, r2
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	7dbb      	ldrb	r3, [r7, #22]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d006      	beq.n	8005e30 <SBGC32_RX+0xf8>
				{
					lastParserError = RX_HEADER_CHECKSUM_ERROR;
 8005e22:	2305      	movs	r3, #5
 8005e24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					parserState = STATE_RESYNC;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8005e2e:	e0c4      	b.n	8005fba <SBGC32_RX+0x282>
				}

				parserState = STATE_CHECK_PAYLOAD;
 8005e30:	2303      	movs	r3, #3
 8005e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;  // Passing to next state
 8005e36:	e0c0      	b.n	8005fba <SBGC32_RX+0x282>
			}

			/* Waiting whole payload and checksum */
			case STATE_CHECK_PAYLOAD :
			{
 8005e38:	466b      	mov	r3, sp
 8005e3a:	469a      	mov	sl, r3
				ui8 checksumSize = (generalSBGC->protocolVersion == PR2_START_CHARACTER ? 2 : 1);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	7e1b      	ldrb	r3, [r3, #24]
 8005e40:	2b24      	cmp	r3, #36	; 0x24
 8005e42:	d101      	bne.n	8005e48 <SBGC32_RX+0x110>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e000      	b.n	8005e4a <SBGC32_RX+0x112>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				ui8 complexBuff [3 + headBuff[1] + checksumSize];  // (Header + payload + checksum) buffer
 8005e4e:	7d7b      	ldrb	r3, [r7, #21]
 8005e50:	1cda      	adds	r2, r3, #3
 8005e52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e56:	18d1      	adds	r1, r2, r3
 8005e58:	1e4b      	subs	r3, r1, #1
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4614      	mov	r4, r2
 8005e62:	461d      	mov	r5, r3
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	00eb      	lsls	r3, r5, #3
 8005e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e72:	00e2      	lsls	r2, r4, #3
 8005e74:	460a      	mov	r2, r1
 8005e76:	2300      	movs	r3, #0
 8005e78:	4690      	mov	r8, r2
 8005e7a:	4699      	mov	r9, r3
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e90:	460b      	mov	r3, r1
 8005e92:	3307      	adds	r3, #7
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	ebad 0d03 	sub.w	sp, sp, r3
 8005e9c:	466b      	mov	r3, sp
 8005e9e:	3300      	adds	r3, #0
 8005ea0:	61fb      	str	r3, [r7, #28]

				availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	6812      	ldr	r2, [r2, #0]
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4798      	blx	r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	837b      	strh	r3, [r7, #26]

				if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8005eb2:	8b7a      	ldrh	r2, [r7, #26]
 8005eb4:	7d7b      	ldrb	r3, [r7, #21]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ebc:	440b      	add	r3, r1
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	db1d      	blt.n	8005efe <SBGC32_RX+0x1c6>
 8005ec2:	8b7b      	ldrh	r3, [r7, #26]
 8005ec4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d018      	beq.n	8005efe <SBGC32_RX+0x1c6>
					FOR_(i, headBuff[1] + checksumSize)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed0:	e00c      	b.n	8005eec <SBGC32_RX+0x1b4>
						generalSBGC->RxFunc(generalSBGC->Drv, &complexBuff[i + 3]);  // Offset from header space
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6810      	ldr	r0, [r2, #0]
 8005eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005edc:	3203      	adds	r2, #3
 8005ede:	69f9      	ldr	r1, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	4798      	blx	r3
					FOR_(i, headBuff[1] + checksumSize)
 8005ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee8:	3301      	adds	r3, #1
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eec:	7d7b      	ldrb	r3, [r7, #21]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef4:	4413      	add	r3, r2
 8005ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	dbea      	blt.n	8005ed2 <SBGC32_RX+0x19a>
 8005efc:	e003      	b.n	8005f06 <SBGC32_RX+0x1ce>

				else
				{
					lastParserError = RX_BUFFER_REALTIME_ERROR;
 8005efe:	2304      	movs	r3, #4
 8005f00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8005f04:	e056      	b.n	8005fb4 <SBGC32_RX+0x27c>
				}

				/* Checksum checking */
				if (!(checksumSize - 1))  // If SBGC_PROTOCOL_V1
 8005f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d115      	bne.n	8005f3a <SBGC32_RX+0x202>
				{
					if (complexBuff[3 + headBuff[1]] != Modulo256_Calculate(&complexBuff[3], headBuff[1]))
 8005f0e:	7d7b      	ldrb	r3, [r7, #21]
 8005f10:	3303      	adds	r3, #3
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	5cd6      	ldrb	r6, [r2, r3]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3303      	adds	r3, #3
 8005f1a:	7d7a      	ldrb	r2, [r7, #21]
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fd57 	bl	80069d4 <Modulo256_Calculate>
 8005f26:	4603      	mov	r3, r0
 8005f28:	429e      	cmp	r6, r3
 8005f2a:	d031      	beq.n	8005f90 <SBGC32_RX+0x258>
					{
						lastParserError = RX_PAYLOAD_CHECKSUM_ERROR;
 8005f2c:	2306      	movs	r3, #6
 8005f2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						parserState = STATE_RESYNC;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8005f38:	e03c      	b.n	8005fb4 <SBGC32_RX+0x27c>
					}
				}

				else
				{
					memcpy(complexBuff, headBuff, 3);
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	8819      	ldrh	r1, [r3, #0]
 8005f44:	789b      	ldrb	r3, [r3, #2]
 8005f46:	8011      	strh	r1, [r2, #0]
 8005f48:	7093      	strb	r3, [r2, #2]
					ui16 CRC_Res = CRC16_Calculate(complexBuff, headBuff[1] + 3);
 8005f4a:	7d7b      	ldrb	r3, [r7, #21]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3303      	adds	r3, #3
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	4619      	mov	r1, r3
 8005f54:	69f8      	ldr	r0, [r7, #28]
 8005f56:	f000 fd64 	bl	8006a22 <CRC16_Calculate>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	833b      	strh	r3, [r7, #24]

					if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8005f5e:	8b3b      	ldrh	r3, [r7, #24]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	7d7a      	ldrb	r2, [r7, #21]
 8005f64:	3203      	adds	r2, #3
 8005f66:	69f9      	ldr	r1, [r7, #28]
 8005f68:	5c8a      	ldrb	r2, [r1, r2]
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d010      	beq.n	8005f90 <SBGC32_RX+0x258>
					   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 8005f6e:	8b3b      	ldrh	r3, [r7, #24]
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	7d7a      	ldrb	r2, [r7, #21]
 8005f78:	3204      	adds	r2, #4
 8005f7a:	69f9      	ldr	r1, [r7, #28]
 8005f7c:	5c8a      	ldrb	r2, [r1, r2]
					if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d006      	beq.n	8005f90 <SBGC32_RX+0x258>
					{
						lastParserError = RX_PAYLOAD_CHECKSUM_ERROR;
 8005f82:	2306      	movs	r3, #6
 8005f84:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						parserState = STATE_RESYNC;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8005f8e:	e011      	b.n	8005fb4 <SBGC32_RX+0x27c>
					}
				}

				/* Data passed all checks. Filling the serialCommand struct */
				serialCommand->commandID = headBuff[0];
 8005f90:	7d3a      	ldrb	r2, [r7, #20]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	701a      	strb	r2, [r3, #0]
				memcpy(serialCommand->payload, &complexBuff[3], headBuff[1]);
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	1c58      	adds	r0, r3, #1
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	3303      	adds	r3, #3
 8005f9e:	7d7a      	ldrb	r2, [r7, #21]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	f000 ffc1 	bl	8006f28 <memcpy>
				serialCommand->payloadSize = headBuff[1];
 8005fa6:	7d7a      	ldrb	r2, [r7, #21]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

				return TX_RX_OK;  // Incoming command was received fine
 8005fae:	2300      	movs	r3, #0
 8005fb0:	46d5      	mov	sp, sl
 8005fb2:	e011      	b.n	8005fd8 <SBGC32_RX+0x2a0>
 8005fb4:	46d5      	mov	sp, sl
 8005fb6:	e000      	b.n	8005fba <SBGC32_RX+0x282>
				break;  // Passing to next state
 8005fb8:	bf00      	nop
			}
		}

		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= timeout)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	6812      	ldr	r2, [r2, #0]
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	4798      	blx	r3
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	f63f aeca 	bhi.w	8005d68 <SBGC32_RX+0x30>
			return lastParserError;
 8005fd4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
	}
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3738      	adds	r7, #56	; 0x38
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005fe2 <SBGC32_TX_RX>:
 *  @param	cmdID - SBGC32 command identifier
 *
 *  @return	Request response result
 */
TxRxStatus_t SBGC32_TX_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, SBGC_Commands_t cmdID)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b086      	sub	sp, #24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	4613      	mov	r3, r2
 8005fee:	71fb      	strb	r3, [r7, #7]
	if (SBGC32_TX(generalSBGC, serialCommand))
 8005ff0:	68b9      	ldr	r1, [r7, #8]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f7ff fd80 	bl	8005af8 <SBGC32_TX>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <SBGC32_TX_RX+0x20>
		return TX_BUFFER_OVERFLOW_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e038      	b.n	8006074 <SBGC32_TX_RX+0x92>

	else
	{
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	4610      	mov	r0, r2
 800600c:	4798      	blx	r3
 800600e:	6178      	str	r0, [r7, #20]

		while (1)
		{
			TxRxStatus_t lastParserStatus = SBGC32_RX(generalSBGC, serialCommand, generalSBGC->rxTimeout);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	461a      	mov	r2, r3
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff fe8d 	bl	8005d38 <SBGC32_RX>
 800601e:	4603      	mov	r3, r0
 8006020:	74fb      	strb	r3, [r7, #19]

			if (lastParserStatus == TX_RX_OK &&
 8006022:	7cfb      	ldrb	r3, [r7, #19]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <SBGC32_TX_RX+0x5a>
			   (serialCommand->commandID == cmdID || cmdID == 0))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
			if (lastParserStatus == TX_RX_OK &&
 800602c:	79fa      	ldrb	r2, [r7, #7]
 800602e:	429a      	cmp	r2, r3
 8006030:	d002      	beq.n	8006038 <SBGC32_TX_RX+0x56>
			   (serialCommand->commandID == cmdID || cmdID == 0))
 8006032:	79fb      	ldrb	r3, [r7, #7]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <SBGC32_TX_RX+0x5a>
				return lastParserStatus;
 8006038:	7cfb      	ldrb	r3, [r7, #19]
 800603a:	e01b      	b.n	8006074 <SBGC32_TX_RX+0x92>

			else if (lastParserStatus == TX_RX_OK &&
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10a      	bne.n	8006058 <SBGC32_TX_RX+0x76>
					(serialCommand->commandID != cmdID))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	781b      	ldrb	r3, [r3, #0]
			else if (lastParserStatus == TX_RX_OK &&
 8006046:	79fa      	ldrb	r2, [r7, #7]
 8006048:	429a      	cmp	r2, r3
 800604a:	d005      	beq.n	8006058 <SBGC32_TX_RX+0x76>
				generalSBGC->_missedCommandCount++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006050:	3301      	adds	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	859a      	strh	r2, [r3, #44]	; 0x2c

			if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	4610      	mov	r0, r2
 8006062:	4798      	blx	r3
 8006064:	4602      	mov	r2, r0
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	1ad2      	subs	r2, r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	429a      	cmp	r2, r3
 8006070:	d3ce      	bcc.n	8006010 <SBGC32_TX_RX+0x2e>
				return lastParserStatus;  // or return RX_TIMEOUT_ERROR;
 8006072:	7cfb      	ldrb	r3, [r7, #19]
		}
	}
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <WriteBuff>:
 * 	@param	*buff - write data
 * 	@param	size - write data size
 * 	@param	parserMap - data type required for correct parsing
 */
void WriteBuff (SerialCommand_t *cmd, const void *buff, ui8 size, ParserMap_t parserMap)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	4611      	mov	r1, r2
 8006088:	461a      	mov	r2, r3
 800608a:	460b      	mov	r3, r1
 800608c:	71fb      	strb	r3, [r7, #7]
 800608e:	4613      	mov	r3, r2
 8006090:	71bb      	strb	r3, [r7, #6]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - size)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006098:	461a      	mov	r2, r3
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80060a0:	429a      	cmp	r2, r3
 80060a2:	dc1b      	bgt.n	80060dc <WriteBuff+0x60>
	{
		memcpy(&cmd->payload[cmd->payloadSize], buff, size);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80060aa:	461a      	mov	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	3301      	adds	r3, #1
 80060b2:	79fa      	ldrb	r2, [r7, #7]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 ff36 	bl	8006f28 <memcpy>
		SwapBytesInStruct(cmd->payload, size, parserMap);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	79ba      	ldrb	r2, [r7, #6]
 80060c2:	79f9      	ldrb	r1, [r7, #7]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 f840 	bl	800614a <SwapBytesInStruct>
		cmd->payloadSize += size;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	4413      	add	r3, r2
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 80060dc:	bf00      	nop
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <ReadBuff>:
 *	@param	*buff - read data buffer
 *	@param	size - read data size
 *	@param	parserMap - data type required for correct parsing
 */
void ReadBuff (SerialCommand_t *cmd, void *buff, ui8 size, ParserMap_t parserMap)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	4611      	mov	r1, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	460b      	mov	r3, r1
 80060f4:	71fb      	strb	r3, [r7, #7]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71bb      	strb	r3, [r7, #6]
    if (size <= (MAX_BUFF_SIZE - cmd->readPos))
 80060fa:	79fa      	ldrb	r2, [r7, #7]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006102:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006106:	429a      	cmp	r2, r3
 8006108:	dc1b      	bgt.n	8006142 <ReadBuff+0x5e>
    {
		SwapBytesInStruct(cmd->payload, size, parserMap);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3301      	adds	r3, #1
 800610e:	79ba      	ldrb	r2, [r7, #6]
 8006110:	79f9      	ldrb	r1, [r7, #7]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f819 	bl	800614a <SwapBytesInStruct>
		memcpy(buff, &cmd->payload[cmd->readPos], size);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	3301      	adds	r3, #1
 8006126:	79fa      	ldrb	r2, [r7, #7]
 8006128:	4619      	mov	r1, r3
 800612a:	68b8      	ldr	r0, [r7, #8]
 800612c:	f000 fefc 	bl	8006f28 <memcpy>
		cmd->readPos += size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	4413      	add	r3, r2
 800613a:	b2da      	uxtb	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
    }
}
 8006142:	bf00      	nop
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <SwapBytesInStruct>:
 *	@param 	*structure - structure buffer to bytes rearrange
 *	@param	size - structure buffer size
 *	@param	parserMap - data type required for correct parsing
 */
void SwapBytesInStruct (ui8 *structure, ui8 size, ParserMap_t parserMap)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
 8006156:	4613      	mov	r3, r2
 8006158:	70bb      	strb	r3, [r7, #2]
				}
			}
		}

	#endif
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr

08006166 <ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
void ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b084      	sub	sp, #16
 800616a:	af00      	add	r7, sp, #0
 800616c:	60f8      	str	r0, [r7, #12]
 800616e:	60b9      	str	r1, [r7, #8]
 8006170:	4613      	mov	r3, r2
 8006172:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	2b04      	cmp	r3, #4
 8006178:	d80b      	bhi.n	8006192 <ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b03      	cmp	r3, #3
 800617e:	d101      	bne.n	8006184 <ToLittleEndian+0x1e>
 8006180:	2304      	movs	r3, #4
 8006182:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	461a      	mov	r2, r3
 8006188:	68f9      	ldr	r1, [r7, #12]
 800618a:	68b8      	ldr	r0, [r7, #8]
 800618c:	f000 fecc 	bl	8006f28 <memcpy>
 8006190:	e000      	b.n	8006194 <ToLittleEndian+0x2e>
	if (size > 4) return;
 8006192:	bf00      	nop

		FOR_(i, size / 2)
			SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
void FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	4613      	mov	r3, r2
 80061a6:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d80b      	bhi.n	80061c6 <FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d101      	bne.n	80061b8 <FromLittleEndian+0x1e>
 80061b4:	2304      	movs	r3, #4
 80061b6:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	461a      	mov	r2, r3
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 feb2 	bl	8006f28 <memcpy>
 80061c4:	e000      	b.n	80061c8 <FromLittleEndian+0x2e>
	if (size > 4) return;
 80061c6:	bf00      	nop

		FOR_(i, size / 2)
			SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <WriteByte>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	byte - byte to write
 */
void WriteByte (SerialCommand_t *cmd, const ui8 byte)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
	if (cmd->payloadSize < MAX_BUFF_SIZE)
		cmd->payload[cmd->payloadSize++] = byte;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	b2d1      	uxtb	r1, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 80061ea:	461a      	mov	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	705a      	strb	r2, [r3, #1]
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <ReadByte>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Byte read
 */
ui8 ReadByte (SerialCommand_t *cmd)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	return cmd->payload[cmd->readPos++];
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	b2d1      	uxtb	r1, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	f882 1102 	strb.w	r1, [r2, #258]	; 0x102
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4413      	add	r3, r2
 800621e:	785b      	ldrb	r3, [r3, #1]
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <WriteWord>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	word - two bytes to write
 */
void WriteWord (SerialCommand_t *cmd, const ui16 word)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	807b      	strh	r3, [r7, #2]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 2)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800623e:	2bff      	cmp	r3, #255	; 0xff
 8006240:	d013      	beq.n	800626a <WriteWord+0x3e>
	{
		ToLittleEndian(&word, &cmd->payload[cmd->payloadSize], 2);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006248:	461a      	mov	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	1cbb      	adds	r3, r7, #2
 8006252:	2202      	movs	r2, #2
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff ff86 	bl	8006166 <ToLittleEndian>
		cmd->payloadSize += 2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006260:	3302      	adds	r3, #2
 8006262:	b2da      	uxtb	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <ReadWord>:
 *	@param 	*cmd - SerialCommand
 *
 *	@return	Word read
 */
ui16 ReadWord (SerialCommand_t *cmd)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
	ui16 word;
	FromLittleEndian(&word, &cmd->payload[cmd->readPos], 2);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006280:	461a      	mov	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4413      	add	r3, r2
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	f107 030e 	add.w	r3, r7, #14
 800628c:	2202      	movs	r2, #2
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff ff83 	bl	800619a <FromLittleEndian>
	cmd->readPos += 2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800629a:	3302      	adds	r3, #2
 800629c:	b2da      	uxtb	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return word;
 80062a4:	89fb      	ldrh	r3, [r7, #14]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <InitCmdWrite>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	cmdID - SBGC32 command identifier
 */
void InitCmdWrite (SerialCommand_t *cmd, SBGC_Commands_t cmdID)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
	cmd->commandID = cmdID;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	701a      	strb	r2, [r3, #0]
	cmd->payloadSize = 0;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <SBGC32_DefaultInit>:
 *	@return Communication status
 */
TxRxStatus_t SBGC32_DefaultInit (GeneralSBGC_t *generalSBGC, TxFunc_t TxFunc, RxFunc_t RxFunc,
								 AvailableBytesFunc_t AvailableBytesFunc, TxDebugFunc_t TxDebugFunc,
								 GetTimeFunc_t GetTimeFunc, SBGC_ProtocolVersion_t protocolVersion)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b0c7      	sub	sp, #284	; 0x11c
 80062d8:	af00      	add	r7, sp, #0
 80062da:	f507 748c 	add.w	r4, r7, #280	; 0x118
 80062de:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 80062e2:	6020      	str	r0, [r4, #0]
 80062e4:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80062e8:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80062ec:	6001      	str	r1, [r0, #0]
 80062ee:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80062f2:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 80062f6:	600a      	str	r2, [r1, #0]
 80062f8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80062fc:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006300:	6013      	str	r3, [r2, #0]
	generalSBGC->TxFunc = TxFunc;
 8006302:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006306:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8006310:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006314:	6812      	ldr	r2, [r2, #0]
 8006316:	605a      	str	r2, [r3, #4]
	generalSBGC->RxFunc = RxFunc;
 8006318:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800631c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8006326:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	609a      	str	r2, [r3, #8]
	generalSBGC->AvailableBytesFunc = AvailableBytesFunc;
 800632e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006332:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800633c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	60da      	str	r2, [r3, #12]
	generalSBGC->TxDebugFunc = TxDebugFunc;
 8006344:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006348:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006352:	611a      	str	r2, [r3, #16]
	generalSBGC->GetTimeFunc = GetTimeFunc;
 8006354:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006358:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8006362:	615a      	str	r2, [r3, #20]

	generalSBGC->protocolVersion = protocolVersion;
 8006364:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006368:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f897 2130 	ldrb.w	r2, [r7, #304]	; 0x130
 8006372:	761a      	strb	r2, [r3, #24]
	generalSBGC->txTimeout = SBGC_TX_WAITING;
 8006374:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006378:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2264      	movs	r2, #100	; 0x64
 8006380:	61da      	str	r2, [r3, #28]
	generalSBGC->rxTimeout = SBGC_RX_WAITING;
 8006382:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006390:	621a      	str	r2, [r3, #32]
	generalSBGC->txrxTimeout = SBGC_RX_WAITING;
 8006392:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006396:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80063a0:	625a      	str	r2, [r3, #36]	; 0x24

	generalSBGC->_txErrorsCount = 0;
 80063a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
	generalSBGC->_rxErrorsCount = 0;
 80063b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	855a      	strh	r2, [r3, #42]	; 0x2a

	/* Startup Delay */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 80063be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80063ce:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	4610      	mov	r0, r2
 80063d8:	4798      	blx	r3
 80063da:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
	while ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) < SBGC_STARTUP_DELAY);
 80063de:	bf00      	nop
 80063e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80063f0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	4610      	mov	r0, r2
 80063fa:	4798      	blx	r3
 80063fc:	4602      	mov	r2, r0
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8006408:	4293      	cmp	r3, r2
 800640a:	d9e9      	bls.n	80063e0 <SBGC32_DefaultInit+0x10c>

	/* Getting board information */
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO);
 800640c:	f107 0310 	add.w	r3, r7, #16
 8006410:	2156      	movs	r1, #86	; 0x56
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff ff4b 	bl	80062ae <InitCmdWrite>
	WriteWord(&cmd, 0);  // cfg = 0
 8006418:	f107 0310 	add.w	r3, r7, #16
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff ff04 	bl	800622c <WriteWord>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO), "Board Info:") == TX_RX_OK)
 8006424:	f107 0110 	add.w	r1, r7, #16
 8006428:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800642c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006430:	2256      	movs	r2, #86	; 0x56
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	f7ff fdd5 	bl	8005fe2 <SBGC32_TX_RX>
 8006438:	4603      	mov	r3, r0
 800643a:	4619      	mov	r1, r3
 800643c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006440:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006444:	4a46      	ldr	r2, [pc, #280]	; (8006560 <SBGC32_DefaultInit+0x28c>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	f000 fa16 	bl	8006878 <CheckReceipt>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d119      	bne.n	8006486 <SBGC32_DefaultInit+0x1b2>
	{
		generalSBGC->_boardVersion = cmd.payload[0];
 8006452:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800645a:	785a      	ldrb	r2, [r3, #1]
 800645c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006460:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		FromLittleEndian(&generalSBGC->_firmwareVersion, &cmd.payload[1], 2);
 800646a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800646e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006478:	f107 0310 	add.w	r3, r7, #16
 800647c:	3302      	adds	r3, #2
 800647e:	2202      	movs	r2, #2
 8006480:	4619      	mov	r1, r3
 8006482:	f7ff fe8a 	bl	800619a <FromLittleEndian>
	}

	#ifdef SBGC_DEBUG_MODE

		PrintMessage(generalSBGC, TEXT_SIZE_(" \n"));
 8006486:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800648a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800648e:	2202      	movs	r2, #2
 8006490:	4934      	ldr	r1, [pc, #208]	; (8006564 <SBGC32_DefaultInit+0x290>)
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	f000 fb06 	bl	8006aa4 <PrintMessage>
		PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n"));
 8006498:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800649c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064a0:	221f      	movs	r2, #31
 80064a2:	4931      	ldr	r1, [pc, #196]	; (8006568 <SBGC32_DefaultInit+0x294>)
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	f000 fafd 	bl	8006aa4 <PrintMessage>

		if (generalSBGC->_ParserCurrentStatus == TX_RX_OK)
 80064aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80064ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d133      	bne.n	8006524 <SBGC32_DefaultInit+0x250>
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("The system is ready to go!\n"));
 80064bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80064c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064c4:	221b      	movs	r2, #27
 80064c6:	4929      	ldr	r1, [pc, #164]	; (800656c <SBGC32_DefaultInit+0x298>)
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	f000 faeb 	bl	8006aa4 <PrintMessage>
			PrintStructElement(generalSBGC, generalSBGC->_boardVersion, "Board Version: ", _UNSIGNED_CHAR_);
 80064ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80064d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064dc:	4619      	mov	r1, r3
 80064de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80064e2:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80064e6:	2301      	movs	r3, #1
 80064e8:	4a21      	ldr	r2, [pc, #132]	; (8006570 <SBGC32_DefaultInit+0x29c>)
 80064ea:	6800      	ldr	r0, [r0, #0]
 80064ec:	f000 faec 	bl	8006ac8 <PrintStructElement>
			PrintStructElement(generalSBGC, generalSBGC->_firmwareVersion, "Firmware Version: ", _UNSIGNED_SHORT_);
 80064f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80064f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80064fc:	4619      	mov	r1, r3
 80064fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006502:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8006506:	2303      	movs	r3, #3
 8006508:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <SBGC32_DefaultInit+0x2a0>)
 800650a:	6800      	ldr	r0, [r0, #0]
 800650c:	f000 fadc 	bl	8006ac8 <PrintStructElement>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\r"));
 8006510:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006514:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006518:	2220      	movs	r2, #32
 800651a:	4917      	ldr	r1, [pc, #92]	; (8006578 <SBGC32_DefaultInit+0x2a4>)
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	f000 fac1 	bl	8006aa4 <PrintMessage>
 8006522:	e011      	b.n	8006548 <SBGC32_DefaultInit+0x274>
		}

		else
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("Communication Error!\n"));
 8006524:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006528:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800652c:	2215      	movs	r2, #21
 800652e:	4913      	ldr	r1, [pc, #76]	; (800657c <SBGC32_DefaultInit+0x2a8>)
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	f000 fab7 	bl	8006aa4 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\r"));
 8006536:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800653a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800653e:	2220      	movs	r2, #32
 8006540:	490d      	ldr	r1, [pc, #52]	; (8006578 <SBGC32_DefaultInit+0x2a4>)
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	f000 faae 	bl	8006aa4 <PrintMessage>
		}

	#endif

	return generalSBGC->_ParserCurrentStatus;
 8006548:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800654c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006556:	4618      	mov	r0, r3
 8006558:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800655c:	46bd      	mov	sp, r7
 800655e:	bd90      	pop	{r4, r7, pc}
 8006560:	0800b608 	.word	0x0800b608
 8006564:	0800b614 	.word	0x0800b614
 8006568:	0800b618 	.word	0x0800b618
 800656c:	0800b638 	.word	0x0800b638
 8006570:	0800b654 	.word	0x0800b654
 8006574:	0800b664 	.word	0x0800b664
 8006578:	0800b678 	.word	0x0800b678
 800657c:	0800b69c 	.word	0x0800b69c

08006580 <SBGC32_CheckConfirmation>:
 *	@param	cmdID - identifier of the SerialCommand being confirmed
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_CheckConfirmation (GeneralSBGC_t *generalSBGC, ConfirmationState_t *confirmationState, SBGC_Commands_t cmdID)
{
 8006580:	b590      	push	{r4, r7, lr}
 8006582:	b0cf      	sub	sp, #316	; 0x13c
 8006584:	af00      	add	r7, sp, #0
 8006586:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800658a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800658e:	6018      	str	r0, [r3, #0]
 8006590:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	6019      	str	r1, [r3, #0]
 800659a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800659e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80065a2:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 80065a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80065b4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	6812      	ldr	r2, [r2, #0]
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
 80065c0:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
		char debugStr [30];
	#endif

	while (1)
	{
		TxRxStatus_t lastParserStatus = SBGC32_RX(generalSBGC, &cmd, generalSBGC->txrxTimeout);
 80065c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065d0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80065d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065dc:	6818      	ldr	r0, [r3, #0]
 80065de:	f7ff fbab 	bl	8005d38 <SBGC32_RX>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133

		if (lastParserStatus == TX_RX_OK &&
 80065e8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 80a2 	bne.w	8006736 <SBGC32_CheckConfirmation+0x1b6>
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 80065f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fa:	781b      	ldrb	r3, [r3, #0]
		if (lastParserStatus == TX_RX_OK &&
 80065fc:	2b43      	cmp	r3, #67	; 0x43
 80065fe:	d10b      	bne.n	8006618 <SBGC32_CheckConfirmation+0x98>
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 8006600:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800660e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006612:	7812      	ldrb	r2, [r2, #0]
 8006614:	429a      	cmp	r2, r3
 8006616:	d007      	beq.n	8006628 <SBGC32_CheckConfirmation+0xa8>
			(cmd.commandID == CMD_RESET)))
 8006618:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006620:	781b      	ldrb	r3, [r3, #0]
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 8006622:	2b72      	cmp	r3, #114	; 0x72
 8006624:	f040 8087 	bne.w	8006736 <SBGC32_CheckConfirmation+0x1b6>
		{
			confirmationState->cmdID = ReadByte(&cmd);
 8006628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fde7 	bl	8006200 <ReadByte>
 8006632:	4603      	mov	r3, r0
 8006634:	461a      	mov	r2, r3
 8006636:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800663a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	701a      	strb	r2, [r3, #0]

			if (cmd.payloadSize == 2)
 8006642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800664a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800664e:	2b02      	cmp	r3, #2
 8006650:	d10e      	bne.n	8006670 <SBGC32_CheckConfirmation+0xf0>
				confirmationState->cmdData = ReadByte(&cmd);
 8006652:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006656:	4618      	mov	r0, r3
 8006658:	f7ff fdd2 	bl	8006200 <ReadByte>
 800665c:	4603      	mov	r3, r0
 800665e:	b29a      	uxth	r2, r3
 8006660:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8a3 2001 	strh.w	r2, [r3, #1]
 800666e:	e015      	b.n	800669c <SBGC32_CheckConfirmation+0x11c>
			else if (cmd.payloadSize == 3)
 8006670:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006678:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800667c:	2b03      	cmp	r3, #3
 800667e:	d10d      	bne.n	800669c <SBGC32_CheckConfirmation+0x11c>
				confirmationState->cmdData = ReadWord(&cmd);
 8006680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff fdf4 	bl	8006272 <ReadWord>
 800668a:	4603      	mov	r3, r0
 800668c:	461a      	mov	r2, r3
 800668e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8a3 2001 	strh.w	r2, [r3, #1]

			#ifdef SBGC_DEBUG_MODE
				/* - - - - - - - User Confirm Handler - - - - - - - - */
				if (cmd.payloadSize <= 1)
 800669c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a4:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d80d      	bhi.n	80066c8 <SBGC32_CheckConfirmation+0x148>
					sprintf(debugStr, "CMD_CONFIRM #%d\n", confirmationState->cmdID);
 80066ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	461a      	mov	r2, r3
 80066ba:	f107 0310 	add.w	r3, r7, #16
 80066be:	496a      	ldr	r1, [pc, #424]	; (8006868 <SBGC32_CheckConfirmation+0x2e8>)
 80066c0:	4618      	mov	r0, r3
 80066c2:	f001 fb87 	bl	8007dd4 <siprintf>
 80066c6:	e013      	b.n	80066f0 <SBGC32_CheckConfirmation+0x170>
				else
					sprintf(debugStr, "CMD_CONFIRM #%d (%u)\n", confirmationState->cmdID, confirmationState->cmdData);
 80066c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f107 0010 	add.w	r0, r7, #16
 80066ea:	4960      	ldr	r1, [pc, #384]	; (800686c <SBGC32_CheckConfirmation+0x2ec>)
 80066ec:	f001 fb72 	bl	8007dd4 <siprintf>

				generalSBGC->TxDebugFunc(debugStr, strlen(debugStr));
 80066f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691c      	ldr	r4, [r3, #16]
 80066fc:	f107 0310 	add.w	r3, r7, #16
 8006700:	4618      	mov	r0, r3
 8006702:	f7f9 fd9d 	bl	8000240 <strlen>
 8006706:	4603      	mov	r3, r0
 8006708:	b29a      	uxth	r2, r3
 800670a:	f107 0310 	add.w	r3, r7, #16
 800670e:	4611      	mov	r1, r2
 8006710:	4618      	mov	r0, r3
 8006712:	47a0      	blx	r4
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = lastParserStatus;
 8006714:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006722:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 8006726:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800672a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006734:	e093      	b.n	800685e <SBGC32_CheckConfirmation+0x2de>
		}

		else if (lastParserStatus == TX_RX_OK && (cmd.commandID == CMD_ERROR))
 8006736:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800673a:	2b00      	cmp	r3, #0
 800673c:	d15c      	bne.n	80067f8 <SBGC32_CheckConfirmation+0x278>
 800673e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2bff      	cmp	r3, #255	; 0xff
 800674a:	d155      	bne.n	80067f8 <SBGC32_CheckConfirmation+0x278>
		{
			confirmationState->errCode = ReadByte(&cmd);
 800674c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff fd55 	bl	8006200 <ReadByte>
 8006756:	4603      	mov	r3, r0
 8006758:	461a      	mov	r2, r3
 800675a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800675e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	70da      	strb	r2, [r3, #3]

			if (cmd.payloadSize > 1)
 8006766:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800676a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800676e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006772:	2b01      	cmp	r3, #1
 8006774:	d90b      	bls.n	800678e <SBGC32_CheckConfirmation+0x20e>
				ReadBuff(&cmd, &confirmationState->errData, 4, PM_DEFAULT_8BIT);
 8006776:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800677a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	1d19      	adds	r1, r3, #4
 8006782:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8006786:	2300      	movs	r3, #0
 8006788:	2204      	movs	r2, #4
 800678a:	f7ff fcab 	bl	80060e4 <ReadBuff>

			#ifdef SBGC_DEBUG_MODE
				/* - - - - - - - - User Error Handler - - - - - - - - */
				sprintf(debugStr, "CMD_ERROR: #%d (%s)\n", confirmationState->errCode, confirmationState->errData);
 800678e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	78db      	ldrb	r3, [r3, #3]
 800679a:	461a      	mov	r2, r3
 800679c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3304      	adds	r3, #4
 80067a8:	f107 0010 	add.w	r0, r7, #16
 80067ac:	4930      	ldr	r1, [pc, #192]	; (8006870 <SBGC32_CheckConfirmation+0x2f0>)
 80067ae:	f001 fb11 	bl	8007dd4 <siprintf>
				generalSBGC->TxDebugFunc(debugStr, strlen(debugStr));
 80067b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	691c      	ldr	r4, [r3, #16]
 80067be:	f107 0310 	add.w	r3, r7, #16
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7f9 fd3c 	bl	8000240 <strlen>
 80067c8:	4603      	mov	r3, r0
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f107 0310 	add.w	r3, r7, #16
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	47a0      	blx	r4
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = lastParserStatus;
 80067d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80067e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 80067e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80067f6:	e032      	b.n	800685e <SBGC32_CheckConfirmation+0x2de>
		}

		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 80067f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006808:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
 8006814:	4602      	mov	r2, r0
 8006816:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800681a:	1ad2      	subs	r2, r2, r3
 800681c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006820:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	429a      	cmp	r2, r3
 800682a:	f4ff aecb 	bcc.w	80065c4 <SBGC32_CheckConfirmation+0x44>
		{
			#ifdef SBGC_DEBUG_MODE
				/*  - - - - - - User Wait-Error Handler - - - - - - - */
				PrintMessage(generalSBGC, TEXT_SIZE_("CONFIRM_TIMEOUT_ERROR!\n"));
 800682e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006832:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006836:	2217      	movs	r2, #23
 8006838:	490e      	ldr	r1, [pc, #56]	; (8006874 <SBGC32_CheckConfirmation+0x2f4>)
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	f000 f932 	bl	8006aa4 <PrintMessage>
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = RX_TIMEOUT_ERROR;
 8006840:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006844:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2208      	movs	r2, #8
 800684c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 8006850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
		}
	}
}
 800685e:	4618      	mov	r0, r3
 8006860:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006864:	46bd      	mov	sp, r7
 8006866:	bd90      	pop	{r4, r7, pc}
 8006868:	0800b6b4 	.word	0x0800b6b4
 800686c:	0800b6c8 	.word	0x0800b6c8
 8006870:	0800b6e0 	.word	0x0800b6e0
 8006874:	0800b6f8 	.word	0x0800b6f8

08006878 <CheckReceipt>:
 *	@param 	*message - debug info string
 *
 *	@return Communication status
 */
TxRxStatus_t CheckReceipt (GeneralSBGC_t *generalSBGC, TxRxStatus_t receiveStatus, char *message)
{
 8006878:	b590      	push	{r4, r7, lr}
 800687a:	b095      	sub	sp, #84	; 0x54
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	460b      	mov	r3, r1
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	72fb      	strb	r3, [r7, #11]
	generalSBGC->_ParserCurrentStatus = receiveStatus;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	7afa      	ldrb	r2, [r7, #11]
 800688a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (generalSBGC->_ParserCurrentStatus != TX_RX_OK)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <CheckReceipt+0x2c>
		generalSBGC->_rxErrorsCount++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800689c:	3301      	adds	r3, #1
 800689e:	b29a      	uxth	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	855a      	strh	r2, [r3, #42]	; 0x2a

	#ifdef SBGC_DEBUG_MODE

		char totalStr [60];
		ui8 pos = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (generalSBGC->_ParserCurrentStatus != TX_RX_OK)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d044      	beq.n	800693e <CheckReceipt+0xc6>
		{
			/* - - - - - - - - User RX Errors Handler - - - - - - - - */
			memcpy(totalStr, TEXT_SIZE_(message));
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7f9 fcc3 	bl	8000240 <strlen>
 80068ba:	4602      	mov	r2, r0
 80068bc:	f107 0310 	add.w	r3, r7, #16
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fb30 	bl	8006f28 <memcpy>
			pos += strlen(message);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7f9 fcb9 	bl	8000240 <strlen>
 80068ce:	4603      	mov	r3, r0
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80068d6:	4413      	add	r3, r2
 80068d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive Error: "));
 80068dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80068e0:	f107 0210 	add.w	r2, r7, #16
 80068e4:	4413      	add	r3, r2
 80068e6:	2210      	movs	r2, #16
 80068e8:	4938      	ldr	r1, [pc, #224]	; (80069cc <CheckReceipt+0x154>)
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 fb1c 	bl	8006f28 <memcpy>
			pos += strlen(" Receive Error: ");
 80068f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80068f4:	3310      	adds	r3, #16
 80068f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pos += ConvertErrorToString(generalSBGC->_ParserCurrentStatus, &totalStr[pos]);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 8006900:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006904:	f107 0210 	add.w	r2, r7, #16
 8006908:	4413      	add	r3, r2
 800690a:	4619      	mov	r1, r3
 800690c:	f000 f93c 	bl	8006b88 <ConvertErrorToString>
 8006910:	4603      	mov	r3, r0
 8006912:	461a      	mov	r2, r3
 8006914:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006918:	4413      	add	r3, r2
 800691a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 800691e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006922:	3350      	adds	r3, #80	; 0x50
 8006924:	443b      	add	r3, r7
 8006926:	220a      	movs	r2, #10
 8006928:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 800692c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006930:	3301      	adds	r3, #1
 8006932:	3350      	adds	r3, #80	; 0x50
 8006934:	443b      	add	r3, r7
 8006936:	2200      	movs	r2, #0
 8006938:	f803 2c40 	strb.w	r2, [r3, #-64]
 800693c:	e031      	b.n	80069a2 <CheckReceipt+0x12a>
		}

		else
		{
			/*  - - - - - - - User RX Success Handler - - - - - - - - */
			memcpy(totalStr, TEXT_SIZE_(message));
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7f9 fc7e 	bl	8000240 <strlen>
 8006944:	4602      	mov	r2, r0
 8006946:	f107 0310 	add.w	r3, r7, #16
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	4618      	mov	r0, r3
 800694e:	f000 faeb 	bl	8006f28 <memcpy>
			pos += strlen(message);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7f9 fc74 	bl	8000240 <strlen>
 8006958:	4603      	mov	r3, r0
 800695a:	b2da      	uxtb	r2, r3
 800695c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006960:	4413      	add	r3, r2
 8006962:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive OK!"));
 8006966:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800696a:	f107 0210 	add.w	r2, r7, #16
 800696e:	4413      	add	r3, r2
 8006970:	220c      	movs	r2, #12
 8006972:	4917      	ldr	r1, [pc, #92]	; (80069d0 <CheckReceipt+0x158>)
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fad7 	bl	8006f28 <memcpy>
			pos += strlen(" Receive OK!");
 800697a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800697e:	330c      	adds	r3, #12
 8006980:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8006984:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006988:	3350      	adds	r3, #80	; 0x50
 800698a:	443b      	add	r3, r7
 800698c:	220a      	movs	r2, #10
 800698e:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8006992:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006996:	3301      	adds	r3, #1
 8006998:	3350      	adds	r3, #80	; 0x50
 800699a:	443b      	add	r3, r7
 800699c:	2200      	movs	r2, #0
 800699e:	f803 2c40 	strb.w	r2, [r3, #-64]
			/*  - - - - - - - - - - - - - - - - - - - - - - - - - - - */
		}

		generalSBGC->TxDebugFunc(TEXT_SIZE_(totalStr));
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	691c      	ldr	r4, [r3, #16]
 80069a6:	f107 0310 	add.w	r3, r7, #16
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7f9 fc48 	bl	8000240 <strlen>
 80069b0:	4603      	mov	r3, r0
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	f107 0310 	add.w	r3, r7, #16
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	47a0      	blx	r4

	#endif

	return generalSBGC->_ParserCurrentStatus;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3754      	adds	r7, #84	; 0x54
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd90      	pop	{r4, r7, pc}
 80069cc:	0800b710 	.word	0x0800b710
 80069d0:	0800b724 	.word	0x0800b724

080069d4 <Modulo256_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui8 Modulo256_Calculate (ui8 *data, ui16 length)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	807b      	strh	r3, [r7, #2]
    i32 totalSum = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]

    ui16 count = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	817b      	strh	r3, [r7, #10]
    while (count < length)
 80069e8:	e00a      	b.n	8006a00 <Modulo256_Calculate+0x2c>
        totalSum += data[count++];
 80069ea:	897b      	ldrh	r3, [r7, #10]
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	817a      	strh	r2, [r7, #10]
 80069f0:	461a      	mov	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
    while (count < length)
 8006a00:	897a      	ldrh	r2, [r7, #10]
 8006a02:	887b      	ldrh	r3, [r7, #2]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d3f0      	bcc.n	80069ea <Modulo256_Calculate+0x16>

    return totalSum % 256;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	425a      	negs	r2, r3
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	bf58      	it	pl
 8006a12:	4253      	negpl	r3, r2
 8006a14:	b2db      	uxtb	r3, r3
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui16 CRC16_Calculate (ui8 *data, ui16 length)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	807b      	strh	r3, [r7, #2]
    ui16 CRC_Register = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	82fb      	strh	r3, [r7, #22]
    ui16 polynom = 0x8005;
 8006a32:	f248 0305 	movw	r3, #32773	; 0x8005
 8006a36:	823b      	strh	r3, [r7, #16]
    ui8  shiftRegister,
    	 dataBit,
		 CRC_Bit;

    for (ui16 i = 0; i < length; i++)
 8006a38:	2300      	movs	r3, #0
 8006a3a:	827b      	strh	r3, [r7, #18]
 8006a3c:	e027      	b.n	8006a8e <CRC16_Calculate+0x6c>
    {
        for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006a3e:	2301      	movs	r3, #1
 8006a40:	757b      	strb	r3, [r7, #21]
 8006a42:	e01e      	b.n	8006a82 <CRC16_Calculate+0x60>
        {
        	dataBit = (data[i] & shiftRegister) ? 1 : 0;
 8006a44:	8a7b      	ldrh	r3, [r7, #18]
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	4413      	add	r3, r2
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	7d7b      	ldrb	r3, [r7, #21]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf14      	ite	ne
 8006a56:	2301      	movne	r3, #1
 8006a58:	2300      	moveq	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	73fb      	strb	r3, [r7, #15]
            CRC_Bit = CRC_Register >> 15;
 8006a5e:	8afb      	ldrh	r3, [r7, #22]
 8006a60:	0bdb      	lsrs	r3, r3, #15
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	73bb      	strb	r3, [r7, #14]
            CRC_Register <<= 1;
 8006a66:	8afb      	ldrh	r3, [r7, #22]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	82fb      	strh	r3, [r7, #22]

            if (dataBit != CRC_Bit)
 8006a6c:	7bfa      	ldrb	r2, [r7, #15]
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d003      	beq.n	8006a7c <CRC16_Calculate+0x5a>
            	CRC_Register ^= polynom;
 8006a74:	8afa      	ldrh	r2, [r7, #22]
 8006a76:	8a3b      	ldrh	r3, [r7, #16]
 8006a78:	4053      	eors	r3, r2
 8006a7a:	82fb      	strh	r3, [r7, #22]
        for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006a7c:	7d7b      	ldrb	r3, [r7, #21]
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	757b      	strb	r3, [r7, #21]
 8006a82:	7d7b      	ldrb	r3, [r7, #21]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1dd      	bne.n	8006a44 <CRC16_Calculate+0x22>
    for (ui16 i = 0; i < length; i++)
 8006a88:	8a7b      	ldrh	r3, [r7, #18]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	827b      	strh	r3, [r7, #18]
 8006a8e:	8a7a      	ldrh	r2, [r7, #18]
 8006a90:	887b      	ldrh	r3, [r7, #2]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d3d3      	bcc.n	8006a3e <CRC16_Calculate+0x1c>
        }
    }

    return CRC_Register;
 8006a96:	8afb      	ldrh	r3, [r7, #22]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <PrintMessage>:
	 *	@param	*generalSBGC - serial connection descriptor
	 *	@param	*data - printable data
	 *	@param	length - printable data size
	 */
	void PrintMessage (GeneralSBGC_t *generalSBGC, char *data, ui16 length)
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
		generalSBGC->TxDebugFunc(data, length);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	68b8      	ldr	r0, [r7, #8]
 8006abc:	4798      	blx	r3
	}
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <PrintStructElement>:
	 *	@param	*data - printable variable
	 *	@param	*str - debug info string
	 *	@param	vType - type of variable
	 */
	void PrintStructElement (GeneralSBGC_t *generalSBGC, i32 data, char *str, VarTypes_t vType)
	{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b094      	sub	sp, #80	; 0x50
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	70fb      	strb	r3, [r7, #3]
		char debugStr [50];
		ui8 debugStrLength;

		switch (vType)
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	2b06      	cmp	r3, #6
 8006adc:	d831      	bhi.n	8006b42 <PrintStructElement+0x7a>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <PrintStructElement+0x1c>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b01 	.word	0x08006b01
 8006ae8:	08006b11 	.word	0x08006b11
 8006aec:	08006b01 	.word	0x08006b01
 8006af0:	08006b11 	.word	0x08006b11
 8006af4:	08006b01 	.word	0x08006b01
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b21 	.word	0x08006b21
			case _UNSIGNED_INT_ :

				#ifdef _L32__
					sprintf(debugStr, "%s %u\n", str, (ui32)data);
				#else
					sprintf(debugStr, "%s %lu\n", str, (ui32)data);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f107 0014 	add.w	r0, r7, #20
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	491c      	ldr	r1, [pc, #112]	; (8006b7c <PrintStructElement+0xb4>)
 8006b0a:	f001 f963 	bl	8007dd4 <siprintf>
				#endif

				break;
 8006b0e:	e020      	b.n	8006b52 <PrintStructElement+0x8a>
			case _SIGNED_INT_ :

				#ifdef _L32__
					sprintf(debugStr, "%s %i\n", str, data);
				#else
					sprintf(debugStr, "%s %li\n", str, data);
 8006b10:	f107 0014 	add.w	r0, r7, #20
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	4919      	ldr	r1, [pc, #100]	; (8006b80 <PrintStructElement+0xb8>)
 8006b1a:	f001 f95b 	bl	8007dd4 <siprintf>
				#endif

				break;
 8006b1e:	e018      	b.n	8006b52 <PrintStructElement+0x8a>

			case _FLOAT_ :
				sprintf(debugStr, "FLOAT %s %f\n", str, (float)data);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006b2e:	f107 0314 	add.w	r3, r7, #20
 8006b32:	ed8d 7b00 	vstr	d7, [sp]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	4912      	ldr	r1, [pc, #72]	; (8006b84 <PrintStructElement+0xbc>)
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f001 f94a 	bl	8007dd4 <siprintf>
				break;
 8006b40:	e007      	b.n	8006b52 <PrintStructElement+0x8a>
			default :

				#ifdef _L32__
					sprintf(debugStr, "%s %u\n", str, (ui32)data);
				#else
					sprintf(debugStr, "%s %lu\n", str, (ui32)data);
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f107 0014 	add.w	r0, r7, #20
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	490c      	ldr	r1, [pc, #48]	; (8006b7c <PrintStructElement+0xb4>)
 8006b4c:	f001 f942 	bl	8007dd4 <siprintf>
				#endif

				break;
 8006b50:	bf00      	nop
		}

		debugStrLength = strlen(debugStr);
 8006b52:	f107 0314 	add.w	r3, r7, #20
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7f9 fb72 	bl	8000240 <strlen>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		PrintMessage(generalSBGC, debugStr, debugStrLength);
 8006b62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	f107 0314 	add.w	r3, r7, #20
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff ff98 	bl	8006aa4 <PrintMessage>
	}
 8006b74:	bf00      	nop
 8006b76:	3748      	adds	r7, #72	; 0x48
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	0800b734 	.word	0x0800b734
 8006b80:	0800b73c 	.word	0x0800b73c
 8006b84:	0800b744 	.word	0x0800b744

08006b88 <ConvertErrorToString>:
	 *	@param	*str - writable buffer
	 *
	 *	@return	Length of a writable string
	 */
	ui8 ConvertErrorToString (TxRxStatus_t txRxStatus, char *str)
	{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
		switch (txRxStatus)
 8006b94:	79fb      	ldrb	r3, [r7, #7]
 8006b96:	2b09      	cmp	r3, #9
 8006b98:	d85c      	bhi.n	8006c54 <ConvertErrorToString+0xcc>
 8006b9a:	a201      	add	r2, pc, #4	; (adr r2, 8006ba0 <ConvertErrorToString+0x18>)
 8006b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba0:	08006bc9 	.word	0x08006bc9
 8006ba4:	08006bd7 	.word	0x08006bd7
 8006ba8:	08006be5 	.word	0x08006be5
 8006bac:	08006bf3 	.word	0x08006bf3
 8006bb0:	08006c01 	.word	0x08006c01
 8006bb4:	08006c0f 	.word	0x08006c0f
 8006bb8:	08006c1d 	.word	0x08006c1d
 8006bbc:	08006c2b 	.word	0x08006c2b
 8006bc0:	08006c39 	.word	0x08006c39
 8006bc4:	08006c47 	.word	0x08006c47
		{
			case TX_RX_OK :
				memcpy(str, TEXT_SIZE_(nameof(TX_RX_OK)));
 8006bc8:	2208      	movs	r2, #8
 8006bca:	4925      	ldr	r1, [pc, #148]	; (8006c60 <ConvertErrorToString+0xd8>)
 8006bcc:	6838      	ldr	r0, [r7, #0]
 8006bce:	f000 f9ab 	bl	8006f28 <memcpy>
				return strlen(nameof(TX_RX_OK));
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	e03f      	b.n	8006c56 <ConvertErrorToString+0xce>

						case TX_BUFFER_OVERFLOW_ERROR :
							memcpy(str, TEXT_SIZE_(nameof(TX_BUFFER_OVERFLOW_ERROR)));
 8006bd6:	2218      	movs	r2, #24
 8006bd8:	4922      	ldr	r1, [pc, #136]	; (8006c64 <ConvertErrorToString+0xdc>)
 8006bda:	6838      	ldr	r0, [r7, #0]
 8006bdc:	f000 f9a4 	bl	8006f28 <memcpy>
							return strlen(nameof(TX_BUFFER_OVERFLOW_ERROR));
 8006be0:	2318      	movs	r3, #24
 8006be2:	e038      	b.n	8006c56 <ConvertErrorToString+0xce>

			case RX_START_PARSE :
				memcpy(str, TEXT_SIZE_(nameof(RX_START_PARSE)));
 8006be4:	220e      	movs	r2, #14
 8006be6:	4920      	ldr	r1, [pc, #128]	; (8006c68 <ConvertErrorToString+0xe0>)
 8006be8:	6838      	ldr	r0, [r7, #0]
 8006bea:	f000 f99d 	bl	8006f28 <memcpy>
				return strlen(nameof(RX_START_PARSE));
 8006bee:	230e      	movs	r3, #14
 8006bf0:	e031      	b.n	8006c56 <ConvertErrorToString+0xce>

						case RX_EMPTY_BUFF_ERROR :
							memcpy(str, TEXT_SIZE_(nameof(RX_EMPTY_BUFF_ERROR)));
 8006bf2:	2213      	movs	r2, #19
 8006bf4:	491d      	ldr	r1, [pc, #116]	; (8006c6c <ConvertErrorToString+0xe4>)
 8006bf6:	6838      	ldr	r0, [r7, #0]
 8006bf8:	f000 f996 	bl	8006f28 <memcpy>
							return strlen(nameof(RX_EMPTY_BUFF_ERROR));
 8006bfc:	2313      	movs	r3, #19
 8006bfe:	e02a      	b.n	8006c56 <ConvertErrorToString+0xce>

			case RX_BUFFER_REALTIME_ERROR :
				memcpy(str, TEXT_SIZE_(nameof(RX_BUFFER_REALTIME_ERROR)));
 8006c00:	2218      	movs	r2, #24
 8006c02:	491b      	ldr	r1, [pc, #108]	; (8006c70 <ConvertErrorToString+0xe8>)
 8006c04:	6838      	ldr	r0, [r7, #0]
 8006c06:	f000 f98f 	bl	8006f28 <memcpy>
				return strlen(nameof(RX_BUFFER_REALTIME_ERROR));
 8006c0a:	2318      	movs	r3, #24
 8006c0c:	e023      	b.n	8006c56 <ConvertErrorToString+0xce>

						case RX_HEADER_CHECKSUM_ERROR :
							memcpy(str, TEXT_SIZE_(nameof(RX_HEADER_CHECKSUM_ERROR)));
 8006c0e:	2218      	movs	r2, #24
 8006c10:	4918      	ldr	r1, [pc, #96]	; (8006c74 <ConvertErrorToString+0xec>)
 8006c12:	6838      	ldr	r0, [r7, #0]
 8006c14:	f000 f988 	bl	8006f28 <memcpy>
							return strlen(nameof(RX_HEADER_CHECKSUM_ERROR));
 8006c18:	2318      	movs	r3, #24
 8006c1a:	e01c      	b.n	8006c56 <ConvertErrorToString+0xce>

			case RX_PAYLOAD_CHECKSUM_ERROR :
				memcpy(str, TEXT_SIZE_(nameof(RX_PAYLOAD_CHECKSUM_ERROR)));
 8006c1c:	2219      	movs	r2, #25
 8006c1e:	4916      	ldr	r1, [pc, #88]	; (8006c78 <ConvertErrorToString+0xf0>)
 8006c20:	6838      	ldr	r0, [r7, #0]
 8006c22:	f000 f981 	bl	8006f28 <memcpy>
				return strlen(nameof(RX_PAYLOAD_CHECKSUM_ERROR));
 8006c26:	2319      	movs	r3, #25
 8006c28:	e015      	b.n	8006c56 <ConvertErrorToString+0xce>

						case RX_BUFFER_OVERFLOW_ERROR :
							memcpy(str, TEXT_SIZE_(nameof(RX_BUFFER_OVERFLOW_ERROR)));
 8006c2a:	2218      	movs	r2, #24
 8006c2c:	4913      	ldr	r1, [pc, #76]	; (8006c7c <ConvertErrorToString+0xf4>)
 8006c2e:	6838      	ldr	r0, [r7, #0]
 8006c30:	f000 f97a 	bl	8006f28 <memcpy>
							return strlen(nameof(RX_BUFFER_OVERFLOW_ERROR));
 8006c34:	2318      	movs	r3, #24
 8006c36:	e00e      	b.n	8006c56 <ConvertErrorToString+0xce>

			case RX_TIMEOUT_ERROR :
				memcpy(str, TEXT_SIZE_(nameof(RX_TIMEOUT_ERROR)));
 8006c38:	2210      	movs	r2, #16
 8006c3a:	4911      	ldr	r1, [pc, #68]	; (8006c80 <ConvertErrorToString+0xf8>)
 8006c3c:	6838      	ldr	r0, [r7, #0]
 8006c3e:	f000 f973 	bl	8006f28 <memcpy>
				return strlen(nameof(RX_TIMEOUT_ERROR));
 8006c42:	2310      	movs	r3, #16
 8006c44:	e007      	b.n	8006c56 <ConvertErrorToString+0xce>

						case NOT_SUPPORTED_BY_FIRMWARE :
							memcpy(str, TEXT_SIZE_(nameof(NOT_SUPPORTED_BY_FIRMWARE)));
 8006c46:	2219      	movs	r2, #25
 8006c48:	490e      	ldr	r1, [pc, #56]	; (8006c84 <ConvertErrorToString+0xfc>)
 8006c4a:	6838      	ldr	r0, [r7, #0]
 8006c4c:	f000 f96c 	bl	8006f28 <memcpy>
							return strlen(nameof(NOT_SUPPORTED_BY_FIRMWARE));
 8006c50:	2319      	movs	r3, #25
 8006c52:	e000      	b.n	8006c56 <ConvertErrorToString+0xce>
		}

		return 0;
 8006c54:	2300      	movs	r3, #0
	}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	0800b754 	.word	0x0800b754
 8006c64:	0800b760 	.word	0x0800b760
 8006c68:	0800b77c 	.word	0x0800b77c
 8006c6c:	0800b78c 	.word	0x0800b78c
 8006c70:	0800b7a0 	.word	0x0800b7a0
 8006c74:	0800b7bc 	.word	0x0800b7bc
 8006c78:	0800b7d8 	.word	0x0800b7d8
 8006c7c:	0800b7f4 	.word	0x0800b7f4
 8006c80:	0800b810 	.word	0x0800b810
 8006c84:	0800b824 	.word	0x0800b824

08006c88 <SBGC32_Control>:
 * 	@param 	*control - structure containing gimbal control data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_Control (GeneralSBGC_t *generalSBGC, const Control_t *control)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b0c4      	sub	sp, #272	; 0x110
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c96:	6018      	str	r0, [r3, #0]
 8006c98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ca0:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL);
 8006ca2:	f107 030c 	add.w	r3, r7, #12
 8006ca6:	2143      	movs	r1, #67	; 0x43
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff fb00 	bl	80062ae <InitCmdWrite>
	WriteBuff(&cmd, control, sizeof(Control_t), PM_CONTROL);
 8006cae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cb2:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8006cb6:	f107 000c 	add.w	r0, r7, #12
 8006cba:	2301      	movs	r3, #1
 8006cbc:	220f      	movs	r2, #15
 8006cbe:	6809      	ldr	r1, [r1, #0]
 8006cc0:	f7ff f9dc 	bl	800607c <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8006cc4:	f107 020c 	add.w	r2, r7, #12
 8006cc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ccc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	f7fe ff10 	bl	8005af8 <SBGC32_TX>
	/** When setting the ControlConfig_t.flags, may send confirmation */
	return generalSBGC->_ParserCurrentStatus;
 8006cd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <SBGC32_ControlConfig>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ControlConfig (GeneralSBGC_t *generalSBGC, const ControlConfig_t *controlConfig, ConfirmationState_t *confirmationState)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b0c6      	sub	sp, #280	; 0x118
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006cfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cfe:	6018      	str	r0, [r3, #0]
 8006d00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006d08:	6019      	str	r1, [r3, #0]
 8006d0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006d12:	601a      	str	r2, [r3, #0]
	if (generalSBGC->_firmwareVersion < 2610)
 8006d14:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d18:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006d20:	f640 2231 	movw	r2, #2609	; 0xa31
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d801      	bhi.n	8006d2c <SBGC32_ControlConfig+0x3c>
		return NOT_SUPPORTED_BY_FIRMWARE;
 8006d28:	2309      	movs	r3, #9
 8006d2a:	e032      	b.n	8006d92 <SBGC32_ControlConfig+0xa2>

	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL_CONFIG);
 8006d2c:	f107 0314 	add.w	r3, r7, #20
 8006d30:	215a      	movs	r1, #90	; 0x5a
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fabb 	bl	80062ae <InitCmdWrite>
	WriteBuff(&cmd, controlConfig, sizeof(ControlConfig_t), PM_CONTROL_CONFIG);
 8006d38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d3c:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8006d40:	f107 0014 	add.w	r0, r7, #20
 8006d44:	2302      	movs	r3, #2
 8006d46:	2229      	movs	r2, #41	; 0x29
 8006d48:	6809      	ldr	r1, [r1, #0]
 8006d4a:	f7ff f997 	bl	800607c <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8006d4e:	f107 0214 	add.w	r2, r7, #20
 8006d52:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f7fe fecb 	bl	8005af8 <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 8006d62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d70:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8006d74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d7c:	6809      	ldr	r1, [r1, #0]
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	f7ff fbfe 	bl	8006580 <SBGC32_CheckConfirmation>
	return generalSBGC->_ParserCurrentStatus;
 8006d84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <SBGC32_ExecuteMenu>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ExecuteMenu (GeneralSBGC_t *generalSBGC, MenuCommands_t cmdID, ConfirmationState_t *confirmationState)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b0c6      	sub	sp, #280	; 0x118
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006da6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006daa:	6018      	str	r0, [r3, #0]
 8006dac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006db0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006dba:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_EXECUTE_MENU);
 8006dc2:	f107 0314 	add.w	r3, r7, #20
 8006dc6:	2145      	movs	r1, #69	; 0x45
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7ff fa70 	bl	80062ae <InitCmdWrite>
	WriteByte(&cmd, cmdID);
 8006dce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006dd2:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8006dd6:	781a      	ldrb	r2, [r3, #0]
 8006dd8:	f107 0314 	add.w	r3, r7, #20
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff f9f5 	bl	80061ce <WriteByte>
	SBGC32_TX(generalSBGC, &cmd);
 8006de4:	f107 0214 	add.w	r2, r7, #20
 8006de8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006dec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006df0:	4611      	mov	r1, r2
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	f7fe fe80 	bl	8005af8 <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 8006df8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006dfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e00:	781a      	ldrb	r2, [r3, #0]
 8006e02:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e06:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8006e0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e12:	6809      	ldr	r1, [r1, #0]
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	f7ff fbb3 	bl	8006580 <SBGC32_CheckConfirmation>
	return generalSBGC->_ParserCurrentStatus;
 8006e1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <SBGC32_SetServoOut>:
 *			values for each output
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_SetServoOut (GeneralSBGC_t *generalSBGC, const i16 servoTime [8])
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b0c4      	sub	sp, #272	; 0x110
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e40:	6018      	str	r0, [r3, #0]
 8006e42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e46:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e4a:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_SERVO_OUT);
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	2124      	movs	r1, #36	; 0x24
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7ff fa2b 	bl	80062ae <InitCmdWrite>
	FOR_(i, 8) WriteWord(&cmd, servoTime[i]);
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e5e:	e016      	b.n	8006e8e <SBGC32_SetServoOut+0x5c>
 8006e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8006e6a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	4413      	add	r3, r2
 8006e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	f107 0308 	add.w	r3, r7, #8
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff f9d4 	bl	800622c <WriteWord>
 8006e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e88:	3301      	adds	r3, #1
 8006e8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e92:	2b07      	cmp	r3, #7
 8006e94:	dde4      	ble.n	8006e60 <SBGC32_SetServoOut+0x2e>
	SBGC32_TX(generalSBGC, &cmd);
 8006e96:	f107 0208 	add.w	r2, r7, #8
 8006e9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	f7fe fe27 	bl	8005af8 <SBGC32_TX>
	/* no need confirmation */
	return generalSBGC->_ParserCurrentStatus;
 8006eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006eae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	; (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	2000001c 	.word	0x2000001c

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4d0d      	ldr	r5, [pc, #52]	; (8006f08 <__libc_init_array+0x38>)
 8006ed4:	4c0d      	ldr	r4, [pc, #52]	; (8006f0c <__libc_init_array+0x3c>)
 8006ed6:	1b64      	subs	r4, r4, r5
 8006ed8:	10a4      	asrs	r4, r4, #2
 8006eda:	2600      	movs	r6, #0
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	4d0b      	ldr	r5, [pc, #44]	; (8006f10 <__libc_init_array+0x40>)
 8006ee2:	4c0c      	ldr	r4, [pc, #48]	; (8006f14 <__libc_init_array+0x44>)
 8006ee4:	f004 fb84 	bl	800b5f0 <_init>
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	2600      	movs	r6, #0
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef8:	4798      	blx	r3
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f02:	4798      	blx	r3
 8006f04:	3601      	adds	r6, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	0800bd6c 	.word	0x0800bd6c
 8006f0c:	0800bd6c 	.word	0x0800bd6c
 8006f10:	0800bd6c 	.word	0x0800bd6c
 8006f14:	0800bd70 	.word	0x0800bd70

08006f18 <malloc>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <malloc+0xc>)
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f000 b885 	b.w	800702c <_malloc_r>
 8006f22:	bf00      	nop
 8006f24:	2000001c 	.word	0x2000001c

08006f28 <memcpy>:
 8006f28:	440a      	add	r2, r1
 8006f2a:	4291      	cmp	r1, r2
 8006f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f30:	d100      	bne.n	8006f34 <memcpy+0xc>
 8006f32:	4770      	bx	lr
 8006f34:	b510      	push	{r4, lr}
 8006f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f3e:	4291      	cmp	r1, r2
 8006f40:	d1f9      	bne.n	8006f36 <memcpy+0xe>
 8006f42:	bd10      	pop	{r4, pc}

08006f44 <memset>:
 8006f44:	4402      	add	r2, r0
 8006f46:	4603      	mov	r3, r0
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d100      	bne.n	8006f4e <memset+0xa>
 8006f4c:	4770      	bx	lr
 8006f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f52:	e7f9      	b.n	8006f48 <memset+0x4>

08006f54 <_free_r>:
 8006f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d044      	beq.n	8006fe4 <_free_r+0x90>
 8006f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f5e:	9001      	str	r0, [sp, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f1a1 0404 	sub.w	r4, r1, #4
 8006f66:	bfb8      	it	lt
 8006f68:	18e4      	addlt	r4, r4, r3
 8006f6a:	f002 ff2d 	bl	8009dc8 <__malloc_lock>
 8006f6e:	4a1e      	ldr	r2, [pc, #120]	; (8006fe8 <_free_r+0x94>)
 8006f70:	9801      	ldr	r0, [sp, #4]
 8006f72:	6813      	ldr	r3, [r2, #0]
 8006f74:	b933      	cbnz	r3, 8006f84 <_free_r+0x30>
 8006f76:	6063      	str	r3, [r4, #4]
 8006f78:	6014      	str	r4, [r2, #0]
 8006f7a:	b003      	add	sp, #12
 8006f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f80:	f002 bf28 	b.w	8009dd4 <__malloc_unlock>
 8006f84:	42a3      	cmp	r3, r4
 8006f86:	d908      	bls.n	8006f9a <_free_r+0x46>
 8006f88:	6825      	ldr	r5, [r4, #0]
 8006f8a:	1961      	adds	r1, r4, r5
 8006f8c:	428b      	cmp	r3, r1
 8006f8e:	bf01      	itttt	eq
 8006f90:	6819      	ldreq	r1, [r3, #0]
 8006f92:	685b      	ldreq	r3, [r3, #4]
 8006f94:	1949      	addeq	r1, r1, r5
 8006f96:	6021      	streq	r1, [r4, #0]
 8006f98:	e7ed      	b.n	8006f76 <_free_r+0x22>
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	b10b      	cbz	r3, 8006fa4 <_free_r+0x50>
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d9fa      	bls.n	8006f9a <_free_r+0x46>
 8006fa4:	6811      	ldr	r1, [r2, #0]
 8006fa6:	1855      	adds	r5, r2, r1
 8006fa8:	42a5      	cmp	r5, r4
 8006faa:	d10b      	bne.n	8006fc4 <_free_r+0x70>
 8006fac:	6824      	ldr	r4, [r4, #0]
 8006fae:	4421      	add	r1, r4
 8006fb0:	1854      	adds	r4, r2, r1
 8006fb2:	42a3      	cmp	r3, r4
 8006fb4:	6011      	str	r1, [r2, #0]
 8006fb6:	d1e0      	bne.n	8006f7a <_free_r+0x26>
 8006fb8:	681c      	ldr	r4, [r3, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	6053      	str	r3, [r2, #4]
 8006fbe:	4421      	add	r1, r4
 8006fc0:	6011      	str	r1, [r2, #0]
 8006fc2:	e7da      	b.n	8006f7a <_free_r+0x26>
 8006fc4:	d902      	bls.n	8006fcc <_free_r+0x78>
 8006fc6:	230c      	movs	r3, #12
 8006fc8:	6003      	str	r3, [r0, #0]
 8006fca:	e7d6      	b.n	8006f7a <_free_r+0x26>
 8006fcc:	6825      	ldr	r5, [r4, #0]
 8006fce:	1961      	adds	r1, r4, r5
 8006fd0:	428b      	cmp	r3, r1
 8006fd2:	bf04      	itt	eq
 8006fd4:	6819      	ldreq	r1, [r3, #0]
 8006fd6:	685b      	ldreq	r3, [r3, #4]
 8006fd8:	6063      	str	r3, [r4, #4]
 8006fda:	bf04      	itt	eq
 8006fdc:	1949      	addeq	r1, r1, r5
 8006fde:	6021      	streq	r1, [r4, #0]
 8006fe0:	6054      	str	r4, [r2, #4]
 8006fe2:	e7ca      	b.n	8006f7a <_free_r+0x26>
 8006fe4:	b003      	add	sp, #12
 8006fe6:	bd30      	pop	{r4, r5, pc}
 8006fe8:	20000460 	.word	0x20000460

08006fec <sbrk_aligned>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	4e0e      	ldr	r6, [pc, #56]	; (8007028 <sbrk_aligned+0x3c>)
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	6831      	ldr	r1, [r6, #0]
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	b911      	cbnz	r1, 8006ffe <sbrk_aligned+0x12>
 8006ff8:	f000 fed6 	bl	8007da8 <_sbrk_r>
 8006ffc:	6030      	str	r0, [r6, #0]
 8006ffe:	4621      	mov	r1, r4
 8007000:	4628      	mov	r0, r5
 8007002:	f000 fed1 	bl	8007da8 <_sbrk_r>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	d00a      	beq.n	8007020 <sbrk_aligned+0x34>
 800700a:	1cc4      	adds	r4, r0, #3
 800700c:	f024 0403 	bic.w	r4, r4, #3
 8007010:	42a0      	cmp	r0, r4
 8007012:	d007      	beq.n	8007024 <sbrk_aligned+0x38>
 8007014:	1a21      	subs	r1, r4, r0
 8007016:	4628      	mov	r0, r5
 8007018:	f000 fec6 	bl	8007da8 <_sbrk_r>
 800701c:	3001      	adds	r0, #1
 800701e:	d101      	bne.n	8007024 <sbrk_aligned+0x38>
 8007020:	f04f 34ff 	mov.w	r4, #4294967295
 8007024:	4620      	mov	r0, r4
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	20000464 	.word	0x20000464

0800702c <_malloc_r>:
 800702c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007030:	1ccd      	adds	r5, r1, #3
 8007032:	f025 0503 	bic.w	r5, r5, #3
 8007036:	3508      	adds	r5, #8
 8007038:	2d0c      	cmp	r5, #12
 800703a:	bf38      	it	cc
 800703c:	250c      	movcc	r5, #12
 800703e:	2d00      	cmp	r5, #0
 8007040:	4607      	mov	r7, r0
 8007042:	db01      	blt.n	8007048 <_malloc_r+0x1c>
 8007044:	42a9      	cmp	r1, r5
 8007046:	d905      	bls.n	8007054 <_malloc_r+0x28>
 8007048:	230c      	movs	r3, #12
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	2600      	movs	r6, #0
 800704e:	4630      	mov	r0, r6
 8007050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007054:	4e2e      	ldr	r6, [pc, #184]	; (8007110 <_malloc_r+0xe4>)
 8007056:	f002 feb7 	bl	8009dc8 <__malloc_lock>
 800705a:	6833      	ldr	r3, [r6, #0]
 800705c:	461c      	mov	r4, r3
 800705e:	bb34      	cbnz	r4, 80070ae <_malloc_r+0x82>
 8007060:	4629      	mov	r1, r5
 8007062:	4638      	mov	r0, r7
 8007064:	f7ff ffc2 	bl	8006fec <sbrk_aligned>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	4604      	mov	r4, r0
 800706c:	d14d      	bne.n	800710a <_malloc_r+0xde>
 800706e:	6834      	ldr	r4, [r6, #0]
 8007070:	4626      	mov	r6, r4
 8007072:	2e00      	cmp	r6, #0
 8007074:	d140      	bne.n	80070f8 <_malloc_r+0xcc>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	4631      	mov	r1, r6
 800707a:	4638      	mov	r0, r7
 800707c:	eb04 0803 	add.w	r8, r4, r3
 8007080:	f000 fe92 	bl	8007da8 <_sbrk_r>
 8007084:	4580      	cmp	r8, r0
 8007086:	d13a      	bne.n	80070fe <_malloc_r+0xd2>
 8007088:	6821      	ldr	r1, [r4, #0]
 800708a:	3503      	adds	r5, #3
 800708c:	1a6d      	subs	r5, r5, r1
 800708e:	f025 0503 	bic.w	r5, r5, #3
 8007092:	3508      	adds	r5, #8
 8007094:	2d0c      	cmp	r5, #12
 8007096:	bf38      	it	cc
 8007098:	250c      	movcc	r5, #12
 800709a:	4629      	mov	r1, r5
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff ffa5 	bl	8006fec <sbrk_aligned>
 80070a2:	3001      	adds	r0, #1
 80070a4:	d02b      	beq.n	80070fe <_malloc_r+0xd2>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	442b      	add	r3, r5
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	e00e      	b.n	80070cc <_malloc_r+0xa0>
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	1b52      	subs	r2, r2, r5
 80070b2:	d41e      	bmi.n	80070f2 <_malloc_r+0xc6>
 80070b4:	2a0b      	cmp	r2, #11
 80070b6:	d916      	bls.n	80070e6 <_malloc_r+0xba>
 80070b8:	1961      	adds	r1, r4, r5
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	6025      	str	r5, [r4, #0]
 80070be:	bf18      	it	ne
 80070c0:	6059      	strne	r1, [r3, #4]
 80070c2:	6863      	ldr	r3, [r4, #4]
 80070c4:	bf08      	it	eq
 80070c6:	6031      	streq	r1, [r6, #0]
 80070c8:	5162      	str	r2, [r4, r5]
 80070ca:	604b      	str	r3, [r1, #4]
 80070cc:	4638      	mov	r0, r7
 80070ce:	f104 060b 	add.w	r6, r4, #11
 80070d2:	f002 fe7f 	bl	8009dd4 <__malloc_unlock>
 80070d6:	f026 0607 	bic.w	r6, r6, #7
 80070da:	1d23      	adds	r3, r4, #4
 80070dc:	1af2      	subs	r2, r6, r3
 80070de:	d0b6      	beq.n	800704e <_malloc_r+0x22>
 80070e0:	1b9b      	subs	r3, r3, r6
 80070e2:	50a3      	str	r3, [r4, r2]
 80070e4:	e7b3      	b.n	800704e <_malloc_r+0x22>
 80070e6:	6862      	ldr	r2, [r4, #4]
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	bf0c      	ite	eq
 80070ec:	6032      	streq	r2, [r6, #0]
 80070ee:	605a      	strne	r2, [r3, #4]
 80070f0:	e7ec      	b.n	80070cc <_malloc_r+0xa0>
 80070f2:	4623      	mov	r3, r4
 80070f4:	6864      	ldr	r4, [r4, #4]
 80070f6:	e7b2      	b.n	800705e <_malloc_r+0x32>
 80070f8:	4634      	mov	r4, r6
 80070fa:	6876      	ldr	r6, [r6, #4]
 80070fc:	e7b9      	b.n	8007072 <_malloc_r+0x46>
 80070fe:	230c      	movs	r3, #12
 8007100:	603b      	str	r3, [r7, #0]
 8007102:	4638      	mov	r0, r7
 8007104:	f002 fe66 	bl	8009dd4 <__malloc_unlock>
 8007108:	e7a1      	b.n	800704e <_malloc_r+0x22>
 800710a:	6025      	str	r5, [r4, #0]
 800710c:	e7de      	b.n	80070cc <_malloc_r+0xa0>
 800710e:	bf00      	nop
 8007110:	20000460 	.word	0x20000460

08007114 <__cvt>:
 8007114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007116:	ed2d 8b02 	vpush	{d8}
 800711a:	eeb0 8b40 	vmov.f64	d8, d0
 800711e:	b085      	sub	sp, #20
 8007120:	4617      	mov	r7, r2
 8007122:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007124:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007126:	ee18 2a90 	vmov	r2, s17
 800712a:	f025 0520 	bic.w	r5, r5, #32
 800712e:	2a00      	cmp	r2, #0
 8007130:	bfb6      	itet	lt
 8007132:	222d      	movlt	r2, #45	; 0x2d
 8007134:	2200      	movge	r2, #0
 8007136:	eeb1 8b40 	vneglt.f64	d8, d0
 800713a:	2d46      	cmp	r5, #70	; 0x46
 800713c:	460c      	mov	r4, r1
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	d004      	beq.n	800714c <__cvt+0x38>
 8007142:	2d45      	cmp	r5, #69	; 0x45
 8007144:	d100      	bne.n	8007148 <__cvt+0x34>
 8007146:	3401      	adds	r4, #1
 8007148:	2102      	movs	r1, #2
 800714a:	e000      	b.n	800714e <__cvt+0x3a>
 800714c:	2103      	movs	r1, #3
 800714e:	ab03      	add	r3, sp, #12
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	ab02      	add	r3, sp, #8
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4622      	mov	r2, r4
 8007158:	4633      	mov	r3, r6
 800715a:	eeb0 0b48 	vmov.f64	d0, d8
 800715e:	f001 fd3f 	bl	8008be0 <_dtoa_r>
 8007162:	2d47      	cmp	r5, #71	; 0x47
 8007164:	d101      	bne.n	800716a <__cvt+0x56>
 8007166:	07fb      	lsls	r3, r7, #31
 8007168:	d51a      	bpl.n	80071a0 <__cvt+0x8c>
 800716a:	2d46      	cmp	r5, #70	; 0x46
 800716c:	eb00 0204 	add.w	r2, r0, r4
 8007170:	d10c      	bne.n	800718c <__cvt+0x78>
 8007172:	7803      	ldrb	r3, [r0, #0]
 8007174:	2b30      	cmp	r3, #48	; 0x30
 8007176:	d107      	bne.n	8007188 <__cvt+0x74>
 8007178:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800717c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007180:	bf1c      	itt	ne
 8007182:	f1c4 0401 	rsbne	r4, r4, #1
 8007186:	6034      	strne	r4, [r6, #0]
 8007188:	6833      	ldr	r3, [r6, #0]
 800718a:	441a      	add	r2, r3
 800718c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007194:	bf08      	it	eq
 8007196:	9203      	streq	r2, [sp, #12]
 8007198:	2130      	movs	r1, #48	; 0x30
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	4293      	cmp	r3, r2
 800719e:	d307      	bcc.n	80071b0 <__cvt+0x9c>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071a4:	1a1b      	subs	r3, r3, r0
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	b005      	add	sp, #20
 80071aa:	ecbd 8b02 	vpop	{d8}
 80071ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b0:	1c5c      	adds	r4, r3, #1
 80071b2:	9403      	str	r4, [sp, #12]
 80071b4:	7019      	strb	r1, [r3, #0]
 80071b6:	e7f0      	b.n	800719a <__cvt+0x86>

080071b8 <__exponent>:
 80071b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ba:	4603      	mov	r3, r0
 80071bc:	2900      	cmp	r1, #0
 80071be:	bfb8      	it	lt
 80071c0:	4249      	neglt	r1, r1
 80071c2:	f803 2b02 	strb.w	r2, [r3], #2
 80071c6:	bfb4      	ite	lt
 80071c8:	222d      	movlt	r2, #45	; 0x2d
 80071ca:	222b      	movge	r2, #43	; 0x2b
 80071cc:	2909      	cmp	r1, #9
 80071ce:	7042      	strb	r2, [r0, #1]
 80071d0:	dd2a      	ble.n	8007228 <__exponent+0x70>
 80071d2:	f10d 0407 	add.w	r4, sp, #7
 80071d6:	46a4      	mov	ip, r4
 80071d8:	270a      	movs	r7, #10
 80071da:	46a6      	mov	lr, r4
 80071dc:	460a      	mov	r2, r1
 80071de:	fb91 f6f7 	sdiv	r6, r1, r7
 80071e2:	fb07 1516 	mls	r5, r7, r6, r1
 80071e6:	3530      	adds	r5, #48	; 0x30
 80071e8:	2a63      	cmp	r2, #99	; 0x63
 80071ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80071ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071f2:	4631      	mov	r1, r6
 80071f4:	dcf1      	bgt.n	80071da <__exponent+0x22>
 80071f6:	3130      	adds	r1, #48	; 0x30
 80071f8:	f1ae 0502 	sub.w	r5, lr, #2
 80071fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007200:	1c44      	adds	r4, r0, #1
 8007202:	4629      	mov	r1, r5
 8007204:	4561      	cmp	r1, ip
 8007206:	d30a      	bcc.n	800721e <__exponent+0x66>
 8007208:	f10d 0209 	add.w	r2, sp, #9
 800720c:	eba2 020e 	sub.w	r2, r2, lr
 8007210:	4565      	cmp	r5, ip
 8007212:	bf88      	it	hi
 8007214:	2200      	movhi	r2, #0
 8007216:	4413      	add	r3, r2
 8007218:	1a18      	subs	r0, r3, r0
 800721a:	b003      	add	sp, #12
 800721c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007222:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007226:	e7ed      	b.n	8007204 <__exponent+0x4c>
 8007228:	2330      	movs	r3, #48	; 0x30
 800722a:	3130      	adds	r1, #48	; 0x30
 800722c:	7083      	strb	r3, [r0, #2]
 800722e:	70c1      	strb	r1, [r0, #3]
 8007230:	1d03      	adds	r3, r0, #4
 8007232:	e7f1      	b.n	8007218 <__exponent+0x60>
 8007234:	0000      	movs	r0, r0
	...

08007238 <_printf_float>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	b08b      	sub	sp, #44	; 0x2c
 800723e:	460c      	mov	r4, r1
 8007240:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007244:	4616      	mov	r6, r2
 8007246:	461f      	mov	r7, r3
 8007248:	4605      	mov	r5, r0
 800724a:	f002 fda7 	bl	8009d9c <_localeconv_r>
 800724e:	f8d0 b000 	ldr.w	fp, [r0]
 8007252:	4658      	mov	r0, fp
 8007254:	f7f8 fff4 	bl	8000240 <strlen>
 8007258:	2300      	movs	r3, #0
 800725a:	9308      	str	r3, [sp, #32]
 800725c:	f8d8 3000 	ldr.w	r3, [r8]
 8007260:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	3307      	adds	r3, #7
 8007268:	f023 0307 	bic.w	r3, r3, #7
 800726c:	f103 0108 	add.w	r1, r3, #8
 8007270:	f8c8 1000 	str.w	r1, [r8]
 8007274:	4682      	mov	sl, r0
 8007276:	e9d3 0100 	ldrd	r0, r1, [r3]
 800727a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800727e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80074e0 <_printf_float+0x2a8>
 8007282:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007286:	eeb0 6bc0 	vabs.f64	d6, d0
 800728a:	eeb4 6b47 	vcmp.f64	d6, d7
 800728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007292:	dd24      	ble.n	80072de <_printf_float+0xa6>
 8007294:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729c:	d502      	bpl.n	80072a4 <_printf_float+0x6c>
 800729e:	232d      	movs	r3, #45	; 0x2d
 80072a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a4:	4b90      	ldr	r3, [pc, #576]	; (80074e8 <_printf_float+0x2b0>)
 80072a6:	4891      	ldr	r0, [pc, #580]	; (80074ec <_printf_float+0x2b4>)
 80072a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80072ac:	bf94      	ite	ls
 80072ae:	4698      	movls	r8, r3
 80072b0:	4680      	movhi	r8, r0
 80072b2:	2303      	movs	r3, #3
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	f022 0204 	bic.w	r2, r2, #4
 80072ba:	2300      	movs	r3, #0
 80072bc:	6022      	str	r2, [r4, #0]
 80072be:	9304      	str	r3, [sp, #16]
 80072c0:	9700      	str	r7, [sp, #0]
 80072c2:	4633      	mov	r3, r6
 80072c4:	aa09      	add	r2, sp, #36	; 0x24
 80072c6:	4621      	mov	r1, r4
 80072c8:	4628      	mov	r0, r5
 80072ca:	f000 f9d3 	bl	8007674 <_printf_common>
 80072ce:	3001      	adds	r0, #1
 80072d0:	f040 808a 	bne.w	80073e8 <_printf_float+0x1b0>
 80072d4:	f04f 30ff 	mov.w	r0, #4294967295
 80072d8:	b00b      	add	sp, #44	; 0x2c
 80072da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072de:	eeb4 0b40 	vcmp.f64	d0, d0
 80072e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e6:	d709      	bvc.n	80072fc <_printf_float+0xc4>
 80072e8:	ee10 3a90 	vmov	r3, s1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bfbc      	itt	lt
 80072f0:	232d      	movlt	r3, #45	; 0x2d
 80072f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072f6:	487e      	ldr	r0, [pc, #504]	; (80074f0 <_printf_float+0x2b8>)
 80072f8:	4b7e      	ldr	r3, [pc, #504]	; (80074f4 <_printf_float+0x2bc>)
 80072fa:	e7d5      	b.n	80072a8 <_printf_float+0x70>
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007302:	9104      	str	r1, [sp, #16]
 8007304:	1c59      	adds	r1, r3, #1
 8007306:	d13c      	bne.n	8007382 <_printf_float+0x14a>
 8007308:	2306      	movs	r3, #6
 800730a:	6063      	str	r3, [r4, #4]
 800730c:	2300      	movs	r3, #0
 800730e:	9303      	str	r3, [sp, #12]
 8007310:	ab08      	add	r3, sp, #32
 8007312:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007316:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800731a:	ab07      	add	r3, sp, #28
 800731c:	6861      	ldr	r1, [r4, #4]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	6022      	str	r2, [r4, #0]
 8007322:	f10d 031b 	add.w	r3, sp, #27
 8007326:	4628      	mov	r0, r5
 8007328:	f7ff fef4 	bl	8007114 <__cvt>
 800732c:	9b04      	ldr	r3, [sp, #16]
 800732e:	9907      	ldr	r1, [sp, #28]
 8007330:	2b47      	cmp	r3, #71	; 0x47
 8007332:	4680      	mov	r8, r0
 8007334:	d108      	bne.n	8007348 <_printf_float+0x110>
 8007336:	1cc8      	adds	r0, r1, #3
 8007338:	db02      	blt.n	8007340 <_printf_float+0x108>
 800733a:	6863      	ldr	r3, [r4, #4]
 800733c:	4299      	cmp	r1, r3
 800733e:	dd41      	ble.n	80073c4 <_printf_float+0x18c>
 8007340:	f1a9 0902 	sub.w	r9, r9, #2
 8007344:	fa5f f989 	uxtb.w	r9, r9
 8007348:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800734c:	d820      	bhi.n	8007390 <_printf_float+0x158>
 800734e:	3901      	subs	r1, #1
 8007350:	464a      	mov	r2, r9
 8007352:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007356:	9107      	str	r1, [sp, #28]
 8007358:	f7ff ff2e 	bl	80071b8 <__exponent>
 800735c:	9a08      	ldr	r2, [sp, #32]
 800735e:	9004      	str	r0, [sp, #16]
 8007360:	1813      	adds	r3, r2, r0
 8007362:	2a01      	cmp	r2, #1
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	dc02      	bgt.n	800736e <_printf_float+0x136>
 8007368:	6822      	ldr	r2, [r4, #0]
 800736a:	07d2      	lsls	r2, r2, #31
 800736c:	d501      	bpl.n	8007372 <_printf_float+0x13a>
 800736e:	3301      	adds	r3, #1
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0a2      	beq.n	80072c0 <_printf_float+0x88>
 800737a:	232d      	movs	r3, #45	; 0x2d
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	e79e      	b.n	80072c0 <_printf_float+0x88>
 8007382:	9904      	ldr	r1, [sp, #16]
 8007384:	2947      	cmp	r1, #71	; 0x47
 8007386:	d1c1      	bne.n	800730c <_printf_float+0xd4>
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1bf      	bne.n	800730c <_printf_float+0xd4>
 800738c:	2301      	movs	r3, #1
 800738e:	e7bc      	b.n	800730a <_printf_float+0xd2>
 8007390:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007394:	d118      	bne.n	80073c8 <_printf_float+0x190>
 8007396:	2900      	cmp	r1, #0
 8007398:	6863      	ldr	r3, [r4, #4]
 800739a:	dd0b      	ble.n	80073b4 <_printf_float+0x17c>
 800739c:	6121      	str	r1, [r4, #16]
 800739e:	b913      	cbnz	r3, 80073a6 <_printf_float+0x16e>
 80073a0:	6822      	ldr	r2, [r4, #0]
 80073a2:	07d0      	lsls	r0, r2, #31
 80073a4:	d502      	bpl.n	80073ac <_printf_float+0x174>
 80073a6:	3301      	adds	r3, #1
 80073a8:	440b      	add	r3, r1
 80073aa:	6123      	str	r3, [r4, #16]
 80073ac:	2300      	movs	r3, #0
 80073ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80073b0:	9304      	str	r3, [sp, #16]
 80073b2:	e7de      	b.n	8007372 <_printf_float+0x13a>
 80073b4:	b913      	cbnz	r3, 80073bc <_printf_float+0x184>
 80073b6:	6822      	ldr	r2, [r4, #0]
 80073b8:	07d2      	lsls	r2, r2, #31
 80073ba:	d501      	bpl.n	80073c0 <_printf_float+0x188>
 80073bc:	3302      	adds	r3, #2
 80073be:	e7f4      	b.n	80073aa <_printf_float+0x172>
 80073c0:	2301      	movs	r3, #1
 80073c2:	e7f2      	b.n	80073aa <_printf_float+0x172>
 80073c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80073c8:	9b08      	ldr	r3, [sp, #32]
 80073ca:	4299      	cmp	r1, r3
 80073cc:	db05      	blt.n	80073da <_printf_float+0x1a2>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	6121      	str	r1, [r4, #16]
 80073d2:	07d8      	lsls	r0, r3, #31
 80073d4:	d5ea      	bpl.n	80073ac <_printf_float+0x174>
 80073d6:	1c4b      	adds	r3, r1, #1
 80073d8:	e7e7      	b.n	80073aa <_printf_float+0x172>
 80073da:	2900      	cmp	r1, #0
 80073dc:	bfd4      	ite	le
 80073de:	f1c1 0202 	rsble	r2, r1, #2
 80073e2:	2201      	movgt	r2, #1
 80073e4:	4413      	add	r3, r2
 80073e6:	e7e0      	b.n	80073aa <_printf_float+0x172>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	055a      	lsls	r2, r3, #21
 80073ec:	d407      	bmi.n	80073fe <_printf_float+0x1c6>
 80073ee:	6923      	ldr	r3, [r4, #16]
 80073f0:	4642      	mov	r2, r8
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	d12a      	bne.n	8007452 <_printf_float+0x21a>
 80073fc:	e76a      	b.n	80072d4 <_printf_float+0x9c>
 80073fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007402:	f240 80e2 	bls.w	80075ca <_printf_float+0x392>
 8007406:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800740a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800740e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007412:	d133      	bne.n	800747c <_printf_float+0x244>
 8007414:	4a38      	ldr	r2, [pc, #224]	; (80074f8 <_printf_float+0x2c0>)
 8007416:	2301      	movs	r3, #1
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	47b8      	blx	r7
 800741e:	3001      	adds	r0, #1
 8007420:	f43f af58 	beq.w	80072d4 <_printf_float+0x9c>
 8007424:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007428:	429a      	cmp	r2, r3
 800742a:	db02      	blt.n	8007432 <_printf_float+0x1fa>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	07d8      	lsls	r0, r3, #31
 8007430:	d50f      	bpl.n	8007452 <_printf_float+0x21a>
 8007432:	4653      	mov	r3, sl
 8007434:	465a      	mov	r2, fp
 8007436:	4631      	mov	r1, r6
 8007438:	4628      	mov	r0, r5
 800743a:	47b8      	blx	r7
 800743c:	3001      	adds	r0, #1
 800743e:	f43f af49 	beq.w	80072d4 <_printf_float+0x9c>
 8007442:	f04f 0800 	mov.w	r8, #0
 8007446:	f104 091a 	add.w	r9, r4, #26
 800744a:	9b08      	ldr	r3, [sp, #32]
 800744c:	3b01      	subs	r3, #1
 800744e:	4543      	cmp	r3, r8
 8007450:	dc09      	bgt.n	8007466 <_printf_float+0x22e>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	079b      	lsls	r3, r3, #30
 8007456:	f100 8108 	bmi.w	800766a <_printf_float+0x432>
 800745a:	68e0      	ldr	r0, [r4, #12]
 800745c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745e:	4298      	cmp	r0, r3
 8007460:	bfb8      	it	lt
 8007462:	4618      	movlt	r0, r3
 8007464:	e738      	b.n	80072d8 <_printf_float+0xa0>
 8007466:	2301      	movs	r3, #1
 8007468:	464a      	mov	r2, r9
 800746a:	4631      	mov	r1, r6
 800746c:	4628      	mov	r0, r5
 800746e:	47b8      	blx	r7
 8007470:	3001      	adds	r0, #1
 8007472:	f43f af2f 	beq.w	80072d4 <_printf_float+0x9c>
 8007476:	f108 0801 	add.w	r8, r8, #1
 800747a:	e7e6      	b.n	800744a <_printf_float+0x212>
 800747c:	9b07      	ldr	r3, [sp, #28]
 800747e:	2b00      	cmp	r3, #0
 8007480:	dc3c      	bgt.n	80074fc <_printf_float+0x2c4>
 8007482:	4a1d      	ldr	r2, [pc, #116]	; (80074f8 <_printf_float+0x2c0>)
 8007484:	2301      	movs	r3, #1
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	f43f af21 	beq.w	80072d4 <_printf_float+0x9c>
 8007492:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007496:	4313      	orrs	r3, r2
 8007498:	d102      	bne.n	80074a0 <_printf_float+0x268>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	07d9      	lsls	r1, r3, #31
 800749e:	d5d8      	bpl.n	8007452 <_printf_float+0x21a>
 80074a0:	4653      	mov	r3, sl
 80074a2:	465a      	mov	r2, fp
 80074a4:	4631      	mov	r1, r6
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b8      	blx	r7
 80074aa:	3001      	adds	r0, #1
 80074ac:	f43f af12 	beq.w	80072d4 <_printf_float+0x9c>
 80074b0:	f04f 0900 	mov.w	r9, #0
 80074b4:	f104 0a1a 	add.w	sl, r4, #26
 80074b8:	9b07      	ldr	r3, [sp, #28]
 80074ba:	425b      	negs	r3, r3
 80074bc:	454b      	cmp	r3, r9
 80074be:	dc01      	bgt.n	80074c4 <_printf_float+0x28c>
 80074c0:	9b08      	ldr	r3, [sp, #32]
 80074c2:	e795      	b.n	80073f0 <_printf_float+0x1b8>
 80074c4:	2301      	movs	r3, #1
 80074c6:	4652      	mov	r2, sl
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	f43f af00 	beq.w	80072d4 <_printf_float+0x9c>
 80074d4:	f109 0901 	add.w	r9, r9, #1
 80074d8:	e7ee      	b.n	80074b8 <_printf_float+0x280>
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w
 80074e0:	ffffffff 	.word	0xffffffff
 80074e4:	7fefffff 	.word	0x7fefffff
 80074e8:	0800b85c 	.word	0x0800b85c
 80074ec:	0800b860 	.word	0x0800b860
 80074f0:	0800b868 	.word	0x0800b868
 80074f4:	0800b864 	.word	0x0800b864
 80074f8:	0800b86c 	.word	0x0800b86c
 80074fc:	9a08      	ldr	r2, [sp, #32]
 80074fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007500:	429a      	cmp	r2, r3
 8007502:	bfa8      	it	ge
 8007504:	461a      	movge	r2, r3
 8007506:	2a00      	cmp	r2, #0
 8007508:	4691      	mov	r9, r2
 800750a:	dc38      	bgt.n	800757e <_printf_float+0x346>
 800750c:	2300      	movs	r3, #0
 800750e:	9305      	str	r3, [sp, #20]
 8007510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007514:	f104 021a 	add.w	r2, r4, #26
 8007518:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800751a:	9905      	ldr	r1, [sp, #20]
 800751c:	9304      	str	r3, [sp, #16]
 800751e:	eba3 0309 	sub.w	r3, r3, r9
 8007522:	428b      	cmp	r3, r1
 8007524:	dc33      	bgt.n	800758e <_printf_float+0x356>
 8007526:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800752a:	429a      	cmp	r2, r3
 800752c:	db3c      	blt.n	80075a8 <_printf_float+0x370>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	07da      	lsls	r2, r3, #31
 8007532:	d439      	bmi.n	80075a8 <_printf_float+0x370>
 8007534:	9b08      	ldr	r3, [sp, #32]
 8007536:	9a04      	ldr	r2, [sp, #16]
 8007538:	9907      	ldr	r1, [sp, #28]
 800753a:	1a9a      	subs	r2, r3, r2
 800753c:	eba3 0901 	sub.w	r9, r3, r1
 8007540:	4591      	cmp	r9, r2
 8007542:	bfa8      	it	ge
 8007544:	4691      	movge	r9, r2
 8007546:	f1b9 0f00 	cmp.w	r9, #0
 800754a:	dc35      	bgt.n	80075b8 <_printf_float+0x380>
 800754c:	f04f 0800 	mov.w	r8, #0
 8007550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007554:	f104 0a1a 	add.w	sl, r4, #26
 8007558:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	eba3 0309 	sub.w	r3, r3, r9
 8007562:	4543      	cmp	r3, r8
 8007564:	f77f af75 	ble.w	8007452 <_printf_float+0x21a>
 8007568:	2301      	movs	r3, #1
 800756a:	4652      	mov	r2, sl
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	f43f aeae 	beq.w	80072d4 <_printf_float+0x9c>
 8007578:	f108 0801 	add.w	r8, r8, #1
 800757c:	e7ec      	b.n	8007558 <_printf_float+0x320>
 800757e:	4613      	mov	r3, r2
 8007580:	4631      	mov	r1, r6
 8007582:	4642      	mov	r2, r8
 8007584:	4628      	mov	r0, r5
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	d1bf      	bne.n	800750c <_printf_float+0x2d4>
 800758c:	e6a2      	b.n	80072d4 <_printf_float+0x9c>
 800758e:	2301      	movs	r3, #1
 8007590:	4631      	mov	r1, r6
 8007592:	4628      	mov	r0, r5
 8007594:	9204      	str	r2, [sp, #16]
 8007596:	47b8      	blx	r7
 8007598:	3001      	adds	r0, #1
 800759a:	f43f ae9b 	beq.w	80072d4 <_printf_float+0x9c>
 800759e:	9b05      	ldr	r3, [sp, #20]
 80075a0:	9a04      	ldr	r2, [sp, #16]
 80075a2:	3301      	adds	r3, #1
 80075a4:	9305      	str	r3, [sp, #20]
 80075a6:	e7b7      	b.n	8007518 <_printf_float+0x2e0>
 80075a8:	4653      	mov	r3, sl
 80075aa:	465a      	mov	r2, fp
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	d1be      	bne.n	8007534 <_printf_float+0x2fc>
 80075b6:	e68d      	b.n	80072d4 <_printf_float+0x9c>
 80075b8:	9a04      	ldr	r2, [sp, #16]
 80075ba:	464b      	mov	r3, r9
 80075bc:	4442      	add	r2, r8
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	d1c1      	bne.n	800754c <_printf_float+0x314>
 80075c8:	e684      	b.n	80072d4 <_printf_float+0x9c>
 80075ca:	9a08      	ldr	r2, [sp, #32]
 80075cc:	2a01      	cmp	r2, #1
 80075ce:	dc01      	bgt.n	80075d4 <_printf_float+0x39c>
 80075d0:	07db      	lsls	r3, r3, #31
 80075d2:	d537      	bpl.n	8007644 <_printf_float+0x40c>
 80075d4:	2301      	movs	r3, #1
 80075d6:	4642      	mov	r2, r8
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f ae78 	beq.w	80072d4 <_printf_float+0x9c>
 80075e4:	4653      	mov	r3, sl
 80075e6:	465a      	mov	r2, fp
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b8      	blx	r7
 80075ee:	3001      	adds	r0, #1
 80075f0:	f43f ae70 	beq.w	80072d4 <_printf_float+0x9c>
 80075f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80075f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007600:	d01b      	beq.n	800763a <_printf_float+0x402>
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	f108 0201 	add.w	r2, r8, #1
 8007608:	3b01      	subs	r3, #1
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	47b8      	blx	r7
 8007610:	3001      	adds	r0, #1
 8007612:	d10e      	bne.n	8007632 <_printf_float+0x3fa>
 8007614:	e65e      	b.n	80072d4 <_printf_float+0x9c>
 8007616:	2301      	movs	r3, #1
 8007618:	464a      	mov	r2, r9
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	f43f ae57 	beq.w	80072d4 <_printf_float+0x9c>
 8007626:	f108 0801 	add.w	r8, r8, #1
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	3b01      	subs	r3, #1
 800762e:	4543      	cmp	r3, r8
 8007630:	dcf1      	bgt.n	8007616 <_printf_float+0x3de>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007638:	e6db      	b.n	80073f2 <_printf_float+0x1ba>
 800763a:	f04f 0800 	mov.w	r8, #0
 800763e:	f104 091a 	add.w	r9, r4, #26
 8007642:	e7f2      	b.n	800762a <_printf_float+0x3f2>
 8007644:	2301      	movs	r3, #1
 8007646:	4642      	mov	r2, r8
 8007648:	e7df      	b.n	800760a <_printf_float+0x3d2>
 800764a:	2301      	movs	r3, #1
 800764c:	464a      	mov	r2, r9
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f ae3d 	beq.w	80072d4 <_printf_float+0x9c>
 800765a:	f108 0801 	add.w	r8, r8, #1
 800765e:	68e3      	ldr	r3, [r4, #12]
 8007660:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007662:	1a5b      	subs	r3, r3, r1
 8007664:	4543      	cmp	r3, r8
 8007666:	dcf0      	bgt.n	800764a <_printf_float+0x412>
 8007668:	e6f7      	b.n	800745a <_printf_float+0x222>
 800766a:	f04f 0800 	mov.w	r8, #0
 800766e:	f104 0919 	add.w	r9, r4, #25
 8007672:	e7f4      	b.n	800765e <_printf_float+0x426>

08007674 <_printf_common>:
 8007674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	4616      	mov	r6, r2
 800767a:	4699      	mov	r9, r3
 800767c:	688a      	ldr	r2, [r1, #8]
 800767e:	690b      	ldr	r3, [r1, #16]
 8007680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007684:	4293      	cmp	r3, r2
 8007686:	bfb8      	it	lt
 8007688:	4613      	movlt	r3, r2
 800768a:	6033      	str	r3, [r6, #0]
 800768c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007690:	4607      	mov	r7, r0
 8007692:	460c      	mov	r4, r1
 8007694:	b10a      	cbz	r2, 800769a <_printf_common+0x26>
 8007696:	3301      	adds	r3, #1
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	0699      	lsls	r1, r3, #26
 800769e:	bf42      	ittt	mi
 80076a0:	6833      	ldrmi	r3, [r6, #0]
 80076a2:	3302      	addmi	r3, #2
 80076a4:	6033      	strmi	r3, [r6, #0]
 80076a6:	6825      	ldr	r5, [r4, #0]
 80076a8:	f015 0506 	ands.w	r5, r5, #6
 80076ac:	d106      	bne.n	80076bc <_printf_common+0x48>
 80076ae:	f104 0a19 	add.w	sl, r4, #25
 80076b2:	68e3      	ldr	r3, [r4, #12]
 80076b4:	6832      	ldr	r2, [r6, #0]
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	42ab      	cmp	r3, r5
 80076ba:	dc26      	bgt.n	800770a <_printf_common+0x96>
 80076bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076c0:	1e13      	subs	r3, r2, #0
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	bf18      	it	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	0692      	lsls	r2, r2, #26
 80076ca:	d42b      	bmi.n	8007724 <_printf_common+0xb0>
 80076cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076d0:	4649      	mov	r1, r9
 80076d2:	4638      	mov	r0, r7
 80076d4:	47c0      	blx	r8
 80076d6:	3001      	adds	r0, #1
 80076d8:	d01e      	beq.n	8007718 <_printf_common+0xa4>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	68e5      	ldr	r5, [r4, #12]
 80076de:	6832      	ldr	r2, [r6, #0]
 80076e0:	f003 0306 	and.w	r3, r3, #6
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	bf08      	it	eq
 80076e8:	1aad      	subeq	r5, r5, r2
 80076ea:	68a3      	ldr	r3, [r4, #8]
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	bf0c      	ite	eq
 80076f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f4:	2500      	movne	r5, #0
 80076f6:	4293      	cmp	r3, r2
 80076f8:	bfc4      	itt	gt
 80076fa:	1a9b      	subgt	r3, r3, r2
 80076fc:	18ed      	addgt	r5, r5, r3
 80076fe:	2600      	movs	r6, #0
 8007700:	341a      	adds	r4, #26
 8007702:	42b5      	cmp	r5, r6
 8007704:	d11a      	bne.n	800773c <_printf_common+0xc8>
 8007706:	2000      	movs	r0, #0
 8007708:	e008      	b.n	800771c <_printf_common+0xa8>
 800770a:	2301      	movs	r3, #1
 800770c:	4652      	mov	r2, sl
 800770e:	4649      	mov	r1, r9
 8007710:	4638      	mov	r0, r7
 8007712:	47c0      	blx	r8
 8007714:	3001      	adds	r0, #1
 8007716:	d103      	bne.n	8007720 <_printf_common+0xac>
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007720:	3501      	adds	r5, #1
 8007722:	e7c6      	b.n	80076b2 <_printf_common+0x3e>
 8007724:	18e1      	adds	r1, r4, r3
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	2030      	movs	r0, #48	; 0x30
 800772a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800772e:	4422      	add	r2, r4
 8007730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007738:	3302      	adds	r3, #2
 800773a:	e7c7      	b.n	80076cc <_printf_common+0x58>
 800773c:	2301      	movs	r3, #1
 800773e:	4622      	mov	r2, r4
 8007740:	4649      	mov	r1, r9
 8007742:	4638      	mov	r0, r7
 8007744:	47c0      	blx	r8
 8007746:	3001      	adds	r0, #1
 8007748:	d0e6      	beq.n	8007718 <_printf_common+0xa4>
 800774a:	3601      	adds	r6, #1
 800774c:	e7d9      	b.n	8007702 <_printf_common+0x8e>
	...

08007750 <_printf_i>:
 8007750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	7e0f      	ldrb	r7, [r1, #24]
 8007756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007758:	2f78      	cmp	r7, #120	; 0x78
 800775a:	4691      	mov	r9, r2
 800775c:	4680      	mov	r8, r0
 800775e:	460c      	mov	r4, r1
 8007760:	469a      	mov	sl, r3
 8007762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007766:	d807      	bhi.n	8007778 <_printf_i+0x28>
 8007768:	2f62      	cmp	r7, #98	; 0x62
 800776a:	d80a      	bhi.n	8007782 <_printf_i+0x32>
 800776c:	2f00      	cmp	r7, #0
 800776e:	f000 80d8 	beq.w	8007922 <_printf_i+0x1d2>
 8007772:	2f58      	cmp	r7, #88	; 0x58
 8007774:	f000 80a3 	beq.w	80078be <_printf_i+0x16e>
 8007778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800777c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007780:	e03a      	b.n	80077f8 <_printf_i+0xa8>
 8007782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007786:	2b15      	cmp	r3, #21
 8007788:	d8f6      	bhi.n	8007778 <_printf_i+0x28>
 800778a:	a101      	add	r1, pc, #4	; (adr r1, 8007790 <_printf_i+0x40>)
 800778c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007790:	080077e9 	.word	0x080077e9
 8007794:	080077fd 	.word	0x080077fd
 8007798:	08007779 	.word	0x08007779
 800779c:	08007779 	.word	0x08007779
 80077a0:	08007779 	.word	0x08007779
 80077a4:	08007779 	.word	0x08007779
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	08007779 	.word	0x08007779
 80077b0:	08007779 	.word	0x08007779
 80077b4:	08007779 	.word	0x08007779
 80077b8:	08007779 	.word	0x08007779
 80077bc:	08007909 	.word	0x08007909
 80077c0:	0800782d 	.word	0x0800782d
 80077c4:	080078eb 	.word	0x080078eb
 80077c8:	08007779 	.word	0x08007779
 80077cc:	08007779 	.word	0x08007779
 80077d0:	0800792b 	.word	0x0800792b
 80077d4:	08007779 	.word	0x08007779
 80077d8:	0800782d 	.word	0x0800782d
 80077dc:	08007779 	.word	0x08007779
 80077e0:	08007779 	.word	0x08007779
 80077e4:	080078f3 	.word	0x080078f3
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	1d1a      	adds	r2, r3, #4
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0a3      	b.n	8007944 <_printf_i+0x1f4>
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	6829      	ldr	r1, [r5, #0]
 8007800:	0606      	lsls	r6, r0, #24
 8007802:	f101 0304 	add.w	r3, r1, #4
 8007806:	d50a      	bpl.n	800781e <_printf_i+0xce>
 8007808:	680e      	ldr	r6, [r1, #0]
 800780a:	602b      	str	r3, [r5, #0]
 800780c:	2e00      	cmp	r6, #0
 800780e:	da03      	bge.n	8007818 <_printf_i+0xc8>
 8007810:	232d      	movs	r3, #45	; 0x2d
 8007812:	4276      	negs	r6, r6
 8007814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007818:	485e      	ldr	r0, [pc, #376]	; (8007994 <_printf_i+0x244>)
 800781a:	230a      	movs	r3, #10
 800781c:	e019      	b.n	8007852 <_printf_i+0x102>
 800781e:	680e      	ldr	r6, [r1, #0]
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007826:	bf18      	it	ne
 8007828:	b236      	sxthne	r6, r6
 800782a:	e7ef      	b.n	800780c <_printf_i+0xbc>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	6820      	ldr	r0, [r4, #0]
 8007830:	1d19      	adds	r1, r3, #4
 8007832:	6029      	str	r1, [r5, #0]
 8007834:	0601      	lsls	r1, r0, #24
 8007836:	d501      	bpl.n	800783c <_printf_i+0xec>
 8007838:	681e      	ldr	r6, [r3, #0]
 800783a:	e002      	b.n	8007842 <_printf_i+0xf2>
 800783c:	0646      	lsls	r6, r0, #25
 800783e:	d5fb      	bpl.n	8007838 <_printf_i+0xe8>
 8007840:	881e      	ldrh	r6, [r3, #0]
 8007842:	4854      	ldr	r0, [pc, #336]	; (8007994 <_printf_i+0x244>)
 8007844:	2f6f      	cmp	r7, #111	; 0x6f
 8007846:	bf0c      	ite	eq
 8007848:	2308      	moveq	r3, #8
 800784a:	230a      	movne	r3, #10
 800784c:	2100      	movs	r1, #0
 800784e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007852:	6865      	ldr	r5, [r4, #4]
 8007854:	60a5      	str	r5, [r4, #8]
 8007856:	2d00      	cmp	r5, #0
 8007858:	bfa2      	ittt	ge
 800785a:	6821      	ldrge	r1, [r4, #0]
 800785c:	f021 0104 	bicge.w	r1, r1, #4
 8007860:	6021      	strge	r1, [r4, #0]
 8007862:	b90e      	cbnz	r6, 8007868 <_printf_i+0x118>
 8007864:	2d00      	cmp	r5, #0
 8007866:	d04d      	beq.n	8007904 <_printf_i+0x1b4>
 8007868:	4615      	mov	r5, r2
 800786a:	fbb6 f1f3 	udiv	r1, r6, r3
 800786e:	fb03 6711 	mls	r7, r3, r1, r6
 8007872:	5dc7      	ldrb	r7, [r0, r7]
 8007874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007878:	4637      	mov	r7, r6
 800787a:	42bb      	cmp	r3, r7
 800787c:	460e      	mov	r6, r1
 800787e:	d9f4      	bls.n	800786a <_printf_i+0x11a>
 8007880:	2b08      	cmp	r3, #8
 8007882:	d10b      	bne.n	800789c <_printf_i+0x14c>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	07de      	lsls	r6, r3, #31
 8007888:	d508      	bpl.n	800789c <_printf_i+0x14c>
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6861      	ldr	r1, [r4, #4]
 800788e:	4299      	cmp	r1, r3
 8007890:	bfde      	ittt	le
 8007892:	2330      	movle	r3, #48	; 0x30
 8007894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800789c:	1b52      	subs	r2, r2, r5
 800789e:	6122      	str	r2, [r4, #16]
 80078a0:	f8cd a000 	str.w	sl, [sp]
 80078a4:	464b      	mov	r3, r9
 80078a6:	aa03      	add	r2, sp, #12
 80078a8:	4621      	mov	r1, r4
 80078aa:	4640      	mov	r0, r8
 80078ac:	f7ff fee2 	bl	8007674 <_printf_common>
 80078b0:	3001      	adds	r0, #1
 80078b2:	d14c      	bne.n	800794e <_printf_i+0x1fe>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	b004      	add	sp, #16
 80078ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078be:	4835      	ldr	r0, [pc, #212]	; (8007994 <_printf_i+0x244>)
 80078c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078c4:	6829      	ldr	r1, [r5, #0]
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80078cc:	6029      	str	r1, [r5, #0]
 80078ce:	061d      	lsls	r5, r3, #24
 80078d0:	d514      	bpl.n	80078fc <_printf_i+0x1ac>
 80078d2:	07df      	lsls	r7, r3, #31
 80078d4:	bf44      	itt	mi
 80078d6:	f043 0320 	orrmi.w	r3, r3, #32
 80078da:	6023      	strmi	r3, [r4, #0]
 80078dc:	b91e      	cbnz	r6, 80078e6 <_printf_i+0x196>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	f023 0320 	bic.w	r3, r3, #32
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	2310      	movs	r3, #16
 80078e8:	e7b0      	b.n	800784c <_printf_i+0xfc>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	f043 0320 	orr.w	r3, r3, #32
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	2378      	movs	r3, #120	; 0x78
 80078f4:	4828      	ldr	r0, [pc, #160]	; (8007998 <_printf_i+0x248>)
 80078f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078fa:	e7e3      	b.n	80078c4 <_printf_i+0x174>
 80078fc:	0659      	lsls	r1, r3, #25
 80078fe:	bf48      	it	mi
 8007900:	b2b6      	uxthmi	r6, r6
 8007902:	e7e6      	b.n	80078d2 <_printf_i+0x182>
 8007904:	4615      	mov	r5, r2
 8007906:	e7bb      	b.n	8007880 <_printf_i+0x130>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	6826      	ldr	r6, [r4, #0]
 800790c:	6961      	ldr	r1, [r4, #20]
 800790e:	1d18      	adds	r0, r3, #4
 8007910:	6028      	str	r0, [r5, #0]
 8007912:	0635      	lsls	r5, r6, #24
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	d501      	bpl.n	800791c <_printf_i+0x1cc>
 8007918:	6019      	str	r1, [r3, #0]
 800791a:	e002      	b.n	8007922 <_printf_i+0x1d2>
 800791c:	0670      	lsls	r0, r6, #25
 800791e:	d5fb      	bpl.n	8007918 <_printf_i+0x1c8>
 8007920:	8019      	strh	r1, [r3, #0]
 8007922:	2300      	movs	r3, #0
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	4615      	mov	r5, r2
 8007928:	e7ba      	b.n	80078a0 <_printf_i+0x150>
 800792a:	682b      	ldr	r3, [r5, #0]
 800792c:	1d1a      	adds	r2, r3, #4
 800792e:	602a      	str	r2, [r5, #0]
 8007930:	681d      	ldr	r5, [r3, #0]
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	2100      	movs	r1, #0
 8007936:	4628      	mov	r0, r5
 8007938:	f7f8 fc8a 	bl	8000250 <memchr>
 800793c:	b108      	cbz	r0, 8007942 <_printf_i+0x1f2>
 800793e:	1b40      	subs	r0, r0, r5
 8007940:	6060      	str	r0, [r4, #4]
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	2300      	movs	r3, #0
 8007948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794c:	e7a8      	b.n	80078a0 <_printf_i+0x150>
 800794e:	6923      	ldr	r3, [r4, #16]
 8007950:	462a      	mov	r2, r5
 8007952:	4649      	mov	r1, r9
 8007954:	4640      	mov	r0, r8
 8007956:	47d0      	blx	sl
 8007958:	3001      	adds	r0, #1
 800795a:	d0ab      	beq.n	80078b4 <_printf_i+0x164>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	079b      	lsls	r3, r3, #30
 8007960:	d413      	bmi.n	800798a <_printf_i+0x23a>
 8007962:	68e0      	ldr	r0, [r4, #12]
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	4298      	cmp	r0, r3
 8007968:	bfb8      	it	lt
 800796a:	4618      	movlt	r0, r3
 800796c:	e7a4      	b.n	80078b8 <_printf_i+0x168>
 800796e:	2301      	movs	r3, #1
 8007970:	4632      	mov	r2, r6
 8007972:	4649      	mov	r1, r9
 8007974:	4640      	mov	r0, r8
 8007976:	47d0      	blx	sl
 8007978:	3001      	adds	r0, #1
 800797a:	d09b      	beq.n	80078b4 <_printf_i+0x164>
 800797c:	3501      	adds	r5, #1
 800797e:	68e3      	ldr	r3, [r4, #12]
 8007980:	9903      	ldr	r1, [sp, #12]
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	42ab      	cmp	r3, r5
 8007986:	dcf2      	bgt.n	800796e <_printf_i+0x21e>
 8007988:	e7eb      	b.n	8007962 <_printf_i+0x212>
 800798a:	2500      	movs	r5, #0
 800798c:	f104 0619 	add.w	r6, r4, #25
 8007990:	e7f5      	b.n	800797e <_printf_i+0x22e>
 8007992:	bf00      	nop
 8007994:	0800b86e 	.word	0x0800b86e
 8007998:	0800b87f 	.word	0x0800b87f

0800799c <_scanf_float>:
 800799c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a0:	b087      	sub	sp, #28
 80079a2:	4617      	mov	r7, r2
 80079a4:	9303      	str	r3, [sp, #12]
 80079a6:	688b      	ldr	r3, [r1, #8]
 80079a8:	1e5a      	subs	r2, r3, #1
 80079aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80079ae:	bf83      	ittte	hi
 80079b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80079b4:	195b      	addhi	r3, r3, r5
 80079b6:	9302      	strhi	r3, [sp, #8]
 80079b8:	2300      	movls	r3, #0
 80079ba:	bf86      	itte	hi
 80079bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80079c0:	608b      	strhi	r3, [r1, #8]
 80079c2:	9302      	strls	r3, [sp, #8]
 80079c4:	680b      	ldr	r3, [r1, #0]
 80079c6:	468b      	mov	fp, r1
 80079c8:	2500      	movs	r5, #0
 80079ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80079ce:	f84b 3b1c 	str.w	r3, [fp], #28
 80079d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80079d6:	4680      	mov	r8, r0
 80079d8:	460c      	mov	r4, r1
 80079da:	465e      	mov	r6, fp
 80079dc:	46aa      	mov	sl, r5
 80079de:	46a9      	mov	r9, r5
 80079e0:	9501      	str	r5, [sp, #4]
 80079e2:	68a2      	ldr	r2, [r4, #8]
 80079e4:	b152      	cbz	r2, 80079fc <_scanf_float+0x60>
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b4e      	cmp	r3, #78	; 0x4e
 80079ec:	d864      	bhi.n	8007ab8 <_scanf_float+0x11c>
 80079ee:	2b40      	cmp	r3, #64	; 0x40
 80079f0:	d83c      	bhi.n	8007a6c <_scanf_float+0xd0>
 80079f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80079f6:	b2c8      	uxtb	r0, r1
 80079f8:	280e      	cmp	r0, #14
 80079fa:	d93a      	bls.n	8007a72 <_scanf_float+0xd6>
 80079fc:	f1b9 0f00 	cmp.w	r9, #0
 8007a00:	d003      	beq.n	8007a0a <_scanf_float+0x6e>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a0e:	f1ba 0f01 	cmp.w	sl, #1
 8007a12:	f200 8113 	bhi.w	8007c3c <_scanf_float+0x2a0>
 8007a16:	455e      	cmp	r6, fp
 8007a18:	f200 8105 	bhi.w	8007c26 <_scanf_float+0x28a>
 8007a1c:	2501      	movs	r5, #1
 8007a1e:	4628      	mov	r0, r5
 8007a20:	b007      	add	sp, #28
 8007a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007a2a:	2a0d      	cmp	r2, #13
 8007a2c:	d8e6      	bhi.n	80079fc <_scanf_float+0x60>
 8007a2e:	a101      	add	r1, pc, #4	; (adr r1, 8007a34 <_scanf_float+0x98>)
 8007a30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a34:	08007b73 	.word	0x08007b73
 8007a38:	080079fd 	.word	0x080079fd
 8007a3c:	080079fd 	.word	0x080079fd
 8007a40:	080079fd 	.word	0x080079fd
 8007a44:	08007bd3 	.word	0x08007bd3
 8007a48:	08007bab 	.word	0x08007bab
 8007a4c:	080079fd 	.word	0x080079fd
 8007a50:	080079fd 	.word	0x080079fd
 8007a54:	08007b81 	.word	0x08007b81
 8007a58:	080079fd 	.word	0x080079fd
 8007a5c:	080079fd 	.word	0x080079fd
 8007a60:	080079fd 	.word	0x080079fd
 8007a64:	080079fd 	.word	0x080079fd
 8007a68:	08007b39 	.word	0x08007b39
 8007a6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007a70:	e7db      	b.n	8007a2a <_scanf_float+0x8e>
 8007a72:	290e      	cmp	r1, #14
 8007a74:	d8c2      	bhi.n	80079fc <_scanf_float+0x60>
 8007a76:	a001      	add	r0, pc, #4	; (adr r0, 8007a7c <_scanf_float+0xe0>)
 8007a78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a7c:	08007b2b 	.word	0x08007b2b
 8007a80:	080079fd 	.word	0x080079fd
 8007a84:	08007b2b 	.word	0x08007b2b
 8007a88:	08007bbf 	.word	0x08007bbf
 8007a8c:	080079fd 	.word	0x080079fd
 8007a90:	08007ad9 	.word	0x08007ad9
 8007a94:	08007b15 	.word	0x08007b15
 8007a98:	08007b15 	.word	0x08007b15
 8007a9c:	08007b15 	.word	0x08007b15
 8007aa0:	08007b15 	.word	0x08007b15
 8007aa4:	08007b15 	.word	0x08007b15
 8007aa8:	08007b15 	.word	0x08007b15
 8007aac:	08007b15 	.word	0x08007b15
 8007ab0:	08007b15 	.word	0x08007b15
 8007ab4:	08007b15 	.word	0x08007b15
 8007ab8:	2b6e      	cmp	r3, #110	; 0x6e
 8007aba:	d809      	bhi.n	8007ad0 <_scanf_float+0x134>
 8007abc:	2b60      	cmp	r3, #96	; 0x60
 8007abe:	d8b2      	bhi.n	8007a26 <_scanf_float+0x8a>
 8007ac0:	2b54      	cmp	r3, #84	; 0x54
 8007ac2:	d077      	beq.n	8007bb4 <_scanf_float+0x218>
 8007ac4:	2b59      	cmp	r3, #89	; 0x59
 8007ac6:	d199      	bne.n	80079fc <_scanf_float+0x60>
 8007ac8:	2d07      	cmp	r5, #7
 8007aca:	d197      	bne.n	80079fc <_scanf_float+0x60>
 8007acc:	2508      	movs	r5, #8
 8007ace:	e029      	b.n	8007b24 <_scanf_float+0x188>
 8007ad0:	2b74      	cmp	r3, #116	; 0x74
 8007ad2:	d06f      	beq.n	8007bb4 <_scanf_float+0x218>
 8007ad4:	2b79      	cmp	r3, #121	; 0x79
 8007ad6:	e7f6      	b.n	8007ac6 <_scanf_float+0x12a>
 8007ad8:	6821      	ldr	r1, [r4, #0]
 8007ada:	05c8      	lsls	r0, r1, #23
 8007adc:	d51a      	bpl.n	8007b14 <_scanf_float+0x178>
 8007ade:	9b02      	ldr	r3, [sp, #8]
 8007ae0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007ae4:	6021      	str	r1, [r4, #0]
 8007ae6:	f109 0901 	add.w	r9, r9, #1
 8007aea:	b11b      	cbz	r3, 8007af4 <_scanf_float+0x158>
 8007aec:	3b01      	subs	r3, #1
 8007aee:	3201      	adds	r2, #1
 8007af0:	9302      	str	r3, [sp, #8]
 8007af2:	60a2      	str	r2, [r4, #8]
 8007af4:	68a3      	ldr	r3, [r4, #8]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	60a3      	str	r3, [r4, #8]
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	3301      	adds	r3, #1
 8007afe:	6123      	str	r3, [r4, #16]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	607b      	str	r3, [r7, #4]
 8007b08:	f340 8084 	ble.w	8007c14 <_scanf_float+0x278>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	603b      	str	r3, [r7, #0]
 8007b12:	e766      	b.n	80079e2 <_scanf_float+0x46>
 8007b14:	eb1a 0f05 	cmn.w	sl, r5
 8007b18:	f47f af70 	bne.w	80079fc <_scanf_float+0x60>
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007b22:	6022      	str	r2, [r4, #0]
 8007b24:	f806 3b01 	strb.w	r3, [r6], #1
 8007b28:	e7e4      	b.n	8007af4 <_scanf_float+0x158>
 8007b2a:	6822      	ldr	r2, [r4, #0]
 8007b2c:	0610      	lsls	r0, r2, #24
 8007b2e:	f57f af65 	bpl.w	80079fc <_scanf_float+0x60>
 8007b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b36:	e7f4      	b.n	8007b22 <_scanf_float+0x186>
 8007b38:	f1ba 0f00 	cmp.w	sl, #0
 8007b3c:	d10e      	bne.n	8007b5c <_scanf_float+0x1c0>
 8007b3e:	f1b9 0f00 	cmp.w	r9, #0
 8007b42:	d10e      	bne.n	8007b62 <_scanf_float+0x1c6>
 8007b44:	6822      	ldr	r2, [r4, #0]
 8007b46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b4e:	d108      	bne.n	8007b62 <_scanf_float+0x1c6>
 8007b50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b54:	6022      	str	r2, [r4, #0]
 8007b56:	f04f 0a01 	mov.w	sl, #1
 8007b5a:	e7e3      	b.n	8007b24 <_scanf_float+0x188>
 8007b5c:	f1ba 0f02 	cmp.w	sl, #2
 8007b60:	d055      	beq.n	8007c0e <_scanf_float+0x272>
 8007b62:	2d01      	cmp	r5, #1
 8007b64:	d002      	beq.n	8007b6c <_scanf_float+0x1d0>
 8007b66:	2d04      	cmp	r5, #4
 8007b68:	f47f af48 	bne.w	80079fc <_scanf_float+0x60>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	b2ed      	uxtb	r5, r5
 8007b70:	e7d8      	b.n	8007b24 <_scanf_float+0x188>
 8007b72:	f1ba 0f01 	cmp.w	sl, #1
 8007b76:	f47f af41 	bne.w	80079fc <_scanf_float+0x60>
 8007b7a:	f04f 0a02 	mov.w	sl, #2
 8007b7e:	e7d1      	b.n	8007b24 <_scanf_float+0x188>
 8007b80:	b97d      	cbnz	r5, 8007ba2 <_scanf_float+0x206>
 8007b82:	f1b9 0f00 	cmp.w	r9, #0
 8007b86:	f47f af3c 	bne.w	8007a02 <_scanf_float+0x66>
 8007b8a:	6822      	ldr	r2, [r4, #0]
 8007b8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b94:	f47f af39 	bne.w	8007a0a <_scanf_float+0x6e>
 8007b98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b9c:	6022      	str	r2, [r4, #0]
 8007b9e:	2501      	movs	r5, #1
 8007ba0:	e7c0      	b.n	8007b24 <_scanf_float+0x188>
 8007ba2:	2d03      	cmp	r5, #3
 8007ba4:	d0e2      	beq.n	8007b6c <_scanf_float+0x1d0>
 8007ba6:	2d05      	cmp	r5, #5
 8007ba8:	e7de      	b.n	8007b68 <_scanf_float+0x1cc>
 8007baa:	2d02      	cmp	r5, #2
 8007bac:	f47f af26 	bne.w	80079fc <_scanf_float+0x60>
 8007bb0:	2503      	movs	r5, #3
 8007bb2:	e7b7      	b.n	8007b24 <_scanf_float+0x188>
 8007bb4:	2d06      	cmp	r5, #6
 8007bb6:	f47f af21 	bne.w	80079fc <_scanf_float+0x60>
 8007bba:	2507      	movs	r5, #7
 8007bbc:	e7b2      	b.n	8007b24 <_scanf_float+0x188>
 8007bbe:	6822      	ldr	r2, [r4, #0]
 8007bc0:	0591      	lsls	r1, r2, #22
 8007bc2:	f57f af1b 	bpl.w	80079fc <_scanf_float+0x60>
 8007bc6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007bca:	6022      	str	r2, [r4, #0]
 8007bcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bd0:	e7a8      	b.n	8007b24 <_scanf_float+0x188>
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007bd8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007bdc:	d006      	beq.n	8007bec <_scanf_float+0x250>
 8007bde:	0550      	lsls	r0, r2, #21
 8007be0:	f57f af0c 	bpl.w	80079fc <_scanf_float+0x60>
 8007be4:	f1b9 0f00 	cmp.w	r9, #0
 8007be8:	f43f af0f 	beq.w	8007a0a <_scanf_float+0x6e>
 8007bec:	0591      	lsls	r1, r2, #22
 8007bee:	bf58      	it	pl
 8007bf0:	9901      	ldrpl	r1, [sp, #4]
 8007bf2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007bf6:	bf58      	it	pl
 8007bf8:	eba9 0101 	subpl.w	r1, r9, r1
 8007bfc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007c00:	bf58      	it	pl
 8007c02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	f04f 0900 	mov.w	r9, #0
 8007c0c:	e78a      	b.n	8007b24 <_scanf_float+0x188>
 8007c0e:	f04f 0a03 	mov.w	sl, #3
 8007c12:	e787      	b.n	8007b24 <_scanf_float+0x188>
 8007c14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4798      	blx	r3
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	f43f aedf 	beq.w	80079e2 <_scanf_float+0x46>
 8007c24:	e6ea      	b.n	80079fc <_scanf_float+0x60>
 8007c26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c2e:	463a      	mov	r2, r7
 8007c30:	4640      	mov	r0, r8
 8007c32:	4798      	blx	r3
 8007c34:	6923      	ldr	r3, [r4, #16]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	6123      	str	r3, [r4, #16]
 8007c3a:	e6ec      	b.n	8007a16 <_scanf_float+0x7a>
 8007c3c:	1e6b      	subs	r3, r5, #1
 8007c3e:	2b06      	cmp	r3, #6
 8007c40:	d825      	bhi.n	8007c8e <_scanf_float+0x2f2>
 8007c42:	2d02      	cmp	r5, #2
 8007c44:	d836      	bhi.n	8007cb4 <_scanf_float+0x318>
 8007c46:	455e      	cmp	r6, fp
 8007c48:	f67f aee8 	bls.w	8007a1c <_scanf_float+0x80>
 8007c4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c54:	463a      	mov	r2, r7
 8007c56:	4640      	mov	r0, r8
 8007c58:	4798      	blx	r3
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	6123      	str	r3, [r4, #16]
 8007c60:	e7f1      	b.n	8007c46 <_scanf_float+0x2aa>
 8007c62:	9802      	ldr	r0, [sp, #8]
 8007c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c68:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007c6c:	9002      	str	r0, [sp, #8]
 8007c6e:	463a      	mov	r2, r7
 8007c70:	4640      	mov	r0, r8
 8007c72:	4798      	blx	r3
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	3b01      	subs	r3, #1
 8007c78:	6123      	str	r3, [r4, #16]
 8007c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c7e:	fa5f fa8a 	uxtb.w	sl, sl
 8007c82:	f1ba 0f02 	cmp.w	sl, #2
 8007c86:	d1ec      	bne.n	8007c62 <_scanf_float+0x2c6>
 8007c88:	3d03      	subs	r5, #3
 8007c8a:	b2ed      	uxtb	r5, r5
 8007c8c:	1b76      	subs	r6, r6, r5
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	05da      	lsls	r2, r3, #23
 8007c92:	d52f      	bpl.n	8007cf4 <_scanf_float+0x358>
 8007c94:	055b      	lsls	r3, r3, #21
 8007c96:	d510      	bpl.n	8007cba <_scanf_float+0x31e>
 8007c98:	455e      	cmp	r6, fp
 8007c9a:	f67f aebf 	bls.w	8007a1c <_scanf_float+0x80>
 8007c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ca2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ca6:	463a      	mov	r2, r7
 8007ca8:	4640      	mov	r0, r8
 8007caa:	4798      	blx	r3
 8007cac:	6923      	ldr	r3, [r4, #16]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	6123      	str	r3, [r4, #16]
 8007cb2:	e7f1      	b.n	8007c98 <_scanf_float+0x2fc>
 8007cb4:	46aa      	mov	sl, r5
 8007cb6:	9602      	str	r6, [sp, #8]
 8007cb8:	e7df      	b.n	8007c7a <_scanf_float+0x2de>
 8007cba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007cbe:	6923      	ldr	r3, [r4, #16]
 8007cc0:	2965      	cmp	r1, #101	; 0x65
 8007cc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cc6:	f106 35ff 	add.w	r5, r6, #4294967295
 8007cca:	6123      	str	r3, [r4, #16]
 8007ccc:	d00c      	beq.n	8007ce8 <_scanf_float+0x34c>
 8007cce:	2945      	cmp	r1, #69	; 0x45
 8007cd0:	d00a      	beq.n	8007ce8 <_scanf_float+0x34c>
 8007cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cd6:	463a      	mov	r2, r7
 8007cd8:	4640      	mov	r0, r8
 8007cda:	4798      	blx	r3
 8007cdc:	6923      	ldr	r3, [r4, #16]
 8007cde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	1eb5      	subs	r5, r6, #2
 8007ce6:	6123      	str	r3, [r4, #16]
 8007ce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cec:	463a      	mov	r2, r7
 8007cee:	4640      	mov	r0, r8
 8007cf0:	4798      	blx	r3
 8007cf2:	462e      	mov	r6, r5
 8007cf4:	6825      	ldr	r5, [r4, #0]
 8007cf6:	f015 0510 	ands.w	r5, r5, #16
 8007cfa:	d14e      	bne.n	8007d9a <_scanf_float+0x3fe>
 8007cfc:	7035      	strb	r5, [r6, #0]
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d08:	d119      	bne.n	8007d3e <_scanf_float+0x3a2>
 8007d0a:	9b01      	ldr	r3, [sp, #4]
 8007d0c:	454b      	cmp	r3, r9
 8007d0e:	eba3 0209 	sub.w	r2, r3, r9
 8007d12:	d121      	bne.n	8007d58 <_scanf_float+0x3bc>
 8007d14:	2200      	movs	r2, #0
 8007d16:	4659      	mov	r1, fp
 8007d18:	4640      	mov	r0, r8
 8007d1a:	f000 fe4b 	bl	80089b4 <_strtod_r>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	9b03      	ldr	r3, [sp, #12]
 8007d22:	f012 0f02 	tst.w	r2, #2
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	d021      	beq.n	8007d6e <_scanf_float+0x3d2>
 8007d2a:	9903      	ldr	r1, [sp, #12]
 8007d2c:	1d1a      	adds	r2, r3, #4
 8007d2e:	600a      	str	r2, [r1, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	ed83 0b00 	vstr	d0, [r3]
 8007d36:	68e3      	ldr	r3, [r4, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60e3      	str	r3, [r4, #12]
 8007d3c:	e66f      	b.n	8007a1e <_scanf_float+0x82>
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0e7      	beq.n	8007d14 <_scanf_float+0x378>
 8007d44:	9905      	ldr	r1, [sp, #20]
 8007d46:	230a      	movs	r3, #10
 8007d48:	462a      	mov	r2, r5
 8007d4a:	3101      	adds	r1, #1
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	f000 feb9 	bl	8008ac4 <_strtol_r>
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	9e05      	ldr	r6, [sp, #20]
 8007d56:	1ac2      	subs	r2, r0, r3
 8007d58:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007d5c:	429e      	cmp	r6, r3
 8007d5e:	bf28      	it	cs
 8007d60:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007d64:	490e      	ldr	r1, [pc, #56]	; (8007da0 <_scanf_float+0x404>)
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 f834 	bl	8007dd4 <siprintf>
 8007d6c:	e7d2      	b.n	8007d14 <_scanf_float+0x378>
 8007d6e:	9903      	ldr	r1, [sp, #12]
 8007d70:	f012 0f04 	tst.w	r2, #4
 8007d74:	f103 0204 	add.w	r2, r3, #4
 8007d78:	600a      	str	r2, [r1, #0]
 8007d7a:	d1d9      	bne.n	8007d30 <_scanf_float+0x394>
 8007d7c:	eeb4 0b40 	vcmp.f64	d0, d0
 8007d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d84:	681e      	ldr	r6, [r3, #0]
 8007d86:	d705      	bvc.n	8007d94 <_scanf_float+0x3f8>
 8007d88:	4806      	ldr	r0, [pc, #24]	; (8007da4 <_scanf_float+0x408>)
 8007d8a:	f000 f81d 	bl	8007dc8 <nanf>
 8007d8e:	ed86 0a00 	vstr	s0, [r6]
 8007d92:	e7d0      	b.n	8007d36 <_scanf_float+0x39a>
 8007d94:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007d98:	e7f9      	b.n	8007d8e <_scanf_float+0x3f2>
 8007d9a:	2500      	movs	r5, #0
 8007d9c:	e63f      	b.n	8007a1e <_scanf_float+0x82>
 8007d9e:	bf00      	nop
 8007da0:	0800b890 	.word	0x0800b890
 8007da4:	0800bd00 	.word	0x0800bd00

08007da8 <_sbrk_r>:
 8007da8:	b538      	push	{r3, r4, r5, lr}
 8007daa:	4d06      	ldr	r5, [pc, #24]	; (8007dc4 <_sbrk_r+0x1c>)
 8007dac:	2300      	movs	r3, #0
 8007dae:	4604      	mov	r4, r0
 8007db0:	4608      	mov	r0, r1
 8007db2:	602b      	str	r3, [r5, #0]
 8007db4:	f7f9 fad2 	bl	800135c <_sbrk>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_sbrk_r+0x1a>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_sbrk_r+0x1a>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20000468 	.word	0x20000468

08007dc8 <nanf>:
 8007dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007dd0 <nanf+0x8>
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	7fc00000 	.word	0x7fc00000

08007dd4 <siprintf>:
 8007dd4:	b40e      	push	{r1, r2, r3}
 8007dd6:	b500      	push	{lr}
 8007dd8:	b09c      	sub	sp, #112	; 0x70
 8007dda:	ab1d      	add	r3, sp, #116	; 0x74
 8007ddc:	9002      	str	r0, [sp, #8]
 8007dde:	9006      	str	r0, [sp, #24]
 8007de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <siprintf+0x38>)
 8007de6:	9107      	str	r1, [sp, #28]
 8007de8:	9104      	str	r1, [sp, #16]
 8007dea:	4909      	ldr	r1, [pc, #36]	; (8007e10 <siprintf+0x3c>)
 8007dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df0:	9105      	str	r1, [sp, #20]
 8007df2:	6800      	ldr	r0, [r0, #0]
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	a902      	add	r1, sp, #8
 8007df8:	f002 fd22 	bl	800a840 <_svfiprintf_r>
 8007dfc:	9b02      	ldr	r3, [sp, #8]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	b01c      	add	sp, #112	; 0x70
 8007e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e08:	b003      	add	sp, #12
 8007e0a:	4770      	bx	lr
 8007e0c:	2000001c 	.word	0x2000001c
 8007e10:	ffff0208 	.word	0xffff0208

08007e14 <sulp>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4604      	mov	r4, r0
 8007e18:	460d      	mov	r5, r1
 8007e1a:	4616      	mov	r6, r2
 8007e1c:	ec45 4b10 	vmov	d0, r4, r5
 8007e20:	f002 fb50 	bl	800a4c4 <__ulp>
 8007e24:	b17e      	cbz	r6, 8007e46 <sulp+0x32>
 8007e26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dd09      	ble.n	8007e46 <sulp+0x32>
 8007e32:	051b      	lsls	r3, r3, #20
 8007e34:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007e38:	2000      	movs	r0, #0
 8007e3a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8007e3e:	ec41 0b17 	vmov	d7, r0, r1
 8007e42:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007e46:	bd70      	pop	{r4, r5, r6, pc}

08007e48 <_strtod_l>:
 8007e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e4c:	ed2d 8b0e 	vpush	{d8-d14}
 8007e50:	b097      	sub	sp, #92	; 0x5c
 8007e52:	461f      	mov	r7, r3
 8007e54:	2300      	movs	r3, #0
 8007e56:	9312      	str	r3, [sp, #72]	; 0x48
 8007e58:	4ba1      	ldr	r3, [pc, #644]	; (80080e0 <_strtod_l+0x298>)
 8007e5a:	920d      	str	r2, [sp, #52]	; 0x34
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	4604      	mov	r4, r0
 8007e62:	4618      	mov	r0, r3
 8007e64:	468b      	mov	fp, r1
 8007e66:	f7f8 f9eb 	bl	8000240 <strlen>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	4605      	mov	r5, r0
 8007e70:	f04f 0900 	mov.w	r9, #0
 8007e74:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007e78:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e7a:	7813      	ldrb	r3, [r2, #0]
 8007e7c:	2b2b      	cmp	r3, #43	; 0x2b
 8007e7e:	d04d      	beq.n	8007f1c <_strtod_l+0xd4>
 8007e80:	d83a      	bhi.n	8007ef8 <_strtod_l+0xb0>
 8007e82:	2b0d      	cmp	r3, #13
 8007e84:	d833      	bhi.n	8007eee <_strtod_l+0xa6>
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	d833      	bhi.n	8007ef2 <_strtod_l+0xaa>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d03d      	beq.n	8007f0a <_strtod_l+0xc2>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9308      	str	r3, [sp, #32]
 8007e92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007e94:	7833      	ldrb	r3, [r6, #0]
 8007e96:	2b30      	cmp	r3, #48	; 0x30
 8007e98:	f040 80b0 	bne.w	8007ffc <_strtod_l+0x1b4>
 8007e9c:	7873      	ldrb	r3, [r6, #1]
 8007e9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ea2:	2b58      	cmp	r3, #88	; 0x58
 8007ea4:	d167      	bne.n	8007f76 <_strtod_l+0x12e>
 8007ea6:	9b08      	ldr	r3, [sp, #32]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	ab12      	add	r3, sp, #72	; 0x48
 8007eac:	9702      	str	r7, [sp, #8]
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	4a8c      	ldr	r2, [pc, #560]	; (80080e4 <_strtod_l+0x29c>)
 8007eb2:	ab13      	add	r3, sp, #76	; 0x4c
 8007eb4:	a911      	add	r1, sp, #68	; 0x44
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	f001 fc68 	bl	800978c <__gethex>
 8007ebc:	f010 0507 	ands.w	r5, r0, #7
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	d005      	beq.n	8007ed0 <_strtod_l+0x88>
 8007ec4:	2d06      	cmp	r5, #6
 8007ec6:	d12b      	bne.n	8007f20 <_strtod_l+0xd8>
 8007ec8:	3601      	adds	r6, #1
 8007eca:	2300      	movs	r3, #0
 8007ecc:	9611      	str	r6, [sp, #68]	; 0x44
 8007ece:	9308      	str	r3, [sp, #32]
 8007ed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f040 854e 	bne.w	8008974 <_strtod_l+0xb2c>
 8007ed8:	9b08      	ldr	r3, [sp, #32]
 8007eda:	b1e3      	cbz	r3, 8007f16 <_strtod_l+0xce>
 8007edc:	ec49 8b17 	vmov	d7, r8, r9
 8007ee0:	eeb1 0b47 	vneg.f64	d0, d7
 8007ee4:	b017      	add	sp, #92	; 0x5c
 8007ee6:	ecbd 8b0e 	vpop	{d8-d14}
 8007eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d1cd      	bne.n	8007e8e <_strtod_l+0x46>
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	9211      	str	r2, [sp, #68]	; 0x44
 8007ef6:	e7bf      	b.n	8007e78 <_strtod_l+0x30>
 8007ef8:	2b2d      	cmp	r3, #45	; 0x2d
 8007efa:	d1c8      	bne.n	8007e8e <_strtod_l+0x46>
 8007efc:	2301      	movs	r3, #1
 8007efe:	9308      	str	r3, [sp, #32]
 8007f00:	1c53      	adds	r3, r2, #1
 8007f02:	9311      	str	r3, [sp, #68]	; 0x44
 8007f04:	7853      	ldrb	r3, [r2, #1]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1c3      	bne.n	8007e92 <_strtod_l+0x4a>
 8007f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f0c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f040 852d 	bne.w	8008970 <_strtod_l+0xb28>
 8007f16:	ec49 8b10 	vmov	d0, r8, r9
 8007f1a:	e7e3      	b.n	8007ee4 <_strtod_l+0x9c>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e7ee      	b.n	8007efe <_strtod_l+0xb6>
 8007f20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f22:	b13a      	cbz	r2, 8007f34 <_strtod_l+0xec>
 8007f24:	2135      	movs	r1, #53	; 0x35
 8007f26:	a814      	add	r0, sp, #80	; 0x50
 8007f28:	f002 fbd4 	bl	800a6d4 <__copybits>
 8007f2c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f001 ff96 	bl	8009e60 <_Bfree>
 8007f34:	3d01      	subs	r5, #1
 8007f36:	2d04      	cmp	r5, #4
 8007f38:	d806      	bhi.n	8007f48 <_strtod_l+0x100>
 8007f3a:	e8df f005 	tbb	[pc, r5]
 8007f3e:	030a      	.short	0x030a
 8007f40:	1714      	.short	0x1714
 8007f42:	0a          	.byte	0x0a
 8007f43:	00          	.byte	0x00
 8007f44:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8007f48:	073f      	lsls	r7, r7, #28
 8007f4a:	d5c1      	bpl.n	8007ed0 <_strtod_l+0x88>
 8007f4c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007f50:	e7be      	b.n	8007ed0 <_strtod_l+0x88>
 8007f52:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8007f56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007f58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f5c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007f64:	e7f0      	b.n	8007f48 <_strtod_l+0x100>
 8007f66:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80080e8 <_strtod_l+0x2a0>
 8007f6a:	e7ed      	b.n	8007f48 <_strtod_l+0x100>
 8007f6c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007f70:	f04f 38ff 	mov.w	r8, #4294967295
 8007f74:	e7e8      	b.n	8007f48 <_strtod_l+0x100>
 8007f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f78:	1c5a      	adds	r2, r3, #1
 8007f7a:	9211      	str	r2, [sp, #68]	; 0x44
 8007f7c:	785b      	ldrb	r3, [r3, #1]
 8007f7e:	2b30      	cmp	r3, #48	; 0x30
 8007f80:	d0f9      	beq.n	8007f76 <_strtod_l+0x12e>
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0a4      	beq.n	8007ed0 <_strtod_l+0x88>
 8007f86:	2301      	movs	r3, #1
 8007f88:	f04f 0a00 	mov.w	sl, #0
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f90:	930a      	str	r3, [sp, #40]	; 0x28
 8007f92:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007f96:	f8cd a018 	str.w	sl, [sp, #24]
 8007f9a:	220a      	movs	r2, #10
 8007f9c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8007f9e:	7807      	ldrb	r7, [r0, #0]
 8007fa0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007fa4:	b2d9      	uxtb	r1, r3
 8007fa6:	2909      	cmp	r1, #9
 8007fa8:	d92a      	bls.n	8008000 <_strtod_l+0x1b8>
 8007faa:	9907      	ldr	r1, [sp, #28]
 8007fac:	462a      	mov	r2, r5
 8007fae:	f002 fd4f 	bl	800aa50 <strncmp>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d033      	beq.n	800801e <_strtod_l+0x1d6>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	9b06      	ldr	r3, [sp, #24]
 8007fba:	463a      	mov	r2, r7
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4607      	mov	r7, r0
 8007fc0:	2a65      	cmp	r2, #101	; 0x65
 8007fc2:	d001      	beq.n	8007fc8 <_strtod_l+0x180>
 8007fc4:	2a45      	cmp	r2, #69	; 0x45
 8007fc6:	d117      	bne.n	8007ff8 <_strtod_l+0x1b0>
 8007fc8:	b91b      	cbnz	r3, 8007fd2 <_strtod_l+0x18a>
 8007fca:	9b04      	ldr	r3, [sp, #16]
 8007fcc:	4303      	orrs	r3, r0
 8007fce:	d09c      	beq.n	8007f0a <_strtod_l+0xc2>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8007fd6:	f10b 0201 	add.w	r2, fp, #1
 8007fda:	9211      	str	r2, [sp, #68]	; 0x44
 8007fdc:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8007fe0:	2a2b      	cmp	r2, #43	; 0x2b
 8007fe2:	d071      	beq.n	80080c8 <_strtod_l+0x280>
 8007fe4:	2a2d      	cmp	r2, #45	; 0x2d
 8007fe6:	d077      	beq.n	80080d8 <_strtod_l+0x290>
 8007fe8:	f04f 0e00 	mov.w	lr, #0
 8007fec:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8007ff0:	2d09      	cmp	r5, #9
 8007ff2:	d97f      	bls.n	80080f4 <_strtod_l+0x2ac>
 8007ff4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007ff8:	2500      	movs	r5, #0
 8007ffa:	e09b      	b.n	8008134 <_strtod_l+0x2ec>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e7c3      	b.n	8007f88 <_strtod_l+0x140>
 8008000:	9906      	ldr	r1, [sp, #24]
 8008002:	2908      	cmp	r1, #8
 8008004:	bfdd      	ittte	le
 8008006:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008008:	fb02 3301 	mlale	r3, r2, r1, r3
 800800c:	9309      	strle	r3, [sp, #36]	; 0x24
 800800e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008012:	9b06      	ldr	r3, [sp, #24]
 8008014:	3001      	adds	r0, #1
 8008016:	3301      	adds	r3, #1
 8008018:	9306      	str	r3, [sp, #24]
 800801a:	9011      	str	r0, [sp, #68]	; 0x44
 800801c:	e7be      	b.n	8007f9c <_strtod_l+0x154>
 800801e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008020:	195a      	adds	r2, r3, r5
 8008022:	9211      	str	r2, [sp, #68]	; 0x44
 8008024:	5d5a      	ldrb	r2, [r3, r5]
 8008026:	9b06      	ldr	r3, [sp, #24]
 8008028:	b3a3      	cbz	r3, 8008094 <_strtod_l+0x24c>
 800802a:	4607      	mov	r7, r0
 800802c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008030:	2909      	cmp	r1, #9
 8008032:	d912      	bls.n	800805a <_strtod_l+0x212>
 8008034:	2101      	movs	r1, #1
 8008036:	e7c3      	b.n	8007fc0 <_strtod_l+0x178>
 8008038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800803a:	1c5a      	adds	r2, r3, #1
 800803c:	9211      	str	r2, [sp, #68]	; 0x44
 800803e:	785a      	ldrb	r2, [r3, #1]
 8008040:	3001      	adds	r0, #1
 8008042:	2a30      	cmp	r2, #48	; 0x30
 8008044:	d0f8      	beq.n	8008038 <_strtod_l+0x1f0>
 8008046:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800804a:	2b08      	cmp	r3, #8
 800804c:	f200 8497 	bhi.w	800897e <_strtod_l+0xb36>
 8008050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008052:	930a      	str	r3, [sp, #40]	; 0x28
 8008054:	4607      	mov	r7, r0
 8008056:	2000      	movs	r0, #0
 8008058:	4603      	mov	r3, r0
 800805a:	3a30      	subs	r2, #48	; 0x30
 800805c:	f100 0101 	add.w	r1, r0, #1
 8008060:	d012      	beq.n	8008088 <_strtod_l+0x240>
 8008062:	440f      	add	r7, r1
 8008064:	eb00 0c03 	add.w	ip, r0, r3
 8008068:	4619      	mov	r1, r3
 800806a:	250a      	movs	r5, #10
 800806c:	4561      	cmp	r1, ip
 800806e:	d113      	bne.n	8008098 <_strtod_l+0x250>
 8008070:	1819      	adds	r1, r3, r0
 8008072:	2908      	cmp	r1, #8
 8008074:	f103 0301 	add.w	r3, r3, #1
 8008078:	4403      	add	r3, r0
 800807a:	dc1c      	bgt.n	80080b6 <_strtod_l+0x26e>
 800807c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800807e:	210a      	movs	r1, #10
 8008080:	fb01 2200 	mla	r2, r1, r0, r2
 8008084:	9209      	str	r2, [sp, #36]	; 0x24
 8008086:	2100      	movs	r1, #0
 8008088:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800808a:	1c50      	adds	r0, r2, #1
 800808c:	9011      	str	r0, [sp, #68]	; 0x44
 800808e:	7852      	ldrb	r2, [r2, #1]
 8008090:	4608      	mov	r0, r1
 8008092:	e7cb      	b.n	800802c <_strtod_l+0x1e4>
 8008094:	9806      	ldr	r0, [sp, #24]
 8008096:	e7d4      	b.n	8008042 <_strtod_l+0x1fa>
 8008098:	2908      	cmp	r1, #8
 800809a:	dc04      	bgt.n	80080a6 <_strtod_l+0x25e>
 800809c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800809e:	436e      	muls	r6, r5
 80080a0:	9609      	str	r6, [sp, #36]	; 0x24
 80080a2:	3101      	adds	r1, #1
 80080a4:	e7e2      	b.n	800806c <_strtod_l+0x224>
 80080a6:	f101 0e01 	add.w	lr, r1, #1
 80080aa:	f1be 0f10 	cmp.w	lr, #16
 80080ae:	bfd8      	it	le
 80080b0:	fb05 fa0a 	mulle.w	sl, r5, sl
 80080b4:	e7f5      	b.n	80080a2 <_strtod_l+0x25a>
 80080b6:	2b10      	cmp	r3, #16
 80080b8:	bfdc      	itt	le
 80080ba:	210a      	movle	r1, #10
 80080bc:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80080c0:	e7e1      	b.n	8008086 <_strtod_l+0x23e>
 80080c2:	2700      	movs	r7, #0
 80080c4:	2101      	movs	r1, #1
 80080c6:	e780      	b.n	8007fca <_strtod_l+0x182>
 80080c8:	f04f 0e00 	mov.w	lr, #0
 80080cc:	f10b 0202 	add.w	r2, fp, #2
 80080d0:	9211      	str	r2, [sp, #68]	; 0x44
 80080d2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80080d6:	e789      	b.n	8007fec <_strtod_l+0x1a4>
 80080d8:	f04f 0e01 	mov.w	lr, #1
 80080dc:	e7f6      	b.n	80080cc <_strtod_l+0x284>
 80080de:	bf00      	nop
 80080e0:	0800bb24 	.word	0x0800bb24
 80080e4:	0800b898 	.word	0x0800b898
 80080e8:	7ff00000 	.word	0x7ff00000
 80080ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80080ee:	1c55      	adds	r5, r2, #1
 80080f0:	9511      	str	r5, [sp, #68]	; 0x44
 80080f2:	7852      	ldrb	r2, [r2, #1]
 80080f4:	2a30      	cmp	r2, #48	; 0x30
 80080f6:	d0f9      	beq.n	80080ec <_strtod_l+0x2a4>
 80080f8:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80080fc:	2d08      	cmp	r5, #8
 80080fe:	f63f af7b 	bhi.w	8007ff8 <_strtod_l+0x1b0>
 8008102:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008106:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008108:	9207      	str	r2, [sp, #28]
 800810a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800810c:	1c55      	adds	r5, r2, #1
 800810e:	9511      	str	r5, [sp, #68]	; 0x44
 8008110:	7852      	ldrb	r2, [r2, #1]
 8008112:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008116:	2e09      	cmp	r6, #9
 8008118:	d937      	bls.n	800818a <_strtod_l+0x342>
 800811a:	9e07      	ldr	r6, [sp, #28]
 800811c:	1bad      	subs	r5, r5, r6
 800811e:	2d08      	cmp	r5, #8
 8008120:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008124:	dc02      	bgt.n	800812c <_strtod_l+0x2e4>
 8008126:	4565      	cmp	r5, ip
 8008128:	bfa8      	it	ge
 800812a:	4665      	movge	r5, ip
 800812c:	f1be 0f00 	cmp.w	lr, #0
 8008130:	d000      	beq.n	8008134 <_strtod_l+0x2ec>
 8008132:	426d      	negs	r5, r5
 8008134:	2b00      	cmp	r3, #0
 8008136:	d14d      	bne.n	80081d4 <_strtod_l+0x38c>
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	4303      	orrs	r3, r0
 800813c:	f47f aec8 	bne.w	8007ed0 <_strtod_l+0x88>
 8008140:	2900      	cmp	r1, #0
 8008142:	f47f aee2 	bne.w	8007f0a <_strtod_l+0xc2>
 8008146:	2a69      	cmp	r2, #105	; 0x69
 8008148:	d027      	beq.n	800819a <_strtod_l+0x352>
 800814a:	dc24      	bgt.n	8008196 <_strtod_l+0x34e>
 800814c:	2a49      	cmp	r2, #73	; 0x49
 800814e:	d024      	beq.n	800819a <_strtod_l+0x352>
 8008150:	2a4e      	cmp	r2, #78	; 0x4e
 8008152:	f47f aeda 	bne.w	8007f0a <_strtod_l+0xc2>
 8008156:	4996      	ldr	r1, [pc, #600]	; (80083b0 <_strtod_l+0x568>)
 8008158:	a811      	add	r0, sp, #68	; 0x44
 800815a:	f001 fd6f 	bl	8009c3c <__match>
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f aed3 	beq.w	8007f0a <_strtod_l+0xc2>
 8008164:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b28      	cmp	r3, #40	; 0x28
 800816a:	d12d      	bne.n	80081c8 <_strtod_l+0x380>
 800816c:	4991      	ldr	r1, [pc, #580]	; (80083b4 <_strtod_l+0x56c>)
 800816e:	aa14      	add	r2, sp, #80	; 0x50
 8008170:	a811      	add	r0, sp, #68	; 0x44
 8008172:	f001 fd77 	bl	8009c64 <__hexnan>
 8008176:	2805      	cmp	r0, #5
 8008178:	d126      	bne.n	80081c8 <_strtod_l+0x380>
 800817a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800817c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008180:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008184:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008188:	e6a2      	b.n	8007ed0 <_strtod_l+0x88>
 800818a:	250a      	movs	r5, #10
 800818c:	fb05 250c 	mla	r5, r5, ip, r2
 8008190:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008194:	e7b9      	b.n	800810a <_strtod_l+0x2c2>
 8008196:	2a6e      	cmp	r2, #110	; 0x6e
 8008198:	e7db      	b.n	8008152 <_strtod_l+0x30a>
 800819a:	4987      	ldr	r1, [pc, #540]	; (80083b8 <_strtod_l+0x570>)
 800819c:	a811      	add	r0, sp, #68	; 0x44
 800819e:	f001 fd4d 	bl	8009c3c <__match>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	f43f aeb1 	beq.w	8007f0a <_strtod_l+0xc2>
 80081a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081aa:	4984      	ldr	r1, [pc, #528]	; (80083bc <_strtod_l+0x574>)
 80081ac:	3b01      	subs	r3, #1
 80081ae:	a811      	add	r0, sp, #68	; 0x44
 80081b0:	9311      	str	r3, [sp, #68]	; 0x44
 80081b2:	f001 fd43 	bl	8009c3c <__match>
 80081b6:	b910      	cbnz	r0, 80081be <_strtod_l+0x376>
 80081b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ba:	3301      	adds	r3, #1
 80081bc:	9311      	str	r3, [sp, #68]	; 0x44
 80081be:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80083d0 <_strtod_l+0x588>
 80081c2:	f04f 0800 	mov.w	r8, #0
 80081c6:	e683      	b.n	8007ed0 <_strtod_l+0x88>
 80081c8:	487d      	ldr	r0, [pc, #500]	; (80083c0 <_strtod_l+0x578>)
 80081ca:	f002 fc39 	bl	800aa40 <nan>
 80081ce:	ec59 8b10 	vmov	r8, r9, d0
 80081d2:	e67d      	b.n	8007ed0 <_strtod_l+0x88>
 80081d4:	1bea      	subs	r2, r5, r7
 80081d6:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80081da:	9207      	str	r2, [sp, #28]
 80081dc:	9a06      	ldr	r2, [sp, #24]
 80081de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	bf08      	it	eq
 80081e6:	461a      	moveq	r2, r3
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	9206      	str	r2, [sp, #24]
 80081ec:	461a      	mov	r2, r3
 80081ee:	bfa8      	it	ge
 80081f0:	2210      	movge	r2, #16
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	ec59 8b17 	vmov	r8, r9, d7
 80081f8:	dd0c      	ble.n	8008214 <_strtod_l+0x3cc>
 80081fa:	4972      	ldr	r1, [pc, #456]	; (80083c4 <_strtod_l+0x57c>)
 80081fc:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008200:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008204:	ee06 aa90 	vmov	s13, sl
 8008208:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800820c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008210:	ec59 8b16 	vmov	r8, r9, d6
 8008214:	2b0f      	cmp	r3, #15
 8008216:	dc36      	bgt.n	8008286 <_strtod_l+0x43e>
 8008218:	9907      	ldr	r1, [sp, #28]
 800821a:	2900      	cmp	r1, #0
 800821c:	f43f ae58 	beq.w	8007ed0 <_strtod_l+0x88>
 8008220:	dd23      	ble.n	800826a <_strtod_l+0x422>
 8008222:	2916      	cmp	r1, #22
 8008224:	dc0b      	bgt.n	800823e <_strtod_l+0x3f6>
 8008226:	4b67      	ldr	r3, [pc, #412]	; (80083c4 <_strtod_l+0x57c>)
 8008228:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800822c:	ed93 7b00 	vldr	d7, [r3]
 8008230:	ec49 8b16 	vmov	d6, r8, r9
 8008234:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008238:	ec59 8b17 	vmov	r8, r9, d7
 800823c:	e648      	b.n	8007ed0 <_strtod_l+0x88>
 800823e:	9807      	ldr	r0, [sp, #28]
 8008240:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008244:	4281      	cmp	r1, r0
 8008246:	db1e      	blt.n	8008286 <_strtod_l+0x43e>
 8008248:	4a5e      	ldr	r2, [pc, #376]	; (80083c4 <_strtod_l+0x57c>)
 800824a:	f1c3 030f 	rsb	r3, r3, #15
 800824e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008252:	ed91 7b00 	vldr	d7, [r1]
 8008256:	ec49 8b16 	vmov	d6, r8, r9
 800825a:	1ac3      	subs	r3, r0, r3
 800825c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008260:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008264:	ed92 6b00 	vldr	d6, [r2]
 8008268:	e7e4      	b.n	8008234 <_strtod_l+0x3ec>
 800826a:	9907      	ldr	r1, [sp, #28]
 800826c:	3116      	adds	r1, #22
 800826e:	db0a      	blt.n	8008286 <_strtod_l+0x43e>
 8008270:	4b54      	ldr	r3, [pc, #336]	; (80083c4 <_strtod_l+0x57c>)
 8008272:	1b7d      	subs	r5, r7, r5
 8008274:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008278:	ed95 7b00 	vldr	d7, [r5]
 800827c:	ec49 8b16 	vmov	d6, r8, r9
 8008280:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008284:	e7d8      	b.n	8008238 <_strtod_l+0x3f0>
 8008286:	9907      	ldr	r1, [sp, #28]
 8008288:	1a9a      	subs	r2, r3, r2
 800828a:	440a      	add	r2, r1
 800828c:	2a00      	cmp	r2, #0
 800828e:	dd6f      	ble.n	8008370 <_strtod_l+0x528>
 8008290:	f012 000f 	ands.w	r0, r2, #15
 8008294:	d00a      	beq.n	80082ac <_strtod_l+0x464>
 8008296:	494b      	ldr	r1, [pc, #300]	; (80083c4 <_strtod_l+0x57c>)
 8008298:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800829c:	ed91 7b00 	vldr	d7, [r1]
 80082a0:	ec49 8b16 	vmov	d6, r8, r9
 80082a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082a8:	ec59 8b17 	vmov	r8, r9, d7
 80082ac:	f032 020f 	bics.w	r2, r2, #15
 80082b0:	d04f      	beq.n	8008352 <_strtod_l+0x50a>
 80082b2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80082b6:	dd22      	ble.n	80082fe <_strtod_l+0x4b6>
 80082b8:	2500      	movs	r5, #0
 80082ba:	462e      	mov	r6, r5
 80082bc:	9506      	str	r5, [sp, #24]
 80082be:	462f      	mov	r7, r5
 80082c0:	2322      	movs	r3, #34	; 0x22
 80082c2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80083d0 <_strtod_l+0x588>
 80082c6:	6023      	str	r3, [r4, #0]
 80082c8:	f04f 0800 	mov.w	r8, #0
 80082cc:	9b06      	ldr	r3, [sp, #24]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f43f adfe 	beq.w	8007ed0 <_strtod_l+0x88>
 80082d4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80082d6:	4620      	mov	r0, r4
 80082d8:	f001 fdc2 	bl	8009e60 <_Bfree>
 80082dc:	4639      	mov	r1, r7
 80082de:	4620      	mov	r0, r4
 80082e0:	f001 fdbe 	bl	8009e60 <_Bfree>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4620      	mov	r0, r4
 80082e8:	f001 fdba 	bl	8009e60 <_Bfree>
 80082ec:	9906      	ldr	r1, [sp, #24]
 80082ee:	4620      	mov	r0, r4
 80082f0:	f001 fdb6 	bl	8009e60 <_Bfree>
 80082f4:	4629      	mov	r1, r5
 80082f6:	4620      	mov	r0, r4
 80082f8:	f001 fdb2 	bl	8009e60 <_Bfree>
 80082fc:	e5e8      	b.n	8007ed0 <_strtod_l+0x88>
 80082fe:	2000      	movs	r0, #0
 8008300:	ec49 8b17 	vmov	d7, r8, r9
 8008304:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80083c8 <_strtod_l+0x580>
 8008308:	1112      	asrs	r2, r2, #4
 800830a:	4601      	mov	r1, r0
 800830c:	2a01      	cmp	r2, #1
 800830e:	dc23      	bgt.n	8008358 <_strtod_l+0x510>
 8008310:	b108      	cbz	r0, 8008316 <_strtod_l+0x4ce>
 8008312:	ec59 8b17 	vmov	r8, r9, d7
 8008316:	4a2c      	ldr	r2, [pc, #176]	; (80083c8 <_strtod_l+0x580>)
 8008318:	482c      	ldr	r0, [pc, #176]	; (80083cc <_strtod_l+0x584>)
 800831a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800831e:	ed92 7b00 	vldr	d7, [r2]
 8008322:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008326:	ec49 8b16 	vmov	d6, r8, r9
 800832a:	4a29      	ldr	r2, [pc, #164]	; (80083d0 <_strtod_l+0x588>)
 800832c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008330:	ee17 1a90 	vmov	r1, s15
 8008334:	400a      	ands	r2, r1
 8008336:	4282      	cmp	r2, r0
 8008338:	ec59 8b17 	vmov	r8, r9, d7
 800833c:	d8bc      	bhi.n	80082b8 <_strtod_l+0x470>
 800833e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008342:	4282      	cmp	r2, r0
 8008344:	bf86      	itte	hi
 8008346:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80083d4 <_strtod_l+0x58c>
 800834a:	f04f 38ff 	movhi.w	r8, #4294967295
 800834e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008352:	2200      	movs	r2, #0
 8008354:	9204      	str	r2, [sp, #16]
 8008356:	e078      	b.n	800844a <_strtod_l+0x602>
 8008358:	07d6      	lsls	r6, r2, #31
 800835a:	d504      	bpl.n	8008366 <_strtod_l+0x51e>
 800835c:	ed9c 6b00 	vldr	d6, [ip]
 8008360:	2001      	movs	r0, #1
 8008362:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008366:	3101      	adds	r1, #1
 8008368:	1052      	asrs	r2, r2, #1
 800836a:	f10c 0c08 	add.w	ip, ip, #8
 800836e:	e7cd      	b.n	800830c <_strtod_l+0x4c4>
 8008370:	d0ef      	beq.n	8008352 <_strtod_l+0x50a>
 8008372:	4252      	negs	r2, r2
 8008374:	f012 000f 	ands.w	r0, r2, #15
 8008378:	d00a      	beq.n	8008390 <_strtod_l+0x548>
 800837a:	4912      	ldr	r1, [pc, #72]	; (80083c4 <_strtod_l+0x57c>)
 800837c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008380:	ed91 7b00 	vldr	d7, [r1]
 8008384:	ec49 8b16 	vmov	d6, r8, r9
 8008388:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800838c:	ec59 8b17 	vmov	r8, r9, d7
 8008390:	1112      	asrs	r2, r2, #4
 8008392:	d0de      	beq.n	8008352 <_strtod_l+0x50a>
 8008394:	2a1f      	cmp	r2, #31
 8008396:	dd1f      	ble.n	80083d8 <_strtod_l+0x590>
 8008398:	2500      	movs	r5, #0
 800839a:	462e      	mov	r6, r5
 800839c:	9506      	str	r5, [sp, #24]
 800839e:	462f      	mov	r7, r5
 80083a0:	2322      	movs	r3, #34	; 0x22
 80083a2:	f04f 0800 	mov.w	r8, #0
 80083a6:	f04f 0900 	mov.w	r9, #0
 80083aa:	6023      	str	r3, [r4, #0]
 80083ac:	e78e      	b.n	80082cc <_strtod_l+0x484>
 80083ae:	bf00      	nop
 80083b0:	0800b869 	.word	0x0800b869
 80083b4:	0800b8ac 	.word	0x0800b8ac
 80083b8:	0800b861 	.word	0x0800b861
 80083bc:	0800b9ec 	.word	0x0800b9ec
 80083c0:	0800bd00 	.word	0x0800bd00
 80083c4:	0800bbe0 	.word	0x0800bbe0
 80083c8:	0800bbb8 	.word	0x0800bbb8
 80083cc:	7ca00000 	.word	0x7ca00000
 80083d0:	7ff00000 	.word	0x7ff00000
 80083d4:	7fefffff 	.word	0x7fefffff
 80083d8:	f012 0110 	ands.w	r1, r2, #16
 80083dc:	bf18      	it	ne
 80083de:	216a      	movne	r1, #106	; 0x6a
 80083e0:	9104      	str	r1, [sp, #16]
 80083e2:	ec49 8b17 	vmov	d7, r8, r9
 80083e6:	49be      	ldr	r1, [pc, #760]	; (80086e0 <_strtod_l+0x898>)
 80083e8:	2000      	movs	r0, #0
 80083ea:	07d6      	lsls	r6, r2, #31
 80083ec:	d504      	bpl.n	80083f8 <_strtod_l+0x5b0>
 80083ee:	ed91 6b00 	vldr	d6, [r1]
 80083f2:	2001      	movs	r0, #1
 80083f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083f8:	1052      	asrs	r2, r2, #1
 80083fa:	f101 0108 	add.w	r1, r1, #8
 80083fe:	d1f4      	bne.n	80083ea <_strtod_l+0x5a2>
 8008400:	b108      	cbz	r0, 8008406 <_strtod_l+0x5be>
 8008402:	ec59 8b17 	vmov	r8, r9, d7
 8008406:	9a04      	ldr	r2, [sp, #16]
 8008408:	b1c2      	cbz	r2, 800843c <_strtod_l+0x5f4>
 800840a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800840e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008412:	2a00      	cmp	r2, #0
 8008414:	4648      	mov	r0, r9
 8008416:	dd11      	ble.n	800843c <_strtod_l+0x5f4>
 8008418:	2a1f      	cmp	r2, #31
 800841a:	f340 812e 	ble.w	800867a <_strtod_l+0x832>
 800841e:	2a34      	cmp	r2, #52	; 0x34
 8008420:	bfde      	ittt	le
 8008422:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008426:	f04f 32ff 	movle.w	r2, #4294967295
 800842a:	fa02 f101 	lslle.w	r1, r2, r1
 800842e:	f04f 0800 	mov.w	r8, #0
 8008432:	bfcc      	ite	gt
 8008434:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008438:	ea01 0900 	andle.w	r9, r1, r0
 800843c:	ec49 8b17 	vmov	d7, r8, r9
 8008440:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008448:	d0a6      	beq.n	8008398 <_strtod_l+0x550>
 800844a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800844c:	9200      	str	r2, [sp, #0]
 800844e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008450:	9a06      	ldr	r2, [sp, #24]
 8008452:	4620      	mov	r0, r4
 8008454:	f001 fd6c 	bl	8009f30 <__s2b>
 8008458:	9006      	str	r0, [sp, #24]
 800845a:	2800      	cmp	r0, #0
 800845c:	f43f af2c 	beq.w	80082b8 <_strtod_l+0x470>
 8008460:	9b07      	ldr	r3, [sp, #28]
 8008462:	1b7d      	subs	r5, r7, r5
 8008464:	2b00      	cmp	r3, #0
 8008466:	bfb4      	ite	lt
 8008468:	462b      	movlt	r3, r5
 800846a:	2300      	movge	r3, #0
 800846c:	9309      	str	r3, [sp, #36]	; 0x24
 800846e:	9b07      	ldr	r3, [sp, #28]
 8008470:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80086c0 <_strtod_l+0x878>
 8008474:	ed9f ab94 	vldr	d10, [pc, #592]	; 80086c8 <_strtod_l+0x880>
 8008478:	ed9f bb95 	vldr	d11, [pc, #596]	; 80086d0 <_strtod_l+0x888>
 800847c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008480:	2500      	movs	r5, #0
 8008482:	930c      	str	r3, [sp, #48]	; 0x30
 8008484:	462e      	mov	r6, r5
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	4620      	mov	r0, r4
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	f001 fca8 	bl	8009de0 <_Balloc>
 8008490:	4607      	mov	r7, r0
 8008492:	2800      	cmp	r0, #0
 8008494:	f43f af14 	beq.w	80082c0 <_strtod_l+0x478>
 8008498:	9b06      	ldr	r3, [sp, #24]
 800849a:	691a      	ldr	r2, [r3, #16]
 800849c:	3202      	adds	r2, #2
 800849e:	f103 010c 	add.w	r1, r3, #12
 80084a2:	0092      	lsls	r2, r2, #2
 80084a4:	300c      	adds	r0, #12
 80084a6:	f7fe fd3f 	bl	8006f28 <memcpy>
 80084aa:	ec49 8b10 	vmov	d0, r8, r9
 80084ae:	aa14      	add	r2, sp, #80	; 0x50
 80084b0:	a913      	add	r1, sp, #76	; 0x4c
 80084b2:	4620      	mov	r0, r4
 80084b4:	f002 f882 	bl	800a5bc <__d2b>
 80084b8:	ec49 8b18 	vmov	d8, r8, r9
 80084bc:	9012      	str	r0, [sp, #72]	; 0x48
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f aefe 	beq.w	80082c0 <_strtod_l+0x478>
 80084c4:	2101      	movs	r1, #1
 80084c6:	4620      	mov	r0, r4
 80084c8:	f001 fdcc 	bl	800a064 <__i2b>
 80084cc:	4606      	mov	r6, r0
 80084ce:	2800      	cmp	r0, #0
 80084d0:	f43f aef6 	beq.w	80082c0 <_strtod_l+0x478>
 80084d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084d6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80084d8:	2b00      	cmp	r3, #0
 80084da:	bfab      	itete	ge
 80084dc:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80084de:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80084e0:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80084e4:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80084e8:	bfac      	ite	ge
 80084ea:	eb03 0b02 	addge.w	fp, r3, r2
 80084ee:	eba2 0a03 	sublt.w	sl, r2, r3
 80084f2:	9a04      	ldr	r2, [sp, #16]
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	440b      	add	r3, r1
 80084f8:	4a7a      	ldr	r2, [pc, #488]	; (80086e4 <_strtod_l+0x89c>)
 80084fa:	3b01      	subs	r3, #1
 80084fc:	4293      	cmp	r3, r2
 80084fe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008502:	f280 80cd 	bge.w	80086a0 <_strtod_l+0x858>
 8008506:	1ad2      	subs	r2, r2, r3
 8008508:	2a1f      	cmp	r2, #31
 800850a:	eba1 0102 	sub.w	r1, r1, r2
 800850e:	f04f 0001 	mov.w	r0, #1
 8008512:	f300 80b9 	bgt.w	8008688 <_strtod_l+0x840>
 8008516:	fa00 f302 	lsl.w	r3, r0, r2
 800851a:	930b      	str	r3, [sp, #44]	; 0x2c
 800851c:	2300      	movs	r3, #0
 800851e:	930a      	str	r3, [sp, #40]	; 0x28
 8008520:	eb0b 0301 	add.w	r3, fp, r1
 8008524:	9a04      	ldr	r2, [sp, #16]
 8008526:	459b      	cmp	fp, r3
 8008528:	448a      	add	sl, r1
 800852a:	4492      	add	sl, r2
 800852c:	465a      	mov	r2, fp
 800852e:	bfa8      	it	ge
 8008530:	461a      	movge	r2, r3
 8008532:	4552      	cmp	r2, sl
 8008534:	bfa8      	it	ge
 8008536:	4652      	movge	r2, sl
 8008538:	2a00      	cmp	r2, #0
 800853a:	bfc2      	ittt	gt
 800853c:	1a9b      	subgt	r3, r3, r2
 800853e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008542:	ebab 0b02 	subgt.w	fp, fp, r2
 8008546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008548:	2a00      	cmp	r2, #0
 800854a:	dd18      	ble.n	800857e <_strtod_l+0x736>
 800854c:	4631      	mov	r1, r6
 800854e:	4620      	mov	r0, r4
 8008550:	930f      	str	r3, [sp, #60]	; 0x3c
 8008552:	f001 fe47 	bl	800a1e4 <__pow5mult>
 8008556:	4606      	mov	r6, r0
 8008558:	2800      	cmp	r0, #0
 800855a:	f43f aeb1 	beq.w	80082c0 <_strtod_l+0x478>
 800855e:	4601      	mov	r1, r0
 8008560:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008562:	4620      	mov	r0, r4
 8008564:	f001 fd94 	bl	800a090 <__multiply>
 8008568:	900e      	str	r0, [sp, #56]	; 0x38
 800856a:	2800      	cmp	r0, #0
 800856c:	f43f aea8 	beq.w	80082c0 <_strtod_l+0x478>
 8008570:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008572:	4620      	mov	r0, r4
 8008574:	f001 fc74 	bl	8009e60 <_Bfree>
 8008578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800857a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800857c:	9212      	str	r2, [sp, #72]	; 0x48
 800857e:	2b00      	cmp	r3, #0
 8008580:	f300 8093 	bgt.w	80086aa <_strtod_l+0x862>
 8008584:	9b07      	ldr	r3, [sp, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd08      	ble.n	800859c <_strtod_l+0x754>
 800858a:	4639      	mov	r1, r7
 800858c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800858e:	4620      	mov	r0, r4
 8008590:	f001 fe28 	bl	800a1e4 <__pow5mult>
 8008594:	4607      	mov	r7, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	f43f ae92 	beq.w	80082c0 <_strtod_l+0x478>
 800859c:	f1ba 0f00 	cmp.w	sl, #0
 80085a0:	dd08      	ble.n	80085b4 <_strtod_l+0x76c>
 80085a2:	4639      	mov	r1, r7
 80085a4:	4652      	mov	r2, sl
 80085a6:	4620      	mov	r0, r4
 80085a8:	f001 fe76 	bl	800a298 <__lshift>
 80085ac:	4607      	mov	r7, r0
 80085ae:	2800      	cmp	r0, #0
 80085b0:	f43f ae86 	beq.w	80082c0 <_strtod_l+0x478>
 80085b4:	f1bb 0f00 	cmp.w	fp, #0
 80085b8:	dd08      	ble.n	80085cc <_strtod_l+0x784>
 80085ba:	4631      	mov	r1, r6
 80085bc:	465a      	mov	r2, fp
 80085be:	4620      	mov	r0, r4
 80085c0:	f001 fe6a 	bl	800a298 <__lshift>
 80085c4:	4606      	mov	r6, r0
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f43f ae7a 	beq.w	80082c0 <_strtod_l+0x478>
 80085cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80085ce:	463a      	mov	r2, r7
 80085d0:	4620      	mov	r0, r4
 80085d2:	f001 feed 	bl	800a3b0 <__mdiff>
 80085d6:	4605      	mov	r5, r0
 80085d8:	2800      	cmp	r0, #0
 80085da:	f43f ae71 	beq.w	80082c0 <_strtod_l+0x478>
 80085de:	2300      	movs	r3, #0
 80085e0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80085e4:	60c3      	str	r3, [r0, #12]
 80085e6:	4631      	mov	r1, r6
 80085e8:	f001 fec6 	bl	800a378 <__mcmp>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	da7d      	bge.n	80086ec <_strtod_l+0x8a4>
 80085f0:	ea5a 0308 	orrs.w	r3, sl, r8
 80085f4:	f040 80a3 	bne.w	800873e <_strtod_l+0x8f6>
 80085f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f040 809e 	bne.w	800873e <_strtod_l+0x8f6>
 8008602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008606:	0d1b      	lsrs	r3, r3, #20
 8008608:	051b      	lsls	r3, r3, #20
 800860a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800860e:	f240 8096 	bls.w	800873e <_strtod_l+0x8f6>
 8008612:	696b      	ldr	r3, [r5, #20]
 8008614:	b91b      	cbnz	r3, 800861e <_strtod_l+0x7d6>
 8008616:	692b      	ldr	r3, [r5, #16]
 8008618:	2b01      	cmp	r3, #1
 800861a:	f340 8090 	ble.w	800873e <_strtod_l+0x8f6>
 800861e:	4629      	mov	r1, r5
 8008620:	2201      	movs	r2, #1
 8008622:	4620      	mov	r0, r4
 8008624:	f001 fe38 	bl	800a298 <__lshift>
 8008628:	4631      	mov	r1, r6
 800862a:	4605      	mov	r5, r0
 800862c:	f001 fea4 	bl	800a378 <__mcmp>
 8008630:	2800      	cmp	r0, #0
 8008632:	f340 8084 	ble.w	800873e <_strtod_l+0x8f6>
 8008636:	9904      	ldr	r1, [sp, #16]
 8008638:	4a2b      	ldr	r2, [pc, #172]	; (80086e8 <_strtod_l+0x8a0>)
 800863a:	464b      	mov	r3, r9
 800863c:	2900      	cmp	r1, #0
 800863e:	f000 809d 	beq.w	800877c <_strtod_l+0x934>
 8008642:	ea02 0109 	and.w	r1, r2, r9
 8008646:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800864a:	f300 8097 	bgt.w	800877c <_strtod_l+0x934>
 800864e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008652:	f77f aea5 	ble.w	80083a0 <_strtod_l+0x558>
 8008656:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80086d8 <_strtod_l+0x890>
 800865a:	ec49 8b16 	vmov	d6, r8, r9
 800865e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008662:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008666:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800866a:	4313      	orrs	r3, r2
 800866c:	bf08      	it	eq
 800866e:	2322      	moveq	r3, #34	; 0x22
 8008670:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008674:	bf08      	it	eq
 8008676:	6023      	streq	r3, [r4, #0]
 8008678:	e62c      	b.n	80082d4 <_strtod_l+0x48c>
 800867a:	f04f 31ff 	mov.w	r1, #4294967295
 800867e:	fa01 f202 	lsl.w	r2, r1, r2
 8008682:	ea02 0808 	and.w	r8, r2, r8
 8008686:	e6d9      	b.n	800843c <_strtod_l+0x5f4>
 8008688:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800868c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008690:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008694:	33e2      	adds	r3, #226	; 0xe2
 8008696:	fa00 f303 	lsl.w	r3, r0, r3
 800869a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800869e:	e73f      	b.n	8008520 <_strtod_l+0x6d8>
 80086a0:	2200      	movs	r2, #0
 80086a2:	2301      	movs	r3, #1
 80086a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80086a8:	e73a      	b.n	8008520 <_strtod_l+0x6d8>
 80086aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 80086ac:	461a      	mov	r2, r3
 80086ae:	4620      	mov	r0, r4
 80086b0:	f001 fdf2 	bl	800a298 <__lshift>
 80086b4:	9012      	str	r0, [sp, #72]	; 0x48
 80086b6:	2800      	cmp	r0, #0
 80086b8:	f47f af64 	bne.w	8008584 <_strtod_l+0x73c>
 80086bc:	e600      	b.n	80082c0 <_strtod_l+0x478>
 80086be:	bf00      	nop
 80086c0:	94a03595 	.word	0x94a03595
 80086c4:	3fcfffff 	.word	0x3fcfffff
 80086c8:	94a03595 	.word	0x94a03595
 80086cc:	3fdfffff 	.word	0x3fdfffff
 80086d0:	35afe535 	.word	0x35afe535
 80086d4:	3fe00000 	.word	0x3fe00000
 80086d8:	00000000 	.word	0x00000000
 80086dc:	39500000 	.word	0x39500000
 80086e0:	0800b8c0 	.word	0x0800b8c0
 80086e4:	fffffc02 	.word	0xfffffc02
 80086e8:	7ff00000 	.word	0x7ff00000
 80086ec:	46cb      	mov	fp, r9
 80086ee:	d15f      	bne.n	80087b0 <_strtod_l+0x968>
 80086f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086f4:	f1ba 0f00 	cmp.w	sl, #0
 80086f8:	d02a      	beq.n	8008750 <_strtod_l+0x908>
 80086fa:	4aa7      	ldr	r2, [pc, #668]	; (8008998 <_strtod_l+0xb50>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d12b      	bne.n	8008758 <_strtod_l+0x910>
 8008700:	9b04      	ldr	r3, [sp, #16]
 8008702:	4642      	mov	r2, r8
 8008704:	b1fb      	cbz	r3, 8008746 <_strtod_l+0x8fe>
 8008706:	4ba5      	ldr	r3, [pc, #660]	; (800899c <_strtod_l+0xb54>)
 8008708:	ea09 0303 	and.w	r3, r9, r3
 800870c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008710:	f04f 31ff 	mov.w	r1, #4294967295
 8008714:	d81a      	bhi.n	800874c <_strtod_l+0x904>
 8008716:	0d1b      	lsrs	r3, r3, #20
 8008718:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800871c:	fa01 f303 	lsl.w	r3, r1, r3
 8008720:	429a      	cmp	r2, r3
 8008722:	d119      	bne.n	8008758 <_strtod_l+0x910>
 8008724:	4b9e      	ldr	r3, [pc, #632]	; (80089a0 <_strtod_l+0xb58>)
 8008726:	459b      	cmp	fp, r3
 8008728:	d102      	bne.n	8008730 <_strtod_l+0x8e8>
 800872a:	3201      	adds	r2, #1
 800872c:	f43f adc8 	beq.w	80082c0 <_strtod_l+0x478>
 8008730:	4b9a      	ldr	r3, [pc, #616]	; (800899c <_strtod_l+0xb54>)
 8008732:	ea0b 0303 	and.w	r3, fp, r3
 8008736:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800873a:	f04f 0800 	mov.w	r8, #0
 800873e:	9b04      	ldr	r3, [sp, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d188      	bne.n	8008656 <_strtod_l+0x80e>
 8008744:	e5c6      	b.n	80082d4 <_strtod_l+0x48c>
 8008746:	f04f 33ff 	mov.w	r3, #4294967295
 800874a:	e7e9      	b.n	8008720 <_strtod_l+0x8d8>
 800874c:	460b      	mov	r3, r1
 800874e:	e7e7      	b.n	8008720 <_strtod_l+0x8d8>
 8008750:	ea53 0308 	orrs.w	r3, r3, r8
 8008754:	f43f af6f 	beq.w	8008636 <_strtod_l+0x7ee>
 8008758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875a:	b1cb      	cbz	r3, 8008790 <_strtod_l+0x948>
 800875c:	ea13 0f0b 	tst.w	r3, fp
 8008760:	d0ed      	beq.n	800873e <_strtod_l+0x8f6>
 8008762:	9a04      	ldr	r2, [sp, #16]
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f1ba 0f00 	cmp.w	sl, #0
 800876c:	d014      	beq.n	8008798 <_strtod_l+0x950>
 800876e:	f7ff fb51 	bl	8007e14 <sulp>
 8008772:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008776:	ec59 8b17 	vmov	r8, r9, d7
 800877a:	e7e0      	b.n	800873e <_strtod_l+0x8f6>
 800877c:	4013      	ands	r3, r2
 800877e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008782:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008786:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800878a:	f04f 38ff 	mov.w	r8, #4294967295
 800878e:	e7d6      	b.n	800873e <_strtod_l+0x8f6>
 8008790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008792:	ea13 0f08 	tst.w	r3, r8
 8008796:	e7e3      	b.n	8008760 <_strtod_l+0x918>
 8008798:	f7ff fb3c 	bl	8007e14 <sulp>
 800879c:	ee38 0b40 	vsub.f64	d0, d8, d0
 80087a0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80087a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087a8:	ec59 8b10 	vmov	r8, r9, d0
 80087ac:	d1c7      	bne.n	800873e <_strtod_l+0x8f6>
 80087ae:	e5f7      	b.n	80083a0 <_strtod_l+0x558>
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	f001 ff5e 	bl	800a674 <__ratio>
 80087b8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80087bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80087c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c4:	d865      	bhi.n	8008892 <_strtod_l+0xa4a>
 80087c6:	f1ba 0f00 	cmp.w	sl, #0
 80087ca:	d042      	beq.n	8008852 <_strtod_l+0xa0a>
 80087cc:	4b75      	ldr	r3, [pc, #468]	; (80089a4 <_strtod_l+0xb5c>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80087d4:	4871      	ldr	r0, [pc, #452]	; (800899c <_strtod_l+0xb54>)
 80087d6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80089b0 <_strtod_l+0xb68>
 80087da:	ea0b 0100 	and.w	r1, fp, r0
 80087de:	4561      	cmp	r1, ip
 80087e0:	f040 808e 	bne.w	8008900 <_strtod_l+0xab8>
 80087e4:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80087e8:	ec49 8b10 	vmov	d0, r8, r9
 80087ec:	ec43 2b1c 	vmov	d12, r2, r3
 80087f0:	910a      	str	r1, [sp, #40]	; 0x28
 80087f2:	f001 fe67 	bl	800a4c4 <__ulp>
 80087f6:	ec49 8b1e 	vmov	d14, r8, r9
 80087fa:	4868      	ldr	r0, [pc, #416]	; (800899c <_strtod_l+0xb54>)
 80087fc:	eeac eb00 	vfma.f64	d14, d12, d0
 8008800:	ee1e 3a90 	vmov	r3, s29
 8008804:	4a68      	ldr	r2, [pc, #416]	; (80089a8 <_strtod_l+0xb60>)
 8008806:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008808:	4018      	ands	r0, r3
 800880a:	4290      	cmp	r0, r2
 800880c:	ec59 8b1e 	vmov	r8, r9, d14
 8008810:	d94e      	bls.n	80088b0 <_strtod_l+0xa68>
 8008812:	ee18 3a90 	vmov	r3, s17
 8008816:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800881a:	4293      	cmp	r3, r2
 800881c:	d104      	bne.n	8008828 <_strtod_l+0x9e0>
 800881e:	ee18 3a10 	vmov	r3, s16
 8008822:	3301      	adds	r3, #1
 8008824:	f43f ad4c 	beq.w	80082c0 <_strtod_l+0x478>
 8008828:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80089a0 <_strtod_l+0xb58>
 800882c:	f04f 38ff 	mov.w	r8, #4294967295
 8008830:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008832:	4620      	mov	r0, r4
 8008834:	f001 fb14 	bl	8009e60 <_Bfree>
 8008838:	4639      	mov	r1, r7
 800883a:	4620      	mov	r0, r4
 800883c:	f001 fb10 	bl	8009e60 <_Bfree>
 8008840:	4631      	mov	r1, r6
 8008842:	4620      	mov	r0, r4
 8008844:	f001 fb0c 	bl	8009e60 <_Bfree>
 8008848:	4629      	mov	r1, r5
 800884a:	4620      	mov	r0, r4
 800884c:	f001 fb08 	bl	8009e60 <_Bfree>
 8008850:	e619      	b.n	8008486 <_strtod_l+0x63e>
 8008852:	f1b8 0f00 	cmp.w	r8, #0
 8008856:	d112      	bne.n	800887e <_strtod_l+0xa36>
 8008858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800885c:	b9b3      	cbnz	r3, 800888c <_strtod_l+0xa44>
 800885e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008862:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800886e:	bf58      	it	pl
 8008870:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8008874:	eeb1 7b4d 	vneg.f64	d7, d13
 8008878:	ec53 2b17 	vmov	r2, r3, d7
 800887c:	e7aa      	b.n	80087d4 <_strtod_l+0x98c>
 800887e:	f1b8 0f01 	cmp.w	r8, #1
 8008882:	d103      	bne.n	800888c <_strtod_l+0xa44>
 8008884:	f1b9 0f00 	cmp.w	r9, #0
 8008888:	f43f ad8a 	beq.w	80083a0 <_strtod_l+0x558>
 800888c:	4b47      	ldr	r3, [pc, #284]	; (80089ac <_strtod_l+0xb64>)
 800888e:	2200      	movs	r2, #0
 8008890:	e79e      	b.n	80087d0 <_strtod_l+0x988>
 8008892:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008896:	ee20 db0d 	vmul.f64	d13, d0, d13
 800889a:	f1ba 0f00 	cmp.w	sl, #0
 800889e:	d104      	bne.n	80088aa <_strtod_l+0xa62>
 80088a0:	eeb1 7b4d 	vneg.f64	d7, d13
 80088a4:	ec53 2b17 	vmov	r2, r3, d7
 80088a8:	e794      	b.n	80087d4 <_strtod_l+0x98c>
 80088aa:	eeb0 7b4d 	vmov.f64	d7, d13
 80088ae:	e7f9      	b.n	80088a4 <_strtod_l+0xa5c>
 80088b0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80088b4:	9b04      	ldr	r3, [sp, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1ba      	bne.n	8008830 <_strtod_l+0x9e8>
 80088ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80088be:	0d1b      	lsrs	r3, r3, #20
 80088c0:	051b      	lsls	r3, r3, #20
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d1b4      	bne.n	8008830 <_strtod_l+0x9e8>
 80088c6:	ec51 0b1d 	vmov	r0, r1, d13
 80088ca:	f7f7 fee5 	bl	8000698 <__aeabi_d2lz>
 80088ce:	f7f7 fe9d 	bl	800060c <__aeabi_l2d>
 80088d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088d6:	ec41 0b17 	vmov	d7, r0, r1
 80088da:	ea43 0308 	orr.w	r3, r3, r8
 80088de:	ea53 030a 	orrs.w	r3, r3, sl
 80088e2:	ee3d db47 	vsub.f64	d13, d13, d7
 80088e6:	d03c      	beq.n	8008962 <_strtod_l+0xb1a>
 80088e8:	eeb4 dbca 	vcmpe.f64	d13, d10
 80088ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f0:	f53f acf0 	bmi.w	80082d4 <_strtod_l+0x48c>
 80088f4:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80088f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fc:	dd98      	ble.n	8008830 <_strtod_l+0x9e8>
 80088fe:	e4e9      	b.n	80082d4 <_strtod_l+0x48c>
 8008900:	9804      	ldr	r0, [sp, #16]
 8008902:	b1f0      	cbz	r0, 8008942 <_strtod_l+0xafa>
 8008904:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008908:	d81b      	bhi.n	8008942 <_strtod_l+0xafa>
 800890a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008990 <_strtod_l+0xb48>
 800890e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8008912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008916:	d811      	bhi.n	800893c <_strtod_l+0xaf4>
 8008918:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800891c:	ee1d 3a10 	vmov	r3, s26
 8008920:	2b01      	cmp	r3, #1
 8008922:	bf38      	it	cc
 8008924:	2301      	movcc	r3, #1
 8008926:	ee0d 3a10 	vmov	s26, r3
 800892a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800892e:	f1ba 0f00 	cmp.w	sl, #0
 8008932:	d113      	bne.n	800895c <_strtod_l+0xb14>
 8008934:	eeb1 7b4d 	vneg.f64	d7, d13
 8008938:	ec53 2b17 	vmov	r2, r3, d7
 800893c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8008940:	1a43      	subs	r3, r0, r1
 8008942:	eeb0 0b48 	vmov.f64	d0, d8
 8008946:	ec43 2b1c 	vmov	d12, r2, r3
 800894a:	910a      	str	r1, [sp, #40]	; 0x28
 800894c:	f001 fdba 	bl	800a4c4 <__ulp>
 8008950:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008952:	eeac 8b00 	vfma.f64	d8, d12, d0
 8008956:	ec59 8b18 	vmov	r8, r9, d8
 800895a:	e7ab      	b.n	80088b4 <_strtod_l+0xa6c>
 800895c:	eeb0 7b4d 	vmov.f64	d7, d13
 8008960:	e7ea      	b.n	8008938 <_strtod_l+0xaf0>
 8008962:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8008966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800896a:	f57f af61 	bpl.w	8008830 <_strtod_l+0x9e8>
 800896e:	e4b1      	b.n	80082d4 <_strtod_l+0x48c>
 8008970:	2300      	movs	r3, #0
 8008972:	9308      	str	r3, [sp, #32]
 8008974:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	f7ff baad 	b.w	8007ed8 <_strtod_l+0x90>
 800897e:	2a65      	cmp	r2, #101	; 0x65
 8008980:	f43f ab9f 	beq.w	80080c2 <_strtod_l+0x27a>
 8008984:	2a45      	cmp	r2, #69	; 0x45
 8008986:	f43f ab9c 	beq.w	80080c2 <_strtod_l+0x27a>
 800898a:	2101      	movs	r1, #1
 800898c:	f7ff bbd4 	b.w	8008138 <_strtod_l+0x2f0>
 8008990:	ffc00000 	.word	0xffc00000
 8008994:	41dfffff 	.word	0x41dfffff
 8008998:	000fffff 	.word	0x000fffff
 800899c:	7ff00000 	.word	0x7ff00000
 80089a0:	7fefffff 	.word	0x7fefffff
 80089a4:	3ff00000 	.word	0x3ff00000
 80089a8:	7c9fffff 	.word	0x7c9fffff
 80089ac:	bff00000 	.word	0xbff00000
 80089b0:	7fe00000 	.word	0x7fe00000

080089b4 <_strtod_r>:
 80089b4:	4b01      	ldr	r3, [pc, #4]	; (80089bc <_strtod_r+0x8>)
 80089b6:	f7ff ba47 	b.w	8007e48 <_strtod_l>
 80089ba:	bf00      	nop
 80089bc:	20000084 	.word	0x20000084

080089c0 <_strtol_l.constprop.0>:
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c6:	d001      	beq.n	80089cc <_strtol_l.constprop.0+0xc>
 80089c8:	2b24      	cmp	r3, #36	; 0x24
 80089ca:	d906      	bls.n	80089da <_strtol_l.constprop.0+0x1a>
 80089cc:	f7fe fa7a 	bl	8006ec4 <__errno>
 80089d0:	2316      	movs	r3, #22
 80089d2:	6003      	str	r3, [r0, #0]
 80089d4:	2000      	movs	r0, #0
 80089d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ac0 <_strtol_l.constprop.0+0x100>
 80089de:	460d      	mov	r5, r1
 80089e0:	462e      	mov	r6, r5
 80089e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80089ea:	f017 0708 	ands.w	r7, r7, #8
 80089ee:	d1f7      	bne.n	80089e0 <_strtol_l.constprop.0+0x20>
 80089f0:	2c2d      	cmp	r4, #45	; 0x2d
 80089f2:	d132      	bne.n	8008a5a <_strtol_l.constprop.0+0x9a>
 80089f4:	782c      	ldrb	r4, [r5, #0]
 80089f6:	2701      	movs	r7, #1
 80089f8:	1cb5      	adds	r5, r6, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d05b      	beq.n	8008ab6 <_strtol_l.constprop.0+0xf6>
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d109      	bne.n	8008a16 <_strtol_l.constprop.0+0x56>
 8008a02:	2c30      	cmp	r4, #48	; 0x30
 8008a04:	d107      	bne.n	8008a16 <_strtol_l.constprop.0+0x56>
 8008a06:	782c      	ldrb	r4, [r5, #0]
 8008a08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008a0c:	2c58      	cmp	r4, #88	; 0x58
 8008a0e:	d14d      	bne.n	8008aac <_strtol_l.constprop.0+0xec>
 8008a10:	786c      	ldrb	r4, [r5, #1]
 8008a12:	2310      	movs	r3, #16
 8008a14:	3502      	adds	r5, #2
 8008a16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a1e:	f04f 0c00 	mov.w	ip, #0
 8008a22:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a26:	4666      	mov	r6, ip
 8008a28:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008a30:	f1be 0f09 	cmp.w	lr, #9
 8008a34:	d816      	bhi.n	8008a64 <_strtol_l.constprop.0+0xa4>
 8008a36:	4674      	mov	r4, lr
 8008a38:	42a3      	cmp	r3, r4
 8008a3a:	dd24      	ble.n	8008a86 <_strtol_l.constprop.0+0xc6>
 8008a3c:	f1bc 0f00 	cmp.w	ip, #0
 8008a40:	db1e      	blt.n	8008a80 <_strtol_l.constprop.0+0xc0>
 8008a42:	45b1      	cmp	r9, r6
 8008a44:	d31c      	bcc.n	8008a80 <_strtol_l.constprop.0+0xc0>
 8008a46:	d101      	bne.n	8008a4c <_strtol_l.constprop.0+0x8c>
 8008a48:	45a2      	cmp	sl, r4
 8008a4a:	db19      	blt.n	8008a80 <_strtol_l.constprop.0+0xc0>
 8008a4c:	fb06 4603 	mla	r6, r6, r3, r4
 8008a50:	f04f 0c01 	mov.w	ip, #1
 8008a54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a58:	e7e8      	b.n	8008a2c <_strtol_l.constprop.0+0x6c>
 8008a5a:	2c2b      	cmp	r4, #43	; 0x2b
 8008a5c:	bf04      	itt	eq
 8008a5e:	782c      	ldrbeq	r4, [r5, #0]
 8008a60:	1cb5      	addeq	r5, r6, #2
 8008a62:	e7ca      	b.n	80089fa <_strtol_l.constprop.0+0x3a>
 8008a64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008a68:	f1be 0f19 	cmp.w	lr, #25
 8008a6c:	d801      	bhi.n	8008a72 <_strtol_l.constprop.0+0xb2>
 8008a6e:	3c37      	subs	r4, #55	; 0x37
 8008a70:	e7e2      	b.n	8008a38 <_strtol_l.constprop.0+0x78>
 8008a72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008a76:	f1be 0f19 	cmp.w	lr, #25
 8008a7a:	d804      	bhi.n	8008a86 <_strtol_l.constprop.0+0xc6>
 8008a7c:	3c57      	subs	r4, #87	; 0x57
 8008a7e:	e7db      	b.n	8008a38 <_strtol_l.constprop.0+0x78>
 8008a80:	f04f 3cff 	mov.w	ip, #4294967295
 8008a84:	e7e6      	b.n	8008a54 <_strtol_l.constprop.0+0x94>
 8008a86:	f1bc 0f00 	cmp.w	ip, #0
 8008a8a:	da05      	bge.n	8008a98 <_strtol_l.constprop.0+0xd8>
 8008a8c:	2322      	movs	r3, #34	; 0x22
 8008a8e:	6003      	str	r3, [r0, #0]
 8008a90:	4646      	mov	r6, r8
 8008a92:	b942      	cbnz	r2, 8008aa6 <_strtol_l.constprop.0+0xe6>
 8008a94:	4630      	mov	r0, r6
 8008a96:	e79e      	b.n	80089d6 <_strtol_l.constprop.0+0x16>
 8008a98:	b107      	cbz	r7, 8008a9c <_strtol_l.constprop.0+0xdc>
 8008a9a:	4276      	negs	r6, r6
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	d0f9      	beq.n	8008a94 <_strtol_l.constprop.0+0xd4>
 8008aa0:	f1bc 0f00 	cmp.w	ip, #0
 8008aa4:	d000      	beq.n	8008aa8 <_strtol_l.constprop.0+0xe8>
 8008aa6:	1e69      	subs	r1, r5, #1
 8008aa8:	6011      	str	r1, [r2, #0]
 8008aaa:	e7f3      	b.n	8008a94 <_strtol_l.constprop.0+0xd4>
 8008aac:	2430      	movs	r4, #48	; 0x30
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1b1      	bne.n	8008a16 <_strtol_l.constprop.0+0x56>
 8008ab2:	2308      	movs	r3, #8
 8008ab4:	e7af      	b.n	8008a16 <_strtol_l.constprop.0+0x56>
 8008ab6:	2c30      	cmp	r4, #48	; 0x30
 8008ab8:	d0a5      	beq.n	8008a06 <_strtol_l.constprop.0+0x46>
 8008aba:	230a      	movs	r3, #10
 8008abc:	e7ab      	b.n	8008a16 <_strtol_l.constprop.0+0x56>
 8008abe:	bf00      	nop
 8008ac0:	0800b8e9 	.word	0x0800b8e9

08008ac4 <_strtol_r>:
 8008ac4:	f7ff bf7c 	b.w	80089c0 <_strtol_l.constprop.0>

08008ac8 <quorem>:
 8008ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	6903      	ldr	r3, [r0, #16]
 8008ace:	690c      	ldr	r4, [r1, #16]
 8008ad0:	42a3      	cmp	r3, r4
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	f2c0 8081 	blt.w	8008bda <quorem+0x112>
 8008ad8:	3c01      	subs	r4, #1
 8008ada:	f101 0814 	add.w	r8, r1, #20
 8008ade:	f100 0514 	add.w	r5, r0, #20
 8008ae2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ae6:	9301      	str	r3, [sp, #4]
 8008ae8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008aec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af0:	3301      	adds	r3, #1
 8008af2:	429a      	cmp	r2, r3
 8008af4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008af8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008afc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b00:	d331      	bcc.n	8008b66 <quorem+0x9e>
 8008b02:	f04f 0e00 	mov.w	lr, #0
 8008b06:	4640      	mov	r0, r8
 8008b08:	46ac      	mov	ip, r5
 8008b0a:	46f2      	mov	sl, lr
 8008b0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b10:	b293      	uxth	r3, r2
 8008b12:	fb06 e303 	mla	r3, r6, r3, lr
 8008b16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008b20:	f8dc a000 	ldr.w	sl, [ip]
 8008b24:	0c12      	lsrs	r2, r2, #16
 8008b26:	fa13 f38a 	uxtah	r3, r3, sl
 8008b2a:	fb06 e202 	mla	r2, r6, r2, lr
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	9b00      	ldr	r3, [sp, #0]
 8008b32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b36:	b292      	uxth	r2, r2
 8008b38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b40:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b44:	4581      	cmp	r9, r0
 8008b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b4a:	f84c 3b04 	str.w	r3, [ip], #4
 8008b4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b52:	d2db      	bcs.n	8008b0c <quorem+0x44>
 8008b54:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b58:	b92b      	cbnz	r3, 8008b66 <quorem+0x9e>
 8008b5a:	9b01      	ldr	r3, [sp, #4]
 8008b5c:	3b04      	subs	r3, #4
 8008b5e:	429d      	cmp	r5, r3
 8008b60:	461a      	mov	r2, r3
 8008b62:	d32e      	bcc.n	8008bc2 <quorem+0xfa>
 8008b64:	613c      	str	r4, [r7, #16]
 8008b66:	4638      	mov	r0, r7
 8008b68:	f001 fc06 	bl	800a378 <__mcmp>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	db24      	blt.n	8008bba <quorem+0xf2>
 8008b70:	3601      	adds	r6, #1
 8008b72:	4628      	mov	r0, r5
 8008b74:	f04f 0c00 	mov.w	ip, #0
 8008b78:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b7c:	f8d0 e000 	ldr.w	lr, [r0]
 8008b80:	b293      	uxth	r3, r2
 8008b82:	ebac 0303 	sub.w	r3, ip, r3
 8008b86:	0c12      	lsrs	r2, r2, #16
 8008b88:	fa13 f38e 	uxtah	r3, r3, lr
 8008b8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b9a:	45c1      	cmp	r9, r8
 8008b9c:	f840 3b04 	str.w	r3, [r0], #4
 8008ba0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ba4:	d2e8      	bcs.n	8008b78 <quorem+0xb0>
 8008ba6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008baa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bae:	b922      	cbnz	r2, 8008bba <quorem+0xf2>
 8008bb0:	3b04      	subs	r3, #4
 8008bb2:	429d      	cmp	r5, r3
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	d30a      	bcc.n	8008bce <quorem+0x106>
 8008bb8:	613c      	str	r4, [r7, #16]
 8008bba:	4630      	mov	r0, r6
 8008bbc:	b003      	add	sp, #12
 8008bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc2:	6812      	ldr	r2, [r2, #0]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	2a00      	cmp	r2, #0
 8008bc8:	d1cc      	bne.n	8008b64 <quorem+0x9c>
 8008bca:	3c01      	subs	r4, #1
 8008bcc:	e7c7      	b.n	8008b5e <quorem+0x96>
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	2a00      	cmp	r2, #0
 8008bd4:	d1f0      	bne.n	8008bb8 <quorem+0xf0>
 8008bd6:	3c01      	subs	r4, #1
 8008bd8:	e7eb      	b.n	8008bb2 <quorem+0xea>
 8008bda:	2000      	movs	r0, #0
 8008bdc:	e7ee      	b.n	8008bbc <quorem+0xf4>
	...

08008be0 <_dtoa_r>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	ed2d 8b02 	vpush	{d8}
 8008be8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bea:	b091      	sub	sp, #68	; 0x44
 8008bec:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008bf0:	ec59 8b10 	vmov	r8, r9, d0
 8008bf4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008bf6:	9106      	str	r1, [sp, #24]
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	9208      	str	r2, [sp, #32]
 8008bfc:	930c      	str	r3, [sp, #48]	; 0x30
 8008bfe:	b975      	cbnz	r5, 8008c1e <_dtoa_r+0x3e>
 8008c00:	2010      	movs	r0, #16
 8008c02:	f7fe f989 	bl	8006f18 <malloc>
 8008c06:	4602      	mov	r2, r0
 8008c08:	6270      	str	r0, [r6, #36]	; 0x24
 8008c0a:	b920      	cbnz	r0, 8008c16 <_dtoa_r+0x36>
 8008c0c:	4baa      	ldr	r3, [pc, #680]	; (8008eb8 <_dtoa_r+0x2d8>)
 8008c0e:	21ea      	movs	r1, #234	; 0xea
 8008c10:	48aa      	ldr	r0, [pc, #680]	; (8008ebc <_dtoa_r+0x2dc>)
 8008c12:	f001 ff3f 	bl	800aa94 <__assert_func>
 8008c16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c1a:	6005      	str	r5, [r0, #0]
 8008c1c:	60c5      	str	r5, [r0, #12]
 8008c1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	b151      	cbz	r1, 8008c3a <_dtoa_r+0x5a>
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	604a      	str	r2, [r1, #4]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4093      	lsls	r3, r2
 8008c2c:	608b      	str	r3, [r1, #8]
 8008c2e:	4630      	mov	r0, r6
 8008c30:	f001 f916 	bl	8009e60 <_Bfree>
 8008c34:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	f1b9 0300 	subs.w	r3, r9, #0
 8008c3e:	bfbb      	ittet	lt
 8008c40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c44:	9303      	strlt	r3, [sp, #12]
 8008c46:	2300      	movge	r3, #0
 8008c48:	2201      	movlt	r2, #1
 8008c4a:	bfac      	ite	ge
 8008c4c:	6023      	strge	r3, [r4, #0]
 8008c4e:	6022      	strlt	r2, [r4, #0]
 8008c50:	4b9b      	ldr	r3, [pc, #620]	; (8008ec0 <_dtoa_r+0x2e0>)
 8008c52:	9c03      	ldr	r4, [sp, #12]
 8008c54:	43a3      	bics	r3, r4
 8008c56:	d11c      	bne.n	8008c92 <_dtoa_r+0xb2>
 8008c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008c64:	ea53 0308 	orrs.w	r3, r3, r8
 8008c68:	f000 84fd 	beq.w	8009666 <_dtoa_r+0xa86>
 8008c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c6e:	b963      	cbnz	r3, 8008c8a <_dtoa_r+0xaa>
 8008c70:	4b94      	ldr	r3, [pc, #592]	; (8008ec4 <_dtoa_r+0x2e4>)
 8008c72:	e01f      	b.n	8008cb4 <_dtoa_r+0xd4>
 8008c74:	4b94      	ldr	r3, [pc, #592]	; (8008ec8 <_dtoa_r+0x2e8>)
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	3308      	adds	r3, #8
 8008c7a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008c7c:	6013      	str	r3, [r2, #0]
 8008c7e:	9801      	ldr	r0, [sp, #4]
 8008c80:	b011      	add	sp, #68	; 0x44
 8008c82:	ecbd 8b02 	vpop	{d8}
 8008c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8a:	4b8e      	ldr	r3, [pc, #568]	; (8008ec4 <_dtoa_r+0x2e4>)
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	3303      	adds	r3, #3
 8008c90:	e7f3      	b.n	8008c7a <_dtoa_r+0x9a>
 8008c92:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008c96:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9e:	d10b      	bne.n	8008cb8 <_dtoa_r+0xd8>
 8008ca0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	6013      	str	r3, [r2, #0]
 8008ca6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f000 84d9 	beq.w	8009660 <_dtoa_r+0xa80>
 8008cae:	4887      	ldr	r0, [pc, #540]	; (8008ecc <_dtoa_r+0x2ec>)
 8008cb0:	6018      	str	r0, [r3, #0]
 8008cb2:	1e43      	subs	r3, r0, #1
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	e7e2      	b.n	8008c7e <_dtoa_r+0x9e>
 8008cb8:	a90f      	add	r1, sp, #60	; 0x3c
 8008cba:	aa0e      	add	r2, sp, #56	; 0x38
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	eeb0 0b48 	vmov.f64	d0, d8
 8008cc2:	f001 fc7b 	bl	800a5bc <__d2b>
 8008cc6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8008cca:	4605      	mov	r5, r0
 8008ccc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008cce:	2900      	cmp	r1, #0
 8008cd0:	d046      	beq.n	8008d60 <_dtoa_r+0x180>
 8008cd2:	ee18 4a90 	vmov	r4, s17
 8008cd6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008cda:	ec53 2b18 	vmov	r2, r3, d8
 8008cde:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008ce2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008ce6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008cea:	2400      	movs	r4, #0
 8008cec:	ec43 2b16 	vmov	d6, r2, r3
 8008cf0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008cf4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008ea0 <_dtoa_r+0x2c0>
 8008cf8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008cfc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008ea8 <_dtoa_r+0x2c8>
 8008d00:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008d04:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008eb0 <_dtoa_r+0x2d0>
 8008d08:	ee07 1a90 	vmov	s15, r1
 8008d0c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008d10:	eeb0 7b46 	vmov.f64	d7, d6
 8008d14:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008d18:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008d1c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d24:	ee16 ba90 	vmov	fp, s13
 8008d28:	940a      	str	r4, [sp, #40]	; 0x28
 8008d2a:	d508      	bpl.n	8008d3e <_dtoa_r+0x15e>
 8008d2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008d30:	eeb4 6b47 	vcmp.f64	d6, d7
 8008d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d38:	bf18      	it	ne
 8008d3a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008d3e:	f1bb 0f16 	cmp.w	fp, #22
 8008d42:	d82f      	bhi.n	8008da4 <_dtoa_r+0x1c4>
 8008d44:	4b62      	ldr	r3, [pc, #392]	; (8008ed0 <_dtoa_r+0x2f0>)
 8008d46:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d4a:	ed93 7b00 	vldr	d7, [r3]
 8008d4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d56:	d501      	bpl.n	8008d5c <_dtoa_r+0x17c>
 8008d58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e022      	b.n	8008da6 <_dtoa_r+0x1c6>
 8008d60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d62:	4401      	add	r1, r0
 8008d64:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8008d68:	2b20      	cmp	r3, #32
 8008d6a:	bfc1      	itttt	gt
 8008d6c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d70:	fa04 f303 	lslgt.w	r3, r4, r3
 8008d74:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8008d78:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008d7c:	bfd6      	itet	le
 8008d7e:	f1c3 0320 	rsble	r3, r3, #32
 8008d82:	ea43 0808 	orrgt.w	r8, r3, r8
 8008d86:	fa08 f803 	lslle.w	r8, r8, r3
 8008d8a:	ee07 8a90 	vmov	s15, r8
 8008d8e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008d92:	3901      	subs	r1, #1
 8008d94:	ee17 4a90 	vmov	r4, s15
 8008d98:	ec53 2b17 	vmov	r2, r3, d7
 8008d9c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008da0:	2401      	movs	r4, #1
 8008da2:	e7a3      	b.n	8008cec <_dtoa_r+0x10c>
 8008da4:	2301      	movs	r3, #1
 8008da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008da8:	1a43      	subs	r3, r0, r1
 8008daa:	1e5a      	subs	r2, r3, #1
 8008dac:	bf45      	ittet	mi
 8008dae:	f1c3 0301 	rsbmi	r3, r3, #1
 8008db2:	9304      	strmi	r3, [sp, #16]
 8008db4:	2300      	movpl	r3, #0
 8008db6:	2300      	movmi	r3, #0
 8008db8:	9205      	str	r2, [sp, #20]
 8008dba:	bf54      	ite	pl
 8008dbc:	9304      	strpl	r3, [sp, #16]
 8008dbe:	9305      	strmi	r3, [sp, #20]
 8008dc0:	f1bb 0f00 	cmp.w	fp, #0
 8008dc4:	db18      	blt.n	8008df8 <_dtoa_r+0x218>
 8008dc6:	9b05      	ldr	r3, [sp, #20]
 8008dc8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008dcc:	445b      	add	r3, fp
 8008dce:	9305      	str	r3, [sp, #20]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9a06      	ldr	r2, [sp, #24]
 8008dd4:	2a09      	cmp	r2, #9
 8008dd6:	d849      	bhi.n	8008e6c <_dtoa_r+0x28c>
 8008dd8:	2a05      	cmp	r2, #5
 8008dda:	bfc4      	itt	gt
 8008ddc:	3a04      	subgt	r2, #4
 8008dde:	9206      	strgt	r2, [sp, #24]
 8008de0:	9a06      	ldr	r2, [sp, #24]
 8008de2:	f1a2 0202 	sub.w	r2, r2, #2
 8008de6:	bfcc      	ite	gt
 8008de8:	2400      	movgt	r4, #0
 8008dea:	2401      	movle	r4, #1
 8008dec:	2a03      	cmp	r2, #3
 8008dee:	d848      	bhi.n	8008e82 <_dtoa_r+0x2a2>
 8008df0:	e8df f002 	tbb	[pc, r2]
 8008df4:	3a2c2e0b 	.word	0x3a2c2e0b
 8008df8:	9b04      	ldr	r3, [sp, #16]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	eba3 030b 	sub.w	r3, r3, fp
 8008e00:	9304      	str	r3, [sp, #16]
 8008e02:	9209      	str	r2, [sp, #36]	; 0x24
 8008e04:	f1cb 0300 	rsb	r3, fp, #0
 8008e08:	e7e3      	b.n	8008dd2 <_dtoa_r+0x1f2>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	9207      	str	r2, [sp, #28]
 8008e0e:	9a08      	ldr	r2, [sp, #32]
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	dc39      	bgt.n	8008e88 <_dtoa_r+0x2a8>
 8008e14:	f04f 0a01 	mov.w	sl, #1
 8008e18:	46d1      	mov	r9, sl
 8008e1a:	4652      	mov	r2, sl
 8008e1c:	f8cd a020 	str.w	sl, [sp, #32]
 8008e20:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008e22:	2100      	movs	r1, #0
 8008e24:	6079      	str	r1, [r7, #4]
 8008e26:	2004      	movs	r0, #4
 8008e28:	f100 0c14 	add.w	ip, r0, #20
 8008e2c:	4594      	cmp	ip, r2
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	d92f      	bls.n	8008e92 <_dtoa_r+0x2b2>
 8008e32:	4630      	mov	r0, r6
 8008e34:	930d      	str	r3, [sp, #52]	; 0x34
 8008e36:	f000 ffd3 	bl	8009de0 <_Balloc>
 8008e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e3c:	9001      	str	r0, [sp, #4]
 8008e3e:	4602      	mov	r2, r0
 8008e40:	2800      	cmp	r0, #0
 8008e42:	d149      	bne.n	8008ed8 <_dtoa_r+0x2f8>
 8008e44:	4b23      	ldr	r3, [pc, #140]	; (8008ed4 <_dtoa_r+0x2f4>)
 8008e46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e4a:	e6e1      	b.n	8008c10 <_dtoa_r+0x30>
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	e7dd      	b.n	8008e0c <_dtoa_r+0x22c>
 8008e50:	2200      	movs	r2, #0
 8008e52:	9207      	str	r2, [sp, #28]
 8008e54:	9a08      	ldr	r2, [sp, #32]
 8008e56:	eb0b 0a02 	add.w	sl, fp, r2
 8008e5a:	f10a 0901 	add.w	r9, sl, #1
 8008e5e:	464a      	mov	r2, r9
 8008e60:	2a01      	cmp	r2, #1
 8008e62:	bfb8      	it	lt
 8008e64:	2201      	movlt	r2, #1
 8008e66:	e7db      	b.n	8008e20 <_dtoa_r+0x240>
 8008e68:	2201      	movs	r2, #1
 8008e6a:	e7f2      	b.n	8008e52 <_dtoa_r+0x272>
 8008e6c:	2401      	movs	r4, #1
 8008e6e:	2200      	movs	r2, #0
 8008e70:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008e74:	f04f 3aff 	mov.w	sl, #4294967295
 8008e78:	2100      	movs	r1, #0
 8008e7a:	46d1      	mov	r9, sl
 8008e7c:	2212      	movs	r2, #18
 8008e7e:	9108      	str	r1, [sp, #32]
 8008e80:	e7ce      	b.n	8008e20 <_dtoa_r+0x240>
 8008e82:	2201      	movs	r2, #1
 8008e84:	9207      	str	r2, [sp, #28]
 8008e86:	e7f5      	b.n	8008e74 <_dtoa_r+0x294>
 8008e88:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e8c:	46d1      	mov	r9, sl
 8008e8e:	4652      	mov	r2, sl
 8008e90:	e7c6      	b.n	8008e20 <_dtoa_r+0x240>
 8008e92:	3101      	adds	r1, #1
 8008e94:	6079      	str	r1, [r7, #4]
 8008e96:	0040      	lsls	r0, r0, #1
 8008e98:	e7c6      	b.n	8008e28 <_dtoa_r+0x248>
 8008e9a:	bf00      	nop
 8008e9c:	f3af 8000 	nop.w
 8008ea0:	636f4361 	.word	0x636f4361
 8008ea4:	3fd287a7 	.word	0x3fd287a7
 8008ea8:	8b60c8b3 	.word	0x8b60c8b3
 8008eac:	3fc68a28 	.word	0x3fc68a28
 8008eb0:	509f79fb 	.word	0x509f79fb
 8008eb4:	3fd34413 	.word	0x3fd34413
 8008eb8:	0800b9f6 	.word	0x0800b9f6
 8008ebc:	0800ba0d 	.word	0x0800ba0d
 8008ec0:	7ff00000 	.word	0x7ff00000
 8008ec4:	0800b9f2 	.word	0x0800b9f2
 8008ec8:	0800b9e9 	.word	0x0800b9e9
 8008ecc:	0800b86d 	.word	0x0800b86d
 8008ed0:	0800bbe0 	.word	0x0800bbe0
 8008ed4:	0800ba8b 	.word	0x0800ba8b
 8008ed8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008eda:	9901      	ldr	r1, [sp, #4]
 8008edc:	6011      	str	r1, [r2, #0]
 8008ede:	f1b9 0f0e 	cmp.w	r9, #14
 8008ee2:	d86c      	bhi.n	8008fbe <_dtoa_r+0x3de>
 8008ee4:	2c00      	cmp	r4, #0
 8008ee6:	d06a      	beq.n	8008fbe <_dtoa_r+0x3de>
 8008ee8:	f1bb 0f00 	cmp.w	fp, #0
 8008eec:	f340 80a0 	ble.w	8009030 <_dtoa_r+0x450>
 8008ef0:	49c1      	ldr	r1, [pc, #772]	; (80091f8 <_dtoa_r+0x618>)
 8008ef2:	f00b 020f 	and.w	r2, fp, #15
 8008ef6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008efa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008efe:	ed92 7b00 	vldr	d7, [r2]
 8008f02:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008f06:	f000 8087 	beq.w	8009018 <_dtoa_r+0x438>
 8008f0a:	4abc      	ldr	r2, [pc, #752]	; (80091fc <_dtoa_r+0x61c>)
 8008f0c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008f10:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008f14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008f18:	f001 010f 	and.w	r1, r1, #15
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	48b7      	ldr	r0, [pc, #732]	; (80091fc <_dtoa_r+0x61c>)
 8008f20:	2900      	cmp	r1, #0
 8008f22:	d17b      	bne.n	800901c <_dtoa_r+0x43c>
 8008f24:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008f28:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008f2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008f32:	2900      	cmp	r1, #0
 8008f34:	f000 80a2 	beq.w	800907c <_dtoa_r+0x49c>
 8008f38:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008f3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008f40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f48:	f140 8098 	bpl.w	800907c <_dtoa_r+0x49c>
 8008f4c:	f1b9 0f00 	cmp.w	r9, #0
 8008f50:	f000 8094 	beq.w	800907c <_dtoa_r+0x49c>
 8008f54:	f1ba 0f00 	cmp.w	sl, #0
 8008f58:	dd2f      	ble.n	8008fba <_dtoa_r+0x3da>
 8008f5a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008f5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f66:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f6a:	3201      	adds	r2, #1
 8008f6c:	4650      	mov	r0, sl
 8008f6e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008f72:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008f76:	ee07 2a90 	vmov	s15, r2
 8008f7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f7e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008f82:	ee15 4a90 	vmov	r4, s11
 8008f86:	ec52 1b15 	vmov	r1, r2, d5
 8008f8a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d177      	bne.n	8009082 <_dtoa_r+0x4a2>
 8008f92:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008f96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008f9a:	ec42 1b17 	vmov	d7, r1, r2
 8008f9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa6:	f300 8263 	bgt.w	8009470 <_dtoa_r+0x890>
 8008faa:	eeb1 7b47 	vneg.f64	d7, d7
 8008fae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb6:	f100 8258 	bmi.w	800946a <_dtoa_r+0x88a>
 8008fba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	f2c0 811d 	blt.w	8009200 <_dtoa_r+0x620>
 8008fc6:	f1bb 0f0e 	cmp.w	fp, #14
 8008fca:	f300 8119 	bgt.w	8009200 <_dtoa_r+0x620>
 8008fce:	4b8a      	ldr	r3, [pc, #552]	; (80091f8 <_dtoa_r+0x618>)
 8008fd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fd4:	ed93 6b00 	vldr	d6, [r3]
 8008fd8:	9b08      	ldr	r3, [sp, #32]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f280 80b7 	bge.w	800914e <_dtoa_r+0x56e>
 8008fe0:	f1b9 0f00 	cmp.w	r9, #0
 8008fe4:	f300 80b3 	bgt.w	800914e <_dtoa_r+0x56e>
 8008fe8:	f040 823f 	bne.w	800946a <_dtoa_r+0x88a>
 8008fec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008ff0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008ff4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ff8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009000:	464c      	mov	r4, r9
 8009002:	464f      	mov	r7, r9
 8009004:	f280 8215 	bge.w	8009432 <_dtoa_r+0x852>
 8009008:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800900c:	2331      	movs	r3, #49	; 0x31
 800900e:	f808 3b01 	strb.w	r3, [r8], #1
 8009012:	f10b 0b01 	add.w	fp, fp, #1
 8009016:	e211      	b.n	800943c <_dtoa_r+0x85c>
 8009018:	2202      	movs	r2, #2
 800901a:	e780      	b.n	8008f1e <_dtoa_r+0x33e>
 800901c:	07cc      	lsls	r4, r1, #31
 800901e:	d504      	bpl.n	800902a <_dtoa_r+0x44a>
 8009020:	ed90 6b00 	vldr	d6, [r0]
 8009024:	3201      	adds	r2, #1
 8009026:	ee27 7b06 	vmul.f64	d7, d7, d6
 800902a:	1049      	asrs	r1, r1, #1
 800902c:	3008      	adds	r0, #8
 800902e:	e777      	b.n	8008f20 <_dtoa_r+0x340>
 8009030:	d022      	beq.n	8009078 <_dtoa_r+0x498>
 8009032:	f1cb 0100 	rsb	r1, fp, #0
 8009036:	4a70      	ldr	r2, [pc, #448]	; (80091f8 <_dtoa_r+0x618>)
 8009038:	f001 000f 	and.w	r0, r1, #15
 800903c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009040:	ed92 7b00 	vldr	d7, [r2]
 8009044:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009048:	ed8d 7b02 	vstr	d7, [sp, #8]
 800904c:	486b      	ldr	r0, [pc, #428]	; (80091fc <_dtoa_r+0x61c>)
 800904e:	1109      	asrs	r1, r1, #4
 8009050:	2400      	movs	r4, #0
 8009052:	2202      	movs	r2, #2
 8009054:	b929      	cbnz	r1, 8009062 <_dtoa_r+0x482>
 8009056:	2c00      	cmp	r4, #0
 8009058:	f43f af6a 	beq.w	8008f30 <_dtoa_r+0x350>
 800905c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009060:	e766      	b.n	8008f30 <_dtoa_r+0x350>
 8009062:	07cf      	lsls	r7, r1, #31
 8009064:	d505      	bpl.n	8009072 <_dtoa_r+0x492>
 8009066:	ed90 6b00 	vldr	d6, [r0]
 800906a:	3201      	adds	r2, #1
 800906c:	2401      	movs	r4, #1
 800906e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009072:	1049      	asrs	r1, r1, #1
 8009074:	3008      	adds	r0, #8
 8009076:	e7ed      	b.n	8009054 <_dtoa_r+0x474>
 8009078:	2202      	movs	r2, #2
 800907a:	e759      	b.n	8008f30 <_dtoa_r+0x350>
 800907c:	465f      	mov	r7, fp
 800907e:	4648      	mov	r0, r9
 8009080:	e775      	b.n	8008f6e <_dtoa_r+0x38e>
 8009082:	ec42 1b17 	vmov	d7, r1, r2
 8009086:	4a5c      	ldr	r2, [pc, #368]	; (80091f8 <_dtoa_r+0x618>)
 8009088:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800908c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009090:	9a01      	ldr	r2, [sp, #4]
 8009092:	1814      	adds	r4, r2, r0
 8009094:	9a07      	ldr	r2, [sp, #28]
 8009096:	b352      	cbz	r2, 80090ee <_dtoa_r+0x50e>
 8009098:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800909c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80090a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80090a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80090ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80090b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80090b4:	ee14 2a90 	vmov	r2, s9
 80090b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80090bc:	3230      	adds	r2, #48	; 0x30
 80090be:	ee36 6b45 	vsub.f64	d6, d6, d5
 80090c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ca:	f808 2b01 	strb.w	r2, [r8], #1
 80090ce:	d439      	bmi.n	8009144 <_dtoa_r+0x564>
 80090d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80090d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80090d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090dc:	d472      	bmi.n	80091c4 <_dtoa_r+0x5e4>
 80090de:	45a0      	cmp	r8, r4
 80090e0:	f43f af6b 	beq.w	8008fba <_dtoa_r+0x3da>
 80090e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80090e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80090ec:	e7e0      	b.n	80090b0 <_dtoa_r+0x4d0>
 80090ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80090f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80090f6:	4621      	mov	r1, r4
 80090f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80090fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009100:	ee14 2a90 	vmov	r2, s9
 8009104:	3230      	adds	r2, #48	; 0x30
 8009106:	f808 2b01 	strb.w	r2, [r8], #1
 800910a:	45a0      	cmp	r8, r4
 800910c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009110:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009114:	d118      	bne.n	8009148 <_dtoa_r+0x568>
 8009116:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800911a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800911e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009126:	dc4d      	bgt.n	80091c4 <_dtoa_r+0x5e4>
 8009128:	ee35 7b47 	vsub.f64	d7, d5, d7
 800912c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009134:	f57f af41 	bpl.w	8008fba <_dtoa_r+0x3da>
 8009138:	4688      	mov	r8, r1
 800913a:	3901      	subs	r1, #1
 800913c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009140:	2b30      	cmp	r3, #48	; 0x30
 8009142:	d0f9      	beq.n	8009138 <_dtoa_r+0x558>
 8009144:	46bb      	mov	fp, r7
 8009146:	e02a      	b.n	800919e <_dtoa_r+0x5be>
 8009148:	ee26 6b03 	vmul.f64	d6, d6, d3
 800914c:	e7d6      	b.n	80090fc <_dtoa_r+0x51c>
 800914e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009152:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009156:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800915a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800915e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009162:	ee15 3a10 	vmov	r3, s10
 8009166:	3330      	adds	r3, #48	; 0x30
 8009168:	f808 3b01 	strb.w	r3, [r8], #1
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	eba8 0303 	sub.w	r3, r8, r3
 8009172:	4599      	cmp	r9, r3
 8009174:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009178:	eea3 7b46 	vfms.f64	d7, d3, d6
 800917c:	d133      	bne.n	80091e6 <_dtoa_r+0x606>
 800917e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009182:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918a:	dc1a      	bgt.n	80091c2 <_dtoa_r+0x5e2>
 800918c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009194:	d103      	bne.n	800919e <_dtoa_r+0x5be>
 8009196:	ee15 3a10 	vmov	r3, s10
 800919a:	07d9      	lsls	r1, r3, #31
 800919c:	d411      	bmi.n	80091c2 <_dtoa_r+0x5e2>
 800919e:	4629      	mov	r1, r5
 80091a0:	4630      	mov	r0, r6
 80091a2:	f000 fe5d 	bl	8009e60 <_Bfree>
 80091a6:	2300      	movs	r3, #0
 80091a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091aa:	f888 3000 	strb.w	r3, [r8]
 80091ae:	f10b 0301 	add.w	r3, fp, #1
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f43f ad61 	beq.w	8008c7e <_dtoa_r+0x9e>
 80091bc:	f8c3 8000 	str.w	r8, [r3]
 80091c0:	e55d      	b.n	8008c7e <_dtoa_r+0x9e>
 80091c2:	465f      	mov	r7, fp
 80091c4:	4643      	mov	r3, r8
 80091c6:	4698      	mov	r8, r3
 80091c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091cc:	2a39      	cmp	r2, #57	; 0x39
 80091ce:	d106      	bne.n	80091de <_dtoa_r+0x5fe>
 80091d0:	9a01      	ldr	r2, [sp, #4]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d1f7      	bne.n	80091c6 <_dtoa_r+0x5e6>
 80091d6:	9901      	ldr	r1, [sp, #4]
 80091d8:	2230      	movs	r2, #48	; 0x30
 80091da:	3701      	adds	r7, #1
 80091dc:	700a      	strb	r2, [r1, #0]
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	3201      	adds	r2, #1
 80091e2:	701a      	strb	r2, [r3, #0]
 80091e4:	e7ae      	b.n	8009144 <_dtoa_r+0x564>
 80091e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80091ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f2:	d1b2      	bne.n	800915a <_dtoa_r+0x57a>
 80091f4:	e7d3      	b.n	800919e <_dtoa_r+0x5be>
 80091f6:	bf00      	nop
 80091f8:	0800bbe0 	.word	0x0800bbe0
 80091fc:	0800bbb8 	.word	0x0800bbb8
 8009200:	9907      	ldr	r1, [sp, #28]
 8009202:	2900      	cmp	r1, #0
 8009204:	f000 80d0 	beq.w	80093a8 <_dtoa_r+0x7c8>
 8009208:	9906      	ldr	r1, [sp, #24]
 800920a:	2901      	cmp	r1, #1
 800920c:	f300 80b4 	bgt.w	8009378 <_dtoa_r+0x798>
 8009210:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009212:	2900      	cmp	r1, #0
 8009214:	f000 80ac 	beq.w	8009370 <_dtoa_r+0x790>
 8009218:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800921c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009220:	461c      	mov	r4, r3
 8009222:	930a      	str	r3, [sp, #40]	; 0x28
 8009224:	9b04      	ldr	r3, [sp, #16]
 8009226:	4413      	add	r3, r2
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	9b05      	ldr	r3, [sp, #20]
 800922c:	2101      	movs	r1, #1
 800922e:	4413      	add	r3, r2
 8009230:	4630      	mov	r0, r6
 8009232:	9305      	str	r3, [sp, #20]
 8009234:	f000 ff16 	bl	800a064 <__i2b>
 8009238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923a:	4607      	mov	r7, r0
 800923c:	f1b8 0f00 	cmp.w	r8, #0
 8009240:	dd0d      	ble.n	800925e <_dtoa_r+0x67e>
 8009242:	9a05      	ldr	r2, [sp, #20]
 8009244:	2a00      	cmp	r2, #0
 8009246:	dd0a      	ble.n	800925e <_dtoa_r+0x67e>
 8009248:	4542      	cmp	r2, r8
 800924a:	9904      	ldr	r1, [sp, #16]
 800924c:	bfa8      	it	ge
 800924e:	4642      	movge	r2, r8
 8009250:	1a89      	subs	r1, r1, r2
 8009252:	9104      	str	r1, [sp, #16]
 8009254:	9905      	ldr	r1, [sp, #20]
 8009256:	eba8 0802 	sub.w	r8, r8, r2
 800925a:	1a8a      	subs	r2, r1, r2
 800925c:	9205      	str	r2, [sp, #20]
 800925e:	b303      	cbz	r3, 80092a2 <_dtoa_r+0x6c2>
 8009260:	9a07      	ldr	r2, [sp, #28]
 8009262:	2a00      	cmp	r2, #0
 8009264:	f000 80a5 	beq.w	80093b2 <_dtoa_r+0x7d2>
 8009268:	2c00      	cmp	r4, #0
 800926a:	dd13      	ble.n	8009294 <_dtoa_r+0x6b4>
 800926c:	4639      	mov	r1, r7
 800926e:	4622      	mov	r2, r4
 8009270:	4630      	mov	r0, r6
 8009272:	930d      	str	r3, [sp, #52]	; 0x34
 8009274:	f000 ffb6 	bl	800a1e4 <__pow5mult>
 8009278:	462a      	mov	r2, r5
 800927a:	4601      	mov	r1, r0
 800927c:	4607      	mov	r7, r0
 800927e:	4630      	mov	r0, r6
 8009280:	f000 ff06 	bl	800a090 <__multiply>
 8009284:	4629      	mov	r1, r5
 8009286:	900a      	str	r0, [sp, #40]	; 0x28
 8009288:	4630      	mov	r0, r6
 800928a:	f000 fde9 	bl	8009e60 <_Bfree>
 800928e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009292:	4615      	mov	r5, r2
 8009294:	1b1a      	subs	r2, r3, r4
 8009296:	d004      	beq.n	80092a2 <_dtoa_r+0x6c2>
 8009298:	4629      	mov	r1, r5
 800929a:	4630      	mov	r0, r6
 800929c:	f000 ffa2 	bl	800a1e4 <__pow5mult>
 80092a0:	4605      	mov	r5, r0
 80092a2:	2101      	movs	r1, #1
 80092a4:	4630      	mov	r0, r6
 80092a6:	f000 fedd 	bl	800a064 <__i2b>
 80092aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	4604      	mov	r4, r0
 80092b0:	f340 8081 	ble.w	80093b6 <_dtoa_r+0x7d6>
 80092b4:	461a      	mov	r2, r3
 80092b6:	4601      	mov	r1, r0
 80092b8:	4630      	mov	r0, r6
 80092ba:	f000 ff93 	bl	800a1e4 <__pow5mult>
 80092be:	9b06      	ldr	r3, [sp, #24]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	4604      	mov	r4, r0
 80092c4:	dd7a      	ble.n	80093bc <_dtoa_r+0x7dc>
 80092c6:	2300      	movs	r3, #0
 80092c8:	930a      	str	r3, [sp, #40]	; 0x28
 80092ca:	6922      	ldr	r2, [r4, #16]
 80092cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80092d0:	6910      	ldr	r0, [r2, #16]
 80092d2:	f000 fe77 	bl	8009fc4 <__hi0bits>
 80092d6:	f1c0 0020 	rsb	r0, r0, #32
 80092da:	9b05      	ldr	r3, [sp, #20]
 80092dc:	4418      	add	r0, r3
 80092de:	f010 001f 	ands.w	r0, r0, #31
 80092e2:	f000 808c 	beq.w	80093fe <_dtoa_r+0x81e>
 80092e6:	f1c0 0220 	rsb	r2, r0, #32
 80092ea:	2a04      	cmp	r2, #4
 80092ec:	f340 8085 	ble.w	80093fa <_dtoa_r+0x81a>
 80092f0:	f1c0 001c 	rsb	r0, r0, #28
 80092f4:	9b04      	ldr	r3, [sp, #16]
 80092f6:	4403      	add	r3, r0
 80092f8:	9304      	str	r3, [sp, #16]
 80092fa:	9b05      	ldr	r3, [sp, #20]
 80092fc:	4403      	add	r3, r0
 80092fe:	4480      	add	r8, r0
 8009300:	9305      	str	r3, [sp, #20]
 8009302:	9b04      	ldr	r3, [sp, #16]
 8009304:	2b00      	cmp	r3, #0
 8009306:	dd05      	ble.n	8009314 <_dtoa_r+0x734>
 8009308:	4629      	mov	r1, r5
 800930a:	461a      	mov	r2, r3
 800930c:	4630      	mov	r0, r6
 800930e:	f000 ffc3 	bl	800a298 <__lshift>
 8009312:	4605      	mov	r5, r0
 8009314:	9b05      	ldr	r3, [sp, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	dd05      	ble.n	8009326 <_dtoa_r+0x746>
 800931a:	4621      	mov	r1, r4
 800931c:	461a      	mov	r2, r3
 800931e:	4630      	mov	r0, r6
 8009320:	f000 ffba 	bl	800a298 <__lshift>
 8009324:	4604      	mov	r4, r0
 8009326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009328:	2b00      	cmp	r3, #0
 800932a:	d06a      	beq.n	8009402 <_dtoa_r+0x822>
 800932c:	4621      	mov	r1, r4
 800932e:	4628      	mov	r0, r5
 8009330:	f001 f822 	bl	800a378 <__mcmp>
 8009334:	2800      	cmp	r0, #0
 8009336:	da64      	bge.n	8009402 <_dtoa_r+0x822>
 8009338:	2300      	movs	r3, #0
 800933a:	4629      	mov	r1, r5
 800933c:	220a      	movs	r2, #10
 800933e:	4630      	mov	r0, r6
 8009340:	f000 fdb0 	bl	8009ea4 <__multadd>
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	f10b 3bff 	add.w	fp, fp, #4294967295
 800934a:	4605      	mov	r5, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	f000 8191 	beq.w	8009674 <_dtoa_r+0xa94>
 8009352:	4639      	mov	r1, r7
 8009354:	2300      	movs	r3, #0
 8009356:	220a      	movs	r2, #10
 8009358:	4630      	mov	r0, r6
 800935a:	f000 fda3 	bl	8009ea4 <__multadd>
 800935e:	f1ba 0f00 	cmp.w	sl, #0
 8009362:	4607      	mov	r7, r0
 8009364:	f300 808d 	bgt.w	8009482 <_dtoa_r+0x8a2>
 8009368:	9b06      	ldr	r3, [sp, #24]
 800936a:	2b02      	cmp	r3, #2
 800936c:	dc50      	bgt.n	8009410 <_dtoa_r+0x830>
 800936e:	e088      	b.n	8009482 <_dtoa_r+0x8a2>
 8009370:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009372:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009376:	e751      	b.n	800921c <_dtoa_r+0x63c>
 8009378:	f109 34ff 	add.w	r4, r9, #4294967295
 800937c:	42a3      	cmp	r3, r4
 800937e:	bfbf      	itttt	lt
 8009380:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009382:	1ae3      	sublt	r3, r4, r3
 8009384:	18d2      	addlt	r2, r2, r3
 8009386:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009388:	bfb6      	itet	lt
 800938a:	4623      	movlt	r3, r4
 800938c:	1b1c      	subge	r4, r3, r4
 800938e:	2400      	movlt	r4, #0
 8009390:	f1b9 0f00 	cmp.w	r9, #0
 8009394:	bfb5      	itete	lt
 8009396:	9a04      	ldrlt	r2, [sp, #16]
 8009398:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800939c:	eba2 0809 	sublt.w	r8, r2, r9
 80093a0:	464a      	movge	r2, r9
 80093a2:	bfb8      	it	lt
 80093a4:	2200      	movlt	r2, #0
 80093a6:	e73c      	b.n	8009222 <_dtoa_r+0x642>
 80093a8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80093ac:	9f07      	ldr	r7, [sp, #28]
 80093ae:	461c      	mov	r4, r3
 80093b0:	e744      	b.n	800923c <_dtoa_r+0x65c>
 80093b2:	461a      	mov	r2, r3
 80093b4:	e770      	b.n	8009298 <_dtoa_r+0x6b8>
 80093b6:	9b06      	ldr	r3, [sp, #24]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	dc18      	bgt.n	80093ee <_dtoa_r+0x80e>
 80093bc:	9b02      	ldr	r3, [sp, #8]
 80093be:	b9b3      	cbnz	r3, 80093ee <_dtoa_r+0x80e>
 80093c0:	9b03      	ldr	r3, [sp, #12]
 80093c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80093c6:	b9a2      	cbnz	r2, 80093f2 <_dtoa_r+0x812>
 80093c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093cc:	0d12      	lsrs	r2, r2, #20
 80093ce:	0512      	lsls	r2, r2, #20
 80093d0:	b18a      	cbz	r2, 80093f6 <_dtoa_r+0x816>
 80093d2:	9b04      	ldr	r3, [sp, #16]
 80093d4:	3301      	adds	r3, #1
 80093d6:	9304      	str	r3, [sp, #16]
 80093d8:	9b05      	ldr	r3, [sp, #20]
 80093da:	3301      	adds	r3, #1
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	2301      	movs	r3, #1
 80093e0:	930a      	str	r3, [sp, #40]	; 0x28
 80093e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f47f af70 	bne.w	80092ca <_dtoa_r+0x6ea>
 80093ea:	2001      	movs	r0, #1
 80093ec:	e775      	b.n	80092da <_dtoa_r+0x6fa>
 80093ee:	2300      	movs	r3, #0
 80093f0:	e7f6      	b.n	80093e0 <_dtoa_r+0x800>
 80093f2:	9b02      	ldr	r3, [sp, #8]
 80093f4:	e7f4      	b.n	80093e0 <_dtoa_r+0x800>
 80093f6:	920a      	str	r2, [sp, #40]	; 0x28
 80093f8:	e7f3      	b.n	80093e2 <_dtoa_r+0x802>
 80093fa:	d082      	beq.n	8009302 <_dtoa_r+0x722>
 80093fc:	4610      	mov	r0, r2
 80093fe:	301c      	adds	r0, #28
 8009400:	e778      	b.n	80092f4 <_dtoa_r+0x714>
 8009402:	f1b9 0f00 	cmp.w	r9, #0
 8009406:	dc37      	bgt.n	8009478 <_dtoa_r+0x898>
 8009408:	9b06      	ldr	r3, [sp, #24]
 800940a:	2b02      	cmp	r3, #2
 800940c:	dd34      	ble.n	8009478 <_dtoa_r+0x898>
 800940e:	46ca      	mov	sl, r9
 8009410:	f1ba 0f00 	cmp.w	sl, #0
 8009414:	d10d      	bne.n	8009432 <_dtoa_r+0x852>
 8009416:	4621      	mov	r1, r4
 8009418:	4653      	mov	r3, sl
 800941a:	2205      	movs	r2, #5
 800941c:	4630      	mov	r0, r6
 800941e:	f000 fd41 	bl	8009ea4 <__multadd>
 8009422:	4601      	mov	r1, r0
 8009424:	4604      	mov	r4, r0
 8009426:	4628      	mov	r0, r5
 8009428:	f000 ffa6 	bl	800a378 <__mcmp>
 800942c:	2800      	cmp	r0, #0
 800942e:	f73f adeb 	bgt.w	8009008 <_dtoa_r+0x428>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009438:	ea6f 0b03 	mvn.w	fp, r3
 800943c:	f04f 0900 	mov.w	r9, #0
 8009440:	4621      	mov	r1, r4
 8009442:	4630      	mov	r0, r6
 8009444:	f000 fd0c 	bl	8009e60 <_Bfree>
 8009448:	2f00      	cmp	r7, #0
 800944a:	f43f aea8 	beq.w	800919e <_dtoa_r+0x5be>
 800944e:	f1b9 0f00 	cmp.w	r9, #0
 8009452:	d005      	beq.n	8009460 <_dtoa_r+0x880>
 8009454:	45b9      	cmp	r9, r7
 8009456:	d003      	beq.n	8009460 <_dtoa_r+0x880>
 8009458:	4649      	mov	r1, r9
 800945a:	4630      	mov	r0, r6
 800945c:	f000 fd00 	bl	8009e60 <_Bfree>
 8009460:	4639      	mov	r1, r7
 8009462:	4630      	mov	r0, r6
 8009464:	f000 fcfc 	bl	8009e60 <_Bfree>
 8009468:	e699      	b.n	800919e <_dtoa_r+0x5be>
 800946a:	2400      	movs	r4, #0
 800946c:	4627      	mov	r7, r4
 800946e:	e7e0      	b.n	8009432 <_dtoa_r+0x852>
 8009470:	46bb      	mov	fp, r7
 8009472:	4604      	mov	r4, r0
 8009474:	4607      	mov	r7, r0
 8009476:	e5c7      	b.n	8009008 <_dtoa_r+0x428>
 8009478:	9b07      	ldr	r3, [sp, #28]
 800947a:	46ca      	mov	sl, r9
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 8100 	beq.w	8009682 <_dtoa_r+0xaa2>
 8009482:	f1b8 0f00 	cmp.w	r8, #0
 8009486:	dd05      	ble.n	8009494 <_dtoa_r+0x8b4>
 8009488:	4639      	mov	r1, r7
 800948a:	4642      	mov	r2, r8
 800948c:	4630      	mov	r0, r6
 800948e:	f000 ff03 	bl	800a298 <__lshift>
 8009492:	4607      	mov	r7, r0
 8009494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d05d      	beq.n	8009556 <_dtoa_r+0x976>
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	4630      	mov	r0, r6
 800949e:	f000 fc9f 	bl	8009de0 <_Balloc>
 80094a2:	4680      	mov	r8, r0
 80094a4:	b928      	cbnz	r0, 80094b2 <_dtoa_r+0x8d2>
 80094a6:	4b82      	ldr	r3, [pc, #520]	; (80096b0 <_dtoa_r+0xad0>)
 80094a8:	4602      	mov	r2, r0
 80094aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094ae:	f7ff bbaf 	b.w	8008c10 <_dtoa_r+0x30>
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	3202      	adds	r2, #2
 80094b6:	0092      	lsls	r2, r2, #2
 80094b8:	f107 010c 	add.w	r1, r7, #12
 80094bc:	300c      	adds	r0, #12
 80094be:	f7fd fd33 	bl	8006f28 <memcpy>
 80094c2:	2201      	movs	r2, #1
 80094c4:	4641      	mov	r1, r8
 80094c6:	4630      	mov	r0, r6
 80094c8:	f000 fee6 	bl	800a298 <__lshift>
 80094cc:	9b01      	ldr	r3, [sp, #4]
 80094ce:	3301      	adds	r3, #1
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	4453      	add	r3, sl
 80094d6:	9308      	str	r3, [sp, #32]
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	46b9      	mov	r9, r7
 80094e0:	9307      	str	r3, [sp, #28]
 80094e2:	4607      	mov	r7, r0
 80094e4:	9b04      	ldr	r3, [sp, #16]
 80094e6:	4621      	mov	r1, r4
 80094e8:	3b01      	subs	r3, #1
 80094ea:	4628      	mov	r0, r5
 80094ec:	9302      	str	r3, [sp, #8]
 80094ee:	f7ff faeb 	bl	8008ac8 <quorem>
 80094f2:	4603      	mov	r3, r0
 80094f4:	3330      	adds	r3, #48	; 0x30
 80094f6:	9005      	str	r0, [sp, #20]
 80094f8:	4649      	mov	r1, r9
 80094fa:	4628      	mov	r0, r5
 80094fc:	9309      	str	r3, [sp, #36]	; 0x24
 80094fe:	f000 ff3b 	bl	800a378 <__mcmp>
 8009502:	463a      	mov	r2, r7
 8009504:	4682      	mov	sl, r0
 8009506:	4621      	mov	r1, r4
 8009508:	4630      	mov	r0, r6
 800950a:	f000 ff51 	bl	800a3b0 <__mdiff>
 800950e:	68c2      	ldr	r2, [r0, #12]
 8009510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009512:	4680      	mov	r8, r0
 8009514:	bb0a      	cbnz	r2, 800955a <_dtoa_r+0x97a>
 8009516:	4601      	mov	r1, r0
 8009518:	4628      	mov	r0, r5
 800951a:	f000 ff2d 	bl	800a378 <__mcmp>
 800951e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009520:	4602      	mov	r2, r0
 8009522:	4641      	mov	r1, r8
 8009524:	4630      	mov	r0, r6
 8009526:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800952a:	f000 fc99 	bl	8009e60 <_Bfree>
 800952e:	9b06      	ldr	r3, [sp, #24]
 8009530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009532:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009536:	ea43 0102 	orr.w	r1, r3, r2
 800953a:	9b07      	ldr	r3, [sp, #28]
 800953c:	430b      	orrs	r3, r1
 800953e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009540:	d10d      	bne.n	800955e <_dtoa_r+0x97e>
 8009542:	2b39      	cmp	r3, #57	; 0x39
 8009544:	d029      	beq.n	800959a <_dtoa_r+0x9ba>
 8009546:	f1ba 0f00 	cmp.w	sl, #0
 800954a:	dd01      	ble.n	8009550 <_dtoa_r+0x970>
 800954c:	9b05      	ldr	r3, [sp, #20]
 800954e:	3331      	adds	r3, #49	; 0x31
 8009550:	9a02      	ldr	r2, [sp, #8]
 8009552:	7013      	strb	r3, [r2, #0]
 8009554:	e774      	b.n	8009440 <_dtoa_r+0x860>
 8009556:	4638      	mov	r0, r7
 8009558:	e7b8      	b.n	80094cc <_dtoa_r+0x8ec>
 800955a:	2201      	movs	r2, #1
 800955c:	e7e1      	b.n	8009522 <_dtoa_r+0x942>
 800955e:	f1ba 0f00 	cmp.w	sl, #0
 8009562:	db06      	blt.n	8009572 <_dtoa_r+0x992>
 8009564:	9906      	ldr	r1, [sp, #24]
 8009566:	ea41 0a0a 	orr.w	sl, r1, sl
 800956a:	9907      	ldr	r1, [sp, #28]
 800956c:	ea5a 0101 	orrs.w	r1, sl, r1
 8009570:	d120      	bne.n	80095b4 <_dtoa_r+0x9d4>
 8009572:	2a00      	cmp	r2, #0
 8009574:	ddec      	ble.n	8009550 <_dtoa_r+0x970>
 8009576:	4629      	mov	r1, r5
 8009578:	2201      	movs	r2, #1
 800957a:	4630      	mov	r0, r6
 800957c:	9304      	str	r3, [sp, #16]
 800957e:	f000 fe8b 	bl	800a298 <__lshift>
 8009582:	4621      	mov	r1, r4
 8009584:	4605      	mov	r5, r0
 8009586:	f000 fef7 	bl	800a378 <__mcmp>
 800958a:	2800      	cmp	r0, #0
 800958c:	9b04      	ldr	r3, [sp, #16]
 800958e:	dc02      	bgt.n	8009596 <_dtoa_r+0x9b6>
 8009590:	d1de      	bne.n	8009550 <_dtoa_r+0x970>
 8009592:	07da      	lsls	r2, r3, #31
 8009594:	d5dc      	bpl.n	8009550 <_dtoa_r+0x970>
 8009596:	2b39      	cmp	r3, #57	; 0x39
 8009598:	d1d8      	bne.n	800954c <_dtoa_r+0x96c>
 800959a:	9a02      	ldr	r2, [sp, #8]
 800959c:	2339      	movs	r3, #57	; 0x39
 800959e:	7013      	strb	r3, [r2, #0]
 80095a0:	4643      	mov	r3, r8
 80095a2:	4698      	mov	r8, r3
 80095a4:	3b01      	subs	r3, #1
 80095a6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80095aa:	2a39      	cmp	r2, #57	; 0x39
 80095ac:	d051      	beq.n	8009652 <_dtoa_r+0xa72>
 80095ae:	3201      	adds	r2, #1
 80095b0:	701a      	strb	r2, [r3, #0]
 80095b2:	e745      	b.n	8009440 <_dtoa_r+0x860>
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	dd03      	ble.n	80095c0 <_dtoa_r+0x9e0>
 80095b8:	2b39      	cmp	r3, #57	; 0x39
 80095ba:	d0ee      	beq.n	800959a <_dtoa_r+0x9ba>
 80095bc:	3301      	adds	r3, #1
 80095be:	e7c7      	b.n	8009550 <_dtoa_r+0x970>
 80095c0:	9a04      	ldr	r2, [sp, #16]
 80095c2:	9908      	ldr	r1, [sp, #32]
 80095c4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095c8:	428a      	cmp	r2, r1
 80095ca:	d02b      	beq.n	8009624 <_dtoa_r+0xa44>
 80095cc:	4629      	mov	r1, r5
 80095ce:	2300      	movs	r3, #0
 80095d0:	220a      	movs	r2, #10
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 fc66 	bl	8009ea4 <__multadd>
 80095d8:	45b9      	cmp	r9, r7
 80095da:	4605      	mov	r5, r0
 80095dc:	f04f 0300 	mov.w	r3, #0
 80095e0:	f04f 020a 	mov.w	r2, #10
 80095e4:	4649      	mov	r1, r9
 80095e6:	4630      	mov	r0, r6
 80095e8:	d107      	bne.n	80095fa <_dtoa_r+0xa1a>
 80095ea:	f000 fc5b 	bl	8009ea4 <__multadd>
 80095ee:	4681      	mov	r9, r0
 80095f0:	4607      	mov	r7, r0
 80095f2:	9b04      	ldr	r3, [sp, #16]
 80095f4:	3301      	adds	r3, #1
 80095f6:	9304      	str	r3, [sp, #16]
 80095f8:	e774      	b.n	80094e4 <_dtoa_r+0x904>
 80095fa:	f000 fc53 	bl	8009ea4 <__multadd>
 80095fe:	4639      	mov	r1, r7
 8009600:	4681      	mov	r9, r0
 8009602:	2300      	movs	r3, #0
 8009604:	220a      	movs	r2, #10
 8009606:	4630      	mov	r0, r6
 8009608:	f000 fc4c 	bl	8009ea4 <__multadd>
 800960c:	4607      	mov	r7, r0
 800960e:	e7f0      	b.n	80095f2 <_dtoa_r+0xa12>
 8009610:	f1ba 0f00 	cmp.w	sl, #0
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	bfcc      	ite	gt
 8009618:	46d0      	movgt	r8, sl
 800961a:	f04f 0801 	movle.w	r8, #1
 800961e:	4490      	add	r8, r2
 8009620:	f04f 0900 	mov.w	r9, #0
 8009624:	4629      	mov	r1, r5
 8009626:	2201      	movs	r2, #1
 8009628:	4630      	mov	r0, r6
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	f000 fe34 	bl	800a298 <__lshift>
 8009630:	4621      	mov	r1, r4
 8009632:	4605      	mov	r5, r0
 8009634:	f000 fea0 	bl	800a378 <__mcmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	dcb1      	bgt.n	80095a0 <_dtoa_r+0x9c0>
 800963c:	d102      	bne.n	8009644 <_dtoa_r+0xa64>
 800963e:	9b02      	ldr	r3, [sp, #8]
 8009640:	07db      	lsls	r3, r3, #31
 8009642:	d4ad      	bmi.n	80095a0 <_dtoa_r+0x9c0>
 8009644:	4643      	mov	r3, r8
 8009646:	4698      	mov	r8, r3
 8009648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800964c:	2a30      	cmp	r2, #48	; 0x30
 800964e:	d0fa      	beq.n	8009646 <_dtoa_r+0xa66>
 8009650:	e6f6      	b.n	8009440 <_dtoa_r+0x860>
 8009652:	9a01      	ldr	r2, [sp, #4]
 8009654:	429a      	cmp	r2, r3
 8009656:	d1a4      	bne.n	80095a2 <_dtoa_r+0x9c2>
 8009658:	f10b 0b01 	add.w	fp, fp, #1
 800965c:	2331      	movs	r3, #49	; 0x31
 800965e:	e778      	b.n	8009552 <_dtoa_r+0x972>
 8009660:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <_dtoa_r+0xad4>)
 8009662:	f7ff bb27 	b.w	8008cb4 <_dtoa_r+0xd4>
 8009666:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009668:	2b00      	cmp	r3, #0
 800966a:	f47f ab03 	bne.w	8008c74 <_dtoa_r+0x94>
 800966e:	4b12      	ldr	r3, [pc, #72]	; (80096b8 <_dtoa_r+0xad8>)
 8009670:	f7ff bb20 	b.w	8008cb4 <_dtoa_r+0xd4>
 8009674:	f1ba 0f00 	cmp.w	sl, #0
 8009678:	dc03      	bgt.n	8009682 <_dtoa_r+0xaa2>
 800967a:	9b06      	ldr	r3, [sp, #24]
 800967c:	2b02      	cmp	r3, #2
 800967e:	f73f aec7 	bgt.w	8009410 <_dtoa_r+0x830>
 8009682:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009686:	4621      	mov	r1, r4
 8009688:	4628      	mov	r0, r5
 800968a:	f7ff fa1d 	bl	8008ac8 <quorem>
 800968e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009692:	f808 3b01 	strb.w	r3, [r8], #1
 8009696:	9a01      	ldr	r2, [sp, #4]
 8009698:	eba8 0202 	sub.w	r2, r8, r2
 800969c:	4592      	cmp	sl, r2
 800969e:	ddb7      	ble.n	8009610 <_dtoa_r+0xa30>
 80096a0:	4629      	mov	r1, r5
 80096a2:	2300      	movs	r3, #0
 80096a4:	220a      	movs	r2, #10
 80096a6:	4630      	mov	r0, r6
 80096a8:	f000 fbfc 	bl	8009ea4 <__multadd>
 80096ac:	4605      	mov	r5, r0
 80096ae:	e7ea      	b.n	8009686 <_dtoa_r+0xaa6>
 80096b0:	0800ba8b 	.word	0x0800ba8b
 80096b4:	0800b86c 	.word	0x0800b86c
 80096b8:	0800b9e9 	.word	0x0800b9e9

080096bc <rshift>:
 80096bc:	6903      	ldr	r3, [r0, #16]
 80096be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096ca:	f100 0414 	add.w	r4, r0, #20
 80096ce:	dd45      	ble.n	800975c <rshift+0xa0>
 80096d0:	f011 011f 	ands.w	r1, r1, #31
 80096d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80096d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80096dc:	d10c      	bne.n	80096f8 <rshift+0x3c>
 80096de:	f100 0710 	add.w	r7, r0, #16
 80096e2:	4629      	mov	r1, r5
 80096e4:	42b1      	cmp	r1, r6
 80096e6:	d334      	bcc.n	8009752 <rshift+0x96>
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	1eea      	subs	r2, r5, #3
 80096ee:	4296      	cmp	r6, r2
 80096f0:	bf38      	it	cc
 80096f2:	2300      	movcc	r3, #0
 80096f4:	4423      	add	r3, r4
 80096f6:	e015      	b.n	8009724 <rshift+0x68>
 80096f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80096fc:	f1c1 0820 	rsb	r8, r1, #32
 8009700:	40cf      	lsrs	r7, r1
 8009702:	f105 0e04 	add.w	lr, r5, #4
 8009706:	46a1      	mov	r9, r4
 8009708:	4576      	cmp	r6, lr
 800970a:	46f4      	mov	ip, lr
 800970c:	d815      	bhi.n	800973a <rshift+0x7e>
 800970e:	1a9a      	subs	r2, r3, r2
 8009710:	0092      	lsls	r2, r2, #2
 8009712:	3a04      	subs	r2, #4
 8009714:	3501      	adds	r5, #1
 8009716:	42ae      	cmp	r6, r5
 8009718:	bf38      	it	cc
 800971a:	2200      	movcc	r2, #0
 800971c:	18a3      	adds	r3, r4, r2
 800971e:	50a7      	str	r7, [r4, r2]
 8009720:	b107      	cbz	r7, 8009724 <rshift+0x68>
 8009722:	3304      	adds	r3, #4
 8009724:	1b1a      	subs	r2, r3, r4
 8009726:	42a3      	cmp	r3, r4
 8009728:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800972c:	bf08      	it	eq
 800972e:	2300      	moveq	r3, #0
 8009730:	6102      	str	r2, [r0, #16]
 8009732:	bf08      	it	eq
 8009734:	6143      	streq	r3, [r0, #20]
 8009736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800973a:	f8dc c000 	ldr.w	ip, [ip]
 800973e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009742:	ea4c 0707 	orr.w	r7, ip, r7
 8009746:	f849 7b04 	str.w	r7, [r9], #4
 800974a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800974e:	40cf      	lsrs	r7, r1
 8009750:	e7da      	b.n	8009708 <rshift+0x4c>
 8009752:	f851 cb04 	ldr.w	ip, [r1], #4
 8009756:	f847 cf04 	str.w	ip, [r7, #4]!
 800975a:	e7c3      	b.n	80096e4 <rshift+0x28>
 800975c:	4623      	mov	r3, r4
 800975e:	e7e1      	b.n	8009724 <rshift+0x68>

08009760 <__hexdig_fun>:
 8009760:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009764:	2b09      	cmp	r3, #9
 8009766:	d802      	bhi.n	800976e <__hexdig_fun+0xe>
 8009768:	3820      	subs	r0, #32
 800976a:	b2c0      	uxtb	r0, r0
 800976c:	4770      	bx	lr
 800976e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009772:	2b05      	cmp	r3, #5
 8009774:	d801      	bhi.n	800977a <__hexdig_fun+0x1a>
 8009776:	3847      	subs	r0, #71	; 0x47
 8009778:	e7f7      	b.n	800976a <__hexdig_fun+0xa>
 800977a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800977e:	2b05      	cmp	r3, #5
 8009780:	d801      	bhi.n	8009786 <__hexdig_fun+0x26>
 8009782:	3827      	subs	r0, #39	; 0x27
 8009784:	e7f1      	b.n	800976a <__hexdig_fun+0xa>
 8009786:	2000      	movs	r0, #0
 8009788:	4770      	bx	lr
	...

0800978c <__gethex>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	ed2d 8b02 	vpush	{d8}
 8009794:	b089      	sub	sp, #36	; 0x24
 8009796:	ee08 0a10 	vmov	s16, r0
 800979a:	9304      	str	r3, [sp, #16]
 800979c:	4bb4      	ldr	r3, [pc, #720]	; (8009a70 <__gethex+0x2e4>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	4618      	mov	r0, r3
 80097a4:	468b      	mov	fp, r1
 80097a6:	4690      	mov	r8, r2
 80097a8:	f7f6 fd4a 	bl	8000240 <strlen>
 80097ac:	9b01      	ldr	r3, [sp, #4]
 80097ae:	f8db 2000 	ldr.w	r2, [fp]
 80097b2:	4403      	add	r3, r0
 80097b4:	4682      	mov	sl, r0
 80097b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80097ba:	9305      	str	r3, [sp, #20]
 80097bc:	1c93      	adds	r3, r2, #2
 80097be:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80097c2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80097c6:	32fe      	adds	r2, #254	; 0xfe
 80097c8:	18d1      	adds	r1, r2, r3
 80097ca:	461f      	mov	r7, r3
 80097cc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097d0:	9100      	str	r1, [sp, #0]
 80097d2:	2830      	cmp	r0, #48	; 0x30
 80097d4:	d0f8      	beq.n	80097c8 <__gethex+0x3c>
 80097d6:	f7ff ffc3 	bl	8009760 <__hexdig_fun>
 80097da:	4604      	mov	r4, r0
 80097dc:	2800      	cmp	r0, #0
 80097de:	d13a      	bne.n	8009856 <__gethex+0xca>
 80097e0:	9901      	ldr	r1, [sp, #4]
 80097e2:	4652      	mov	r2, sl
 80097e4:	4638      	mov	r0, r7
 80097e6:	f001 f933 	bl	800aa50 <strncmp>
 80097ea:	4605      	mov	r5, r0
 80097ec:	2800      	cmp	r0, #0
 80097ee:	d168      	bne.n	80098c2 <__gethex+0x136>
 80097f0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80097f4:	eb07 060a 	add.w	r6, r7, sl
 80097f8:	f7ff ffb2 	bl	8009760 <__hexdig_fun>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d062      	beq.n	80098c6 <__gethex+0x13a>
 8009800:	4633      	mov	r3, r6
 8009802:	7818      	ldrb	r0, [r3, #0]
 8009804:	2830      	cmp	r0, #48	; 0x30
 8009806:	461f      	mov	r7, r3
 8009808:	f103 0301 	add.w	r3, r3, #1
 800980c:	d0f9      	beq.n	8009802 <__gethex+0x76>
 800980e:	f7ff ffa7 	bl	8009760 <__hexdig_fun>
 8009812:	2301      	movs	r3, #1
 8009814:	fab0 f480 	clz	r4, r0
 8009818:	0964      	lsrs	r4, r4, #5
 800981a:	4635      	mov	r5, r6
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	463a      	mov	r2, r7
 8009820:	4616      	mov	r6, r2
 8009822:	3201      	adds	r2, #1
 8009824:	7830      	ldrb	r0, [r6, #0]
 8009826:	f7ff ff9b 	bl	8009760 <__hexdig_fun>
 800982a:	2800      	cmp	r0, #0
 800982c:	d1f8      	bne.n	8009820 <__gethex+0x94>
 800982e:	9901      	ldr	r1, [sp, #4]
 8009830:	4652      	mov	r2, sl
 8009832:	4630      	mov	r0, r6
 8009834:	f001 f90c 	bl	800aa50 <strncmp>
 8009838:	b980      	cbnz	r0, 800985c <__gethex+0xd0>
 800983a:	b94d      	cbnz	r5, 8009850 <__gethex+0xc4>
 800983c:	eb06 050a 	add.w	r5, r6, sl
 8009840:	462a      	mov	r2, r5
 8009842:	4616      	mov	r6, r2
 8009844:	3201      	adds	r2, #1
 8009846:	7830      	ldrb	r0, [r6, #0]
 8009848:	f7ff ff8a 	bl	8009760 <__hexdig_fun>
 800984c:	2800      	cmp	r0, #0
 800984e:	d1f8      	bne.n	8009842 <__gethex+0xb6>
 8009850:	1bad      	subs	r5, r5, r6
 8009852:	00ad      	lsls	r5, r5, #2
 8009854:	e004      	b.n	8009860 <__gethex+0xd4>
 8009856:	2400      	movs	r4, #0
 8009858:	4625      	mov	r5, r4
 800985a:	e7e0      	b.n	800981e <__gethex+0x92>
 800985c:	2d00      	cmp	r5, #0
 800985e:	d1f7      	bne.n	8009850 <__gethex+0xc4>
 8009860:	7833      	ldrb	r3, [r6, #0]
 8009862:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009866:	2b50      	cmp	r3, #80	; 0x50
 8009868:	d13b      	bne.n	80098e2 <__gethex+0x156>
 800986a:	7873      	ldrb	r3, [r6, #1]
 800986c:	2b2b      	cmp	r3, #43	; 0x2b
 800986e:	d02c      	beq.n	80098ca <__gethex+0x13e>
 8009870:	2b2d      	cmp	r3, #45	; 0x2d
 8009872:	d02e      	beq.n	80098d2 <__gethex+0x146>
 8009874:	1c71      	adds	r1, r6, #1
 8009876:	f04f 0900 	mov.w	r9, #0
 800987a:	7808      	ldrb	r0, [r1, #0]
 800987c:	f7ff ff70 	bl	8009760 <__hexdig_fun>
 8009880:	1e43      	subs	r3, r0, #1
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b18      	cmp	r3, #24
 8009886:	d82c      	bhi.n	80098e2 <__gethex+0x156>
 8009888:	f1a0 0210 	sub.w	r2, r0, #16
 800988c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009890:	f7ff ff66 	bl	8009760 <__hexdig_fun>
 8009894:	1e43      	subs	r3, r0, #1
 8009896:	b2db      	uxtb	r3, r3
 8009898:	2b18      	cmp	r3, #24
 800989a:	d91d      	bls.n	80098d8 <__gethex+0x14c>
 800989c:	f1b9 0f00 	cmp.w	r9, #0
 80098a0:	d000      	beq.n	80098a4 <__gethex+0x118>
 80098a2:	4252      	negs	r2, r2
 80098a4:	4415      	add	r5, r2
 80098a6:	f8cb 1000 	str.w	r1, [fp]
 80098aa:	b1e4      	cbz	r4, 80098e6 <__gethex+0x15a>
 80098ac:	9b00      	ldr	r3, [sp, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bf14      	ite	ne
 80098b2:	2700      	movne	r7, #0
 80098b4:	2706      	moveq	r7, #6
 80098b6:	4638      	mov	r0, r7
 80098b8:	b009      	add	sp, #36	; 0x24
 80098ba:	ecbd 8b02 	vpop	{d8}
 80098be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c2:	463e      	mov	r6, r7
 80098c4:	4625      	mov	r5, r4
 80098c6:	2401      	movs	r4, #1
 80098c8:	e7ca      	b.n	8009860 <__gethex+0xd4>
 80098ca:	f04f 0900 	mov.w	r9, #0
 80098ce:	1cb1      	adds	r1, r6, #2
 80098d0:	e7d3      	b.n	800987a <__gethex+0xee>
 80098d2:	f04f 0901 	mov.w	r9, #1
 80098d6:	e7fa      	b.n	80098ce <__gethex+0x142>
 80098d8:	230a      	movs	r3, #10
 80098da:	fb03 0202 	mla	r2, r3, r2, r0
 80098de:	3a10      	subs	r2, #16
 80098e0:	e7d4      	b.n	800988c <__gethex+0x100>
 80098e2:	4631      	mov	r1, r6
 80098e4:	e7df      	b.n	80098a6 <__gethex+0x11a>
 80098e6:	1bf3      	subs	r3, r6, r7
 80098e8:	3b01      	subs	r3, #1
 80098ea:	4621      	mov	r1, r4
 80098ec:	2b07      	cmp	r3, #7
 80098ee:	dc0b      	bgt.n	8009908 <__gethex+0x17c>
 80098f0:	ee18 0a10 	vmov	r0, s16
 80098f4:	f000 fa74 	bl	8009de0 <_Balloc>
 80098f8:	4604      	mov	r4, r0
 80098fa:	b940      	cbnz	r0, 800990e <__gethex+0x182>
 80098fc:	4b5d      	ldr	r3, [pc, #372]	; (8009a74 <__gethex+0x2e8>)
 80098fe:	4602      	mov	r2, r0
 8009900:	21de      	movs	r1, #222	; 0xde
 8009902:	485d      	ldr	r0, [pc, #372]	; (8009a78 <__gethex+0x2ec>)
 8009904:	f001 f8c6 	bl	800aa94 <__assert_func>
 8009908:	3101      	adds	r1, #1
 800990a:	105b      	asrs	r3, r3, #1
 800990c:	e7ee      	b.n	80098ec <__gethex+0x160>
 800990e:	f100 0914 	add.w	r9, r0, #20
 8009912:	f04f 0b00 	mov.w	fp, #0
 8009916:	f1ca 0301 	rsb	r3, sl, #1
 800991a:	f8cd 9008 	str.w	r9, [sp, #8]
 800991e:	f8cd b000 	str.w	fp, [sp]
 8009922:	9306      	str	r3, [sp, #24]
 8009924:	42b7      	cmp	r7, r6
 8009926:	d340      	bcc.n	80099aa <__gethex+0x21e>
 8009928:	9802      	ldr	r0, [sp, #8]
 800992a:	9b00      	ldr	r3, [sp, #0]
 800992c:	f840 3b04 	str.w	r3, [r0], #4
 8009930:	eba0 0009 	sub.w	r0, r0, r9
 8009934:	1080      	asrs	r0, r0, #2
 8009936:	0146      	lsls	r6, r0, #5
 8009938:	6120      	str	r0, [r4, #16]
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fb42 	bl	8009fc4 <__hi0bits>
 8009940:	1a30      	subs	r0, r6, r0
 8009942:	f8d8 6000 	ldr.w	r6, [r8]
 8009946:	42b0      	cmp	r0, r6
 8009948:	dd63      	ble.n	8009a12 <__gethex+0x286>
 800994a:	1b87      	subs	r7, r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	4620      	mov	r0, r4
 8009950:	f000 fee3 	bl	800a71a <__any_on>
 8009954:	4682      	mov	sl, r0
 8009956:	b1a8      	cbz	r0, 8009984 <__gethex+0x1f8>
 8009958:	1e7b      	subs	r3, r7, #1
 800995a:	1159      	asrs	r1, r3, #5
 800995c:	f003 021f 	and.w	r2, r3, #31
 8009960:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009964:	f04f 0a01 	mov.w	sl, #1
 8009968:	fa0a f202 	lsl.w	r2, sl, r2
 800996c:	420a      	tst	r2, r1
 800996e:	d009      	beq.n	8009984 <__gethex+0x1f8>
 8009970:	4553      	cmp	r3, sl
 8009972:	dd05      	ble.n	8009980 <__gethex+0x1f4>
 8009974:	1eb9      	subs	r1, r7, #2
 8009976:	4620      	mov	r0, r4
 8009978:	f000 fecf 	bl	800a71a <__any_on>
 800997c:	2800      	cmp	r0, #0
 800997e:	d145      	bne.n	8009a0c <__gethex+0x280>
 8009980:	f04f 0a02 	mov.w	sl, #2
 8009984:	4639      	mov	r1, r7
 8009986:	4620      	mov	r0, r4
 8009988:	f7ff fe98 	bl	80096bc <rshift>
 800998c:	443d      	add	r5, r7
 800998e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009992:	42ab      	cmp	r3, r5
 8009994:	da4c      	bge.n	8009a30 <__gethex+0x2a4>
 8009996:	ee18 0a10 	vmov	r0, s16
 800999a:	4621      	mov	r1, r4
 800999c:	f000 fa60 	bl	8009e60 <_Bfree>
 80099a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80099a2:	2300      	movs	r3, #0
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	27a3      	movs	r7, #163	; 0xa3
 80099a8:	e785      	b.n	80098b6 <__gethex+0x12a>
 80099aa:	1e73      	subs	r3, r6, #1
 80099ac:	9a05      	ldr	r2, [sp, #20]
 80099ae:	9303      	str	r3, [sp, #12]
 80099b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d019      	beq.n	80099ec <__gethex+0x260>
 80099b8:	f1bb 0f20 	cmp.w	fp, #32
 80099bc:	d107      	bne.n	80099ce <__gethex+0x242>
 80099be:	9b02      	ldr	r3, [sp, #8]
 80099c0:	9a00      	ldr	r2, [sp, #0]
 80099c2:	f843 2b04 	str.w	r2, [r3], #4
 80099c6:	9302      	str	r3, [sp, #8]
 80099c8:	2300      	movs	r3, #0
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	469b      	mov	fp, r3
 80099ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80099d2:	f7ff fec5 	bl	8009760 <__hexdig_fun>
 80099d6:	9b00      	ldr	r3, [sp, #0]
 80099d8:	f000 000f 	and.w	r0, r0, #15
 80099dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80099e0:	4303      	orrs	r3, r0
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	f10b 0b04 	add.w	fp, fp, #4
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	e00d      	b.n	8009a08 <__gethex+0x27c>
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	9a06      	ldr	r2, [sp, #24]
 80099f0:	4413      	add	r3, r2
 80099f2:	42bb      	cmp	r3, r7
 80099f4:	d3e0      	bcc.n	80099b8 <__gethex+0x22c>
 80099f6:	4618      	mov	r0, r3
 80099f8:	9901      	ldr	r1, [sp, #4]
 80099fa:	9307      	str	r3, [sp, #28]
 80099fc:	4652      	mov	r2, sl
 80099fe:	f001 f827 	bl	800aa50 <strncmp>
 8009a02:	9b07      	ldr	r3, [sp, #28]
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d1d7      	bne.n	80099b8 <__gethex+0x22c>
 8009a08:	461e      	mov	r6, r3
 8009a0a:	e78b      	b.n	8009924 <__gethex+0x198>
 8009a0c:	f04f 0a03 	mov.w	sl, #3
 8009a10:	e7b8      	b.n	8009984 <__gethex+0x1f8>
 8009a12:	da0a      	bge.n	8009a2a <__gethex+0x29e>
 8009a14:	1a37      	subs	r7, r6, r0
 8009a16:	4621      	mov	r1, r4
 8009a18:	ee18 0a10 	vmov	r0, s16
 8009a1c:	463a      	mov	r2, r7
 8009a1e:	f000 fc3b 	bl	800a298 <__lshift>
 8009a22:	1bed      	subs	r5, r5, r7
 8009a24:	4604      	mov	r4, r0
 8009a26:	f100 0914 	add.w	r9, r0, #20
 8009a2a:	f04f 0a00 	mov.w	sl, #0
 8009a2e:	e7ae      	b.n	800998e <__gethex+0x202>
 8009a30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009a34:	42a8      	cmp	r0, r5
 8009a36:	dd72      	ble.n	8009b1e <__gethex+0x392>
 8009a38:	1b45      	subs	r5, r0, r5
 8009a3a:	42ae      	cmp	r6, r5
 8009a3c:	dc36      	bgt.n	8009aac <__gethex+0x320>
 8009a3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d02a      	beq.n	8009a9c <__gethex+0x310>
 8009a46:	2b03      	cmp	r3, #3
 8009a48:	d02c      	beq.n	8009aa4 <__gethex+0x318>
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d11c      	bne.n	8009a88 <__gethex+0x2fc>
 8009a4e:	42ae      	cmp	r6, r5
 8009a50:	d11a      	bne.n	8009a88 <__gethex+0x2fc>
 8009a52:	2e01      	cmp	r6, #1
 8009a54:	d112      	bne.n	8009a7c <__gethex+0x2f0>
 8009a56:	9a04      	ldr	r2, [sp, #16]
 8009a58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	2301      	movs	r3, #1
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	f8c9 3000 	str.w	r3, [r9]
 8009a66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a68:	2762      	movs	r7, #98	; 0x62
 8009a6a:	601c      	str	r4, [r3, #0]
 8009a6c:	e723      	b.n	80098b6 <__gethex+0x12a>
 8009a6e:	bf00      	nop
 8009a70:	0800bb24 	.word	0x0800bb24
 8009a74:	0800ba8b 	.word	0x0800ba8b
 8009a78:	0800ba9c 	.word	0x0800ba9c
 8009a7c:	1e71      	subs	r1, r6, #1
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f000 fe4b 	bl	800a71a <__any_on>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d1e6      	bne.n	8009a56 <__gethex+0x2ca>
 8009a88:	ee18 0a10 	vmov	r0, s16
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	f000 f9e7 	bl	8009e60 <_Bfree>
 8009a92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a94:	2300      	movs	r3, #0
 8009a96:	6013      	str	r3, [r2, #0]
 8009a98:	2750      	movs	r7, #80	; 0x50
 8009a9a:	e70c      	b.n	80098b6 <__gethex+0x12a>
 8009a9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1f2      	bne.n	8009a88 <__gethex+0x2fc>
 8009aa2:	e7d8      	b.n	8009a56 <__gethex+0x2ca>
 8009aa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1d5      	bne.n	8009a56 <__gethex+0x2ca>
 8009aaa:	e7ed      	b.n	8009a88 <__gethex+0x2fc>
 8009aac:	1e6f      	subs	r7, r5, #1
 8009aae:	f1ba 0f00 	cmp.w	sl, #0
 8009ab2:	d131      	bne.n	8009b18 <__gethex+0x38c>
 8009ab4:	b127      	cbz	r7, 8009ac0 <__gethex+0x334>
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f000 fe2e 	bl	800a71a <__any_on>
 8009abe:	4682      	mov	sl, r0
 8009ac0:	117b      	asrs	r3, r7, #5
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009ac8:	f007 071f 	and.w	r7, r7, #31
 8009acc:	fa01 f707 	lsl.w	r7, r1, r7
 8009ad0:	421f      	tst	r7, r3
 8009ad2:	4629      	mov	r1, r5
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	bf18      	it	ne
 8009ad8:	f04a 0a02 	orrne.w	sl, sl, #2
 8009adc:	1b76      	subs	r6, r6, r5
 8009ade:	f7ff fded 	bl	80096bc <rshift>
 8009ae2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ae6:	2702      	movs	r7, #2
 8009ae8:	f1ba 0f00 	cmp.w	sl, #0
 8009aec:	d048      	beq.n	8009b80 <__gethex+0x3f4>
 8009aee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d015      	beq.n	8009b22 <__gethex+0x396>
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	d017      	beq.n	8009b2a <__gethex+0x39e>
 8009afa:	2b01      	cmp	r3, #1
 8009afc:	d109      	bne.n	8009b12 <__gethex+0x386>
 8009afe:	f01a 0f02 	tst.w	sl, #2
 8009b02:	d006      	beq.n	8009b12 <__gethex+0x386>
 8009b04:	f8d9 0000 	ldr.w	r0, [r9]
 8009b08:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b0c:	f01a 0f01 	tst.w	sl, #1
 8009b10:	d10e      	bne.n	8009b30 <__gethex+0x3a4>
 8009b12:	f047 0710 	orr.w	r7, r7, #16
 8009b16:	e033      	b.n	8009b80 <__gethex+0x3f4>
 8009b18:	f04f 0a01 	mov.w	sl, #1
 8009b1c:	e7d0      	b.n	8009ac0 <__gethex+0x334>
 8009b1e:	2701      	movs	r7, #1
 8009b20:	e7e2      	b.n	8009ae8 <__gethex+0x35c>
 8009b22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b24:	f1c3 0301 	rsb	r3, r3, #1
 8009b28:	9315      	str	r3, [sp, #84]	; 0x54
 8009b2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0f0      	beq.n	8009b12 <__gethex+0x386>
 8009b30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009b34:	f104 0314 	add.w	r3, r4, #20
 8009b38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b40:	f04f 0c00 	mov.w	ip, #0
 8009b44:	4618      	mov	r0, r3
 8009b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b4e:	d01c      	beq.n	8009b8a <__gethex+0x3fe>
 8009b50:	3201      	adds	r2, #1
 8009b52:	6002      	str	r2, [r0, #0]
 8009b54:	2f02      	cmp	r7, #2
 8009b56:	f104 0314 	add.w	r3, r4, #20
 8009b5a:	d13f      	bne.n	8009bdc <__gethex+0x450>
 8009b5c:	f8d8 2000 	ldr.w	r2, [r8]
 8009b60:	3a01      	subs	r2, #1
 8009b62:	42b2      	cmp	r2, r6
 8009b64:	d10a      	bne.n	8009b7c <__gethex+0x3f0>
 8009b66:	1171      	asrs	r1, r6, #5
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b6e:	f006 061f 	and.w	r6, r6, #31
 8009b72:	fa02 f606 	lsl.w	r6, r2, r6
 8009b76:	421e      	tst	r6, r3
 8009b78:	bf18      	it	ne
 8009b7a:	4617      	movne	r7, r2
 8009b7c:	f047 0720 	orr.w	r7, r7, #32
 8009b80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b82:	601c      	str	r4, [r3, #0]
 8009b84:	9b04      	ldr	r3, [sp, #16]
 8009b86:	601d      	str	r5, [r3, #0]
 8009b88:	e695      	b.n	80098b6 <__gethex+0x12a>
 8009b8a:	4299      	cmp	r1, r3
 8009b8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b90:	d8d8      	bhi.n	8009b44 <__gethex+0x3b8>
 8009b92:	68a3      	ldr	r3, [r4, #8]
 8009b94:	459b      	cmp	fp, r3
 8009b96:	db19      	blt.n	8009bcc <__gethex+0x440>
 8009b98:	6861      	ldr	r1, [r4, #4]
 8009b9a:	ee18 0a10 	vmov	r0, s16
 8009b9e:	3101      	adds	r1, #1
 8009ba0:	f000 f91e 	bl	8009de0 <_Balloc>
 8009ba4:	4681      	mov	r9, r0
 8009ba6:	b918      	cbnz	r0, 8009bb0 <__gethex+0x424>
 8009ba8:	4b1a      	ldr	r3, [pc, #104]	; (8009c14 <__gethex+0x488>)
 8009baa:	4602      	mov	r2, r0
 8009bac:	2184      	movs	r1, #132	; 0x84
 8009bae:	e6a8      	b.n	8009902 <__gethex+0x176>
 8009bb0:	6922      	ldr	r2, [r4, #16]
 8009bb2:	3202      	adds	r2, #2
 8009bb4:	f104 010c 	add.w	r1, r4, #12
 8009bb8:	0092      	lsls	r2, r2, #2
 8009bba:	300c      	adds	r0, #12
 8009bbc:	f7fd f9b4 	bl	8006f28 <memcpy>
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	ee18 0a10 	vmov	r0, s16
 8009bc6:	f000 f94b 	bl	8009e60 <_Bfree>
 8009bca:	464c      	mov	r4, r9
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bd4:	6122      	str	r2, [r4, #16]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	615a      	str	r2, [r3, #20]
 8009bda:	e7bb      	b.n	8009b54 <__gethex+0x3c8>
 8009bdc:	6922      	ldr	r2, [r4, #16]
 8009bde:	455a      	cmp	r2, fp
 8009be0:	dd0b      	ble.n	8009bfa <__gethex+0x46e>
 8009be2:	2101      	movs	r1, #1
 8009be4:	4620      	mov	r0, r4
 8009be6:	f7ff fd69 	bl	80096bc <rshift>
 8009bea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bee:	3501      	adds	r5, #1
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	f6ff aed0 	blt.w	8009996 <__gethex+0x20a>
 8009bf6:	2701      	movs	r7, #1
 8009bf8:	e7c0      	b.n	8009b7c <__gethex+0x3f0>
 8009bfa:	f016 061f 	ands.w	r6, r6, #31
 8009bfe:	d0fa      	beq.n	8009bf6 <__gethex+0x46a>
 8009c00:	4453      	add	r3, sl
 8009c02:	f1c6 0620 	rsb	r6, r6, #32
 8009c06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c0a:	f000 f9db 	bl	8009fc4 <__hi0bits>
 8009c0e:	42b0      	cmp	r0, r6
 8009c10:	dbe7      	blt.n	8009be2 <__gethex+0x456>
 8009c12:	e7f0      	b.n	8009bf6 <__gethex+0x46a>
 8009c14:	0800ba8b 	.word	0x0800ba8b

08009c18 <L_shift>:
 8009c18:	f1c2 0208 	rsb	r2, r2, #8
 8009c1c:	0092      	lsls	r2, r2, #2
 8009c1e:	b570      	push	{r4, r5, r6, lr}
 8009c20:	f1c2 0620 	rsb	r6, r2, #32
 8009c24:	6843      	ldr	r3, [r0, #4]
 8009c26:	6804      	ldr	r4, [r0, #0]
 8009c28:	fa03 f506 	lsl.w	r5, r3, r6
 8009c2c:	432c      	orrs	r4, r5
 8009c2e:	40d3      	lsrs	r3, r2
 8009c30:	6004      	str	r4, [r0, #0]
 8009c32:	f840 3f04 	str.w	r3, [r0, #4]!
 8009c36:	4288      	cmp	r0, r1
 8009c38:	d3f4      	bcc.n	8009c24 <L_shift+0xc>
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}

08009c3c <__match>:
 8009c3c:	b530      	push	{r4, r5, lr}
 8009c3e:	6803      	ldr	r3, [r0, #0]
 8009c40:	3301      	adds	r3, #1
 8009c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c46:	b914      	cbnz	r4, 8009c4e <__match+0x12>
 8009c48:	6003      	str	r3, [r0, #0]
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	bd30      	pop	{r4, r5, pc}
 8009c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009c56:	2d19      	cmp	r5, #25
 8009c58:	bf98      	it	ls
 8009c5a:	3220      	addls	r2, #32
 8009c5c:	42a2      	cmp	r2, r4
 8009c5e:	d0f0      	beq.n	8009c42 <__match+0x6>
 8009c60:	2000      	movs	r0, #0
 8009c62:	e7f3      	b.n	8009c4c <__match+0x10>

08009c64 <__hexnan>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	680b      	ldr	r3, [r1, #0]
 8009c6a:	115e      	asrs	r6, r3, #5
 8009c6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c70:	f013 031f 	ands.w	r3, r3, #31
 8009c74:	b087      	sub	sp, #28
 8009c76:	bf18      	it	ne
 8009c78:	3604      	addne	r6, #4
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	1f37      	subs	r7, r6, #4
 8009c7e:	4690      	mov	r8, r2
 8009c80:	6802      	ldr	r2, [r0, #0]
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	4682      	mov	sl, r0
 8009c86:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c8a:	46b9      	mov	r9, r7
 8009c8c:	463c      	mov	r4, r7
 8009c8e:	9502      	str	r5, [sp, #8]
 8009c90:	46ab      	mov	fp, r5
 8009c92:	7851      	ldrb	r1, [r2, #1]
 8009c94:	1c53      	adds	r3, r2, #1
 8009c96:	9303      	str	r3, [sp, #12]
 8009c98:	b341      	cbz	r1, 8009cec <__hexnan+0x88>
 8009c9a:	4608      	mov	r0, r1
 8009c9c:	9205      	str	r2, [sp, #20]
 8009c9e:	9104      	str	r1, [sp, #16]
 8009ca0:	f7ff fd5e 	bl	8009760 <__hexdig_fun>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d14f      	bne.n	8009d48 <__hexnan+0xe4>
 8009ca8:	9904      	ldr	r1, [sp, #16]
 8009caa:	9a05      	ldr	r2, [sp, #20]
 8009cac:	2920      	cmp	r1, #32
 8009cae:	d818      	bhi.n	8009ce2 <__hexnan+0x7e>
 8009cb0:	9b02      	ldr	r3, [sp, #8]
 8009cb2:	459b      	cmp	fp, r3
 8009cb4:	dd13      	ble.n	8009cde <__hexnan+0x7a>
 8009cb6:	454c      	cmp	r4, r9
 8009cb8:	d206      	bcs.n	8009cc8 <__hexnan+0x64>
 8009cba:	2d07      	cmp	r5, #7
 8009cbc:	dc04      	bgt.n	8009cc8 <__hexnan+0x64>
 8009cbe:	462a      	mov	r2, r5
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7ff ffa8 	bl	8009c18 <L_shift>
 8009cc8:	4544      	cmp	r4, r8
 8009cca:	d950      	bls.n	8009d6e <__hexnan+0x10a>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f1a4 0904 	sub.w	r9, r4, #4
 8009cd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009cd6:	f8cd b008 	str.w	fp, [sp, #8]
 8009cda:	464c      	mov	r4, r9
 8009cdc:	461d      	mov	r5, r3
 8009cde:	9a03      	ldr	r2, [sp, #12]
 8009ce0:	e7d7      	b.n	8009c92 <__hexnan+0x2e>
 8009ce2:	2929      	cmp	r1, #41	; 0x29
 8009ce4:	d156      	bne.n	8009d94 <__hexnan+0x130>
 8009ce6:	3202      	adds	r2, #2
 8009ce8:	f8ca 2000 	str.w	r2, [sl]
 8009cec:	f1bb 0f00 	cmp.w	fp, #0
 8009cf0:	d050      	beq.n	8009d94 <__hexnan+0x130>
 8009cf2:	454c      	cmp	r4, r9
 8009cf4:	d206      	bcs.n	8009d04 <__hexnan+0xa0>
 8009cf6:	2d07      	cmp	r5, #7
 8009cf8:	dc04      	bgt.n	8009d04 <__hexnan+0xa0>
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	4620      	mov	r0, r4
 8009d00:	f7ff ff8a 	bl	8009c18 <L_shift>
 8009d04:	4544      	cmp	r4, r8
 8009d06:	d934      	bls.n	8009d72 <__hexnan+0x10e>
 8009d08:	f1a8 0204 	sub.w	r2, r8, #4
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d12:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d16:	429f      	cmp	r7, r3
 8009d18:	d2f9      	bcs.n	8009d0e <__hexnan+0xaa>
 8009d1a:	1b3b      	subs	r3, r7, r4
 8009d1c:	f023 0303 	bic.w	r3, r3, #3
 8009d20:	3304      	adds	r3, #4
 8009d22:	3401      	adds	r4, #1
 8009d24:	3e03      	subs	r6, #3
 8009d26:	42b4      	cmp	r4, r6
 8009d28:	bf88      	it	hi
 8009d2a:	2304      	movhi	r3, #4
 8009d2c:	4443      	add	r3, r8
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f843 2b04 	str.w	r2, [r3], #4
 8009d34:	429f      	cmp	r7, r3
 8009d36:	d2fb      	bcs.n	8009d30 <__hexnan+0xcc>
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	b91b      	cbnz	r3, 8009d44 <__hexnan+0xe0>
 8009d3c:	4547      	cmp	r7, r8
 8009d3e:	d127      	bne.n	8009d90 <__hexnan+0x12c>
 8009d40:	2301      	movs	r3, #1
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	2005      	movs	r0, #5
 8009d46:	e026      	b.n	8009d96 <__hexnan+0x132>
 8009d48:	3501      	adds	r5, #1
 8009d4a:	2d08      	cmp	r5, #8
 8009d4c:	f10b 0b01 	add.w	fp, fp, #1
 8009d50:	dd06      	ble.n	8009d60 <__hexnan+0xfc>
 8009d52:	4544      	cmp	r4, r8
 8009d54:	d9c3      	bls.n	8009cde <__hexnan+0x7a>
 8009d56:	2300      	movs	r3, #0
 8009d58:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d5c:	2501      	movs	r5, #1
 8009d5e:	3c04      	subs	r4, #4
 8009d60:	6822      	ldr	r2, [r4, #0]
 8009d62:	f000 000f 	and.w	r0, r0, #15
 8009d66:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009d6a:	6022      	str	r2, [r4, #0]
 8009d6c:	e7b7      	b.n	8009cde <__hexnan+0x7a>
 8009d6e:	2508      	movs	r5, #8
 8009d70:	e7b5      	b.n	8009cde <__hexnan+0x7a>
 8009d72:	9b01      	ldr	r3, [sp, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d0df      	beq.n	8009d38 <__hexnan+0xd4>
 8009d78:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7c:	f1c3 0320 	rsb	r3, r3, #32
 8009d80:	fa22 f303 	lsr.w	r3, r2, r3
 8009d84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d88:	401a      	ands	r2, r3
 8009d8a:	f846 2c04 	str.w	r2, [r6, #-4]
 8009d8e:	e7d3      	b.n	8009d38 <__hexnan+0xd4>
 8009d90:	3f04      	subs	r7, #4
 8009d92:	e7d1      	b.n	8009d38 <__hexnan+0xd4>
 8009d94:	2004      	movs	r0, #4
 8009d96:	b007      	add	sp, #28
 8009d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d9c <_localeconv_r>:
 8009d9c:	4800      	ldr	r0, [pc, #0]	; (8009da0 <_localeconv_r+0x4>)
 8009d9e:	4770      	bx	lr
 8009da0:	20000174 	.word	0x20000174

08009da4 <__ascii_mbtowc>:
 8009da4:	b082      	sub	sp, #8
 8009da6:	b901      	cbnz	r1, 8009daa <__ascii_mbtowc+0x6>
 8009da8:	a901      	add	r1, sp, #4
 8009daa:	b142      	cbz	r2, 8009dbe <__ascii_mbtowc+0x1a>
 8009dac:	b14b      	cbz	r3, 8009dc2 <__ascii_mbtowc+0x1e>
 8009dae:	7813      	ldrb	r3, [r2, #0]
 8009db0:	600b      	str	r3, [r1, #0]
 8009db2:	7812      	ldrb	r2, [r2, #0]
 8009db4:	1e10      	subs	r0, r2, #0
 8009db6:	bf18      	it	ne
 8009db8:	2001      	movne	r0, #1
 8009dba:	b002      	add	sp, #8
 8009dbc:	4770      	bx	lr
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	e7fb      	b.n	8009dba <__ascii_mbtowc+0x16>
 8009dc2:	f06f 0001 	mvn.w	r0, #1
 8009dc6:	e7f8      	b.n	8009dba <__ascii_mbtowc+0x16>

08009dc8 <__malloc_lock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	; (8009dd0 <__malloc_lock+0x8>)
 8009dca:	f7f7 bd68 	b.w	800189e <__retarget_lock_acquire_recursive>
 8009dce:	bf00      	nop
 8009dd0:	20000458 	.word	0x20000458

08009dd4 <__malloc_unlock>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	; (8009ddc <__malloc_unlock+0x8>)
 8009dd6:	f7f7 bd76 	b.w	80018c6 <__retarget_lock_release_recursive>
 8009dda:	bf00      	nop
 8009ddc:	20000458 	.word	0x20000458

08009de0 <_Balloc>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009de4:	4604      	mov	r4, r0
 8009de6:	460d      	mov	r5, r1
 8009de8:	b976      	cbnz	r6, 8009e08 <_Balloc+0x28>
 8009dea:	2010      	movs	r0, #16
 8009dec:	f7fd f894 	bl	8006f18 <malloc>
 8009df0:	4602      	mov	r2, r0
 8009df2:	6260      	str	r0, [r4, #36]	; 0x24
 8009df4:	b920      	cbnz	r0, 8009e00 <_Balloc+0x20>
 8009df6:	4b18      	ldr	r3, [pc, #96]	; (8009e58 <_Balloc+0x78>)
 8009df8:	4818      	ldr	r0, [pc, #96]	; (8009e5c <_Balloc+0x7c>)
 8009dfa:	2166      	movs	r1, #102	; 0x66
 8009dfc:	f000 fe4a 	bl	800aa94 <__assert_func>
 8009e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e04:	6006      	str	r6, [r0, #0]
 8009e06:	60c6      	str	r6, [r0, #12]
 8009e08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e0a:	68f3      	ldr	r3, [r6, #12]
 8009e0c:	b183      	cbz	r3, 8009e30 <_Balloc+0x50>
 8009e0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e16:	b9b8      	cbnz	r0, 8009e48 <_Balloc+0x68>
 8009e18:	2101      	movs	r1, #1
 8009e1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e1e:	1d72      	adds	r2, r6, #5
 8009e20:	0092      	lsls	r2, r2, #2
 8009e22:	4620      	mov	r0, r4
 8009e24:	f000 fc9a 	bl	800a75c <_calloc_r>
 8009e28:	b160      	cbz	r0, 8009e44 <_Balloc+0x64>
 8009e2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e2e:	e00e      	b.n	8009e4e <_Balloc+0x6e>
 8009e30:	2221      	movs	r2, #33	; 0x21
 8009e32:	2104      	movs	r1, #4
 8009e34:	4620      	mov	r0, r4
 8009e36:	f000 fc91 	bl	800a75c <_calloc_r>
 8009e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e3c:	60f0      	str	r0, [r6, #12]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e4      	bne.n	8009e0e <_Balloc+0x2e>
 8009e44:	2000      	movs	r0, #0
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	6802      	ldr	r2, [r0, #0]
 8009e4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e54:	e7f7      	b.n	8009e46 <_Balloc+0x66>
 8009e56:	bf00      	nop
 8009e58:	0800b9f6 	.word	0x0800b9f6
 8009e5c:	0800bb38 	.word	0x0800bb38

08009e60 <_Bfree>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e64:	4605      	mov	r5, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	b976      	cbnz	r6, 8009e88 <_Bfree+0x28>
 8009e6a:	2010      	movs	r0, #16
 8009e6c:	f7fd f854 	bl	8006f18 <malloc>
 8009e70:	4602      	mov	r2, r0
 8009e72:	6268      	str	r0, [r5, #36]	; 0x24
 8009e74:	b920      	cbnz	r0, 8009e80 <_Bfree+0x20>
 8009e76:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <_Bfree+0x3c>)
 8009e78:	4809      	ldr	r0, [pc, #36]	; (8009ea0 <_Bfree+0x40>)
 8009e7a:	218a      	movs	r1, #138	; 0x8a
 8009e7c:	f000 fe0a 	bl	800aa94 <__assert_func>
 8009e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e84:	6006      	str	r6, [r0, #0]
 8009e86:	60c6      	str	r6, [r0, #12]
 8009e88:	b13c      	cbz	r4, 8009e9a <_Bfree+0x3a>
 8009e8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e8c:	6862      	ldr	r2, [r4, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e94:	6021      	str	r1, [r4, #0]
 8009e96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	0800b9f6 	.word	0x0800b9f6
 8009ea0:	0800bb38 	.word	0x0800bb38

08009ea4 <__multadd>:
 8009ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea8:	690d      	ldr	r5, [r1, #16]
 8009eaa:	4607      	mov	r7, r0
 8009eac:	460c      	mov	r4, r1
 8009eae:	461e      	mov	r6, r3
 8009eb0:	f101 0c14 	add.w	ip, r1, #20
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f8dc 3000 	ldr.w	r3, [ip]
 8009eba:	b299      	uxth	r1, r3
 8009ebc:	fb02 6101 	mla	r1, r2, r1, r6
 8009ec0:	0c1e      	lsrs	r6, r3, #16
 8009ec2:	0c0b      	lsrs	r3, r1, #16
 8009ec4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ec8:	b289      	uxth	r1, r1
 8009eca:	3001      	adds	r0, #1
 8009ecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ed0:	4285      	cmp	r5, r0
 8009ed2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009eda:	dcec      	bgt.n	8009eb6 <__multadd+0x12>
 8009edc:	b30e      	cbz	r6, 8009f22 <__multadd+0x7e>
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	42ab      	cmp	r3, r5
 8009ee2:	dc19      	bgt.n	8009f18 <__multadd+0x74>
 8009ee4:	6861      	ldr	r1, [r4, #4]
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	3101      	adds	r1, #1
 8009eea:	f7ff ff79 	bl	8009de0 <_Balloc>
 8009eee:	4680      	mov	r8, r0
 8009ef0:	b928      	cbnz	r0, 8009efe <__multadd+0x5a>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <__multadd+0x84>)
 8009ef6:	480d      	ldr	r0, [pc, #52]	; (8009f2c <__multadd+0x88>)
 8009ef8:	21b5      	movs	r1, #181	; 0xb5
 8009efa:	f000 fdcb 	bl	800aa94 <__assert_func>
 8009efe:	6922      	ldr	r2, [r4, #16]
 8009f00:	3202      	adds	r2, #2
 8009f02:	f104 010c 	add.w	r1, r4, #12
 8009f06:	0092      	lsls	r2, r2, #2
 8009f08:	300c      	adds	r0, #12
 8009f0a:	f7fd f80d 	bl	8006f28 <memcpy>
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff ffa5 	bl	8009e60 <_Bfree>
 8009f16:	4644      	mov	r4, r8
 8009f18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	615e      	str	r6, [r3, #20]
 8009f20:	6125      	str	r5, [r4, #16]
 8009f22:	4620      	mov	r0, r4
 8009f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f28:	0800ba8b 	.word	0x0800ba8b
 8009f2c:	0800bb38 	.word	0x0800bb38

08009f30 <__s2b>:
 8009f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f34:	460c      	mov	r4, r1
 8009f36:	4615      	mov	r5, r2
 8009f38:	461f      	mov	r7, r3
 8009f3a:	2209      	movs	r2, #9
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	4606      	mov	r6, r0
 8009f40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f44:	2100      	movs	r1, #0
 8009f46:	2201      	movs	r2, #1
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	db09      	blt.n	8009f60 <__s2b+0x30>
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff ff47 	bl	8009de0 <_Balloc>
 8009f52:	b940      	cbnz	r0, 8009f66 <__s2b+0x36>
 8009f54:	4602      	mov	r2, r0
 8009f56:	4b19      	ldr	r3, [pc, #100]	; (8009fbc <__s2b+0x8c>)
 8009f58:	4819      	ldr	r0, [pc, #100]	; (8009fc0 <__s2b+0x90>)
 8009f5a:	21ce      	movs	r1, #206	; 0xce
 8009f5c:	f000 fd9a 	bl	800aa94 <__assert_func>
 8009f60:	0052      	lsls	r2, r2, #1
 8009f62:	3101      	adds	r1, #1
 8009f64:	e7f0      	b.n	8009f48 <__s2b+0x18>
 8009f66:	9b08      	ldr	r3, [sp, #32]
 8009f68:	6143      	str	r3, [r0, #20]
 8009f6a:	2d09      	cmp	r5, #9
 8009f6c:	f04f 0301 	mov.w	r3, #1
 8009f70:	6103      	str	r3, [r0, #16]
 8009f72:	dd16      	ble.n	8009fa2 <__s2b+0x72>
 8009f74:	f104 0909 	add.w	r9, r4, #9
 8009f78:	46c8      	mov	r8, r9
 8009f7a:	442c      	add	r4, r5
 8009f7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f80:	4601      	mov	r1, r0
 8009f82:	3b30      	subs	r3, #48	; 0x30
 8009f84:	220a      	movs	r2, #10
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7ff ff8c 	bl	8009ea4 <__multadd>
 8009f8c:	45a0      	cmp	r8, r4
 8009f8e:	d1f5      	bne.n	8009f7c <__s2b+0x4c>
 8009f90:	f1a5 0408 	sub.w	r4, r5, #8
 8009f94:	444c      	add	r4, r9
 8009f96:	1b2d      	subs	r5, r5, r4
 8009f98:	1963      	adds	r3, r4, r5
 8009f9a:	42bb      	cmp	r3, r7
 8009f9c:	db04      	blt.n	8009fa8 <__s2b+0x78>
 8009f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa2:	340a      	adds	r4, #10
 8009fa4:	2509      	movs	r5, #9
 8009fa6:	e7f6      	b.n	8009f96 <__s2b+0x66>
 8009fa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fac:	4601      	mov	r1, r0
 8009fae:	3b30      	subs	r3, #48	; 0x30
 8009fb0:	220a      	movs	r2, #10
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7ff ff76 	bl	8009ea4 <__multadd>
 8009fb8:	e7ee      	b.n	8009f98 <__s2b+0x68>
 8009fba:	bf00      	nop
 8009fbc:	0800ba8b 	.word	0x0800ba8b
 8009fc0:	0800bb38 	.word	0x0800bb38

08009fc4 <__hi0bits>:
 8009fc4:	0c03      	lsrs	r3, r0, #16
 8009fc6:	041b      	lsls	r3, r3, #16
 8009fc8:	b9d3      	cbnz	r3, 800a000 <__hi0bits+0x3c>
 8009fca:	0400      	lsls	r0, r0, #16
 8009fcc:	2310      	movs	r3, #16
 8009fce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009fd2:	bf04      	itt	eq
 8009fd4:	0200      	lsleq	r0, r0, #8
 8009fd6:	3308      	addeq	r3, #8
 8009fd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009fdc:	bf04      	itt	eq
 8009fde:	0100      	lsleq	r0, r0, #4
 8009fe0:	3304      	addeq	r3, #4
 8009fe2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009fe6:	bf04      	itt	eq
 8009fe8:	0080      	lsleq	r0, r0, #2
 8009fea:	3302      	addeq	r3, #2
 8009fec:	2800      	cmp	r0, #0
 8009fee:	db05      	blt.n	8009ffc <__hi0bits+0x38>
 8009ff0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ff4:	f103 0301 	add.w	r3, r3, #1
 8009ff8:	bf08      	it	eq
 8009ffa:	2320      	moveq	r3, #32
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	4770      	bx	lr
 800a000:	2300      	movs	r3, #0
 800a002:	e7e4      	b.n	8009fce <__hi0bits+0xa>

0800a004 <__lo0bits>:
 800a004:	6803      	ldr	r3, [r0, #0]
 800a006:	f013 0207 	ands.w	r2, r3, #7
 800a00a:	4601      	mov	r1, r0
 800a00c:	d00b      	beq.n	800a026 <__lo0bits+0x22>
 800a00e:	07da      	lsls	r2, r3, #31
 800a010:	d423      	bmi.n	800a05a <__lo0bits+0x56>
 800a012:	0798      	lsls	r0, r3, #30
 800a014:	bf49      	itett	mi
 800a016:	085b      	lsrmi	r3, r3, #1
 800a018:	089b      	lsrpl	r3, r3, #2
 800a01a:	2001      	movmi	r0, #1
 800a01c:	600b      	strmi	r3, [r1, #0]
 800a01e:	bf5c      	itt	pl
 800a020:	600b      	strpl	r3, [r1, #0]
 800a022:	2002      	movpl	r0, #2
 800a024:	4770      	bx	lr
 800a026:	b298      	uxth	r0, r3
 800a028:	b9a8      	cbnz	r0, 800a056 <__lo0bits+0x52>
 800a02a:	0c1b      	lsrs	r3, r3, #16
 800a02c:	2010      	movs	r0, #16
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	b90a      	cbnz	r2, 800a036 <__lo0bits+0x32>
 800a032:	3008      	adds	r0, #8
 800a034:	0a1b      	lsrs	r3, r3, #8
 800a036:	071a      	lsls	r2, r3, #28
 800a038:	bf04      	itt	eq
 800a03a:	091b      	lsreq	r3, r3, #4
 800a03c:	3004      	addeq	r0, #4
 800a03e:	079a      	lsls	r2, r3, #30
 800a040:	bf04      	itt	eq
 800a042:	089b      	lsreq	r3, r3, #2
 800a044:	3002      	addeq	r0, #2
 800a046:	07da      	lsls	r2, r3, #31
 800a048:	d403      	bmi.n	800a052 <__lo0bits+0x4e>
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	f100 0001 	add.w	r0, r0, #1
 800a050:	d005      	beq.n	800a05e <__lo0bits+0x5a>
 800a052:	600b      	str	r3, [r1, #0]
 800a054:	4770      	bx	lr
 800a056:	4610      	mov	r0, r2
 800a058:	e7e9      	b.n	800a02e <__lo0bits+0x2a>
 800a05a:	2000      	movs	r0, #0
 800a05c:	4770      	bx	lr
 800a05e:	2020      	movs	r0, #32
 800a060:	4770      	bx	lr
	...

0800a064 <__i2b>:
 800a064:	b510      	push	{r4, lr}
 800a066:	460c      	mov	r4, r1
 800a068:	2101      	movs	r1, #1
 800a06a:	f7ff feb9 	bl	8009de0 <_Balloc>
 800a06e:	4602      	mov	r2, r0
 800a070:	b928      	cbnz	r0, 800a07e <__i2b+0x1a>
 800a072:	4b05      	ldr	r3, [pc, #20]	; (800a088 <__i2b+0x24>)
 800a074:	4805      	ldr	r0, [pc, #20]	; (800a08c <__i2b+0x28>)
 800a076:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a07a:	f000 fd0b 	bl	800aa94 <__assert_func>
 800a07e:	2301      	movs	r3, #1
 800a080:	6144      	str	r4, [r0, #20]
 800a082:	6103      	str	r3, [r0, #16]
 800a084:	bd10      	pop	{r4, pc}
 800a086:	bf00      	nop
 800a088:	0800ba8b 	.word	0x0800ba8b
 800a08c:	0800bb38 	.word	0x0800bb38

0800a090 <__multiply>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	4691      	mov	r9, r2
 800a096:	690a      	ldr	r2, [r1, #16]
 800a098:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	bfb8      	it	lt
 800a0a0:	460b      	movlt	r3, r1
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	bfbc      	itt	lt
 800a0a6:	464c      	movlt	r4, r9
 800a0a8:	4699      	movlt	r9, r3
 800a0aa:	6927      	ldr	r7, [r4, #16]
 800a0ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a0b0:	68a3      	ldr	r3, [r4, #8]
 800a0b2:	6861      	ldr	r1, [r4, #4]
 800a0b4:	eb07 060a 	add.w	r6, r7, sl
 800a0b8:	42b3      	cmp	r3, r6
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	bfb8      	it	lt
 800a0be:	3101      	addlt	r1, #1
 800a0c0:	f7ff fe8e 	bl	8009de0 <_Balloc>
 800a0c4:	b930      	cbnz	r0, 800a0d4 <__multiply+0x44>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	4b44      	ldr	r3, [pc, #272]	; (800a1dc <__multiply+0x14c>)
 800a0ca:	4845      	ldr	r0, [pc, #276]	; (800a1e0 <__multiply+0x150>)
 800a0cc:	f240 115d 	movw	r1, #349	; 0x15d
 800a0d0:	f000 fce0 	bl	800aa94 <__assert_func>
 800a0d4:	f100 0514 	add.w	r5, r0, #20
 800a0d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0dc:	462b      	mov	r3, r5
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4543      	cmp	r3, r8
 800a0e2:	d321      	bcc.n	800a128 <__multiply+0x98>
 800a0e4:	f104 0314 	add.w	r3, r4, #20
 800a0e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a0ec:	f109 0314 	add.w	r3, r9, #20
 800a0f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a0f4:	9202      	str	r2, [sp, #8]
 800a0f6:	1b3a      	subs	r2, r7, r4
 800a0f8:	3a15      	subs	r2, #21
 800a0fa:	f022 0203 	bic.w	r2, r2, #3
 800a0fe:	3204      	adds	r2, #4
 800a100:	f104 0115 	add.w	r1, r4, #21
 800a104:	428f      	cmp	r7, r1
 800a106:	bf38      	it	cc
 800a108:	2204      	movcc	r2, #4
 800a10a:	9201      	str	r2, [sp, #4]
 800a10c:	9a02      	ldr	r2, [sp, #8]
 800a10e:	9303      	str	r3, [sp, #12]
 800a110:	429a      	cmp	r2, r3
 800a112:	d80c      	bhi.n	800a12e <__multiply+0x9e>
 800a114:	2e00      	cmp	r6, #0
 800a116:	dd03      	ble.n	800a120 <__multiply+0x90>
 800a118:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d05a      	beq.n	800a1d6 <__multiply+0x146>
 800a120:	6106      	str	r6, [r0, #16]
 800a122:	b005      	add	sp, #20
 800a124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a128:	f843 2b04 	str.w	r2, [r3], #4
 800a12c:	e7d8      	b.n	800a0e0 <__multiply+0x50>
 800a12e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a132:	f1ba 0f00 	cmp.w	sl, #0
 800a136:	d024      	beq.n	800a182 <__multiply+0xf2>
 800a138:	f104 0e14 	add.w	lr, r4, #20
 800a13c:	46a9      	mov	r9, r5
 800a13e:	f04f 0c00 	mov.w	ip, #0
 800a142:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a146:	f8d9 1000 	ldr.w	r1, [r9]
 800a14a:	fa1f fb82 	uxth.w	fp, r2
 800a14e:	b289      	uxth	r1, r1
 800a150:	fb0a 110b 	mla	r1, sl, fp, r1
 800a154:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a158:	f8d9 2000 	ldr.w	r2, [r9]
 800a15c:	4461      	add	r1, ip
 800a15e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a162:	fb0a c20b 	mla	r2, sl, fp, ip
 800a166:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a16a:	b289      	uxth	r1, r1
 800a16c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a170:	4577      	cmp	r7, lr
 800a172:	f849 1b04 	str.w	r1, [r9], #4
 800a176:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a17a:	d8e2      	bhi.n	800a142 <__multiply+0xb2>
 800a17c:	9a01      	ldr	r2, [sp, #4]
 800a17e:	f845 c002 	str.w	ip, [r5, r2]
 800a182:	9a03      	ldr	r2, [sp, #12]
 800a184:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a188:	3304      	adds	r3, #4
 800a18a:	f1b9 0f00 	cmp.w	r9, #0
 800a18e:	d020      	beq.n	800a1d2 <__multiply+0x142>
 800a190:	6829      	ldr	r1, [r5, #0]
 800a192:	f104 0c14 	add.w	ip, r4, #20
 800a196:	46ae      	mov	lr, r5
 800a198:	f04f 0a00 	mov.w	sl, #0
 800a19c:	f8bc b000 	ldrh.w	fp, [ip]
 800a1a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a1a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a1a8:	4492      	add	sl, r2
 800a1aa:	b289      	uxth	r1, r1
 800a1ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a1b0:	f84e 1b04 	str.w	r1, [lr], #4
 800a1b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a1b8:	f8be 1000 	ldrh.w	r1, [lr]
 800a1bc:	0c12      	lsrs	r2, r2, #16
 800a1be:	fb09 1102 	mla	r1, r9, r2, r1
 800a1c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a1c6:	4567      	cmp	r7, ip
 800a1c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a1cc:	d8e6      	bhi.n	800a19c <__multiply+0x10c>
 800a1ce:	9a01      	ldr	r2, [sp, #4]
 800a1d0:	50a9      	str	r1, [r5, r2]
 800a1d2:	3504      	adds	r5, #4
 800a1d4:	e79a      	b.n	800a10c <__multiply+0x7c>
 800a1d6:	3e01      	subs	r6, #1
 800a1d8:	e79c      	b.n	800a114 <__multiply+0x84>
 800a1da:	bf00      	nop
 800a1dc:	0800ba8b 	.word	0x0800ba8b
 800a1e0:	0800bb38 	.word	0x0800bb38

0800a1e4 <__pow5mult>:
 800a1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e8:	4615      	mov	r5, r2
 800a1ea:	f012 0203 	ands.w	r2, r2, #3
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460f      	mov	r7, r1
 800a1f2:	d007      	beq.n	800a204 <__pow5mult+0x20>
 800a1f4:	4c25      	ldr	r4, [pc, #148]	; (800a28c <__pow5mult+0xa8>)
 800a1f6:	3a01      	subs	r2, #1
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1fe:	f7ff fe51 	bl	8009ea4 <__multadd>
 800a202:	4607      	mov	r7, r0
 800a204:	10ad      	asrs	r5, r5, #2
 800a206:	d03d      	beq.n	800a284 <__pow5mult+0xa0>
 800a208:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a20a:	b97c      	cbnz	r4, 800a22c <__pow5mult+0x48>
 800a20c:	2010      	movs	r0, #16
 800a20e:	f7fc fe83 	bl	8006f18 <malloc>
 800a212:	4602      	mov	r2, r0
 800a214:	6270      	str	r0, [r6, #36]	; 0x24
 800a216:	b928      	cbnz	r0, 800a224 <__pow5mult+0x40>
 800a218:	4b1d      	ldr	r3, [pc, #116]	; (800a290 <__pow5mult+0xac>)
 800a21a:	481e      	ldr	r0, [pc, #120]	; (800a294 <__pow5mult+0xb0>)
 800a21c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a220:	f000 fc38 	bl	800aa94 <__assert_func>
 800a224:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a228:	6004      	str	r4, [r0, #0]
 800a22a:	60c4      	str	r4, [r0, #12]
 800a22c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a234:	b94c      	cbnz	r4, 800a24a <__pow5mult+0x66>
 800a236:	f240 2171 	movw	r1, #625	; 0x271
 800a23a:	4630      	mov	r0, r6
 800a23c:	f7ff ff12 	bl	800a064 <__i2b>
 800a240:	2300      	movs	r3, #0
 800a242:	f8c8 0008 	str.w	r0, [r8, #8]
 800a246:	4604      	mov	r4, r0
 800a248:	6003      	str	r3, [r0, #0]
 800a24a:	f04f 0900 	mov.w	r9, #0
 800a24e:	07eb      	lsls	r3, r5, #31
 800a250:	d50a      	bpl.n	800a268 <__pow5mult+0x84>
 800a252:	4639      	mov	r1, r7
 800a254:	4622      	mov	r2, r4
 800a256:	4630      	mov	r0, r6
 800a258:	f7ff ff1a 	bl	800a090 <__multiply>
 800a25c:	4639      	mov	r1, r7
 800a25e:	4680      	mov	r8, r0
 800a260:	4630      	mov	r0, r6
 800a262:	f7ff fdfd 	bl	8009e60 <_Bfree>
 800a266:	4647      	mov	r7, r8
 800a268:	106d      	asrs	r5, r5, #1
 800a26a:	d00b      	beq.n	800a284 <__pow5mult+0xa0>
 800a26c:	6820      	ldr	r0, [r4, #0]
 800a26e:	b938      	cbnz	r0, 800a280 <__pow5mult+0x9c>
 800a270:	4622      	mov	r2, r4
 800a272:	4621      	mov	r1, r4
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff ff0b 	bl	800a090 <__multiply>
 800a27a:	6020      	str	r0, [r4, #0]
 800a27c:	f8c0 9000 	str.w	r9, [r0]
 800a280:	4604      	mov	r4, r0
 800a282:	e7e4      	b.n	800a24e <__pow5mult+0x6a>
 800a284:	4638      	mov	r0, r7
 800a286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a28a:	bf00      	nop
 800a28c:	0800bca8 	.word	0x0800bca8
 800a290:	0800b9f6 	.word	0x0800b9f6
 800a294:	0800bb38 	.word	0x0800bb38

0800a298 <__lshift>:
 800a298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a29c:	460c      	mov	r4, r1
 800a29e:	6849      	ldr	r1, [r1, #4]
 800a2a0:	6923      	ldr	r3, [r4, #16]
 800a2a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2a6:	68a3      	ldr	r3, [r4, #8]
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	4691      	mov	r9, r2
 800a2ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2b0:	f108 0601 	add.w	r6, r8, #1
 800a2b4:	42b3      	cmp	r3, r6
 800a2b6:	db0b      	blt.n	800a2d0 <__lshift+0x38>
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f7ff fd91 	bl	8009de0 <_Balloc>
 800a2be:	4605      	mov	r5, r0
 800a2c0:	b948      	cbnz	r0, 800a2d6 <__lshift+0x3e>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	4b2a      	ldr	r3, [pc, #168]	; (800a370 <__lshift+0xd8>)
 800a2c6:	482b      	ldr	r0, [pc, #172]	; (800a374 <__lshift+0xdc>)
 800a2c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a2cc:	f000 fbe2 	bl	800aa94 <__assert_func>
 800a2d0:	3101      	adds	r1, #1
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	e7ee      	b.n	800a2b4 <__lshift+0x1c>
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	f100 0114 	add.w	r1, r0, #20
 800a2dc:	f100 0210 	add.w	r2, r0, #16
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	4553      	cmp	r3, sl
 800a2e4:	db37      	blt.n	800a356 <__lshift+0xbe>
 800a2e6:	6920      	ldr	r0, [r4, #16]
 800a2e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2ec:	f104 0314 	add.w	r3, r4, #20
 800a2f0:	f019 091f 	ands.w	r9, r9, #31
 800a2f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a2fc:	d02f      	beq.n	800a35e <__lshift+0xc6>
 800a2fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a302:	468a      	mov	sl, r1
 800a304:	f04f 0c00 	mov.w	ip, #0
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	fa02 f209 	lsl.w	r2, r2, r9
 800a30e:	ea42 020c 	orr.w	r2, r2, ip
 800a312:	f84a 2b04 	str.w	r2, [sl], #4
 800a316:	f853 2b04 	ldr.w	r2, [r3], #4
 800a31a:	4298      	cmp	r0, r3
 800a31c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a320:	d8f2      	bhi.n	800a308 <__lshift+0x70>
 800a322:	1b03      	subs	r3, r0, r4
 800a324:	3b15      	subs	r3, #21
 800a326:	f023 0303 	bic.w	r3, r3, #3
 800a32a:	3304      	adds	r3, #4
 800a32c:	f104 0215 	add.w	r2, r4, #21
 800a330:	4290      	cmp	r0, r2
 800a332:	bf38      	it	cc
 800a334:	2304      	movcc	r3, #4
 800a336:	f841 c003 	str.w	ip, [r1, r3]
 800a33a:	f1bc 0f00 	cmp.w	ip, #0
 800a33e:	d001      	beq.n	800a344 <__lshift+0xac>
 800a340:	f108 0602 	add.w	r6, r8, #2
 800a344:	3e01      	subs	r6, #1
 800a346:	4638      	mov	r0, r7
 800a348:	612e      	str	r6, [r5, #16]
 800a34a:	4621      	mov	r1, r4
 800a34c:	f7ff fd88 	bl	8009e60 <_Bfree>
 800a350:	4628      	mov	r0, r5
 800a352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a356:	f842 0f04 	str.w	r0, [r2, #4]!
 800a35a:	3301      	adds	r3, #1
 800a35c:	e7c1      	b.n	800a2e2 <__lshift+0x4a>
 800a35e:	3904      	subs	r1, #4
 800a360:	f853 2b04 	ldr.w	r2, [r3], #4
 800a364:	f841 2f04 	str.w	r2, [r1, #4]!
 800a368:	4298      	cmp	r0, r3
 800a36a:	d8f9      	bhi.n	800a360 <__lshift+0xc8>
 800a36c:	e7ea      	b.n	800a344 <__lshift+0xac>
 800a36e:	bf00      	nop
 800a370:	0800ba8b 	.word	0x0800ba8b
 800a374:	0800bb38 	.word	0x0800bb38

0800a378 <__mcmp>:
 800a378:	b530      	push	{r4, r5, lr}
 800a37a:	6902      	ldr	r2, [r0, #16]
 800a37c:	690c      	ldr	r4, [r1, #16]
 800a37e:	1b12      	subs	r2, r2, r4
 800a380:	d10e      	bne.n	800a3a0 <__mcmp+0x28>
 800a382:	f100 0314 	add.w	r3, r0, #20
 800a386:	3114      	adds	r1, #20
 800a388:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a38c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a390:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a394:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a398:	42a5      	cmp	r5, r4
 800a39a:	d003      	beq.n	800a3a4 <__mcmp+0x2c>
 800a39c:	d305      	bcc.n	800a3aa <__mcmp+0x32>
 800a39e:	2201      	movs	r2, #1
 800a3a0:	4610      	mov	r0, r2
 800a3a2:	bd30      	pop	{r4, r5, pc}
 800a3a4:	4283      	cmp	r3, r0
 800a3a6:	d3f3      	bcc.n	800a390 <__mcmp+0x18>
 800a3a8:	e7fa      	b.n	800a3a0 <__mcmp+0x28>
 800a3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a3ae:	e7f7      	b.n	800a3a0 <__mcmp+0x28>

0800a3b0 <__mdiff>:
 800a3b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	4611      	mov	r1, r2
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	4690      	mov	r8, r2
 800a3be:	f7ff ffdb 	bl	800a378 <__mcmp>
 800a3c2:	1e05      	subs	r5, r0, #0
 800a3c4:	d110      	bne.n	800a3e8 <__mdiff+0x38>
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f7ff fd09 	bl	8009de0 <_Balloc>
 800a3ce:	b930      	cbnz	r0, 800a3de <__mdiff+0x2e>
 800a3d0:	4b3a      	ldr	r3, [pc, #232]	; (800a4bc <__mdiff+0x10c>)
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	f240 2132 	movw	r1, #562	; 0x232
 800a3d8:	4839      	ldr	r0, [pc, #228]	; (800a4c0 <__mdiff+0x110>)
 800a3da:	f000 fb5b 	bl	800aa94 <__assert_func>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e8:	bfa4      	itt	ge
 800a3ea:	4643      	movge	r3, r8
 800a3ec:	46a0      	movge	r8, r4
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a3f4:	bfa6      	itte	ge
 800a3f6:	461c      	movge	r4, r3
 800a3f8:	2500      	movge	r5, #0
 800a3fa:	2501      	movlt	r5, #1
 800a3fc:	f7ff fcf0 	bl	8009de0 <_Balloc>
 800a400:	b920      	cbnz	r0, 800a40c <__mdiff+0x5c>
 800a402:	4b2e      	ldr	r3, [pc, #184]	; (800a4bc <__mdiff+0x10c>)
 800a404:	4602      	mov	r2, r0
 800a406:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a40a:	e7e5      	b.n	800a3d8 <__mdiff+0x28>
 800a40c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a410:	6926      	ldr	r6, [r4, #16]
 800a412:	60c5      	str	r5, [r0, #12]
 800a414:	f104 0914 	add.w	r9, r4, #20
 800a418:	f108 0514 	add.w	r5, r8, #20
 800a41c:	f100 0e14 	add.w	lr, r0, #20
 800a420:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a424:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a428:	f108 0210 	add.w	r2, r8, #16
 800a42c:	46f2      	mov	sl, lr
 800a42e:	2100      	movs	r1, #0
 800a430:	f859 3b04 	ldr.w	r3, [r9], #4
 800a434:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a438:	fa1f f883 	uxth.w	r8, r3
 800a43c:	fa11 f18b 	uxtah	r1, r1, fp
 800a440:	0c1b      	lsrs	r3, r3, #16
 800a442:	eba1 0808 	sub.w	r8, r1, r8
 800a446:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a44a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a44e:	fa1f f888 	uxth.w	r8, r8
 800a452:	1419      	asrs	r1, r3, #16
 800a454:	454e      	cmp	r6, r9
 800a456:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a45a:	f84a 3b04 	str.w	r3, [sl], #4
 800a45e:	d8e7      	bhi.n	800a430 <__mdiff+0x80>
 800a460:	1b33      	subs	r3, r6, r4
 800a462:	3b15      	subs	r3, #21
 800a464:	f023 0303 	bic.w	r3, r3, #3
 800a468:	3304      	adds	r3, #4
 800a46a:	3415      	adds	r4, #21
 800a46c:	42a6      	cmp	r6, r4
 800a46e:	bf38      	it	cc
 800a470:	2304      	movcc	r3, #4
 800a472:	441d      	add	r5, r3
 800a474:	4473      	add	r3, lr
 800a476:	469e      	mov	lr, r3
 800a478:	462e      	mov	r6, r5
 800a47a:	4566      	cmp	r6, ip
 800a47c:	d30e      	bcc.n	800a49c <__mdiff+0xec>
 800a47e:	f10c 0203 	add.w	r2, ip, #3
 800a482:	1b52      	subs	r2, r2, r5
 800a484:	f022 0203 	bic.w	r2, r2, #3
 800a488:	3d03      	subs	r5, #3
 800a48a:	45ac      	cmp	ip, r5
 800a48c:	bf38      	it	cc
 800a48e:	2200      	movcc	r2, #0
 800a490:	441a      	add	r2, r3
 800a492:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a496:	b17b      	cbz	r3, 800a4b8 <__mdiff+0x108>
 800a498:	6107      	str	r7, [r0, #16]
 800a49a:	e7a3      	b.n	800a3e4 <__mdiff+0x34>
 800a49c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a4a0:	fa11 f288 	uxtah	r2, r1, r8
 800a4a4:	1414      	asrs	r4, r2, #16
 800a4a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a4aa:	b292      	uxth	r2, r2
 800a4ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a4b0:	f84e 2b04 	str.w	r2, [lr], #4
 800a4b4:	1421      	asrs	r1, r4, #16
 800a4b6:	e7e0      	b.n	800a47a <__mdiff+0xca>
 800a4b8:	3f01      	subs	r7, #1
 800a4ba:	e7ea      	b.n	800a492 <__mdiff+0xe2>
 800a4bc:	0800ba8b 	.word	0x0800ba8b
 800a4c0:	0800bb38 	.word	0x0800bb38

0800a4c4 <__ulp>:
 800a4c4:	b082      	sub	sp, #8
 800a4c6:	ed8d 0b00 	vstr	d0, [sp]
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	4912      	ldr	r1, [pc, #72]	; (800a518 <__ulp+0x54>)
 800a4ce:	4019      	ands	r1, r3
 800a4d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	dd05      	ble.n	800a4e4 <__ulp+0x20>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	ec43 2b10 	vmov	d0, r2, r3
 800a4e0:	b002      	add	sp, #8
 800a4e2:	4770      	bx	lr
 800a4e4:	4249      	negs	r1, r1
 800a4e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a4ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a4ee:	f04f 0200 	mov.w	r2, #0
 800a4f2:	f04f 0300 	mov.w	r3, #0
 800a4f6:	da04      	bge.n	800a502 <__ulp+0x3e>
 800a4f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a4fc:	fa41 f300 	asr.w	r3, r1, r0
 800a500:	e7ec      	b.n	800a4dc <__ulp+0x18>
 800a502:	f1a0 0114 	sub.w	r1, r0, #20
 800a506:	291e      	cmp	r1, #30
 800a508:	bfda      	itte	le
 800a50a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a50e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a512:	2101      	movgt	r1, #1
 800a514:	460a      	mov	r2, r1
 800a516:	e7e1      	b.n	800a4dc <__ulp+0x18>
 800a518:	7ff00000 	.word	0x7ff00000

0800a51c <__b2d>:
 800a51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51e:	6905      	ldr	r5, [r0, #16]
 800a520:	f100 0714 	add.w	r7, r0, #20
 800a524:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a528:	1f2e      	subs	r6, r5, #4
 800a52a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a52e:	4620      	mov	r0, r4
 800a530:	f7ff fd48 	bl	8009fc4 <__hi0bits>
 800a534:	f1c0 0320 	rsb	r3, r0, #32
 800a538:	280a      	cmp	r0, #10
 800a53a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a5b8 <__b2d+0x9c>
 800a53e:	600b      	str	r3, [r1, #0]
 800a540:	dc14      	bgt.n	800a56c <__b2d+0x50>
 800a542:	f1c0 0e0b 	rsb	lr, r0, #11
 800a546:	fa24 f10e 	lsr.w	r1, r4, lr
 800a54a:	42b7      	cmp	r7, r6
 800a54c:	ea41 030c 	orr.w	r3, r1, ip
 800a550:	bf34      	ite	cc
 800a552:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a556:	2100      	movcs	r1, #0
 800a558:	3015      	adds	r0, #21
 800a55a:	fa04 f000 	lsl.w	r0, r4, r0
 800a55e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a562:	ea40 0201 	orr.w	r2, r0, r1
 800a566:	ec43 2b10 	vmov	d0, r2, r3
 800a56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a56c:	42b7      	cmp	r7, r6
 800a56e:	bf3a      	itte	cc
 800a570:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a574:	f1a5 0608 	subcc.w	r6, r5, #8
 800a578:	2100      	movcs	r1, #0
 800a57a:	380b      	subs	r0, #11
 800a57c:	d017      	beq.n	800a5ae <__b2d+0x92>
 800a57e:	f1c0 0c20 	rsb	ip, r0, #32
 800a582:	fa04 f500 	lsl.w	r5, r4, r0
 800a586:	42be      	cmp	r6, r7
 800a588:	fa21 f40c 	lsr.w	r4, r1, ip
 800a58c:	ea45 0504 	orr.w	r5, r5, r4
 800a590:	bf8c      	ite	hi
 800a592:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a596:	2400      	movls	r4, #0
 800a598:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a59c:	fa01 f000 	lsl.w	r0, r1, r0
 800a5a0:	fa24 f40c 	lsr.w	r4, r4, ip
 800a5a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a5a8:	ea40 0204 	orr.w	r2, r0, r4
 800a5ac:	e7db      	b.n	800a566 <__b2d+0x4a>
 800a5ae:	ea44 030c 	orr.w	r3, r4, ip
 800a5b2:	460a      	mov	r2, r1
 800a5b4:	e7d7      	b.n	800a566 <__b2d+0x4a>
 800a5b6:	bf00      	nop
 800a5b8:	3ff00000 	.word	0x3ff00000

0800a5bc <__d2b>:
 800a5bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5c0:	4689      	mov	r9, r1
 800a5c2:	2101      	movs	r1, #1
 800a5c4:	ec57 6b10 	vmov	r6, r7, d0
 800a5c8:	4690      	mov	r8, r2
 800a5ca:	f7ff fc09 	bl	8009de0 <_Balloc>
 800a5ce:	4604      	mov	r4, r0
 800a5d0:	b930      	cbnz	r0, 800a5e0 <__d2b+0x24>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b25      	ldr	r3, [pc, #148]	; (800a66c <__d2b+0xb0>)
 800a5d6:	4826      	ldr	r0, [pc, #152]	; (800a670 <__d2b+0xb4>)
 800a5d8:	f240 310a 	movw	r1, #778	; 0x30a
 800a5dc:	f000 fa5a 	bl	800aa94 <__assert_func>
 800a5e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a5e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5e8:	bb35      	cbnz	r5, 800a638 <__d2b+0x7c>
 800a5ea:	2e00      	cmp	r6, #0
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	d028      	beq.n	800a642 <__d2b+0x86>
 800a5f0:	4668      	mov	r0, sp
 800a5f2:	9600      	str	r6, [sp, #0]
 800a5f4:	f7ff fd06 	bl	800a004 <__lo0bits>
 800a5f8:	9900      	ldr	r1, [sp, #0]
 800a5fa:	b300      	cbz	r0, 800a63e <__d2b+0x82>
 800a5fc:	9a01      	ldr	r2, [sp, #4]
 800a5fe:	f1c0 0320 	rsb	r3, r0, #32
 800a602:	fa02 f303 	lsl.w	r3, r2, r3
 800a606:	430b      	orrs	r3, r1
 800a608:	40c2      	lsrs	r2, r0
 800a60a:	6163      	str	r3, [r4, #20]
 800a60c:	9201      	str	r2, [sp, #4]
 800a60e:	9b01      	ldr	r3, [sp, #4]
 800a610:	61a3      	str	r3, [r4, #24]
 800a612:	2b00      	cmp	r3, #0
 800a614:	bf14      	ite	ne
 800a616:	2202      	movne	r2, #2
 800a618:	2201      	moveq	r2, #1
 800a61a:	6122      	str	r2, [r4, #16]
 800a61c:	b1d5      	cbz	r5, 800a654 <__d2b+0x98>
 800a61e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a622:	4405      	add	r5, r0
 800a624:	f8c9 5000 	str.w	r5, [r9]
 800a628:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a62c:	f8c8 0000 	str.w	r0, [r8]
 800a630:	4620      	mov	r0, r4
 800a632:	b003      	add	sp, #12
 800a634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a63c:	e7d5      	b.n	800a5ea <__d2b+0x2e>
 800a63e:	6161      	str	r1, [r4, #20]
 800a640:	e7e5      	b.n	800a60e <__d2b+0x52>
 800a642:	a801      	add	r0, sp, #4
 800a644:	f7ff fcde 	bl	800a004 <__lo0bits>
 800a648:	9b01      	ldr	r3, [sp, #4]
 800a64a:	6163      	str	r3, [r4, #20]
 800a64c:	2201      	movs	r2, #1
 800a64e:	6122      	str	r2, [r4, #16]
 800a650:	3020      	adds	r0, #32
 800a652:	e7e3      	b.n	800a61c <__d2b+0x60>
 800a654:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a65c:	f8c9 0000 	str.w	r0, [r9]
 800a660:	6918      	ldr	r0, [r3, #16]
 800a662:	f7ff fcaf 	bl	8009fc4 <__hi0bits>
 800a666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a66a:	e7df      	b.n	800a62c <__d2b+0x70>
 800a66c:	0800ba8b 	.word	0x0800ba8b
 800a670:	0800bb38 	.word	0x0800bb38

0800a674 <__ratio>:
 800a674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	4688      	mov	r8, r1
 800a67a:	4669      	mov	r1, sp
 800a67c:	4681      	mov	r9, r0
 800a67e:	f7ff ff4d 	bl	800a51c <__b2d>
 800a682:	a901      	add	r1, sp, #4
 800a684:	4640      	mov	r0, r8
 800a686:	ec55 4b10 	vmov	r4, r5, d0
 800a68a:	ee10 aa10 	vmov	sl, s0
 800a68e:	f7ff ff45 	bl	800a51c <__b2d>
 800a692:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a696:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800a69a:	1a59      	subs	r1, r3, r1
 800a69c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a6a6:	ec57 6b10 	vmov	r6, r7, d0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	bfd6      	itet	le
 800a6ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a6b2:	462a      	movgt	r2, r5
 800a6b4:	463a      	movle	r2, r7
 800a6b6:	46ab      	mov	fp, r5
 800a6b8:	bfd6      	itet	le
 800a6ba:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a6be:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a6c2:	ee00 3a90 	vmovle	s1, r3
 800a6c6:	ec4b ab17 	vmov	d7, sl, fp
 800a6ca:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a6ce:	b003      	add	sp, #12
 800a6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6d4 <__copybits>:
 800a6d4:	3901      	subs	r1, #1
 800a6d6:	b570      	push	{r4, r5, r6, lr}
 800a6d8:	1149      	asrs	r1, r1, #5
 800a6da:	6914      	ldr	r4, [r2, #16]
 800a6dc:	3101      	adds	r1, #1
 800a6de:	f102 0314 	add.w	r3, r2, #20
 800a6e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6ea:	1f05      	subs	r5, r0, #4
 800a6ec:	42a3      	cmp	r3, r4
 800a6ee:	d30c      	bcc.n	800a70a <__copybits+0x36>
 800a6f0:	1aa3      	subs	r3, r4, r2
 800a6f2:	3b11      	subs	r3, #17
 800a6f4:	f023 0303 	bic.w	r3, r3, #3
 800a6f8:	3211      	adds	r2, #17
 800a6fa:	42a2      	cmp	r2, r4
 800a6fc:	bf88      	it	hi
 800a6fe:	2300      	movhi	r3, #0
 800a700:	4418      	add	r0, r3
 800a702:	2300      	movs	r3, #0
 800a704:	4288      	cmp	r0, r1
 800a706:	d305      	bcc.n	800a714 <__copybits+0x40>
 800a708:	bd70      	pop	{r4, r5, r6, pc}
 800a70a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a70e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a712:	e7eb      	b.n	800a6ec <__copybits+0x18>
 800a714:	f840 3b04 	str.w	r3, [r0], #4
 800a718:	e7f4      	b.n	800a704 <__copybits+0x30>

0800a71a <__any_on>:
 800a71a:	f100 0214 	add.w	r2, r0, #20
 800a71e:	6900      	ldr	r0, [r0, #16]
 800a720:	114b      	asrs	r3, r1, #5
 800a722:	4298      	cmp	r0, r3
 800a724:	b510      	push	{r4, lr}
 800a726:	db11      	blt.n	800a74c <__any_on+0x32>
 800a728:	dd0a      	ble.n	800a740 <__any_on+0x26>
 800a72a:	f011 011f 	ands.w	r1, r1, #31
 800a72e:	d007      	beq.n	800a740 <__any_on+0x26>
 800a730:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a734:	fa24 f001 	lsr.w	r0, r4, r1
 800a738:	fa00 f101 	lsl.w	r1, r0, r1
 800a73c:	428c      	cmp	r4, r1
 800a73e:	d10b      	bne.n	800a758 <__any_on+0x3e>
 800a740:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a744:	4293      	cmp	r3, r2
 800a746:	d803      	bhi.n	800a750 <__any_on+0x36>
 800a748:	2000      	movs	r0, #0
 800a74a:	bd10      	pop	{r4, pc}
 800a74c:	4603      	mov	r3, r0
 800a74e:	e7f7      	b.n	800a740 <__any_on+0x26>
 800a750:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a754:	2900      	cmp	r1, #0
 800a756:	d0f5      	beq.n	800a744 <__any_on+0x2a>
 800a758:	2001      	movs	r0, #1
 800a75a:	e7f6      	b.n	800a74a <__any_on+0x30>

0800a75c <_calloc_r>:
 800a75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a75e:	fba1 2402 	umull	r2, r4, r1, r2
 800a762:	b94c      	cbnz	r4, 800a778 <_calloc_r+0x1c>
 800a764:	4611      	mov	r1, r2
 800a766:	9201      	str	r2, [sp, #4]
 800a768:	f7fc fc60 	bl	800702c <_malloc_r>
 800a76c:	9a01      	ldr	r2, [sp, #4]
 800a76e:	4605      	mov	r5, r0
 800a770:	b930      	cbnz	r0, 800a780 <_calloc_r+0x24>
 800a772:	4628      	mov	r0, r5
 800a774:	b003      	add	sp, #12
 800a776:	bd30      	pop	{r4, r5, pc}
 800a778:	220c      	movs	r2, #12
 800a77a:	6002      	str	r2, [r0, #0]
 800a77c:	2500      	movs	r5, #0
 800a77e:	e7f8      	b.n	800a772 <_calloc_r+0x16>
 800a780:	4621      	mov	r1, r4
 800a782:	f7fc fbdf 	bl	8006f44 <memset>
 800a786:	e7f4      	b.n	800a772 <_calloc_r+0x16>

0800a788 <__ssputs_r>:
 800a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	688e      	ldr	r6, [r1, #8]
 800a78e:	429e      	cmp	r6, r3
 800a790:	4682      	mov	sl, r0
 800a792:	460c      	mov	r4, r1
 800a794:	4690      	mov	r8, r2
 800a796:	461f      	mov	r7, r3
 800a798:	d838      	bhi.n	800a80c <__ssputs_r+0x84>
 800a79a:	898a      	ldrh	r2, [r1, #12]
 800a79c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7a0:	d032      	beq.n	800a808 <__ssputs_r+0x80>
 800a7a2:	6825      	ldr	r5, [r4, #0]
 800a7a4:	6909      	ldr	r1, [r1, #16]
 800a7a6:	eba5 0901 	sub.w	r9, r5, r1
 800a7aa:	6965      	ldr	r5, [r4, #20]
 800a7ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	444b      	add	r3, r9
 800a7b8:	106d      	asrs	r5, r5, #1
 800a7ba:	429d      	cmp	r5, r3
 800a7bc:	bf38      	it	cc
 800a7be:	461d      	movcc	r5, r3
 800a7c0:	0553      	lsls	r3, r2, #21
 800a7c2:	d531      	bpl.n	800a828 <__ssputs_r+0xa0>
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7fc fc31 	bl	800702c <_malloc_r>
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	b950      	cbnz	r0, 800a7e4 <__ssputs_r+0x5c>
 800a7ce:	230c      	movs	r3, #12
 800a7d0:	f8ca 3000 	str.w	r3, [sl]
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e4:	6921      	ldr	r1, [r4, #16]
 800a7e6:	464a      	mov	r2, r9
 800a7e8:	f7fc fb9e 	bl	8006f28 <memcpy>
 800a7ec:	89a3      	ldrh	r3, [r4, #12]
 800a7ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7f6:	81a3      	strh	r3, [r4, #12]
 800a7f8:	6126      	str	r6, [r4, #16]
 800a7fa:	6165      	str	r5, [r4, #20]
 800a7fc:	444e      	add	r6, r9
 800a7fe:	eba5 0509 	sub.w	r5, r5, r9
 800a802:	6026      	str	r6, [r4, #0]
 800a804:	60a5      	str	r5, [r4, #8]
 800a806:	463e      	mov	r6, r7
 800a808:	42be      	cmp	r6, r7
 800a80a:	d900      	bls.n	800a80e <__ssputs_r+0x86>
 800a80c:	463e      	mov	r6, r7
 800a80e:	6820      	ldr	r0, [r4, #0]
 800a810:	4632      	mov	r2, r6
 800a812:	4641      	mov	r1, r8
 800a814:	f000 f96e 	bl	800aaf4 <memmove>
 800a818:	68a3      	ldr	r3, [r4, #8]
 800a81a:	1b9b      	subs	r3, r3, r6
 800a81c:	60a3      	str	r3, [r4, #8]
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	4433      	add	r3, r6
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	2000      	movs	r0, #0
 800a826:	e7db      	b.n	800a7e0 <__ssputs_r+0x58>
 800a828:	462a      	mov	r2, r5
 800a82a:	f000 f97d 	bl	800ab28 <_realloc_r>
 800a82e:	4606      	mov	r6, r0
 800a830:	2800      	cmp	r0, #0
 800a832:	d1e1      	bne.n	800a7f8 <__ssputs_r+0x70>
 800a834:	6921      	ldr	r1, [r4, #16]
 800a836:	4650      	mov	r0, sl
 800a838:	f7fc fb8c 	bl	8006f54 <_free_r>
 800a83c:	e7c7      	b.n	800a7ce <__ssputs_r+0x46>
	...

0800a840 <_svfiprintf_r>:
 800a840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a844:	4698      	mov	r8, r3
 800a846:	898b      	ldrh	r3, [r1, #12]
 800a848:	061b      	lsls	r3, r3, #24
 800a84a:	b09d      	sub	sp, #116	; 0x74
 800a84c:	4607      	mov	r7, r0
 800a84e:	460d      	mov	r5, r1
 800a850:	4614      	mov	r4, r2
 800a852:	d50e      	bpl.n	800a872 <_svfiprintf_r+0x32>
 800a854:	690b      	ldr	r3, [r1, #16]
 800a856:	b963      	cbnz	r3, 800a872 <_svfiprintf_r+0x32>
 800a858:	2140      	movs	r1, #64	; 0x40
 800a85a:	f7fc fbe7 	bl	800702c <_malloc_r>
 800a85e:	6028      	str	r0, [r5, #0]
 800a860:	6128      	str	r0, [r5, #16]
 800a862:	b920      	cbnz	r0, 800a86e <_svfiprintf_r+0x2e>
 800a864:	230c      	movs	r3, #12
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	f04f 30ff 	mov.w	r0, #4294967295
 800a86c:	e0d1      	b.n	800aa12 <_svfiprintf_r+0x1d2>
 800a86e:	2340      	movs	r3, #64	; 0x40
 800a870:	616b      	str	r3, [r5, #20]
 800a872:	2300      	movs	r3, #0
 800a874:	9309      	str	r3, [sp, #36]	; 0x24
 800a876:	2320      	movs	r3, #32
 800a878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a87c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a880:	2330      	movs	r3, #48	; 0x30
 800a882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aa2c <_svfiprintf_r+0x1ec>
 800a886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a88a:	f04f 0901 	mov.w	r9, #1
 800a88e:	4623      	mov	r3, r4
 800a890:	469a      	mov	sl, r3
 800a892:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a896:	b10a      	cbz	r2, 800a89c <_svfiprintf_r+0x5c>
 800a898:	2a25      	cmp	r2, #37	; 0x25
 800a89a:	d1f9      	bne.n	800a890 <_svfiprintf_r+0x50>
 800a89c:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a0:	d00b      	beq.n	800a8ba <_svfiprintf_r+0x7a>
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	4622      	mov	r2, r4
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff ff6d 	bl	800a788 <__ssputs_r>
 800a8ae:	3001      	adds	r0, #1
 800a8b0:	f000 80aa 	beq.w	800aa08 <_svfiprintf_r+0x1c8>
 800a8b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8b6:	445a      	add	r2, fp
 800a8b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 80a2 	beq.w	800aa08 <_svfiprintf_r+0x1c8>
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8ce:	f10a 0a01 	add.w	sl, sl, #1
 800a8d2:	9304      	str	r3, [sp, #16]
 800a8d4:	9307      	str	r3, [sp, #28]
 800a8d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8da:	931a      	str	r3, [sp, #104]	; 0x68
 800a8dc:	4654      	mov	r4, sl
 800a8de:	2205      	movs	r2, #5
 800a8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8e4:	4851      	ldr	r0, [pc, #324]	; (800aa2c <_svfiprintf_r+0x1ec>)
 800a8e6:	f7f5 fcb3 	bl	8000250 <memchr>
 800a8ea:	9a04      	ldr	r2, [sp, #16]
 800a8ec:	b9d8      	cbnz	r0, 800a926 <_svfiprintf_r+0xe6>
 800a8ee:	06d0      	lsls	r0, r2, #27
 800a8f0:	bf44      	itt	mi
 800a8f2:	2320      	movmi	r3, #32
 800a8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f8:	0711      	lsls	r1, r2, #28
 800a8fa:	bf44      	itt	mi
 800a8fc:	232b      	movmi	r3, #43	; 0x2b
 800a8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a902:	f89a 3000 	ldrb.w	r3, [sl]
 800a906:	2b2a      	cmp	r3, #42	; 0x2a
 800a908:	d015      	beq.n	800a936 <_svfiprintf_r+0xf6>
 800a90a:	9a07      	ldr	r2, [sp, #28]
 800a90c:	4654      	mov	r4, sl
 800a90e:	2000      	movs	r0, #0
 800a910:	f04f 0c0a 	mov.w	ip, #10
 800a914:	4621      	mov	r1, r4
 800a916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a91a:	3b30      	subs	r3, #48	; 0x30
 800a91c:	2b09      	cmp	r3, #9
 800a91e:	d94e      	bls.n	800a9be <_svfiprintf_r+0x17e>
 800a920:	b1b0      	cbz	r0, 800a950 <_svfiprintf_r+0x110>
 800a922:	9207      	str	r2, [sp, #28]
 800a924:	e014      	b.n	800a950 <_svfiprintf_r+0x110>
 800a926:	eba0 0308 	sub.w	r3, r0, r8
 800a92a:	fa09 f303 	lsl.w	r3, r9, r3
 800a92e:	4313      	orrs	r3, r2
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	46a2      	mov	sl, r4
 800a934:	e7d2      	b.n	800a8dc <_svfiprintf_r+0x9c>
 800a936:	9b03      	ldr	r3, [sp, #12]
 800a938:	1d19      	adds	r1, r3, #4
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	9103      	str	r1, [sp, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bfbb      	ittet	lt
 800a942:	425b      	neglt	r3, r3
 800a944:	f042 0202 	orrlt.w	r2, r2, #2
 800a948:	9307      	strge	r3, [sp, #28]
 800a94a:	9307      	strlt	r3, [sp, #28]
 800a94c:	bfb8      	it	lt
 800a94e:	9204      	strlt	r2, [sp, #16]
 800a950:	7823      	ldrb	r3, [r4, #0]
 800a952:	2b2e      	cmp	r3, #46	; 0x2e
 800a954:	d10c      	bne.n	800a970 <_svfiprintf_r+0x130>
 800a956:	7863      	ldrb	r3, [r4, #1]
 800a958:	2b2a      	cmp	r3, #42	; 0x2a
 800a95a:	d135      	bne.n	800a9c8 <_svfiprintf_r+0x188>
 800a95c:	9b03      	ldr	r3, [sp, #12]
 800a95e:	1d1a      	adds	r2, r3, #4
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	9203      	str	r2, [sp, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	bfb8      	it	lt
 800a968:	f04f 33ff 	movlt.w	r3, #4294967295
 800a96c:	3402      	adds	r4, #2
 800a96e:	9305      	str	r3, [sp, #20]
 800a970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aa3c <_svfiprintf_r+0x1fc>
 800a974:	7821      	ldrb	r1, [r4, #0]
 800a976:	2203      	movs	r2, #3
 800a978:	4650      	mov	r0, sl
 800a97a:	f7f5 fc69 	bl	8000250 <memchr>
 800a97e:	b140      	cbz	r0, 800a992 <_svfiprintf_r+0x152>
 800a980:	2340      	movs	r3, #64	; 0x40
 800a982:	eba0 000a 	sub.w	r0, r0, sl
 800a986:	fa03 f000 	lsl.w	r0, r3, r0
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	4303      	orrs	r3, r0
 800a98e:	3401      	adds	r4, #1
 800a990:	9304      	str	r3, [sp, #16]
 800a992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a996:	4826      	ldr	r0, [pc, #152]	; (800aa30 <_svfiprintf_r+0x1f0>)
 800a998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a99c:	2206      	movs	r2, #6
 800a99e:	f7f5 fc57 	bl	8000250 <memchr>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d038      	beq.n	800aa18 <_svfiprintf_r+0x1d8>
 800a9a6:	4b23      	ldr	r3, [pc, #140]	; (800aa34 <_svfiprintf_r+0x1f4>)
 800a9a8:	bb1b      	cbnz	r3, 800a9f2 <_svfiprintf_r+0x1b2>
 800a9aa:	9b03      	ldr	r3, [sp, #12]
 800a9ac:	3307      	adds	r3, #7
 800a9ae:	f023 0307 	bic.w	r3, r3, #7
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	9303      	str	r3, [sp, #12]
 800a9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b8:	4433      	add	r3, r6
 800a9ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a9bc:	e767      	b.n	800a88e <_svfiprintf_r+0x4e>
 800a9be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	2001      	movs	r0, #1
 800a9c6:	e7a5      	b.n	800a914 <_svfiprintf_r+0xd4>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	3401      	adds	r4, #1
 800a9cc:	9305      	str	r3, [sp, #20]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	f04f 0c0a 	mov.w	ip, #10
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9da:	3a30      	subs	r2, #48	; 0x30
 800a9dc:	2a09      	cmp	r2, #9
 800a9de:	d903      	bls.n	800a9e8 <_svfiprintf_r+0x1a8>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0c5      	beq.n	800a970 <_svfiprintf_r+0x130>
 800a9e4:	9105      	str	r1, [sp, #20]
 800a9e6:	e7c3      	b.n	800a970 <_svfiprintf_r+0x130>
 800a9e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e7f0      	b.n	800a9d4 <_svfiprintf_r+0x194>
 800a9f2:	ab03      	add	r3, sp, #12
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	462a      	mov	r2, r5
 800a9f8:	4b0f      	ldr	r3, [pc, #60]	; (800aa38 <_svfiprintf_r+0x1f8>)
 800a9fa:	a904      	add	r1, sp, #16
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	f7fc fc1b 	bl	8007238 <_printf_float>
 800aa02:	1c42      	adds	r2, r0, #1
 800aa04:	4606      	mov	r6, r0
 800aa06:	d1d6      	bne.n	800a9b6 <_svfiprintf_r+0x176>
 800aa08:	89ab      	ldrh	r3, [r5, #12]
 800aa0a:	065b      	lsls	r3, r3, #25
 800aa0c:	f53f af2c 	bmi.w	800a868 <_svfiprintf_r+0x28>
 800aa10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa12:	b01d      	add	sp, #116	; 0x74
 800aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa18:	ab03      	add	r3, sp, #12
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	462a      	mov	r2, r5
 800aa1e:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <_svfiprintf_r+0x1f8>)
 800aa20:	a904      	add	r1, sp, #16
 800aa22:	4638      	mov	r0, r7
 800aa24:	f7fc fe94 	bl	8007750 <_printf_i>
 800aa28:	e7eb      	b.n	800aa02 <_svfiprintf_r+0x1c2>
 800aa2a:	bf00      	nop
 800aa2c:	0800bcb4 	.word	0x0800bcb4
 800aa30:	0800bcbe 	.word	0x0800bcbe
 800aa34:	08007239 	.word	0x08007239
 800aa38:	0800a789 	.word	0x0800a789
 800aa3c:	0800bcba 	.word	0x0800bcba

0800aa40 <nan>:
 800aa40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aa48 <nan+0x8>
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	00000000 	.word	0x00000000
 800aa4c:	7ff80000 	.word	0x7ff80000

0800aa50 <strncmp>:
 800aa50:	b510      	push	{r4, lr}
 800aa52:	b17a      	cbz	r2, 800aa74 <strncmp+0x24>
 800aa54:	4603      	mov	r3, r0
 800aa56:	3901      	subs	r1, #1
 800aa58:	1884      	adds	r4, r0, r2
 800aa5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa62:	4290      	cmp	r0, r2
 800aa64:	d101      	bne.n	800aa6a <strncmp+0x1a>
 800aa66:	42a3      	cmp	r3, r4
 800aa68:	d101      	bne.n	800aa6e <strncmp+0x1e>
 800aa6a:	1a80      	subs	r0, r0, r2
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d1f3      	bne.n	800aa5a <strncmp+0xa>
 800aa72:	e7fa      	b.n	800aa6a <strncmp+0x1a>
 800aa74:	4610      	mov	r0, r2
 800aa76:	e7f9      	b.n	800aa6c <strncmp+0x1c>

0800aa78 <__ascii_wctomb>:
 800aa78:	b149      	cbz	r1, 800aa8e <__ascii_wctomb+0x16>
 800aa7a:	2aff      	cmp	r2, #255	; 0xff
 800aa7c:	bf85      	ittet	hi
 800aa7e:	238a      	movhi	r3, #138	; 0x8a
 800aa80:	6003      	strhi	r3, [r0, #0]
 800aa82:	700a      	strbls	r2, [r1, #0]
 800aa84:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa88:	bf98      	it	ls
 800aa8a:	2001      	movls	r0, #1
 800aa8c:	4770      	bx	lr
 800aa8e:	4608      	mov	r0, r1
 800aa90:	4770      	bx	lr
	...

0800aa94 <__assert_func>:
 800aa94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa96:	4614      	mov	r4, r2
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4b09      	ldr	r3, [pc, #36]	; (800aac0 <__assert_func+0x2c>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	68d8      	ldr	r0, [r3, #12]
 800aaa2:	b14c      	cbz	r4, 800aab8 <__assert_func+0x24>
 800aaa4:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <__assert_func+0x30>)
 800aaa6:	9100      	str	r1, [sp, #0]
 800aaa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aaac:	4906      	ldr	r1, [pc, #24]	; (800aac8 <__assert_func+0x34>)
 800aaae:	462b      	mov	r3, r5
 800aab0:	f000 f80e 	bl	800aad0 <fiprintf>
 800aab4:	f000 fa80 	bl	800afb8 <abort>
 800aab8:	4b04      	ldr	r3, [pc, #16]	; (800aacc <__assert_func+0x38>)
 800aaba:	461c      	mov	r4, r3
 800aabc:	e7f3      	b.n	800aaa6 <__assert_func+0x12>
 800aabe:	bf00      	nop
 800aac0:	2000001c 	.word	0x2000001c
 800aac4:	0800bcc5 	.word	0x0800bcc5
 800aac8:	0800bcd2 	.word	0x0800bcd2
 800aacc:	0800bd00 	.word	0x0800bd00

0800aad0 <fiprintf>:
 800aad0:	b40e      	push	{r1, r2, r3}
 800aad2:	b503      	push	{r0, r1, lr}
 800aad4:	4601      	mov	r1, r0
 800aad6:	ab03      	add	r3, sp, #12
 800aad8:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <fiprintf+0x20>)
 800aada:	f853 2b04 	ldr.w	r2, [r3], #4
 800aade:	6800      	ldr	r0, [r0, #0]
 800aae0:	9301      	str	r3, [sp, #4]
 800aae2:	f000 f879 	bl	800abd8 <_vfiprintf_r>
 800aae6:	b002      	add	sp, #8
 800aae8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaec:	b003      	add	sp, #12
 800aaee:	4770      	bx	lr
 800aaf0:	2000001c 	.word	0x2000001c

0800aaf4 <memmove>:
 800aaf4:	4288      	cmp	r0, r1
 800aaf6:	b510      	push	{r4, lr}
 800aaf8:	eb01 0402 	add.w	r4, r1, r2
 800aafc:	d902      	bls.n	800ab04 <memmove+0x10>
 800aafe:	4284      	cmp	r4, r0
 800ab00:	4623      	mov	r3, r4
 800ab02:	d807      	bhi.n	800ab14 <memmove+0x20>
 800ab04:	1e43      	subs	r3, r0, #1
 800ab06:	42a1      	cmp	r1, r4
 800ab08:	d008      	beq.n	800ab1c <memmove+0x28>
 800ab0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab12:	e7f8      	b.n	800ab06 <memmove+0x12>
 800ab14:	4402      	add	r2, r0
 800ab16:	4601      	mov	r1, r0
 800ab18:	428a      	cmp	r2, r1
 800ab1a:	d100      	bne.n	800ab1e <memmove+0x2a>
 800ab1c:	bd10      	pop	{r4, pc}
 800ab1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab26:	e7f7      	b.n	800ab18 <memmove+0x24>

0800ab28 <_realloc_r>:
 800ab28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	4614      	mov	r4, r2
 800ab30:	460e      	mov	r6, r1
 800ab32:	b921      	cbnz	r1, 800ab3e <_realloc_r+0x16>
 800ab34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab38:	4611      	mov	r1, r2
 800ab3a:	f7fc ba77 	b.w	800702c <_malloc_r>
 800ab3e:	b92a      	cbnz	r2, 800ab4c <_realloc_r+0x24>
 800ab40:	f7fc fa08 	bl	8006f54 <_free_r>
 800ab44:	4625      	mov	r5, r4
 800ab46:	4628      	mov	r0, r5
 800ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4c:	f000 fc58 	bl	800b400 <_malloc_usable_size_r>
 800ab50:	4284      	cmp	r4, r0
 800ab52:	4607      	mov	r7, r0
 800ab54:	d802      	bhi.n	800ab5c <_realloc_r+0x34>
 800ab56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab5a:	d812      	bhi.n	800ab82 <_realloc_r+0x5a>
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4640      	mov	r0, r8
 800ab60:	f7fc fa64 	bl	800702c <_malloc_r>
 800ab64:	4605      	mov	r5, r0
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d0ed      	beq.n	800ab46 <_realloc_r+0x1e>
 800ab6a:	42bc      	cmp	r4, r7
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	4631      	mov	r1, r6
 800ab70:	bf28      	it	cs
 800ab72:	463a      	movcs	r2, r7
 800ab74:	f7fc f9d8 	bl	8006f28 <memcpy>
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	f7fc f9ea 	bl	8006f54 <_free_r>
 800ab80:	e7e1      	b.n	800ab46 <_realloc_r+0x1e>
 800ab82:	4635      	mov	r5, r6
 800ab84:	e7df      	b.n	800ab46 <_realloc_r+0x1e>

0800ab86 <__sfputc_r>:
 800ab86:	6893      	ldr	r3, [r2, #8]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	b410      	push	{r4}
 800ab8e:	6093      	str	r3, [r2, #8]
 800ab90:	da08      	bge.n	800aba4 <__sfputc_r+0x1e>
 800ab92:	6994      	ldr	r4, [r2, #24]
 800ab94:	42a3      	cmp	r3, r4
 800ab96:	db01      	blt.n	800ab9c <__sfputc_r+0x16>
 800ab98:	290a      	cmp	r1, #10
 800ab9a:	d103      	bne.n	800aba4 <__sfputc_r+0x1e>
 800ab9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aba0:	f000 b94a 	b.w	800ae38 <__swbuf_r>
 800aba4:	6813      	ldr	r3, [r2, #0]
 800aba6:	1c58      	adds	r0, r3, #1
 800aba8:	6010      	str	r0, [r2, #0]
 800abaa:	7019      	strb	r1, [r3, #0]
 800abac:	4608      	mov	r0, r1
 800abae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <__sfputs_r>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	4606      	mov	r6, r0
 800abb8:	460f      	mov	r7, r1
 800abba:	4614      	mov	r4, r2
 800abbc:	18d5      	adds	r5, r2, r3
 800abbe:	42ac      	cmp	r4, r5
 800abc0:	d101      	bne.n	800abc6 <__sfputs_r+0x12>
 800abc2:	2000      	movs	r0, #0
 800abc4:	e007      	b.n	800abd6 <__sfputs_r+0x22>
 800abc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abca:	463a      	mov	r2, r7
 800abcc:	4630      	mov	r0, r6
 800abce:	f7ff ffda 	bl	800ab86 <__sfputc_r>
 800abd2:	1c43      	adds	r3, r0, #1
 800abd4:	d1f3      	bne.n	800abbe <__sfputs_r+0xa>
 800abd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abd8 <_vfiprintf_r>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	460d      	mov	r5, r1
 800abde:	b09d      	sub	sp, #116	; 0x74
 800abe0:	4614      	mov	r4, r2
 800abe2:	4698      	mov	r8, r3
 800abe4:	4606      	mov	r6, r0
 800abe6:	b118      	cbz	r0, 800abf0 <_vfiprintf_r+0x18>
 800abe8:	6983      	ldr	r3, [r0, #24]
 800abea:	b90b      	cbnz	r3, 800abf0 <_vfiprintf_r+0x18>
 800abec:	f000 fb06 	bl	800b1fc <__sinit>
 800abf0:	4b89      	ldr	r3, [pc, #548]	; (800ae18 <_vfiprintf_r+0x240>)
 800abf2:	429d      	cmp	r5, r3
 800abf4:	d11b      	bne.n	800ac2e <_vfiprintf_r+0x56>
 800abf6:	6875      	ldr	r5, [r6, #4]
 800abf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abfa:	07d9      	lsls	r1, r3, #31
 800abfc:	d405      	bmi.n	800ac0a <_vfiprintf_r+0x32>
 800abfe:	89ab      	ldrh	r3, [r5, #12]
 800ac00:	059a      	lsls	r2, r3, #22
 800ac02:	d402      	bmi.n	800ac0a <_vfiprintf_r+0x32>
 800ac04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac06:	f7f6 fe4a 	bl	800189e <__retarget_lock_acquire_recursive>
 800ac0a:	89ab      	ldrh	r3, [r5, #12]
 800ac0c:	071b      	lsls	r3, r3, #28
 800ac0e:	d501      	bpl.n	800ac14 <_vfiprintf_r+0x3c>
 800ac10:	692b      	ldr	r3, [r5, #16]
 800ac12:	b9eb      	cbnz	r3, 800ac50 <_vfiprintf_r+0x78>
 800ac14:	4629      	mov	r1, r5
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f960 	bl	800aedc <__swsetup_r>
 800ac1c:	b1c0      	cbz	r0, 800ac50 <_vfiprintf_r+0x78>
 800ac1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac20:	07dc      	lsls	r4, r3, #31
 800ac22:	d50e      	bpl.n	800ac42 <_vfiprintf_r+0x6a>
 800ac24:	f04f 30ff 	mov.w	r0, #4294967295
 800ac28:	b01d      	add	sp, #116	; 0x74
 800ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac2e:	4b7b      	ldr	r3, [pc, #492]	; (800ae1c <_vfiprintf_r+0x244>)
 800ac30:	429d      	cmp	r5, r3
 800ac32:	d101      	bne.n	800ac38 <_vfiprintf_r+0x60>
 800ac34:	68b5      	ldr	r5, [r6, #8]
 800ac36:	e7df      	b.n	800abf8 <_vfiprintf_r+0x20>
 800ac38:	4b79      	ldr	r3, [pc, #484]	; (800ae20 <_vfiprintf_r+0x248>)
 800ac3a:	429d      	cmp	r5, r3
 800ac3c:	bf08      	it	eq
 800ac3e:	68f5      	ldreq	r5, [r6, #12]
 800ac40:	e7da      	b.n	800abf8 <_vfiprintf_r+0x20>
 800ac42:	89ab      	ldrh	r3, [r5, #12]
 800ac44:	0598      	lsls	r0, r3, #22
 800ac46:	d4ed      	bmi.n	800ac24 <_vfiprintf_r+0x4c>
 800ac48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac4a:	f7f6 fe3c 	bl	80018c6 <__retarget_lock_release_recursive>
 800ac4e:	e7e9      	b.n	800ac24 <_vfiprintf_r+0x4c>
 800ac50:	2300      	movs	r3, #0
 800ac52:	9309      	str	r3, [sp, #36]	; 0x24
 800ac54:	2320      	movs	r3, #32
 800ac56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac5e:	2330      	movs	r3, #48	; 0x30
 800ac60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae24 <_vfiprintf_r+0x24c>
 800ac64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac68:	f04f 0901 	mov.w	r9, #1
 800ac6c:	4623      	mov	r3, r4
 800ac6e:	469a      	mov	sl, r3
 800ac70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac74:	b10a      	cbz	r2, 800ac7a <_vfiprintf_r+0xa2>
 800ac76:	2a25      	cmp	r2, #37	; 0x25
 800ac78:	d1f9      	bne.n	800ac6e <_vfiprintf_r+0x96>
 800ac7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ac7e:	d00b      	beq.n	800ac98 <_vfiprintf_r+0xc0>
 800ac80:	465b      	mov	r3, fp
 800ac82:	4622      	mov	r2, r4
 800ac84:	4629      	mov	r1, r5
 800ac86:	4630      	mov	r0, r6
 800ac88:	f7ff ff94 	bl	800abb4 <__sfputs_r>
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	f000 80aa 	beq.w	800ade6 <_vfiprintf_r+0x20e>
 800ac92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac94:	445a      	add	r2, fp
 800ac96:	9209      	str	r2, [sp, #36]	; 0x24
 800ac98:	f89a 3000 	ldrb.w	r3, [sl]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80a2 	beq.w	800ade6 <_vfiprintf_r+0x20e>
 800aca2:	2300      	movs	r3, #0
 800aca4:	f04f 32ff 	mov.w	r2, #4294967295
 800aca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acac:	f10a 0a01 	add.w	sl, sl, #1
 800acb0:	9304      	str	r3, [sp, #16]
 800acb2:	9307      	str	r3, [sp, #28]
 800acb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acb8:	931a      	str	r3, [sp, #104]	; 0x68
 800acba:	4654      	mov	r4, sl
 800acbc:	2205      	movs	r2, #5
 800acbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc2:	4858      	ldr	r0, [pc, #352]	; (800ae24 <_vfiprintf_r+0x24c>)
 800acc4:	f7f5 fac4 	bl	8000250 <memchr>
 800acc8:	9a04      	ldr	r2, [sp, #16]
 800acca:	b9d8      	cbnz	r0, 800ad04 <_vfiprintf_r+0x12c>
 800accc:	06d1      	lsls	r1, r2, #27
 800acce:	bf44      	itt	mi
 800acd0:	2320      	movmi	r3, #32
 800acd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acd6:	0713      	lsls	r3, r2, #28
 800acd8:	bf44      	itt	mi
 800acda:	232b      	movmi	r3, #43	; 0x2b
 800acdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ace0:	f89a 3000 	ldrb.w	r3, [sl]
 800ace4:	2b2a      	cmp	r3, #42	; 0x2a
 800ace6:	d015      	beq.n	800ad14 <_vfiprintf_r+0x13c>
 800ace8:	9a07      	ldr	r2, [sp, #28]
 800acea:	4654      	mov	r4, sl
 800acec:	2000      	movs	r0, #0
 800acee:	f04f 0c0a 	mov.w	ip, #10
 800acf2:	4621      	mov	r1, r4
 800acf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf8:	3b30      	subs	r3, #48	; 0x30
 800acfa:	2b09      	cmp	r3, #9
 800acfc:	d94e      	bls.n	800ad9c <_vfiprintf_r+0x1c4>
 800acfe:	b1b0      	cbz	r0, 800ad2e <_vfiprintf_r+0x156>
 800ad00:	9207      	str	r2, [sp, #28]
 800ad02:	e014      	b.n	800ad2e <_vfiprintf_r+0x156>
 800ad04:	eba0 0308 	sub.w	r3, r0, r8
 800ad08:	fa09 f303 	lsl.w	r3, r9, r3
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	9304      	str	r3, [sp, #16]
 800ad10:	46a2      	mov	sl, r4
 800ad12:	e7d2      	b.n	800acba <_vfiprintf_r+0xe2>
 800ad14:	9b03      	ldr	r3, [sp, #12]
 800ad16:	1d19      	adds	r1, r3, #4
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	9103      	str	r1, [sp, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bfbb      	ittet	lt
 800ad20:	425b      	neglt	r3, r3
 800ad22:	f042 0202 	orrlt.w	r2, r2, #2
 800ad26:	9307      	strge	r3, [sp, #28]
 800ad28:	9307      	strlt	r3, [sp, #28]
 800ad2a:	bfb8      	it	lt
 800ad2c:	9204      	strlt	r2, [sp, #16]
 800ad2e:	7823      	ldrb	r3, [r4, #0]
 800ad30:	2b2e      	cmp	r3, #46	; 0x2e
 800ad32:	d10c      	bne.n	800ad4e <_vfiprintf_r+0x176>
 800ad34:	7863      	ldrb	r3, [r4, #1]
 800ad36:	2b2a      	cmp	r3, #42	; 0x2a
 800ad38:	d135      	bne.n	800ada6 <_vfiprintf_r+0x1ce>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	1d1a      	adds	r2, r3, #4
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	9203      	str	r2, [sp, #12]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	bfb8      	it	lt
 800ad46:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad4a:	3402      	adds	r4, #2
 800ad4c:	9305      	str	r3, [sp, #20]
 800ad4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae34 <_vfiprintf_r+0x25c>
 800ad52:	7821      	ldrb	r1, [r4, #0]
 800ad54:	2203      	movs	r2, #3
 800ad56:	4650      	mov	r0, sl
 800ad58:	f7f5 fa7a 	bl	8000250 <memchr>
 800ad5c:	b140      	cbz	r0, 800ad70 <_vfiprintf_r+0x198>
 800ad5e:	2340      	movs	r3, #64	; 0x40
 800ad60:	eba0 000a 	sub.w	r0, r0, sl
 800ad64:	fa03 f000 	lsl.w	r0, r3, r0
 800ad68:	9b04      	ldr	r3, [sp, #16]
 800ad6a:	4303      	orrs	r3, r0
 800ad6c:	3401      	adds	r4, #1
 800ad6e:	9304      	str	r3, [sp, #16]
 800ad70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad74:	482c      	ldr	r0, [pc, #176]	; (800ae28 <_vfiprintf_r+0x250>)
 800ad76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad7a:	2206      	movs	r2, #6
 800ad7c:	f7f5 fa68 	bl	8000250 <memchr>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d03f      	beq.n	800ae04 <_vfiprintf_r+0x22c>
 800ad84:	4b29      	ldr	r3, [pc, #164]	; (800ae2c <_vfiprintf_r+0x254>)
 800ad86:	bb1b      	cbnz	r3, 800add0 <_vfiprintf_r+0x1f8>
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	3307      	adds	r3, #7
 800ad8c:	f023 0307 	bic.w	r3, r3, #7
 800ad90:	3308      	adds	r3, #8
 800ad92:	9303      	str	r3, [sp, #12]
 800ad94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad96:	443b      	add	r3, r7
 800ad98:	9309      	str	r3, [sp, #36]	; 0x24
 800ad9a:	e767      	b.n	800ac6c <_vfiprintf_r+0x94>
 800ad9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ada0:	460c      	mov	r4, r1
 800ada2:	2001      	movs	r0, #1
 800ada4:	e7a5      	b.n	800acf2 <_vfiprintf_r+0x11a>
 800ada6:	2300      	movs	r3, #0
 800ada8:	3401      	adds	r4, #1
 800adaa:	9305      	str	r3, [sp, #20]
 800adac:	4619      	mov	r1, r3
 800adae:	f04f 0c0a 	mov.w	ip, #10
 800adb2:	4620      	mov	r0, r4
 800adb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adb8:	3a30      	subs	r2, #48	; 0x30
 800adba:	2a09      	cmp	r2, #9
 800adbc:	d903      	bls.n	800adc6 <_vfiprintf_r+0x1ee>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d0c5      	beq.n	800ad4e <_vfiprintf_r+0x176>
 800adc2:	9105      	str	r1, [sp, #20]
 800adc4:	e7c3      	b.n	800ad4e <_vfiprintf_r+0x176>
 800adc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800adca:	4604      	mov	r4, r0
 800adcc:	2301      	movs	r3, #1
 800adce:	e7f0      	b.n	800adb2 <_vfiprintf_r+0x1da>
 800add0:	ab03      	add	r3, sp, #12
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	462a      	mov	r2, r5
 800add6:	4b16      	ldr	r3, [pc, #88]	; (800ae30 <_vfiprintf_r+0x258>)
 800add8:	a904      	add	r1, sp, #16
 800adda:	4630      	mov	r0, r6
 800addc:	f7fc fa2c 	bl	8007238 <_printf_float>
 800ade0:	4607      	mov	r7, r0
 800ade2:	1c78      	adds	r0, r7, #1
 800ade4:	d1d6      	bne.n	800ad94 <_vfiprintf_r+0x1bc>
 800ade6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ade8:	07d9      	lsls	r1, r3, #31
 800adea:	d405      	bmi.n	800adf8 <_vfiprintf_r+0x220>
 800adec:	89ab      	ldrh	r3, [r5, #12]
 800adee:	059a      	lsls	r2, r3, #22
 800adf0:	d402      	bmi.n	800adf8 <_vfiprintf_r+0x220>
 800adf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adf4:	f7f6 fd67 	bl	80018c6 <__retarget_lock_release_recursive>
 800adf8:	89ab      	ldrh	r3, [r5, #12]
 800adfa:	065b      	lsls	r3, r3, #25
 800adfc:	f53f af12 	bmi.w	800ac24 <_vfiprintf_r+0x4c>
 800ae00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae02:	e711      	b.n	800ac28 <_vfiprintf_r+0x50>
 800ae04:	ab03      	add	r3, sp, #12
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	462a      	mov	r2, r5
 800ae0a:	4b09      	ldr	r3, [pc, #36]	; (800ae30 <_vfiprintf_r+0x258>)
 800ae0c:	a904      	add	r1, sp, #16
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7fc fc9e 	bl	8007750 <_printf_i>
 800ae14:	e7e4      	b.n	800ade0 <_vfiprintf_r+0x208>
 800ae16:	bf00      	nop
 800ae18:	0800bd24 	.word	0x0800bd24
 800ae1c:	0800bd44 	.word	0x0800bd44
 800ae20:	0800bd04 	.word	0x0800bd04
 800ae24:	0800bcb4 	.word	0x0800bcb4
 800ae28:	0800bcbe 	.word	0x0800bcbe
 800ae2c:	08007239 	.word	0x08007239
 800ae30:	0800abb5 	.word	0x0800abb5
 800ae34:	0800bcba 	.word	0x0800bcba

0800ae38 <__swbuf_r>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	460e      	mov	r6, r1
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	4605      	mov	r5, r0
 800ae40:	b118      	cbz	r0, 800ae4a <__swbuf_r+0x12>
 800ae42:	6983      	ldr	r3, [r0, #24]
 800ae44:	b90b      	cbnz	r3, 800ae4a <__swbuf_r+0x12>
 800ae46:	f000 f9d9 	bl	800b1fc <__sinit>
 800ae4a:	4b21      	ldr	r3, [pc, #132]	; (800aed0 <__swbuf_r+0x98>)
 800ae4c:	429c      	cmp	r4, r3
 800ae4e:	d12b      	bne.n	800aea8 <__swbuf_r+0x70>
 800ae50:	686c      	ldr	r4, [r5, #4]
 800ae52:	69a3      	ldr	r3, [r4, #24]
 800ae54:	60a3      	str	r3, [r4, #8]
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	071a      	lsls	r2, r3, #28
 800ae5a:	d52f      	bpl.n	800aebc <__swbuf_r+0x84>
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	b36b      	cbz	r3, 800aebc <__swbuf_r+0x84>
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	6820      	ldr	r0, [r4, #0]
 800ae64:	1ac0      	subs	r0, r0, r3
 800ae66:	6963      	ldr	r3, [r4, #20]
 800ae68:	b2f6      	uxtb	r6, r6
 800ae6a:	4283      	cmp	r3, r0
 800ae6c:	4637      	mov	r7, r6
 800ae6e:	dc04      	bgt.n	800ae7a <__swbuf_r+0x42>
 800ae70:	4621      	mov	r1, r4
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 f92e 	bl	800b0d4 <_fflush_r>
 800ae78:	bb30      	cbnz	r0, 800aec8 <__swbuf_r+0x90>
 800ae7a:	68a3      	ldr	r3, [r4, #8]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	60a3      	str	r3, [r4, #8]
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	6022      	str	r2, [r4, #0]
 800ae86:	701e      	strb	r6, [r3, #0]
 800ae88:	6963      	ldr	r3, [r4, #20]
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	4283      	cmp	r3, r0
 800ae8e:	d004      	beq.n	800ae9a <__swbuf_r+0x62>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	07db      	lsls	r3, r3, #31
 800ae94:	d506      	bpl.n	800aea4 <__swbuf_r+0x6c>
 800ae96:	2e0a      	cmp	r6, #10
 800ae98:	d104      	bne.n	800aea4 <__swbuf_r+0x6c>
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 f919 	bl	800b0d4 <_fflush_r>
 800aea2:	b988      	cbnz	r0, 800aec8 <__swbuf_r+0x90>
 800aea4:	4638      	mov	r0, r7
 800aea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <__swbuf_r+0x9c>)
 800aeaa:	429c      	cmp	r4, r3
 800aeac:	d101      	bne.n	800aeb2 <__swbuf_r+0x7a>
 800aeae:	68ac      	ldr	r4, [r5, #8]
 800aeb0:	e7cf      	b.n	800ae52 <__swbuf_r+0x1a>
 800aeb2:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <__swbuf_r+0xa0>)
 800aeb4:	429c      	cmp	r4, r3
 800aeb6:	bf08      	it	eq
 800aeb8:	68ec      	ldreq	r4, [r5, #12]
 800aeba:	e7ca      	b.n	800ae52 <__swbuf_r+0x1a>
 800aebc:	4621      	mov	r1, r4
 800aebe:	4628      	mov	r0, r5
 800aec0:	f000 f80c 	bl	800aedc <__swsetup_r>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d0cb      	beq.n	800ae60 <__swbuf_r+0x28>
 800aec8:	f04f 37ff 	mov.w	r7, #4294967295
 800aecc:	e7ea      	b.n	800aea4 <__swbuf_r+0x6c>
 800aece:	bf00      	nop
 800aed0:	0800bd24 	.word	0x0800bd24
 800aed4:	0800bd44 	.word	0x0800bd44
 800aed8:	0800bd04 	.word	0x0800bd04

0800aedc <__swsetup_r>:
 800aedc:	4b32      	ldr	r3, [pc, #200]	; (800afa8 <__swsetup_r+0xcc>)
 800aede:	b570      	push	{r4, r5, r6, lr}
 800aee0:	681d      	ldr	r5, [r3, #0]
 800aee2:	4606      	mov	r6, r0
 800aee4:	460c      	mov	r4, r1
 800aee6:	b125      	cbz	r5, 800aef2 <__swsetup_r+0x16>
 800aee8:	69ab      	ldr	r3, [r5, #24]
 800aeea:	b913      	cbnz	r3, 800aef2 <__swsetup_r+0x16>
 800aeec:	4628      	mov	r0, r5
 800aeee:	f000 f985 	bl	800b1fc <__sinit>
 800aef2:	4b2e      	ldr	r3, [pc, #184]	; (800afac <__swsetup_r+0xd0>)
 800aef4:	429c      	cmp	r4, r3
 800aef6:	d10f      	bne.n	800af18 <__swsetup_r+0x3c>
 800aef8:	686c      	ldr	r4, [r5, #4]
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af00:	0719      	lsls	r1, r3, #28
 800af02:	d42c      	bmi.n	800af5e <__swsetup_r+0x82>
 800af04:	06dd      	lsls	r5, r3, #27
 800af06:	d411      	bmi.n	800af2c <__swsetup_r+0x50>
 800af08:	2309      	movs	r3, #9
 800af0a:	6033      	str	r3, [r6, #0]
 800af0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	e03e      	b.n	800af96 <__swsetup_r+0xba>
 800af18:	4b25      	ldr	r3, [pc, #148]	; (800afb0 <__swsetup_r+0xd4>)
 800af1a:	429c      	cmp	r4, r3
 800af1c:	d101      	bne.n	800af22 <__swsetup_r+0x46>
 800af1e:	68ac      	ldr	r4, [r5, #8]
 800af20:	e7eb      	b.n	800aefa <__swsetup_r+0x1e>
 800af22:	4b24      	ldr	r3, [pc, #144]	; (800afb4 <__swsetup_r+0xd8>)
 800af24:	429c      	cmp	r4, r3
 800af26:	bf08      	it	eq
 800af28:	68ec      	ldreq	r4, [r5, #12]
 800af2a:	e7e6      	b.n	800aefa <__swsetup_r+0x1e>
 800af2c:	0758      	lsls	r0, r3, #29
 800af2e:	d512      	bpl.n	800af56 <__swsetup_r+0x7a>
 800af30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af32:	b141      	cbz	r1, 800af46 <__swsetup_r+0x6a>
 800af34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af38:	4299      	cmp	r1, r3
 800af3a:	d002      	beq.n	800af42 <__swsetup_r+0x66>
 800af3c:	4630      	mov	r0, r6
 800af3e:	f7fc f809 	bl	8006f54 <_free_r>
 800af42:	2300      	movs	r3, #0
 800af44:	6363      	str	r3, [r4, #52]	; 0x34
 800af46:	89a3      	ldrh	r3, [r4, #12]
 800af48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af4c:	81a3      	strh	r3, [r4, #12]
 800af4e:	2300      	movs	r3, #0
 800af50:	6063      	str	r3, [r4, #4]
 800af52:	6923      	ldr	r3, [r4, #16]
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f043 0308 	orr.w	r3, r3, #8
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	b94b      	cbnz	r3, 800af76 <__swsetup_r+0x9a>
 800af62:	89a3      	ldrh	r3, [r4, #12]
 800af64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af6c:	d003      	beq.n	800af76 <__swsetup_r+0x9a>
 800af6e:	4621      	mov	r1, r4
 800af70:	4630      	mov	r0, r6
 800af72:	f000 fa05 	bl	800b380 <__smakebuf_r>
 800af76:	89a0      	ldrh	r0, [r4, #12]
 800af78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af7c:	f010 0301 	ands.w	r3, r0, #1
 800af80:	d00a      	beq.n	800af98 <__swsetup_r+0xbc>
 800af82:	2300      	movs	r3, #0
 800af84:	60a3      	str	r3, [r4, #8]
 800af86:	6963      	ldr	r3, [r4, #20]
 800af88:	425b      	negs	r3, r3
 800af8a:	61a3      	str	r3, [r4, #24]
 800af8c:	6923      	ldr	r3, [r4, #16]
 800af8e:	b943      	cbnz	r3, 800afa2 <__swsetup_r+0xc6>
 800af90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af94:	d1ba      	bne.n	800af0c <__swsetup_r+0x30>
 800af96:	bd70      	pop	{r4, r5, r6, pc}
 800af98:	0781      	lsls	r1, r0, #30
 800af9a:	bf58      	it	pl
 800af9c:	6963      	ldrpl	r3, [r4, #20]
 800af9e:	60a3      	str	r3, [r4, #8]
 800afa0:	e7f4      	b.n	800af8c <__swsetup_r+0xb0>
 800afa2:	2000      	movs	r0, #0
 800afa4:	e7f7      	b.n	800af96 <__swsetup_r+0xba>
 800afa6:	bf00      	nop
 800afa8:	2000001c 	.word	0x2000001c
 800afac:	0800bd24 	.word	0x0800bd24
 800afb0:	0800bd44 	.word	0x0800bd44
 800afb4:	0800bd04 	.word	0x0800bd04

0800afb8 <abort>:
 800afb8:	b508      	push	{r3, lr}
 800afba:	2006      	movs	r0, #6
 800afbc:	f000 fa50 	bl	800b460 <raise>
 800afc0:	2001      	movs	r0, #1
 800afc2:	f7f6 f953 	bl	800126c <_exit>
	...

0800afc8 <__sflush_r>:
 800afc8:	898a      	ldrh	r2, [r1, #12]
 800afca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afce:	4605      	mov	r5, r0
 800afd0:	0710      	lsls	r0, r2, #28
 800afd2:	460c      	mov	r4, r1
 800afd4:	d458      	bmi.n	800b088 <__sflush_r+0xc0>
 800afd6:	684b      	ldr	r3, [r1, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dc05      	bgt.n	800afe8 <__sflush_r+0x20>
 800afdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afde:	2b00      	cmp	r3, #0
 800afe0:	dc02      	bgt.n	800afe8 <__sflush_r+0x20>
 800afe2:	2000      	movs	r0, #0
 800afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afea:	2e00      	cmp	r6, #0
 800afec:	d0f9      	beq.n	800afe2 <__sflush_r+0x1a>
 800afee:	2300      	movs	r3, #0
 800aff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aff4:	682f      	ldr	r7, [r5, #0]
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	d032      	beq.n	800b060 <__sflush_r+0x98>
 800affa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800affc:	89a3      	ldrh	r3, [r4, #12]
 800affe:	075a      	lsls	r2, r3, #29
 800b000:	d505      	bpl.n	800b00e <__sflush_r+0x46>
 800b002:	6863      	ldr	r3, [r4, #4]
 800b004:	1ac0      	subs	r0, r0, r3
 800b006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b008:	b10b      	cbz	r3, 800b00e <__sflush_r+0x46>
 800b00a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b00c:	1ac0      	subs	r0, r0, r3
 800b00e:	2300      	movs	r3, #0
 800b010:	4602      	mov	r2, r0
 800b012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b014:	6a21      	ldr	r1, [r4, #32]
 800b016:	4628      	mov	r0, r5
 800b018:	47b0      	blx	r6
 800b01a:	1c43      	adds	r3, r0, #1
 800b01c:	89a3      	ldrh	r3, [r4, #12]
 800b01e:	d106      	bne.n	800b02e <__sflush_r+0x66>
 800b020:	6829      	ldr	r1, [r5, #0]
 800b022:	291d      	cmp	r1, #29
 800b024:	d82c      	bhi.n	800b080 <__sflush_r+0xb8>
 800b026:	4a2a      	ldr	r2, [pc, #168]	; (800b0d0 <__sflush_r+0x108>)
 800b028:	40ca      	lsrs	r2, r1
 800b02a:	07d6      	lsls	r6, r2, #31
 800b02c:	d528      	bpl.n	800b080 <__sflush_r+0xb8>
 800b02e:	2200      	movs	r2, #0
 800b030:	6062      	str	r2, [r4, #4]
 800b032:	04d9      	lsls	r1, r3, #19
 800b034:	6922      	ldr	r2, [r4, #16]
 800b036:	6022      	str	r2, [r4, #0]
 800b038:	d504      	bpl.n	800b044 <__sflush_r+0x7c>
 800b03a:	1c42      	adds	r2, r0, #1
 800b03c:	d101      	bne.n	800b042 <__sflush_r+0x7a>
 800b03e:	682b      	ldr	r3, [r5, #0]
 800b040:	b903      	cbnz	r3, 800b044 <__sflush_r+0x7c>
 800b042:	6560      	str	r0, [r4, #84]	; 0x54
 800b044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b046:	602f      	str	r7, [r5, #0]
 800b048:	2900      	cmp	r1, #0
 800b04a:	d0ca      	beq.n	800afe2 <__sflush_r+0x1a>
 800b04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b050:	4299      	cmp	r1, r3
 800b052:	d002      	beq.n	800b05a <__sflush_r+0x92>
 800b054:	4628      	mov	r0, r5
 800b056:	f7fb ff7d 	bl	8006f54 <_free_r>
 800b05a:	2000      	movs	r0, #0
 800b05c:	6360      	str	r0, [r4, #52]	; 0x34
 800b05e:	e7c1      	b.n	800afe4 <__sflush_r+0x1c>
 800b060:	6a21      	ldr	r1, [r4, #32]
 800b062:	2301      	movs	r3, #1
 800b064:	4628      	mov	r0, r5
 800b066:	47b0      	blx	r6
 800b068:	1c41      	adds	r1, r0, #1
 800b06a:	d1c7      	bne.n	800affc <__sflush_r+0x34>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0c4      	beq.n	800affc <__sflush_r+0x34>
 800b072:	2b1d      	cmp	r3, #29
 800b074:	d001      	beq.n	800b07a <__sflush_r+0xb2>
 800b076:	2b16      	cmp	r3, #22
 800b078:	d101      	bne.n	800b07e <__sflush_r+0xb6>
 800b07a:	602f      	str	r7, [r5, #0]
 800b07c:	e7b1      	b.n	800afe2 <__sflush_r+0x1a>
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	e7ad      	b.n	800afe4 <__sflush_r+0x1c>
 800b088:	690f      	ldr	r7, [r1, #16]
 800b08a:	2f00      	cmp	r7, #0
 800b08c:	d0a9      	beq.n	800afe2 <__sflush_r+0x1a>
 800b08e:	0793      	lsls	r3, r2, #30
 800b090:	680e      	ldr	r6, [r1, #0]
 800b092:	bf08      	it	eq
 800b094:	694b      	ldreq	r3, [r1, #20]
 800b096:	600f      	str	r7, [r1, #0]
 800b098:	bf18      	it	ne
 800b09a:	2300      	movne	r3, #0
 800b09c:	eba6 0807 	sub.w	r8, r6, r7
 800b0a0:	608b      	str	r3, [r1, #8]
 800b0a2:	f1b8 0f00 	cmp.w	r8, #0
 800b0a6:	dd9c      	ble.n	800afe2 <__sflush_r+0x1a>
 800b0a8:	6a21      	ldr	r1, [r4, #32]
 800b0aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0ac:	4643      	mov	r3, r8
 800b0ae:	463a      	mov	r2, r7
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	47b0      	blx	r6
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	dc06      	bgt.n	800b0c6 <__sflush_r+0xfe>
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0be:	81a3      	strh	r3, [r4, #12]
 800b0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c4:	e78e      	b.n	800afe4 <__sflush_r+0x1c>
 800b0c6:	4407      	add	r7, r0
 800b0c8:	eba8 0800 	sub.w	r8, r8, r0
 800b0cc:	e7e9      	b.n	800b0a2 <__sflush_r+0xda>
 800b0ce:	bf00      	nop
 800b0d0:	20400001 	.word	0x20400001

0800b0d4 <_fflush_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	690b      	ldr	r3, [r1, #16]
 800b0d8:	4605      	mov	r5, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	b913      	cbnz	r3, 800b0e4 <_fflush_r+0x10>
 800b0de:	2500      	movs	r5, #0
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	bd38      	pop	{r3, r4, r5, pc}
 800b0e4:	b118      	cbz	r0, 800b0ee <_fflush_r+0x1a>
 800b0e6:	6983      	ldr	r3, [r0, #24]
 800b0e8:	b90b      	cbnz	r3, 800b0ee <_fflush_r+0x1a>
 800b0ea:	f000 f887 	bl	800b1fc <__sinit>
 800b0ee:	4b14      	ldr	r3, [pc, #80]	; (800b140 <_fflush_r+0x6c>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d11b      	bne.n	800b12c <_fflush_r+0x58>
 800b0f4:	686c      	ldr	r4, [r5, #4]
 800b0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d0ef      	beq.n	800b0de <_fflush_r+0xa>
 800b0fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b100:	07d0      	lsls	r0, r2, #31
 800b102:	d404      	bmi.n	800b10e <_fflush_r+0x3a>
 800b104:	0599      	lsls	r1, r3, #22
 800b106:	d402      	bmi.n	800b10e <_fflush_r+0x3a>
 800b108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b10a:	f7f6 fbc8 	bl	800189e <__retarget_lock_acquire_recursive>
 800b10e:	4628      	mov	r0, r5
 800b110:	4621      	mov	r1, r4
 800b112:	f7ff ff59 	bl	800afc8 <__sflush_r>
 800b116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b118:	07da      	lsls	r2, r3, #31
 800b11a:	4605      	mov	r5, r0
 800b11c:	d4e0      	bmi.n	800b0e0 <_fflush_r+0xc>
 800b11e:	89a3      	ldrh	r3, [r4, #12]
 800b120:	059b      	lsls	r3, r3, #22
 800b122:	d4dd      	bmi.n	800b0e0 <_fflush_r+0xc>
 800b124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b126:	f7f6 fbce 	bl	80018c6 <__retarget_lock_release_recursive>
 800b12a:	e7d9      	b.n	800b0e0 <_fflush_r+0xc>
 800b12c:	4b05      	ldr	r3, [pc, #20]	; (800b144 <_fflush_r+0x70>)
 800b12e:	429c      	cmp	r4, r3
 800b130:	d101      	bne.n	800b136 <_fflush_r+0x62>
 800b132:	68ac      	ldr	r4, [r5, #8]
 800b134:	e7df      	b.n	800b0f6 <_fflush_r+0x22>
 800b136:	4b04      	ldr	r3, [pc, #16]	; (800b148 <_fflush_r+0x74>)
 800b138:	429c      	cmp	r4, r3
 800b13a:	bf08      	it	eq
 800b13c:	68ec      	ldreq	r4, [r5, #12]
 800b13e:	e7da      	b.n	800b0f6 <_fflush_r+0x22>
 800b140:	0800bd24 	.word	0x0800bd24
 800b144:	0800bd44 	.word	0x0800bd44
 800b148:	0800bd04 	.word	0x0800bd04

0800b14c <std>:
 800b14c:	2300      	movs	r3, #0
 800b14e:	b510      	push	{r4, lr}
 800b150:	4604      	mov	r4, r0
 800b152:	e9c0 3300 	strd	r3, r3, [r0]
 800b156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b15a:	6083      	str	r3, [r0, #8]
 800b15c:	8181      	strh	r1, [r0, #12]
 800b15e:	6643      	str	r3, [r0, #100]	; 0x64
 800b160:	81c2      	strh	r2, [r0, #14]
 800b162:	6183      	str	r3, [r0, #24]
 800b164:	4619      	mov	r1, r3
 800b166:	2208      	movs	r2, #8
 800b168:	305c      	adds	r0, #92	; 0x5c
 800b16a:	f7fb feeb 	bl	8006f44 <memset>
 800b16e:	4b05      	ldr	r3, [pc, #20]	; (800b184 <std+0x38>)
 800b170:	6263      	str	r3, [r4, #36]	; 0x24
 800b172:	4b05      	ldr	r3, [pc, #20]	; (800b188 <std+0x3c>)
 800b174:	62a3      	str	r3, [r4, #40]	; 0x28
 800b176:	4b05      	ldr	r3, [pc, #20]	; (800b18c <std+0x40>)
 800b178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b17a:	4b05      	ldr	r3, [pc, #20]	; (800b190 <std+0x44>)
 800b17c:	6224      	str	r4, [r4, #32]
 800b17e:	6323      	str	r3, [r4, #48]	; 0x30
 800b180:	bd10      	pop	{r4, pc}
 800b182:	bf00      	nop
 800b184:	0800b499 	.word	0x0800b499
 800b188:	0800b4bb 	.word	0x0800b4bb
 800b18c:	0800b4f3 	.word	0x0800b4f3
 800b190:	0800b517 	.word	0x0800b517

0800b194 <_cleanup_r>:
 800b194:	4901      	ldr	r1, [pc, #4]	; (800b19c <_cleanup_r+0x8>)
 800b196:	f000 b8af 	b.w	800b2f8 <_fwalk_reent>
 800b19a:	bf00      	nop
 800b19c:	0800b0d5 	.word	0x0800b0d5

0800b1a0 <__sfmoreglue>:
 800b1a0:	b570      	push	{r4, r5, r6, lr}
 800b1a2:	2268      	movs	r2, #104	; 0x68
 800b1a4:	1e4d      	subs	r5, r1, #1
 800b1a6:	4355      	muls	r5, r2
 800b1a8:	460e      	mov	r6, r1
 800b1aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1ae:	f7fb ff3d 	bl	800702c <_malloc_r>
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	b140      	cbz	r0, 800b1c8 <__sfmoreglue+0x28>
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	e9c0 1600 	strd	r1, r6, [r0]
 800b1bc:	300c      	adds	r0, #12
 800b1be:	60a0      	str	r0, [r4, #8]
 800b1c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1c4:	f7fb febe 	bl	8006f44 <memset>
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}

0800b1cc <__sfp_lock_acquire>:
 800b1cc:	4801      	ldr	r0, [pc, #4]	; (800b1d4 <__sfp_lock_acquire+0x8>)
 800b1ce:	f7f6 bb66 	b.w	800189e <__retarget_lock_acquire_recursive>
 800b1d2:	bf00      	nop
 800b1d4:	20000454 	.word	0x20000454

0800b1d8 <__sfp_lock_release>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__sfp_lock_release+0x8>)
 800b1da:	f7f6 bb74 	b.w	80018c6 <__retarget_lock_release_recursive>
 800b1de:	bf00      	nop
 800b1e0:	20000454 	.word	0x20000454

0800b1e4 <__sinit_lock_acquire>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__sinit_lock_acquire+0x8>)
 800b1e6:	f7f6 bb5a 	b.w	800189e <__retarget_lock_acquire_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	20000450 	.word	0x20000450

0800b1f0 <__sinit_lock_release>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__sinit_lock_release+0x8>)
 800b1f2:	f7f6 bb68 	b.w	80018c6 <__retarget_lock_release_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	20000450 	.word	0x20000450

0800b1fc <__sinit>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	4604      	mov	r4, r0
 800b200:	f7ff fff0 	bl	800b1e4 <__sinit_lock_acquire>
 800b204:	69a3      	ldr	r3, [r4, #24]
 800b206:	b11b      	cbz	r3, 800b210 <__sinit+0x14>
 800b208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b20c:	f7ff bff0 	b.w	800b1f0 <__sinit_lock_release>
 800b210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b214:	6523      	str	r3, [r4, #80]	; 0x50
 800b216:	4b13      	ldr	r3, [pc, #76]	; (800b264 <__sinit+0x68>)
 800b218:	4a13      	ldr	r2, [pc, #76]	; (800b268 <__sinit+0x6c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b21e:	42a3      	cmp	r3, r4
 800b220:	bf04      	itt	eq
 800b222:	2301      	moveq	r3, #1
 800b224:	61a3      	streq	r3, [r4, #24]
 800b226:	4620      	mov	r0, r4
 800b228:	f000 f820 	bl	800b26c <__sfp>
 800b22c:	6060      	str	r0, [r4, #4]
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 f81c 	bl	800b26c <__sfp>
 800b234:	60a0      	str	r0, [r4, #8]
 800b236:	4620      	mov	r0, r4
 800b238:	f000 f818 	bl	800b26c <__sfp>
 800b23c:	2200      	movs	r2, #0
 800b23e:	60e0      	str	r0, [r4, #12]
 800b240:	2104      	movs	r1, #4
 800b242:	6860      	ldr	r0, [r4, #4]
 800b244:	f7ff ff82 	bl	800b14c <std>
 800b248:	68a0      	ldr	r0, [r4, #8]
 800b24a:	2201      	movs	r2, #1
 800b24c:	2109      	movs	r1, #9
 800b24e:	f7ff ff7d 	bl	800b14c <std>
 800b252:	68e0      	ldr	r0, [r4, #12]
 800b254:	2202      	movs	r2, #2
 800b256:	2112      	movs	r1, #18
 800b258:	f7ff ff78 	bl	800b14c <std>
 800b25c:	2301      	movs	r3, #1
 800b25e:	61a3      	str	r3, [r4, #24]
 800b260:	e7d2      	b.n	800b208 <__sinit+0xc>
 800b262:	bf00      	nop
 800b264:	0800b858 	.word	0x0800b858
 800b268:	0800b195 	.word	0x0800b195

0800b26c <__sfp>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	4607      	mov	r7, r0
 800b270:	f7ff ffac 	bl	800b1cc <__sfp_lock_acquire>
 800b274:	4b1e      	ldr	r3, [pc, #120]	; (800b2f0 <__sfp+0x84>)
 800b276:	681e      	ldr	r6, [r3, #0]
 800b278:	69b3      	ldr	r3, [r6, #24]
 800b27a:	b913      	cbnz	r3, 800b282 <__sfp+0x16>
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff ffbd 	bl	800b1fc <__sinit>
 800b282:	3648      	adds	r6, #72	; 0x48
 800b284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b288:	3b01      	subs	r3, #1
 800b28a:	d503      	bpl.n	800b294 <__sfp+0x28>
 800b28c:	6833      	ldr	r3, [r6, #0]
 800b28e:	b30b      	cbz	r3, 800b2d4 <__sfp+0x68>
 800b290:	6836      	ldr	r6, [r6, #0]
 800b292:	e7f7      	b.n	800b284 <__sfp+0x18>
 800b294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b298:	b9d5      	cbnz	r5, 800b2d0 <__sfp+0x64>
 800b29a:	4b16      	ldr	r3, [pc, #88]	; (800b2f4 <__sfp+0x88>)
 800b29c:	60e3      	str	r3, [r4, #12]
 800b29e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2a2:	6665      	str	r5, [r4, #100]	; 0x64
 800b2a4:	f7f6 fad5 	bl	8001852 <__retarget_lock_init_recursive>
 800b2a8:	f7ff ff96 	bl	800b1d8 <__sfp_lock_release>
 800b2ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2b4:	6025      	str	r5, [r4, #0]
 800b2b6:	61a5      	str	r5, [r4, #24]
 800b2b8:	2208      	movs	r2, #8
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2c0:	f7fb fe40 	bl	8006f44 <memset>
 800b2c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2d0:	3468      	adds	r4, #104	; 0x68
 800b2d2:	e7d9      	b.n	800b288 <__sfp+0x1c>
 800b2d4:	2104      	movs	r1, #4
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f7ff ff62 	bl	800b1a0 <__sfmoreglue>
 800b2dc:	4604      	mov	r4, r0
 800b2de:	6030      	str	r0, [r6, #0]
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d1d5      	bne.n	800b290 <__sfp+0x24>
 800b2e4:	f7ff ff78 	bl	800b1d8 <__sfp_lock_release>
 800b2e8:	230c      	movs	r3, #12
 800b2ea:	603b      	str	r3, [r7, #0]
 800b2ec:	e7ee      	b.n	800b2cc <__sfp+0x60>
 800b2ee:	bf00      	nop
 800b2f0:	0800b858 	.word	0x0800b858
 800b2f4:	ffff0001 	.word	0xffff0001

0800b2f8 <_fwalk_reent>:
 800b2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2fc:	4606      	mov	r6, r0
 800b2fe:	4688      	mov	r8, r1
 800b300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b304:	2700      	movs	r7, #0
 800b306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b30a:	f1b9 0901 	subs.w	r9, r9, #1
 800b30e:	d505      	bpl.n	800b31c <_fwalk_reent+0x24>
 800b310:	6824      	ldr	r4, [r4, #0]
 800b312:	2c00      	cmp	r4, #0
 800b314:	d1f7      	bne.n	800b306 <_fwalk_reent+0xe>
 800b316:	4638      	mov	r0, r7
 800b318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b31c:	89ab      	ldrh	r3, [r5, #12]
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d907      	bls.n	800b332 <_fwalk_reent+0x3a>
 800b322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b326:	3301      	adds	r3, #1
 800b328:	d003      	beq.n	800b332 <_fwalk_reent+0x3a>
 800b32a:	4629      	mov	r1, r5
 800b32c:	4630      	mov	r0, r6
 800b32e:	47c0      	blx	r8
 800b330:	4307      	orrs	r7, r0
 800b332:	3568      	adds	r5, #104	; 0x68
 800b334:	e7e9      	b.n	800b30a <_fwalk_reent+0x12>

0800b336 <__swhatbuf_r>:
 800b336:	b570      	push	{r4, r5, r6, lr}
 800b338:	460e      	mov	r6, r1
 800b33a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b33e:	2900      	cmp	r1, #0
 800b340:	b096      	sub	sp, #88	; 0x58
 800b342:	4614      	mov	r4, r2
 800b344:	461d      	mov	r5, r3
 800b346:	da08      	bge.n	800b35a <__swhatbuf_r+0x24>
 800b348:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	602a      	str	r2, [r5, #0]
 800b350:	061a      	lsls	r2, r3, #24
 800b352:	d410      	bmi.n	800b376 <__swhatbuf_r+0x40>
 800b354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b358:	e00e      	b.n	800b378 <__swhatbuf_r+0x42>
 800b35a:	466a      	mov	r2, sp
 800b35c:	f000 f902 	bl	800b564 <_fstat_r>
 800b360:	2800      	cmp	r0, #0
 800b362:	dbf1      	blt.n	800b348 <__swhatbuf_r+0x12>
 800b364:	9a01      	ldr	r2, [sp, #4]
 800b366:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b36a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b36e:	425a      	negs	r2, r3
 800b370:	415a      	adcs	r2, r3
 800b372:	602a      	str	r2, [r5, #0]
 800b374:	e7ee      	b.n	800b354 <__swhatbuf_r+0x1e>
 800b376:	2340      	movs	r3, #64	; 0x40
 800b378:	2000      	movs	r0, #0
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	b016      	add	sp, #88	; 0x58
 800b37e:	bd70      	pop	{r4, r5, r6, pc}

0800b380 <__smakebuf_r>:
 800b380:	898b      	ldrh	r3, [r1, #12]
 800b382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b384:	079d      	lsls	r5, r3, #30
 800b386:	4606      	mov	r6, r0
 800b388:	460c      	mov	r4, r1
 800b38a:	d507      	bpl.n	800b39c <__smakebuf_r+0x1c>
 800b38c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	2301      	movs	r3, #1
 800b396:	6163      	str	r3, [r4, #20]
 800b398:	b002      	add	sp, #8
 800b39a:	bd70      	pop	{r4, r5, r6, pc}
 800b39c:	ab01      	add	r3, sp, #4
 800b39e:	466a      	mov	r2, sp
 800b3a0:	f7ff ffc9 	bl	800b336 <__swhatbuf_r>
 800b3a4:	9900      	ldr	r1, [sp, #0]
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7fb fe3f 	bl	800702c <_malloc_r>
 800b3ae:	b948      	cbnz	r0, 800b3c4 <__smakebuf_r+0x44>
 800b3b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3b4:	059a      	lsls	r2, r3, #22
 800b3b6:	d4ef      	bmi.n	800b398 <__smakebuf_r+0x18>
 800b3b8:	f023 0303 	bic.w	r3, r3, #3
 800b3bc:	f043 0302 	orr.w	r3, r3, #2
 800b3c0:	81a3      	strh	r3, [r4, #12]
 800b3c2:	e7e3      	b.n	800b38c <__smakebuf_r+0xc>
 800b3c4:	4b0d      	ldr	r3, [pc, #52]	; (800b3fc <__smakebuf_r+0x7c>)
 800b3c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	6020      	str	r0, [r4, #0]
 800b3cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3d0:	81a3      	strh	r3, [r4, #12]
 800b3d2:	9b00      	ldr	r3, [sp, #0]
 800b3d4:	6163      	str	r3, [r4, #20]
 800b3d6:	9b01      	ldr	r3, [sp, #4]
 800b3d8:	6120      	str	r0, [r4, #16]
 800b3da:	b15b      	cbz	r3, 800b3f4 <__smakebuf_r+0x74>
 800b3dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f000 f8d1 	bl	800b588 <_isatty_r>
 800b3e6:	b128      	cbz	r0, 800b3f4 <__smakebuf_r+0x74>
 800b3e8:	89a3      	ldrh	r3, [r4, #12]
 800b3ea:	f023 0303 	bic.w	r3, r3, #3
 800b3ee:	f043 0301 	orr.w	r3, r3, #1
 800b3f2:	81a3      	strh	r3, [r4, #12]
 800b3f4:	89a0      	ldrh	r0, [r4, #12]
 800b3f6:	4305      	orrs	r5, r0
 800b3f8:	81a5      	strh	r5, [r4, #12]
 800b3fa:	e7cd      	b.n	800b398 <__smakebuf_r+0x18>
 800b3fc:	0800b195 	.word	0x0800b195

0800b400 <_malloc_usable_size_r>:
 800b400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b404:	1f18      	subs	r0, r3, #4
 800b406:	2b00      	cmp	r3, #0
 800b408:	bfbc      	itt	lt
 800b40a:	580b      	ldrlt	r3, [r1, r0]
 800b40c:	18c0      	addlt	r0, r0, r3
 800b40e:	4770      	bx	lr

0800b410 <_raise_r>:
 800b410:	291f      	cmp	r1, #31
 800b412:	b538      	push	{r3, r4, r5, lr}
 800b414:	4604      	mov	r4, r0
 800b416:	460d      	mov	r5, r1
 800b418:	d904      	bls.n	800b424 <_raise_r+0x14>
 800b41a:	2316      	movs	r3, #22
 800b41c:	6003      	str	r3, [r0, #0]
 800b41e:	f04f 30ff 	mov.w	r0, #4294967295
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b426:	b112      	cbz	r2, 800b42e <_raise_r+0x1e>
 800b428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b42c:	b94b      	cbnz	r3, 800b442 <_raise_r+0x32>
 800b42e:	4620      	mov	r0, r4
 800b430:	f000 f830 	bl	800b494 <_getpid_r>
 800b434:	462a      	mov	r2, r5
 800b436:	4601      	mov	r1, r0
 800b438:	4620      	mov	r0, r4
 800b43a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b43e:	f000 b817 	b.w	800b470 <_kill_r>
 800b442:	2b01      	cmp	r3, #1
 800b444:	d00a      	beq.n	800b45c <_raise_r+0x4c>
 800b446:	1c59      	adds	r1, r3, #1
 800b448:	d103      	bne.n	800b452 <_raise_r+0x42>
 800b44a:	2316      	movs	r3, #22
 800b44c:	6003      	str	r3, [r0, #0]
 800b44e:	2001      	movs	r0, #1
 800b450:	e7e7      	b.n	800b422 <_raise_r+0x12>
 800b452:	2400      	movs	r4, #0
 800b454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b458:	4628      	mov	r0, r5
 800b45a:	4798      	blx	r3
 800b45c:	2000      	movs	r0, #0
 800b45e:	e7e0      	b.n	800b422 <_raise_r+0x12>

0800b460 <raise>:
 800b460:	4b02      	ldr	r3, [pc, #8]	; (800b46c <raise+0xc>)
 800b462:	4601      	mov	r1, r0
 800b464:	6818      	ldr	r0, [r3, #0]
 800b466:	f7ff bfd3 	b.w	800b410 <_raise_r>
 800b46a:	bf00      	nop
 800b46c:	2000001c 	.word	0x2000001c

0800b470 <_kill_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4d07      	ldr	r5, [pc, #28]	; (800b490 <_kill_r+0x20>)
 800b474:	2300      	movs	r3, #0
 800b476:	4604      	mov	r4, r0
 800b478:	4608      	mov	r0, r1
 800b47a:	4611      	mov	r1, r2
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	f7f5 fee5 	bl	800124c <_kill>
 800b482:	1c43      	adds	r3, r0, #1
 800b484:	d102      	bne.n	800b48c <_kill_r+0x1c>
 800b486:	682b      	ldr	r3, [r5, #0]
 800b488:	b103      	cbz	r3, 800b48c <_kill_r+0x1c>
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
 800b48e:	bf00      	nop
 800b490:	20000468 	.word	0x20000468

0800b494 <_getpid_r>:
 800b494:	f7f5 bed2 	b.w	800123c <_getpid>

0800b498 <__sread>:
 800b498:	b510      	push	{r4, lr}
 800b49a:	460c      	mov	r4, r1
 800b49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a0:	f000 f894 	bl	800b5cc <_read_r>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	bfab      	itete	ge
 800b4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4aa:	89a3      	ldrhlt	r3, [r4, #12]
 800b4ac:	181b      	addge	r3, r3, r0
 800b4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4b2:	bfac      	ite	ge
 800b4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4b6:	81a3      	strhlt	r3, [r4, #12]
 800b4b8:	bd10      	pop	{r4, pc}

0800b4ba <__swrite>:
 800b4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4be:	461f      	mov	r7, r3
 800b4c0:	898b      	ldrh	r3, [r1, #12]
 800b4c2:	05db      	lsls	r3, r3, #23
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	4616      	mov	r6, r2
 800b4ca:	d505      	bpl.n	800b4d8 <__swrite+0x1e>
 800b4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f000 f868 	bl	800b5a8 <_lseek_r>
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4e2:	81a3      	strh	r3, [r4, #12]
 800b4e4:	4632      	mov	r2, r6
 800b4e6:	463b      	mov	r3, r7
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ee:	f000 b817 	b.w	800b520 <_write_r>

0800b4f2 <__sseek>:
 800b4f2:	b510      	push	{r4, lr}
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fa:	f000 f855 	bl	800b5a8 <_lseek_r>
 800b4fe:	1c43      	adds	r3, r0, #1
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	bf15      	itete	ne
 800b504:	6560      	strne	r0, [r4, #84]	; 0x54
 800b506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b50e:	81a3      	strheq	r3, [r4, #12]
 800b510:	bf18      	it	ne
 800b512:	81a3      	strhne	r3, [r4, #12]
 800b514:	bd10      	pop	{r4, pc}

0800b516 <__sclose>:
 800b516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b51a:	f000 b813 	b.w	800b544 <_close_r>
	...

0800b520 <_write_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d07      	ldr	r5, [pc, #28]	; (800b540 <_write_r+0x20>)
 800b524:	4604      	mov	r4, r0
 800b526:	4608      	mov	r0, r1
 800b528:	4611      	mov	r1, r2
 800b52a:	2200      	movs	r2, #0
 800b52c:	602a      	str	r2, [r5, #0]
 800b52e:	461a      	mov	r2, r3
 800b530:	f7f5 fec3 	bl	80012ba <_write>
 800b534:	1c43      	adds	r3, r0, #1
 800b536:	d102      	bne.n	800b53e <_write_r+0x1e>
 800b538:	682b      	ldr	r3, [r5, #0]
 800b53a:	b103      	cbz	r3, 800b53e <_write_r+0x1e>
 800b53c:	6023      	str	r3, [r4, #0]
 800b53e:	bd38      	pop	{r3, r4, r5, pc}
 800b540:	20000468 	.word	0x20000468

0800b544 <_close_r>:
 800b544:	b538      	push	{r3, r4, r5, lr}
 800b546:	4d06      	ldr	r5, [pc, #24]	; (800b560 <_close_r+0x1c>)
 800b548:	2300      	movs	r3, #0
 800b54a:	4604      	mov	r4, r0
 800b54c:	4608      	mov	r0, r1
 800b54e:	602b      	str	r3, [r5, #0]
 800b550:	f7f5 fecf 	bl	80012f2 <_close>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_close_r+0x1a>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_close_r+0x1a>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	20000468 	.word	0x20000468

0800b564 <_fstat_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d07      	ldr	r5, [pc, #28]	; (800b584 <_fstat_r+0x20>)
 800b568:	2300      	movs	r3, #0
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	602b      	str	r3, [r5, #0]
 800b572:	f7f5 feca 	bl	800130a <_fstat>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	d102      	bne.n	800b580 <_fstat_r+0x1c>
 800b57a:	682b      	ldr	r3, [r5, #0]
 800b57c:	b103      	cbz	r3, 800b580 <_fstat_r+0x1c>
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	bd38      	pop	{r3, r4, r5, pc}
 800b582:	bf00      	nop
 800b584:	20000468 	.word	0x20000468

0800b588 <_isatty_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4d06      	ldr	r5, [pc, #24]	; (800b5a4 <_isatty_r+0x1c>)
 800b58c:	2300      	movs	r3, #0
 800b58e:	4604      	mov	r4, r0
 800b590:	4608      	mov	r0, r1
 800b592:	602b      	str	r3, [r5, #0]
 800b594:	f7f5 fec9 	bl	800132a <_isatty>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_isatty_r+0x1a>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_isatty_r+0x1a>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	20000468 	.word	0x20000468

0800b5a8 <_lseek_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	; (800b5c8 <_lseek_r+0x20>)
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	4608      	mov	r0, r1
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	602a      	str	r2, [r5, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f7f5 fec2 	bl	8001340 <_lseek>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d102      	bne.n	800b5c6 <_lseek_r+0x1e>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	b103      	cbz	r3, 800b5c6 <_lseek_r+0x1e>
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	20000468 	.word	0x20000468

0800b5cc <_read_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d07      	ldr	r5, [pc, #28]	; (800b5ec <_read_r+0x20>)
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	4608      	mov	r0, r1
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	602a      	str	r2, [r5, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	f7f5 fe50 	bl	8001280 <_read>
 800b5e0:	1c43      	adds	r3, r0, #1
 800b5e2:	d102      	bne.n	800b5ea <_read_r+0x1e>
 800b5e4:	682b      	ldr	r3, [r5, #0]
 800b5e6:	b103      	cbz	r3, 800b5ea <_read_r+0x1e>
 800b5e8:	6023      	str	r3, [r4, #0]
 800b5ea:	bd38      	pop	{r3, r4, r5, pc}
 800b5ec:	20000468 	.word	0x20000468

0800b5f0 <_init>:
 800b5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f2:	bf00      	nop
 800b5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f6:	bc08      	pop	{r3}
 800b5f8:	469e      	mov	lr, r3
 800b5fa:	4770      	bx	lr

0800b5fc <_fini>:
 800b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fe:	bf00      	nop
 800b600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b602:	bc08      	pop	{r3}
 800b604:	469e      	mov	lr, r3
 800b606:	4770      	bx	lr
