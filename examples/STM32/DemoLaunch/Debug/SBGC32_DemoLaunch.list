
SBGC32_DemoLaunch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb98  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001774  0800bd98  0800bd98  0001bd98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d50c  0800d50c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d50c  0800d50c  0001d50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d514  0800d514  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d514  0800d514  0001d514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d518  0800d518  0001d518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d51c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200001e0  0800d6fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  0800d6fc  00020900  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c151  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003263  00000000  00000000  0003c35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  000408b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa13  00000000  00000000  00041a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014915  00000000  00000000  0006c423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103165  00000000  00000000  00080d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  00183e9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d4  00000000  00000000  00183ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bd80 	.word	0x0800bd80

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800bd80 	.word	0x0800bd80

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <MX_GPIO_Init+0x44>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_GPIO_Init+0x44>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <FormatBoardVersion>:
 *
 *	@param	boardVer - BoardInfo_t.boardVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatBoardVersion (ui8 boardVer, char* pBuff)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
	ui8 majorVer = boardVer / 10;
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <FormatBoardVersion+0x44>)
 8000a34:	fba2 2303 	umull	r2, r3, r2, r3
 8000a38:	08db      	lsrs	r3, r3, #3
 8000a3a:	73fb      	strb	r3, [r7, #15]
	ui8 minorVer = boardVer % 10;
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <FormatBoardVersion+0x44>)
 8000a40:	fba3 1302 	umull	r1, r3, r3, r2
 8000a44:	08d9      	lsrs	r1, r3, #3
 8000a46:	460b      	mov	r3, r1
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	73bb      	strb	r3, [r7, #14]
	sprintf(pBuff, "%u.%u", majorVer, minorVer);
 8000a52:	7bfa      	ldrb	r2, [r7, #15]
 8000a54:	7bbb      	ldrb	r3, [r7, #14]
 8000a56:	4905      	ldr	r1, [pc, #20]	; (8000a6c <FormatBoardVersion+0x48>)
 8000a58:	6838      	ldr	r0, [r7, #0]
 8000a5a:	f007 fd83 	bl	8008564 <siprintf>
}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	cccccccd 	.word	0xcccccccd
 8000a6c:	0800bd98 	.word	0x0800bd98

08000a70 <FormatFirmwareVersion>:
 *
 *	@param	firmwareVer - BoardInfo_t.firmwareVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatFirmwareVersion (ui16 firmwareVer, char* pBuff)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	80fb      	strh	r3, [r7, #6]
	ui8 majorVer = firmwareVer / 1000;
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <FormatFirmwareVersion+0x84>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	099b      	lsrs	r3, r3, #6
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	73fb      	strb	r3, [r7, #15]
	ui8 minorVer = (firmwareVer % 1000) / 10;
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <FormatFirmwareVersion+0x84>)
 8000a8e:	fba2 1203 	umull	r1, r2, r2, r3
 8000a92:	0992      	lsrs	r2, r2, #6
 8000a94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a98:	fb01 f202 	mul.w	r2, r1, r2
 8000a9c:	1a9b      	subs	r3, r3, r2
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <FormatFirmwareVersion+0x88>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	73bb      	strb	r3, [r7, #14]
	ui8 betaVer = firmwareVer % 10;
 8000aac:	88fa      	ldrh	r2, [r7, #6]
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <FormatFirmwareVersion+0x88>)
 8000ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab4:	08d9      	lsrs	r1, r3, #3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	440b      	add	r3, r1
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	737b      	strb	r3, [r7, #13]

	if (betaVer != 0)
 8000ac4:	7b7b      	ldrb	r3, [r7, #13]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d009      	beq.n	8000ade <FormatFirmwareVersion+0x6e>
		sprintf(pBuff, "%u.%ub%u", majorVer, minorVer, betaVer);
 8000aca:	7bfa      	ldrb	r2, [r7, #15]
 8000acc:	7bb9      	ldrb	r1, [r7, #14]
 8000ace:	7b7b      	ldrb	r3, [r7, #13]
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	4909      	ldr	r1, [pc, #36]	; (8000afc <FormatFirmwareVersion+0x8c>)
 8000ad6:	6838      	ldr	r0, [r7, #0]
 8000ad8:	f007 fd44 	bl	8008564 <siprintf>

	else
		sprintf(pBuff, "%u.%u", majorVer, minorVer);
}
 8000adc:	e005      	b.n	8000aea <FormatFirmwareVersion+0x7a>
		sprintf(pBuff, "%u.%u", majorVer, minorVer);
 8000ade:	7bfa      	ldrb	r2, [r7, #15]
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
 8000ae2:	4907      	ldr	r1, [pc, #28]	; (8000b00 <FormatFirmwareVersion+0x90>)
 8000ae4:	6838      	ldr	r0, [r7, #0]
 8000ae6:	f007 fd3d 	bl	8008564 <siprintf>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	10624dd3 	.word	0x10624dd3
 8000af8:	cccccccd 	.word	0xcccccccd
 8000afc:	0800bda0 	.word	0x0800bda0
 8000b00:	0800bd98 	.word	0x0800bd98

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b0a:	f001 f880 	bl	8001c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0e:	f000 f8cb 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b12:	f7ff ff63 	bl	80009dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b16:	f000 fdf9 	bl	800170c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b1a:	f000 fe69 	bl	80017f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b1e:	f000 fe97 	bl	8001850 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/*  - - - - - - - - SBGC Hardware-Software Init - - - - - - - - - */

	/* Driver Init */
	SBGC_1.Drv = malloc(sizeof(Driver_t));
 8000b22:	f44f 7006 	mov.w	r0, #536	; 0x218
 8000b26:	f006 fdbf 	bl	80076a8 <malloc>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b4b      	ldr	r3, [pc, #300]	; (8000c5c <main+0x158>)
 8000b30:	601a      	str	r2, [r3, #0]
	DriverInit(SBGC_1.Drv, SBGC_SERIAL_PORT, INTERNAL_MAIN_TIMER);
 8000b32:	4b4a      	ldr	r3, [pc, #296]	; (8000c5c <main+0x158>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a4a      	ldr	r2, [pc, #296]	; (8000c60 <main+0x15c>)
 8000b38:	494a      	ldr	r1, [pc, #296]	; (8000c64 <main+0x160>)
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f004 fab8 	bl	80050b0 <DriverInit>

	/* SimpleBGC32 Init */
	SBGC32_DefaultInit(&SBGC_1, UartTransmitData, UartReceiveByte, GetAvailableBytes,
 8000b40:	2324      	movs	r3, #36	; 0x24
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <main+0x164>)
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	4b48      	ldr	r3, [pc, #288]	; (8000c6c <main+0x168>)
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	4b48      	ldr	r3, [pc, #288]	; (8000c70 <main+0x16c>)
 8000b4e:	4a49      	ldr	r2, [pc, #292]	; (8000c74 <main+0x170>)
 8000b50:	4949      	ldr	r1, [pc, #292]	; (8000c78 <main+0x174>)
 8000b52:	4842      	ldr	r0, [pc, #264]	; (8000c5c <main+0x158>)
 8000b54:	f005 fbdc 	bl	8006310 <SBGC32_DefaultInit>
			  		   UartTransmitDebugData, GetTimeMs, SBGC_PROTOCOL_V2);

	/* - - - - - - - - - High Layer Software Init - - - - - - - - - - */

	/* Control Configurations */
	ControlConfig.AxisCC[ROLL].angleLPF = 6;
 8000b58:	4b48      	ldr	r3, [pc, #288]	; (8000c7c <main+0x178>)
 8000b5a:	2206      	movs	r2, #6
 8000b5c:	71da      	strb	r2, [r3, #7]
	ControlConfig.AxisCC[PITCH].angleLPF = 6;
 8000b5e:	4b47      	ldr	r3, [pc, #284]	; (8000c7c <main+0x178>)
 8000b60:	2206      	movs	r2, #6
 8000b62:	739a      	strb	r2, [r3, #14]
	ControlConfig.AxisCC[YAW].angleLPF = 7;
 8000b64:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <main+0x178>)
 8000b66:	2207      	movs	r2, #7
 8000b68:	755a      	strb	r2, [r3, #21]

	ControlConfig.AxisCC[ROLL].angleLPF = 6;
 8000b6a:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <main+0x178>)
 8000b6c:	2206      	movs	r2, #6
 8000b6e:	71da      	strb	r2, [r3, #7]
	ControlConfig.AxisCC[PITCH].speedLPF = 6;
 8000b70:	4b42      	ldr	r3, [pc, #264]	; (8000c7c <main+0x178>)
 8000b72:	2206      	movs	r2, #6
 8000b74:	73da      	strb	r2, [r3, #15]
	ControlConfig.AxisCC[YAW].speedLPF = 7;
 8000b76:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <main+0x178>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	759a      	strb	r2, [r3, #22]
	ControlConfig.flags = RTCCF_CONTROL_CONFIG_FLAG_NO_CONFIRM;
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	; (8000c7c <main+0x178>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f042 0201 	orr.w	r2, r2, #1
 8000b84:	775a      	strb	r2, [r3, #29]
 8000b86:	2200      	movs	r2, #0
 8000b88:	779a      	strb	r2, [r3, #30]

	Control.controlMode[ROLL] = CtrlM_MODE_ANGLE | CtrlF_CONTROL_FLAG_TARGET_PRECISE;
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <main+0x17c>)
 8000b8c:	2222      	movs	r2, #34	; 0x22
 8000b8e:	701a      	strb	r2, [r3, #0]
	Control.controlMode[PITCH] = CtrlM_MODE_ANGLE | CtrlF_CONTROL_FLAG_TARGET_PRECISE;
 8000b90:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <main+0x17c>)
 8000b92:	2222      	movs	r2, #34	; 0x22
 8000b94:	705a      	strb	r2, [r3, #1]
	Control.controlMode[YAW] = CtrlM_MODE_ANGLE | CtrlF_CONTROL_FLAG_TARGET_PRECISE;
 8000b96:	4b3a      	ldr	r3, [pc, #232]	; (8000c80 <main+0x17c>)
 8000b98:	2222      	movs	r2, #34	; 0x22
 8000b9a:	709a      	strb	r2, [r3, #2]

	Control.AxisC[ROLL].angle = 0;
 8000b9c:	4b38      	ldr	r3, [pc, #224]	; (8000c80 <main+0x17c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	719a      	strb	r2, [r3, #6]
	Control.AxisC[PITCH].angle = 0;
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <main+0x17c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	725a      	strb	r2, [r3, #9]
 8000bac:	2200      	movs	r2, #0
 8000bae:	729a      	strb	r2, [r3, #10]
	Control.AxisC[YAW].angle = 0;
 8000bb0:	4b33      	ldr	r3, [pc, #204]	; (8000c80 <main+0x17c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	735a      	strb	r2, [r3, #13]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	739a      	strb	r2, [r3, #14]

	Control.AxisC[PITCH].speed = SPEED_TO_VALUE(50);
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <main+0x17c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f062 0266 	orn	r2, r2, #102	; 0x66
 8000bc2:	71da      	strb	r2, [r3, #7]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f042 0201 	orr.w	r2, r2, #1
 8000bca:	721a      	strb	r2, [r3, #8]
	Control.AxisC[YAW].speed = SPEED_TO_VALUE(50);
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <main+0x17c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f062 0266 	orn	r2, r2, #102	; 0x66
 8000bd4:	72da      	strb	r2, [r3, #11]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f042 0201 	orr.w	r2, r2, #1
 8000bdc:	731a      	strb	r2, [r3, #12]

	/* Data Stream Configurations */
	DataStreamInterval.cmdID = CMD_REALTIME_DATA_CUSTOM;
 8000bde:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <main+0x180>)
 8000be0:	2258      	movs	r2, #88	; 0x58
 8000be2:	701a      	strb	r2, [r3, #0]
	DataStreamInterval.intervalMs = 1000;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <main+0x180>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	f062 0217 	orn	r2, r2, #23
 8000bec:	705a      	strb	r2, [r3, #1]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f042 0203 	orr.w	r2, r2, #3
 8000bf4:	709a      	strb	r2, [r3, #2]
	DataStreamInterval.syncToData = STD_SYNC_OFF;
 8000bf6:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <main+0x180>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	72da      	strb	r2, [r3, #11]

	/* For more information see the SBGC32_RequestRealTimeDataCustom function.
	   Total packets length = 20 bytes:
	   ui16 timestampMs						 i16 [3]				i16 [3]			i16 [3] */
	ui32 DataStreamIntervalConfig = RTDCF_STATOR_ROTOR_ANGLE | RTDCF_GYRO_DATA | RTDCF_ACC_DATA;
 8000bfc:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
	memcpy(DataStreamInterval.config, &DataStreamIntervalConfig, sizeof(DataStreamIntervalConfig));
 8000c04:	4a1f      	ldr	r2, [pc, #124]	; (8000c84 <main+0x180>)
 8000c06:	f8c2 3003 	str.w	r3, [r2, #3]

	/* Adj Vars Setting */
	/* Note: If your microprocessor has little size of RAM,
			 initialize these variables manually,
			 without AdjVarsDebugInfoArray [] */
	InitAdjVar(&AdjVarsGeneral[0], &AdjVarsDebugInfoArray[ADJ_VAL_ACC_LIMITER_ROLL]);
 8000c0a:	491f      	ldr	r1, [pc, #124]	; (8000c88 <main+0x184>)
 8000c0c:	481f      	ldr	r0, [pc, #124]	; (8000c8c <main+0x188>)
 8000c0e:	f004 fc51 	bl	80054b4 <InitAdjVar>
	InitAdjVar(&AdjVarsGeneral[1], &AdjVarsDebugInfoArray[ADJ_VAL_ACC_LIMITER_PITCH]);
 8000c12:	491f      	ldr	r1, [pc, #124]	; (8000c90 <main+0x18c>)
 8000c14:	481f      	ldr	r0, [pc, #124]	; (8000c94 <main+0x190>)
 8000c16:	f004 fc4d 	bl	80054b4 <InitAdjVar>
	InitAdjVar(&AdjVarsGeneral[2], &AdjVarsDebugInfoArray[ADJ_VAL_ACC_LIMITER_YAW]);
 8000c1a:	491f      	ldr	r1, [pc, #124]	; (8000c98 <main+0x194>)
 8000c1c:	481f      	ldr	r0, [pc, #124]	; (8000c9c <main+0x198>)
 8000c1e:	f004 fc49 	bl	80054b4 <InitAdjVar>

	/* SBGC32_Reset(&SBGC_1, RF_RESET_WITH_RESTORING_STATES, 500);
	SBGC32_CheckConfirmation(&SBGC_1, &Confirm, CMD_RESET);
	delay(5000); */

	PrintBoardParameters(P_CURRENT_PROFILE);
 8000c22:	20ff      	movs	r0, #255	; 0xff
 8000c24:	f000 f8ae 	bl	8000d84 <PrintBoardParameters>

	SBGC32_ControlConfig(&SBGC_1, &ControlConfig, &Confirm);
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <main+0x19c>)
 8000c2a:	4914      	ldr	r1, [pc, #80]	; (8000c7c <main+0x178>)
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <main+0x158>)
 8000c2e:	f006 f8f7 	bl	8006e20 <SBGC32_ControlConfig>
	SBGC32_DemoControl();
 8000c32:	f000 fa79 	bl	8001128 <SBGC32_DemoControl>

	SBGC32_RequestDataStream(&SBGC_1, &DataStreamInterval, &Confirm);
 8000c36:	4a1a      	ldr	r2, [pc, #104]	; (8000ca0 <main+0x19c>)
 8000c38:	4912      	ldr	r1, [pc, #72]	; (8000c84 <main+0x180>)
 8000c3a:	4808      	ldr	r0, [pc, #32]	; (8000c5c <main+0x158>)
 8000c3c:	f006 faa2 	bl	8007184 <SBGC32_RequestDataStream>

	  	/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ */
		/*                     Start Worker Cycle                     */
		/* __________________________________________________________ */

		SBGC32_ParseDataStream(&SBGC_1, DataStreamBuff, (SBGC_Commands_t)DataStreamInterval.cmdID);
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <main+0x180>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4917      	ldr	r1, [pc, #92]	; (8000ca4 <main+0x1a0>)
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <main+0x158>)
 8000c4a:	f006 fae5 	bl	8007218 <SBGC32_ParseDataStream>
		PrintDataStream(DataStreamBuff);
 8000c4e:	4815      	ldr	r0, [pc, #84]	; (8000ca4 <main+0x1a0>)
 8000c50:	f000 fb4c 	bl	80012ec <PrintDataStream>

		HAL_Delay(20);
 8000c54:	2014      	movs	r0, #20
 8000c56:	f001 f837 	bl	8001cc8 <HAL_Delay>
		SBGC32_ParseDataStream(&SBGC_1, DataStreamBuff, (SBGC_Commands_t)DataStreamInterval.cmdID);
 8000c5a:	e7f1      	b.n	8000c40 <main+0x13c>
 8000c5c:	200001fc 	.word	0x200001fc
 8000c60:	20000790 	.word	0x20000790
 8000c64:	200007dc 	.word	0x200007dc
 8000c68:	0800513b 	.word	0x0800513b
 8000c6c:	08005491 	.word	0x08005491
 8000c70:	080052e7 	.word	0x080052e7
 8000c74:	08005347 	.word	0x08005347
 8000c78:	08005179 	.word	0x08005179
 8000c7c:	20000248 	.word	0x20000248
 8000c80:	20000238 	.word	0x20000238
 8000c84:	200006ec 	.word	0x200006ec
 8000c88:	0800cb5c 	.word	0x0800cb5c
 8000c8c:	2000065c 	.word	0x2000065c
 8000c90:	0800cb88 	.word	0x0800cb88
 8000c94:	2000068c 	.word	0x2000068c
 8000c98:	0800cbb4 	.word	0x0800cbb4
 8000c9c:	200006bc 	.word	0x200006bc
 8000ca0:	20000230 	.word	0x20000230
 8000ca4:	20000778 	.word	0x20000778

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2234      	movs	r2, #52	; 0x34
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f006 fd0c 	bl	80076d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 0308 	add.w	r3, r7, #8
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a2a      	ldr	r2, [pc, #168]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <SystemClock_Config+0xd4>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <SystemClock_Config+0xd8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a25      	ldr	r2, [pc, #148]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d04:	2310      	movs	r3, #16
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d10:	2308      	movs	r3, #8
 8000d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000d14:	23d8      	movs	r3, #216	; 0xd8
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d24:	f107 031c 	add.w	r3, r7, #28
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fb91 	bl	8002450 <HAL_RCC_OscConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d34:	f000 fb6e 	bl	8001414 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d38:	f001 fb3a 	bl	80023b0 <HAL_PWREx_EnableOverDrive>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d42:	f000 fb67 	bl	8001414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d46:	230f      	movs	r3, #15
 8000d48:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2107      	movs	r1, #7
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fe21 	bl	80029ac <HAL_RCC_ClockConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d70:	f000 fb50 	bl	8001414 <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	3750      	adds	r7, #80	; 0x50
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40007000 	.word	0x40007000

08000d84 <PrintBoardParameters>:

/* USER CODE BEGIN 4 */

TxRxStatus_t PrintBoardParameters (Profile_t slot)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
    SBGC32_ReadBoardInfo(&SBGC_1, &BoardInfo, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	499a      	ldr	r1, [pc, #616]	; (8000ffc <PrintBoardParameters+0x278>)
 8000d92:	489b      	ldr	r0, [pc, #620]	; (8001000 <PrintBoardParameters+0x27c>)
 8000d94:	f006 fb40 	bl	8007418 <SBGC32_ReadBoardInfo>
    SBGC32_ReadBoardInfo3(&SBGC_1, &BoardInfo3);
 8000d98:	499a      	ldr	r1, [pc, #616]	; (8001004 <PrintBoardParameters+0x280>)
 8000d9a:	4899      	ldr	r0, [pc, #612]	; (8001000 <PrintBoardParameters+0x27c>)
 8000d9c:	f006 fb90 	bl	80074c0 <SBGC32_ReadBoardInfo3>

    SBGC32_ReadParams3(&SBGC_1, &MainParams3, slot);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4998      	ldr	r1, [pc, #608]	; (8001008 <PrintBoardParameters+0x284>)
 8000da6:	4896      	ldr	r0, [pc, #600]	; (8001000 <PrintBoardParameters+0x27c>)
 8000da8:	f006 f890 	bl	8006ecc <SBGC32_ReadParams3>
    SBGC32_ReadParamsExt(&SBGC_1, &MainParamsExt, slot);
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	461a      	mov	r2, r3
 8000db0:	4996      	ldr	r1, [pc, #600]	; (800100c <PrintBoardParameters+0x288>)
 8000db2:	4893      	ldr	r0, [pc, #588]	; (8001000 <PrintBoardParameters+0x27c>)
 8000db4:	f006 f8de 	bl	8006f74 <SBGC32_ReadParamsExt>
    SBGC32_ReadParamsExt2(&SBGC_1, &MainParamsExt2, slot);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4994      	ldr	r1, [pc, #592]	; (8001010 <PrintBoardParameters+0x28c>)
 8000dbe:	4890      	ldr	r0, [pc, #576]	; (8001000 <PrintBoardParameters+0x27c>)
 8000dc0:	f006 f92c 	bl	800701c <SBGC32_ReadParamsExt2>
    SBGC32_ReadParamsExt3(&SBGC_1, &MainParamsExt3, slot);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4992      	ldr	r1, [pc, #584]	; (8001014 <PrintBoardParameters+0x290>)
 8000dca:	488d      	ldr	r0, [pc, #564]	; (8001000 <PrintBoardParameters+0x27c>)
 8000dcc:	f006 f97a 	bl	80070c4 <SBGC32_ReadParamsExt3>

    SBGC32_ReadRealTimeData4(&SBGC_1, &RealTimeData);
 8000dd0:	4991      	ldr	r1, [pc, #580]	; (8001018 <PrintBoardParameters+0x294>)
 8000dd2:	488b      	ldr	r0, [pc, #556]	; (8001000 <PrintBoardParameters+0x27c>)
 8000dd4:	f006 fadc 	bl	8007390 <SBGC32_ReadRealTimeData4>

    char boardVersionStr [4];
    char firmwareVersionStr [7];

    FormatBoardVersion(BoardInfo.boardVer, boardVersionStr);
 8000dd8:	4b88      	ldr	r3, [pc, #544]	; (8000ffc <PrintBoardParameters+0x278>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f107 0214 	add.w	r2, r7, #20
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fe1e 	bl	8000a24 <FormatBoardVersion>
    FormatFirmwareVersion(BoardInfo.firmwareVer, firmwareVersionStr);
 8000de8:	4b84      	ldr	r3, [pc, #528]	; (8000ffc <PrintBoardParameters+0x278>)
 8000dea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	f107 020c 	add.w	r2, r7, #12
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fe3a 	bl	8000a70 <FormatFirmwareVersion>

    PrintMessage(&SBGC_1, TEXT_SIZE_((char*)"Board Version: "));
 8000dfc:	220f      	movs	r2, #15
 8000dfe:	4987      	ldr	r1, [pc, #540]	; (800101c <PrintBoardParameters+0x298>)
 8000e00:	487f      	ldr	r0, [pc, #508]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e02:	f005 fea9 	bl	8006b58 <PrintMessage>
    PrintMessage(&SBGC_1, TEXT_SIZE_(boardVersionStr));
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa18 	bl	8000240 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4879      	ldr	r0, [pc, #484]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e1c:	f005 fe9c 	bl	8006b58 <PrintMessage>
    PrintMessage(&SBGC_1, TEXT_SIZE_((char*)" \n"));
 8000e20:	2202      	movs	r2, #2
 8000e22:	497f      	ldr	r1, [pc, #508]	; (8001020 <PrintBoardParameters+0x29c>)
 8000e24:	4876      	ldr	r0, [pc, #472]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e26:	f005 fe97 	bl	8006b58 <PrintMessage>
    PrintMessage(&SBGC_1, TEXT_SIZE_((char*)"Firmware Version: "));
 8000e2a:	2212      	movs	r2, #18
 8000e2c:	497d      	ldr	r1, [pc, #500]	; (8001024 <PrintBoardParameters+0x2a0>)
 8000e2e:	4874      	ldr	r0, [pc, #464]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e30:	f005 fe92 	bl	8006b58 <PrintMessage>
    PrintMessage(&SBGC_1, TEXT_SIZE_(firmwareVersionStr));
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fa01 	bl	8000240 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	4619      	mov	r1, r3
 8000e48:	486d      	ldr	r0, [pc, #436]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e4a:	f005 fe85 	bl	8006b58 <PrintMessage>
    PrintMessage(&SBGC_1, TEXT_SIZE_((char*)" \n"));
 8000e4e:	2202      	movs	r2, #2
 8000e50:	4973      	ldr	r1, [pc, #460]	; (8001020 <PrintBoardParameters+0x29c>)
 8000e52:	486b      	ldr	r0, [pc, #428]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e54:	f005 fe80 	bl	8006b58 <PrintMessage>

    PrintStructElement(&SBGC_1, &BoardInfo3.flashSize, "Flash Size =", _UNSIGNED_CHAR_);
 8000e58:	2301      	movs	r3, #1
 8000e5a:	4a73      	ldr	r2, [pc, #460]	; (8001028 <PrintBoardParameters+0x2a4>)
 8000e5c:	4973      	ldr	r1, [pc, #460]	; (800102c <PrintBoardParameters+0x2a8>)
 8000e5e:	4868      	ldr	r0, [pc, #416]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e60:	f005 fe8c 	bl	8006b7c <PrintStructElement>

    PrintStructElement(&SBGC_1, &MainParams3.profileID, "Current profile #", _UNSIGNED_CHAR_);  // Note: -1
 8000e64:	2301      	movs	r3, #1
 8000e66:	4a72      	ldr	r2, [pc, #456]	; (8001030 <PrintBoardParameters+0x2ac>)
 8000e68:	4967      	ldr	r1, [pc, #412]	; (8001008 <PrintBoardParameters+0x284>)
 8000e6a:	4865      	ldr	r0, [pc, #404]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e6c:	f005 fe86 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[ROLL].p, "Roll P =", _UNSIGNED_CHAR_);
 8000e70:	2301      	movs	r3, #1
 8000e72:	4a70      	ldr	r2, [pc, #448]	; (8001034 <PrintBoardParameters+0x2b0>)
 8000e74:	4970      	ldr	r1, [pc, #448]	; (8001038 <PrintBoardParameters+0x2b4>)
 8000e76:	4862      	ldr	r0, [pc, #392]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e78:	f005 fe80 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[ROLL].i, "Roll I =", _UNSIGNED_CHAR_);
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4a6f      	ldr	r2, [pc, #444]	; (800103c <PrintBoardParameters+0x2b8>)
 8000e80:	496f      	ldr	r1, [pc, #444]	; (8001040 <PrintBoardParameters+0x2bc>)
 8000e82:	485f      	ldr	r0, [pc, #380]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e84:	f005 fe7a 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[ROLL].d, "Roll D =", _UNSIGNED_CHAR_);
 8000e88:	2301      	movs	r3, #1
 8000e8a:	4a6e      	ldr	r2, [pc, #440]	; (8001044 <PrintBoardParameters+0x2c0>)
 8000e8c:	496e      	ldr	r1, [pc, #440]	; (8001048 <PrintBoardParameters+0x2c4>)
 8000e8e:	485c      	ldr	r0, [pc, #368]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e90:	f005 fe74 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[PITCH].p, "Pitch P =", _UNSIGNED_CHAR_);
 8000e94:	2301      	movs	r3, #1
 8000e96:	4a6d      	ldr	r2, [pc, #436]	; (800104c <PrintBoardParameters+0x2c8>)
 8000e98:	496d      	ldr	r1, [pc, #436]	; (8001050 <PrintBoardParameters+0x2cc>)
 8000e9a:	4859      	ldr	r0, [pc, #356]	; (8001000 <PrintBoardParameters+0x27c>)
 8000e9c:	f005 fe6e 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[PITCH].i, "Pitch I =", _UNSIGNED_CHAR_);
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	4a6c      	ldr	r2, [pc, #432]	; (8001054 <PrintBoardParameters+0x2d0>)
 8000ea4:	496c      	ldr	r1, [pc, #432]	; (8001058 <PrintBoardParameters+0x2d4>)
 8000ea6:	4856      	ldr	r0, [pc, #344]	; (8001000 <PrintBoardParameters+0x27c>)
 8000ea8:	f005 fe68 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[PITCH].d, "Pitch D =", _UNSIGNED_CHAR_);
 8000eac:	2301      	movs	r3, #1
 8000eae:	4a6b      	ldr	r2, [pc, #428]	; (800105c <PrintBoardParameters+0x2d8>)
 8000eb0:	496b      	ldr	r1, [pc, #428]	; (8001060 <PrintBoardParameters+0x2dc>)
 8000eb2:	4853      	ldr	r0, [pc, #332]	; (8001000 <PrintBoardParameters+0x27c>)
 8000eb4:	f005 fe62 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[YAW].p, "Yaw P =", _UNSIGNED_CHAR_);
 8000eb8:	2301      	movs	r3, #1
 8000eba:	4a6a      	ldr	r2, [pc, #424]	; (8001064 <PrintBoardParameters+0x2e0>)
 8000ebc:	496a      	ldr	r1, [pc, #424]	; (8001068 <PrintBoardParameters+0x2e4>)
 8000ebe:	4850      	ldr	r0, [pc, #320]	; (8001000 <PrintBoardParameters+0x27c>)
 8000ec0:	f005 fe5c 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[YAW].i, "Yaw I =", _UNSIGNED_CHAR_);
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	4a69      	ldr	r2, [pc, #420]	; (800106c <PrintBoardParameters+0x2e8>)
 8000ec8:	4969      	ldr	r1, [pc, #420]	; (8001070 <PrintBoardParameters+0x2ec>)
 8000eca:	484d      	ldr	r0, [pc, #308]	; (8001000 <PrintBoardParameters+0x27c>)
 8000ecc:	f005 fe56 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisCMP3[YAW].d, "Yaw D =", _UNSIGNED_CHAR_);
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4a68      	ldr	r2, [pc, #416]	; (8001074 <PrintBoardParameters+0x2f0>)
 8000ed4:	4968      	ldr	r1, [pc, #416]	; (8001078 <PrintBoardParameters+0x2f4>)
 8000ed6:	484a      	ldr	r0, [pc, #296]	; (8001000 <PrintBoardParameters+0x27c>)
 8000ed8:	f005 fe50 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.ACC_LimiterAll, "ACC Limiter all = ", _UNSIGNED_CHAR_);
 8000edc:	2301      	movs	r3, #1
 8000ede:	4a67      	ldr	r2, [pc, #412]	; (800107c <PrintBoardParameters+0x2f8>)
 8000ee0:	4967      	ldr	r1, [pc, #412]	; (8001080 <PrintBoardParameters+0x2fc>)
 8000ee2:	4847      	ldr	r0, [pc, #284]	; (8001000 <PrintBoardParameters+0x27c>)
 8000ee4:	f005 fe4a 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisRC_MP3[ROLL].RC_MaxAngle, "RC Max Angle =", _SIGNED_SHORT_);
 8000ee8:	2304      	movs	r3, #4
 8000eea:	4a66      	ldr	r2, [pc, #408]	; (8001084 <PrintBoardParameters+0x300>)
 8000eec:	4966      	ldr	r1, [pc, #408]	; (8001088 <PrintBoardParameters+0x304>)
 8000eee:	4844      	ldr	r0, [pc, #272]	; (8001000 <PrintBoardParameters+0x27c>)
 8000ef0:	f005 fe44 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.AxisRC_MP3[YAW].RC_MinAngle, "RC Min Angle =", _SIGNED_SHORT_);
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	4a65      	ldr	r2, [pc, #404]	; (800108c <PrintBoardParameters+0x308>)
 8000ef8:	4965      	ldr	r1, [pc, #404]	; (8001090 <PrintBoardParameters+0x30c>)
 8000efa:	4841      	ldr	r0, [pc, #260]	; (8001000 <PrintBoardParameters+0x27c>)
 8000efc:	f005 fe3e 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.RC_MapROLL, "RC Map Roll =", _UNSIGNED_CHAR_);
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a64      	ldr	r2, [pc, #400]	; (8001094 <PrintBoardParameters+0x310>)
 8000f04:	4964      	ldr	r1, [pc, #400]	; (8001098 <PrintBoardParameters+0x314>)
 8000f06:	483e      	ldr	r0, [pc, #248]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f08:	f005 fe38 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.RC_MapPITCH, "RC Map Pitch =", _UNSIGNED_CHAR_);
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	4a63      	ldr	r2, [pc, #396]	; (800109c <PrintBoardParameters+0x318>)
 8000f10:	4963      	ldr	r1, [pc, #396]	; (80010a0 <PrintBoardParameters+0x31c>)
 8000f12:	483b      	ldr	r0, [pc, #236]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f14:	f005 fe32 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.RC_MapYAW, "RC Map Yaw =", _UNSIGNED_CHAR_);
 8000f18:	2301      	movs	r3, #1
 8000f1a:	4a62      	ldr	r2, [pc, #392]	; (80010a4 <PrintBoardParameters+0x320>)
 8000f1c:	4962      	ldr	r1, [pc, #392]	; (80010a8 <PrintBoardParameters+0x324>)
 8000f1e:	4838      	ldr	r0, [pc, #224]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f20:	f005 fe2c 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.RC_MapCmd, "RC Map Cmd =", _UNSIGNED_CHAR_);
 8000f24:	2301      	movs	r3, #1
 8000f26:	4a61      	ldr	r2, [pc, #388]	; (80010ac <PrintBoardParameters+0x328>)
 8000f28:	4961      	ldr	r1, [pc, #388]	; (80010b0 <PrintBoardParameters+0x32c>)
 8000f2a:	4835      	ldr	r0, [pc, #212]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f2c:	f005 fe26 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.RC_MapFC_ROLL, "RC Map FC Roll =", _UNSIGNED_CHAR_);
 8000f30:	2301      	movs	r3, #1
 8000f32:	4a60      	ldr	r2, [pc, #384]	; (80010b4 <PrintBoardParameters+0x330>)
 8000f34:	4960      	ldr	r1, [pc, #384]	; (80010b8 <PrintBoardParameters+0x334>)
 8000f36:	4832      	ldr	r0, [pc, #200]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f38:	f005 fe20 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParams3.RC_MapFC_PITCH, "RC Map FC Pitch =", _UNSIGNED_CHAR_);
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	4a5f      	ldr	r2, [pc, #380]	; (80010bc <PrintBoardParameters+0x338>)
 8000f40:	495f      	ldr	r1, [pc, #380]	; (80010c0 <PrintBoardParameters+0x33c>)
 8000f42:	482f      	ldr	r0, [pc, #188]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f44:	f005 fe1a 	bl	8006b7c <PrintStructElement>

    PrintStructElement(&SBGC_1, &MainParamsExt.LPF_Freq[ROLL], "LPF Frequency Roll =", _UNSIGNED_SHORT_);
 8000f48:	2303      	movs	r3, #3
 8000f4a:	4a5e      	ldr	r2, [pc, #376]	; (80010c4 <PrintBoardParameters+0x340>)
 8000f4c:	495e      	ldr	r1, [pc, #376]	; (80010c8 <PrintBoardParameters+0x344>)
 8000f4e:	482c      	ldr	r0, [pc, #176]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f50:	f005 fe14 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParamsExt.LPF_Freq[PITCH], "LPF Frequency Pitch =", _UNSIGNED_SHORT_);
 8000f54:	2303      	movs	r3, #3
 8000f56:	4a5d      	ldr	r2, [pc, #372]	; (80010cc <PrintBoardParameters+0x348>)
 8000f58:	495d      	ldr	r1, [pc, #372]	; (80010d0 <PrintBoardParameters+0x34c>)
 8000f5a:	4829      	ldr	r0, [pc, #164]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f5c:	f005 fe0e 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParamsExt.LPF_Freq[YAW], "LPF Frequency Yaw =", _UNSIGNED_SHORT_);
 8000f60:	2303      	movs	r3, #3
 8000f62:	4a5c      	ldr	r2, [pc, #368]	; (80010d4 <PrintBoardParameters+0x350>)
 8000f64:	495c      	ldr	r1, [pc, #368]	; (80010d8 <PrintBoardParameters+0x354>)
 8000f66:	4826      	ldr	r0, [pc, #152]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f68:	f005 fe08 	bl	8006b7c <PrintStructElement>

    PrintStructElement(&SBGC_1, &MainParamsExt2.frameIMU_LPF_Freq, "Frame IMU LPF Freq =", _UNSIGNED_CHAR_);
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4a5b      	ldr	r2, [pc, #364]	; (80010dc <PrintBoardParameters+0x358>)
 8000f70:	495b      	ldr	r1, [pc, #364]	; (80010e0 <PrintBoardParameters+0x35c>)
 8000f72:	4823      	ldr	r0, [pc, #140]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f74:	f005 fe02 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &MainParamsExt2.timelapseTime, "Timelapse Time =", _UNSIGNED_SHORT_);
 8000f78:	2303      	movs	r3, #3
 8000f7a:	4a5a      	ldr	r2, [pc, #360]	; (80010e4 <PrintBoardParameters+0x360>)
 8000f7c:	495a      	ldr	r1, [pc, #360]	; (80010e8 <PrintBoardParameters+0x364>)
 8000f7e:	4820      	ldr	r0, [pc, #128]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f80:	f005 fdfc 	bl	8006b7c <PrintStructElement>

    PrintStructElement(&SBGC_1, &MainParamsExt3.motorStartupDelay, "Motor Startup Delay =", _UNSIGNED_SHORT_);
 8000f84:	2303      	movs	r3, #3
 8000f86:	4a59      	ldr	r2, [pc, #356]	; (80010ec <PrintBoardParameters+0x368>)
 8000f88:	4959      	ldr	r1, [pc, #356]	; (80010f0 <PrintBoardParameters+0x36c>)
 8000f8a:	481d      	ldr	r0, [pc, #116]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f8c:	f005 fdf6 	bl	8006b7c <PrintStructElement>

    PrintMessage(&SBGC_1, TEXT_SIZE_((char*)" \n"));
 8000f90:	2202      	movs	r2, #2
 8000f92:	4923      	ldr	r1, [pc, #140]	; (8001020 <PrintBoardParameters+0x29c>)
 8000f94:	481a      	ldr	r0, [pc, #104]	; (8001000 <PrintBoardParameters+0x27c>)
 8000f96:	f005 fddf 	bl	8006b58 <PrintMessage>

	PrintStructElement(&SBGC_1, &RealTimeData.AxisRTD[ROLL].ACC_Data, "ACC Roll =", _SIGNED_SHORT_);
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	4a55      	ldr	r2, [pc, #340]	; (80010f4 <PrintBoardParameters+0x370>)
 8000f9e:	491e      	ldr	r1, [pc, #120]	; (8001018 <PrintBoardParameters+0x294>)
 8000fa0:	4817      	ldr	r0, [pc, #92]	; (8001000 <PrintBoardParameters+0x27c>)
 8000fa2:	f005 fdeb 	bl	8006b7c <PrintStructElement>
	PrintStructElement(&SBGC_1, &RealTimeData.AxisRTD[PITCH].ACC_Data, "ACC Pitch =", _SIGNED_SHORT_);
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	4a53      	ldr	r2, [pc, #332]	; (80010f8 <PrintBoardParameters+0x374>)
 8000faa:	4954      	ldr	r1, [pc, #336]	; (80010fc <PrintBoardParameters+0x378>)
 8000fac:	4814      	ldr	r0, [pc, #80]	; (8001000 <PrintBoardParameters+0x27c>)
 8000fae:	f005 fde5 	bl	8006b7c <PrintStructElement>
	PrintStructElement(&SBGC_1, &RealTimeData.AxisRTD[YAW].ACC_Data, "ACC Yaw =", _SIGNED_SHORT_);
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	4a52      	ldr	r2, [pc, #328]	; (8001100 <PrintBoardParameters+0x37c>)
 8000fb6:	4953      	ldr	r1, [pc, #332]	; (8001104 <PrintBoardParameters+0x380>)
 8000fb8:	4811      	ldr	r0, [pc, #68]	; (8001000 <PrintBoardParameters+0x27c>)
 8000fba:	f005 fddf 	bl	8006b7c <PrintStructElement>

    PrintStructElement(&SBGC_1, &RealTimeData.frameCamAngle[ROLL], "Roll Current Angle =", _SIGNED_SHORT_);
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	4a51      	ldr	r2, [pc, #324]	; (8001108 <PrintBoardParameters+0x384>)
 8000fc2:	4952      	ldr	r1, [pc, #328]	; (800110c <PrintBoardParameters+0x388>)
 8000fc4:	480e      	ldr	r0, [pc, #56]	; (8001000 <PrintBoardParameters+0x27c>)
 8000fc6:	f005 fdd9 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &RealTimeData.frameCamAngle[PITCH], "Pitch Current Angle =", _SIGNED_SHORT_);
 8000fca:	2304      	movs	r3, #4
 8000fcc:	4a50      	ldr	r2, [pc, #320]	; (8001110 <PrintBoardParameters+0x38c>)
 8000fce:	4951      	ldr	r1, [pc, #324]	; (8001114 <PrintBoardParameters+0x390>)
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <PrintBoardParameters+0x27c>)
 8000fd2:	f005 fdd3 	bl	8006b7c <PrintStructElement>
    PrintStructElement(&SBGC_1, &RealTimeData.frameCamAngle[YAW], "Yaw Current Angle =", _SIGNED_SHORT_);
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	4a4f      	ldr	r2, [pc, #316]	; (8001118 <PrintBoardParameters+0x394>)
 8000fda:	4950      	ldr	r1, [pc, #320]	; (800111c <PrintBoardParameters+0x398>)
 8000fdc:	4808      	ldr	r0, [pc, #32]	; (8001000 <PrintBoardParameters+0x27c>)
 8000fde:	f005 fdcd 	bl	8006b7c <PrintStructElement>

    PrintStructElement(&SBGC_1, &RealTimeData.IMU_Temperature, "IMU Temperature =", _SIGNED_CHAR_);
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <PrintBoardParameters+0x39c>)
 8000fe6:	494f      	ldr	r1, [pc, #316]	; (8001124 <PrintBoardParameters+0x3a0>)
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <PrintBoardParameters+0x27c>)
 8000fea:	f005 fdc7 	bl	8006b7c <PrintStructElement>

    return SBGC_1._ParserCurrentStatus;
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <PrintBoardParameters+0x27c>)
 8000ff0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000274 	.word	0x20000274
 8001000:	200001fc 	.word	0x200001fc
 8001004:	20000288 	.word	0x20000288
 8001008:	200002d0 	.word	0x200002d0
 800100c:	20000358 	.word	0x20000358
 8001010:	200003c0 	.word	0x200003c0
 8001014:	20000458 	.word	0x20000458
 8001018:	200005e0 	.word	0x200005e0
 800101c:	0800bdac 	.word	0x0800bdac
 8001020:	0800bdbc 	.word	0x0800bdbc
 8001024:	0800bdc0 	.word	0x0800bdc0
 8001028:	0800bdd4 	.word	0x0800bdd4
 800102c:	200002ad 	.word	0x200002ad
 8001030:	0800bde4 	.word	0x0800bde4
 8001034:	0800bdf8 	.word	0x0800bdf8
 8001038:	200002d1 	.word	0x200002d1
 800103c:	0800be04 	.word	0x0800be04
 8001040:	200002d2 	.word	0x200002d2
 8001044:	0800be10 	.word	0x0800be10
 8001048:	200002d3 	.word	0x200002d3
 800104c:	0800be1c 	.word	0x0800be1c
 8001050:	200002d7 	.word	0x200002d7
 8001054:	0800be28 	.word	0x0800be28
 8001058:	200002d8 	.word	0x200002d8
 800105c:	0800be34 	.word	0x0800be34
 8001060:	200002d9 	.word	0x200002d9
 8001064:	0800be40 	.word	0x0800be40
 8001068:	200002dd 	.word	0x200002dd
 800106c:	0800be48 	.word	0x0800be48
 8001070:	200002de 	.word	0x200002de
 8001074:	0800be50 	.word	0x0800be50
 8001078:	200002df 	.word	0x200002df
 800107c:	0800be58 	.word	0x0800be58
 8001080:	200002e3 	.word	0x200002e3
 8001084:	0800be6c 	.word	0x0800be6c
 8001088:	200002e8 	.word	0x200002e8
 800108c:	0800be7c 	.word	0x0800be7c
 8001090:	200002f6 	.word	0x200002f6
 8001094:	0800be8c 	.word	0x0800be8c
 8001098:	20000308 	.word	0x20000308
 800109c:	0800be9c 	.word	0x0800be9c
 80010a0:	20000309 	.word	0x20000309
 80010a4:	0800beac 	.word	0x0800beac
 80010a8:	2000030a 	.word	0x2000030a
 80010ac:	0800bebc 	.word	0x0800bebc
 80010b0:	2000030b 	.word	0x2000030b
 80010b4:	0800becc 	.word	0x0800becc
 80010b8:	2000030c 	.word	0x2000030c
 80010bc:	0800bee0 	.word	0x0800bee0
 80010c0:	2000030d 	.word	0x2000030d
 80010c4:	0800bef4 	.word	0x0800bef4
 80010c8:	2000036b 	.word	0x2000036b
 80010cc:	0800bf0c 	.word	0x0800bf0c
 80010d0:	2000036d 	.word	0x2000036d
 80010d4:	0800bf24 	.word	0x0800bf24
 80010d8:	2000036f 	.word	0x2000036f
 80010dc:	0800bf38 	.word	0x0800bf38
 80010e0:	200003dd 	.word	0x200003dd
 80010e4:	0800bf50 	.word	0x0800bf50
 80010e8:	200003f6 	.word	0x200003f6
 80010ec:	0800bf64 	.word	0x0800bf64
 80010f0:	200004a7 	.word	0x200004a7
 80010f4:	0800bf7c 	.word	0x0800bf7c
 80010f8:	0800bf88 	.word	0x0800bf88
 80010fc:	200005e4 	.word	0x200005e4
 8001100:	0800bf94 	.word	0x0800bf94
 8001104:	200005e8 	.word	0x200005e8
 8001108:	0800bfa0 	.word	0x0800bfa0
 800110c:	2000061f 	.word	0x2000061f
 8001110:	0800bfb8 	.word	0x0800bfb8
 8001114:	20000621 	.word	0x20000621
 8001118:	0800bfd0 	.word	0x0800bfd0
 800111c:	20000623 	.word	0x20000623
 8001120:	0800bfe4 	.word	0x0800bfe4
 8001124:	20000634 	.word	0x20000634

08001128 <SBGC32_DemoControl>:


TxRxStatus_t SBGC32_DemoControl (void)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
	/* Getting adjvars values */
	/* Note: AdjVarsGeneral.ID fields are already filled */
	SBGC32_GetAdjVarValues(&SBGC_1, AdjVarsGeneral, countof(AdjVarsGeneral));
 800112e:	2203      	movs	r2, #3
 8001130:	4969      	ldr	r1, [pc, #420]	; (80012d8 <SBGC32_DemoControl+0x1b0>)
 8001132:	486a      	ldr	r0, [pc, #424]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 8001134:	f004 fae8 	bl	8005708 <SBGC32_GetAdjVarValues>

	/* Run the Demonstration Cycle */
	FOR_(i, 4)
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	e0c1      	b.n	80012c2 <SBGC32_DemoControl+0x19a>
	{
		/* Printing */
		FOR_(k, countof(AdjVarsGeneral))
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	e01f      	b.n	8001184 <SBGC32_DemoControl+0x5c>
			PrintStructElement(&SBGC_1, &AdjVarsGeneral[k].value, AdjVarsGeneral[k].name, AdjVarsGeneral[k].varType);
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	3328      	adds	r3, #40	; 0x28
 8001150:	4a61      	ldr	r2, [pc, #388]	; (80012d8 <SBGC32_DemoControl+0x1b0>)
 8001152:	1899      	adds	r1, r3, r2
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	4a5e      	ldr	r2, [pc, #376]	; (80012d8 <SBGC32_DemoControl+0x1b0>)
 8001160:	4413      	add	r3, r2
 8001162:	1c58      	adds	r0, r3, #1
 8001164:	4c5c      	ldr	r4, [pc, #368]	; (80012d8 <SBGC32_DemoControl+0x1b0>)
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	4423      	add	r3, r4
 8001172:	3324      	adds	r3, #36	; 0x24
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4602      	mov	r2, r0
 8001178:	4858      	ldr	r0, [pc, #352]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 800117a:	f005 fcff 	bl	8006b7c <PrintStructElement>
		FOR_(k, countof(AdjVarsGeneral))
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	3301      	adds	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d9dc      	bls.n	8001144 <SBGC32_DemoControl+0x1c>

		Control.AxisC[YAW].angle = DEGREE_TO_ANGLE_INT(50);
 800118a:	4b55      	ldr	r3, [pc, #340]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 800118c:	2200      	movs	r2, #0
 800118e:	f062 021c 	orn	r2, r2, #28
 8001192:	735a      	strb	r2, [r3, #13]
 8001194:	2200      	movs	r2, #0
 8001196:	f042 0208 	orr.w	r2, r2, #8
 800119a:	739a      	strb	r2, [r3, #14]
		Control.AxisC[PITCH].angle = DEGREE_TO_ANGLE_INT(-20);
 800119c:	4b50      	ldr	r3, [pc, #320]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f042 0272 	orr.w	r2, r2, #114	; 0x72
 80011a4:	725a      	strb	r2, [r3, #9]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f062 0203 	orn	r2, r2, #3
 80011ac:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC_1, &Control);
 80011ae:	494c      	ldr	r1, [pc, #304]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 80011b0:	484a      	ldr	r0, [pc, #296]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 80011b2:	f005 fe01 	bl	8006db8 <SBGC32_Control>
		HAL_Delay(5000);
 80011b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80011ba:	f000 fd85 	bl	8001cc8 <HAL_Delay>

		Control.AxisC[PITCH].angle = DEGREE_TO_ANGLE_INT(20);
 80011be:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	f062 0271 	orn	r2, r2, #113	; 0x71
 80011c6:	725a      	strb	r2, [r3, #9]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f042 0203 	orr.w	r2, r2, #3
 80011ce:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC_1, &Control);
 80011d0:	4943      	ldr	r1, [pc, #268]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 80011d2:	4842      	ldr	r0, [pc, #264]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 80011d4:	f005 fdf0 	bl	8006db8 <SBGC32_Control>
		HAL_Delay(5000);
 80011d8:	f241 3088 	movw	r0, #5000	; 0x1388
 80011dc:	f000 fd74 	bl	8001cc8 <HAL_Delay>

		Control.AxisC[YAW].angle = DEGREE_TO_ANGLE_INT(-50);
 80011e0:	4b3f      	ldr	r3, [pc, #252]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f042 021d 	orr.w	r2, r2, #29
 80011e8:	735a      	strb	r2, [r3, #13]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f062 0208 	orn	r2, r2, #8
 80011f0:	739a      	strb	r2, [r3, #14]
		SBGC32_Control(&SBGC_1, &Control);
 80011f2:	493b      	ldr	r1, [pc, #236]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 80011f4:	4839      	ldr	r0, [pc, #228]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 80011f6:	f005 fddf 	bl	8006db8 <SBGC32_Control>
		HAL_Delay(5000);
 80011fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80011fe:	f000 fd63 	bl	8001cc8 <HAL_Delay>

		Control.AxisC[PITCH].angle = DEGREE_TO_ANGLE_INT(-20);
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 8001204:	2200      	movs	r2, #0
 8001206:	f042 0272 	orr.w	r2, r2, #114	; 0x72
 800120a:	725a      	strb	r2, [r3, #9]
 800120c:	2200      	movs	r2, #0
 800120e:	f062 0203 	orn	r2, r2, #3
 8001212:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC_1, &Control);
 8001214:	4932      	ldr	r1, [pc, #200]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 8001216:	4831      	ldr	r0, [pc, #196]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 8001218:	f005 fdce 	bl	8006db8 <SBGC32_Control>
		HAL_Delay(5000);
 800121c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001220:	f000 fd52 	bl	8001cc8 <HAL_Delay>

		Control.AxisC[YAW].angle = DEGREE_TO_ANGLE_INT(0);
 8001224:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 8001226:	2200      	movs	r2, #0
 8001228:	735a      	strb	r2, [r3, #13]
 800122a:	2200      	movs	r2, #0
 800122c:	739a      	strb	r2, [r3, #14]
		Control.AxisC[PITCH].angle = DEGREE_TO_ANGLE_INT(0);
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 8001230:	2200      	movs	r2, #0
 8001232:	725a      	strb	r2, [r3, #9]
 8001234:	2200      	movs	r2, #0
 8001236:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC_1, &Control);
 8001238:	4929      	ldr	r1, [pc, #164]	; (80012e0 <SBGC32_DemoControl+0x1b8>)
 800123a:	4828      	ldr	r0, [pc, #160]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 800123c:	f005 fdbc 	bl	8006db8 <SBGC32_Control>
		HAL_Delay(5000);
 8001240:	f241 3088 	movw	r0, #5000	; 0x1388
 8001244:	f000 fd40 	bl	8001cc8 <HAL_Delay>

		BeeperSettings.mode = BM_BEEPER_MODE_COMPLETE;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <SBGC32_DemoControl+0x1bc>)
 800124a:	2220      	movs	r2, #32
 800124c:	801a      	strh	r2, [r3, #0]
		SBGC32_PlayBeeper(&SBGC_1, &BeeperSettings);
 800124e:	4925      	ldr	r1, [pc, #148]	; (80012e4 <SBGC32_DemoControl+0x1bc>)
 8001250:	4822      	ldr	r0, [pc, #136]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 8001252:	f006 f979 	bl	8007548 <SBGC32_PlayBeeper>

		/* Adjustable Variables Re-Setting */
		FOR_(k, countof(AdjVarsGeneral))
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	e026      	b.n	80012aa <SBGC32_DemoControl+0x182>
			/* Toggle Min : Max adjvars contrast */
			EditAdjVarValue(&AdjVarsGeneral[k], ((i % 2 == 0) ? AdjVarsGeneral[k].maxValue : AdjVarsGeneral[k].minValue));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <SBGC32_DemoControl+0x1b0>)
 8001268:	1898      	adds	r0, r3, r2
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10a      	bne.n	800128a <SBGC32_DemoControl+0x162>
 8001274:	4918      	ldr	r1, [pc, #96]	; (80012d8 <SBGC32_DemoControl+0x1b0>)
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	440b      	add	r3, r1
 8001282:	3322      	adds	r3, #34	; 0x22
 8001284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001288:	e009      	b.n	800129e <SBGC32_DemoControl+0x176>
 800128a:	4913      	ldr	r1, [pc, #76]	; (80012d8 <SBGC32_DemoControl+0x1b0>)
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	440b      	add	r3, r1
 8001298:	3320      	adds	r3, #32
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	4619      	mov	r1, r3
 80012a0:	f004 f92d 	bl	80054fe <EditAdjVarValue>
		FOR_(k, countof(AdjVarsGeneral))
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3301      	adds	r3, #1
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d9d5      	bls.n	800125c <SBGC32_DemoControl+0x134>

		SBGC32_SetAdjVarValues(&SBGC_1, AdjVarsGeneral, countof(AdjVarsGeneral), &Confirm);
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <SBGC32_DemoControl+0x1c0>)
 80012b2:	2203      	movs	r2, #3
 80012b4:	4908      	ldr	r1, [pc, #32]	; (80012d8 <SBGC32_DemoControl+0x1b0>)
 80012b6:	4809      	ldr	r0, [pc, #36]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 80012b8:	f004 f951 	bl	800555e <SBGC32_SetAdjVarValues>
	FOR_(i, 4)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3301      	adds	r3, #1
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	f77f af3a 	ble.w	800113e <SBGC32_DemoControl+0x16>
//			if (AdjVarsGeneral[i].saveFlag != SAVED)
//				AdjVarsGeneral[i].saveFlag = SAVED;

	/* or SBGC32_SaveAdjVarsToEEPROM(&SBGC_1, AdjVarsGeneral, countof(AdjVarsGeneral), &Confirm); */

    return SBGC_1._ParserCurrentStatus;
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SBGC32_DemoControl+0x1b4>)
 80012cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd90      	pop	{r4, r7, pc}
 80012d8:	2000065c 	.word	0x2000065c
 80012dc:	200001fc 	.word	0x200001fc
 80012e0:	20000238 	.word	0x20000238
 80012e4:	20000704 	.word	0x20000704
 80012e8:	20000230 	.word	0x20000230

080012ec <PrintDataStream>:


void PrintDataStream (ui8 *pBuff)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	/* Preparing */
	ui8 BuffRPx = 2;  // ui16 timestampMs offset
 80012f4:	2302      	movs	r3, #2
 80012f6:	73fb      	strb	r3, [r7, #15]

	BuffRPx += ConvertWithPM(RealTimeDataCustom.frameCamAngle, &pBuff[BuffRPx],
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	18d1      	adds	r1, r2, r3
 80012fe:	2301      	movs	r3, #1
 8001300:	2206      	movs	r2, #6
 8001302:	4830      	ldr	r0, [pc, #192]	; (80013c4 <PrintDataStream+0xd8>)
 8001304:	f004 fe4c 	bl	8005fa0 <ConvertWithPM>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	4413      	add	r3, r2
 8001310:	73fb      	strb	r3, [r7, #15]
							sizeof(RealTimeDataCustom.targetAngles), PM_DEFAULT_16BIT);
	BuffRPx += ConvertWithPM(RealTimeDataCustom.gyroData, &pBuff[BuffRPx],
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	18d1      	adds	r1, r2, r3
 8001318:	2301      	movs	r3, #1
 800131a:	2206      	movs	r2, #6
 800131c:	482a      	ldr	r0, [pc, #168]	; (80013c8 <PrintDataStream+0xdc>)
 800131e:	f004 fe3f 	bl	8005fa0 <ConvertWithPM>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	4413      	add	r3, r2
 800132a:	73fb      	strb	r3, [r7, #15]
							sizeof(RealTimeDataCustom.gyroData), PM_DEFAULT_16BIT);
	BuffRPx += ConvertWithPM(RealTimeDataCustom.ACC_Data, &pBuff[BuffRPx],
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	18d1      	adds	r1, r2, r3
 8001332:	2301      	movs	r3, #1
 8001334:	2206      	movs	r2, #6
 8001336:	4825      	ldr	r0, [pc, #148]	; (80013cc <PrintDataStream+0xe0>)
 8001338:	f004 fe32 	bl	8005fa0 <ConvertWithPM>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	4413      	add	r3, r2
 8001344:	73fb      	strb	r3, [r7, #15]
							sizeof(RealTimeDataCustom.ACC_Data), PM_DEFAULT_16BIT);

	/* Printing */
	PrintStructElement(&SBGC_1, &RealTimeDataCustom.frameCamAngle[ROLL], "Frame Camera Angle Roll =", _SIGNED_SHORT_);
 8001346:	2304      	movs	r3, #4
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <PrintDataStream+0xe4>)
 800134a:	491e      	ldr	r1, [pc, #120]	; (80013c4 <PrintDataStream+0xd8>)
 800134c:	4821      	ldr	r0, [pc, #132]	; (80013d4 <PrintDataStream+0xe8>)
 800134e:	f005 fc15 	bl	8006b7c <PrintStructElement>
	PrintStructElement(&SBGC_1, &RealTimeDataCustom.frameCamAngle[PITCH], "Frame Camera Angle Pitch =", _SIGNED_SHORT_);
 8001352:	2304      	movs	r3, #4
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <PrintDataStream+0xec>)
 8001356:	4921      	ldr	r1, [pc, #132]	; (80013dc <PrintDataStream+0xf0>)
 8001358:	481e      	ldr	r0, [pc, #120]	; (80013d4 <PrintDataStream+0xe8>)
 800135a:	f005 fc0f 	bl	8006b7c <PrintStructElement>
	PrintStructElement(&SBGC_1, &RealTimeDataCustom.frameCamAngle[YAW], "Frame Camera Angle Yaw =", _SIGNED_SHORT_);
 800135e:	2304      	movs	r3, #4
 8001360:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <PrintDataStream+0xf4>)
 8001362:	4920      	ldr	r1, [pc, #128]	; (80013e4 <PrintDataStream+0xf8>)
 8001364:	481b      	ldr	r0, [pc, #108]	; (80013d4 <PrintDataStream+0xe8>)
 8001366:	f005 fc09 	bl	8006b7c <PrintStructElement>

	PrintStructElement(&SBGC_1, &RealTimeDataCustom.gyroData[ROLL], "Gyro Roll =", _SIGNED_SHORT_);
 800136a:	2304      	movs	r3, #4
 800136c:	4a1e      	ldr	r2, [pc, #120]	; (80013e8 <PrintDataStream+0xfc>)
 800136e:	4916      	ldr	r1, [pc, #88]	; (80013c8 <PrintDataStream+0xdc>)
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <PrintDataStream+0xe8>)
 8001372:	f005 fc03 	bl	8006b7c <PrintStructElement>
	PrintStructElement(&SBGC_1, &RealTimeDataCustom.gyroData[PITCH], "Gyro Pitch =", _SIGNED_SHORT_);
 8001376:	2304      	movs	r3, #4
 8001378:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <PrintDataStream+0x100>)
 800137a:	491d      	ldr	r1, [pc, #116]	; (80013f0 <PrintDataStream+0x104>)
 800137c:	4815      	ldr	r0, [pc, #84]	; (80013d4 <PrintDataStream+0xe8>)
 800137e:	f005 fbfd 	bl	8006b7c <PrintStructElement>
	PrintStructElement(&SBGC_1, &RealTimeDataCustom.gyroData[YAW], "Gyro Yaw =", _SIGNED_SHORT_);
 8001382:	2304      	movs	r3, #4
 8001384:	4a1b      	ldr	r2, [pc, #108]	; (80013f4 <PrintDataStream+0x108>)
 8001386:	491c      	ldr	r1, [pc, #112]	; (80013f8 <PrintDataStream+0x10c>)
 8001388:	4812      	ldr	r0, [pc, #72]	; (80013d4 <PrintDataStream+0xe8>)
 800138a:	f005 fbf7 	bl	8006b7c <PrintStructElement>

	PrintStructElement(&SBGC_1, &RealTimeDataCustom.ACC_Data[ROLL], "ACC Roll =", _SIGNED_SHORT_);
 800138e:	2304      	movs	r3, #4
 8001390:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <PrintDataStream+0x110>)
 8001392:	490e      	ldr	r1, [pc, #56]	; (80013cc <PrintDataStream+0xe0>)
 8001394:	480f      	ldr	r0, [pc, #60]	; (80013d4 <PrintDataStream+0xe8>)
 8001396:	f005 fbf1 	bl	8006b7c <PrintStructElement>
	PrintStructElement(&SBGC_1, &RealTimeDataCustom.ACC_Data[PITCH], "ACC Pitch =", _SIGNED_SHORT_);
 800139a:	2304      	movs	r3, #4
 800139c:	4a18      	ldr	r2, [pc, #96]	; (8001400 <PrintDataStream+0x114>)
 800139e:	4919      	ldr	r1, [pc, #100]	; (8001404 <PrintDataStream+0x118>)
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <PrintDataStream+0xe8>)
 80013a2:	f005 fbeb 	bl	8006b7c <PrintStructElement>
	PrintStructElement(&SBGC_1, &RealTimeDataCustom.ACC_Data[YAW], "ACC Yaw =", _SIGNED_SHORT_);
 80013a6:	2304      	movs	r3, #4
 80013a8:	4a17      	ldr	r2, [pc, #92]	; (8001408 <PrintDataStream+0x11c>)
 80013aa:	4918      	ldr	r1, [pc, #96]	; (800140c <PrintDataStream+0x120>)
 80013ac:	4809      	ldr	r0, [pc, #36]	; (80013d4 <PrintDataStream+0xe8>)
 80013ae:	f005 fbe5 	bl	8006b7c <PrintStructElement>

	PrintMessage(&SBGC_1, TEXT_SIZE_((char*)"__________________________\n\n"));
 80013b2:	221c      	movs	r2, #28
 80013b4:	4916      	ldr	r1, [pc, #88]	; (8001410 <PrintDataStream+0x124>)
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <PrintDataStream+0xe8>)
 80013b8:	f005 fbce 	bl	8006b58 <PrintMessage>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000054c 	.word	0x2000054c
 80013c8:	20000552 	.word	0x20000552
 80013cc:	200005a0 	.word	0x200005a0
 80013d0:	0800bff8 	.word	0x0800bff8
 80013d4:	200001fc 	.word	0x200001fc
 80013d8:	0800c014 	.word	0x0800c014
 80013dc:	2000054e 	.word	0x2000054e
 80013e0:	0800c030 	.word	0x0800c030
 80013e4:	20000550 	.word	0x20000550
 80013e8:	0800c04c 	.word	0x0800c04c
 80013ec:	0800c058 	.word	0x0800c058
 80013f0:	20000554 	.word	0x20000554
 80013f4:	0800c068 	.word	0x0800c068
 80013f8:	20000556 	.word	0x20000556
 80013fc:	0800bf7c 	.word	0x0800bf7c
 8001400:	0800bf88 	.word	0x0800bf88
 8001404:	200005a2 	.word	0x200005a2
 8001408:	0800bf94 	.word	0x0800bf94
 800140c:	200005a4 	.word	0x200005a4
 8001410:	0800c074 	.word	0x0800c074

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_MspInit+0x44>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_MspInit+0x44>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_MspInit+0x44>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_MspInit+0x44>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_MspInit+0x44>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_MspInit+0x44>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 fbe8 	bl	8001c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/*  - - - - - TIM2 Interrupt Flags Check - - - - - */

	if (GET_FLAG_TIM_SR_UIF(INTERNAL_MAIN_TIMER) &&
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <TIM2_IRQHandler+0x34>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10b      	bne.n	80014e6 <TIM2_IRQHandler+0x2a>
		GET_FLAG_TIM_DIER_UIE(INTERNAL_MAIN_TIMER))
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <TIM2_IRQHandler+0x34>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0301 	and.w	r3, r3, #1
	if (GET_FLAG_TIM_SR_UIF(INTERNAL_MAIN_TIMER) &&
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d104      	bne.n	80014e6 <TIM2_IRQHandler+0x2a>
		TimerDRV_CallBack(SBGC_1.Drv);
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <TIM2_IRQHandler+0x38>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 fe38 	bl	8005156 <TimerDRV_CallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014e6:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM2_IRQHandler+0x34>)
 80014e8:	f002 f93e 	bl	8003768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000790 	.word	0x20000790
 80014f4:	200001fc 	.word	0x200001fc

080014f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/* - - - - - UART1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <USART1_IRQHandler+0x5c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001506:	2b40      	cmp	r3, #64	; 0x40
 8001508:	d10b      	bne.n	8001522 <USART1_IRQHandler+0x2a>
		GET_FLAG_UART_CR1_TCIE(SBGC_SERIAL_PORT))
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <USART1_IRQHandler+0x5c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0340 	and.w	r3, r3, #64	; 0x40
	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d004      	beq.n	8001522 <USART1_IRQHandler+0x2a>
		UART_DRV_TxCallBack(SBGC_1.Drv);
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <USART1_IRQHandler+0x60>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fe8d 	bl	800523c <UART_DRV_TxCallBack>

	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <USART1_IRQHandler+0x5c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	2b20      	cmp	r3, #32
 800152e:	d10b      	bne.n	8001548 <USART1_IRQHandler+0x50>
		GET_FLAG_UART_CR1_RXNEIE(SBGC_SERIAL_PORT))
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <USART1_IRQHandler+0x5c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 800153a:	2b00      	cmp	r3, #0
 800153c:	d004      	beq.n	8001548 <USART1_IRQHandler+0x50>
		UART_DRV_RxCallBack(SBGC_1.Drv);
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <USART1_IRQHandler+0x60>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f003 ff38 	bl	80053b8 <UART_DRV_RxCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <USART1_IRQHandler+0x5c>)
 800154a:	f002 fdf1 	bl	8004130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200007dc 	.word	0x200007dc
 8001558:	200001fc 	.word	0x200001fc

0800155c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_kill>:

int _kill(int pid, int sig)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001576:	f006 f86d 	bl	8007654 <__errno>
 800157a:	4603      	mov	r3, r0
 800157c:	2216      	movs	r2, #22
 800157e:	601a      	str	r2, [r3, #0]
	return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_exit>:

void _exit (int status)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffe7 	bl	800156c <_kill>
	while (1) {}		/* Make sure we hang here */
 800159e:	e7fe      	b.n	800159e <_exit+0x12>

080015a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00a      	b.n	80015c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b2:	f3af 8000 	nop.w
 80015b6:	4601      	mov	r1, r0
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf0      	blt.n	80015b2 <_read+0x12>
	}

return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e009      	b.n	8001600 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf1      	blt.n	80015ec <_write+0x12>
	}
	return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_close>:

int _close(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return -1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163a:	605a      	str	r2, [r3, #4]
	return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_isatty>:

int _isatty(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
	return 1;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f005 ffd2 	bl	8007654 <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20080000 	.word	0x20080000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	2000078c 	.word	0x2000078c
 80016e4:	20000900 	.word	0x20000900

080016e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <MX_TIM2_Init+0x98>)
 800172c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001734:	226b      	movs	r2, #107	; 0x6b
 8001736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <MX_TIM2_Init+0x98>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174c:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_TIM2_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001752:	4814      	ldr	r0, [pc, #80]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001754:	f001 ff38 	bl	80035c8 <HAL_TIM_Base_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800175e:	f7ff fe59 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4619      	mov	r1, r3
 800176e:	480d      	ldr	r0, [pc, #52]	; (80017a4 <MX_TIM2_Init+0x98>)
 8001770:	f002 f91a 	bl	80039a8 <HAL_TIM_ConfigClockSource>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800177a:	f7ff fe4b 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800177e:	2320      	movs	r3, #32
 8001780:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	4619      	mov	r1, r3
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_TIM2_Init+0x98>)
 800178c:	f002 fb42 	bl	8003e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001796:	f7ff fe3d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000790 	.word	0x20000790

080017a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d113      	bne.n	80017e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_TIM_Base_MspInit+0x44>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	201c      	movs	r0, #28
 80017d8:	f000 fb75 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017dc:	201c      	movs	r0, #28
 80017de:	f000 fb8e 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_USART1_UART_Init+0x58>)
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <MX_USART1_UART_Init+0x5c>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_USART1_UART_Init+0x58>)
 80017fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001800:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_USART1_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <MX_USART1_UART_Init+0x58>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <MX_USART1_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <MX_USART1_UART_Init+0x58>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <MX_USART1_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001820:	4b09      	ldr	r3, [pc, #36]	; (8001848 <MX_USART1_UART_Init+0x58>)
 8001822:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001826:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001828:	4b07      	ldr	r3, [pc, #28]	; (8001848 <MX_USART1_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <MX_USART1_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_USART1_UART_Init+0x58>)
 8001836:	f002 fb99 	bl	8003f6c <HAL_UART_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001840:	f7ff fde8 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200007dc 	.word	0x200007dc
 800184c:	40011000 	.word	0x40011000

08001850 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 8001856:	4a15      	ldr	r2, [pc, #84]	; (80018ac <MX_USART2_UART_Init+0x5c>)
 8001858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 8001882:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001886:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_USART2_UART_Init+0x58>)
 8001896:	f002 fb69 	bl	8003f6c <HAL_UART_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80018a0:	f7ff fdb8 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000860 	.word	0x20000860
 80018ac:	40004400 	.word	0x40004400

080018b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0b0      	sub	sp, #192	; 0xc0
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2290      	movs	r2, #144	; 0x90
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f005 feff 	bl	80076d4 <memset>
  if(uartHandle->Instance==USART1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_UART_MspInit+0x170>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d15a      	bne.n	8001996 <HAL_UART_MspInit+0xe6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018e0:	2340      	movs	r3, #64	; 0x40
 80018e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018e4:	2300      	movs	r3, #0
 80018e6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fa43 	bl	8002d78 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018f8:	f7ff fd8c 	bl	8001414 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018fc:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <HAL_UART_MspInit+0x174>)
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	4a48      	ldr	r2, [pc, #288]	; (8001a24 <HAL_UART_MspInit+0x174>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6453      	str	r3, [r2, #68]	; 0x44
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <HAL_UART_MspInit+0x174>)
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <HAL_UART_MspInit+0x174>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a42      	ldr	r2, [pc, #264]	; (8001a24 <HAL_UART_MspInit+0x174>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <HAL_UART_MspInit+0x174>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800192c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001946:	2304      	movs	r3, #4
 8001948:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001950:	4619      	mov	r1, r3
 8001952:	4835      	ldr	r0, [pc, #212]	; (8001a28 <HAL_UART_MspInit+0x178>)
 8001954:	f000 fb80 	bl	8002058 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800195c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001966:	2301      	movs	r3, #1
 8001968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001972:	2304      	movs	r3, #4
 8001974:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001978:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800197c:	4619      	mov	r1, r3
 800197e:	482a      	ldr	r0, [pc, #168]	; (8001a28 <HAL_UART_MspInit+0x178>)
 8001980:	f000 fb6a 	bl	8002058 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2101      	movs	r1, #1
 8001988:	2025      	movs	r0, #37	; 0x25
 800198a:	f000 fa9c 	bl	8001ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800198e:	2025      	movs	r0, #37	; 0x25
 8001990:	f000 fab5 	bl	8001efe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001994:	e03f      	b.n	8001a16 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <HAL_UART_MspInit+0x17c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d13a      	bne.n	8001a16 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4618      	mov	r0, r3
 80019ae:	f001 f9e3 	bl	8002d78 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_UART_MspInit+0x10c>
      Error_Handler();
 80019b8:	f7ff fd2c 	bl	8001414 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x174>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <HAL_UART_MspInit+0x174>)
 80019c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_UART_MspInit+0x174>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_UART_MspInit+0x174>)
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <HAL_UART_MspInit+0x174>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6313      	str	r3, [r2, #48]	; 0x30
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_UART_MspInit+0x174>)
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ec:	230c      	movs	r3, #12
 80019ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a04:	2307      	movs	r3, #7
 8001a06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <HAL_UART_MspInit+0x180>)
 8001a12:	f000 fb21 	bl	8002058 <HAL_GPIO_Init>
}
 8001a16:	bf00      	nop
 8001a18:	37c0      	adds	r7, #192	; 0xc0
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40011000 	.word	0x40011000
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40004400 	.word	0x40004400
 8001a30:	40020000 	.word	0x40020000

08001a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a3a:	490e      	ldr	r1, [pc, #56]	; (8001a74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a50:	4c0b      	ldr	r4, [pc, #44]	; (8001a80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a5e:	f7ff fe43 	bl	80016e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a62:	f005 fdfd 	bl	8007660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a66:	f7ff f84d 	bl	8000b04 <main>
  bx  lr    
 8001a6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a78:	0800d51c 	.word	0x0800d51c
  ldr r2, =_sbss
 8001a7c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a80:	20000900 	.word	0x20000900

08001a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC_IRQHandler>

08001a86 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d104      	bne.n	8001a9e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a94:	b672      	cpsid	i
}
 8001a96:	bf00      	nop
 8001a98:	f7ff fcbc 	bl	8001414 <Error_Handler>
 8001a9c:	e7fe      	b.n	8001a9c <stm32_lock_init+0x16>
  lock->flag = 0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	705a      	strb	r2, [r3, #1]
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aba:	f3ef 8310 	mrs	r3, PRIMASK
 8001abe:	60bb      	str	r3, [r7, #8]
  return(result);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aca:	b672      	cpsid	i
}
 8001acc:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ace:	f3bf 8f4f 	dsb	sy
}
 8001ad2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ad4:	f3bf 8f6f 	isb	sy
}
 8001ad8:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d104      	bne.n	8001aea <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
 8001ae4:	f7ff fc96 	bl	8001414 <Error_Handler>
 8001ae8:	e7fe      	b.n	8001ae8 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	785b      	ldrb	r3, [r3, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7bfa      	ldrb	r2, [r7, #15]
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e008      	b.n	8001b0c <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d104      	bne.n	8001b0c <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b02:	b672      	cpsid	i
}
 8001b04:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001b06:	f7ff fc85 	bl	8001414 <Error_Handler>
 8001b0a:	e7fe      	b.n	8001b0a <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	705a      	strb	r2, [r3, #1]
}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d104      	bne.n	8001b38 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2e:	b672      	cpsid	i
}
 8001b30:	bf00      	nop
 8001b32:	f7ff fc6f 	bl	8001414 <Error_Handler>
 8001b36:	e7fe      	b.n	8001b36 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	785b      	ldrb	r3, [r3, #1]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001b44:	f7ff fc66 	bl	8001414 <Error_Handler>
 8001b48:	e7fe      	b.n	8001b48 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	785b      	ldrb	r3, [r3, #1]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d105      	bne.n	8001b6a <stm32_lock_release+0x4a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b66:	b662      	cpsie	i
}
 8001b68:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d105      	bne.n	8001b8c <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001b80:	f005 fd68 	bl	8007654 <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2216      	movs	r2, #22
 8001b88:	601a      	str	r2, [r3, #0]
    return;
 8001b8a:	e015      	b.n	8001bb8 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f005 fd8b 	bl	80076a8 <malloc>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461a      	mov	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff6d 	bl	8001a86 <stm32_lock_init>
    return;
 8001bac:	e004      	b.n	8001bb8 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bae:	b672      	cpsid	i
}
 8001bb0:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001bb2:	f7ff fc2f 	bl	8001414 <Error_Handler>
 8001bb6:	e7fe      	b.n	8001bb6 <__retarget_lock_init_recursive+0x44>
}
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d104      	bne.n	8001bd6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bcc:	b672      	cpsid	i
}
 8001bce:	bf00      	nop
 8001bd0:	f7ff fc20 	bl	8001414 <Error_Handler>
 8001bd4:	e7fe      	b.n	8001bd4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff6a 	bl	8001ab2 <stm32_lock_acquire>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
 8001bf8:	f7ff fc0c 	bl	8001414 <Error_Handler>
 8001bfc:	e7fe      	b.n	8001bfc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff8d 	bl	8001b20 <stm32_lock_release>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f94c 	bl	8001eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c18:	200f      	movs	r0, #15
 8001c1a:	f000 f805 	bl	8001c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1e:	f7ff fbff 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x54>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x58>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f967 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00e      	b.n	8001c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b0f      	cmp	r3, #15
 8001c5a:	d80a      	bhi.n	8001c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f000 f92f 	bl	8001ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <HAL_InitTick+0x5c>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e000      	b.n	8001c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x20>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_IncTick+0x24>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	4a04      	ldr	r2, [pc, #16]	; (8001cac <HAL_IncTick+0x24>)
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	200008f0 	.word	0x200008f0

08001cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_GetTick+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200008f0 	.word	0x200008f0

08001cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff ffee 	bl	8001cb0 <HAL_GetTick>
 8001cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d005      	beq.n	8001cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_Delay+0x44>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4413      	add	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cee:	bf00      	nop
 8001cf0:	f7ff ffde 	bl	8001cb0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d8f7      	bhi.n	8001cf0 <HAL_Delay+0x28>
  {
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000008 	.word	0x20000008

08001d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <__NVIC_SetPriorityGrouping+0x40>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x40>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00
 8001d54:	05fa0000 	.word	0x05fa0000

08001d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <__NVIC_GetPriorityGrouping+0x18>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	0a1b      	lsrs	r3, r3, #8
 8001d62:	f003 0307 	and.w	r3, r3, #7
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	db0b      	blt.n	8001d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f003 021f 	and.w	r2, r3, #31
 8001d8c:	4907      	ldr	r1, [pc, #28]	; (8001dac <__NVIC_EnableIRQ+0x38>)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2001      	movs	r0, #1
 8001d96:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	e000e100 	.word	0xe000e100

08001db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	6039      	str	r1, [r7, #0]
 8001dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	db0a      	blt.n	8001dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <__NVIC_SetPriority+0x4c>)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd8:	e00a      	b.n	8001df0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4908      	ldr	r1, [pc, #32]	; (8001e00 <__NVIC_SetPriority+0x50>)
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	3b04      	subs	r3, #4
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	440b      	add	r3, r1
 8001dee:	761a      	strb	r2, [r3, #24]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000e100 	.word	0xe000e100
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b089      	sub	sp, #36	; 0x24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f1c3 0307 	rsb	r3, r3, #7
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	bf28      	it	cs
 8001e22:	2304      	movcs	r3, #4
 8001e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	2b06      	cmp	r3, #6
 8001e2c:	d902      	bls.n	8001e34 <NVIC_EncodePriority+0x30>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3b03      	subs	r3, #3
 8001e32:	e000      	b.n	8001e36 <NVIC_EncodePriority+0x32>
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43d9      	mvns	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	4313      	orrs	r3, r2
         );
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e7c:	d301      	bcc.n	8001e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00f      	b.n	8001ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <SysTick_Config+0x40>)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8a:	210f      	movs	r1, #15
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f7ff ff8e 	bl	8001db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <SysTick_Config+0x40>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SysTick_Config+0x40>)
 8001e9c:	2207      	movs	r2, #7
 8001e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	e000e010 	.word	0xe000e010

08001eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff29 	bl	8001d10 <__NVIC_SetPriorityGrouping>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
 8001ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff3e 	bl	8001d58 <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff8e 	bl	8001e04 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5d 	bl	8001db0 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff31 	bl	8001d74 <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa2 	bl	8001e6c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff feb6 	bl	8001cb0 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d008      	beq.n	8001f64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2280      	movs	r2, #128	; 0x80
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e052      	b.n	800200a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0216 	bic.w	r2, r2, #22
 8001f72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d103      	bne.n	8001f94 <HAL_DMA_Abort+0x62>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0208 	bic.w	r2, r2, #8
 8001fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0201 	bic.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb4:	e013      	b.n	8001fde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb6:	f7ff fe7b 	bl	8001cb0 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b05      	cmp	r3, #5
 8001fc2:	d90c      	bls.n	8001fde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e015      	b.n	800200a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1e4      	bne.n	8001fb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	223f      	movs	r2, #63	; 0x3f
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d004      	beq.n	8002030 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2280      	movs	r2, #128	; 0x80
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e00c      	b.n	800204a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2205      	movs	r2, #5
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	e175      	b.n	8002364 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002078:	2201      	movs	r2, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4013      	ands	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	429a      	cmp	r2, r3
 8002092:	f040 8164 	bne.w	800235e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d005      	beq.n	80020ae <HAL_GPIO_Init+0x56>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d130      	bne.n	8002110 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 0201 	and.w	r2, r3, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b03      	cmp	r3, #3
 800211a:	d017      	beq.n	800214c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d123      	bne.n	80021a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	69b9      	ldr	r1, [r7, #24]
 800219c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80be 	beq.w	800235e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_GPIO_Init+0x324>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a65      	ldr	r2, [pc, #404]	; (800237c <HAL_GPIO_Init+0x324>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_GPIO_Init+0x324>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021fa:	4a61      	ldr	r2, [pc, #388]	; (8002380 <HAL_GPIO_Init+0x328>)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_GPIO_Init+0x32c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d037      	beq.n	8002296 <HAL_GPIO_Init+0x23e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a57      	ldr	r2, [pc, #348]	; (8002388 <HAL_GPIO_Init+0x330>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d031      	beq.n	8002292 <HAL_GPIO_Init+0x23a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a56      	ldr	r2, [pc, #344]	; (800238c <HAL_GPIO_Init+0x334>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d02b      	beq.n	800228e <HAL_GPIO_Init+0x236>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a55      	ldr	r2, [pc, #340]	; (8002390 <HAL_GPIO_Init+0x338>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d025      	beq.n	800228a <HAL_GPIO_Init+0x232>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a54      	ldr	r2, [pc, #336]	; (8002394 <HAL_GPIO_Init+0x33c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01f      	beq.n	8002286 <HAL_GPIO_Init+0x22e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a53      	ldr	r2, [pc, #332]	; (8002398 <HAL_GPIO_Init+0x340>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d019      	beq.n	8002282 <HAL_GPIO_Init+0x22a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a52      	ldr	r2, [pc, #328]	; (800239c <HAL_GPIO_Init+0x344>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <HAL_GPIO_Init+0x226>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a51      	ldr	r2, [pc, #324]	; (80023a0 <HAL_GPIO_Init+0x348>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00d      	beq.n	800227a <HAL_GPIO_Init+0x222>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a50      	ldr	r2, [pc, #320]	; (80023a4 <HAL_GPIO_Init+0x34c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d007      	beq.n	8002276 <HAL_GPIO_Init+0x21e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4f      	ldr	r2, [pc, #316]	; (80023a8 <HAL_GPIO_Init+0x350>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_GPIO_Init+0x21a>
 800226e:	2309      	movs	r3, #9
 8002270:	e012      	b.n	8002298 <HAL_GPIO_Init+0x240>
 8002272:	230a      	movs	r3, #10
 8002274:	e010      	b.n	8002298 <HAL_GPIO_Init+0x240>
 8002276:	2308      	movs	r3, #8
 8002278:	e00e      	b.n	8002298 <HAL_GPIO_Init+0x240>
 800227a:	2307      	movs	r3, #7
 800227c:	e00c      	b.n	8002298 <HAL_GPIO_Init+0x240>
 800227e:	2306      	movs	r3, #6
 8002280:	e00a      	b.n	8002298 <HAL_GPIO_Init+0x240>
 8002282:	2305      	movs	r3, #5
 8002284:	e008      	b.n	8002298 <HAL_GPIO_Init+0x240>
 8002286:	2304      	movs	r3, #4
 8002288:	e006      	b.n	8002298 <HAL_GPIO_Init+0x240>
 800228a:	2303      	movs	r3, #3
 800228c:	e004      	b.n	8002298 <HAL_GPIO_Init+0x240>
 800228e:	2302      	movs	r3, #2
 8002290:	e002      	b.n	8002298 <HAL_GPIO_Init+0x240>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_GPIO_Init+0x240>
 8002296:	2300      	movs	r3, #0
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	f002 0203 	and.w	r2, r2, #3
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	4093      	lsls	r3, r2
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022a8:	4935      	ldr	r1, [pc, #212]	; (8002380 <HAL_GPIO_Init+0x328>)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_GPIO_Init+0x354>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022da:	4a34      	ldr	r2, [pc, #208]	; (80023ac <HAL_GPIO_Init+0x354>)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e0:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_GPIO_Init+0x354>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002304:	4a29      	ldr	r2, [pc, #164]	; (80023ac <HAL_GPIO_Init+0x354>)
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_GPIO_Init+0x354>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232e:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_GPIO_Init+0x354>)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_GPIO_Init+0x354>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002358:	4a14      	ldr	r2, [pc, #80]	; (80023ac <HAL_GPIO_Init+0x354>)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3301      	adds	r3, #1
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f67f ae86 	bls.w	8002078 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	40013800 	.word	0x40013800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	40021000 	.word	0x40021000
 8002398:	40021400 	.word	0x40021400
 800239c:	40021800 	.word	0x40021800
 80023a0:	40021c00 	.word	0x40021c00
 80023a4:	40022000 	.word	0x40022000
 80023a8:	40022400 	.word	0x40022400
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <HAL_PWREx_EnableOverDrive+0x98>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	4a22      	ldr	r2, [pc, #136]	; (8002448 <HAL_PWREx_EnableOverDrive+0x98>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	; 0x40
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_PWREx_EnableOverDrive+0x98>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023de:	f7ff fc67 	bl	8001cb0 <HAL_GetTick>
 80023e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023e4:	e009      	b.n	80023fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023e6:	f7ff fc63 	bl	8001cb0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f4:	d901      	bls.n	80023fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e022      	b.n	8002440 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_PWREx_EnableOverDrive+0x9c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002406:	d1ee      	bne.n	80023e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002408:	4b10      	ldr	r3, [pc, #64]	; (800244c <HAL_PWREx_EnableOverDrive+0x9c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0f      	ldr	r2, [pc, #60]	; (800244c <HAL_PWREx_EnableOverDrive+0x9c>)
 800240e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002412:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002414:	f7ff fc4c 	bl	8001cb0 <HAL_GetTick>
 8002418:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800241a:	e009      	b.n	8002430 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800241c:	f7ff fc48 	bl	8001cb0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800242a:	d901      	bls.n	8002430 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e007      	b.n	8002440 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800243c:	d1ee      	bne.n	800241c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	40007000 	.word	0x40007000

08002450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002458:	2300      	movs	r3, #0
 800245a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e29b      	b.n	800299e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8087 	beq.w	8002582 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002474:	4b96      	ldr	r3, [pc, #600]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b04      	cmp	r3, #4
 800247e:	d00c      	beq.n	800249a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002480:	4b93      	ldr	r3, [pc, #588]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d112      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62>
 800248c:	4b90      	ldr	r3, [pc, #576]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002498:	d10b      	bne.n	80024b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249a:	4b8d      	ldr	r3, [pc, #564]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d06c      	beq.n	8002580 <HAL_RCC_OscConfig+0x130>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d168      	bne.n	8002580 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e275      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ba:	d106      	bne.n	80024ca <HAL_RCC_OscConfig+0x7a>
 80024bc:	4b84      	ldr	r3, [pc, #528]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a83      	ldr	r2, [pc, #524]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e02e      	b.n	8002528 <HAL_RCC_OscConfig+0xd8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10c      	bne.n	80024ec <HAL_RCC_OscConfig+0x9c>
 80024d2:	4b7f      	ldr	r3, [pc, #508]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a7e      	ldr	r2, [pc, #504]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	4b7c      	ldr	r3, [pc, #496]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7b      	ldr	r2, [pc, #492]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e01d      	b.n	8002528 <HAL_RCC_OscConfig+0xd8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0xc0>
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80024fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a72      	ldr	r2, [pc, #456]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e00b      	b.n	8002528 <HAL_RCC_OscConfig+0xd8>
 8002510:	4b6f      	ldr	r3, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b6c      	ldr	r3, [pc, #432]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a6b      	ldr	r2, [pc, #428]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff fbbe 	bl	8001cb0 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fbba 	bl	8001cb0 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e229      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0xe8>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff fbaa 	bl	8001cb0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fba6 	bl	8001cb0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e215      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x110>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d069      	beq.n	8002662 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800258e:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259a:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d11c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x190>
 80025a6:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d116      	bne.n	80025e0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_RCC_OscConfig+0x17a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e1e9      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	493d      	ldr	r1, [pc, #244]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025de:	e040      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d023      	beq.n	8002630 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e8:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a38      	ldr	r2, [pc, #224]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7ff fb5c 	bl	8001cb0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fc:	f7ff fb58 	bl	8001cb0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1c7      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260e:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4929      	ldr	r1, [pc, #164]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
 800262e:	e018      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002630:	4b27      	ldr	r3, [pc, #156]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff fb38 	bl	8001cb0 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7ff fb34 	bl	8001cb0 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1a3      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d038      	beq.n	80026e0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d019      	beq.n	80026aa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7ff fb15 	bl	8001cb0 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268a:	f7ff fb11 	bl	8001cb0 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e180      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 800269e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x23a>
 80026a8:	e01a      	b.n	80026e0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7ff fafb 	bl	8001cb0 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7ff faf7 	bl	8001cb0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d903      	bls.n	80026d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e166      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
 80026d0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	4b92      	ldr	r3, [pc, #584]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ee      	bne.n	80026be <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a4 	beq.w	8002836 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ee:	4b8c      	ldr	r3, [pc, #560]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10d      	bne.n	8002716 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	4b89      	ldr	r3, [pc, #548]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a88      	ldr	r2, [pc, #544]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b86      	ldr	r3, [pc, #536]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002716:	4b83      	ldr	r3, [pc, #524]	; (8002924 <HAL_RCC_OscConfig+0x4d4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002722:	4b80      	ldr	r3, [pc, #512]	; (8002924 <HAL_RCC_OscConfig+0x4d4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a7f      	ldr	r2, [pc, #508]	; (8002924 <HAL_RCC_OscConfig+0x4d4>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7ff fabf 	bl	8001cb0 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7ff fabb 	bl	8001cb0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	; 0x64
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e12a      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002748:	4b76      	ldr	r3, [pc, #472]	; (8002924 <HAL_RCC_OscConfig+0x4d4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x31a>
 800275c:	4b70      	ldr	r3, [pc, #448]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4a6f      	ldr	r2, [pc, #444]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
 8002768:	e02d      	b.n	80027c6 <HAL_RCC_OscConfig+0x376>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x33c>
 8002772:	4b6b      	ldr	r3, [pc, #428]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a6a      	ldr	r2, [pc, #424]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
 800277e:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a67      	ldr	r2, [pc, #412]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002784:	f023 0304 	bic.w	r3, r3, #4
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	e01c      	b.n	80027c6 <HAL_RCC_OscConfig+0x376>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d10c      	bne.n	80027ae <HAL_RCC_OscConfig+0x35e>
 8002794:	4b62      	ldr	r3, [pc, #392]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a61      	ldr	r2, [pc, #388]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 800279a:	f043 0304 	orr.w	r3, r3, #4
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	4b5f      	ldr	r3, [pc, #380]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a5e      	ldr	r2, [pc, #376]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	e00b      	b.n	80027c6 <HAL_RCC_OscConfig+0x376>
 80027ae:	4b5c      	ldr	r3, [pc, #368]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a5b      	ldr	r2, [pc, #364]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80027b4:	f023 0301 	bic.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	4b59      	ldr	r3, [pc, #356]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a58      	ldr	r2, [pc, #352]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d015      	beq.n	80027fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7ff fa6f 	bl	8001cb0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	e00a      	b.n	80027ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7ff fa6b 	bl	8001cb0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0d8      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ee      	beq.n	80027d6 <HAL_RCC_OscConfig+0x386>
 80027f8:	e014      	b.n	8002824 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7ff fa59 	bl	8001cb0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7ff fa55 	bl	8001cb0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0c2      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	4b41      	ldr	r3, [pc, #260]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ee      	bne.n	8002802 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	4a3c      	ldr	r2, [pc, #240]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80ae 	beq.w	800299c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002840:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d06d      	beq.n	8002928 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d14b      	bne.n	80028ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a31      	ldr	r2, [pc, #196]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 800285a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800285e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7ff fa26 	bl	8001cb0 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7ff fa22 	bl	8001cb0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e091      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b29      	ldr	r3, [pc, #164]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	3b01      	subs	r3, #1
 80028a0:	041b      	lsls	r3, r3, #16
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	071b      	lsls	r3, r3, #28
 80028b2:	491b      	ldr	r1, [pc, #108]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a18      	ldr	r2, [pc, #96]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff f9f4 	bl	8001cb0 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7ff f9f0 	bl	8001cb0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e05f      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x47c>
 80028ea:	e057      	b.n	800299c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff f9da 	bl	8001cb0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7ff f9d6 	bl	8001cb0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e045      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x4b0>
 800291e:	e03d      	b.n	800299c <HAL_RCC_OscConfig+0x54c>
 8002920:	40023800 	.word	0x40023800
 8002924:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002928:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <HAL_RCC_OscConfig+0x558>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d030      	beq.n	8002998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d129      	bne.n	8002998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d122      	bne.n	8002998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800295e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002960:	4293      	cmp	r3, r2
 8002962:	d119      	bne.n	8002998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	3b01      	subs	r3, #1
 8002972:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d10f      	bne.n	8002998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002984:	429a      	cmp	r2, r3
 8002986:	d107      	bne.n	8002998 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800

080029ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0d0      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d910      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 020f 	bic.w	r2, r3, #15
 80029da:	4965      	ldr	r1, [pc, #404]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0b8      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4a58      	ldr	r2, [pc, #352]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a24:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b50      	ldr	r3, [pc, #320]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	494d      	ldr	r1, [pc, #308]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d040      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a56:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d115      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e07f      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6e:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e073      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7e:	4b3d      	ldr	r3, [pc, #244]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e06b      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8e:	4b39      	ldr	r3, [pc, #228]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4936      	ldr	r1, [pc, #216]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa0:	f7ff f906 	bl	8001cb0 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7ff f902 	bl	8001cb0 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e053      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	4b2d      	ldr	r3, [pc, #180]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 020c 	and.w	r2, r3, #12
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d1eb      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d210      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 020f 	bic.w	r2, r3, #15
 8002ae6:	4922      	ldr	r1, [pc, #136]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e032      	b.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4916      	ldr	r1, [pc, #88]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	490e      	ldr	r1, [pc, #56]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3e:	f000 f821 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8002b42:	4602      	mov	r2, r0
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	490a      	ldr	r1, [pc, #40]	; (8002b78 <HAL_RCC_ClockConfig+0x1cc>)
 8002b50:	5ccb      	ldrb	r3, [r1, r3]
 8002b52:	fa22 f303 	lsr.w	r3, r2, r3
 8002b56:	4a09      	ldr	r2, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1d0>)
 8002b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_ClockConfig+0x1d4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f862 	bl	8001c28 <HAL_InitTick>

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023c00 	.word	0x40023c00
 8002b74:	40023800 	.word	0x40023800
 8002b78:	0800c490 	.word	0x0800c490
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	20000004 	.word	0x20000004

08002b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b88:	b090      	sub	sp, #64	; 0x40
 8002b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b90:	2300      	movs	r3, #0
 8002b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b94:	2300      	movs	r3, #0
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9c:	4b59      	ldr	r3, [pc, #356]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030c 	and.w	r3, r3, #12
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d00d      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	f200 80a1 	bhi.w	8002cf0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb6:	e09b      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b53      	ldr	r3, [pc, #332]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bbc:	e09b      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bbe:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bc0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bc2:	e098      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc4:	4b4f      	ldr	r3, [pc, #316]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bce:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d028      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bda:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	099b      	lsrs	r3, r3, #6
 8002be0:	2200      	movs	r2, #0
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	627a      	str	r2, [r7, #36]	; 0x24
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002bec:	2100      	movs	r1, #0
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf0:	fb03 f201 	mul.w	r2, r3, r1
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	fb00 f303 	mul.w	r3, r0, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4a43      	ldr	r2, [pc, #268]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x188>)
 8002bfe:	fba0 1202 	umull	r1, r2, r0, r2
 8002c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c04:	460a      	mov	r2, r1
 8002c06:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0a:	4413      	add	r3, r2
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	2200      	movs	r2, #0
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	61fa      	str	r2, [r7, #28]
 8002c16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c1e:	f7fd fd23 	bl	8000668 <__aeabi_uldivmod>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4613      	mov	r3, r2
 8002c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2a:	e053      	b.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b35      	ldr	r3, [pc, #212]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	2200      	movs	r2, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	617a      	str	r2, [r7, #20]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c3e:	f04f 0b00 	mov.w	fp, #0
 8002c42:	4652      	mov	r2, sl
 8002c44:	465b      	mov	r3, fp
 8002c46:	f04f 0000 	mov.w	r0, #0
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	0159      	lsls	r1, r3, #5
 8002c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c54:	0150      	lsls	r0, r2, #5
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c5e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c76:	ebb2 0408 	subs.w	r4, r2, r8
 8002c7a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	00eb      	lsls	r3, r5, #3
 8002c88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8c:	00e2      	lsls	r2, r4, #3
 8002c8e:	4614      	mov	r4, r2
 8002c90:	461d      	mov	r5, r3
 8002c92:	eb14 030a 	adds.w	r3, r4, sl
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	eb45 030b 	adc.w	r3, r5, fp
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002caa:	4629      	mov	r1, r5
 8002cac:	028b      	lsls	r3, r1, #10
 8002cae:	4621      	mov	r1, r4
 8002cb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	028a      	lsls	r2, r1, #10
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	60fa      	str	r2, [r7, #12]
 8002cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cc8:	f7fd fcce 	bl	8000668 <__aeabi_uldivmod>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002ce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x184>)
 8002cf2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3740      	adds	r7, #64	; 0x40
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400
 8002d0c:	017d7840 	.word	0x017d7840

08002d10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d16:	681b      	ldr	r3, [r3, #0]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	20000000 	.word	0x20000000

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d2c:	f7ff fff0 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0a9b      	lsrs	r3, r3, #10
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	4903      	ldr	r1, [pc, #12]	; (8002d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3e:	5ccb      	ldrb	r3, [r1, r3]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	0800c4a0 	.word	0x0800c4a0

08002d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d54:	f7ff ffdc 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0b5b      	lsrs	r3, r3, #13
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	0800c4a0 	.word	0x0800c4a0

08002d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d012      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002da0:	4b69      	ldr	r3, [pc, #420]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	4a68      	ldr	r2, [pc, #416]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002daa:	6093      	str	r3, [r2, #8]
 8002dac:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	4964      	ldr	r1, [pc, #400]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d017      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dd2:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de0:	4959      	ldr	r1, [pc, #356]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df0:	d101      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d017      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e0e:	4b4e      	ldr	r3, [pc, #312]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	494a      	ldr	r1, [pc, #296]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0320 	and.w	r3, r3, #32
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 808b 	beq.w	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e66:	6413      	str	r3, [r2, #64]	; 0x40
 8002e68:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e74:	4b35      	ldr	r3, [pc, #212]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a34      	ldr	r2, [pc, #208]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e80:	f7fe ff16 	bl	8001cb0 <HAL_GetTick>
 8002e84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e88:	f7fe ff12 	bl	8001cb0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e38f      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ea6:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d035      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d02e      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ecc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ee6:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d114      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe feda 	bl	8001cb0 <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efe:	e00a      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	f7fe fed6 	bl	8001cb0 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e351      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ee      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2e:	d111      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f3e:	400b      	ands	r3, r1
 8002f40:	4901      	ldr	r1, [pc, #4]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	608b      	str	r3, [r1, #8]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	0ffffcff 	.word	0x0ffffcff
 8002f54:	4bac      	ldr	r3, [pc, #688]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	4aab      	ldr	r2, [pc, #684]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f5e:	6093      	str	r3, [r2, #8]
 8002f60:	4ba9      	ldr	r3, [pc, #676]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6c:	49a6      	ldr	r1, [pc, #664]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f7e:	4ba2      	ldr	r3, [pc, #648]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f84:	4aa0      	ldr	r2, [pc, #640]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f8e:	4b9e      	ldr	r3, [pc, #632]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	499b      	ldr	r1, [pc, #620]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fac:	4b96      	ldr	r3, [pc, #600]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fba:	4993      	ldr	r1, [pc, #588]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fce:	4b8e      	ldr	r3, [pc, #568]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fdc:	498a      	ldr	r1, [pc, #552]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ff0:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ffe:	4982      	ldr	r1, [pc, #520]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003012:	4b7d      	ldr	r3, [pc, #500]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4979      	ldr	r1, [pc, #484]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003034:	4b74      	ldr	r3, [pc, #464]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	4971      	ldr	r1, [pc, #452]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003056:	4b6c      	ldr	r3, [pc, #432]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f023 020c 	bic.w	r2, r3, #12
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003064:	4968      	ldr	r1, [pc, #416]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003078:	4b63      	ldr	r3, [pc, #396]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003086:	4960      	ldr	r1, [pc, #384]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a8:	4957      	ldr	r1, [pc, #348]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030bc:	4b52      	ldr	r3, [pc, #328]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	494f      	ldr	r1, [pc, #316]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	4946      	ldr	r1, [pc, #280]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003100:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310e:	493e      	ldr	r1, [pc, #248]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003130:	4935      	ldr	r1, [pc, #212]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003144:	4b30      	ldr	r3, [pc, #192]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003152:	492d      	ldr	r1, [pc, #180]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d011      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003174:	4924      	ldr	r1, [pc, #144]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003184:	d101      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003186:	2301      	movs	r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003196:	2301      	movs	r3, #1
 8003198:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031a6:	4b18      	ldr	r3, [pc, #96]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b4:	4914      	ldr	r1, [pc, #80]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031c8:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d8:	490b      	ldr	r1, [pc, #44]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00f      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fc:	4902      	ldr	r1, [pc, #8]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003204:	e002      	b.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00b      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003218:	4b8a      	ldr	r3, [pc, #552]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800321e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	4986      	ldr	r1, [pc, #536]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800323c:	4b81      	ldr	r3, [pc, #516]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800323e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003242:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324c:	497d      	ldr	r1, [pc, #500]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d006      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80d6 	beq.w	8003414 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003268:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a75      	ldr	r2, [pc, #468]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003274:	f7fe fd1c 	bl	8001cb0 <HAL_GetTick>
 8003278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800327c:	f7fe fd18 	bl	8001cb0 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e195      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800328e:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f0      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d021      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11d      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032ae:	4b65      	ldr	r3, [pc, #404]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032bc:	4b61      	ldr	r3, [pc, #388]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c2:	0e1b      	lsrs	r3, r3, #24
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	019a      	lsls	r2, r3, #6
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	071b      	lsls	r3, r3, #28
 80032e2:	4958      	ldr	r1, [pc, #352]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d004      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032fe:	d00a      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003308:	2b00      	cmp	r3, #0
 800330a:	d02e      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003314:	d129      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003316:	4b4b      	ldr	r3, [pc, #300]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003324:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332a:	0f1b      	lsrs	r3, r3, #28
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	019a      	lsls	r2, r3, #6
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	061b      	lsls	r3, r3, #24
 8003344:	431a      	orrs	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	071b      	lsls	r3, r3, #28
 800334a:	493e      	ldr	r1, [pc, #248]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003352:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003358:	f023 021f 	bic.w	r2, r3, #31
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	3b01      	subs	r3, #1
 8003362:	4938      	ldr	r1, [pc, #224]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01d      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003376:	4b33      	ldr	r3, [pc, #204]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337c:	0e1b      	lsrs	r3, r3, #24
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003384:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338a:	0f1b      	lsrs	r3, r3, #28
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	019a      	lsls	r2, r3, #6
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	041b      	lsls	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	061b      	lsls	r3, r3, #24
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	071b      	lsls	r3, r3, #28
 80033aa:	4926      	ldr	r1, [pc, #152]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d011      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	019a      	lsls	r2, r3, #6
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	041b      	lsls	r3, r3, #16
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	071b      	lsls	r3, r3, #28
 80033da:	491a      	ldr	r1, [pc, #104]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80033e2:	4b18      	ldr	r3, [pc, #96]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a17      	ldr	r2, [pc, #92]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ee:	f7fe fc5f 	bl	8001cb0 <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033f6:	f7fe fc5b 	bl	8001cb0 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b64      	cmp	r3, #100	; 0x64
 8003402:	d901      	bls.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e0d8      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003408:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	2b01      	cmp	r3, #1
 8003418:	f040 80ce 	bne.w	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003426:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003428:	f7fe fc42 	bl	8001cb0 <HAL_GetTick>
 800342c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800342e:	e00b      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003430:	f7fe fc3e 	bl	8001cb0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d904      	bls.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0bb      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003448:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003454:	d0ec      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003472:	2b00      	cmp	r3, #0
 8003474:	d02e      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d12a      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800347e:	4b51      	ldr	r3, [pc, #324]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	0c1b      	lsrs	r3, r3, #16
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800348c:	4b4d      	ldr	r3, [pc, #308]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	0f1b      	lsrs	r3, r3, #28
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	019a      	lsls	r2, r3, #6
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	431a      	orrs	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	4944      	ldr	r1, [pc, #272]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034ba:	4b42      	ldr	r3, [pc, #264]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	493d      	ldr	r1, [pc, #244]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d022      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e8:	d11d      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	0f1b      	lsrs	r3, r3, #28
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	019a      	lsls	r2, r3, #6
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	041b      	lsls	r3, r3, #16
 8003512:	431a      	orrs	r2, r3
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	061b      	lsls	r3, r3, #24
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	071b      	lsls	r3, r3, #28
 800351e:	4929      	ldr	r1, [pc, #164]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d028      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	0e1b      	lsrs	r3, r3, #24
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003540:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	019a      	lsls	r2, r3, #6
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	431a      	orrs	r2, r3
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	061b      	lsls	r3, r3, #24
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	071b      	lsls	r3, r3, #28
 8003566:	4917      	ldr	r1, [pc, #92]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	4911      	ldr	r1, [pc, #68]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800358a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003590:	f7fe fb8e 	bl	8001cb0 <HAL_GetTick>
 8003594:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003598:	f7fe fb8a 	bl	8001cb0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e007      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b6:	d1ef      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e049      	b.n	800366e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fe f8da 	bl	80017a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 faca 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d001      	beq.n	8003690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e054      	b.n	800373a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <HAL_TIM_Base_Start_IT+0xd0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d022      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d01d      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	; (800374c <HAL_TIM_Base_Start_IT+0xd4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d018      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a21      	ldr	r2, [pc, #132]	; (8003750 <HAL_TIM_Base_Start_IT+0xd8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1f      	ldr	r2, [pc, #124]	; (8003754 <HAL_TIM_Base_Start_IT+0xdc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00e      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1e      	ldr	r2, [pc, #120]	; (8003758 <HAL_TIM_Base_Start_IT+0xe0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d009      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_TIM_Base_Start_IT+0xe4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_TIM_Base_Start_IT+0x80>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1b      	ldr	r2, [pc, #108]	; (8003760 <HAL_TIM_Base_Start_IT+0xe8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d115      	bne.n	8003724 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_TIM_Base_Start_IT+0xec>)
 8003700:	4013      	ands	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2b06      	cmp	r3, #6
 8003708:	d015      	beq.n	8003736 <HAL_TIM_Base_Start_IT+0xbe>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d011      	beq.n	8003736 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0201 	orr.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003722:	e008      	b.n	8003736 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e000      	b.n	8003738 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40010400 	.word	0x40010400
 800375c:	40014000 	.word	0x40014000
 8003760:	40001800 	.word	0x40001800
 8003764:	00010007 	.word	0x00010007

08003768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b02      	cmp	r3, #2
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0202 	mvn.w	r2, #2
 8003794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9da 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9cc 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f9dd 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0204 	mvn.w	r2, #4
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9b0 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f9a2 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9b3 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b08      	cmp	r3, #8
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b08      	cmp	r3, #8
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0208 	mvn.w	r2, #8
 800383c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f986 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f978 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f989 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b10      	cmp	r3, #16
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0210 	mvn.w	r2, #16
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2208      	movs	r2, #8
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f95c 	bl	8003b64 <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f94e 	bl	8003b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f95f 	bl	8003b78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0201 	mvn.w	r2, #1
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f928 	bl	8003b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fb16 	bl	8003f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d10e      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b80      	cmp	r3, #128	; 0x80
 8003934:	d107      	bne.n	8003946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800393e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fb09 	bl	8003f58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d10e      	bne.n	8003972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b40      	cmp	r3, #64	; 0x40
 8003960:	d107      	bne.n	8003972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f90d 	bl	8003b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d10e      	bne.n	800399e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b20      	cmp	r3, #32
 800398c:	d107      	bne.n	800399e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f06f 0220 	mvn.w	r2, #32
 8003996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 fac9 	bl	8003f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIM_ConfigClockSource+0x1c>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e0b4      	b.n	8003b2e <HAL_TIM_ConfigClockSource+0x186>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	4b56      	ldr	r3, [pc, #344]	; (8003b38 <HAL_TIM_ConfigClockSource+0x190>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fc:	d03e      	beq.n	8003a7c <HAL_TIM_ConfigClockSource+0xd4>
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a02:	f200 8087 	bhi.w	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0a:	f000 8086 	beq.w	8003b1a <HAL_TIM_ConfigClockSource+0x172>
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a12:	d87f      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b70      	cmp	r3, #112	; 0x70
 8003a16:	d01a      	beq.n	8003a4e <HAL_TIM_ConfigClockSource+0xa6>
 8003a18:	2b70      	cmp	r3, #112	; 0x70
 8003a1a:	d87b      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b60      	cmp	r3, #96	; 0x60
 8003a1e:	d050      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x11a>
 8003a20:	2b60      	cmp	r3, #96	; 0x60
 8003a22:	d877      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b50      	cmp	r3, #80	; 0x50
 8003a26:	d03c      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a28:	2b50      	cmp	r3, #80	; 0x50
 8003a2a:	d873      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b40      	cmp	r3, #64	; 0x40
 8003a2e:	d058      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x13a>
 8003a30:	2b40      	cmp	r3, #64	; 0x40
 8003a32:	d86f      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b30      	cmp	r3, #48	; 0x30
 8003a36:	d064      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x15a>
 8003a38:	2b30      	cmp	r3, #48	; 0x30
 8003a3a:	d86b      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d060      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d867      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d05c      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d05a      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x15a>
 8003a4c:	e062      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6899      	ldr	r1, [r3, #8]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f000 f9b9 	bl	8003dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	609a      	str	r2, [r3, #8]
      break;
 8003a7a:	e04f      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6899      	ldr	r1, [r3, #8]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f000 f9a2 	bl	8003dd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a9e:	609a      	str	r2, [r3, #8]
      break;
 8003aa0:	e03c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 f916 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2150      	movs	r1, #80	; 0x50
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f96f 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e02c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f000 f935 	bl	8003d3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2160      	movs	r1, #96	; 0x60
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f95f 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e01c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f000 f8f6 	bl	8003ce0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2140      	movs	r1, #64	; 0x40
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f94f 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003b00:	e00c      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f000 f946 	bl	8003d9e <TIM_ITRx_SetConfig>
      break;
 8003b12:	e003      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	73fb      	strb	r3, [r7, #15]
      break;
 8003b18:	e000      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	fffeff88 	.word	0xfffeff88

08003b3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a40      	ldr	r2, [pc, #256]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d00f      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a3d      	ldr	r2, [pc, #244]	; (8003cb8 <TIM_Base_SetConfig+0x118>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3c      	ldr	r2, [pc, #240]	; (8003cbc <TIM_Base_SetConfig+0x11c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <TIM_Base_SetConfig+0x120>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3a      	ldr	r2, [pc, #232]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2f      	ldr	r2, [pc, #188]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d027      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <TIM_Base_SetConfig+0x118>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d023      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <TIM_Base_SetConfig+0x11c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01f      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2a      	ldr	r2, [pc, #168]	; (8003cc0 <TIM_Base_SetConfig+0x120>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a29      	ldr	r2, [pc, #164]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d017      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a28      	ldr	r2, [pc, #160]	; (8003cc8 <TIM_Base_SetConfig+0x128>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <TIM_Base_SetConfig+0x12c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <TIM_Base_SetConfig+0x130>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a25      	ldr	r2, [pc, #148]	; (8003cd4 <TIM_Base_SetConfig+0x134>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a24      	ldr	r2, [pc, #144]	; (8003cd8 <TIM_Base_SetConfig+0x138>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <TIM_Base_SetConfig+0x13c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <TIM_Base_SetConfig+0x114>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d003      	beq.n	8003c98 <TIM_Base_SetConfig+0xf8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0c      	ldr	r2, [pc, #48]	; (8003cc4 <TIM_Base_SetConfig+0x124>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	615a      	str	r2, [r3, #20]
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40010400 	.word	0x40010400
 8003cc8:	40014000 	.word	0x40014000
 8003ccc:	40014400 	.word	0x40014400
 8003cd0:	40014800 	.word	0x40014800
 8003cd4:	40001800 	.word	0x40001800
 8003cd8:	40001c00 	.word	0x40001c00
 8003cdc:	40002000 	.word	0x40002000

08003ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f023 0201 	bic.w	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 030a 	bic.w	r3, r3, #10
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b087      	sub	sp, #28
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f023 0210 	bic.w	r2, r3, #16
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	031b      	lsls	r3, r3, #12
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f043 0307 	orr.w	r3, r3, #7
 8003dc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	609a      	str	r2, [r3, #8]
}
 8003dc8:	bf00      	nop
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	609a      	str	r2, [r3, #8]
}
 8003e08:	bf00      	nop
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e06d      	b.n	8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d004      	beq.n	8003e60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d108      	bne.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a20      	ldr	r2, [pc, #128]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d022      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9e:	d01d      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1d      	ldr	r2, [pc, #116]	; (8003f1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d018      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d013      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00e      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d009      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d004      	beq.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d10c      	bne.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40010400 	.word	0x40010400
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40000c00 	.word	0x40000c00
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40001800 	.word	0x40001800

08003f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e040      	b.n	8004000 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fd fc8e 	bl	80018b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2224      	movs	r2, #36	; 0x24
 8003f98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fbca 	bl	8004744 <UART_SetConfig>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e022      	b.n	8004000 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fe22 	bl	8004c0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fea9 	bl	8004d50 <UART_CheckIdleState>
 8003ffe:	4603      	mov	r3, r0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	; 0x28
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800401c:	2b20      	cmp	r3, #32
 800401e:	f040 8081 	bne.w	8004124 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_UART_Transmit+0x26>
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e079      	b.n	8004126 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_UART_Transmit+0x38>
 800403c:	2302      	movs	r3, #2
 800403e:	e072      	b.n	8004126 <HAL_UART_Transmit+0x11e>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2221      	movs	r2, #33	; 0x21
 8004054:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004056:	f7fd fe2b 	bl	8001cb0 <HAL_GetTick>
 800405a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	88fa      	ldrh	r2, [r7, #6]
 8004068:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004074:	d108      	bne.n	8004088 <HAL_UART_Transmit+0x80>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	e003      	b.n	8004090 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004098:	e02c      	b.n	80040f4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2200      	movs	r2, #0
 80040a2:	2180      	movs	r1, #128	; 0x80
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fe9c 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e038      	b.n	8004126 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	3302      	adds	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e007      	b.n	80040e2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3301      	adds	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1cc      	bne.n	800409a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	2200      	movs	r2, #0
 8004108:	2140      	movs	r1, #64	; 0x40
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fe69 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e005      	b.n	8004126 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2220      	movs	r2, #32
 800411e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
  }
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
	...

08004130 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b0ba      	sub	sp, #232	; 0xe8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004156:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800415a:	f640 030f 	movw	r3, #2063	; 0x80f
 800415e:	4013      	ands	r3, r2
 8004160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004168:	2b00      	cmp	r3, #0
 800416a:	d115      	bne.n	8004198 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800416c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00f      	beq.n	8004198 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 82a4 	beq.w	80046d6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
      }
      return;
 8004196:	e29e      	b.n	80046d6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8117 	beq.w	80043d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80041b2:	4b85      	ldr	r3, [pc, #532]	; (80043c8 <HAL_UART_IRQHandler+0x298>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 810a 	beq.w	80043d0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d011      	beq.n	80041ec <HAL_UART_IRQHandler+0xbc>
 80041c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00b      	beq.n	80041ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2201      	movs	r2, #1
 80041da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d011      	beq.n	800421c <HAL_UART_IRQHandler+0xec>
 80041f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2202      	movs	r2, #2
 800420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d011      	beq.n	800424c <HAL_UART_IRQHandler+0x11c>
 8004228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2204      	movs	r2, #4
 800423a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004242:	f043 0202 	orr.w	r2, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800424c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004268:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00b      	beq.n	8004288 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2208      	movs	r2, #8
 8004276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800427e:	f043 0208 	orr.w	r2, r3, #8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <HAL_UART_IRQHandler+0x18a>
 8004294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004298:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00c      	beq.n	80042ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b0:	f043 0220 	orr.w	r2, r3, #32
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 820a 	beq.w	80046da <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d007      	beq.n	80042ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800430a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800430e:	2b00      	cmp	r3, #0
 8004310:	d04f      	beq.n	80043b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 fe29 	bl	8004f6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d141      	bne.n	80043aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800433c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004352:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800435e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800436a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1d9      	bne.n	8004326 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	2b00      	cmp	r3, #0
 8004378:	d013      	beq.n	80043a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a13      	ldr	r2, [pc, #76]	; (80043cc <HAL_UART_IRQHandler+0x29c>)
 8004380:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fe43 	bl	8002012 <HAL_DMA_Abort_IT>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d017      	beq.n	80043c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800439c:	4610      	mov	r0, r2
 800439e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	e00f      	b.n	80043c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f9ae 	bl	8004704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a8:	e00b      	b.n	80043c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f9aa 	bl	8004704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	e007      	b.n	80043c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f9a6 	bl	8004704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80043c0:	e18b      	b.n	80046da <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c2:	bf00      	nop
    return;
 80043c4:	e189      	b.n	80046da <HAL_UART_IRQHandler+0x5aa>
 80043c6:	bf00      	nop
 80043c8:	04000120 	.word	0x04000120
 80043cc:	08005031 	.word	0x08005031

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	f040 8144 	bne.w	8004662 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 813d 	beq.w	8004662 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8136 	beq.w	8004662 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	f040 80b2 	bne.w	8004572 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800441a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 815d 	beq.w	80046de <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800442a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800442e:	429a      	cmp	r2, r3
 8004430:	f080 8155 	bcs.w	80046de <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800443a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004448:	f000 8085 	beq.w	8004556 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004468:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800447a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004482:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800448e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1da      	bne.n	800444c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3308      	adds	r3, #8
 800449c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80044ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80044be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80044c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80044cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e1      	bne.n	8004496 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80044e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3308      	adds	r3, #8
 80044f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e3      	bne.n	80044d2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004526:	f023 0310 	bic.w	r3, r3, #16
 800452a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004538:	65bb      	str	r3, [r7, #88]	; 0x58
 800453a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800453e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e4      	bne.n	8004516 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd fcee 	bl	8001f32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004562:	b29b      	uxth	r3, r3
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	b29b      	uxth	r3, r3
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8d4 	bl	8004718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004570:	e0b5      	b.n	80046de <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800457e:	b29b      	uxth	r3, r3
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 80a7 	beq.w	80046e2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8004594:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a2 	beq.w	80046e2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a6:	e853 3f00 	ldrex	r3, [r3]
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80045c0:	647b      	str	r3, [r7, #68]	; 0x44
 80045c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80045c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80045ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e4      	bne.n	800459e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3308      	adds	r3, #8
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	623b      	str	r3, [r7, #32]
   return(result);
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045f8:	633a      	str	r2, [r7, #48]	; 0x30
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004600:	e841 2300 	strex	r3, r2, [r1]
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1e3      	bne.n	80045d4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	60fb      	str	r3, [r7, #12]
   return(result);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0310 	bic.w	r3, r3, #16
 8004632:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	69b9      	ldr	r1, [r7, #24]
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	617b      	str	r3, [r7, #20]
   return(result);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e4      	bne.n	800461e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f85c 	bl	8004718 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004660:	e03f      	b.n	80046e2 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00e      	beq.n	800468c <HAL_UART_IRQHandler+0x55c>
 800466e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004682:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f853 	bl	8004730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800468a:	e02d      	b.n	80046e8 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01c      	beq.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
    }
    return;
 80046b4:	e017      	b.n	80046e6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d012      	beq.n	80046e8 <HAL_UART_IRQHandler+0x5b8>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fcc4 	bl	800505c <UART_EndTransmit_IT>
    return;
 80046d4:	e008      	b.n	80046e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80046d6:	bf00      	nop
 80046d8:	e006      	b.n	80046e8 <HAL_UART_IRQHandler+0x5b8>
    return;
 80046da:	bf00      	nop
 80046dc:	e004      	b.n	80046e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80046de:	bf00      	nop
 80046e0:	e002      	b.n	80046e8 <HAL_UART_IRQHandler+0x5b8>
      return;
 80046e2:	bf00      	nop
 80046e4:	e000      	b.n	80046e8 <HAL_UART_IRQHandler+0x5b8>
    return;
 80046e6:	bf00      	nop
  }

}
 80046e8:	37e8      	adds	r7, #232	; 0xe8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop

080046f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800474c:	2300      	movs	r3, #0
 800474e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4ba6      	ldr	r3, [pc, #664]	; (8004a08 <UART_SetConfig+0x2c4>)
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	6979      	ldr	r1, [r7, #20]
 8004778:	430b      	orrs	r3, r1
 800477a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a94      	ldr	r2, [pc, #592]	; (8004a0c <UART_SetConfig+0x2c8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d120      	bne.n	8004802 <UART_SetConfig+0xbe>
 80047c0:	4b93      	ldr	r3, [pc, #588]	; (8004a10 <UART_SetConfig+0x2cc>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	2b03      	cmp	r3, #3
 80047cc:	d816      	bhi.n	80047fc <UART_SetConfig+0xb8>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0x90>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	080047e5 	.word	0x080047e5
 80047d8:	080047f1 	.word	0x080047f1
 80047dc:	080047eb 	.word	0x080047eb
 80047e0:	080047f7 	.word	0x080047f7
 80047e4:	2301      	movs	r3, #1
 80047e6:	77fb      	strb	r3, [r7, #31]
 80047e8:	e150      	b.n	8004a8c <UART_SetConfig+0x348>
 80047ea:	2302      	movs	r3, #2
 80047ec:	77fb      	strb	r3, [r7, #31]
 80047ee:	e14d      	b.n	8004a8c <UART_SetConfig+0x348>
 80047f0:	2304      	movs	r3, #4
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e14a      	b.n	8004a8c <UART_SetConfig+0x348>
 80047f6:	2308      	movs	r3, #8
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e147      	b.n	8004a8c <UART_SetConfig+0x348>
 80047fc:	2310      	movs	r3, #16
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e144      	b.n	8004a8c <UART_SetConfig+0x348>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a83      	ldr	r2, [pc, #524]	; (8004a14 <UART_SetConfig+0x2d0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d132      	bne.n	8004872 <UART_SetConfig+0x12e>
 800480c:	4b80      	ldr	r3, [pc, #512]	; (8004a10 <UART_SetConfig+0x2cc>)
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b0c      	cmp	r3, #12
 8004818:	d828      	bhi.n	800486c <UART_SetConfig+0x128>
 800481a:	a201      	add	r2, pc, #4	; (adr r2, 8004820 <UART_SetConfig+0xdc>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	08004855 	.word	0x08004855
 8004824:	0800486d 	.word	0x0800486d
 8004828:	0800486d 	.word	0x0800486d
 800482c:	0800486d 	.word	0x0800486d
 8004830:	08004861 	.word	0x08004861
 8004834:	0800486d 	.word	0x0800486d
 8004838:	0800486d 	.word	0x0800486d
 800483c:	0800486d 	.word	0x0800486d
 8004840:	0800485b 	.word	0x0800485b
 8004844:	0800486d 	.word	0x0800486d
 8004848:	0800486d 	.word	0x0800486d
 800484c:	0800486d 	.word	0x0800486d
 8004850:	08004867 	.word	0x08004867
 8004854:	2300      	movs	r3, #0
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e118      	b.n	8004a8c <UART_SetConfig+0x348>
 800485a:	2302      	movs	r3, #2
 800485c:	77fb      	strb	r3, [r7, #31]
 800485e:	e115      	b.n	8004a8c <UART_SetConfig+0x348>
 8004860:	2304      	movs	r3, #4
 8004862:	77fb      	strb	r3, [r7, #31]
 8004864:	e112      	b.n	8004a8c <UART_SetConfig+0x348>
 8004866:	2308      	movs	r3, #8
 8004868:	77fb      	strb	r3, [r7, #31]
 800486a:	e10f      	b.n	8004a8c <UART_SetConfig+0x348>
 800486c:	2310      	movs	r3, #16
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e10c      	b.n	8004a8c <UART_SetConfig+0x348>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a68      	ldr	r2, [pc, #416]	; (8004a18 <UART_SetConfig+0x2d4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d120      	bne.n	80048be <UART_SetConfig+0x17a>
 800487c:	4b64      	ldr	r3, [pc, #400]	; (8004a10 <UART_SetConfig+0x2cc>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004886:	2b30      	cmp	r3, #48	; 0x30
 8004888:	d013      	beq.n	80048b2 <UART_SetConfig+0x16e>
 800488a:	2b30      	cmp	r3, #48	; 0x30
 800488c:	d814      	bhi.n	80048b8 <UART_SetConfig+0x174>
 800488e:	2b20      	cmp	r3, #32
 8004890:	d009      	beq.n	80048a6 <UART_SetConfig+0x162>
 8004892:	2b20      	cmp	r3, #32
 8004894:	d810      	bhi.n	80048b8 <UART_SetConfig+0x174>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <UART_SetConfig+0x15c>
 800489a:	2b10      	cmp	r3, #16
 800489c:	d006      	beq.n	80048ac <UART_SetConfig+0x168>
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x174>
 80048a0:	2300      	movs	r3, #0
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e0f2      	b.n	8004a8c <UART_SetConfig+0x348>
 80048a6:	2302      	movs	r3, #2
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e0ef      	b.n	8004a8c <UART_SetConfig+0x348>
 80048ac:	2304      	movs	r3, #4
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e0ec      	b.n	8004a8c <UART_SetConfig+0x348>
 80048b2:	2308      	movs	r3, #8
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e0e9      	b.n	8004a8c <UART_SetConfig+0x348>
 80048b8:	2310      	movs	r3, #16
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e0e6      	b.n	8004a8c <UART_SetConfig+0x348>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a56      	ldr	r2, [pc, #344]	; (8004a1c <UART_SetConfig+0x2d8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d120      	bne.n	800490a <UART_SetConfig+0x1c6>
 80048c8:	4b51      	ldr	r3, [pc, #324]	; (8004a10 <UART_SetConfig+0x2cc>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048d2:	2bc0      	cmp	r3, #192	; 0xc0
 80048d4:	d013      	beq.n	80048fe <UART_SetConfig+0x1ba>
 80048d6:	2bc0      	cmp	r3, #192	; 0xc0
 80048d8:	d814      	bhi.n	8004904 <UART_SetConfig+0x1c0>
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d009      	beq.n	80048f2 <UART_SetConfig+0x1ae>
 80048de:	2b80      	cmp	r3, #128	; 0x80
 80048e0:	d810      	bhi.n	8004904 <UART_SetConfig+0x1c0>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <UART_SetConfig+0x1a8>
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d006      	beq.n	80048f8 <UART_SetConfig+0x1b4>
 80048ea:	e00b      	b.n	8004904 <UART_SetConfig+0x1c0>
 80048ec:	2300      	movs	r3, #0
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e0cc      	b.n	8004a8c <UART_SetConfig+0x348>
 80048f2:	2302      	movs	r3, #2
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e0c9      	b.n	8004a8c <UART_SetConfig+0x348>
 80048f8:	2304      	movs	r3, #4
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e0c6      	b.n	8004a8c <UART_SetConfig+0x348>
 80048fe:	2308      	movs	r3, #8
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e0c3      	b.n	8004a8c <UART_SetConfig+0x348>
 8004904:	2310      	movs	r3, #16
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e0c0      	b.n	8004a8c <UART_SetConfig+0x348>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a44      	ldr	r2, [pc, #272]	; (8004a20 <UART_SetConfig+0x2dc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d125      	bne.n	8004960 <UART_SetConfig+0x21c>
 8004914:	4b3e      	ldr	r3, [pc, #248]	; (8004a10 <UART_SetConfig+0x2cc>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800491e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004922:	d017      	beq.n	8004954 <UART_SetConfig+0x210>
 8004924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004928:	d817      	bhi.n	800495a <UART_SetConfig+0x216>
 800492a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492e:	d00b      	beq.n	8004948 <UART_SetConfig+0x204>
 8004930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004934:	d811      	bhi.n	800495a <UART_SetConfig+0x216>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <UART_SetConfig+0x1fe>
 800493a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800493e:	d006      	beq.n	800494e <UART_SetConfig+0x20a>
 8004940:	e00b      	b.n	800495a <UART_SetConfig+0x216>
 8004942:	2300      	movs	r3, #0
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e0a1      	b.n	8004a8c <UART_SetConfig+0x348>
 8004948:	2302      	movs	r3, #2
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e09e      	b.n	8004a8c <UART_SetConfig+0x348>
 800494e:	2304      	movs	r3, #4
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e09b      	b.n	8004a8c <UART_SetConfig+0x348>
 8004954:	2308      	movs	r3, #8
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e098      	b.n	8004a8c <UART_SetConfig+0x348>
 800495a:	2310      	movs	r3, #16
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e095      	b.n	8004a8c <UART_SetConfig+0x348>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a2f      	ldr	r2, [pc, #188]	; (8004a24 <UART_SetConfig+0x2e0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d125      	bne.n	80049b6 <UART_SetConfig+0x272>
 800496a:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <UART_SetConfig+0x2cc>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004978:	d017      	beq.n	80049aa <UART_SetConfig+0x266>
 800497a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800497e:	d817      	bhi.n	80049b0 <UART_SetConfig+0x26c>
 8004980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004984:	d00b      	beq.n	800499e <UART_SetConfig+0x25a>
 8004986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800498a:	d811      	bhi.n	80049b0 <UART_SetConfig+0x26c>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <UART_SetConfig+0x254>
 8004990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004994:	d006      	beq.n	80049a4 <UART_SetConfig+0x260>
 8004996:	e00b      	b.n	80049b0 <UART_SetConfig+0x26c>
 8004998:	2301      	movs	r3, #1
 800499a:	77fb      	strb	r3, [r7, #31]
 800499c:	e076      	b.n	8004a8c <UART_SetConfig+0x348>
 800499e:	2302      	movs	r3, #2
 80049a0:	77fb      	strb	r3, [r7, #31]
 80049a2:	e073      	b.n	8004a8c <UART_SetConfig+0x348>
 80049a4:	2304      	movs	r3, #4
 80049a6:	77fb      	strb	r3, [r7, #31]
 80049a8:	e070      	b.n	8004a8c <UART_SetConfig+0x348>
 80049aa:	2308      	movs	r3, #8
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e06d      	b.n	8004a8c <UART_SetConfig+0x348>
 80049b0:	2310      	movs	r3, #16
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e06a      	b.n	8004a8c <UART_SetConfig+0x348>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1b      	ldr	r2, [pc, #108]	; (8004a28 <UART_SetConfig+0x2e4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d138      	bne.n	8004a32 <UART_SetConfig+0x2ee>
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <UART_SetConfig+0x2cc>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049ce:	d017      	beq.n	8004a00 <UART_SetConfig+0x2bc>
 80049d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049d4:	d82a      	bhi.n	8004a2c <UART_SetConfig+0x2e8>
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049da:	d00b      	beq.n	80049f4 <UART_SetConfig+0x2b0>
 80049dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e0:	d824      	bhi.n	8004a2c <UART_SetConfig+0x2e8>
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <UART_SetConfig+0x2aa>
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d006      	beq.n	80049fa <UART_SetConfig+0x2b6>
 80049ec:	e01e      	b.n	8004a2c <UART_SetConfig+0x2e8>
 80049ee:	2300      	movs	r3, #0
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e04b      	b.n	8004a8c <UART_SetConfig+0x348>
 80049f4:	2302      	movs	r3, #2
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e048      	b.n	8004a8c <UART_SetConfig+0x348>
 80049fa:	2304      	movs	r3, #4
 80049fc:	77fb      	strb	r3, [r7, #31]
 80049fe:	e045      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a00:	2308      	movs	r3, #8
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e042      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a06:	bf00      	nop
 8004a08:	efff69f3 	.word	0xefff69f3
 8004a0c:	40011000 	.word	0x40011000
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40004400 	.word	0x40004400
 8004a18:	40004800 	.word	0x40004800
 8004a1c:	40004c00 	.word	0x40004c00
 8004a20:	40005000 	.word	0x40005000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	40007800 	.word	0x40007800
 8004a2c:	2310      	movs	r3, #16
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e02c      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a72      	ldr	r2, [pc, #456]	; (8004c00 <UART_SetConfig+0x4bc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d125      	bne.n	8004a88 <UART_SetConfig+0x344>
 8004a3c:	4b71      	ldr	r3, [pc, #452]	; (8004c04 <UART_SetConfig+0x4c0>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a4a:	d017      	beq.n	8004a7c <UART_SetConfig+0x338>
 8004a4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a50:	d817      	bhi.n	8004a82 <UART_SetConfig+0x33e>
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a56:	d00b      	beq.n	8004a70 <UART_SetConfig+0x32c>
 8004a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5c:	d811      	bhi.n	8004a82 <UART_SetConfig+0x33e>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <UART_SetConfig+0x326>
 8004a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a66:	d006      	beq.n	8004a76 <UART_SetConfig+0x332>
 8004a68:	e00b      	b.n	8004a82 <UART_SetConfig+0x33e>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	77fb      	strb	r3, [r7, #31]
 8004a6e:	e00d      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a70:	2302      	movs	r3, #2
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e00a      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a76:	2304      	movs	r3, #4
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e007      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a7c:	2308      	movs	r3, #8
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e004      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a82:	2310      	movs	r3, #16
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e001      	b.n	8004a8c <UART_SetConfig+0x348>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a94:	d15b      	bne.n	8004b4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a96:	7ffb      	ldrb	r3, [r7, #31]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d828      	bhi.n	8004aee <UART_SetConfig+0x3aa>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0x360>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004ad1 	.word	0x08004ad1
 8004aac:	08004ad9 	.word	0x08004ad9
 8004ab0:	08004aef 	.word	0x08004aef
 8004ab4:	08004adf 	.word	0x08004adf
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004aef 	.word	0x08004aef
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004ae7 	.word	0x08004ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac8:	f7fe f92e 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8004acc:	61b8      	str	r0, [r7, #24]
        break;
 8004ace:	e013      	b.n	8004af8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad0:	f7fe f93e 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8004ad4:	61b8      	str	r0, [r7, #24]
        break;
 8004ad6:	e00f      	b.n	8004af8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad8:	4b4b      	ldr	r3, [pc, #300]	; (8004c08 <UART_SetConfig+0x4c4>)
 8004ada:	61bb      	str	r3, [r7, #24]
        break;
 8004adc:	e00c      	b.n	8004af8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ade:	f7fe f851 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004ae2:	61b8      	str	r0, [r7, #24]
        break;
 8004ae4:	e008      	b.n	8004af8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aea:	61bb      	str	r3, [r7, #24]
        break;
 8004aec:	e004      	b.n	8004af8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	77bb      	strb	r3, [r7, #30]
        break;
 8004af6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d074      	beq.n	8004be8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	005a      	lsls	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	441a      	add	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b0f      	cmp	r3, #15
 8004b18:	d916      	bls.n	8004b48 <UART_SetConfig+0x404>
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d212      	bcs.n	8004b48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f023 030f 	bic.w	r3, r3, #15
 8004b2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	89fb      	ldrh	r3, [r7, #14]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	89fa      	ldrh	r2, [r7, #14]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e04f      	b.n	8004be8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	77bb      	strb	r3, [r7, #30]
 8004b4c:	e04c      	b.n	8004be8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b4e:	7ffb      	ldrb	r3, [r7, #31]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d828      	bhi.n	8004ba6 <UART_SetConfig+0x462>
 8004b54:	a201      	add	r2, pc, #4	; (adr r2, 8004b5c <UART_SetConfig+0x418>)
 8004b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b5a:	bf00      	nop
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b89 	.word	0x08004b89
 8004b64:	08004b91 	.word	0x08004b91
 8004b68:	08004ba7 	.word	0x08004ba7
 8004b6c:	08004b97 	.word	0x08004b97
 8004b70:	08004ba7 	.word	0x08004ba7
 8004b74:	08004ba7 	.word	0x08004ba7
 8004b78:	08004ba7 	.word	0x08004ba7
 8004b7c:	08004b9f 	.word	0x08004b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b80:	f7fe f8d2 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8004b84:	61b8      	str	r0, [r7, #24]
        break;
 8004b86:	e013      	b.n	8004bb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b88:	f7fe f8e2 	bl	8002d50 <HAL_RCC_GetPCLK2Freq>
 8004b8c:	61b8      	str	r0, [r7, #24]
        break;
 8004b8e:	e00f      	b.n	8004bb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b90:	4b1d      	ldr	r3, [pc, #116]	; (8004c08 <UART_SetConfig+0x4c4>)
 8004b92:	61bb      	str	r3, [r7, #24]
        break;
 8004b94:	e00c      	b.n	8004bb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b96:	f7fd fff5 	bl	8002b84 <HAL_RCC_GetSysClockFreq>
 8004b9a:	61b8      	str	r0, [r7, #24]
        break;
 8004b9c:	e008      	b.n	8004bb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba2:	61bb      	str	r3, [r7, #24]
        break;
 8004ba4:	e004      	b.n	8004bb0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	77bb      	strb	r3, [r7, #30]
        break;
 8004bae:	bf00      	nop
    }

    if (pclk != 0U)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	085a      	lsrs	r2, r3, #1
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	441a      	add	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b0f      	cmp	r3, #15
 8004bce:	d909      	bls.n	8004be4 <UART_SetConfig+0x4a0>
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd6:	d205      	bcs.n	8004be4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	e001      	b.n	8004be8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bf4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3720      	adds	r7, #32
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40007c00 	.word	0x40007c00
 8004c04:	40023800 	.word	0x40023800
 8004c08:	00f42400 	.word	0x00f42400

08004c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01a      	beq.n	8004d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0a:	d10a      	bne.n	8004d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d60:	f7fc ffa6 	bl	8001cb0 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d10e      	bne.n	8004d92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f82d 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e023      	b.n	8004dda <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d10e      	bne.n	8004dbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f817 	bl	8004de2 <UART_WaitOnFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e00d      	b.n	8004dda <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b09c      	sub	sp, #112	; 0x70
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4613      	mov	r3, r2
 8004df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df2:	e0a5      	b.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	f000 80a1 	beq.w	8004f40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfe:	f7fc ff57 	bl	8001cb0 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d302      	bcc.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d13e      	bne.n	8004e92 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e28:	667b      	str	r3, [r7, #100]	; 0x64
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004e40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e6      	bne.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3308      	adds	r3, #8
 8004e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e58:	f023 0301 	bic.w	r3, r3, #1
 8004e5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e66:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e067      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d04f      	beq.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eae:	d147      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	e853 3f00 	ldrex	r3, [r3]
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ece:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004edc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee0:	e841 2300 	strex	r3, r2, [r1]
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1e6      	bne.n	8004eba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	613b      	str	r3, [r7, #16]
   return(result);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f023 0301 	bic.w	r3, r3, #1
 8004f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f0c:	623a      	str	r2, [r7, #32]
 8004f0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	69f9      	ldr	r1, [r7, #28]
 8004f12:	6a3a      	ldr	r2, [r7, #32]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e5      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e010      	b.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	f43f af4a 	beq.w	8004df4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3770      	adds	r7, #112	; 0x70
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b095      	sub	sp, #84	; 0x54
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f90:	643b      	str	r3, [r7, #64]	; 0x40
 8004f92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e6      	bne.n	8004f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3308      	adds	r3, #8
 8004faa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3308      	adds	r3, #8
 8004fc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e5      	bne.n	8004fa4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d118      	bne.n	8005012 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	e853 3f00 	ldrex	r3, [r3]
 8004fec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f023 0310 	bic.w	r3, r3, #16
 8004ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	6979      	ldr	r1, [r7, #20]
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	613b      	str	r3, [r7, #16]
   return(result);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e6      	bne.n	8004fe0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005024:	bf00      	nop
 8005026:	3754      	adds	r7, #84	; 0x54
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f7ff fb58 	bl	8004704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	60bb      	str	r3, [r7, #8]
   return(result);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	6979      	ldr	r1, [r7, #20]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	613b      	str	r3, [r7, #16]
   return(result);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e6      	bne.n	8005064 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fb24 	bl	80046f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a8:	bf00      	nop
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <DriverInit>:
 *	@param	*Driver - main hardware driver object
 *	@param	__UART_STRUCT - (aka *uart) user defined UART object
 *	@param	__TIMER_STRUCT - (aka *tim) user defined timer object
 */
void DriverInit (void *Driver, __UART_STRUCT, __TIMER_STRUCT)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	617b      	str	r3, [r7, #20]

	drv->tim = tim;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	605a      	str	r2, [r3, #4]
	drv->timCount = 0;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]


	drv->uart = uart;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	ClearTxBuff(drv);
 80050d4:	6978      	ldr	r0, [r7, #20]
 80050d6:	f000 f8ec 	bl	80052b2 <ClearTxBuff>
	ClearRxBuff(drv);
 80050da:	6978      	ldr	r0, [r7, #20]
 80050dc:	f000 f9b8 	bl	8005450 <ClearRxBuff>

	DISABLE_UART_CR1_TCIE(drv->uart);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f6:	601a      	str	r2, [r3, #0]
	ENABLE_UART_CR1_RXNEIE(drv->uart);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0220 	orr.w	r2, r2, #32
 800510e:	601a      	str	r2, [r3, #0]
	DISABLE_UART_CR1_IDLEIE(drv->uart);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0210 	bic.w	r2, r2, #16
 8005126:	601a      	str	r2, [r3, #0]


	START_TIMER(drv->tim);
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe faa3 	bl	8003678 <HAL_TIM_Base_Start_IT>
}
 8005132:	bf00      	nop
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <GetTimeMs>:
 *	@param	*Driver - main hardware driver object
 *
 *	@return	Current time
 */
ui32 GetTimeMs (void *Driver)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]

	return drv->timCount;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <TimerDRV_CallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void TimerDRV_CallBack (void *Driver)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	601a      	str	r2, [r3, #0]

	#ifndef HAL_TIM_MODULE_ENABLED
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx overflow status (1 - ERROR | 0 - OK)
 */
ui8 UartTransmitData (void *Driver, ui8 *data, ui16 size)
{
 8005178:	b480      	push	{r7}
 800517a:	b089      	sub	sp, #36	; 0x24
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
	Driver_t *drv = (Driver_t*)Driver;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	61bb      	str	r3, [r7, #24]

	/* Free space check */
	ui16 txHead = drv->TxHead;
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8005190:	83fb      	strh	r3, [r7, #30]
	ui16 txTail = drv->TxTail;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8005198:	82fb      	strh	r3, [r7, #22]

	ui16 count = 0;
 800519a:	2300      	movs	r3, #0
 800519c:	83bb      	strh	r3, [r7, #28]
	while (txHead != txTail)
 800519e:	e00b      	b.n	80051b8 <UartTransmitData+0x40>
	{
		if (!txHead)
 80051a0:	8bfb      	ldrh	r3, [r7, #30]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <UartTransmitData+0x34>
			txHead = TX_BUFFER_SIZE;
 80051a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051aa:	83fb      	strh	r3, [r7, #30]

		txHead--;
 80051ac:	8bfb      	ldrh	r3, [r7, #30]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	83fb      	strh	r3, [r7, #30]
		count++;
 80051b2:	8bbb      	ldrh	r3, [r7, #28]
 80051b4:	3301      	adds	r3, #1
 80051b6:	83bb      	strh	r3, [r7, #28]
	while (txHead != txTail)
 80051b8:	8bfa      	ldrh	r2, [r7, #30]
 80051ba:	8afb      	ldrh	r3, [r7, #22]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1ef      	bne.n	80051a0 <UartTransmitData+0x28>
	}

	if (TX_BUFFER_SIZE - count < size)
 80051c0:	8bbb      	ldrh	r3, [r7, #28]
 80051c2:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	da01      	bge.n	80051d0 <UartTransmitData+0x58>
	{
		/* - - - - User TxBuffer Overflow Handler - - - - -*/

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
		return 1;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e02f      	b.n	8005230 <UartTransmitData+0xb8>
	}

	count = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	83bb      	strh	r3, [r7, #28]
	while (count < size)
 80051d4:	e01b      	b.n	800520e <UartTransmitData+0x96>
	{
		drv->TxBuffer[drv->TxHead++] = data[count++];
 80051d6:	8bbb      	ldrh	r3, [r7, #28]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	83ba      	strh	r2, [r7, #28]
 80051dc:	461a      	mov	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	441a      	add	r2, r3
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 80051e8:	1c59      	adds	r1, r3, #1
 80051ea:	b288      	uxth	r0, r1
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	f8a1 010a 	strh.w	r0, [r1, #266]	; 0x10a
 80051f2:	4619      	mov	r1, r3
 80051f4:	7812      	ldrb	r2, [r2, #0]
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	440b      	add	r3, r1
 80051fa:	721a      	strb	r2, [r3, #8]

		if (drv->TxHead >= TX_BUFFER_SIZE)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 8005202:	2bff      	cmp	r3, #255	; 0xff
 8005204:	d903      	bls.n	800520e <UartTransmitData+0x96>
			drv->TxHead = 0;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2200      	movs	r2, #0
 800520a:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	while (count < size)
 800520e:	8bba      	ldrh	r2, [r7, #28]
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	429a      	cmp	r2, r3
 8005214:	d3df      	bcc.n	80051d6 <UartTransmitData+0x5e>
	}

	ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800522c:	601a      	str	r2, [r3, #0]

	return 0;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3724      	adds	r7, #36	; 0x24
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <UART_DRV_TxCallBack>:
/**	@brief	UART transfer completion interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void UART_DRV_TxCallBack (void *Driver)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60fb      	str	r3, [r7, #12]

	WRITE_UART_BYTE(drv->uart, drv->TxBuffer[drv->TxTail++] & (ui32)0xFF);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	b291      	uxth	r1, r2
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	f8a2 1108 	strh.w	r1, [r2, #264]	; 0x108
 8005258:	461a      	mov	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	7a1a      	ldrb	r2, [r3, #8]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	629a      	str	r2, [r3, #40]	; 0x28

	if (drv->TxTail == TX_BUFFER_SIZE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8005270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005274:	d103      	bne.n	800527e <UART_DRV_TxCallBack+0x42>
		drv->TxTail = 0;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108

	if (drv->TxTail == drv->TxHead)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 2108 	ldrh.w	r2, [r3, #264]	; 0x108
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8b3 310a 	ldrh.w	r3, [r3, #266]	; 0x10a
 800528a:	429a      	cmp	r2, r3
 800528c:	d10b      	bne.n	80052a6 <UART_DRV_TxCallBack+0x6a>
	{
		DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a4:	601a      	str	r2, [r3, #0]

		/*  - - - - User Transmit-Complete Handler - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
	}
}
 80052a6:	bf00      	nop
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*Driver - main hardware driver object
 */
void ClearTxBuff (void *Driver)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]

	memset(drv->TxBuffer, 0, TX_BUFFER_SIZE);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3308      	adds	r3, #8
 80052c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f002 fa03 	bl	80076d4 <memset>
	drv->TxTail = 0;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	drv->TxHead = 0;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
}
 80052de:	bf00      	nop
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <GetAvailableBytes>:
 *	@param	*Driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 GetAvailableBytes (void *Driver)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	613b      	str	r3, [r7, #16]

	if (drv->RxOverflowFlag)
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <GetAvailableBytes+0x1c>
		return 0xFFFF;
 80052fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005300:	e01b      	b.n	800533a <GetAvailableBytes+0x54>

	ui16 rxHead = drv->RxHead;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005308:	82fb      	strh	r3, [r7, #22]
	ui16 rxTail = drv->RxTail;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 8005310:	81fb      	strh	r3, [r7, #14]

	ui16 count = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	82bb      	strh	r3, [r7, #20]
	while (rxHead != rxTail)
 8005316:	e00b      	b.n	8005330 <GetAvailableBytes+0x4a>
	{
		if (!rxHead)
 8005318:	8afb      	ldrh	r3, [r7, #22]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <GetAvailableBytes+0x3e>
			rxHead = RX_BUFFER_SIZE;
 800531e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005322:	82fb      	strh	r3, [r7, #22]

		rxHead--;
 8005324:	8afb      	ldrh	r3, [r7, #22]
 8005326:	3b01      	subs	r3, #1
 8005328:	82fb      	strh	r3, [r7, #22]
		count++;
 800532a:	8abb      	ldrh	r3, [r7, #20]
 800532c:	3301      	adds	r3, #1
 800532e:	82bb      	strh	r3, [r7, #20]
	while (rxHead != rxTail)
 8005330:	8afa      	ldrh	r2, [r7, #22]
 8005332:	89fb      	ldrh	r3, [r7, #14]
 8005334:	429a      	cmp	r2, r3
 8005336:	d1ef      	bne.n	8005318 <GetAvailableBytes+0x32>
	}

	return count;
 8005338:	8abb      	ldrh	r3, [r7, #20]
}
 800533a:	4618      	mov	r0, r3
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Receipt status (0 - receiving in progress | 1 - receive completed)
 */
ui8 UartReceiveByte (void *Driver, ui8 *data)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
	Driver_t *drv = (Driver_t*)Driver;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60fb      	str	r3, [r7, #12]

	if (drv->RxTail == drv->RxHead)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8b3 220c 	ldrh.w	r2, [r3, #524]	; 0x20c
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005360:	429a      	cmp	r2, r3
 8005362:	d101      	bne.n	8005368 <UartReceiveByte+0x22>
	{
		/* - - - - User Receive-Complete Handler - - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */
		return 1;
 8005364:	2301      	movs	r3, #1
 8005366:	e021      	b.n	80053ac <UartReceiveByte+0x66>
	}

	*data = drv->RxBuffer[drv->RxTail++];
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800536e:	1c5a      	adds	r2, r3, #1
 8005370:	b291      	uxth	r1, r2
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	f8a2 120c 	strh.w	r1, [r2, #524]	; 0x20c
 8005378:	461a      	mov	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	701a      	strb	r2, [r3, #0]

	if (drv->RxTail >= RX_BUFFER_SIZE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 800538c:	2bff      	cmp	r3, #255	; 0xff
 800538e:	d903      	bls.n	8005398 <UartReceiveByte+0x52>
	   drv->RxTail = 0;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c

	if (drv->RxOverflowFlag == 1)  // Reset the overflow flag
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d103      	bne.n	80053aa <UartReceiveByte+0x64>
		drv->RxOverflowFlag = 0;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

	return 0;	// Rx ring buffer isn't empty
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <UART_DRV_RxCallBack>:
/**	@brief	UART receive completion interrupts handler
 *
 *	@param	*Driver - main hardware driver object
 */
void UART_DRV_RxCallBack (void *Driver)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60fb      	str	r3, [r7, #12]

	if ((drv->RxHead - drv->RxTail == RX_BUFFER_SIZE - 1) ||
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80053ca:	461a      	mov	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2bff      	cmp	r3, #255	; 0xff
 80053d6:	d009      	beq.n	80053ec <UART_DRV_RxCallBack+0x34>
		(drv->RxTail - drv->RxHead == 1))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 80053de:	461a      	mov	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80053e6:	1ad3      	subs	r3, r2, r3
	if ((drv->RxHead - drv->RxTail == RX_BUFFER_SIZE - 1) ||
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10e      	bne.n	800540a <UART_DRV_RxCallBack+0x52>
	{
		/*  - - - - User RxBuffer Overflow Handler - - - - */

		/* - - - - - - - - - - - - - - - - - - - - - - - - */

		(void)READ_UART_BYTE(drv->uart);  // Prevent overflow error (USART_ISR_ORE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		if (drv->RxOverflowFlag == 0)  // Set the overflow flag
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 3210 	ldrb.w	r3, [r3, #528]	; 0x210
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d121      	bne.n	8005444 <UART_DRV_RxCallBack+0x8c>
			drv->RxOverflowFlag = 1;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210

		return;
 8005408:	e01c      	b.n	8005444 <UART_DRV_RxCallBack+0x8c>
	}

	drv->RxBuffer[drv->RxHead++] = READ_UART_BYTE(drv->uart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	b291      	uxth	r1, r2
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8005424:	4619      	mov	r1, r3
 8005426:	b2c2      	uxtb	r2, r0
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	440b      	add	r3, r1
 800542c:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

	if (drv->RxHead >= RX_BUFFER_SIZE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8005436:	2bff      	cmp	r3, #255	; 0xff
 8005438:	d905      	bls.n	8005446 <UART_DRV_RxCallBack+0x8e>
		drv->RxHead = 0;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
 8005442:	e000      	b.n	8005446 <UART_DRV_RxCallBack+0x8e>
		return;
 8005444:	bf00      	nop
}
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*Driver - main hardware driver object
 */
void ClearRxBuff (void *Driver)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)Driver;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60fb      	str	r3, [r7, #12]

	memset(drv->RxBuffer, 0, RX_BUFFER_SIZE);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f002 f933 	bl	80076d4 <memset>
	drv->RxTail = 0;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
	drv->RxHead = 0;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
	drv->RxOverflowFlag = 0;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2210 	strb.w	r2, [r3, #528]	; 0x210
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <UartTransmitDebugData>:
	 *
	 *	@param	*data - debug data
	 *	@param	length - size of debug data
	 */
	void UartTransmitDebugData (char *data, ui16 length)
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	807b      	strh	r3, [r7, #2]
		HAL_UART_Transmit(DEBUG_SERIAL_PORT, (ui8*)data, length, 100);
 800549c:	887a      	ldrh	r2, [r7, #2]
 800549e:	2364      	movs	r3, #100	; 0x64
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4803      	ldr	r0, [pc, #12]	; (80054b0 <UartTransmitDebugData+0x20>)
 80054a4:	f7fe fdb0 	bl	8004008 <HAL_UART_Transmit>
	}
 80054a8:	bf00      	nop
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	20000860 	.word	0x20000860

080054b4 <InitAdjVar>:
	 *	@param 	*adjVarsGeneral - general adjustable variables structure
	 *	@param	*adjVarReference - field of auxiliary
	 			adjustable variables array
	 */
	void InitAdjVar (AdjVarsGeneral_t *adjVarsGeneral, const AdjVarsDebugInfo_t *adjVarReference)
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
		adjVarsGeneral->ID = adjVarReference->ID;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781a      	ldrb	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	701a      	strb	r2, [r3, #0]
		memcpy(adjVarsGeneral->name, adjVarReference->name, ADJ_VAR_MAX_NAME_LENGTH);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	1c58      	adds	r0, r3, #1
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	3301      	adds	r3, #1
 80054ce:	221e      	movs	r2, #30
 80054d0:	4619      	mov	r1, r3
 80054d2:	f002 f8f1 	bl	80076b8 <memcpy>
		adjVarsGeneral->minValue = adjVarReference->minValue;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	b21a      	sxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	841a      	strh	r2, [r3, #32]
		adjVarsGeneral->maxValue = adjVarReference->maxValue;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	b21a      	sxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	845a      	strh	r2, [r3, #34]	; 0x22
		adjVarsGeneral->varType = adjVarReference->varType;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <EditAdjVarValue>:
 *
 *	@param 	*adjVarsGeneral - general adjustable variables structure
 *	@param	value - new value of adjustable variable
 */
void EditAdjVarValue (AdjVarsGeneral_t *adjVarsGeneral, i32 value)
{
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
	/* Values border checking */
	value = CONSTRAINT(value, adjVarsGeneral->minValue, adjVarsGeneral->maxValue);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800550e:	461a      	mov	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4293      	cmp	r3, r2
 8005514:	da03      	bge.n	800551e <EditAdjVarValue+0x20>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800551c:	e007      	b.n	800552e <EditAdjVarValue+0x30>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005524:	461a      	mov	r2, r3
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	4293      	cmp	r3, r2
 800552a:	bfa8      	it	ge
 800552c:	4613      	movge	r3, r2
 800552e:	603b      	str	r3, [r7, #0]

	if (adjVarsGeneral->value == value)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d00b      	beq.n	8005552 <EditAdjVarValue+0x54>
		return;

	adjVarsGeneral->value = value;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
	adjVarsGeneral->changeFlag = CHANGED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	adjVarsGeneral->saveFlag = NOT_SAVED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005550:	e000      	b.n	8005554 <EditAdjVarValue+0x56>
		return;
 8005552:	bf00      	nop
}
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <SBGC32_SetAdjVarValues>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_SetAdjVarValues (GeneralSBGC_t *generalSBGC, AdjVarsGeneral_t *adjVarsGeneral, ui8 adjVarQuan, ConfirmationState_t *confirmationState)
{
 800555e:	b590      	push	{r4, r7, lr}
 8005560:	b0c9      	sub	sp, #292	; 0x124
 8005562:	af00      	add	r7, sp, #0
 8005564:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8005568:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800556c:	6020      	str	r0, [r4, #0]
 800556e:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8005572:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 8005576:	6001      	str	r1, [r0, #0]
 8005578:	4611      	mov	r1, r2
 800557a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800557e:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005588:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800558c:	460a      	mov	r2, r1
 800558e:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_SET_ADJ_VARS_VAL);
 8005590:	f107 0314 	add.w	r3, r7, #20
 8005594:	211f      	movs	r1, #31
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fea6 	bl	80062e8 <InitCmdWrite>

	ui8 numParams = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	WriteByte(&cmd, numParams);  // temporary offset
 80055a2:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80055a6:	f107 0314 	add.w	r3, r7, #20
 80055aa:	4611      	mov	r1, r2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fdb7 	bl	8006120 <WriteByte>

	FOR_(i, adjVarQuan)
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80055b8:	e063      	b.n	8005682 <SBGC32_SetAdjVarValues+0x124>
		if (adjVarsGeneral[i].changeFlag == CHANGED)
 80055ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80055be:	4613      	mov	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	461a      	mov	r2, r3
 80055c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4413      	add	r3, r2
 80055d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d14d      	bne.n	8005678 <SBGC32_SetAdjVarValues+0x11a>
		{
			WriteByte(&cmd, adjVarsGeneral[i].ID);
 80055dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80055e0:	4613      	mov	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	4413      	add	r3, r2
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	461a      	mov	r2, r3
 80055ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80055ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4413      	add	r3, r2
 80055f6:	781a      	ldrb	r2, [r3, #0]
 80055f8:	f107 0314 	add.w	r3, r7, #20
 80055fc:	4611      	mov	r1, r2
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fd8e 	bl	8006120 <WriteByte>
			WriteLong(&cmd, adjVarsGeneral[i].value);
 8005604:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005608:	4613      	mov	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	4413      	add	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	461a      	mov	r2, r3
 8005612:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005616:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4413      	add	r3, r2
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	461a      	mov	r2, r3
 8005622:	f107 0314 	add.w	r3, r7, #20
 8005626:	4611      	mov	r1, r2
 8005628:	4618      	mov	r0, r3
 800562a:	f000 fde9 	bl	8006200 <WriteLong>

			adjVarsGeneral[i].changeFlag = NOT_CHANGED;
 800562e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005632:	4613      	mov	r3, r2
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	4413      	add	r3, r2
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	461a      	mov	r2, r3
 800563c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005640:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4413      	add	r3, r2
 8005648:	2200      	movs	r2, #0
 800564a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			adjVarsGeneral[i].saveFlag = NOT_SAVED;
 800564e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005652:	4613      	mov	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	4413      	add	r3, r2
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	461a      	mov	r2, r3
 800565c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005660:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4413      	add	r3, r2
 8005668:	2201      	movs	r2, #1
 800566a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			numParams++;
 800566e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005672:	3301      	adds	r3, #1
 8005674:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	FOR_(i, adjVarQuan)
 8005678:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800567c:	3301      	adds	r3, #1
 800567e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005682:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005686:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005690:	429a      	cmp	r2, r3
 8005692:	db92      	blt.n	80055ba <SBGC32_SetAdjVarValues+0x5c>
		}

	if (numParams == 0)  // No variables changed
 8005694:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005698:	2b00      	cmp	r3, #0
 800569a:	d107      	bne.n	80056ac <SBGC32_SetAdjVarValues+0x14e>
		return generalSBGC->_ParserCurrentStatus;
 800569c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80056aa:	e028      	b.n	80056fe <SBGC32_SetAdjVarValues+0x1a0>

	cmd.payload[0] = numParams;  // re-writing numParams
 80056ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056b4:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 80056b8:	705a      	strb	r2, [r3, #1]
	SBGC32_TX(generalSBGC, &cmd);
 80056ba:	f107 0214 	add.w	r2, r7, #20
 80056be:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056c6:	4611      	mov	r1, r2
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	f000 f9a7 	bl	8005a1c <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 80056ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056dc:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80056e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056e8:	6809      	ldr	r1, [r1, #0]
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	f000 ffa2 	bl	8006634 <SBGC32_CheckConfirmation>
	return generalSBGC->_ParserCurrentStatus;
 80056f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80056f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 80056fe:	4618      	mov	r0, r3
 8005700:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8005704:	46bd      	mov	sp, r7
 8005706:	bd90      	pop	{r4, r7, pc}

08005708 <SBGC32_GetAdjVarValues>:
 *	@param	adjVarQuan - number of adjustable variables
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_GetAdjVarValues (GeneralSBGC_t *generalSBGC, AdjVarsGeneral_t *adjVarsGeneral, ui8 adjVarQuan)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b0c8      	sub	sp, #288	; 0x120
 800570c:	af00      	add	r7, sp, #0
 800570e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005716:	6018      	str	r0, [r3, #0]
 8005718:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800571c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005720:	6019      	str	r1, [r3, #0]
 8005722:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005726:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 800572a:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_GET_ADJ_VARS_VAL);
 800572c:	f107 0310 	add.w	r3, r7, #16
 8005730:	2140      	movs	r1, #64	; 0x40
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fdd8 	bl	80062e8 <InitCmdWrite>

	ui8 firstGroupQuan = (adjVarQuan > 40) ? 40 : adjVarQuan;
 8005738:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800573c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b28      	cmp	r3, #40	; 0x28
 8005744:	bf28      	it	cs
 8005746:	2328      	movcs	r3, #40	; 0x28
 8005748:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113

	WriteByte(&cmd, firstGroupQuan);  // numParams
 800574c:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8005750:	f107 0310 	add.w	r3, r7, #16
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f000 fce2 	bl	8006120 <WriteByte>

	ui8 count = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	while (count < firstGroupQuan)
 8005762:	e017      	b.n	8005794 <SBGC32_GetAdjVarValues+0x8c>
		WriteByte(&cmd, adjVarsGeneral[count++].ID);
 8005764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
 800576e:	461a      	mov	r2, r3
 8005770:	4613      	mov	r3, r2
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	4413      	add	r3, r2
 8005776:	011b      	lsls	r3, r3, #4
 8005778:	461a      	mov	r2, r3
 800577a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800577e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4413      	add	r3, r2
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	f107 0310 	add.w	r3, r7, #16
 800578c:	4611      	mov	r1, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fcc6 	bl	8006120 <WriteByte>
	while (count < firstGroupQuan)
 8005794:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8005798:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800579c:	429a      	cmp	r2, r3
 800579e:	d3e1      	bcc.n	8005764 <SBGC32_GetAdjVarValues+0x5c>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_SET_ADJ_VARS_VAL), "Adj Var Values vol. 1:") == TX_RX_OK)
 80057a0:	f107 0110 	add.w	r1, r7, #16
 80057a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057ac:	221f      	movs	r2, #31
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	f000 fba9 	bl	8005f06 <SBGC32_TX_RX>
 80057b4:	4603      	mov	r3, r0
 80057b6:	4619      	mov	r1, r3
 80057b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80057bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057c0:	4a5c      	ldr	r2, [pc, #368]	; (8005934 <SBGC32_GetAdjVarValues+0x22c>)
 80057c2:	6818      	ldr	r0, [r3, #0]
 80057c4:	f001 f8b2 	bl	800692c <CheckReceipt>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f040 80a6 	bne.w	800591c <SBGC32_GetAdjVarValues+0x214>
	{
		SkipBytes(&cmd, 1);  // skip ui8 numParams
 80057d0:	f107 0310 	add.w	r3, r7, #16
 80057d4:	2101      	movs	r1, #1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fd71 	bl	80062be <SkipBytes>

		FOR_(i, firstGroupQuan)
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057e2:	e01f      	b.n	8005824 <SBGC32_GetAdjVarValues+0x11c>
		{
			SkipBytes(&cmd, 1);  // skip ui8 ID
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fd67 	bl	80062be <SkipBytes>
			adjVarsGeneral[i].value = ReadLong(&cmd);
 80057f0:	f107 0310 	add.w	r3, r7, #16
 80057f4:	4618      	mov	r0, r3
 80057f6:	f000 fd25 	bl	8006244 <ReadLong>
 80057fa:	4601      	mov	r1, r0
 80057fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005800:	4613      	mov	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	4413      	add	r3, r2
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	461a      	mov	r2, r3
 800580a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800580e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4413      	add	r3, r2
 8005816:	460a      	mov	r2, r1
 8005818:	629a      	str	r2, [r3, #40]	; 0x28
		FOR_(i, firstGroupQuan)
 800581a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800581e:	3301      	adds	r3, #1
 8005820:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005824:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8005828:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800582c:	429a      	cmp	r2, r3
 800582e:	dbd9      	blt.n	80057e4 <SBGC32_GetAdjVarValues+0xdc>
		}

		if (adjVarQuan > 40)
 8005830:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005834:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b28      	cmp	r3, #40	; 0x28
 800583c:	d96e      	bls.n	800591c <SBGC32_GetAdjVarValues+0x214>
		{
			InitCmdWrite(&cmd, CMD_GET_ADJ_VARS_VAL);  // command re-init
 800583e:	f107 0310 	add.w	r3, r7, #16
 8005842:	2140      	movs	r1, #64	; 0x40
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fd4f 	bl	80062e8 <InitCmdWrite>
			WriteByte(&cmd, adjVarQuan - 40);
 800584a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800584e:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	3b28      	subs	r3, #40	; 0x28
 8005856:	b2da      	uxtb	r2, r3
 8005858:	f107 0310 	add.w	r3, r7, #16
 800585c:	4611      	mov	r1, r2
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fc5e 	bl	8006120 <WriteByte>

			while (count < (adjVarQuan - 40))
 8005864:	e00a      	b.n	800587c <SBGC32_GetAdjVarValues+0x174>
				WriteByte(&cmd, count++);
 8005866:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
 8005870:	f107 0210 	add.w	r2, r7, #16
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 fc52 	bl	8006120 <WriteByte>
			while (count < (adjVarQuan - 40))
 800587c:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8005880:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005884:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	3b28      	subs	r3, #40	; 0x28
 800588c:	429a      	cmp	r2, r3
 800588e:	dbea      	blt.n	8005866 <SBGC32_GetAdjVarValues+0x15e>

			if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_SET_ADJ_VARS_VAL), "Adj Var Values vol. 2:") == TX_RX_OK)
 8005890:	f107 0110 	add.w	r1, r7, #16
 8005894:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005898:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800589c:	221f      	movs	r2, #31
 800589e:	6818      	ldr	r0, [r3, #0]
 80058a0:	f000 fb31 	bl	8005f06 <SBGC32_TX_RX>
 80058a4:	4603      	mov	r3, r0
 80058a6:	4619      	mov	r1, r3
 80058a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80058b0:	4a21      	ldr	r2, [pc, #132]	; (8005938 <SBGC32_GetAdjVarValues+0x230>)
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	f001 f83a 	bl	800692c <CheckReceipt>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d12e      	bne.n	800591c <SBGC32_GetAdjVarValues+0x214>
				FOR_(i, adjVarQuan - 40)
 80058be:	2300      	movs	r3, #0
 80058c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80058c4:	e020      	b.n	8005908 <SBGC32_GetAdjVarValues+0x200>
				{
					SkipBytes(&cmd, 1);  // skip ui8 ID
 80058c6:	f107 0310 	add.w	r3, r7, #16
 80058ca:	2101      	movs	r1, #1
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fcf6 	bl	80062be <SkipBytes>
					adjVarsGeneral[i + 40].value = ReadLong(&cmd);
 80058d2:	f107 0310 	add.w	r3, r7, #16
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fcb4 	bl	8006244 <ReadLong>
 80058dc:	4601      	mov	r1, r0
 80058de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80058e2:	4613      	mov	r3, r2
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4413      	add	r3, r2
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 80058ee:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80058f2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	4413      	add	r3, r2
 80058fa:	460a      	mov	r2, r1
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28
				FOR_(i, adjVarQuan - 40)
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	3301      	adds	r3, #1
 8005904:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005908:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800590c:	f2a3 1319 	subw	r3, r3, #281	; 0x119
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	3b28      	subs	r3, #40	; 0x28
 8005914:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005918:	429a      	cmp	r2, r3
 800591a:	dbd4      	blt.n	80058c6 <SBGC32_GetAdjVarValues+0x1be>
				}
		}
	}

	return generalSBGC->_ParserCurrentStatus;
 800591c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005920:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 800592a:	4618      	mov	r0, r3
 800592c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	0800c0a4 	.word	0x0800c0a4
 8005938:	0800c0bc 	.word	0x0800c0bc

0800593c <FormatBoardVersion>:
 *
 *	@param	boardVer - BoardInfo_t.boardVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatBoardVersion (ui8 boardVer, char* pBuff)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	4603      	mov	r3, r0
 8005944:	6039      	str	r1, [r7, #0]
 8005946:	71fb      	strb	r3, [r7, #7]
	ui8 majorVer = boardVer / 10;
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <FormatBoardVersion+0x44>)
 800594c:	fba2 2303 	umull	r2, r3, r2, r3
 8005950:	08db      	lsrs	r3, r3, #3
 8005952:	73fb      	strb	r3, [r7, #15]
	ui8 minorVer = boardVer % 10;
 8005954:	79fa      	ldrb	r2, [r7, #7]
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <FormatBoardVersion+0x44>)
 8005958:	fba3 1302 	umull	r1, r3, r3, r2
 800595c:	08d9      	lsrs	r1, r3, #3
 800595e:	460b      	mov	r3, r1
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	73bb      	strb	r3, [r7, #14]
	sprintf(pBuff, "%u.%u", majorVer, minorVer);
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	4905      	ldr	r1, [pc, #20]	; (8005984 <FormatBoardVersion+0x48>)
 8005970:	6838      	ldr	r0, [r7, #0]
 8005972:	f002 fdf7 	bl	8008564 <siprintf>
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	cccccccd 	.word	0xcccccccd
 8005984:	0800c10c 	.word	0x0800c10c

08005988 <FormatFirmwareVersion>:
 *
 *	@param	firmwareVer - BoardInfo_t.firmwareVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatFirmwareVersion (ui16 firmwareVer, char* pBuff)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af02      	add	r7, sp, #8
 800598e:	4603      	mov	r3, r0
 8005990:	6039      	str	r1, [r7, #0]
 8005992:	80fb      	strh	r3, [r7, #6]
	ui8 majorVer = firmwareVer / 1000;
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <FormatFirmwareVersion+0x84>)
 8005998:	fba2 2303 	umull	r2, r3, r2, r3
 800599c:	099b      	lsrs	r3, r3, #6
 800599e:	b29b      	uxth	r3, r3
 80059a0:	73fb      	strb	r3, [r7, #15]
	ui8 minorVer = (firmwareVer % 1000) / 10;
 80059a2:	88fb      	ldrh	r3, [r7, #6]
 80059a4:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <FormatFirmwareVersion+0x84>)
 80059a6:	fba2 1203 	umull	r1, r2, r2, r3
 80059aa:	0992      	lsrs	r2, r2, #6
 80059ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059b0:	fb01 f202 	mul.w	r2, r1, r2
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <FormatFirmwareVersion+0x88>)
 80059ba:	fba2 2303 	umull	r2, r3, r2, r3
 80059be:	08db      	lsrs	r3, r3, #3
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	73bb      	strb	r3, [r7, #14]
	ui8 betaVer = firmwareVer % 10;
 80059c4:	88fa      	ldrh	r2, [r7, #6]
 80059c6:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <FormatFirmwareVersion+0x88>)
 80059c8:	fba3 1302 	umull	r1, r3, r3, r2
 80059cc:	08d9      	lsrs	r1, r3, #3
 80059ce:	460b      	mov	r3, r1
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	440b      	add	r3, r1
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	b29b      	uxth	r3, r3
 80059da:	737b      	strb	r3, [r7, #13]

	if (betaVer != 0)
 80059dc:	7b7b      	ldrb	r3, [r7, #13]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <FormatFirmwareVersion+0x6e>
		sprintf(pBuff, "%u.%ub%u", majorVer, minorVer, betaVer);
 80059e2:	7bfa      	ldrb	r2, [r7, #15]
 80059e4:	7bb9      	ldrb	r1, [r7, #14]
 80059e6:	7b7b      	ldrb	r3, [r7, #13]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	460b      	mov	r3, r1
 80059ec:	4909      	ldr	r1, [pc, #36]	; (8005a14 <FormatFirmwareVersion+0x8c>)
 80059ee:	6838      	ldr	r0, [r7, #0]
 80059f0:	f002 fdb8 	bl	8008564 <siprintf>

	else
		sprintf(pBuff, "%u.%u", majorVer, minorVer);
}
 80059f4:	e005      	b.n	8005a02 <FormatFirmwareVersion+0x7a>
		sprintf(pBuff, "%u.%u", majorVer, minorVer);
 80059f6:	7bfa      	ldrb	r2, [r7, #15]
 80059f8:	7bbb      	ldrb	r3, [r7, #14]
 80059fa:	4907      	ldr	r1, [pc, #28]	; (8005a18 <FormatFirmwareVersion+0x90>)
 80059fc:	6838      	ldr	r0, [r7, #0]
 80059fe:	f002 fdb1 	bl	8008564 <siprintf>
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	10624dd3 	.word	0x10624dd3
 8005a10:	cccccccd 	.word	0xcccccccd
 8005a14:	0800c114 	.word	0x0800c114
 8005a18:	0800c10c 	.word	0x0800c10c

08005a1c <SBGC32_TX>:
 *  		to be transmitted
 *
 *  @return	Transmission status
 */
TxRxStatus_t SBGC32_TX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b0c5      	sub	sp, #276	; 0x114
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a2a:	6018      	str	r0, [r3, #0]
 8005a2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a34:	6019      	str	r1, [r3, #0]
	ui8 buff [MAX_BUFF_SIZE];
	ui32 currentTime;

    buff[0] = generalSBGC->protocolVersion;
 8005a36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	7e1a      	ldrb	r2, [r3, #24]
 8005a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4a:	701a      	strb	r2, [r3, #0]
    buff[1] = serialCommand->commandID;
 8005a4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a50:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	781a      	ldrb	r2, [r3, #0]
 8005a58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a60:	705a      	strb	r2, [r3, #1]
    buff[2] = serialCommand->payloadSize;
 8005a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a66:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8005a70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a78:	709a      	strb	r2, [r3, #2]
    buff[3] = buff[1] + buff[2];
 8005a7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a82:	785a      	ldrb	r2, [r3, #1]
 8005a84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a8c:	789b      	ldrb	r3, [r3, #2]
 8005a8e:	4413      	add	r3, r2
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	70da      	strb	r2, [r3, #3]

    memcpy(&buff[4], serialCommand->payload, serialCommand->payloadSize);
 8005a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005aa0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	1c59      	adds	r1, r3, #1
 8005aa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005aac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f107 0308 	add.w	r3, r7, #8
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 fdfa 	bl	80076b8 <memcpy>

    /* ui8 size = real size current serialCommand */
    ui8 size = serialCommand->payloadSize + 4 + (generalSBGC->protocolVersion == PR2_START_CHARACTER ? 2 : 1);
 8005ac4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ac8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005ad2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005ad6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	7e12      	ldrb	r2, [r2, #24]
 8005ade:	2a24      	cmp	r2, #36	; 0x24
 8005ae0:	d101      	bne.n	8005ae6 <SBGC32_TX+0xca>
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	e000      	b.n	8005ae8 <SBGC32_TX+0xcc>
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4413      	add	r3, r2
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	3304      	adds	r3, #4
 8005aee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

    if (generalSBGC->protocolVersion == PR1_START_CHARACTER)
 8005af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005af6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	7e1b      	ldrb	r3, [r3, #24]
 8005afe:	2b3e      	cmp	r3, #62	; 0x3e
 8005b00:	d120      	bne.n	8005b44 <SBGC32_TX+0x128>
    	buff[4 + serialCommand->payloadSize] = Modulo256_Calculate(serialCommand->payload, serialCommand->payloadSize);
 8005b02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	1c5a      	adds	r2, r3, #1
 8005b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b12:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005b1c:	b299      	uxth	r1, r3
 8005b1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b22:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005b2c:	1d1c      	adds	r4, r3, #4
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f000 ffaa 	bl	8006a88 <Modulo256_Calculate>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b40:	551a      	strb	r2, [r3, r4]
 8005b42:	e035      	b.n	8005bb0 <SBGC32_TX+0x194>

    else
    {
    	ui16 CRC16_Res = CRC16_Calculate(&buff[1], (4 + serialCommand->payloadSize - 1));
 8005b44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	3303      	adds	r3, #3
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	f107 0308 	add.w	r3, r7, #8
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 ffb8 	bl	8006ad6 <CRC16_Calculate>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    	buff[4 + serialCommand->payloadSize] = CRC16_Res & 0x00FF;
 8005b6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8005b80:	b2d1      	uxtb	r1, r2
 8005b82:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005b86:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005b8a:	54d1      	strb	r1, [r2, r3]
    	buff[5 + serialCommand->payloadSize] = (CRC16_Res >> 8) & 0x00FF;
 8005b8c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005b90:	0a1b      	lsrs	r3, r3, #8
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005ba2:	3305      	adds	r3, #5
 8005ba4:	b2d1      	uxtb	r1, r2
 8005ba6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005baa:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005bae:	54d1      	strb	r1, [r2, r3]
    }

    currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005bb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bb4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005bc0:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	4610      	mov	r0, r2
 8005bca:	4798      	blx	r3
 8005bcc:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
    while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8005bd0:	e029      	b.n	8005c26 <SBGC32_TX+0x20a>
    {
    	if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txTimeout)
 8005bd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005be2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	4610      	mov	r0, r2
 8005bec:	4798      	blx	r3
 8005bee:	4602      	mov	r2, r0
 8005bf0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bf4:	1ad2      	subs	r2, r2, r3
 8005bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d30f      	bcc.n	8005c26 <SBGC32_TX+0x20a>
    	{
    		generalSBGC->_txErrorsCount++;
 8005c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c12:	3301      	adds	r3, #1
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	851a      	strh	r2, [r3, #40]	; 0x28
    		return TX_BUFFER_OVERFLOW_ERROR;  // aka timeout error
 8005c22:	2301      	movs	r3, #1
 8005c24:	e015      	b.n	8005c52 <SBGC32_TX+0x236>
    while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8005c26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005c36:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	6810      	ldr	r0, [r2, #0]
 8005c3e:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8005c42:	b292      	uxth	r2, r2
 8005c44:	f107 0108 	add.w	r1, r7, #8
 8005c48:	4798      	blx	r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1c0      	bne.n	8005bd2 <SBGC32_TX+0x1b6>
    	}
    }

	return TX_RX_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd90      	pop	{r4, r7, pc}

08005c5c <SBGC32_RX>:
 *   		time for receiving one whole SerialCommand
 *
 *  @return	TX_RX_OK or last state of lastParserError variable
 */
TxRxStatus_t SBGC32_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, ui32 timeout)
{
 8005c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	b08e      	sub	sp, #56	; 0x38
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
	ui8 startSim;
	ui8 headBuff [3];  /* Header buffer:
	headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */
	ui16 availableBytes;

	TxRxStatus_t lastParserError = RX_START_PARSE;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	ParserStates_t parserState = STATE_IDLE;
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Launching timer */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4798      	blx	r3
 8005c82:	62b8      	str	r0, [r7, #40]	; 0x28

	serialCommand->readPos = 0;  // Prepare for reading
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

	while (1)
	{
		switch (parserState)
 8005c8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d063      	beq.n	8005d5c <SBGC32_RX+0x100>
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	f300 8122 	bgt.w	8005ede <SBGC32_RX+0x282>
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	dc02      	bgt.n	8005ca4 <SBGC32_RX+0x48>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	da03      	bge.n	8005caa <SBGC32_RX+0x4e>
 8005ca2:	e11c      	b.n	8005ede <SBGC32_RX+0x282>
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d01f      	beq.n	8005ce8 <SBGC32_RX+0x8c>
 8005ca8:	e119      	b.n	8005ede <SBGC32_RX+0x282>
		{
			/* Waiting start byte */
			case STATE_IDLE :
			case STATE_RESYNC :
			{
				startSim = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]

				if (generalSBGC->RxFunc(generalSBGC->Drv, &startSim) &&
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	f107 0117 	add.w	r1, r7, #23
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4798      	blx	r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d007      	beq.n	8005cd4 <SBGC32_RX+0x78>
 8005cc4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d103      	bne.n	8005cd4 <SBGC32_RX+0x78>
					lastParserError == RX_START_PARSE)
					lastParserError = RX_EMPTY_BUFF_ERROR;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

				else if (startSim == generalSBGC->protocolVersion)
					parserState = STATE_CHECK_HEADER;

				break;  // Passing to next state
 8005cd2:	e103      	b.n	8005edc <SBGC32_RX+0x280>
				else if (startSim == generalSBGC->protocolVersion)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	7e1a      	ldrb	r2, [r3, #24]
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	f040 80fe 	bne.w	8005edc <SBGC32_RX+0x280>
					parserState = STATE_CHECK_HEADER;
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;  // Passing to next state
 8005ce6:	e0f9      	b.n	8005edc <SBGC32_RX+0x280>
			}

			/* Waiting whole header */
			case STATE_CHECK_HEADER :
			{
				availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	837b      	strh	r3, [r7, #26]

				if ((availableBytes >= 3) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8005cf8:	8b7b      	ldrh	r3, [r7, #26]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d918      	bls.n	8005d30 <SBGC32_RX+0xd4>
 8005cfe:	8b7b      	ldrh	r3, [r7, #26]
 8005d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <SBGC32_RX+0xd4>
					FOR_(i, 3) generalSBGC->RxFunc(generalSBGC->Drv, &headBuff[i]);
 8005d08:	2300      	movs	r3, #0
 8005d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d0c:	e00c      	b.n	8005d28 <SBGC32_RX+0xcc>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	6810      	ldr	r0, [r2, #0]
 8005d16:	f107 0114 	add.w	r1, r7, #20
 8005d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1c:	440a      	add	r2, r1
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4798      	blx	r3
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	3301      	adds	r3, #1
 8005d26:	633b      	str	r3, [r7, #48]	; 0x30
 8005d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	ddef      	ble.n	8005d0e <SBGC32_RX+0xb2>
 8005d2e:	e003      	b.n	8005d38 <SBGC32_RX+0xdc>

				else
				{
					lastParserError = RX_BUFFER_REALTIME_ERROR;
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8005d36:	e0d2      	b.n	8005ede <SBGC32_RX+0x282>
				}

				if ((headBuff[0] + headBuff[1]) % 256 != headBuff[2])  // % 256 necessary needed here
 8005d38:	7d3a      	ldrb	r2, [r7, #20]
 8005d3a:	7d7b      	ldrb	r3, [r7, #21]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	7dbb      	ldrb	r3, [r7, #22]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d006      	beq.n	8005d54 <SBGC32_RX+0xf8>
				{
					lastParserError = RX_HEADER_CHECKSUM_ERROR;
 8005d46:	2305      	movs	r3, #5
 8005d48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					parserState = STATE_RESYNC;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8005d52:	e0c4      	b.n	8005ede <SBGC32_RX+0x282>
				}

				parserState = STATE_CHECK_PAYLOAD;
 8005d54:	2303      	movs	r3, #3
 8005d56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				break;  // Passing to next state
 8005d5a:	e0c0      	b.n	8005ede <SBGC32_RX+0x282>
			}

			/* Waiting whole payload and checksum */
			case STATE_CHECK_PAYLOAD :
			{
 8005d5c:	466b      	mov	r3, sp
 8005d5e:	469a      	mov	sl, r3
				ui8 checksumSize = (generalSBGC->protocolVersion == PR2_START_CHARACTER ? 2 : 1);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	7e1b      	ldrb	r3, [r3, #24]
 8005d64:	2b24      	cmp	r3, #36	; 0x24
 8005d66:	d101      	bne.n	8005d6c <SBGC32_RX+0x110>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e000      	b.n	8005d6e <SBGC32_RX+0x112>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				ui8 complexBuff [3 + headBuff[1] + checksumSize];  // (Header + payload + checksum) buffer
 8005d72:	7d7b      	ldrb	r3, [r7, #21]
 8005d74:	1cda      	adds	r2, r3, #3
 8005d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d7a:	18d1      	adds	r1, r2, r3
 8005d7c:	1e4b      	subs	r3, r1, #1
 8005d7e:	623b      	str	r3, [r7, #32]
 8005d80:	460a      	mov	r2, r1
 8005d82:	2300      	movs	r3, #0
 8005d84:	4614      	mov	r4, r2
 8005d86:	461d      	mov	r5, r3
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	00eb      	lsls	r3, r5, #3
 8005d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d96:	00e2      	lsls	r2, r4, #3
 8005d98:	460a      	mov	r2, r1
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	4690      	mov	r8, r2
 8005d9e:	4699      	mov	r9, r3
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005db4:	460b      	mov	r3, r1
 8005db6:	3307      	adds	r3, #7
 8005db8:	08db      	lsrs	r3, r3, #3
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	ebad 0d03 	sub.w	sp, sp, r3
 8005dc0:	466b      	mov	r3, sp
 8005dc2:	3300      	adds	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]

				availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4798      	blx	r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	837b      	strh	r3, [r7, #26]

				if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8005dd6:	8b7a      	ldrh	r2, [r7, #26]
 8005dd8:	7d7b      	ldrb	r3, [r7, #21]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005de0:	440b      	add	r3, r1
 8005de2:	429a      	cmp	r2, r3
 8005de4:	db1d      	blt.n	8005e22 <SBGC32_RX+0x1c6>
 8005de6:	8b7b      	ldrh	r3, [r7, #26]
 8005de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d018      	beq.n	8005e22 <SBGC32_RX+0x1c6>
					FOR_(i, headBuff[1] + checksumSize) generalSBGC->RxFunc(generalSBGC->Drv, &complexBuff[i + 3]);  // Offset from header space
 8005df0:	2300      	movs	r3, #0
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005df4:	e00c      	b.n	8005e10 <SBGC32_RX+0x1b4>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	6810      	ldr	r0, [r2, #0]
 8005dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e00:	3203      	adds	r2, #3
 8005e02:	69f9      	ldr	r1, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	4611      	mov	r1, r2
 8005e08:	4798      	blx	r3
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e10:	7d7b      	ldrb	r3, [r7, #21]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e18:	4413      	add	r3, r2
 8005e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	dbea      	blt.n	8005df6 <SBGC32_RX+0x19a>
 8005e20:	e003      	b.n	8005e2a <SBGC32_RX+0x1ce>

				else
				{
					lastParserError = RX_BUFFER_REALTIME_ERROR;
 8005e22:	2304      	movs	r3, #4
 8005e24:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					break;
 8005e28:	e056      	b.n	8005ed8 <SBGC32_RX+0x27c>
				}

				/* Checksum checking */
				if (!(checksumSize - 1))  // If SBGC_PROTOCOL_V1
 8005e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d115      	bne.n	8005e5e <SBGC32_RX+0x202>
				{
					if (complexBuff[3 + headBuff[1]] != Modulo256_Calculate(&complexBuff[3], headBuff[1]))
 8005e32:	7d7b      	ldrb	r3, [r7, #21]
 8005e34:	3303      	adds	r3, #3
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	5cd6      	ldrb	r6, [r2, r3]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	7d7a      	ldrb	r2, [r7, #21]
 8005e40:	b292      	uxth	r2, r2
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fe1f 	bl	8006a88 <Modulo256_Calculate>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	429e      	cmp	r6, r3
 8005e4e:	d031      	beq.n	8005eb4 <SBGC32_RX+0x258>
					{
						lastParserError = RX_PAYLOAD_CHECKSUM_ERROR;
 8005e50:	2306      	movs	r3, #6
 8005e52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						parserState = STATE_RESYNC;
 8005e56:	2301      	movs	r3, #1
 8005e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8005e5c:	e03c      	b.n	8005ed8 <SBGC32_RX+0x27c>
					}
				}

				else
				{
					memcpy(complexBuff, headBuff, 3);
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	461a      	mov	r2, r3
 8005e62:	f107 0314 	add.w	r3, r7, #20
 8005e66:	8819      	ldrh	r1, [r3, #0]
 8005e68:	789b      	ldrb	r3, [r3, #2]
 8005e6a:	8011      	strh	r1, [r2, #0]
 8005e6c:	7093      	strb	r3, [r2, #2]
					ui16 CRC_Res = CRC16_Calculate(complexBuff, headBuff[1] + 3);
 8005e6e:	7d7b      	ldrb	r3, [r7, #21]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3303      	adds	r3, #3
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	4619      	mov	r1, r3
 8005e78:	69f8      	ldr	r0, [r7, #28]
 8005e7a:	f000 fe2c 	bl	8006ad6 <CRC16_Calculate>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	833b      	strh	r3, [r7, #24]

					if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8005e82:	8b3b      	ldrh	r3, [r7, #24]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	7d7a      	ldrb	r2, [r7, #21]
 8005e88:	3203      	adds	r2, #3
 8005e8a:	69f9      	ldr	r1, [r7, #28]
 8005e8c:	5c8a      	ldrb	r2, [r1, r2]
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d010      	beq.n	8005eb4 <SBGC32_RX+0x258>
					   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 8005e92:	8b3b      	ldrh	r3, [r7, #24]
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	7d7a      	ldrb	r2, [r7, #21]
 8005e9c:	3204      	adds	r2, #4
 8005e9e:	69f9      	ldr	r1, [r7, #28]
 8005ea0:	5c8a      	ldrb	r2, [r1, r2]
					if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d006      	beq.n	8005eb4 <SBGC32_RX+0x258>
					{
						lastParserError = RX_PAYLOAD_CHECKSUM_ERROR;
 8005ea6:	2306      	movs	r3, #6
 8005ea8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
						parserState = STATE_RESYNC;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						break;
 8005eb2:	e011      	b.n	8005ed8 <SBGC32_RX+0x27c>
					}
				}

				/* Data passed all checks. Filling the serialCommand struct */
				serialCommand->commandID = (SBGC_Commands_t)headBuff[0];
 8005eb4:	7d3a      	ldrb	r2, [r7, #20]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	701a      	strb	r2, [r3, #0]
				memcpy(serialCommand->payload, &complexBuff[3], headBuff[1]);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	1c58      	adds	r0, r3, #1
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	3303      	adds	r3, #3
 8005ec2:	7d7a      	ldrb	r2, [r7, #21]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f001 fbf7 	bl	80076b8 <memcpy>
				serialCommand->payloadSize = headBuff[1];
 8005eca:	7d7a      	ldrb	r2, [r7, #21]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

				return TX_RX_OK;  // Incoming command was received fine
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	46d5      	mov	sp, sl
 8005ed6:	e011      	b.n	8005efc <SBGC32_RX+0x2a0>
 8005ed8:	46d5      	mov	sp, sl
 8005eda:	e000      	b.n	8005ede <SBGC32_RX+0x282>
				break;  // Passing to next state
 8005edc:	bf00      	nop
			}
		}

		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= timeout)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	6812      	ldr	r2, [r2, #0]
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4798      	blx	r3
 8005eea:	4602      	mov	r2, r0
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	f63f aeca 	bhi.w	8005c8c <SBGC32_RX+0x30>
			return lastParserError;
 8005ef8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
	}
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3738      	adds	r7, #56	; 0x38
 8005f00:	46bd      	mov	sp, r7
 8005f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005f06 <SBGC32_TX_RX>:
 *  @param	cmdID - SBGC32 command identifier
 *
 *  @return	Request response result
 */
TxRxStatus_t SBGC32_TX_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, SBGC_Commands_t cmdID)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	4613      	mov	r3, r2
 8005f12:	71fb      	strb	r3, [r7, #7]
	if (SBGC32_TX(generalSBGC, serialCommand))
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f7ff fd80 	bl	8005a1c <SBGC32_TX>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <SBGC32_TX_RX+0x20>
		return TX_BUFFER_OVERFLOW_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e038      	b.n	8005f98 <SBGC32_TX_RX+0x92>

	else
	{
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4798      	blx	r3
 8005f32:	6178      	str	r0, [r7, #20]

		while (1)
		{
			TxRxStatus_t lastParserStatus = SBGC32_RX(generalSBGC, serialCommand, generalSBGC->rxTimeout);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f7ff fe8d 	bl	8005c5c <SBGC32_RX>
 8005f42:	4603      	mov	r3, r0
 8005f44:	74fb      	strb	r3, [r7, #19]

			if (lastParserStatus == TX_RX_OK &&
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <SBGC32_TX_RX+0x5a>
			   (serialCommand->commandID == cmdID || cmdID == 0))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
			if (lastParserStatus == TX_RX_OK &&
 8005f50:	79fa      	ldrb	r2, [r7, #7]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d002      	beq.n	8005f5c <SBGC32_TX_RX+0x56>
			   (serialCommand->commandID == cmdID || cmdID == 0))
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <SBGC32_TX_RX+0x5a>
				return lastParserStatus;
 8005f5c:	7cfb      	ldrb	r3, [r7, #19]
 8005f5e:	e01b      	b.n	8005f98 <SBGC32_TX_RX+0x92>

			else if (lastParserStatus == TX_RX_OK &&
 8005f60:	7cfb      	ldrb	r3, [r7, #19]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <SBGC32_TX_RX+0x76>
					(serialCommand->commandID != cmdID))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	781b      	ldrb	r3, [r3, #0]
			else if (lastParserStatus == TX_RX_OK &&
 8005f6a:	79fa      	ldrb	r2, [r7, #7]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d005      	beq.n	8005f7c <SBGC32_TX_RX+0x76>
				generalSBGC->_missedCommandCount++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f74:	3301      	adds	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	859a      	strh	r2, [r3, #44]	; 0x2c

			if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	6812      	ldr	r2, [r2, #0]
 8005f84:	4610      	mov	r0, r2
 8005f86:	4798      	blx	r3
 8005f88:	4602      	mov	r2, r0
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	1ad2      	subs	r2, r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d3ce      	bcc.n	8005f34 <SBGC32_TX_RX+0x2e>
				return lastParserStatus;  // or return RX_TIMEOUT_ERROR;
 8005f96:	7cfb      	ldrb	r3, [r7, #19]
		}
	}
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <ConvertWithPM>:
 *	@param	parserMap - data type required for correct parsing
 *
 *	@return	size of written data
 */
ui8 ConvertWithPM (void *pDestination, const void *pSample, ui8 size, ParserMap_t parserMap)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4611      	mov	r1, r2
 8005fac:	461a      	mov	r2, r3
 8005fae:	460b      	mov	r3, r1
 8005fb0:	71fb      	strb	r3, [r7, #7]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	71bb      	strb	r3, [r7, #6]
	if (size == 0)
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <ConvertWithPM+0x20>
		return 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e00c      	b.n	8005fda <ConvertWithPM+0x3a>

	memcpy(pDestination, pSample, size);
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f001 fb76 	bl	80076b8 <memcpy>
	SwapBytesInStruct((ui8*)pDestination, size, parserMap);
 8005fcc:	79ba      	ldrb	r2, [r7, #6]
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f000 f862 	bl	800609c <SwapBytesInStruct>
	return size;
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <WriteBuff>:
 * 	@param	*buff - write data
 * 	@param	size - write data size
 * 	@param	parserMap - data type required for correct parsing
 */
void WriteBuff (SerialCommand_t *cmd, const void *buff, ui8 size, ParserMap_t parserMap)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	4611      	mov	r1, r2
 8005fee:	461a      	mov	r2, r3
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	71fb      	strb	r3, [r7, #7]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	71bb      	strb	r3, [r7, #6]
	if (cmd->payloadSize > MAX_BUFF_SIZE - size)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005ffe:	461a      	mov	r2, r3
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006006:	429a      	cmp	r2, r3
 8006008:	dc16      	bgt.n	8006038 <WriteBuff+0x56>
		return;  // data will not fit
	
	cmd->payloadSize += ConvertWithPM(&cmd->payload[cmd->payloadSize], buff, size, parserMap);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006010:	461a      	mov	r2, r3
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4413      	add	r3, r2
 8006016:	1c58      	adds	r0, r3, #1
 8006018:	79bb      	ldrb	r3, [r7, #6]
 800601a:	79fa      	ldrb	r2, [r7, #7]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	f7ff ffbf 	bl	8005fa0 <ConvertWithPM>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800602c:	4413      	add	r3, r2
 800602e:	b2da      	uxtb	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8006036:	e000      	b.n	800603a <WriteBuff+0x58>
		return;  // data will not fit
 8006038:	bf00      	nop
}
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <ReadBuff>:
 *	@param	*buff - read data buffer
 *	@param	size - read data size
 *	@param	parserMap - data type required for correct parsing
 */
void ReadBuff (SerialCommand_t *cmd, void *buff, ui8 size, ParserMap_t parserMap)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4611      	mov	r1, r2
 800604c:	461a      	mov	r2, r3
 800604e:	460b      	mov	r3, r1
 8006050:	71fb      	strb	r3, [r7, #7]
 8006052:	4613      	mov	r3, r2
 8006054:	71bb      	strb	r3, [r7, #6]
	if (size > (MAX_BUFF_SIZE - cmd->readPos))
 8006056:	79fa      	ldrb	r2, [r7, #7]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800605e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006062:	429a      	cmp	r2, r3
 8006064:	dc16      	bgt.n	8006094 <ReadBuff+0x54>
		return;  // data will not fit
	
	cmd->readPos += ConvertWithPM(buff, &cmd->payload[cmd->readPos], size, parserMap);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800606c:	461a      	mov	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	1c59      	adds	r1, r3, #1
 8006074:	79bb      	ldrb	r3, [r7, #6]
 8006076:	79fa      	ldrb	r2, [r7, #7]
 8006078:	68b8      	ldr	r0, [r7, #8]
 800607a:	f7ff ff91 	bl	8005fa0 <ConvertWithPM>
 800607e:	4603      	mov	r3, r0
 8006080:	461a      	mov	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006088:	4413      	add	r3, r2
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 8006092:	e000      	b.n	8006096 <ReadBuff+0x56>
		return;  // data will not fit
 8006094:	bf00      	nop
}
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <SwapBytesInStruct>:
 *	@param 	*structure - structure buffer to bytes rearrange
 *	@param	size - structure buffer size
 *	@param	parserMap - data type required for correct parsing
 */
void SwapBytesInStruct (ui8 *structure, ui8 size, ParserMap_t parserMap)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
 80060a8:	4613      	mov	r3, r2
 80060aa:	70bb      	strb	r3, [r7, #2]
				}
			}
		}

	#endif
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
void ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	2b04      	cmp	r3, #4
 80060ca:	d80b      	bhi.n	80060e4 <ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d101      	bne.n	80060d6 <ToLittleEndian+0x1e>
 80060d2:	2304      	movs	r3, #4
 80060d4:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 80060d6:	79fb      	ldrb	r3, [r7, #7]
 80060d8:	461a      	mov	r2, r3
 80060da:	68f9      	ldr	r1, [r7, #12]
 80060dc:	68b8      	ldr	r0, [r7, #8]
 80060de:	f001 faeb 	bl	80076b8 <memcpy>
 80060e2:	e000      	b.n	80060e6 <ToLittleEndian+0x2e>
	if (size > 4) return;
 80060e4:	bf00      	nop

		FOR_(i, size / 2)
			SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
void FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d80b      	bhi.n	8006118 <FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	2b03      	cmp	r3, #3
 8006104:	d101      	bne.n	800610a <FromLittleEndian+0x1e>
 8006106:	2304      	movs	r3, #4
 8006108:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 800610a:	79fb      	ldrb	r3, [r7, #7]
 800610c:	461a      	mov	r2, r3
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f001 fad1 	bl	80076b8 <memcpy>
 8006116:	e000      	b.n	800611a <FromLittleEndian+0x2e>
	if (size > 4) return;
 8006118:	bf00      	nop

		FOR_(i, size / 2)
			SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <WriteByte>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	byte - byte to write
 */
void WriteByte (SerialCommand_t *cmd, const ui8 byte)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
	if (cmd->payloadSize < MAX_BUFF_SIZE)
		cmd->payload[cmd->payloadSize++] = byte;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	b2d1      	uxtb	r1, r2
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4413      	add	r3, r2
 8006142:	78fa      	ldrb	r2, [r7, #3]
 8006144:	705a      	strb	r2, [r3, #1]
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <ReadByte>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Byte read
 */
ui8 ReadByte (SerialCommand_t *cmd)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
	return cmd->payload[cmd->readPos++];
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006160:	1c5a      	adds	r2, r3, #1
 8006162:	b2d1      	uxtb	r1, r2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	f882 1102 	strb.w	r1, [r2, #258]	; 0x102
 800616a:	461a      	mov	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4413      	add	r3, r2
 8006170:	785b      	ldrb	r3, [r3, #1]
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <WriteWord>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	word - two bytes to write
 */
void WriteWord (SerialCommand_t *cmd, const ui16 word)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	807b      	strh	r3, [r7, #2]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 2)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006190:	2bff      	cmp	r3, #255	; 0xff
 8006192:	d013      	beq.n	80061bc <WriteWord+0x3e>
	{
		ToLittleEndian(&word, &cmd->payload[cmd->payloadSize], 2);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800619a:	461a      	mov	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4413      	add	r3, r2
 80061a0:	1c59      	adds	r1, r3, #1
 80061a2:	1cbb      	adds	r3, r7, #2
 80061a4:	2202      	movs	r2, #2
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7ff ff86 	bl	80060b8 <ToLittleEndian>
		cmd->payloadSize += 2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80061b2:	3302      	adds	r3, #2
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 80061bc:	bf00      	nop
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <ReadWord>:
 *	@param 	*cmd - SerialCommand
 *
 *	@return	Word read
 */
ui16 ReadWord (SerialCommand_t *cmd)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
	ui16 word;
	FromLittleEndian(&word, &cmd->payload[cmd->readPos], 2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80061d2:	461a      	mov	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4413      	add	r3, r2
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	f107 030e 	add.w	r3, r7, #14
 80061de:	2202      	movs	r2, #2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff ff83 	bl	80060ec <FromLittleEndian>
	cmd->readPos += 2;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80061ec:	3302      	adds	r3, #2
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return word;
 80061f6:	89fb      	ldrh	r3, [r7, #14]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <WriteLong>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	dword - four bytes to write
 */
void WriteLong (SerialCommand_t *cmd, const ui32 dword)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 4)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006210:	2bfc      	cmp	r3, #252	; 0xfc
 8006212:	d813      	bhi.n	800623c <WriteLong+0x3c>
	{
		ToLittleEndian(&dword, &cmd->payload[cmd->payloadSize], 4);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800621a:	461a      	mov	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4413      	add	r3, r2
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	463b      	mov	r3, r7
 8006224:	2204      	movs	r2, #4
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff ff46 	bl	80060b8 <ToLittleEndian>
		cmd->payloadSize += 4;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006232:	3304      	adds	r3, #4
 8006234:	b2da      	uxtb	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <ReadLong>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Long read
 */
ui32 ReadLong (SerialCommand_t *cmd)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
	ui32 dword;
	FromLittleEndian(&dword, &cmd->payload[cmd->readPos], 4);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4413      	add	r3, r2
 8006258:	1c59      	adds	r1, r3, #1
 800625a:	f107 030c 	add.w	r3, r7, #12
 800625e:	2204      	movs	r2, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff ff43 	bl	80060ec <FromLittleEndian>
	cmd->readPos += 4;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800626c:	3304      	adds	r3, #4
 800626e:	b2da      	uxtb	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return dword;
 8006276:	68fb      	ldr	r3, [r7, #12]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <WriteEmptyBuff>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	size - size of filled with zeros data
 */
void WriteEmptyBuff (SerialCommand_t *cmd, ui8 size)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
	memset(&cmd->payload[cmd->payloadSize], 0, size);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006292:	461a      	mov	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4413      	add	r3, r2
 8006298:	3301      	adds	r3, #1
 800629a:	78fa      	ldrb	r2, [r7, #3]
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fa18 	bl	80076d4 <memset>
	cmd->payloadSize += size;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	4413      	add	r3, r2
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
}
 80062b6:	bf00      	nop
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <SkipBytes>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	size - size of skipped data
 */
void SkipBytes (SerialCommand_t *cmd, ui8 size)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
	cmd->readPos += size;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	4413      	add	r3, r2
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <InitCmdWrite>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	cmdID - SBGC32 command identifier
 */
void InitCmdWrite (SerialCommand_t *cmd, SBGC_Commands_t cmdID)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
	cmd->commandID = cmdID;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	78fa      	ldrb	r2, [r7, #3]
 80062f8:	701a      	strb	r2, [r3, #0]
	cmd->payloadSize = 0;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <SBGC32_DefaultInit>:
 *	@return Communication status
 */
TxRxStatus_t SBGC32_DefaultInit (GeneralSBGC_t *generalSBGC, TxFunc_t TxFunc, RxFunc_t RxFunc,
								 AvailableBytesFunc_t AvailableBytesFunc, TxDebugFunc_t TxDebugFunc,
								 GetTimeFunc_t GetTimeFunc, SBGC_ProtocolVersion_t protocolVersion)
{
 8006310:	b590      	push	{r4, r7, lr}
 8006312:	b0cb      	sub	sp, #300	; 0x12c
 8006314:	af00      	add	r7, sp, #0
 8006316:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800631a:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 800631e:	6020      	str	r0, [r4, #0]
 8006320:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8006324:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8006328:	6001      	str	r1, [r0, #0]
 800632a:	f507 7194 	add.w	r1, r7, #296	; 0x128
 800632e:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8006332:	600a      	str	r2, [r1, #0]
 8006334:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006338:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800633c:	6013      	str	r3, [r2, #0]
	generalSBGC->TxFunc = TxFunc;
 800633e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006342:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800634c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	605a      	str	r2, [r3, #4]
	generalSBGC->RxFunc = RxFunc;
 8006354:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006358:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006362:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	609a      	str	r2, [r3, #8]
	generalSBGC->AvailableBytesFunc = AvailableBytesFunc;
 800636a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800636e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006378:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	60da      	str	r2, [r3, #12]
	generalSBGC->TxDebugFunc = TxDebugFunc;
 8006380:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006384:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800638e:	611a      	str	r2, [r3, #16]
	generalSBGC->GetTimeFunc = GetTimeFunc;
 8006390:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006394:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800639e:	615a      	str	r2, [r3, #20]

	generalSBGC->protocolVersion = protocolVersion;
 80063a0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80063a4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80063ae:	761a      	strb	r2, [r3, #24]
	generalSBGC->txTimeout = SBGC_TX_WAITING;
 80063b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80063b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2264      	movs	r2, #100	; 0x64
 80063bc:	61da      	str	r2, [r3, #28]
	generalSBGC->rxTimeout = SBGC_RX_WAITING;
 80063be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80063c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80063cc:	621a      	str	r2, [r3, #32]
	generalSBGC->txrxTimeout = SBGC_RX_WAITING;
 80063ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80063d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80063dc:	625a      	str	r2, [r3, #36]	; 0x24

	generalSBGC->_txErrorsCount = 0;
 80063de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80063e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2200      	movs	r2, #0
 80063ea:	851a      	strh	r2, [r3, #40]	; 0x28
	generalSBGC->_rxErrorsCount = 0;
 80063ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80063f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	855a      	strh	r2, [r3, #42]	; 0x2a

	/* Startup Delay */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 80063fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80063fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800640a:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	4610      	mov	r0, r2
 8006414:	4798      	blx	r3
 8006416:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	while ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) < SBGC_STARTUP_DELAY);
 800641a:	bf00      	nop
 800641c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006420:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800642c:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	4610      	mov	r0, r2
 8006436:	4798      	blx	r3
 8006438:	4602      	mov	r2, r0
 800643a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8006444:	4293      	cmp	r3, r2
 8006446:	d9e9      	bls.n	800641c <SBGC32_DefaultInit+0x10c>

	/* Getting board information */
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO);
 8006448:	f107 0320 	add.w	r3, r7, #32
 800644c:	2156      	movs	r1, #86	; 0x56
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff ff4a 	bl	80062e8 <InitCmdWrite>
	WriteWord(&cmd, 0);  // cfg = 0
 8006454:	f107 0320 	add.w	r3, r7, #32
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff fe8f 	bl	800617e <WriteWord>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO), "Board Info:") == TX_RX_OK)
 8006460:	f107 0120 	add.w	r1, r7, #32
 8006464:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006468:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800646c:	2256      	movs	r2, #86	; 0x56
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	f7ff fd49 	bl	8005f06 <SBGC32_TX_RX>
 8006474:	4603      	mov	r3, r0
 8006476:	4619      	mov	r1, r3
 8006478:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800647c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006480:	4a64      	ldr	r2, [pc, #400]	; (8006614 <SBGC32_DefaultInit+0x304>)
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	f000 fa52 	bl	800692c <CheckReceipt>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d119      	bne.n	80064c2 <SBGC32_DefaultInit+0x1b2>
	{
		generalSBGC->_boardVersion = cmd.payload[0];
 800648e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006496:	785a      	ldrb	r2, [r3, #1]
 8006498:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800649c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		FromLittleEndian(&generalSBGC->_firmwareVersion, &cmd.payload[1], 2);
 80064a6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80064b4:	f107 0320 	add.w	r3, r7, #32
 80064b8:	3302      	adds	r3, #2
 80064ba:	2202      	movs	r2, #2
 80064bc:	4619      	mov	r1, r3
 80064be:	f7ff fe15 	bl	80060ec <FromLittleEndian>
	#ifdef SBGC_DEBUG_MODE

	    char boardVersionStr [4];
  		char firmwareVersionStr [7];

		FormatBoardVersion(generalSBGC->_boardVersion, boardVersionStr);
 80064c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064d0:	f107 021c 	add.w	r2, r7, #28
 80064d4:	4611      	mov	r1, r2
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fa30 	bl	800593c <FormatBoardVersion>
   		FormatFirmwareVersion(generalSBGC->_firmwareVersion, firmwareVersionStr);
 80064dc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80064e8:	f107 0214 	add.w	r2, r7, #20
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fa4a 	bl	8005988 <FormatFirmwareVersion>

		PrintMessage(generalSBGC, TEXT_SIZE_(" \n"));
 80064f4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80064f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80064fc:	2202      	movs	r2, #2
 80064fe:	4946      	ldr	r1, [pc, #280]	; (8006618 <SBGC32_DefaultInit+0x308>)
 8006500:	6818      	ldr	r0, [r3, #0]
 8006502:	f000 fb29 	bl	8006b58 <PrintMessage>
		PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n"));
 8006506:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800650a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800650e:	221f      	movs	r2, #31
 8006510:	4942      	ldr	r1, [pc, #264]	; (800661c <SBGC32_DefaultInit+0x30c>)
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	f000 fb20 	bl	8006b58 <PrintMessage>

		if (generalSBGC->_ParserCurrentStatus == TX_RX_OK)
 8006518:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800651c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006526:	2b00      	cmp	r3, #0
 8006528:	d156      	bne.n	80065d8 <SBGC32_DefaultInit+0x2c8>
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("The system is ready to go!\n"));
 800652a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800652e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006532:	221b      	movs	r2, #27
 8006534:	493a      	ldr	r1, [pc, #232]	; (8006620 <SBGC32_DefaultInit+0x310>)
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	f000 fb0e 	bl	8006b58 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)"Board Version: "));
 800653c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006540:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006544:	220f      	movs	r2, #15
 8006546:	4937      	ldr	r1, [pc, #220]	; (8006624 <SBGC32_DefaultInit+0x314>)
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f000 fb05 	bl	8006b58 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_(boardVersionStr));
 800654e:	f107 031c 	add.w	r3, r7, #28
 8006552:	4618      	mov	r0, r3
 8006554:	f7f9 fe74 	bl	8000240 <strlen>
 8006558:	4603      	mov	r3, r0
 800655a:	b29a      	uxth	r2, r3
 800655c:	f107 011c 	add.w	r1, r7, #28
 8006560:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006564:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	f000 faf5 	bl	8006b58 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)" \n"));
 800656e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006572:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006576:	2202      	movs	r2, #2
 8006578:	4927      	ldr	r1, [pc, #156]	; (8006618 <SBGC32_DefaultInit+0x308>)
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f000 faec 	bl	8006b58 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)"Firmware Version: "));
 8006580:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006584:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006588:	2212      	movs	r2, #18
 800658a:	4927      	ldr	r1, [pc, #156]	; (8006628 <SBGC32_DefaultInit+0x318>)
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	f000 fae3 	bl	8006b58 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_(firmwareVersionStr));
 8006592:	f107 0314 	add.w	r3, r7, #20
 8006596:	4618      	mov	r0, r3
 8006598:	f7f9 fe52 	bl	8000240 <strlen>
 800659c:	4603      	mov	r3, r0
 800659e:	b29a      	uxth	r2, r3
 80065a0:	f107 0114 	add.w	r1, r7, #20
 80065a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	f000 fad3 	bl	8006b58 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)" \n"));
 80065b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065ba:	2202      	movs	r2, #2
 80065bc:	4916      	ldr	r1, [pc, #88]	; (8006618 <SBGC32_DefaultInit+0x308>)
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	f000 faca 	bl	8006b58 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\r"));
 80065c4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065cc:	2220      	movs	r2, #32
 80065ce:	4917      	ldr	r1, [pc, #92]	; (800662c <SBGC32_DefaultInit+0x31c>)
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	f000 fac1 	bl	8006b58 <PrintMessage>
 80065d6:	e011      	b.n	80065fc <SBGC32_DefaultInit+0x2ec>
		}

		else
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("Communication Error!\n"));
 80065d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065dc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065e0:	2215      	movs	r2, #21
 80065e2:	4913      	ldr	r1, [pc, #76]	; (8006630 <SBGC32_DefaultInit+0x320>)
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	f000 fab7 	bl	8006b58 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\r"));
 80065ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80065ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065f2:	2220      	movs	r2, #32
 80065f4:	490d      	ldr	r1, [pc, #52]	; (800662c <SBGC32_DefaultInit+0x31c>)
 80065f6:	6818      	ldr	r0, [r3, #0]
 80065f8:	f000 faae 	bl	8006b58 <PrintMessage>
		}

	#endif

	return generalSBGC->_ParserCurrentStatus;
 80065fc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006600:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 800660a:	4618      	mov	r0, r3
 800660c:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8006610:	46bd      	mov	sp, r7
 8006612:	bd90      	pop	{r4, r7, pc}
 8006614:	0800c120 	.word	0x0800c120
 8006618:	0800c12c 	.word	0x0800c12c
 800661c:	0800c130 	.word	0x0800c130
 8006620:	0800c150 	.word	0x0800c150
 8006624:	0800c16c 	.word	0x0800c16c
 8006628:	0800c17c 	.word	0x0800c17c
 800662c:	0800c190 	.word	0x0800c190
 8006630:	0800c1b4 	.word	0x0800c1b4

08006634 <SBGC32_CheckConfirmation>:
 *	@param	cmdID - identifier of the SerialCommand being confirmed
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_CheckConfirmation (GeneralSBGC_t *generalSBGC, ConfirmationState_t *confirmationState, SBGC_Commands_t cmdID)
{
 8006634:	b590      	push	{r4, r7, lr}
 8006636:	b0cf      	sub	sp, #316	; 0x13c
 8006638:	af00      	add	r7, sp, #0
 800663a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800663e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006642:	6018      	str	r0, [r3, #0]
 8006644:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800664c:	6019      	str	r1, [r3, #0]
 800664e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006652:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006656:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8006658:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800665c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006668:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
 8006674:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134
		char debugStr [30];
	#endif

	while (1)
	{
		TxRxStatus_t lastParserStatus = SBGC32_RX(generalSBGC, &cmd, generalSBGC->txrxTimeout);
 8006678:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800667c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006684:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006688:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800668c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006690:	6818      	ldr	r0, [r3, #0]
 8006692:	f7ff fae3 	bl	8005c5c <SBGC32_RX>
 8006696:	4603      	mov	r3, r0
 8006698:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133

		if (lastParserStatus == TX_RX_OK &&
 800669c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 80a2 	bne.w	80067ea <SBGC32_CheckConfirmation+0x1b6>
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 80066a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ae:	781b      	ldrb	r3, [r3, #0]
		if (lastParserStatus == TX_RX_OK &&
 80066b0:	2b43      	cmp	r3, #67	; 0x43
 80066b2:	d10b      	bne.n	80066cc <SBGC32_CheckConfirmation+0x98>
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 80066b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066c2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d007      	beq.n	80066dc <SBGC32_CheckConfirmation+0xa8>
			(cmd.commandID == CMD_RESET)))
 80066cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d4:	781b      	ldrb	r3, [r3, #0]
			((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 80066d6:	2b72      	cmp	r3, #114	; 0x72
 80066d8:	f040 8087 	bne.w	80067ea <SBGC32_CheckConfirmation+0x1b6>
		{
			confirmationState->cmdID = ReadByte(&cmd);
 80066dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fd36 	bl	8006152 <ReadByte>
 80066e6:	4603      	mov	r3, r0
 80066e8:	461a      	mov	r2, r3
 80066ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	701a      	strb	r2, [r3, #0]

			if (cmd.payloadSize == 2)
 80066f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80066fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066fe:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006702:	2b02      	cmp	r3, #2
 8006704:	d10e      	bne.n	8006724 <SBGC32_CheckConfirmation+0xf0>
				confirmationState->cmdData = ReadByte(&cmd);
 8006706:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff fd21 	bl	8006152 <ReadByte>
 8006710:	4603      	mov	r3, r0
 8006712:	b29a      	uxth	r2, r3
 8006714:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8a3 2001 	strh.w	r2, [r3, #1]
 8006722:	e015      	b.n	8006750 <SBGC32_CheckConfirmation+0x11c>
			else if (cmd.payloadSize == 3)
 8006724:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006730:	2b03      	cmp	r3, #3
 8006732:	d10d      	bne.n	8006750 <SBGC32_CheckConfirmation+0x11c>
				confirmationState->cmdData = ReadWord(&cmd);
 8006734:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fd43 	bl	80061c4 <ReadWord>
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f8a3 2001 	strh.w	r2, [r3, #1]

			#ifdef SBGC_DEBUG_MODE
				/* - - - - - - - User Confirm Handler - - - - - - - - */
				if (cmd.payloadSize <= 1)
 8006750:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006758:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800675c:	2b01      	cmp	r3, #1
 800675e:	d80d      	bhi.n	800677c <SBGC32_CheckConfirmation+0x148>
					sprintf(debugStr, "CMD_CONFIRM #%d\n", confirmationState->cmdID);
 8006760:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	f107 0310 	add.w	r3, r7, #16
 8006772:	496a      	ldr	r1, [pc, #424]	; (800691c <SBGC32_CheckConfirmation+0x2e8>)
 8006774:	4618      	mov	r0, r3
 8006776:	f001 fef5 	bl	8008564 <siprintf>
 800677a:	e013      	b.n	80067a4 <SBGC32_CheckConfirmation+0x170>
				else
					sprintf(debugStr, "CMD_CONFIRM #%d (%u)\n", confirmationState->cmdID, confirmationState->cmdData);
 800677c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800678e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f107 0010 	add.w	r0, r7, #16
 800679e:	4960      	ldr	r1, [pc, #384]	; (8006920 <SBGC32_CheckConfirmation+0x2ec>)
 80067a0:	f001 fee0 	bl	8008564 <siprintf>

				generalSBGC->TxDebugFunc(debugStr, strlen(debugStr));
 80067a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	691c      	ldr	r4, [r3, #16]
 80067b0:	f107 0310 	add.w	r3, r7, #16
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7f9 fd43 	bl	8000240 <strlen>
 80067ba:	4603      	mov	r3, r0
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f107 0310 	add.w	r3, r7, #16
 80067c2:	4611      	mov	r1, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	47a0      	blx	r4
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = lastParserStatus;
 80067c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80067d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 80067da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80067e8:	e093      	b.n	8006912 <SBGC32_CheckConfirmation+0x2de>
		}

		else if (lastParserStatus == TX_RX_OK && (cmd.commandID == CMD_ERROR))
 80067ea:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d15c      	bne.n	80068ac <SBGC32_CheckConfirmation+0x278>
 80067f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	2bff      	cmp	r3, #255	; 0xff
 80067fe:	d155      	bne.n	80068ac <SBGC32_CheckConfirmation+0x278>
		{
			confirmationState->errCode = ReadByte(&cmd);
 8006800:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006804:	4618      	mov	r0, r3
 8006806:	f7ff fca4 	bl	8006152 <ReadByte>
 800680a:	4603      	mov	r3, r0
 800680c:	461a      	mov	r2, r3
 800680e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	70da      	strb	r2, [r3, #3]

			if (cmd.payloadSize > 1)
 800681a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800681e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006822:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006826:	2b01      	cmp	r3, #1
 8006828:	d90b      	bls.n	8006842 <SBGC32_CheckConfirmation+0x20e>
				ReadBuff(&cmd, &confirmationState->errData, 4, PM_DEFAULT_8BIT);
 800682a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800682e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	1d19      	adds	r1, r3, #4
 8006836:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800683a:	2300      	movs	r3, #0
 800683c:	2204      	movs	r2, #4
 800683e:	f7ff fbff 	bl	8006040 <ReadBuff>

			#ifdef SBGC_DEBUG_MODE
				/* - - - - - - - - User Error Handler - - - - - - - - */
				sprintf(debugStr, "CMD_ERROR: #%d (%s)\n", confirmationState->errCode, confirmationState->errData);
 8006842:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	78db      	ldrb	r3, [r3, #3]
 800684e:	461a      	mov	r2, r3
 8006850:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3304      	adds	r3, #4
 800685c:	f107 0010 	add.w	r0, r7, #16
 8006860:	4930      	ldr	r1, [pc, #192]	; (8006924 <SBGC32_CheckConfirmation+0x2f0>)
 8006862:	f001 fe7f 	bl	8008564 <siprintf>
				generalSBGC->TxDebugFunc(debugStr, strlen(debugStr));
 8006866:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800686a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691c      	ldr	r4, [r3, #16]
 8006872:	f107 0310 	add.w	r3, r7, #16
 8006876:	4618      	mov	r0, r3
 8006878:	f7f9 fce2 	bl	8000240 <strlen>
 800687c:	4603      	mov	r3, r0
 800687e:	b29a      	uxth	r2, r3
 8006880:	f107 0310 	add.w	r3, r7, #16
 8006884:	4611      	mov	r1, r2
 8006886:	4618      	mov	r0, r3
 8006888:	47a0      	blx	r4
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = lastParserStatus;
 800688a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800688e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 8006898:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 800689c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80068aa:	e032      	b.n	8006912 <SBGC32_CheckConfirmation+0x2de>
		}

		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 80068ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80068bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80068c0:	6812      	ldr	r2, [r2, #0]
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	4610      	mov	r0, r2
 80068c6:	4798      	blx	r3
 80068c8:	4602      	mov	r2, r0
 80068ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068dc:	429a      	cmp	r2, r3
 80068de:	f4ff aecb 	bcc.w	8006678 <SBGC32_CheckConfirmation+0x44>
		{
			#ifdef SBGC_DEBUG_MODE
				/*  - - - - - - User Wait-Error Handler - - - - - - - */
				PrintMessage(generalSBGC, TEXT_SIZE_("CONFIRM_TIMEOUT_ERROR!\n"));
 80068e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ea:	2217      	movs	r2, #23
 80068ec:	490e      	ldr	r1, [pc, #56]	; (8006928 <SBGC32_CheckConfirmation+0x2f4>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f000 f932 	bl	8006b58 <PrintMessage>
				/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
			#endif

			generalSBGC->_ParserCurrentStatus = RX_TIMEOUT_ERROR;
 80068f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2208      	movs	r2, #8
 8006900:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			return generalSBGC->_ParserCurrentStatus;
 8006904:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
		}
	}
}
 8006912:	4618      	mov	r0, r3
 8006914:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006918:	46bd      	mov	sp, r7
 800691a:	bd90      	pop	{r4, r7, pc}
 800691c:	0800c1cc 	.word	0x0800c1cc
 8006920:	0800c1e0 	.word	0x0800c1e0
 8006924:	0800c1f8 	.word	0x0800c1f8
 8006928:	0800c210 	.word	0x0800c210

0800692c <CheckReceipt>:
 *	@param 	*message - debug info string
 *
 *	@return Communication status
 */
TxRxStatus_t CheckReceipt (GeneralSBGC_t *generalSBGC, TxRxStatus_t receiveStatus, char *message)
{
 800692c:	b590      	push	{r4, r7, lr}
 800692e:	b095      	sub	sp, #84	; 0x54
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	460b      	mov	r3, r1
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	72fb      	strb	r3, [r7, #11]
	generalSBGC->_ParserCurrentStatus = receiveStatus;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	7afa      	ldrb	r2, [r7, #11]
 800693e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (generalSBGC->_ParserCurrentStatus != TX_RX_OK)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <CheckReceipt+0x2c>
		generalSBGC->_rxErrorsCount++;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006950:	3301      	adds	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a

	#ifdef SBGC_DEBUG_MODE

		char totalStr [60];
		ui8 pos = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (generalSBGC->_ParserCurrentStatus != TX_RX_OK)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006964:	2b00      	cmp	r3, #0
 8006966:	d044      	beq.n	80069f2 <CheckReceipt+0xc6>
		{
			/* - - - - - - - - User RX Errors Handler - - - - - - - - */
			memcpy(totalStr, TEXT_SIZE_(message));
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7f9 fc69 	bl	8000240 <strlen>
 800696e:	4602      	mov	r2, r0
 8006970:	f107 0310 	add.w	r3, r7, #16
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fe9e 	bl	80076b8 <memcpy>
			pos += strlen(message);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7f9 fc5f 	bl	8000240 <strlen>
 8006982:	4603      	mov	r3, r0
 8006984:	b2da      	uxtb	r2, r3
 8006986:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800698a:	4413      	add	r3, r2
 800698c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive Error: "));
 8006990:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006994:	f107 0210 	add.w	r2, r7, #16
 8006998:	4413      	add	r3, r2
 800699a:	2210      	movs	r2, #16
 800699c:	4938      	ldr	r1, [pc, #224]	; (8006a80 <CheckReceipt+0x154>)
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 fe8a 	bl	80076b8 <memcpy>
			pos += strlen(" Receive Error: ");
 80069a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80069a8:	3310      	adds	r3, #16
 80069aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pos += ConvertErrorToString(generalSBGC->_ParserCurrentStatus, &totalStr[pos]);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
 80069b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80069b8:	f107 0210 	add.w	r2, r7, #16
 80069bc:	4413      	add	r3, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	f000 f97a 	bl	8006cb8 <ConvertErrorToString>
 80069c4:	4603      	mov	r3, r0
 80069c6:	461a      	mov	r2, r3
 80069c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80069cc:	4413      	add	r3, r2
 80069ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 80069d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80069d6:	3350      	adds	r3, #80	; 0x50
 80069d8:	443b      	add	r3, r7
 80069da:	220a      	movs	r2, #10
 80069dc:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 80069e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80069e4:	3301      	adds	r3, #1
 80069e6:	3350      	adds	r3, #80	; 0x50
 80069e8:	443b      	add	r3, r7
 80069ea:	2200      	movs	r2, #0
 80069ec:	f803 2c40 	strb.w	r2, [r3, #-64]
 80069f0:	e031      	b.n	8006a56 <CheckReceipt+0x12a>
		}

		else
		{
			/*  - - - - - - - User RX Success Handler - - - - - - - - */
			memcpy(totalStr, TEXT_SIZE_(message));
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7f9 fc24 	bl	8000240 <strlen>
 80069f8:	4602      	mov	r2, r0
 80069fa:	f107 0310 	add.w	r3, r7, #16
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fe59 	bl	80076b8 <memcpy>
			pos += strlen(message);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7f9 fc1a 	bl	8000240 <strlen>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006a14:	4413      	add	r3, r2
 8006a16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive OK!"));
 8006a1a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006a1e:	f107 0210 	add.w	r2, r7, #16
 8006a22:	4413      	add	r3, r2
 8006a24:	220c      	movs	r2, #12
 8006a26:	4917      	ldr	r1, [pc, #92]	; (8006a84 <CheckReceipt+0x158>)
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 fe45 	bl	80076b8 <memcpy>
			pos += strlen(" Receive OK!");
 8006a2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006a32:	330c      	adds	r3, #12
 8006a34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8006a38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006a3c:	3350      	adds	r3, #80	; 0x50
 8006a3e:	443b      	add	r3, r7
 8006a40:	220a      	movs	r2, #10
 8006a42:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8006a46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	3350      	adds	r3, #80	; 0x50
 8006a4e:	443b      	add	r3, r7
 8006a50:	2200      	movs	r2, #0
 8006a52:	f803 2c40 	strb.w	r2, [r3, #-64]
			/*  - - - - - - - - - - - - - - - - - - - - - - - - - - - */
		}

		generalSBGC->TxDebugFunc(TEXT_SIZE_(totalStr));
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	691c      	ldr	r4, [r3, #16]
 8006a5a:	f107 0310 	add.w	r3, r7, #16
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7f9 fbee 	bl	8000240 <strlen>
 8006a64:	4603      	mov	r3, r0
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	f107 0310 	add.w	r3, r7, #16
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	47a0      	blx	r4

	#endif

	return generalSBGC->_ParserCurrentStatus;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3754      	adds	r7, #84	; 0x54
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd90      	pop	{r4, r7, pc}
 8006a80:	0800c228 	.word	0x0800c228
 8006a84:	0800c23c 	.word	0x0800c23c

08006a88 <Modulo256_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui8 Modulo256_Calculate (ui8 *data, ui16 length)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	807b      	strh	r3, [r7, #2]
    i32 totalSum = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60fb      	str	r3, [r7, #12]

    ui16 count = 0;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	817b      	strh	r3, [r7, #10]
    while (count < length)
 8006a9c:	e00a      	b.n	8006ab4 <Modulo256_Calculate+0x2c>
        totalSum += data[count++];
 8006a9e:	897b      	ldrh	r3, [r7, #10]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	817a      	strh	r2, [r7, #10]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]
    while (count < length)
 8006ab4:	897a      	ldrh	r2, [r7, #10]
 8006ab6:	887b      	ldrh	r3, [r7, #2]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d3f0      	bcc.n	8006a9e <Modulo256_Calculate+0x16>

    return totalSum % 256;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	425a      	negs	r2, r3
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	b2d2      	uxtb	r2, r2
 8006ac4:	bf58      	it	pl
 8006ac6:	4253      	negpl	r3, r2
 8006ac8:	b2db      	uxtb	r3, r3
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui16 CRC16_Calculate (ui8 *data, ui16 length)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b087      	sub	sp, #28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	807b      	strh	r3, [r7, #2]
    ui16 CRC_Register = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	82fb      	strh	r3, [r7, #22]
    ui16 polynom = 0x8005;
 8006ae6:	f248 0305 	movw	r3, #32773	; 0x8005
 8006aea:	823b      	strh	r3, [r7, #16]
    ui8  shiftRegister,
    	 dataBit,
		 CRC_Bit;

    for (ui16 i = 0; i < length; i++)
 8006aec:	2300      	movs	r3, #0
 8006aee:	827b      	strh	r3, [r7, #18]
 8006af0:	e027      	b.n	8006b42 <CRC16_Calculate+0x6c>
    {
        for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006af2:	2301      	movs	r3, #1
 8006af4:	757b      	strb	r3, [r7, #21]
 8006af6:	e01e      	b.n	8006b36 <CRC16_Calculate+0x60>
        {
        	dataBit = (data[i] & shiftRegister) ? 1 : 0;
 8006af8:	8a7b      	ldrh	r3, [r7, #18]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	4413      	add	r3, r2
 8006afe:	781a      	ldrb	r2, [r3, #0]
 8006b00:	7d7b      	ldrb	r3, [r7, #21]
 8006b02:	4013      	ands	r3, r2
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bf14      	ite	ne
 8006b0a:	2301      	movne	r3, #1
 8006b0c:	2300      	moveq	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	73fb      	strb	r3, [r7, #15]
            CRC_Bit = CRC_Register >> 15;
 8006b12:	8afb      	ldrh	r3, [r7, #22]
 8006b14:	0bdb      	lsrs	r3, r3, #15
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	73bb      	strb	r3, [r7, #14]
            CRC_Register <<= 1;
 8006b1a:	8afb      	ldrh	r3, [r7, #22]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	82fb      	strh	r3, [r7, #22]

            if (dataBit != CRC_Bit)
 8006b20:	7bfa      	ldrb	r2, [r7, #15]
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d003      	beq.n	8006b30 <CRC16_Calculate+0x5a>
            	CRC_Register ^= polynom;
 8006b28:	8afa      	ldrh	r2, [r7, #22]
 8006b2a:	8a3b      	ldrh	r3, [r7, #16]
 8006b2c:	4053      	eors	r3, r2
 8006b2e:	82fb      	strh	r3, [r7, #22]
        for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006b30:	7d7b      	ldrb	r3, [r7, #21]
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	757b      	strb	r3, [r7, #21]
 8006b36:	7d7b      	ldrb	r3, [r7, #21]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1dd      	bne.n	8006af8 <CRC16_Calculate+0x22>
    for (ui16 i = 0; i < length; i++)
 8006b3c:	8a7b      	ldrh	r3, [r7, #18]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	827b      	strh	r3, [r7, #18]
 8006b42:	8a7a      	ldrh	r2, [r7, #18]
 8006b44:	887b      	ldrh	r3, [r7, #2]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d3d3      	bcc.n	8006af2 <CRC16_Calculate+0x1c>
        }
    }

    return CRC_Register;
 8006b4a:	8afb      	ldrh	r3, [r7, #22]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <PrintMessage>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	*data - printable data
 *	@param	length - printable data size
 */
void PrintMessage (GeneralSBGC_t *generalSBGC, char *data, ui16 length)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
	generalSBGC->TxDebugFunc(data, length);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	88fa      	ldrh	r2, [r7, #6]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	68b8      	ldr	r0, [r7, #8]
 8006b70:	4798      	blx	r3
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <PrintStructElement>:
 *	@param	*data - printable variable
 *	@param	*str - debug info string
 *	@param	vType - type of variable
 */
void PrintStructElement (GeneralSBGC_t *generalSBGC, void *data, const char *str, VarTypes_t vType)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b09a      	sub	sp, #104	; 0x68
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	70fb      	strb	r3, [r7, #3]
	char debugStr [50];

	switch (vType)
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	2b06      	cmp	r3, #6
 8006b90:	d86b      	bhi.n	8006c6a <PrintStructElement+0xee>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <PrintStructElement+0x1c>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bb5 	.word	0x08006bb5
 8006b9c:	08006bff 	.word	0x08006bff
 8006ba0:	08006bcf 	.word	0x08006bcf
 8006ba4:	08006c19 	.word	0x08006c19
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006c33 	.word	0x08006c33
 8006bb0:	08006c49 	.word	0x08006c49
	{
		case _UNSIGNED_CHAR_ :
		{
			ui8 dataTemp = *(ui8*)data;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			sprintf(debugStr, "%s %u\n", str, dataTemp);
 8006bbc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8006bc0:	f107 0014 	add.w	r0, r7, #20
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4937      	ldr	r1, [pc, #220]	; (8006ca4 <PrintStructElement+0x128>)
 8006bc8:	f001 fccc 	bl	8008564 <siprintf>

			break;
 8006bcc:	e058      	b.n	8006c80 <PrintStructElement+0x104>
		}

		case _UNSIGNED_SHORT_ :
		{
			ui16 dataTemp = *(ui16*)data;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			sprintf(debugStr, "%s %u\n", str, dataTemp);
 8006bd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006bda:	f107 0014 	add.w	r0, r7, #20
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	4930      	ldr	r1, [pc, #192]	; (8006ca4 <PrintStructElement+0x128>)
 8006be2:	f001 fcbf 	bl	8008564 <siprintf>

			break;
 8006be6:	e04b      	b.n	8006c80 <PrintStructElement+0x104>
		}

		case _UNSIGNED_INT_ :
		{
			ui32 dataTemp = *(ui32*)data;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	657b      	str	r3, [r7, #84]	; 0x54

			#ifdef _L32__
				sprintf(debugStr, "%s %u\n", str, dataTemp);
			#else
				sprintf(debugStr, "%s %lu\n", str, dataTemp);
 8006bee:	f107 0014 	add.w	r0, r7, #20
 8006bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	492c      	ldr	r1, [pc, #176]	; (8006ca8 <PrintStructElement+0x12c>)
 8006bf8:	f001 fcb4 	bl	8008564 <siprintf>
			#endif

			break;
 8006bfc:	e040      	b.n	8006c80 <PrintStructElement+0x104>
		}

		case _SIGNED_CHAR_ :
		{
			i8 dataTemp = *(i8*)data;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			sprintf(debugStr, "%s %i\n", str, dataTemp);
 8006c06:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006c0a:	f107 0014 	add.w	r0, r7, #20
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4926      	ldr	r1, [pc, #152]	; (8006cac <PrintStructElement+0x130>)
 8006c12:	f001 fca7 	bl	8008564 <siprintf>

			break;
 8006c16:	e033      	b.n	8006c80 <PrintStructElement+0x104>
		}

		case _SIGNED_SHORT_ :
		{
			i16 dataTemp = *(i16*)data;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
			sprintf(debugStr, "%s %i\n", str, dataTemp);
 8006c20:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006c24:	f107 0014 	add.w	r0, r7, #20
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4920      	ldr	r1, [pc, #128]	; (8006cac <PrintStructElement+0x130>)
 8006c2c:	f001 fc9a 	bl	8008564 <siprintf>

			break;
 8006c30:	e026      	b.n	8006c80 <PrintStructElement+0x104>
		}

		case _SIGNED_INT_ :
		{
			i32 dataTemp = *(i32*)data;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	65bb      	str	r3, [r7, #88]	; 0x58

			#ifdef _L32__
				sprintf(debugStr, "%s %i\n", str, dataTemp);
			#else
				sprintf(debugStr, "%s %li\n", str, dataTemp);
 8006c38:	f107 0014 	add.w	r0, r7, #20
 8006c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	491b      	ldr	r1, [pc, #108]	; (8006cb0 <PrintStructElement+0x134>)
 8006c42:	f001 fc8f 	bl	8008564 <siprintf>
			#endif

			break;
 8006c46:	e01b      	b.n	8006c80 <PrintStructElement+0x104>
		}

		case _FLOAT_ :
		{
			float dataTemp = *(float*)data;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
			sprintf(debugStr, "%s %.3f\n", str, dataTemp);  // .3f is default. May be changed
 8006c4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006c52:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006c56:	f107 0314 	add.w	r3, r7, #20
 8006c5a:	ed8d 7b00 	vstr	d7, [sp]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4914      	ldr	r1, [pc, #80]	; (8006cb4 <PrintStructElement+0x138>)
 8006c62:	4618      	mov	r0, r3
 8006c64:	f001 fc7e 	bl	8008564 <siprintf>

			break;
 8006c68:	e00a      	b.n	8006c80 <PrintStructElement+0x104>
		}

		default :
		{
			i32 dataTemp = *(i32*)data;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	64bb      	str	r3, [r7, #72]	; 0x48

			#ifdef _L32__
				sprintf(debugStr, "%s %i\n", str, dataTemp);
			#else
				sprintf(debugStr, "%s %li\n", str, dataTemp);
 8006c70:	f107 0014 	add.w	r0, r7, #20
 8006c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	490d      	ldr	r1, [pc, #52]	; (8006cb0 <PrintStructElement+0x134>)
 8006c7a:	f001 fc73 	bl	8008564 <siprintf>
			#endif

			break;
 8006c7e:	bf00      	nop
		}
	}

	PrintMessage(generalSBGC, TEXT_SIZE_(debugStr));
 8006c80:	f107 0314 	add.w	r3, r7, #20
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7f9 fadb 	bl	8000240 <strlen>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	f107 0314 	add.w	r3, r7, #20
 8006c92:	4619      	mov	r1, r3
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f7ff ff5f 	bl	8006b58 <PrintMessage>
}
 8006c9a:	bf00      	nop
 8006c9c:	3760      	adds	r7, #96	; 0x60
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	0800c24c 	.word	0x0800c24c
 8006ca8:	0800c254 	.word	0x0800c254
 8006cac:	0800c25c 	.word	0x0800c25c
 8006cb0:	0800c264 	.word	0x0800c264
 8006cb4:	0800c26c 	.word	0x0800c26c

08006cb8 <ConvertErrorToString>:
 *	@param	*str - writable buffer
 *
 *	@return	Length of a writable string
 */
ui8 ConvertErrorToString (TxRxStatus_t txRxStatus, char *str)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	6039      	str	r1, [r7, #0]
 8006cc2:	71fb      	strb	r3, [r7, #7]
	switch (txRxStatus)
 8006cc4:	79fb      	ldrb	r3, [r7, #7]
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d85c      	bhi.n	8006d84 <ConvertErrorToString+0xcc>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <ConvertErrorToString+0x18>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006cf9 	.word	0x08006cf9
 8006cd4:	08006d07 	.word	0x08006d07
 8006cd8:	08006d15 	.word	0x08006d15
 8006cdc:	08006d23 	.word	0x08006d23
 8006ce0:	08006d31 	.word	0x08006d31
 8006ce4:	08006d3f 	.word	0x08006d3f
 8006ce8:	08006d4d 	.word	0x08006d4d
 8006cec:	08006d5b 	.word	0x08006d5b
 8006cf0:	08006d69 	.word	0x08006d69
 8006cf4:	08006d77 	.word	0x08006d77
	{
		case TX_RX_OK :
			memcpy(str, TEXT_SIZE_(nameof(TX_RX_OK)));
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	4925      	ldr	r1, [pc, #148]	; (8006d90 <ConvertErrorToString+0xd8>)
 8006cfc:	6838      	ldr	r0, [r7, #0]
 8006cfe:	f000 fcdb 	bl	80076b8 <memcpy>
			return strlen(nameof(TX_RX_OK));
 8006d02:	2308      	movs	r3, #8
 8006d04:	e03f      	b.n	8006d86 <ConvertErrorToString+0xce>

					case TX_BUFFER_OVERFLOW_ERROR :
						memcpy(str, TEXT_SIZE_(nameof(TX_BUFFER_OVERFLOW_ERROR)));
 8006d06:	2218      	movs	r2, #24
 8006d08:	4922      	ldr	r1, [pc, #136]	; (8006d94 <ConvertErrorToString+0xdc>)
 8006d0a:	6838      	ldr	r0, [r7, #0]
 8006d0c:	f000 fcd4 	bl	80076b8 <memcpy>
						return strlen(nameof(TX_BUFFER_OVERFLOW_ERROR));
 8006d10:	2318      	movs	r3, #24
 8006d12:	e038      	b.n	8006d86 <ConvertErrorToString+0xce>

		case RX_START_PARSE :
			memcpy(str, TEXT_SIZE_(nameof(RX_START_PARSE)));
 8006d14:	220e      	movs	r2, #14
 8006d16:	4920      	ldr	r1, [pc, #128]	; (8006d98 <ConvertErrorToString+0xe0>)
 8006d18:	6838      	ldr	r0, [r7, #0]
 8006d1a:	f000 fccd 	bl	80076b8 <memcpy>
			return strlen(nameof(RX_START_PARSE));
 8006d1e:	230e      	movs	r3, #14
 8006d20:	e031      	b.n	8006d86 <ConvertErrorToString+0xce>

					case RX_EMPTY_BUFF_ERROR :
						memcpy(str, TEXT_SIZE_(nameof(RX_EMPTY_BUFF_ERROR)));
 8006d22:	2213      	movs	r2, #19
 8006d24:	491d      	ldr	r1, [pc, #116]	; (8006d9c <ConvertErrorToString+0xe4>)
 8006d26:	6838      	ldr	r0, [r7, #0]
 8006d28:	f000 fcc6 	bl	80076b8 <memcpy>
						return strlen(nameof(RX_EMPTY_BUFF_ERROR));
 8006d2c:	2313      	movs	r3, #19
 8006d2e:	e02a      	b.n	8006d86 <ConvertErrorToString+0xce>

		case RX_BUFFER_REALTIME_ERROR :
			memcpy(str, TEXT_SIZE_(nameof(RX_BUFFER_REALTIME_ERROR)));
 8006d30:	2218      	movs	r2, #24
 8006d32:	491b      	ldr	r1, [pc, #108]	; (8006da0 <ConvertErrorToString+0xe8>)
 8006d34:	6838      	ldr	r0, [r7, #0]
 8006d36:	f000 fcbf 	bl	80076b8 <memcpy>
			return strlen(nameof(RX_BUFFER_REALTIME_ERROR));
 8006d3a:	2318      	movs	r3, #24
 8006d3c:	e023      	b.n	8006d86 <ConvertErrorToString+0xce>

					case RX_HEADER_CHECKSUM_ERROR :
						memcpy(str, TEXT_SIZE_(nameof(RX_HEADER_CHECKSUM_ERROR)));
 8006d3e:	2218      	movs	r2, #24
 8006d40:	4918      	ldr	r1, [pc, #96]	; (8006da4 <ConvertErrorToString+0xec>)
 8006d42:	6838      	ldr	r0, [r7, #0]
 8006d44:	f000 fcb8 	bl	80076b8 <memcpy>
						return strlen(nameof(RX_HEADER_CHECKSUM_ERROR));
 8006d48:	2318      	movs	r3, #24
 8006d4a:	e01c      	b.n	8006d86 <ConvertErrorToString+0xce>

		case RX_PAYLOAD_CHECKSUM_ERROR :
			memcpy(str, TEXT_SIZE_(nameof(RX_PAYLOAD_CHECKSUM_ERROR)));
 8006d4c:	2219      	movs	r2, #25
 8006d4e:	4916      	ldr	r1, [pc, #88]	; (8006da8 <ConvertErrorToString+0xf0>)
 8006d50:	6838      	ldr	r0, [r7, #0]
 8006d52:	f000 fcb1 	bl	80076b8 <memcpy>
			return strlen(nameof(RX_PAYLOAD_CHECKSUM_ERROR));
 8006d56:	2319      	movs	r3, #25
 8006d58:	e015      	b.n	8006d86 <ConvertErrorToString+0xce>

					case RX_BUFFER_OVERFLOW_ERROR :
						memcpy(str, TEXT_SIZE_(nameof(RX_BUFFER_OVERFLOW_ERROR)));
 8006d5a:	2218      	movs	r2, #24
 8006d5c:	4913      	ldr	r1, [pc, #76]	; (8006dac <ConvertErrorToString+0xf4>)
 8006d5e:	6838      	ldr	r0, [r7, #0]
 8006d60:	f000 fcaa 	bl	80076b8 <memcpy>
						return strlen(nameof(RX_BUFFER_OVERFLOW_ERROR));
 8006d64:	2318      	movs	r3, #24
 8006d66:	e00e      	b.n	8006d86 <ConvertErrorToString+0xce>

		case RX_TIMEOUT_ERROR :
			memcpy(str, TEXT_SIZE_(nameof(RX_TIMEOUT_ERROR)));
 8006d68:	2210      	movs	r2, #16
 8006d6a:	4911      	ldr	r1, [pc, #68]	; (8006db0 <ConvertErrorToString+0xf8>)
 8006d6c:	6838      	ldr	r0, [r7, #0]
 8006d6e:	f000 fca3 	bl	80076b8 <memcpy>
			return strlen(nameof(RX_TIMEOUT_ERROR));
 8006d72:	2310      	movs	r3, #16
 8006d74:	e007      	b.n	8006d86 <ConvertErrorToString+0xce>

					case NOT_SUPPORTED_BY_FIRMWARE :
						memcpy(str, TEXT_SIZE_(nameof(NOT_SUPPORTED_BY_FIRMWARE)));
 8006d76:	2219      	movs	r2, #25
 8006d78:	490e      	ldr	r1, [pc, #56]	; (8006db4 <ConvertErrorToString+0xfc>)
 8006d7a:	6838      	ldr	r0, [r7, #0]
 8006d7c:	f000 fc9c 	bl	80076b8 <memcpy>
						return strlen(nameof(NOT_SUPPORTED_BY_FIRMWARE));
 8006d80:	2319      	movs	r3, #25
 8006d82:	e000      	b.n	8006d86 <ConvertErrorToString+0xce>
	}

	return 0;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	0800c278 	.word	0x0800c278
 8006d94:	0800c284 	.word	0x0800c284
 8006d98:	0800c2a0 	.word	0x0800c2a0
 8006d9c:	0800c2b0 	.word	0x0800c2b0
 8006da0:	0800c2c4 	.word	0x0800c2c4
 8006da4:	0800c2e0 	.word	0x0800c2e0
 8006da8:	0800c2fc 	.word	0x0800c2fc
 8006dac:	0800c318 	.word	0x0800c318
 8006db0:	0800c334 	.word	0x0800c334
 8006db4:	0800c348 	.word	0x0800c348

08006db8 <SBGC32_Control>:
 * 	@param 	*control - structure containing gimbal control data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_Control (GeneralSBGC_t *generalSBGC, const Control_t *control)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b0c4      	sub	sp, #272	; 0x110
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dc6:	6018      	str	r0, [r3, #0]
 8006dc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006dd0:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL);
 8006dd2:	f107 030c 	add.w	r3, r7, #12
 8006dd6:	2143      	movs	r1, #67	; 0x43
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fa85 	bl	80062e8 <InitCmdWrite>
	WriteBuff(&cmd, control, sizeof(Control_t), PM_CONTROL);
 8006dde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006de2:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8006de6:	f107 000c 	add.w	r0, r7, #12
 8006dea:	2303      	movs	r3, #3
 8006dec:	220f      	movs	r2, #15
 8006dee:	6809      	ldr	r1, [r1, #0]
 8006df0:	f7ff f8f7 	bl	8005fe2 <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8006df4:	f107 020c 	add.w	r2, r7, #12
 8006df8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dfc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e00:	4611      	mov	r1, r2
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	f7fe fe0a 	bl	8005a1c <SBGC32_TX>
	/** When setting the ControlConfig_t.flags, may send confirmation */
	return generalSBGC->_ParserCurrentStatus;
 8006e08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <SBGC32_ControlConfig>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ControlConfig (GeneralSBGC_t *generalSBGC, const ControlConfig_t *controlConfig, ConfirmationState_t *confirmationState)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b0c6      	sub	sp, #280	; 0x118
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e2e:	6018      	str	r0, [r3, #0]
 8006e30:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e38:	6019      	str	r1, [r3, #0]
 8006e3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e42:	601a      	str	r2, [r3, #0]
	if (generalSBGC->_firmwareVersion < 2610)
 8006e44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006e50:	f640 2231 	movw	r2, #2609	; 0xa31
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d801      	bhi.n	8006e5c <SBGC32_ControlConfig+0x3c>
		return NOT_SUPPORTED_BY_FIRMWARE;
 8006e58:	2309      	movs	r3, #9
 8006e5a:	e032      	b.n	8006ec2 <SBGC32_ControlConfig+0xa2>

	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL_CONFIG);
 8006e5c:	f107 0314 	add.w	r3, r7, #20
 8006e60:	215a      	movs	r1, #90	; 0x5a
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff fa40 	bl	80062e8 <InitCmdWrite>
	WriteBuff(&cmd, controlConfig, sizeof(ControlConfig_t), PM_CONTROL_CONFIG);
 8006e68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e6c:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8006e70:	f107 0014 	add.w	r0, r7, #20
 8006e74:	2304      	movs	r3, #4
 8006e76:	2229      	movs	r2, #41	; 0x29
 8006e78:	6809      	ldr	r1, [r1, #0]
 8006e7a:	f7ff f8b2 	bl	8005fe2 <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8006e7e:	f107 0214 	add.w	r2, r7, #20
 8006e82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	f7fe fdc5 	bl	8005a1c <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 8006e92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ea0:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8006ea4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ea8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006eac:	6809      	ldr	r1, [r1, #0]
 8006eae:	6818      	ldr	r0, [r3, #0]
 8006eb0:	f7ff fbc0 	bl	8006634 <SBGC32_CheckConfirmation>
	return generalSBGC->_ParserCurrentStatus;
 8006eb4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006eb8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <SBGC32_ReadParams3>:
 *	@param 	profileN - profile slot
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadParams3 (GeneralSBGC_t *generalSBGC, MainParams3_t *mainParams3, Profile_t profileN)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b0c6      	sub	sp, #280	; 0x118
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006eda:	6018      	str	r0, [r3, #0]
 8006edc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006ee0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ee4:	6019      	str	r1, [r3, #0]
 8006ee6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006eea:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006eee:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_READ_PARAMS_3);
 8006ef0:	f107 0314 	add.w	r3, r7, #20
 8006ef4:	2115      	movs	r1, #21
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff f9f6 	bl	80062e8 <InitCmdWrite>
	WriteByte(&cmd, profileN);
 8006efc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006f00:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	f107 0314 	add.w	r3, r7, #20
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff f907 	bl	8006120 <WriteByte>

	if(CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_READ_PARAMS_3), "Main Parameters 3:") == TX_RX_OK)
 8006f12:	f107 0114 	add.w	r1, r7, #20
 8006f16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006f1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f1e:	2215      	movs	r2, #21
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f7fe fff0 	bl	8005f06 <SBGC32_TX_RX>
 8006f26:	4603      	mov	r3, r0
 8006f28:	4619      	mov	r1, r3
 8006f2a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006f2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f32:	4a0f      	ldr	r2, [pc, #60]	; (8006f70 <SBGC32_ReadParams3+0xa4>)
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	f7ff fcf9 	bl	800692c <CheckReceipt>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <SBGC32_ReadParams3+0x8a>
		ReadBuff(&cmd, mainParams3, sizeof(MainParams3_t), PM_MAIN_PARAMS_3);
 8006f40:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006f44:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8006f48:	f107 0014 	add.w	r0, r7, #20
 8006f4c:	2305      	movs	r3, #5
 8006f4e:	2286      	movs	r2, #134	; 0x86
 8006f50:	6809      	ldr	r1, [r1, #0]
 8006f52:	f7ff f875 	bl	8006040 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 8006f56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006f5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	0800c374 	.word	0x0800c374

08006f74 <SBGC32_ReadParamsExt>:
 *	@param 	profileN - profile slot
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadParamsExt (GeneralSBGC_t *generalSBGC, MainParamsExt_t *mainParamsExt, Profile_t profileN)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b0c6      	sub	sp, #280	; 0x118
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006f7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f82:	6018      	str	r0, [r3, #0]
 8006f84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006f88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006f8c:	6019      	str	r1, [r3, #0]
 8006f8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006f92:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006f96:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_READ_PARAMS_EXT);
 8006f98:	f107 0314 	add.w	r3, r7, #20
 8006f9c:	2121      	movs	r1, #33	; 0x21
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff f9a2 	bl	80062e8 <InitCmdWrite>
	WriteByte(&cmd, profileN);
 8006fa4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fa8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8006fac:	781a      	ldrb	r2, [r3, #0]
 8006fae:	f107 0314 	add.w	r3, r7, #20
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7ff f8b3 	bl	8006120 <WriteByte>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_READ_PARAMS_EXT), "Main Parameters Ext:") == TX_RX_OK)
 8006fba:	f107 0114 	add.w	r1, r7, #20
 8006fbe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fc6:	2221      	movs	r2, #33	; 0x21
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f7fe ff9c 	bl	8005f06 <SBGC32_TX_RX>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fda:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <SBGC32_ReadParamsExt+0xa4>)
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	f7ff fca5 	bl	800692c <CheckReceipt>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <SBGC32_ReadParamsExt+0x8a>
		ReadBuff(&cmd, mainParamsExt, sizeof(MainParamsExt_t), PM_MAIN_PARAMS_EXT);
 8006fe8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fec:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8006ff0:	f107 0014 	add.w	r0, r7, #20
 8006ff4:	2306      	movs	r3, #6
 8006ff6:	2268      	movs	r2, #104	; 0x68
 8006ff8:	6809      	ldr	r1, [r1, #0]
 8006ffa:	f7ff f821 	bl	8006040 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 8006ffe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007002:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 800700c:	4618      	mov	r0, r3
 800700e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	0800c388 	.word	0x0800c388

0800701c <SBGC32_ReadParamsExt2>:
 *	@param 	profileN - profile slot
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadParamsExt2 (GeneralSBGC_t *generalSBGC, MainParamsExt2_t *mainParamsExt2, Profile_t profileN)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b0c6      	sub	sp, #280	; 0x118
 8007020:	af00      	add	r7, sp, #0
 8007022:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007026:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800702a:	6018      	str	r0, [r3, #0]
 800702c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007030:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800703a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800703e:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_READ_PARAMS_EXT2);
 8007040:	f107 0314 	add.w	r3, r7, #20
 8007044:	213e      	movs	r1, #62	; 0x3e
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff f94e 	bl	80062e8 <InitCmdWrite>
	WriteByte(&cmd, profileN);
 800704c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007050:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	f107 0314 	add.w	r3, r7, #20
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff f85f 	bl	8006120 <WriteByte>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_READ_PARAMS_EXT2), "Main Parameters Ext 2:") == TX_RX_OK)
 8007062:	f107 0114 	add.w	r1, r7, #20
 8007066:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800706a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800706e:	223e      	movs	r2, #62	; 0x3e
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	f7fe ff48 	bl	8005f06 <SBGC32_TX_RX>
 8007076:	4603      	mov	r3, r0
 8007078:	4619      	mov	r1, r3
 800707a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800707e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007082:	4a0f      	ldr	r2, [pc, #60]	; (80070c0 <SBGC32_ReadParamsExt2+0xa4>)
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f7ff fc51 	bl	800692c <CheckReceipt>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <SBGC32_ReadParamsExt2+0x8a>
		ReadBuff(&cmd, mainParamsExt2, sizeof(MainParamsExt2_t), PM_MAIN_PARAMS_EXT_2);
 8007090:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007094:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007098:	f107 0014 	add.w	r0, r7, #20
 800709c:	2307      	movs	r3, #7
 800709e:	2297      	movs	r2, #151	; 0x97
 80070a0:	6809      	ldr	r1, [r1, #0]
 80070a2:	f7fe ffcd 	bl	8006040 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 80070a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80070aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	0800c3a0 	.word	0x0800c3a0

080070c4 <SBGC32_ReadParamsExt3>:
 *	@param 	profileN - profile slot
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadParamsExt3 (GeneralSBGC_t *generalSBGC, MainParamsExt3_t *mainParamsExt3, Profile_t profileN)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b0c6      	sub	sp, #280	; 0x118
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80070ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070d2:	6018      	str	r0, [r3, #0]
 80070d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80070d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80070dc:	6019      	str	r1, [r3, #0]
 80070de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80070e2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80070e6:	701a      	strb	r2, [r3, #0]
	if (generalSBGC->_firmwareVersion < 2660)
 80070e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80070ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80070f4:	f640 2263 	movw	r2, #2659	; 0xa63
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d801      	bhi.n	8007100 <SBGC32_ReadParamsExt3+0x3c>
		return NOT_SUPPORTED_BY_FIRMWARE;
 80070fc:	2309      	movs	r3, #9
 80070fe:	e039      	b.n	8007174 <SBGC32_ReadParamsExt3+0xb0>

	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_READ_PARAMS_EXT3);
 8007100:	f107 0314 	add.w	r3, r7, #20
 8007104:	2168      	movs	r1, #104	; 0x68
 8007106:	4618      	mov	r0, r3
 8007108:	f7ff f8ee 	bl	80062e8 <InitCmdWrite>
	WriteByte(&cmd, profileN);
 800710c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007110:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	f107 0314 	add.w	r3, r7, #20
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe ffff 	bl	8006120 <WriteByte>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_READ_PARAMS_EXT3), "Main Parameters Ext 3:") == TX_RX_OK)
 8007122:	f107 0114 	add.w	r1, r7, #20
 8007126:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800712a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800712e:	2268      	movs	r2, #104	; 0x68
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	f7fe fee8 	bl	8005f06 <SBGC32_TX_RX>
 8007136:	4603      	mov	r3, r0
 8007138:	4619      	mov	r1, r3
 800713a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800713e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007142:	4a0f      	ldr	r2, [pc, #60]	; (8007180 <SBGC32_ReadParamsExt3+0xbc>)
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	f7ff fbf1 	bl	800692c <CheckReceipt>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10a      	bne.n	8007166 <SBGC32_ReadParamsExt3+0xa2>
		ReadBuff(&cmd, mainParamsExt3, sizeof(MainParamsExt3_t), PM_MAIN_PARAMS_EXT_3);
 8007150:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007154:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007158:	f107 0014 	add.w	r0, r7, #20
 800715c:	2308      	movs	r3, #8
 800715e:	22dd      	movs	r2, #221	; 0xdd
 8007160:	6809      	ldr	r1, [r1, #0]
 8007162:	f7fe ff6d 	bl	8006040 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 8007166:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800716a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8007174:	4618      	mov	r0, r3
 8007176:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	0800c3b8 	.word	0x0800c3b8

08007184 <SBGC32_RequestDataStream>:
 *	@param	*confirmationState - confirmation structure
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_RequestDataStream (GeneralSBGC_t *generalSBGC, DataStreamInterval_t *dataStreamInterval, ConfirmationState_t *confirmationState)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b0c6      	sub	sp, #280	; 0x118
 8007188:	af00      	add	r7, sp, #0
 800718a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800718e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007192:	6018      	str	r0, [r3, #0]
 8007194:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007198:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800719c:	6019      	str	r1, [r3, #0]
 800719e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80071a6:	601a      	str	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_DATA_STREAM_INTERVAL);
 80071a8:	f107 0314 	add.w	r3, r7, #20
 80071ac:	2155      	movs	r1, #85	; 0x55
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff f89a 	bl	80062e8 <InitCmdWrite>
	WriteBuff(&cmd, dataStreamInterval, sizeof(DataStreamInterval_t), PM_DATA_STREAM_INTERVAL);
 80071b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071b8:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80071bc:	f107 0014 	add.w	r0, r7, #20
 80071c0:	2309      	movs	r3, #9
 80071c2:	2215      	movs	r2, #21
 80071c4:	6809      	ldr	r1, [r1, #0]
 80071c6:	f7fe ff0c 	bl	8005fe2 <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 80071ca:	f107 0214 	add.w	r2, r7, #20
 80071ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071d6:	4611      	mov	r1, r2
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	f7fe fc1f 	bl	8005a1c <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, confirmationState, cmd.commandID);
 80071de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e6:	781a      	ldrb	r2, [r3, #0]
 80071e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071ec:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 80071f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071f8:	6809      	ldr	r1, [r1, #0]
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	f7ff fa1a 	bl	8006634 <SBGC32_CheckConfirmation>
	return generalSBGC->_ParserCurrentStatus;
 8007200:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007204:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 800720e:	4618      	mov	r0, r3
 8007210:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <SBGC32_ParseDataStream>:
 *			parameter, for which a response is expected
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ParseDataStream (GeneralSBGC_t *generalSBGC, void *dataStreamStruct, SBGC_Commands_t cmdID)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b0c6      	sub	sp, #280	; 0x118
 800721c:	af00      	add	r7, sp, #0
 800721e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007222:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007226:	6018      	str	r0, [r3, #0]
 8007228:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800722c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007230:	6019      	str	r1, [r3, #0]
 8007232:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007236:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800723a:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	if (CheckReceipt(generalSBGC, SBGC32_RX(generalSBGC, &cmd, generalSBGC->rxTimeout), "Data Stream:") == TX_RX_OK)
 800723c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007240:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a1a      	ldr	r2, [r3, #32]
 8007248:	f107 0110 	add.w	r1, r7, #16
 800724c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007250:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	f7fe fd01 	bl	8005c5c <SBGC32_RX>
 800725a:	4603      	mov	r3, r0
 800725c:	4619      	mov	r1, r3
 800725e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007262:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007266:	4a49      	ldr	r2, [pc, #292]	; (800738c <SBGC32_ParseDataStream+0x174>)
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f7ff fb5f 	bl	800692c <CheckReceipt>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d17c      	bne.n	800736e <SBGC32_ParseDataStream+0x156>
	{
		switch (cmdID)
 8007274:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007278:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b66      	cmp	r3, #102	; 0x66
 8007280:	d05a      	beq.n	8007338 <SBGC32_ParseDataStream+0x120>
 8007282:	2b66      	cmp	r3, #102	; 0x66
 8007284:	dc75      	bgt.n	8007372 <SBGC32_ParseDataStream+0x15a>
 8007286:	2b58      	cmp	r3, #88	; 0x58
 8007288:	d022      	beq.n	80072d0 <SBGC32_ParseDataStream+0xb8>
 800728a:	2b58      	cmp	r3, #88	; 0x58
 800728c:	dc71      	bgt.n	8007372 <SBGC32_ParseDataStream+0x15a>
 800728e:	2b38      	cmp	r3, #56	; 0x38
 8007290:	d02f      	beq.n	80072f2 <SBGC32_ParseDataStream+0xda>
 8007292:	2b38      	cmp	r3, #56	; 0x38
 8007294:	dc6d      	bgt.n	8007372 <SBGC32_ParseDataStream+0x15a>
 8007296:	2b17      	cmp	r3, #23
 8007298:	d002      	beq.n	80072a0 <SBGC32_ParseDataStream+0x88>
 800729a:	2b19      	cmp	r3, #25
 800729c:	d00c      	beq.n	80072b8 <SBGC32_ParseDataStream+0xa0>
				ReadBuff(&cmd, dataStreamStruct, SIZEOF_EVENT, PM_DEFAULT_8BIT);
				break;
			}

						default :
							break;
 800729e:	e068      	b.n	8007372 <SBGC32_ParseDataStream+0x15a>
				ReadBuff(&cmd, dataStreamStruct, SIZEOF_REALTIME_DATA_3, PM_REALTIME_DATA_3);
 80072a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80072a4:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80072a8:	f107 0010 	add.w	r0, r7, #16
 80072ac:	230a      	movs	r3, #10
 80072ae:	223f      	movs	r2, #63	; 0x3f
 80072b0:	6809      	ldr	r1, [r1, #0]
 80072b2:	f7fe fec5 	bl	8006040 <ReadBuff>
				break;
 80072b6:	e05d      	b.n	8007374 <SBGC32_ParseDataStream+0x15c>
							ReadBuff(&cmd, dataStreamStruct, sizeof(RealTimeData_t), PM_REALTIME_DATA_4);
 80072b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80072bc:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80072c0:	f107 0010 	add.w	r0, r7, #16
 80072c4:	230b      	movs	r3, #11
 80072c6:	227c      	movs	r2, #124	; 0x7c
 80072c8:	6809      	ldr	r1, [r1, #0]
 80072ca:	f7fe feb9 	bl	8006040 <ReadBuff>
							break;
 80072ce:	e051      	b.n	8007374 <SBGC32_ParseDataStream+0x15c>
				ReadBuff(&cmd, dataStreamStruct, cmd.payloadSize, PM_DEFAULT_8BIT);
 80072d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80072d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072d8:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 80072dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80072e0:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80072e4:	f107 0010 	add.w	r0, r7, #16
 80072e8:	2300      	movs	r3, #0
 80072ea:	6809      	ldr	r1, [r1, #0]
 80072ec:	f7fe fea8 	bl	8006040 <ReadBuff>
				break;
 80072f0:	e040      	b.n	8007374 <SBGC32_ParseDataStream+0x15c>
							ReadBuff(&cmd, dataStreamStruct, cmd.payloadSize, PM_DEFAULT_8BIT);
 80072f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80072f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072fa:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 80072fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007302:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007306:	f107 0010 	add.w	r0, r7, #16
 800730a:	2300      	movs	r3, #0
 800730c:	6809      	ldr	r1, [r1, #0]
 800730e:	f7fe fe97 	bl	8006040 <ReadBuff>
							FOR_(i, 6) ReadLong(&cmd);
 8007312:	2300      	movs	r3, #0
 8007314:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007318:	e009      	b.n	800732e <SBGC32_ParseDataStream+0x116>
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe ff90 	bl	8006244 <ReadLong>
 8007324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007328:	3301      	adds	r3, #1
 800732a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800732e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007332:	2b05      	cmp	r3, #5
 8007334:	ddf1      	ble.n	800731a <SBGC32_ParseDataStream+0x102>
							break;
 8007336:	e01d      	b.n	8007374 <SBGC32_ParseDataStream+0x15c>
				if (cmd.readPos != 0)
 8007338:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800733c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007340:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8007344:	2b00      	cmp	r3, #0
 8007346:	d006      	beq.n	8007356 <SBGC32_ParseDataStream+0x13e>
					cmd.readPos = 0;
 8007348:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
				ReadBuff(&cmd, dataStreamStruct, SIZEOF_EVENT, PM_DEFAULT_8BIT);
 8007356:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800735a:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 800735e:	f107 0010 	add.w	r0, r7, #16
 8007362:	2300      	movs	r3, #0
 8007364:	2204      	movs	r2, #4
 8007366:	6809      	ldr	r1, [r1, #0]
 8007368:	f7fe fe6a 	bl	8006040 <ReadBuff>
				break;
 800736c:	e002      	b.n	8007374 <SBGC32_ParseDataStream+0x15c>
		}
	}
 800736e:	bf00      	nop
 8007370:	e000      	b.n	8007374 <SBGC32_ParseDataStream+0x15c>
							break;
 8007372:	bf00      	nop

	return generalSBGC->_ParserCurrentStatus;
 8007374:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007378:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8007382:	4618      	mov	r0, r3
 8007384:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	0800c3d0 	.word	0x0800c3d0

08007390 <SBGC32_ReadRealTimeData4>:
 * 	@param 	*realTimeData - structure for storing real-time data
 *
 * 	@return Communication status
 */
TxRxStatus_t SBGC32_ReadRealTimeData4 (GeneralSBGC_t *generalSBGC, RealTimeData_t *realTimeData)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b0c4      	sub	sp, #272	; 0x110
 8007394:	af00      	add	r7, sp, #0
 8007396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800739a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800739e:	6018      	str	r0, [r3, #0]
 80073a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80073a8:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_REALTIME_DATA_4);
 80073aa:	f107 030c 	add.w	r3, r7, #12
 80073ae:	2119      	movs	r1, #25
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe ff99 	bl	80062e8 <InitCmdWrite>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_REALTIME_DATA_4), "Real-Time Data 4:") == TX_RX_OK)
 80073b6:	f107 010c 	add.w	r1, r7, #12
 80073ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073c2:	2219      	movs	r2, #25
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	f7fe fd9e 	bl	8005f06 <SBGC32_TX_RX>
 80073ca:	4603      	mov	r3, r0
 80073cc:	4619      	mov	r1, r3
 80073ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073d6:	4a0f      	ldr	r2, [pc, #60]	; (8007414 <SBGC32_ReadRealTimeData4+0x84>)
 80073d8:	6818      	ldr	r0, [r3, #0]
 80073da:	f7ff faa7 	bl	800692c <CheckReceipt>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d10a      	bne.n	80073fa <SBGC32_ReadRealTimeData4+0x6a>
		ReadBuff(&cmd, realTimeData, sizeof(RealTimeData_t), PM_REALTIME_DATA_4);
 80073e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073e8:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80073ec:	f107 000c 	add.w	r0, r7, #12
 80073f0:	230b      	movs	r3, #11
 80073f2:	227c      	movs	r2, #124	; 0x7c
 80073f4:	6809      	ldr	r1, [r1, #0]
 80073f6:	f7fe fe23 	bl	8006040 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 80073fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8007408:	4618      	mov	r0, r3
 800740a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	0800c40c 	.word	0x0800c40c

08007418 <SBGC32_ReadBoardInfo>:
 *	@param	cfg - configuration for this serial driver
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadBoardInfo (GeneralSBGC_t *generalSBGC, BoardInfo_t *boardInfo, ui16 cfg)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b0c6      	sub	sp, #280	; 0x118
 800741c:	af00      	add	r7, sp, #0
 800741e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007422:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007426:	6018      	str	r0, [r3, #0]
 8007428:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800742c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007430:	6019      	str	r1, [r3, #0]
 8007432:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007436:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800743a:	801a      	strh	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO);
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	2156      	movs	r1, #86	; 0x56
 8007442:	4618      	mov	r0, r3
 8007444:	f7fe ff50 	bl	80062e8 <InitCmdWrite>
	WriteWord(&cmd, cfg);
 8007448:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800744c:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8007450:	881a      	ldrh	r2, [r3, #0]
 8007452:	f107 0314 	add.w	r3, r7, #20
 8007456:	4611      	mov	r1, r2
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe fe90 	bl	800617e <WriteWord>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO), "Board Info:") == TX_RX_OK)
 800745e:	f107 0114 	add.w	r1, r7, #20
 8007462:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800746a:	2256      	movs	r2, #86	; 0x56
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	f7fe fd4a 	bl	8005f06 <SBGC32_TX_RX>
 8007472:	4603      	mov	r3, r0
 8007474:	4619      	mov	r1, r3
 8007476:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800747a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800747e:	4a0f      	ldr	r2, [pc, #60]	; (80074bc <SBGC32_ReadBoardInfo+0xa4>)
 8007480:	6818      	ldr	r0, [r3, #0]
 8007482:	f7ff fa53 	bl	800692c <CheckReceipt>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <SBGC32_ReadBoardInfo+0x8a>
		ReadBuff(&cmd, boardInfo, sizeof(BoardInfo_t), PM_BOARD_INFO);
 800748c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007490:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007494:	f107 0014 	add.w	r0, r7, #20
 8007498:	2318      	movs	r3, #24
 800749a:	2212      	movs	r2, #18
 800749c:	6809      	ldr	r1, [r1, #0]
 800749e:	f7fe fdcf 	bl	8006040 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 80074a2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80074a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	0800c464 	.word	0x0800c464

080074c0 <SBGC32_ReadBoardInfo3>:
 *	@param	*boardInfo3 - structure storing additional board information
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadBoardInfo3 (GeneralSBGC_t *generalSBGC, BoardInfo3_t *boardInfo3)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b0c4      	sub	sp, #272	; 0x110
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80074ce:	6018      	str	r0, [r3, #0]
 80074d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074d4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074d8:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO_3);
 80074da:	f107 030c 	add.w	r3, r7, #12
 80074de:	2114      	movs	r1, #20
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe ff01 	bl	80062e8 <InitCmdWrite>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO_3), "Board Info 3:") == TX_RX_OK)
 80074e6:	f107 010c 	add.w	r1, r7, #12
 80074ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80074f2:	2214      	movs	r2, #20
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f7fe fd06 	bl	8005f06 <SBGC32_TX_RX>
 80074fa:	4603      	mov	r3, r0
 80074fc:	4619      	mov	r1, r3
 80074fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007502:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007506:	4a0f      	ldr	r2, [pc, #60]	; (8007544 <SBGC32_ReadBoardInfo3+0x84>)
 8007508:	6818      	ldr	r0, [r3, #0]
 800750a:	f7ff fa0f 	bl	800692c <CheckReceipt>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10a      	bne.n	800752a <SBGC32_ReadBoardInfo3+0x6a>
		ReadBuff(&cmd, boardInfo3, sizeof(BoardInfo3_t), PM_BOARD_INFO_3);
 8007514:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007518:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 800751c:	f107 000c 	add.w	r0, r7, #12
 8007520:	2319      	movs	r3, #25
 8007522:	2245      	movs	r2, #69	; 0x45
 8007524:	6809      	ldr	r1, [r1, #0]
 8007526:	f7fe fd8b 	bl	8006040 <ReadBuff>

	return generalSBGC->_ParserCurrentStatus;
 800752a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800752e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8007538:	4618      	mov	r0, r3
 800753a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	0800c470 	.word	0x0800c470

08007548 <SBGC32_PlayBeeper>:
 *			beeper playback settings
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_PlayBeeper (GeneralSBGC_t *generalSBGC, const BeeperSettings_t *beeperSettings)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b0c4      	sub	sp, #272	; 0x110
 800754c:	af00      	add	r7, sp, #0
 800754e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007552:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007556:	6018      	str	r0, [r3, #0]
 8007558:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800755c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007560:	6019      	str	r1, [r3, #0]
    SerialCommand_t cmd;
    InitCmdWrite(&cmd, CMD_BEEP_SOUND);
 8007562:	f107 0308 	add.w	r3, r7, #8
 8007566:	2159      	movs	r1, #89	; 0x59
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe febd 	bl	80062e8 <InitCmdWrite>
    WriteWord(&cmd, beeperSettings->mode);
 800756e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007572:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29a      	uxth	r2, r3
 800757c:	f107 0308 	add.w	r3, r7, #8
 8007580:	4611      	mov	r1, r2
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fdfb 	bl	800617e <WriteWord>
    WriteByte(&cmd, beeperSettings->noteLength);
 8007588:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800758c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	789a      	ldrb	r2, [r3, #2]
 8007594:	f107 0308 	add.w	r3, r7, #8
 8007598:	4611      	mov	r1, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fdc0 	bl	8006120 <WriteByte>
    WriteByte(&cmd, beeperSettings->decayFactor);
 80075a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	78da      	ldrb	r2, [r3, #3]
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	4611      	mov	r1, r2
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fdb4 	bl	8006120 <WriteByte>
	WriteEmptyBuff(&cmd, 8);  // reserved[8]
 80075b8:	f107 0308 	add.w	r3, r7, #8
 80075bc:	2108      	movs	r1, #8
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fe5e 	bl	8006280 <WriteEmptyBuff>

    if (beeperSettings->mode == BM_BEEPER_MODE_CUSTOM_MELODY)
 80075c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075c8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d6:	d126      	bne.n	8007626 <SBGC32_PlayBeeper+0xde>
    	FOR_(i, beeperSettings->notesQuan) WriteWord(&cmd, beeperSettings->notesFreqHz[i]);
 80075d8:	2300      	movs	r3, #0
 80075da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80075de:	e016      	b.n	800760e <SBGC32_PlayBeeper+0xc6>
 80075e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80075ee:	3304      	adds	r3, #4
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	4413      	add	r3, r2
 80075f4:	889b      	ldrh	r3, [r3, #4]
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	f107 0308 	add.w	r3, r7, #8
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fdbd 	bl	800617e <WriteWord>
 8007604:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007608:	3301      	adds	r3, #1
 800760a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800760e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007612:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800761c:	461a      	mov	r2, r3
 800761e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007622:	4293      	cmp	r3, r2
 8007624:	dbdc      	blt.n	80075e0 <SBGC32_PlayBeeper+0x98>

    SBGC32_TX(generalSBGC, &cmd);
 8007626:	f107 0208 	add.w	r2, r7, #8
 800762a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800762e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007632:	4611      	mov	r1, r2
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f7fe f9f1 	bl	8005a1c <SBGC32_TX>
    /* no need confirmation */
    return generalSBGC->_ParserCurrentStatus;
 800763a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800763e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8007648:	4618      	mov	r0, r3
 800764a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <__errno>:
 8007654:	4b01      	ldr	r3, [pc, #4]	; (800765c <__errno+0x8>)
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	2000000c 	.word	0x2000000c

08007660 <__libc_init_array>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	4d0d      	ldr	r5, [pc, #52]	; (8007698 <__libc_init_array+0x38>)
 8007664:	4c0d      	ldr	r4, [pc, #52]	; (800769c <__libc_init_array+0x3c>)
 8007666:	1b64      	subs	r4, r4, r5
 8007668:	10a4      	asrs	r4, r4, #2
 800766a:	2600      	movs	r6, #0
 800766c:	42a6      	cmp	r6, r4
 800766e:	d109      	bne.n	8007684 <__libc_init_array+0x24>
 8007670:	4d0b      	ldr	r5, [pc, #44]	; (80076a0 <__libc_init_array+0x40>)
 8007672:	4c0c      	ldr	r4, [pc, #48]	; (80076a4 <__libc_init_array+0x44>)
 8007674:	f004 fb84 	bl	800bd80 <_init>
 8007678:	1b64      	subs	r4, r4, r5
 800767a:	10a4      	asrs	r4, r4, #2
 800767c:	2600      	movs	r6, #0
 800767e:	42a6      	cmp	r6, r4
 8007680:	d105      	bne.n	800768e <__libc_init_array+0x2e>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f855 3b04 	ldr.w	r3, [r5], #4
 8007688:	4798      	blx	r3
 800768a:	3601      	adds	r6, #1
 800768c:	e7ee      	b.n	800766c <__libc_init_array+0xc>
 800768e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007692:	4798      	blx	r3
 8007694:	3601      	adds	r6, #1
 8007696:	e7f2      	b.n	800767e <__libc_init_array+0x1e>
 8007698:	0800d514 	.word	0x0800d514
 800769c:	0800d514 	.word	0x0800d514
 80076a0:	0800d514 	.word	0x0800d514
 80076a4:	0800d518 	.word	0x0800d518

080076a8 <malloc>:
 80076a8:	4b02      	ldr	r3, [pc, #8]	; (80076b4 <malloc+0xc>)
 80076aa:	4601      	mov	r1, r0
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	f000 b885 	b.w	80077bc <_malloc_r>
 80076b2:	bf00      	nop
 80076b4:	2000000c 	.word	0x2000000c

080076b8 <memcpy>:
 80076b8:	440a      	add	r2, r1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c0:	d100      	bne.n	80076c4 <memcpy+0xc>
 80076c2:	4770      	bx	lr
 80076c4:	b510      	push	{r4, lr}
 80076c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ce:	4291      	cmp	r1, r2
 80076d0:	d1f9      	bne.n	80076c6 <memcpy+0xe>
 80076d2:	bd10      	pop	{r4, pc}

080076d4 <memset>:
 80076d4:	4402      	add	r2, r0
 80076d6:	4603      	mov	r3, r0
 80076d8:	4293      	cmp	r3, r2
 80076da:	d100      	bne.n	80076de <memset+0xa>
 80076dc:	4770      	bx	lr
 80076de:	f803 1b01 	strb.w	r1, [r3], #1
 80076e2:	e7f9      	b.n	80076d8 <memset+0x4>

080076e4 <_free_r>:
 80076e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d044      	beq.n	8007774 <_free_r+0x90>
 80076ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ee:	9001      	str	r0, [sp, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f1a1 0404 	sub.w	r4, r1, #4
 80076f6:	bfb8      	it	lt
 80076f8:	18e4      	addlt	r4, r4, r3
 80076fa:	f002 ff2d 	bl	800a558 <__malloc_lock>
 80076fe:	4a1e      	ldr	r2, [pc, #120]	; (8007778 <_free_r+0x94>)
 8007700:	9801      	ldr	r0, [sp, #4]
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	b933      	cbnz	r3, 8007714 <_free_r+0x30>
 8007706:	6063      	str	r3, [r4, #4]
 8007708:	6014      	str	r4, [r2, #0]
 800770a:	b003      	add	sp, #12
 800770c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007710:	f002 bf28 	b.w	800a564 <__malloc_unlock>
 8007714:	42a3      	cmp	r3, r4
 8007716:	d908      	bls.n	800772a <_free_r+0x46>
 8007718:	6825      	ldr	r5, [r4, #0]
 800771a:	1961      	adds	r1, r4, r5
 800771c:	428b      	cmp	r3, r1
 800771e:	bf01      	itttt	eq
 8007720:	6819      	ldreq	r1, [r3, #0]
 8007722:	685b      	ldreq	r3, [r3, #4]
 8007724:	1949      	addeq	r1, r1, r5
 8007726:	6021      	streq	r1, [r4, #0]
 8007728:	e7ed      	b.n	8007706 <_free_r+0x22>
 800772a:	461a      	mov	r2, r3
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	b10b      	cbz	r3, 8007734 <_free_r+0x50>
 8007730:	42a3      	cmp	r3, r4
 8007732:	d9fa      	bls.n	800772a <_free_r+0x46>
 8007734:	6811      	ldr	r1, [r2, #0]
 8007736:	1855      	adds	r5, r2, r1
 8007738:	42a5      	cmp	r5, r4
 800773a:	d10b      	bne.n	8007754 <_free_r+0x70>
 800773c:	6824      	ldr	r4, [r4, #0]
 800773e:	4421      	add	r1, r4
 8007740:	1854      	adds	r4, r2, r1
 8007742:	42a3      	cmp	r3, r4
 8007744:	6011      	str	r1, [r2, #0]
 8007746:	d1e0      	bne.n	800770a <_free_r+0x26>
 8007748:	681c      	ldr	r4, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	6053      	str	r3, [r2, #4]
 800774e:	4421      	add	r1, r4
 8007750:	6011      	str	r1, [r2, #0]
 8007752:	e7da      	b.n	800770a <_free_r+0x26>
 8007754:	d902      	bls.n	800775c <_free_r+0x78>
 8007756:	230c      	movs	r3, #12
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	e7d6      	b.n	800770a <_free_r+0x26>
 800775c:	6825      	ldr	r5, [r4, #0]
 800775e:	1961      	adds	r1, r4, r5
 8007760:	428b      	cmp	r3, r1
 8007762:	bf04      	itt	eq
 8007764:	6819      	ldreq	r1, [r3, #0]
 8007766:	685b      	ldreq	r3, [r3, #4]
 8007768:	6063      	str	r3, [r4, #4]
 800776a:	bf04      	itt	eq
 800776c:	1949      	addeq	r1, r1, r5
 800776e:	6021      	streq	r1, [r4, #0]
 8007770:	6054      	str	r4, [r2, #4]
 8007772:	e7ca      	b.n	800770a <_free_r+0x26>
 8007774:	b003      	add	sp, #12
 8007776:	bd30      	pop	{r4, r5, pc}
 8007778:	200008f4 	.word	0x200008f4

0800777c <sbrk_aligned>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	4e0e      	ldr	r6, [pc, #56]	; (80077b8 <sbrk_aligned+0x3c>)
 8007780:	460c      	mov	r4, r1
 8007782:	6831      	ldr	r1, [r6, #0]
 8007784:	4605      	mov	r5, r0
 8007786:	b911      	cbnz	r1, 800778e <sbrk_aligned+0x12>
 8007788:	f000 fed6 	bl	8008538 <_sbrk_r>
 800778c:	6030      	str	r0, [r6, #0]
 800778e:	4621      	mov	r1, r4
 8007790:	4628      	mov	r0, r5
 8007792:	f000 fed1 	bl	8008538 <_sbrk_r>
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	d00a      	beq.n	80077b0 <sbrk_aligned+0x34>
 800779a:	1cc4      	adds	r4, r0, #3
 800779c:	f024 0403 	bic.w	r4, r4, #3
 80077a0:	42a0      	cmp	r0, r4
 80077a2:	d007      	beq.n	80077b4 <sbrk_aligned+0x38>
 80077a4:	1a21      	subs	r1, r4, r0
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 fec6 	bl	8008538 <_sbrk_r>
 80077ac:	3001      	adds	r0, #1
 80077ae:	d101      	bne.n	80077b4 <sbrk_aligned+0x38>
 80077b0:	f04f 34ff 	mov.w	r4, #4294967295
 80077b4:	4620      	mov	r0, r4
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	200008f8 	.word	0x200008f8

080077bc <_malloc_r>:
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	1ccd      	adds	r5, r1, #3
 80077c2:	f025 0503 	bic.w	r5, r5, #3
 80077c6:	3508      	adds	r5, #8
 80077c8:	2d0c      	cmp	r5, #12
 80077ca:	bf38      	it	cc
 80077cc:	250c      	movcc	r5, #12
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	4607      	mov	r7, r0
 80077d2:	db01      	blt.n	80077d8 <_malloc_r+0x1c>
 80077d4:	42a9      	cmp	r1, r5
 80077d6:	d905      	bls.n	80077e4 <_malloc_r+0x28>
 80077d8:	230c      	movs	r3, #12
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	2600      	movs	r6, #0
 80077de:	4630      	mov	r0, r6
 80077e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e4:	4e2e      	ldr	r6, [pc, #184]	; (80078a0 <_malloc_r+0xe4>)
 80077e6:	f002 feb7 	bl	800a558 <__malloc_lock>
 80077ea:	6833      	ldr	r3, [r6, #0]
 80077ec:	461c      	mov	r4, r3
 80077ee:	bb34      	cbnz	r4, 800783e <_malloc_r+0x82>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4638      	mov	r0, r7
 80077f4:	f7ff ffc2 	bl	800777c <sbrk_aligned>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	4604      	mov	r4, r0
 80077fc:	d14d      	bne.n	800789a <_malloc_r+0xde>
 80077fe:	6834      	ldr	r4, [r6, #0]
 8007800:	4626      	mov	r6, r4
 8007802:	2e00      	cmp	r6, #0
 8007804:	d140      	bne.n	8007888 <_malloc_r+0xcc>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	4631      	mov	r1, r6
 800780a:	4638      	mov	r0, r7
 800780c:	eb04 0803 	add.w	r8, r4, r3
 8007810:	f000 fe92 	bl	8008538 <_sbrk_r>
 8007814:	4580      	cmp	r8, r0
 8007816:	d13a      	bne.n	800788e <_malloc_r+0xd2>
 8007818:	6821      	ldr	r1, [r4, #0]
 800781a:	3503      	adds	r5, #3
 800781c:	1a6d      	subs	r5, r5, r1
 800781e:	f025 0503 	bic.w	r5, r5, #3
 8007822:	3508      	adds	r5, #8
 8007824:	2d0c      	cmp	r5, #12
 8007826:	bf38      	it	cc
 8007828:	250c      	movcc	r5, #12
 800782a:	4629      	mov	r1, r5
 800782c:	4638      	mov	r0, r7
 800782e:	f7ff ffa5 	bl	800777c <sbrk_aligned>
 8007832:	3001      	adds	r0, #1
 8007834:	d02b      	beq.n	800788e <_malloc_r+0xd2>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	442b      	add	r3, r5
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	e00e      	b.n	800785c <_malloc_r+0xa0>
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	1b52      	subs	r2, r2, r5
 8007842:	d41e      	bmi.n	8007882 <_malloc_r+0xc6>
 8007844:	2a0b      	cmp	r2, #11
 8007846:	d916      	bls.n	8007876 <_malloc_r+0xba>
 8007848:	1961      	adds	r1, r4, r5
 800784a:	42a3      	cmp	r3, r4
 800784c:	6025      	str	r5, [r4, #0]
 800784e:	bf18      	it	ne
 8007850:	6059      	strne	r1, [r3, #4]
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	bf08      	it	eq
 8007856:	6031      	streq	r1, [r6, #0]
 8007858:	5162      	str	r2, [r4, r5]
 800785a:	604b      	str	r3, [r1, #4]
 800785c:	4638      	mov	r0, r7
 800785e:	f104 060b 	add.w	r6, r4, #11
 8007862:	f002 fe7f 	bl	800a564 <__malloc_unlock>
 8007866:	f026 0607 	bic.w	r6, r6, #7
 800786a:	1d23      	adds	r3, r4, #4
 800786c:	1af2      	subs	r2, r6, r3
 800786e:	d0b6      	beq.n	80077de <_malloc_r+0x22>
 8007870:	1b9b      	subs	r3, r3, r6
 8007872:	50a3      	str	r3, [r4, r2]
 8007874:	e7b3      	b.n	80077de <_malloc_r+0x22>
 8007876:	6862      	ldr	r2, [r4, #4]
 8007878:	42a3      	cmp	r3, r4
 800787a:	bf0c      	ite	eq
 800787c:	6032      	streq	r2, [r6, #0]
 800787e:	605a      	strne	r2, [r3, #4]
 8007880:	e7ec      	b.n	800785c <_malloc_r+0xa0>
 8007882:	4623      	mov	r3, r4
 8007884:	6864      	ldr	r4, [r4, #4]
 8007886:	e7b2      	b.n	80077ee <_malloc_r+0x32>
 8007888:	4634      	mov	r4, r6
 800788a:	6876      	ldr	r6, [r6, #4]
 800788c:	e7b9      	b.n	8007802 <_malloc_r+0x46>
 800788e:	230c      	movs	r3, #12
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	4638      	mov	r0, r7
 8007894:	f002 fe66 	bl	800a564 <__malloc_unlock>
 8007898:	e7a1      	b.n	80077de <_malloc_r+0x22>
 800789a:	6025      	str	r5, [r4, #0]
 800789c:	e7de      	b.n	800785c <_malloc_r+0xa0>
 800789e:	bf00      	nop
 80078a0:	200008f4 	.word	0x200008f4

080078a4 <__cvt>:
 80078a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a6:	ed2d 8b02 	vpush	{d8}
 80078aa:	eeb0 8b40 	vmov.f64	d8, d0
 80078ae:	b085      	sub	sp, #20
 80078b0:	4617      	mov	r7, r2
 80078b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80078b4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80078b6:	ee18 2a90 	vmov	r2, s17
 80078ba:	f025 0520 	bic.w	r5, r5, #32
 80078be:	2a00      	cmp	r2, #0
 80078c0:	bfb6      	itet	lt
 80078c2:	222d      	movlt	r2, #45	; 0x2d
 80078c4:	2200      	movge	r2, #0
 80078c6:	eeb1 8b40 	vneglt.f64	d8, d0
 80078ca:	2d46      	cmp	r5, #70	; 0x46
 80078cc:	460c      	mov	r4, r1
 80078ce:	701a      	strb	r2, [r3, #0]
 80078d0:	d004      	beq.n	80078dc <__cvt+0x38>
 80078d2:	2d45      	cmp	r5, #69	; 0x45
 80078d4:	d100      	bne.n	80078d8 <__cvt+0x34>
 80078d6:	3401      	adds	r4, #1
 80078d8:	2102      	movs	r1, #2
 80078da:	e000      	b.n	80078de <__cvt+0x3a>
 80078dc:	2103      	movs	r1, #3
 80078de:	ab03      	add	r3, sp, #12
 80078e0:	9301      	str	r3, [sp, #4]
 80078e2:	ab02      	add	r3, sp, #8
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4622      	mov	r2, r4
 80078e8:	4633      	mov	r3, r6
 80078ea:	eeb0 0b48 	vmov.f64	d0, d8
 80078ee:	f001 fd3f 	bl	8009370 <_dtoa_r>
 80078f2:	2d47      	cmp	r5, #71	; 0x47
 80078f4:	d101      	bne.n	80078fa <__cvt+0x56>
 80078f6:	07fb      	lsls	r3, r7, #31
 80078f8:	d51a      	bpl.n	8007930 <__cvt+0x8c>
 80078fa:	2d46      	cmp	r5, #70	; 0x46
 80078fc:	eb00 0204 	add.w	r2, r0, r4
 8007900:	d10c      	bne.n	800791c <__cvt+0x78>
 8007902:	7803      	ldrb	r3, [r0, #0]
 8007904:	2b30      	cmp	r3, #48	; 0x30
 8007906:	d107      	bne.n	8007918 <__cvt+0x74>
 8007908:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800790c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007910:	bf1c      	itt	ne
 8007912:	f1c4 0401 	rsbne	r4, r4, #1
 8007916:	6034      	strne	r4, [r6, #0]
 8007918:	6833      	ldr	r3, [r6, #0]
 800791a:	441a      	add	r2, r3
 800791c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007924:	bf08      	it	eq
 8007926:	9203      	streq	r2, [sp, #12]
 8007928:	2130      	movs	r1, #48	; 0x30
 800792a:	9b03      	ldr	r3, [sp, #12]
 800792c:	4293      	cmp	r3, r2
 800792e:	d307      	bcc.n	8007940 <__cvt+0x9c>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007934:	1a1b      	subs	r3, r3, r0
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	b005      	add	sp, #20
 800793a:	ecbd 8b02 	vpop	{d8}
 800793e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007940:	1c5c      	adds	r4, r3, #1
 8007942:	9403      	str	r4, [sp, #12]
 8007944:	7019      	strb	r1, [r3, #0]
 8007946:	e7f0      	b.n	800792a <__cvt+0x86>

08007948 <__exponent>:
 8007948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800794a:	4603      	mov	r3, r0
 800794c:	2900      	cmp	r1, #0
 800794e:	bfb8      	it	lt
 8007950:	4249      	neglt	r1, r1
 8007952:	f803 2b02 	strb.w	r2, [r3], #2
 8007956:	bfb4      	ite	lt
 8007958:	222d      	movlt	r2, #45	; 0x2d
 800795a:	222b      	movge	r2, #43	; 0x2b
 800795c:	2909      	cmp	r1, #9
 800795e:	7042      	strb	r2, [r0, #1]
 8007960:	dd2a      	ble.n	80079b8 <__exponent+0x70>
 8007962:	f10d 0407 	add.w	r4, sp, #7
 8007966:	46a4      	mov	ip, r4
 8007968:	270a      	movs	r7, #10
 800796a:	46a6      	mov	lr, r4
 800796c:	460a      	mov	r2, r1
 800796e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007972:	fb07 1516 	mls	r5, r7, r6, r1
 8007976:	3530      	adds	r5, #48	; 0x30
 8007978:	2a63      	cmp	r2, #99	; 0x63
 800797a:	f104 34ff 	add.w	r4, r4, #4294967295
 800797e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007982:	4631      	mov	r1, r6
 8007984:	dcf1      	bgt.n	800796a <__exponent+0x22>
 8007986:	3130      	adds	r1, #48	; 0x30
 8007988:	f1ae 0502 	sub.w	r5, lr, #2
 800798c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007990:	1c44      	adds	r4, r0, #1
 8007992:	4629      	mov	r1, r5
 8007994:	4561      	cmp	r1, ip
 8007996:	d30a      	bcc.n	80079ae <__exponent+0x66>
 8007998:	f10d 0209 	add.w	r2, sp, #9
 800799c:	eba2 020e 	sub.w	r2, r2, lr
 80079a0:	4565      	cmp	r5, ip
 80079a2:	bf88      	it	hi
 80079a4:	2200      	movhi	r2, #0
 80079a6:	4413      	add	r3, r2
 80079a8:	1a18      	subs	r0, r3, r0
 80079aa:	b003      	add	sp, #12
 80079ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079b6:	e7ed      	b.n	8007994 <__exponent+0x4c>
 80079b8:	2330      	movs	r3, #48	; 0x30
 80079ba:	3130      	adds	r1, #48	; 0x30
 80079bc:	7083      	strb	r3, [r0, #2]
 80079be:	70c1      	strb	r1, [r0, #3]
 80079c0:	1d03      	adds	r3, r0, #4
 80079c2:	e7f1      	b.n	80079a8 <__exponent+0x60>
 80079c4:	0000      	movs	r0, r0
	...

080079c8 <_printf_float>:
 80079c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	b08b      	sub	sp, #44	; 0x2c
 80079ce:	460c      	mov	r4, r1
 80079d0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80079d4:	4616      	mov	r6, r2
 80079d6:	461f      	mov	r7, r3
 80079d8:	4605      	mov	r5, r0
 80079da:	f002 fda7 	bl	800a52c <_localeconv_r>
 80079de:	f8d0 b000 	ldr.w	fp, [r0]
 80079e2:	4658      	mov	r0, fp
 80079e4:	f7f8 fc2c 	bl	8000240 <strlen>
 80079e8:	2300      	movs	r3, #0
 80079ea:	9308      	str	r3, [sp, #32]
 80079ec:	f8d8 3000 	ldr.w	r3, [r8]
 80079f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80079f4:	6822      	ldr	r2, [r4, #0]
 80079f6:	3307      	adds	r3, #7
 80079f8:	f023 0307 	bic.w	r3, r3, #7
 80079fc:	f103 0108 	add.w	r1, r3, #8
 8007a00:	f8c8 1000 	str.w	r1, [r8]
 8007a04:	4682      	mov	sl, r0
 8007a06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a0a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007a0e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007c70 <_printf_float+0x2a8>
 8007a12:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007a16:	eeb0 6bc0 	vabs.f64	d6, d0
 8007a1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a22:	dd24      	ble.n	8007a6e <_printf_float+0xa6>
 8007a24:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2c:	d502      	bpl.n	8007a34 <_printf_float+0x6c>
 8007a2e:	232d      	movs	r3, #45	; 0x2d
 8007a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a34:	4b90      	ldr	r3, [pc, #576]	; (8007c78 <_printf_float+0x2b0>)
 8007a36:	4891      	ldr	r0, [pc, #580]	; (8007c7c <_printf_float+0x2b4>)
 8007a38:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007a3c:	bf94      	ite	ls
 8007a3e:	4698      	movls	r8, r3
 8007a40:	4680      	movhi	r8, r0
 8007a42:	2303      	movs	r3, #3
 8007a44:	6123      	str	r3, [r4, #16]
 8007a46:	f022 0204 	bic.w	r2, r2, #4
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	6022      	str	r2, [r4, #0]
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	9700      	str	r7, [sp, #0]
 8007a52:	4633      	mov	r3, r6
 8007a54:	aa09      	add	r2, sp, #36	; 0x24
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 f9d3 	bl	8007e04 <_printf_common>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f040 808a 	bne.w	8007b78 <_printf_float+0x1b0>
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	b00b      	add	sp, #44	; 0x2c
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a76:	d709      	bvc.n	8007a8c <_printf_float+0xc4>
 8007a78:	ee10 3a90 	vmov	r3, s1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bfbc      	itt	lt
 8007a80:	232d      	movlt	r3, #45	; 0x2d
 8007a82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a86:	487e      	ldr	r0, [pc, #504]	; (8007c80 <_printf_float+0x2b8>)
 8007a88:	4b7e      	ldr	r3, [pc, #504]	; (8007c84 <_printf_float+0x2bc>)
 8007a8a:	e7d5      	b.n	8007a38 <_printf_float+0x70>
 8007a8c:	6863      	ldr	r3, [r4, #4]
 8007a8e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007a92:	9104      	str	r1, [sp, #16]
 8007a94:	1c59      	adds	r1, r3, #1
 8007a96:	d13c      	bne.n	8007b12 <_printf_float+0x14a>
 8007a98:	2306      	movs	r3, #6
 8007a9a:	6063      	str	r3, [r4, #4]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9303      	str	r3, [sp, #12]
 8007aa0:	ab08      	add	r3, sp, #32
 8007aa2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007aaa:	ab07      	add	r3, sp, #28
 8007aac:	6861      	ldr	r1, [r4, #4]
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	6022      	str	r2, [r4, #0]
 8007ab2:	f10d 031b 	add.w	r3, sp, #27
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	f7ff fef4 	bl	80078a4 <__cvt>
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	9907      	ldr	r1, [sp, #28]
 8007ac0:	2b47      	cmp	r3, #71	; 0x47
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	d108      	bne.n	8007ad8 <_printf_float+0x110>
 8007ac6:	1cc8      	adds	r0, r1, #3
 8007ac8:	db02      	blt.n	8007ad0 <_printf_float+0x108>
 8007aca:	6863      	ldr	r3, [r4, #4]
 8007acc:	4299      	cmp	r1, r3
 8007ace:	dd41      	ble.n	8007b54 <_printf_float+0x18c>
 8007ad0:	f1a9 0902 	sub.w	r9, r9, #2
 8007ad4:	fa5f f989 	uxtb.w	r9, r9
 8007ad8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007adc:	d820      	bhi.n	8007b20 <_printf_float+0x158>
 8007ade:	3901      	subs	r1, #1
 8007ae0:	464a      	mov	r2, r9
 8007ae2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	f7ff ff2e 	bl	8007948 <__exponent>
 8007aec:	9a08      	ldr	r2, [sp, #32]
 8007aee:	9004      	str	r0, [sp, #16]
 8007af0:	1813      	adds	r3, r2, r0
 8007af2:	2a01      	cmp	r2, #1
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	dc02      	bgt.n	8007afe <_printf_float+0x136>
 8007af8:	6822      	ldr	r2, [r4, #0]
 8007afa:	07d2      	lsls	r2, r2, #31
 8007afc:	d501      	bpl.n	8007b02 <_printf_float+0x13a>
 8007afe:	3301      	adds	r3, #1
 8007b00:	6123      	str	r3, [r4, #16]
 8007b02:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0a2      	beq.n	8007a50 <_printf_float+0x88>
 8007b0a:	232d      	movs	r3, #45	; 0x2d
 8007b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b10:	e79e      	b.n	8007a50 <_printf_float+0x88>
 8007b12:	9904      	ldr	r1, [sp, #16]
 8007b14:	2947      	cmp	r1, #71	; 0x47
 8007b16:	d1c1      	bne.n	8007a9c <_printf_float+0xd4>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1bf      	bne.n	8007a9c <_printf_float+0xd4>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e7bc      	b.n	8007a9a <_printf_float+0xd2>
 8007b20:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007b24:	d118      	bne.n	8007b58 <_printf_float+0x190>
 8007b26:	2900      	cmp	r1, #0
 8007b28:	6863      	ldr	r3, [r4, #4]
 8007b2a:	dd0b      	ble.n	8007b44 <_printf_float+0x17c>
 8007b2c:	6121      	str	r1, [r4, #16]
 8007b2e:	b913      	cbnz	r3, 8007b36 <_printf_float+0x16e>
 8007b30:	6822      	ldr	r2, [r4, #0]
 8007b32:	07d0      	lsls	r0, r2, #31
 8007b34:	d502      	bpl.n	8007b3c <_printf_float+0x174>
 8007b36:	3301      	adds	r3, #1
 8007b38:	440b      	add	r3, r1
 8007b3a:	6123      	str	r3, [r4, #16]
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b40:	9304      	str	r3, [sp, #16]
 8007b42:	e7de      	b.n	8007b02 <_printf_float+0x13a>
 8007b44:	b913      	cbnz	r3, 8007b4c <_printf_float+0x184>
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	07d2      	lsls	r2, r2, #31
 8007b4a:	d501      	bpl.n	8007b50 <_printf_float+0x188>
 8007b4c:	3302      	adds	r3, #2
 8007b4e:	e7f4      	b.n	8007b3a <_printf_float+0x172>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e7f2      	b.n	8007b3a <_printf_float+0x172>
 8007b54:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	4299      	cmp	r1, r3
 8007b5c:	db05      	blt.n	8007b6a <_printf_float+0x1a2>
 8007b5e:	6823      	ldr	r3, [r4, #0]
 8007b60:	6121      	str	r1, [r4, #16]
 8007b62:	07d8      	lsls	r0, r3, #31
 8007b64:	d5ea      	bpl.n	8007b3c <_printf_float+0x174>
 8007b66:	1c4b      	adds	r3, r1, #1
 8007b68:	e7e7      	b.n	8007b3a <_printf_float+0x172>
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	bfd4      	ite	le
 8007b6e:	f1c1 0202 	rsble	r2, r1, #2
 8007b72:	2201      	movgt	r2, #1
 8007b74:	4413      	add	r3, r2
 8007b76:	e7e0      	b.n	8007b3a <_printf_float+0x172>
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	055a      	lsls	r2, r3, #21
 8007b7c:	d407      	bmi.n	8007b8e <_printf_float+0x1c6>
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	4642      	mov	r2, r8
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d12a      	bne.n	8007be2 <_printf_float+0x21a>
 8007b8c:	e76a      	b.n	8007a64 <_printf_float+0x9c>
 8007b8e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007b92:	f240 80e2 	bls.w	8007d5a <_printf_float+0x392>
 8007b96:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007b9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba2:	d133      	bne.n	8007c0c <_printf_float+0x244>
 8007ba4:	4a38      	ldr	r2, [pc, #224]	; (8007c88 <_printf_float+0x2c0>)
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	4631      	mov	r1, r6
 8007baa:	4628      	mov	r0, r5
 8007bac:	47b8      	blx	r7
 8007bae:	3001      	adds	r0, #1
 8007bb0:	f43f af58 	beq.w	8007a64 <_printf_float+0x9c>
 8007bb4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	db02      	blt.n	8007bc2 <_printf_float+0x1fa>
 8007bbc:	6823      	ldr	r3, [r4, #0]
 8007bbe:	07d8      	lsls	r0, r3, #31
 8007bc0:	d50f      	bpl.n	8007be2 <_printf_float+0x21a>
 8007bc2:	4653      	mov	r3, sl
 8007bc4:	465a      	mov	r2, fp
 8007bc6:	4631      	mov	r1, r6
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b8      	blx	r7
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f43f af49 	beq.w	8007a64 <_printf_float+0x9c>
 8007bd2:	f04f 0800 	mov.w	r8, #0
 8007bd6:	f104 091a 	add.w	r9, r4, #26
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	4543      	cmp	r3, r8
 8007be0:	dc09      	bgt.n	8007bf6 <_printf_float+0x22e>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	079b      	lsls	r3, r3, #30
 8007be6:	f100 8108 	bmi.w	8007dfa <_printf_float+0x432>
 8007bea:	68e0      	ldr	r0, [r4, #12]
 8007bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bee:	4298      	cmp	r0, r3
 8007bf0:	bfb8      	it	lt
 8007bf2:	4618      	movlt	r0, r3
 8007bf4:	e738      	b.n	8007a68 <_printf_float+0xa0>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	464a      	mov	r2, r9
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	f43f af2f 	beq.w	8007a64 <_printf_float+0x9c>
 8007c06:	f108 0801 	add.w	r8, r8, #1
 8007c0a:	e7e6      	b.n	8007bda <_printf_float+0x212>
 8007c0c:	9b07      	ldr	r3, [sp, #28]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dc3c      	bgt.n	8007c8c <_printf_float+0x2c4>
 8007c12:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <_printf_float+0x2c0>)
 8007c14:	2301      	movs	r3, #1
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	f43f af21 	beq.w	8007a64 <_printf_float+0x9c>
 8007c22:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	d102      	bne.n	8007c30 <_printf_float+0x268>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	07d9      	lsls	r1, r3, #31
 8007c2e:	d5d8      	bpl.n	8007be2 <_printf_float+0x21a>
 8007c30:	4653      	mov	r3, sl
 8007c32:	465a      	mov	r2, fp
 8007c34:	4631      	mov	r1, r6
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f43f af12 	beq.w	8007a64 <_printf_float+0x9c>
 8007c40:	f04f 0900 	mov.w	r9, #0
 8007c44:	f104 0a1a 	add.w	sl, r4, #26
 8007c48:	9b07      	ldr	r3, [sp, #28]
 8007c4a:	425b      	negs	r3, r3
 8007c4c:	454b      	cmp	r3, r9
 8007c4e:	dc01      	bgt.n	8007c54 <_printf_float+0x28c>
 8007c50:	9b08      	ldr	r3, [sp, #32]
 8007c52:	e795      	b.n	8007b80 <_printf_float+0x1b8>
 8007c54:	2301      	movs	r3, #1
 8007c56:	4652      	mov	r2, sl
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	47b8      	blx	r7
 8007c5e:	3001      	adds	r0, #1
 8007c60:	f43f af00 	beq.w	8007a64 <_printf_float+0x9c>
 8007c64:	f109 0901 	add.w	r9, r9, #1
 8007c68:	e7ee      	b.n	8007c48 <_printf_float+0x280>
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w
 8007c70:	ffffffff 	.word	0xffffffff
 8007c74:	7fefffff 	.word	0x7fefffff
 8007c78:	0800d004 	.word	0x0800d004
 8007c7c:	0800d008 	.word	0x0800d008
 8007c80:	0800d010 	.word	0x0800d010
 8007c84:	0800d00c 	.word	0x0800d00c
 8007c88:	0800d014 	.word	0x0800d014
 8007c8c:	9a08      	ldr	r2, [sp, #32]
 8007c8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c90:	429a      	cmp	r2, r3
 8007c92:	bfa8      	it	ge
 8007c94:	461a      	movge	r2, r3
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	4691      	mov	r9, r2
 8007c9a:	dc38      	bgt.n	8007d0e <_printf_float+0x346>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9305      	str	r3, [sp, #20]
 8007ca0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ca4:	f104 021a 	add.w	r2, r4, #26
 8007ca8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007caa:	9905      	ldr	r1, [sp, #20]
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	eba3 0309 	sub.w	r3, r3, r9
 8007cb2:	428b      	cmp	r3, r1
 8007cb4:	dc33      	bgt.n	8007d1e <_printf_float+0x356>
 8007cb6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	db3c      	blt.n	8007d38 <_printf_float+0x370>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	07da      	lsls	r2, r3, #31
 8007cc2:	d439      	bmi.n	8007d38 <_printf_float+0x370>
 8007cc4:	9b08      	ldr	r3, [sp, #32]
 8007cc6:	9a04      	ldr	r2, [sp, #16]
 8007cc8:	9907      	ldr	r1, [sp, #28]
 8007cca:	1a9a      	subs	r2, r3, r2
 8007ccc:	eba3 0901 	sub.w	r9, r3, r1
 8007cd0:	4591      	cmp	r9, r2
 8007cd2:	bfa8      	it	ge
 8007cd4:	4691      	movge	r9, r2
 8007cd6:	f1b9 0f00 	cmp.w	r9, #0
 8007cda:	dc35      	bgt.n	8007d48 <_printf_float+0x380>
 8007cdc:	f04f 0800 	mov.w	r8, #0
 8007ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ce4:	f104 0a1a 	add.w	sl, r4, #26
 8007ce8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007cec:	1a9b      	subs	r3, r3, r2
 8007cee:	eba3 0309 	sub.w	r3, r3, r9
 8007cf2:	4543      	cmp	r3, r8
 8007cf4:	f77f af75 	ble.w	8007be2 <_printf_float+0x21a>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b8      	blx	r7
 8007d02:	3001      	adds	r0, #1
 8007d04:	f43f aeae 	beq.w	8007a64 <_printf_float+0x9c>
 8007d08:	f108 0801 	add.w	r8, r8, #1
 8007d0c:	e7ec      	b.n	8007ce8 <_printf_float+0x320>
 8007d0e:	4613      	mov	r3, r2
 8007d10:	4631      	mov	r1, r6
 8007d12:	4642      	mov	r2, r8
 8007d14:	4628      	mov	r0, r5
 8007d16:	47b8      	blx	r7
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d1bf      	bne.n	8007c9c <_printf_float+0x2d4>
 8007d1c:	e6a2      	b.n	8007a64 <_printf_float+0x9c>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	9204      	str	r2, [sp, #16]
 8007d26:	47b8      	blx	r7
 8007d28:	3001      	adds	r0, #1
 8007d2a:	f43f ae9b 	beq.w	8007a64 <_printf_float+0x9c>
 8007d2e:	9b05      	ldr	r3, [sp, #20]
 8007d30:	9a04      	ldr	r2, [sp, #16]
 8007d32:	3301      	adds	r3, #1
 8007d34:	9305      	str	r3, [sp, #20]
 8007d36:	e7b7      	b.n	8007ca8 <_printf_float+0x2e0>
 8007d38:	4653      	mov	r3, sl
 8007d3a:	465a      	mov	r2, fp
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	d1be      	bne.n	8007cc4 <_printf_float+0x2fc>
 8007d46:	e68d      	b.n	8007a64 <_printf_float+0x9c>
 8007d48:	9a04      	ldr	r2, [sp, #16]
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	4442      	add	r2, r8
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	d1c1      	bne.n	8007cdc <_printf_float+0x314>
 8007d58:	e684      	b.n	8007a64 <_printf_float+0x9c>
 8007d5a:	9a08      	ldr	r2, [sp, #32]
 8007d5c:	2a01      	cmp	r2, #1
 8007d5e:	dc01      	bgt.n	8007d64 <_printf_float+0x39c>
 8007d60:	07db      	lsls	r3, r3, #31
 8007d62:	d537      	bpl.n	8007dd4 <_printf_float+0x40c>
 8007d64:	2301      	movs	r3, #1
 8007d66:	4642      	mov	r2, r8
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	47b8      	blx	r7
 8007d6e:	3001      	adds	r0, #1
 8007d70:	f43f ae78 	beq.w	8007a64 <_printf_float+0x9c>
 8007d74:	4653      	mov	r3, sl
 8007d76:	465a      	mov	r2, fp
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	f43f ae70 	beq.w	8007a64 <_printf_float+0x9c>
 8007d84:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007d88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d90:	d01b      	beq.n	8007dca <_printf_float+0x402>
 8007d92:	9b08      	ldr	r3, [sp, #32]
 8007d94:	f108 0201 	add.w	r2, r8, #1
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	4631      	mov	r1, r6
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	47b8      	blx	r7
 8007da0:	3001      	adds	r0, #1
 8007da2:	d10e      	bne.n	8007dc2 <_printf_float+0x3fa>
 8007da4:	e65e      	b.n	8007a64 <_printf_float+0x9c>
 8007da6:	2301      	movs	r3, #1
 8007da8:	464a      	mov	r2, r9
 8007daa:	4631      	mov	r1, r6
 8007dac:	4628      	mov	r0, r5
 8007dae:	47b8      	blx	r7
 8007db0:	3001      	adds	r0, #1
 8007db2:	f43f ae57 	beq.w	8007a64 <_printf_float+0x9c>
 8007db6:	f108 0801 	add.w	r8, r8, #1
 8007dba:	9b08      	ldr	r3, [sp, #32]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4543      	cmp	r3, r8
 8007dc0:	dcf1      	bgt.n	8007da6 <_printf_float+0x3de>
 8007dc2:	9b04      	ldr	r3, [sp, #16]
 8007dc4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007dc8:	e6db      	b.n	8007b82 <_printf_float+0x1ba>
 8007dca:	f04f 0800 	mov.w	r8, #0
 8007dce:	f104 091a 	add.w	r9, r4, #26
 8007dd2:	e7f2      	b.n	8007dba <_printf_float+0x3f2>
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	e7df      	b.n	8007d9a <_printf_float+0x3d2>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	464a      	mov	r2, r9
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f ae3d 	beq.w	8007a64 <_printf_float+0x9c>
 8007dea:	f108 0801 	add.w	r8, r8, #1
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df2:	1a5b      	subs	r3, r3, r1
 8007df4:	4543      	cmp	r3, r8
 8007df6:	dcf0      	bgt.n	8007dda <_printf_float+0x412>
 8007df8:	e6f7      	b.n	8007bea <_printf_float+0x222>
 8007dfa:	f04f 0800 	mov.w	r8, #0
 8007dfe:	f104 0919 	add.w	r9, r4, #25
 8007e02:	e7f4      	b.n	8007dee <_printf_float+0x426>

08007e04 <_printf_common>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	4616      	mov	r6, r2
 8007e0a:	4699      	mov	r9, r3
 8007e0c:	688a      	ldr	r2, [r1, #8]
 8007e0e:	690b      	ldr	r3, [r1, #16]
 8007e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e14:	4293      	cmp	r3, r2
 8007e16:	bfb8      	it	lt
 8007e18:	4613      	movlt	r3, r2
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e20:	4607      	mov	r7, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	b10a      	cbz	r2, 8007e2a <_printf_common+0x26>
 8007e26:	3301      	adds	r3, #1
 8007e28:	6033      	str	r3, [r6, #0]
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	0699      	lsls	r1, r3, #26
 8007e2e:	bf42      	ittt	mi
 8007e30:	6833      	ldrmi	r3, [r6, #0]
 8007e32:	3302      	addmi	r3, #2
 8007e34:	6033      	strmi	r3, [r6, #0]
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	f015 0506 	ands.w	r5, r5, #6
 8007e3c:	d106      	bne.n	8007e4c <_printf_common+0x48>
 8007e3e:	f104 0a19 	add.w	sl, r4, #25
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	6832      	ldr	r2, [r6, #0]
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	42ab      	cmp	r3, r5
 8007e4a:	dc26      	bgt.n	8007e9a <_printf_common+0x96>
 8007e4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e50:	1e13      	subs	r3, r2, #0
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	bf18      	it	ne
 8007e56:	2301      	movne	r3, #1
 8007e58:	0692      	lsls	r2, r2, #26
 8007e5a:	d42b      	bmi.n	8007eb4 <_printf_common+0xb0>
 8007e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e60:	4649      	mov	r1, r9
 8007e62:	4638      	mov	r0, r7
 8007e64:	47c0      	blx	r8
 8007e66:	3001      	adds	r0, #1
 8007e68:	d01e      	beq.n	8007ea8 <_printf_common+0xa4>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	68e5      	ldr	r5, [r4, #12]
 8007e6e:	6832      	ldr	r2, [r6, #0]
 8007e70:	f003 0306 	and.w	r3, r3, #6
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	bf08      	it	eq
 8007e78:	1aad      	subeq	r5, r5, r2
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	6922      	ldr	r2, [r4, #16]
 8007e7e:	bf0c      	ite	eq
 8007e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e84:	2500      	movne	r5, #0
 8007e86:	4293      	cmp	r3, r2
 8007e88:	bfc4      	itt	gt
 8007e8a:	1a9b      	subgt	r3, r3, r2
 8007e8c:	18ed      	addgt	r5, r5, r3
 8007e8e:	2600      	movs	r6, #0
 8007e90:	341a      	adds	r4, #26
 8007e92:	42b5      	cmp	r5, r6
 8007e94:	d11a      	bne.n	8007ecc <_printf_common+0xc8>
 8007e96:	2000      	movs	r0, #0
 8007e98:	e008      	b.n	8007eac <_printf_common+0xa8>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	4652      	mov	r2, sl
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	47c0      	blx	r8
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	d103      	bne.n	8007eb0 <_printf_common+0xac>
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	e7c6      	b.n	8007e42 <_printf_common+0x3e>
 8007eb4:	18e1      	adds	r1, r4, r3
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	2030      	movs	r0, #48	; 0x30
 8007eba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ebe:	4422      	add	r2, r4
 8007ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ec4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ec8:	3302      	adds	r3, #2
 8007eca:	e7c7      	b.n	8007e5c <_printf_common+0x58>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	47c0      	blx	r8
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d0e6      	beq.n	8007ea8 <_printf_common+0xa4>
 8007eda:	3601      	adds	r6, #1
 8007edc:	e7d9      	b.n	8007e92 <_printf_common+0x8e>
	...

08007ee0 <_printf_i>:
 8007ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	7e0f      	ldrb	r7, [r1, #24]
 8007ee6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ee8:	2f78      	cmp	r7, #120	; 0x78
 8007eea:	4691      	mov	r9, r2
 8007eec:	4680      	mov	r8, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	469a      	mov	sl, r3
 8007ef2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ef6:	d807      	bhi.n	8007f08 <_printf_i+0x28>
 8007ef8:	2f62      	cmp	r7, #98	; 0x62
 8007efa:	d80a      	bhi.n	8007f12 <_printf_i+0x32>
 8007efc:	2f00      	cmp	r7, #0
 8007efe:	f000 80d8 	beq.w	80080b2 <_printf_i+0x1d2>
 8007f02:	2f58      	cmp	r7, #88	; 0x58
 8007f04:	f000 80a3 	beq.w	800804e <_printf_i+0x16e>
 8007f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f10:	e03a      	b.n	8007f88 <_printf_i+0xa8>
 8007f12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f16:	2b15      	cmp	r3, #21
 8007f18:	d8f6      	bhi.n	8007f08 <_printf_i+0x28>
 8007f1a:	a101      	add	r1, pc, #4	; (adr r1, 8007f20 <_printf_i+0x40>)
 8007f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f8d 	.word	0x08007f8d
 8007f28:	08007f09 	.word	0x08007f09
 8007f2c:	08007f09 	.word	0x08007f09
 8007f30:	08007f09 	.word	0x08007f09
 8007f34:	08007f09 	.word	0x08007f09
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007f09 	.word	0x08007f09
 8007f40:	08007f09 	.word	0x08007f09
 8007f44:	08007f09 	.word	0x08007f09
 8007f48:	08007f09 	.word	0x08007f09
 8007f4c:	08008099 	.word	0x08008099
 8007f50:	08007fbd 	.word	0x08007fbd
 8007f54:	0800807b 	.word	0x0800807b
 8007f58:	08007f09 	.word	0x08007f09
 8007f5c:	08007f09 	.word	0x08007f09
 8007f60:	080080bb 	.word	0x080080bb
 8007f64:	08007f09 	.word	0x08007f09
 8007f68:	08007fbd 	.word	0x08007fbd
 8007f6c:	08007f09 	.word	0x08007f09
 8007f70:	08007f09 	.word	0x08007f09
 8007f74:	08008083 	.word	0x08008083
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	1d1a      	adds	r2, r3, #4
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	602a      	str	r2, [r5, #0]
 8007f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e0a3      	b.n	80080d4 <_printf_i+0x1f4>
 8007f8c:	6820      	ldr	r0, [r4, #0]
 8007f8e:	6829      	ldr	r1, [r5, #0]
 8007f90:	0606      	lsls	r6, r0, #24
 8007f92:	f101 0304 	add.w	r3, r1, #4
 8007f96:	d50a      	bpl.n	8007fae <_printf_i+0xce>
 8007f98:	680e      	ldr	r6, [r1, #0]
 8007f9a:	602b      	str	r3, [r5, #0]
 8007f9c:	2e00      	cmp	r6, #0
 8007f9e:	da03      	bge.n	8007fa8 <_printf_i+0xc8>
 8007fa0:	232d      	movs	r3, #45	; 0x2d
 8007fa2:	4276      	negs	r6, r6
 8007fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa8:	485e      	ldr	r0, [pc, #376]	; (8008124 <_printf_i+0x244>)
 8007faa:	230a      	movs	r3, #10
 8007fac:	e019      	b.n	8007fe2 <_printf_i+0x102>
 8007fae:	680e      	ldr	r6, [r1, #0]
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fb6:	bf18      	it	ne
 8007fb8:	b236      	sxthne	r6, r6
 8007fba:	e7ef      	b.n	8007f9c <_printf_i+0xbc>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	6820      	ldr	r0, [r4, #0]
 8007fc0:	1d19      	adds	r1, r3, #4
 8007fc2:	6029      	str	r1, [r5, #0]
 8007fc4:	0601      	lsls	r1, r0, #24
 8007fc6:	d501      	bpl.n	8007fcc <_printf_i+0xec>
 8007fc8:	681e      	ldr	r6, [r3, #0]
 8007fca:	e002      	b.n	8007fd2 <_printf_i+0xf2>
 8007fcc:	0646      	lsls	r6, r0, #25
 8007fce:	d5fb      	bpl.n	8007fc8 <_printf_i+0xe8>
 8007fd0:	881e      	ldrh	r6, [r3, #0]
 8007fd2:	4854      	ldr	r0, [pc, #336]	; (8008124 <_printf_i+0x244>)
 8007fd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2308      	moveq	r3, #8
 8007fda:	230a      	movne	r3, #10
 8007fdc:	2100      	movs	r1, #0
 8007fde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fe2:	6865      	ldr	r5, [r4, #4]
 8007fe4:	60a5      	str	r5, [r4, #8]
 8007fe6:	2d00      	cmp	r5, #0
 8007fe8:	bfa2      	ittt	ge
 8007fea:	6821      	ldrge	r1, [r4, #0]
 8007fec:	f021 0104 	bicge.w	r1, r1, #4
 8007ff0:	6021      	strge	r1, [r4, #0]
 8007ff2:	b90e      	cbnz	r6, 8007ff8 <_printf_i+0x118>
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	d04d      	beq.n	8008094 <_printf_i+0x1b4>
 8007ff8:	4615      	mov	r5, r2
 8007ffa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ffe:	fb03 6711 	mls	r7, r3, r1, r6
 8008002:	5dc7      	ldrb	r7, [r0, r7]
 8008004:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008008:	4637      	mov	r7, r6
 800800a:	42bb      	cmp	r3, r7
 800800c:	460e      	mov	r6, r1
 800800e:	d9f4      	bls.n	8007ffa <_printf_i+0x11a>
 8008010:	2b08      	cmp	r3, #8
 8008012:	d10b      	bne.n	800802c <_printf_i+0x14c>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	07de      	lsls	r6, r3, #31
 8008018:	d508      	bpl.n	800802c <_printf_i+0x14c>
 800801a:	6923      	ldr	r3, [r4, #16]
 800801c:	6861      	ldr	r1, [r4, #4]
 800801e:	4299      	cmp	r1, r3
 8008020:	bfde      	ittt	le
 8008022:	2330      	movle	r3, #48	; 0x30
 8008024:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008028:	f105 35ff 	addle.w	r5, r5, #4294967295
 800802c:	1b52      	subs	r2, r2, r5
 800802e:	6122      	str	r2, [r4, #16]
 8008030:	f8cd a000 	str.w	sl, [sp]
 8008034:	464b      	mov	r3, r9
 8008036:	aa03      	add	r2, sp, #12
 8008038:	4621      	mov	r1, r4
 800803a:	4640      	mov	r0, r8
 800803c:	f7ff fee2 	bl	8007e04 <_printf_common>
 8008040:	3001      	adds	r0, #1
 8008042:	d14c      	bne.n	80080de <_printf_i+0x1fe>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	b004      	add	sp, #16
 800804a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804e:	4835      	ldr	r0, [pc, #212]	; (8008124 <_printf_i+0x244>)
 8008050:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008054:	6829      	ldr	r1, [r5, #0]
 8008056:	6823      	ldr	r3, [r4, #0]
 8008058:	f851 6b04 	ldr.w	r6, [r1], #4
 800805c:	6029      	str	r1, [r5, #0]
 800805e:	061d      	lsls	r5, r3, #24
 8008060:	d514      	bpl.n	800808c <_printf_i+0x1ac>
 8008062:	07df      	lsls	r7, r3, #31
 8008064:	bf44      	itt	mi
 8008066:	f043 0320 	orrmi.w	r3, r3, #32
 800806a:	6023      	strmi	r3, [r4, #0]
 800806c:	b91e      	cbnz	r6, 8008076 <_printf_i+0x196>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	f023 0320 	bic.w	r3, r3, #32
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	2310      	movs	r3, #16
 8008078:	e7b0      	b.n	8007fdc <_printf_i+0xfc>
 800807a:	6823      	ldr	r3, [r4, #0]
 800807c:	f043 0320 	orr.w	r3, r3, #32
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	2378      	movs	r3, #120	; 0x78
 8008084:	4828      	ldr	r0, [pc, #160]	; (8008128 <_printf_i+0x248>)
 8008086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800808a:	e7e3      	b.n	8008054 <_printf_i+0x174>
 800808c:	0659      	lsls	r1, r3, #25
 800808e:	bf48      	it	mi
 8008090:	b2b6      	uxthmi	r6, r6
 8008092:	e7e6      	b.n	8008062 <_printf_i+0x182>
 8008094:	4615      	mov	r5, r2
 8008096:	e7bb      	b.n	8008010 <_printf_i+0x130>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	6826      	ldr	r6, [r4, #0]
 800809c:	6961      	ldr	r1, [r4, #20]
 800809e:	1d18      	adds	r0, r3, #4
 80080a0:	6028      	str	r0, [r5, #0]
 80080a2:	0635      	lsls	r5, r6, #24
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	d501      	bpl.n	80080ac <_printf_i+0x1cc>
 80080a8:	6019      	str	r1, [r3, #0]
 80080aa:	e002      	b.n	80080b2 <_printf_i+0x1d2>
 80080ac:	0670      	lsls	r0, r6, #25
 80080ae:	d5fb      	bpl.n	80080a8 <_printf_i+0x1c8>
 80080b0:	8019      	strh	r1, [r3, #0]
 80080b2:	2300      	movs	r3, #0
 80080b4:	6123      	str	r3, [r4, #16]
 80080b6:	4615      	mov	r5, r2
 80080b8:	e7ba      	b.n	8008030 <_printf_i+0x150>
 80080ba:	682b      	ldr	r3, [r5, #0]
 80080bc:	1d1a      	adds	r2, r3, #4
 80080be:	602a      	str	r2, [r5, #0]
 80080c0:	681d      	ldr	r5, [r3, #0]
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	2100      	movs	r1, #0
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7f8 f8c2 	bl	8000250 <memchr>
 80080cc:	b108      	cbz	r0, 80080d2 <_printf_i+0x1f2>
 80080ce:	1b40      	subs	r0, r0, r5
 80080d0:	6060      	str	r0, [r4, #4]
 80080d2:	6863      	ldr	r3, [r4, #4]
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	2300      	movs	r3, #0
 80080d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080dc:	e7a8      	b.n	8008030 <_printf_i+0x150>
 80080de:	6923      	ldr	r3, [r4, #16]
 80080e0:	462a      	mov	r2, r5
 80080e2:	4649      	mov	r1, r9
 80080e4:	4640      	mov	r0, r8
 80080e6:	47d0      	blx	sl
 80080e8:	3001      	adds	r0, #1
 80080ea:	d0ab      	beq.n	8008044 <_printf_i+0x164>
 80080ec:	6823      	ldr	r3, [r4, #0]
 80080ee:	079b      	lsls	r3, r3, #30
 80080f0:	d413      	bmi.n	800811a <_printf_i+0x23a>
 80080f2:	68e0      	ldr	r0, [r4, #12]
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	4298      	cmp	r0, r3
 80080f8:	bfb8      	it	lt
 80080fa:	4618      	movlt	r0, r3
 80080fc:	e7a4      	b.n	8008048 <_printf_i+0x168>
 80080fe:	2301      	movs	r3, #1
 8008100:	4632      	mov	r2, r6
 8008102:	4649      	mov	r1, r9
 8008104:	4640      	mov	r0, r8
 8008106:	47d0      	blx	sl
 8008108:	3001      	adds	r0, #1
 800810a:	d09b      	beq.n	8008044 <_printf_i+0x164>
 800810c:	3501      	adds	r5, #1
 800810e:	68e3      	ldr	r3, [r4, #12]
 8008110:	9903      	ldr	r1, [sp, #12]
 8008112:	1a5b      	subs	r3, r3, r1
 8008114:	42ab      	cmp	r3, r5
 8008116:	dcf2      	bgt.n	80080fe <_printf_i+0x21e>
 8008118:	e7eb      	b.n	80080f2 <_printf_i+0x212>
 800811a:	2500      	movs	r5, #0
 800811c:	f104 0619 	add.w	r6, r4, #25
 8008120:	e7f5      	b.n	800810e <_printf_i+0x22e>
 8008122:	bf00      	nop
 8008124:	0800d016 	.word	0x0800d016
 8008128:	0800d027 	.word	0x0800d027

0800812c <_scanf_float>:
 800812c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008130:	b087      	sub	sp, #28
 8008132:	4617      	mov	r7, r2
 8008134:	9303      	str	r3, [sp, #12]
 8008136:	688b      	ldr	r3, [r1, #8]
 8008138:	1e5a      	subs	r2, r3, #1
 800813a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800813e:	bf83      	ittte	hi
 8008140:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008144:	195b      	addhi	r3, r3, r5
 8008146:	9302      	strhi	r3, [sp, #8]
 8008148:	2300      	movls	r3, #0
 800814a:	bf86      	itte	hi
 800814c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008150:	608b      	strhi	r3, [r1, #8]
 8008152:	9302      	strls	r3, [sp, #8]
 8008154:	680b      	ldr	r3, [r1, #0]
 8008156:	468b      	mov	fp, r1
 8008158:	2500      	movs	r5, #0
 800815a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800815e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008162:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008166:	4680      	mov	r8, r0
 8008168:	460c      	mov	r4, r1
 800816a:	465e      	mov	r6, fp
 800816c:	46aa      	mov	sl, r5
 800816e:	46a9      	mov	r9, r5
 8008170:	9501      	str	r5, [sp, #4]
 8008172:	68a2      	ldr	r2, [r4, #8]
 8008174:	b152      	cbz	r2, 800818c <_scanf_float+0x60>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b4e      	cmp	r3, #78	; 0x4e
 800817c:	d864      	bhi.n	8008248 <_scanf_float+0x11c>
 800817e:	2b40      	cmp	r3, #64	; 0x40
 8008180:	d83c      	bhi.n	80081fc <_scanf_float+0xd0>
 8008182:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008186:	b2c8      	uxtb	r0, r1
 8008188:	280e      	cmp	r0, #14
 800818a:	d93a      	bls.n	8008202 <_scanf_float+0xd6>
 800818c:	f1b9 0f00 	cmp.w	r9, #0
 8008190:	d003      	beq.n	800819a <_scanf_float+0x6e>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800819e:	f1ba 0f01 	cmp.w	sl, #1
 80081a2:	f200 8113 	bhi.w	80083cc <_scanf_float+0x2a0>
 80081a6:	455e      	cmp	r6, fp
 80081a8:	f200 8105 	bhi.w	80083b6 <_scanf_float+0x28a>
 80081ac:	2501      	movs	r5, #1
 80081ae:	4628      	mov	r0, r5
 80081b0:	b007      	add	sp, #28
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80081ba:	2a0d      	cmp	r2, #13
 80081bc:	d8e6      	bhi.n	800818c <_scanf_float+0x60>
 80081be:	a101      	add	r1, pc, #4	; (adr r1, 80081c4 <_scanf_float+0x98>)
 80081c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081c4:	08008303 	.word	0x08008303
 80081c8:	0800818d 	.word	0x0800818d
 80081cc:	0800818d 	.word	0x0800818d
 80081d0:	0800818d 	.word	0x0800818d
 80081d4:	08008363 	.word	0x08008363
 80081d8:	0800833b 	.word	0x0800833b
 80081dc:	0800818d 	.word	0x0800818d
 80081e0:	0800818d 	.word	0x0800818d
 80081e4:	08008311 	.word	0x08008311
 80081e8:	0800818d 	.word	0x0800818d
 80081ec:	0800818d 	.word	0x0800818d
 80081f0:	0800818d 	.word	0x0800818d
 80081f4:	0800818d 	.word	0x0800818d
 80081f8:	080082c9 	.word	0x080082c9
 80081fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008200:	e7db      	b.n	80081ba <_scanf_float+0x8e>
 8008202:	290e      	cmp	r1, #14
 8008204:	d8c2      	bhi.n	800818c <_scanf_float+0x60>
 8008206:	a001      	add	r0, pc, #4	; (adr r0, 800820c <_scanf_float+0xe0>)
 8008208:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800820c:	080082bb 	.word	0x080082bb
 8008210:	0800818d 	.word	0x0800818d
 8008214:	080082bb 	.word	0x080082bb
 8008218:	0800834f 	.word	0x0800834f
 800821c:	0800818d 	.word	0x0800818d
 8008220:	08008269 	.word	0x08008269
 8008224:	080082a5 	.word	0x080082a5
 8008228:	080082a5 	.word	0x080082a5
 800822c:	080082a5 	.word	0x080082a5
 8008230:	080082a5 	.word	0x080082a5
 8008234:	080082a5 	.word	0x080082a5
 8008238:	080082a5 	.word	0x080082a5
 800823c:	080082a5 	.word	0x080082a5
 8008240:	080082a5 	.word	0x080082a5
 8008244:	080082a5 	.word	0x080082a5
 8008248:	2b6e      	cmp	r3, #110	; 0x6e
 800824a:	d809      	bhi.n	8008260 <_scanf_float+0x134>
 800824c:	2b60      	cmp	r3, #96	; 0x60
 800824e:	d8b2      	bhi.n	80081b6 <_scanf_float+0x8a>
 8008250:	2b54      	cmp	r3, #84	; 0x54
 8008252:	d077      	beq.n	8008344 <_scanf_float+0x218>
 8008254:	2b59      	cmp	r3, #89	; 0x59
 8008256:	d199      	bne.n	800818c <_scanf_float+0x60>
 8008258:	2d07      	cmp	r5, #7
 800825a:	d197      	bne.n	800818c <_scanf_float+0x60>
 800825c:	2508      	movs	r5, #8
 800825e:	e029      	b.n	80082b4 <_scanf_float+0x188>
 8008260:	2b74      	cmp	r3, #116	; 0x74
 8008262:	d06f      	beq.n	8008344 <_scanf_float+0x218>
 8008264:	2b79      	cmp	r3, #121	; 0x79
 8008266:	e7f6      	b.n	8008256 <_scanf_float+0x12a>
 8008268:	6821      	ldr	r1, [r4, #0]
 800826a:	05c8      	lsls	r0, r1, #23
 800826c:	d51a      	bpl.n	80082a4 <_scanf_float+0x178>
 800826e:	9b02      	ldr	r3, [sp, #8]
 8008270:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008274:	6021      	str	r1, [r4, #0]
 8008276:	f109 0901 	add.w	r9, r9, #1
 800827a:	b11b      	cbz	r3, 8008284 <_scanf_float+0x158>
 800827c:	3b01      	subs	r3, #1
 800827e:	3201      	adds	r2, #1
 8008280:	9302      	str	r3, [sp, #8]
 8008282:	60a2      	str	r2, [r4, #8]
 8008284:	68a3      	ldr	r3, [r4, #8]
 8008286:	3b01      	subs	r3, #1
 8008288:	60a3      	str	r3, [r4, #8]
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	3301      	adds	r3, #1
 800828e:	6123      	str	r3, [r4, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3b01      	subs	r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	607b      	str	r3, [r7, #4]
 8008298:	f340 8084 	ble.w	80083a4 <_scanf_float+0x278>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	3301      	adds	r3, #1
 80082a0:	603b      	str	r3, [r7, #0]
 80082a2:	e766      	b.n	8008172 <_scanf_float+0x46>
 80082a4:	eb1a 0f05 	cmn.w	sl, r5
 80082a8:	f47f af70 	bne.w	800818c <_scanf_float+0x60>
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80082b2:	6022      	str	r2, [r4, #0]
 80082b4:	f806 3b01 	strb.w	r3, [r6], #1
 80082b8:	e7e4      	b.n	8008284 <_scanf_float+0x158>
 80082ba:	6822      	ldr	r2, [r4, #0]
 80082bc:	0610      	lsls	r0, r2, #24
 80082be:	f57f af65 	bpl.w	800818c <_scanf_float+0x60>
 80082c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082c6:	e7f4      	b.n	80082b2 <_scanf_float+0x186>
 80082c8:	f1ba 0f00 	cmp.w	sl, #0
 80082cc:	d10e      	bne.n	80082ec <_scanf_float+0x1c0>
 80082ce:	f1b9 0f00 	cmp.w	r9, #0
 80082d2:	d10e      	bne.n	80082f2 <_scanf_float+0x1c6>
 80082d4:	6822      	ldr	r2, [r4, #0]
 80082d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082de:	d108      	bne.n	80082f2 <_scanf_float+0x1c6>
 80082e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082e4:	6022      	str	r2, [r4, #0]
 80082e6:	f04f 0a01 	mov.w	sl, #1
 80082ea:	e7e3      	b.n	80082b4 <_scanf_float+0x188>
 80082ec:	f1ba 0f02 	cmp.w	sl, #2
 80082f0:	d055      	beq.n	800839e <_scanf_float+0x272>
 80082f2:	2d01      	cmp	r5, #1
 80082f4:	d002      	beq.n	80082fc <_scanf_float+0x1d0>
 80082f6:	2d04      	cmp	r5, #4
 80082f8:	f47f af48 	bne.w	800818c <_scanf_float+0x60>
 80082fc:	3501      	adds	r5, #1
 80082fe:	b2ed      	uxtb	r5, r5
 8008300:	e7d8      	b.n	80082b4 <_scanf_float+0x188>
 8008302:	f1ba 0f01 	cmp.w	sl, #1
 8008306:	f47f af41 	bne.w	800818c <_scanf_float+0x60>
 800830a:	f04f 0a02 	mov.w	sl, #2
 800830e:	e7d1      	b.n	80082b4 <_scanf_float+0x188>
 8008310:	b97d      	cbnz	r5, 8008332 <_scanf_float+0x206>
 8008312:	f1b9 0f00 	cmp.w	r9, #0
 8008316:	f47f af3c 	bne.w	8008192 <_scanf_float+0x66>
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008320:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008324:	f47f af39 	bne.w	800819a <_scanf_float+0x6e>
 8008328:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800832c:	6022      	str	r2, [r4, #0]
 800832e:	2501      	movs	r5, #1
 8008330:	e7c0      	b.n	80082b4 <_scanf_float+0x188>
 8008332:	2d03      	cmp	r5, #3
 8008334:	d0e2      	beq.n	80082fc <_scanf_float+0x1d0>
 8008336:	2d05      	cmp	r5, #5
 8008338:	e7de      	b.n	80082f8 <_scanf_float+0x1cc>
 800833a:	2d02      	cmp	r5, #2
 800833c:	f47f af26 	bne.w	800818c <_scanf_float+0x60>
 8008340:	2503      	movs	r5, #3
 8008342:	e7b7      	b.n	80082b4 <_scanf_float+0x188>
 8008344:	2d06      	cmp	r5, #6
 8008346:	f47f af21 	bne.w	800818c <_scanf_float+0x60>
 800834a:	2507      	movs	r5, #7
 800834c:	e7b2      	b.n	80082b4 <_scanf_float+0x188>
 800834e:	6822      	ldr	r2, [r4, #0]
 8008350:	0591      	lsls	r1, r2, #22
 8008352:	f57f af1b 	bpl.w	800818c <_scanf_float+0x60>
 8008356:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800835a:	6022      	str	r2, [r4, #0]
 800835c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008360:	e7a8      	b.n	80082b4 <_scanf_float+0x188>
 8008362:	6822      	ldr	r2, [r4, #0]
 8008364:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008368:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800836c:	d006      	beq.n	800837c <_scanf_float+0x250>
 800836e:	0550      	lsls	r0, r2, #21
 8008370:	f57f af0c 	bpl.w	800818c <_scanf_float+0x60>
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	f43f af0f 	beq.w	800819a <_scanf_float+0x6e>
 800837c:	0591      	lsls	r1, r2, #22
 800837e:	bf58      	it	pl
 8008380:	9901      	ldrpl	r1, [sp, #4]
 8008382:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008386:	bf58      	it	pl
 8008388:	eba9 0101 	subpl.w	r1, r9, r1
 800838c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008390:	bf58      	it	pl
 8008392:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008396:	6022      	str	r2, [r4, #0]
 8008398:	f04f 0900 	mov.w	r9, #0
 800839c:	e78a      	b.n	80082b4 <_scanf_float+0x188>
 800839e:	f04f 0a03 	mov.w	sl, #3
 80083a2:	e787      	b.n	80082b4 <_scanf_float+0x188>
 80083a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083a8:	4639      	mov	r1, r7
 80083aa:	4640      	mov	r0, r8
 80083ac:	4798      	blx	r3
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f43f aedf 	beq.w	8008172 <_scanf_float+0x46>
 80083b4:	e6ea      	b.n	800818c <_scanf_float+0x60>
 80083b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083be:	463a      	mov	r2, r7
 80083c0:	4640      	mov	r0, r8
 80083c2:	4798      	blx	r3
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	e6ec      	b.n	80081a6 <_scanf_float+0x7a>
 80083cc:	1e6b      	subs	r3, r5, #1
 80083ce:	2b06      	cmp	r3, #6
 80083d0:	d825      	bhi.n	800841e <_scanf_float+0x2f2>
 80083d2:	2d02      	cmp	r5, #2
 80083d4:	d836      	bhi.n	8008444 <_scanf_float+0x318>
 80083d6:	455e      	cmp	r6, fp
 80083d8:	f67f aee8 	bls.w	80081ac <_scanf_float+0x80>
 80083dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083e4:	463a      	mov	r2, r7
 80083e6:	4640      	mov	r0, r8
 80083e8:	4798      	blx	r3
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	e7f1      	b.n	80083d6 <_scanf_float+0x2aa>
 80083f2:	9802      	ldr	r0, [sp, #8]
 80083f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80083fc:	9002      	str	r0, [sp, #8]
 80083fe:	463a      	mov	r2, r7
 8008400:	4640      	mov	r0, r8
 8008402:	4798      	blx	r3
 8008404:	6923      	ldr	r3, [r4, #16]
 8008406:	3b01      	subs	r3, #1
 8008408:	6123      	str	r3, [r4, #16]
 800840a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800840e:	fa5f fa8a 	uxtb.w	sl, sl
 8008412:	f1ba 0f02 	cmp.w	sl, #2
 8008416:	d1ec      	bne.n	80083f2 <_scanf_float+0x2c6>
 8008418:	3d03      	subs	r5, #3
 800841a:	b2ed      	uxtb	r5, r5
 800841c:	1b76      	subs	r6, r6, r5
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	05da      	lsls	r2, r3, #23
 8008422:	d52f      	bpl.n	8008484 <_scanf_float+0x358>
 8008424:	055b      	lsls	r3, r3, #21
 8008426:	d510      	bpl.n	800844a <_scanf_float+0x31e>
 8008428:	455e      	cmp	r6, fp
 800842a:	f67f aebf 	bls.w	80081ac <_scanf_float+0x80>
 800842e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008436:	463a      	mov	r2, r7
 8008438:	4640      	mov	r0, r8
 800843a:	4798      	blx	r3
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	3b01      	subs	r3, #1
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	e7f1      	b.n	8008428 <_scanf_float+0x2fc>
 8008444:	46aa      	mov	sl, r5
 8008446:	9602      	str	r6, [sp, #8]
 8008448:	e7df      	b.n	800840a <_scanf_float+0x2de>
 800844a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800844e:	6923      	ldr	r3, [r4, #16]
 8008450:	2965      	cmp	r1, #101	; 0x65
 8008452:	f103 33ff 	add.w	r3, r3, #4294967295
 8008456:	f106 35ff 	add.w	r5, r6, #4294967295
 800845a:	6123      	str	r3, [r4, #16]
 800845c:	d00c      	beq.n	8008478 <_scanf_float+0x34c>
 800845e:	2945      	cmp	r1, #69	; 0x45
 8008460:	d00a      	beq.n	8008478 <_scanf_float+0x34c>
 8008462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008466:	463a      	mov	r2, r7
 8008468:	4640      	mov	r0, r8
 800846a:	4798      	blx	r3
 800846c:	6923      	ldr	r3, [r4, #16]
 800846e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008472:	3b01      	subs	r3, #1
 8008474:	1eb5      	subs	r5, r6, #2
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800847c:	463a      	mov	r2, r7
 800847e:	4640      	mov	r0, r8
 8008480:	4798      	blx	r3
 8008482:	462e      	mov	r6, r5
 8008484:	6825      	ldr	r5, [r4, #0]
 8008486:	f015 0510 	ands.w	r5, r5, #16
 800848a:	d14e      	bne.n	800852a <_scanf_float+0x3fe>
 800848c:	7035      	strb	r5, [r6, #0]
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008498:	d119      	bne.n	80084ce <_scanf_float+0x3a2>
 800849a:	9b01      	ldr	r3, [sp, #4]
 800849c:	454b      	cmp	r3, r9
 800849e:	eba3 0209 	sub.w	r2, r3, r9
 80084a2:	d121      	bne.n	80084e8 <_scanf_float+0x3bc>
 80084a4:	2200      	movs	r2, #0
 80084a6:	4659      	mov	r1, fp
 80084a8:	4640      	mov	r0, r8
 80084aa:	f000 fe4b 	bl	8009144 <_strtod_r>
 80084ae:	6822      	ldr	r2, [r4, #0]
 80084b0:	9b03      	ldr	r3, [sp, #12]
 80084b2:	f012 0f02 	tst.w	r2, #2
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	d021      	beq.n	80084fe <_scanf_float+0x3d2>
 80084ba:	9903      	ldr	r1, [sp, #12]
 80084bc:	1d1a      	adds	r2, r3, #4
 80084be:	600a      	str	r2, [r1, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	ed83 0b00 	vstr	d0, [r3]
 80084c6:	68e3      	ldr	r3, [r4, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60e3      	str	r3, [r4, #12]
 80084cc:	e66f      	b.n	80081ae <_scanf_float+0x82>
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d0e7      	beq.n	80084a4 <_scanf_float+0x378>
 80084d4:	9905      	ldr	r1, [sp, #20]
 80084d6:	230a      	movs	r3, #10
 80084d8:	462a      	mov	r2, r5
 80084da:	3101      	adds	r1, #1
 80084dc:	4640      	mov	r0, r8
 80084de:	f000 feb9 	bl	8009254 <_strtol_r>
 80084e2:	9b04      	ldr	r3, [sp, #16]
 80084e4:	9e05      	ldr	r6, [sp, #20]
 80084e6:	1ac2      	subs	r2, r0, r3
 80084e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80084ec:	429e      	cmp	r6, r3
 80084ee:	bf28      	it	cs
 80084f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80084f4:	490e      	ldr	r1, [pc, #56]	; (8008530 <_scanf_float+0x404>)
 80084f6:	4630      	mov	r0, r6
 80084f8:	f000 f834 	bl	8008564 <siprintf>
 80084fc:	e7d2      	b.n	80084a4 <_scanf_float+0x378>
 80084fe:	9903      	ldr	r1, [sp, #12]
 8008500:	f012 0f04 	tst.w	r2, #4
 8008504:	f103 0204 	add.w	r2, r3, #4
 8008508:	600a      	str	r2, [r1, #0]
 800850a:	d1d9      	bne.n	80084c0 <_scanf_float+0x394>
 800850c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008514:	681e      	ldr	r6, [r3, #0]
 8008516:	d705      	bvc.n	8008524 <_scanf_float+0x3f8>
 8008518:	4806      	ldr	r0, [pc, #24]	; (8008534 <_scanf_float+0x408>)
 800851a:	f000 f81d 	bl	8008558 <nanf>
 800851e:	ed86 0a00 	vstr	s0, [r6]
 8008522:	e7d0      	b.n	80084c6 <_scanf_float+0x39a>
 8008524:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008528:	e7f9      	b.n	800851e <_scanf_float+0x3f2>
 800852a:	2500      	movs	r5, #0
 800852c:	e63f      	b.n	80081ae <_scanf_float+0x82>
 800852e:	bf00      	nop
 8008530:	0800d038 	.word	0x0800d038
 8008534:	0800d4a8 	.word	0x0800d4a8

08008538 <_sbrk_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d06      	ldr	r5, [pc, #24]	; (8008554 <_sbrk_r+0x1c>)
 800853c:	2300      	movs	r3, #0
 800853e:	4604      	mov	r4, r0
 8008540:	4608      	mov	r0, r1
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	f7f9 f89a 	bl	800167c <_sbrk>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_sbrk_r+0x1a>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_sbrk_r+0x1a>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	200008fc 	.word	0x200008fc

08008558 <nanf>:
 8008558:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008560 <nanf+0x8>
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	7fc00000 	.word	0x7fc00000

08008564 <siprintf>:
 8008564:	b40e      	push	{r1, r2, r3}
 8008566:	b500      	push	{lr}
 8008568:	b09c      	sub	sp, #112	; 0x70
 800856a:	ab1d      	add	r3, sp, #116	; 0x74
 800856c:	9002      	str	r0, [sp, #8]
 800856e:	9006      	str	r0, [sp, #24]
 8008570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008574:	4809      	ldr	r0, [pc, #36]	; (800859c <siprintf+0x38>)
 8008576:	9107      	str	r1, [sp, #28]
 8008578:	9104      	str	r1, [sp, #16]
 800857a:	4909      	ldr	r1, [pc, #36]	; (80085a0 <siprintf+0x3c>)
 800857c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008580:	9105      	str	r1, [sp, #20]
 8008582:	6800      	ldr	r0, [r0, #0]
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	a902      	add	r1, sp, #8
 8008588:	f002 fd22 	bl	800afd0 <_svfiprintf_r>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	b01c      	add	sp, #112	; 0x70
 8008594:	f85d eb04 	ldr.w	lr, [sp], #4
 8008598:	b003      	add	sp, #12
 800859a:	4770      	bx	lr
 800859c:	2000000c 	.word	0x2000000c
 80085a0:	ffff0208 	.word	0xffff0208

080085a4 <sulp>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	4604      	mov	r4, r0
 80085a8:	460d      	mov	r5, r1
 80085aa:	4616      	mov	r6, r2
 80085ac:	ec45 4b10 	vmov	d0, r4, r5
 80085b0:	f002 fb50 	bl	800ac54 <__ulp>
 80085b4:	b17e      	cbz	r6, 80085d6 <sulp+0x32>
 80085b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80085ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085be:	2b00      	cmp	r3, #0
 80085c0:	dd09      	ble.n	80085d6 <sulp+0x32>
 80085c2:	051b      	lsls	r3, r3, #20
 80085c4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80085c8:	2000      	movs	r0, #0
 80085ca:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80085ce:	ec41 0b17 	vmov	d7, r0, r1
 80085d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80085d6:	bd70      	pop	{r4, r5, r6, pc}

080085d8 <_strtod_l>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	ed2d 8b0e 	vpush	{d8-d14}
 80085e0:	b097      	sub	sp, #92	; 0x5c
 80085e2:	461f      	mov	r7, r3
 80085e4:	2300      	movs	r3, #0
 80085e6:	9312      	str	r3, [sp, #72]	; 0x48
 80085e8:	4ba1      	ldr	r3, [pc, #644]	; (8008870 <_strtod_l+0x298>)
 80085ea:	920d      	str	r2, [sp, #52]	; 0x34
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	9307      	str	r3, [sp, #28]
 80085f0:	4604      	mov	r4, r0
 80085f2:	4618      	mov	r0, r3
 80085f4:	468b      	mov	fp, r1
 80085f6:	f7f7 fe23 	bl	8000240 <strlen>
 80085fa:	f04f 0800 	mov.w	r8, #0
 80085fe:	4605      	mov	r5, r0
 8008600:	f04f 0900 	mov.w	r9, #0
 8008604:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008608:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800860a:	7813      	ldrb	r3, [r2, #0]
 800860c:	2b2b      	cmp	r3, #43	; 0x2b
 800860e:	d04d      	beq.n	80086ac <_strtod_l+0xd4>
 8008610:	d83a      	bhi.n	8008688 <_strtod_l+0xb0>
 8008612:	2b0d      	cmp	r3, #13
 8008614:	d833      	bhi.n	800867e <_strtod_l+0xa6>
 8008616:	2b08      	cmp	r3, #8
 8008618:	d833      	bhi.n	8008682 <_strtod_l+0xaa>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d03d      	beq.n	800869a <_strtod_l+0xc2>
 800861e:	2300      	movs	r3, #0
 8008620:	9308      	str	r3, [sp, #32]
 8008622:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008624:	7833      	ldrb	r3, [r6, #0]
 8008626:	2b30      	cmp	r3, #48	; 0x30
 8008628:	f040 80b0 	bne.w	800878c <_strtod_l+0x1b4>
 800862c:	7873      	ldrb	r3, [r6, #1]
 800862e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008632:	2b58      	cmp	r3, #88	; 0x58
 8008634:	d167      	bne.n	8008706 <_strtod_l+0x12e>
 8008636:	9b08      	ldr	r3, [sp, #32]
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	ab12      	add	r3, sp, #72	; 0x48
 800863c:	9702      	str	r7, [sp, #8]
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	4a8c      	ldr	r2, [pc, #560]	; (8008874 <_strtod_l+0x29c>)
 8008642:	ab13      	add	r3, sp, #76	; 0x4c
 8008644:	a911      	add	r1, sp, #68	; 0x44
 8008646:	4620      	mov	r0, r4
 8008648:	f001 fc68 	bl	8009f1c <__gethex>
 800864c:	f010 0507 	ands.w	r5, r0, #7
 8008650:	4607      	mov	r7, r0
 8008652:	d005      	beq.n	8008660 <_strtod_l+0x88>
 8008654:	2d06      	cmp	r5, #6
 8008656:	d12b      	bne.n	80086b0 <_strtod_l+0xd8>
 8008658:	3601      	adds	r6, #1
 800865a:	2300      	movs	r3, #0
 800865c:	9611      	str	r6, [sp, #68]	; 0x44
 800865e:	9308      	str	r3, [sp, #32]
 8008660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008662:	2b00      	cmp	r3, #0
 8008664:	f040 854e 	bne.w	8009104 <_strtod_l+0xb2c>
 8008668:	9b08      	ldr	r3, [sp, #32]
 800866a:	b1e3      	cbz	r3, 80086a6 <_strtod_l+0xce>
 800866c:	ec49 8b17 	vmov	d7, r8, r9
 8008670:	eeb1 0b47 	vneg.f64	d0, d7
 8008674:	b017      	add	sp, #92	; 0x5c
 8008676:	ecbd 8b0e 	vpop	{d8-d14}
 800867a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867e:	2b20      	cmp	r3, #32
 8008680:	d1cd      	bne.n	800861e <_strtod_l+0x46>
 8008682:	3201      	adds	r2, #1
 8008684:	9211      	str	r2, [sp, #68]	; 0x44
 8008686:	e7bf      	b.n	8008608 <_strtod_l+0x30>
 8008688:	2b2d      	cmp	r3, #45	; 0x2d
 800868a:	d1c8      	bne.n	800861e <_strtod_l+0x46>
 800868c:	2301      	movs	r3, #1
 800868e:	9308      	str	r3, [sp, #32]
 8008690:	1c53      	adds	r3, r2, #1
 8008692:	9311      	str	r3, [sp, #68]	; 0x44
 8008694:	7853      	ldrb	r3, [r2, #1]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1c3      	bne.n	8008622 <_strtod_l+0x4a>
 800869a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800869c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f040 852d 	bne.w	8009100 <_strtod_l+0xb28>
 80086a6:	ec49 8b10 	vmov	d0, r8, r9
 80086aa:	e7e3      	b.n	8008674 <_strtod_l+0x9c>
 80086ac:	2300      	movs	r3, #0
 80086ae:	e7ee      	b.n	800868e <_strtod_l+0xb6>
 80086b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086b2:	b13a      	cbz	r2, 80086c4 <_strtod_l+0xec>
 80086b4:	2135      	movs	r1, #53	; 0x35
 80086b6:	a814      	add	r0, sp, #80	; 0x50
 80086b8:	f002 fbd4 	bl	800ae64 <__copybits>
 80086bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80086be:	4620      	mov	r0, r4
 80086c0:	f001 ff96 	bl	800a5f0 <_Bfree>
 80086c4:	3d01      	subs	r5, #1
 80086c6:	2d04      	cmp	r5, #4
 80086c8:	d806      	bhi.n	80086d8 <_strtod_l+0x100>
 80086ca:	e8df f005 	tbb	[pc, r5]
 80086ce:	030a      	.short	0x030a
 80086d0:	1714      	.short	0x1714
 80086d2:	0a          	.byte	0x0a
 80086d3:	00          	.byte	0x00
 80086d4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 80086d8:	073f      	lsls	r7, r7, #28
 80086da:	d5c1      	bpl.n	8008660 <_strtod_l+0x88>
 80086dc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80086e0:	e7be      	b.n	8008660 <_strtod_l+0x88>
 80086e2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 80086e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80086ec:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80086f0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80086f4:	e7f0      	b.n	80086d8 <_strtod_l+0x100>
 80086f6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008878 <_strtod_l+0x2a0>
 80086fa:	e7ed      	b.n	80086d8 <_strtod_l+0x100>
 80086fc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008700:	f04f 38ff 	mov.w	r8, #4294967295
 8008704:	e7e8      	b.n	80086d8 <_strtod_l+0x100>
 8008706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	9211      	str	r2, [sp, #68]	; 0x44
 800870c:	785b      	ldrb	r3, [r3, #1]
 800870e:	2b30      	cmp	r3, #48	; 0x30
 8008710:	d0f9      	beq.n	8008706 <_strtod_l+0x12e>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0a4      	beq.n	8008660 <_strtod_l+0x88>
 8008716:	2301      	movs	r3, #1
 8008718:	f04f 0a00 	mov.w	sl, #0
 800871c:	9304      	str	r3, [sp, #16]
 800871e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008720:	930a      	str	r3, [sp, #40]	; 0x28
 8008722:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008726:	f8cd a018 	str.w	sl, [sp, #24]
 800872a:	220a      	movs	r2, #10
 800872c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800872e:	7807      	ldrb	r7, [r0, #0]
 8008730:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008734:	b2d9      	uxtb	r1, r3
 8008736:	2909      	cmp	r1, #9
 8008738:	d92a      	bls.n	8008790 <_strtod_l+0x1b8>
 800873a:	9907      	ldr	r1, [sp, #28]
 800873c:	462a      	mov	r2, r5
 800873e:	f002 fd4f 	bl	800b1e0 <strncmp>
 8008742:	2800      	cmp	r0, #0
 8008744:	d033      	beq.n	80087ae <_strtod_l+0x1d6>
 8008746:	2000      	movs	r0, #0
 8008748:	9b06      	ldr	r3, [sp, #24]
 800874a:	463a      	mov	r2, r7
 800874c:	4601      	mov	r1, r0
 800874e:	4607      	mov	r7, r0
 8008750:	2a65      	cmp	r2, #101	; 0x65
 8008752:	d001      	beq.n	8008758 <_strtod_l+0x180>
 8008754:	2a45      	cmp	r2, #69	; 0x45
 8008756:	d117      	bne.n	8008788 <_strtod_l+0x1b0>
 8008758:	b91b      	cbnz	r3, 8008762 <_strtod_l+0x18a>
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	4303      	orrs	r3, r0
 800875e:	d09c      	beq.n	800869a <_strtod_l+0xc2>
 8008760:	2300      	movs	r3, #0
 8008762:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008766:	f10b 0201 	add.w	r2, fp, #1
 800876a:	9211      	str	r2, [sp, #68]	; 0x44
 800876c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008770:	2a2b      	cmp	r2, #43	; 0x2b
 8008772:	d071      	beq.n	8008858 <_strtod_l+0x280>
 8008774:	2a2d      	cmp	r2, #45	; 0x2d
 8008776:	d077      	beq.n	8008868 <_strtod_l+0x290>
 8008778:	f04f 0e00 	mov.w	lr, #0
 800877c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008780:	2d09      	cmp	r5, #9
 8008782:	d97f      	bls.n	8008884 <_strtod_l+0x2ac>
 8008784:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008788:	2500      	movs	r5, #0
 800878a:	e09b      	b.n	80088c4 <_strtod_l+0x2ec>
 800878c:	2300      	movs	r3, #0
 800878e:	e7c3      	b.n	8008718 <_strtod_l+0x140>
 8008790:	9906      	ldr	r1, [sp, #24]
 8008792:	2908      	cmp	r1, #8
 8008794:	bfdd      	ittte	le
 8008796:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008798:	fb02 3301 	mlale	r3, r2, r1, r3
 800879c:	9309      	strle	r3, [sp, #36]	; 0x24
 800879e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80087a2:	9b06      	ldr	r3, [sp, #24]
 80087a4:	3001      	adds	r0, #1
 80087a6:	3301      	adds	r3, #1
 80087a8:	9306      	str	r3, [sp, #24]
 80087aa:	9011      	str	r0, [sp, #68]	; 0x44
 80087ac:	e7be      	b.n	800872c <_strtod_l+0x154>
 80087ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087b0:	195a      	adds	r2, r3, r5
 80087b2:	9211      	str	r2, [sp, #68]	; 0x44
 80087b4:	5d5a      	ldrb	r2, [r3, r5]
 80087b6:	9b06      	ldr	r3, [sp, #24]
 80087b8:	b3a3      	cbz	r3, 8008824 <_strtod_l+0x24c>
 80087ba:	4607      	mov	r7, r0
 80087bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80087c0:	2909      	cmp	r1, #9
 80087c2:	d912      	bls.n	80087ea <_strtod_l+0x212>
 80087c4:	2101      	movs	r1, #1
 80087c6:	e7c3      	b.n	8008750 <_strtod_l+0x178>
 80087c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	9211      	str	r2, [sp, #68]	; 0x44
 80087ce:	785a      	ldrb	r2, [r3, #1]
 80087d0:	3001      	adds	r0, #1
 80087d2:	2a30      	cmp	r2, #48	; 0x30
 80087d4:	d0f8      	beq.n	80087c8 <_strtod_l+0x1f0>
 80087d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80087da:	2b08      	cmp	r3, #8
 80087dc:	f200 8497 	bhi.w	800910e <_strtod_l+0xb36>
 80087e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e2:	930a      	str	r3, [sp, #40]	; 0x28
 80087e4:	4607      	mov	r7, r0
 80087e6:	2000      	movs	r0, #0
 80087e8:	4603      	mov	r3, r0
 80087ea:	3a30      	subs	r2, #48	; 0x30
 80087ec:	f100 0101 	add.w	r1, r0, #1
 80087f0:	d012      	beq.n	8008818 <_strtod_l+0x240>
 80087f2:	440f      	add	r7, r1
 80087f4:	eb00 0c03 	add.w	ip, r0, r3
 80087f8:	4619      	mov	r1, r3
 80087fa:	250a      	movs	r5, #10
 80087fc:	4561      	cmp	r1, ip
 80087fe:	d113      	bne.n	8008828 <_strtod_l+0x250>
 8008800:	1819      	adds	r1, r3, r0
 8008802:	2908      	cmp	r1, #8
 8008804:	f103 0301 	add.w	r3, r3, #1
 8008808:	4403      	add	r3, r0
 800880a:	dc1c      	bgt.n	8008846 <_strtod_l+0x26e>
 800880c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800880e:	210a      	movs	r1, #10
 8008810:	fb01 2200 	mla	r2, r1, r0, r2
 8008814:	9209      	str	r2, [sp, #36]	; 0x24
 8008816:	2100      	movs	r1, #0
 8008818:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800881a:	1c50      	adds	r0, r2, #1
 800881c:	9011      	str	r0, [sp, #68]	; 0x44
 800881e:	7852      	ldrb	r2, [r2, #1]
 8008820:	4608      	mov	r0, r1
 8008822:	e7cb      	b.n	80087bc <_strtod_l+0x1e4>
 8008824:	9806      	ldr	r0, [sp, #24]
 8008826:	e7d4      	b.n	80087d2 <_strtod_l+0x1fa>
 8008828:	2908      	cmp	r1, #8
 800882a:	dc04      	bgt.n	8008836 <_strtod_l+0x25e>
 800882c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800882e:	436e      	muls	r6, r5
 8008830:	9609      	str	r6, [sp, #36]	; 0x24
 8008832:	3101      	adds	r1, #1
 8008834:	e7e2      	b.n	80087fc <_strtod_l+0x224>
 8008836:	f101 0e01 	add.w	lr, r1, #1
 800883a:	f1be 0f10 	cmp.w	lr, #16
 800883e:	bfd8      	it	le
 8008840:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008844:	e7f5      	b.n	8008832 <_strtod_l+0x25a>
 8008846:	2b10      	cmp	r3, #16
 8008848:	bfdc      	itt	le
 800884a:	210a      	movle	r1, #10
 800884c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008850:	e7e1      	b.n	8008816 <_strtod_l+0x23e>
 8008852:	2700      	movs	r7, #0
 8008854:	2101      	movs	r1, #1
 8008856:	e780      	b.n	800875a <_strtod_l+0x182>
 8008858:	f04f 0e00 	mov.w	lr, #0
 800885c:	f10b 0202 	add.w	r2, fp, #2
 8008860:	9211      	str	r2, [sp, #68]	; 0x44
 8008862:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008866:	e789      	b.n	800877c <_strtod_l+0x1a4>
 8008868:	f04f 0e01 	mov.w	lr, #1
 800886c:	e7f6      	b.n	800885c <_strtod_l+0x284>
 800886e:	bf00      	nop
 8008870:	0800d2cc 	.word	0x0800d2cc
 8008874:	0800d040 	.word	0x0800d040
 8008878:	7ff00000 	.word	0x7ff00000
 800887c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800887e:	1c55      	adds	r5, r2, #1
 8008880:	9511      	str	r5, [sp, #68]	; 0x44
 8008882:	7852      	ldrb	r2, [r2, #1]
 8008884:	2a30      	cmp	r2, #48	; 0x30
 8008886:	d0f9      	beq.n	800887c <_strtod_l+0x2a4>
 8008888:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800888c:	2d08      	cmp	r5, #8
 800888e:	f63f af7b 	bhi.w	8008788 <_strtod_l+0x1b0>
 8008892:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008896:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008898:	9207      	str	r2, [sp, #28]
 800889a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800889c:	1c55      	adds	r5, r2, #1
 800889e:	9511      	str	r5, [sp, #68]	; 0x44
 80088a0:	7852      	ldrb	r2, [r2, #1]
 80088a2:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80088a6:	2e09      	cmp	r6, #9
 80088a8:	d937      	bls.n	800891a <_strtod_l+0x342>
 80088aa:	9e07      	ldr	r6, [sp, #28]
 80088ac:	1bad      	subs	r5, r5, r6
 80088ae:	2d08      	cmp	r5, #8
 80088b0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80088b4:	dc02      	bgt.n	80088bc <_strtod_l+0x2e4>
 80088b6:	4565      	cmp	r5, ip
 80088b8:	bfa8      	it	ge
 80088ba:	4665      	movge	r5, ip
 80088bc:	f1be 0f00 	cmp.w	lr, #0
 80088c0:	d000      	beq.n	80088c4 <_strtod_l+0x2ec>
 80088c2:	426d      	negs	r5, r5
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d14d      	bne.n	8008964 <_strtod_l+0x38c>
 80088c8:	9b04      	ldr	r3, [sp, #16]
 80088ca:	4303      	orrs	r3, r0
 80088cc:	f47f aec8 	bne.w	8008660 <_strtod_l+0x88>
 80088d0:	2900      	cmp	r1, #0
 80088d2:	f47f aee2 	bne.w	800869a <_strtod_l+0xc2>
 80088d6:	2a69      	cmp	r2, #105	; 0x69
 80088d8:	d027      	beq.n	800892a <_strtod_l+0x352>
 80088da:	dc24      	bgt.n	8008926 <_strtod_l+0x34e>
 80088dc:	2a49      	cmp	r2, #73	; 0x49
 80088de:	d024      	beq.n	800892a <_strtod_l+0x352>
 80088e0:	2a4e      	cmp	r2, #78	; 0x4e
 80088e2:	f47f aeda 	bne.w	800869a <_strtod_l+0xc2>
 80088e6:	4996      	ldr	r1, [pc, #600]	; (8008b40 <_strtod_l+0x568>)
 80088e8:	a811      	add	r0, sp, #68	; 0x44
 80088ea:	f001 fd6f 	bl	800a3cc <__match>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f43f aed3 	beq.w	800869a <_strtod_l+0xc2>
 80088f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b28      	cmp	r3, #40	; 0x28
 80088fa:	d12d      	bne.n	8008958 <_strtod_l+0x380>
 80088fc:	4991      	ldr	r1, [pc, #580]	; (8008b44 <_strtod_l+0x56c>)
 80088fe:	aa14      	add	r2, sp, #80	; 0x50
 8008900:	a811      	add	r0, sp, #68	; 0x44
 8008902:	f001 fd77 	bl	800a3f4 <__hexnan>
 8008906:	2805      	cmp	r0, #5
 8008908:	d126      	bne.n	8008958 <_strtod_l+0x380>
 800890a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800890c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008910:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008914:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008918:	e6a2      	b.n	8008660 <_strtod_l+0x88>
 800891a:	250a      	movs	r5, #10
 800891c:	fb05 250c 	mla	r5, r5, ip, r2
 8008920:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008924:	e7b9      	b.n	800889a <_strtod_l+0x2c2>
 8008926:	2a6e      	cmp	r2, #110	; 0x6e
 8008928:	e7db      	b.n	80088e2 <_strtod_l+0x30a>
 800892a:	4987      	ldr	r1, [pc, #540]	; (8008b48 <_strtod_l+0x570>)
 800892c:	a811      	add	r0, sp, #68	; 0x44
 800892e:	f001 fd4d 	bl	800a3cc <__match>
 8008932:	2800      	cmp	r0, #0
 8008934:	f43f aeb1 	beq.w	800869a <_strtod_l+0xc2>
 8008938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800893a:	4984      	ldr	r1, [pc, #528]	; (8008b4c <_strtod_l+0x574>)
 800893c:	3b01      	subs	r3, #1
 800893e:	a811      	add	r0, sp, #68	; 0x44
 8008940:	9311      	str	r3, [sp, #68]	; 0x44
 8008942:	f001 fd43 	bl	800a3cc <__match>
 8008946:	b910      	cbnz	r0, 800894e <_strtod_l+0x376>
 8008948:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800894a:	3301      	adds	r3, #1
 800894c:	9311      	str	r3, [sp, #68]	; 0x44
 800894e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8008b60 <_strtod_l+0x588>
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	e683      	b.n	8008660 <_strtod_l+0x88>
 8008958:	487d      	ldr	r0, [pc, #500]	; (8008b50 <_strtod_l+0x578>)
 800895a:	f002 fc39 	bl	800b1d0 <nan>
 800895e:	ec59 8b10 	vmov	r8, r9, d0
 8008962:	e67d      	b.n	8008660 <_strtod_l+0x88>
 8008964:	1bea      	subs	r2, r5, r7
 8008966:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800896a:	9207      	str	r2, [sp, #28]
 800896c:	9a06      	ldr	r2, [sp, #24]
 800896e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008972:	2a00      	cmp	r2, #0
 8008974:	bf08      	it	eq
 8008976:	461a      	moveq	r2, r3
 8008978:	2b10      	cmp	r3, #16
 800897a:	9206      	str	r2, [sp, #24]
 800897c:	461a      	mov	r2, r3
 800897e:	bfa8      	it	ge
 8008980:	2210      	movge	r2, #16
 8008982:	2b09      	cmp	r3, #9
 8008984:	ec59 8b17 	vmov	r8, r9, d7
 8008988:	dd0c      	ble.n	80089a4 <_strtod_l+0x3cc>
 800898a:	4972      	ldr	r1, [pc, #456]	; (8008b54 <_strtod_l+0x57c>)
 800898c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008990:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008994:	ee06 aa90 	vmov	s13, sl
 8008998:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800899c:	eea7 6b05 	vfma.f64	d6, d7, d5
 80089a0:	ec59 8b16 	vmov	r8, r9, d6
 80089a4:	2b0f      	cmp	r3, #15
 80089a6:	dc36      	bgt.n	8008a16 <_strtod_l+0x43e>
 80089a8:	9907      	ldr	r1, [sp, #28]
 80089aa:	2900      	cmp	r1, #0
 80089ac:	f43f ae58 	beq.w	8008660 <_strtod_l+0x88>
 80089b0:	dd23      	ble.n	80089fa <_strtod_l+0x422>
 80089b2:	2916      	cmp	r1, #22
 80089b4:	dc0b      	bgt.n	80089ce <_strtod_l+0x3f6>
 80089b6:	4b67      	ldr	r3, [pc, #412]	; (8008b54 <_strtod_l+0x57c>)
 80089b8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80089bc:	ed93 7b00 	vldr	d7, [r3]
 80089c0:	ec49 8b16 	vmov	d6, r8, r9
 80089c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089c8:	ec59 8b17 	vmov	r8, r9, d7
 80089cc:	e648      	b.n	8008660 <_strtod_l+0x88>
 80089ce:	9807      	ldr	r0, [sp, #28]
 80089d0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80089d4:	4281      	cmp	r1, r0
 80089d6:	db1e      	blt.n	8008a16 <_strtod_l+0x43e>
 80089d8:	4a5e      	ldr	r2, [pc, #376]	; (8008b54 <_strtod_l+0x57c>)
 80089da:	f1c3 030f 	rsb	r3, r3, #15
 80089de:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80089e2:	ed91 7b00 	vldr	d7, [r1]
 80089e6:	ec49 8b16 	vmov	d6, r8, r9
 80089ea:	1ac3      	subs	r3, r0, r3
 80089ec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80089f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089f4:	ed92 6b00 	vldr	d6, [r2]
 80089f8:	e7e4      	b.n	80089c4 <_strtod_l+0x3ec>
 80089fa:	9907      	ldr	r1, [sp, #28]
 80089fc:	3116      	adds	r1, #22
 80089fe:	db0a      	blt.n	8008a16 <_strtod_l+0x43e>
 8008a00:	4b54      	ldr	r3, [pc, #336]	; (8008b54 <_strtod_l+0x57c>)
 8008a02:	1b7d      	subs	r5, r7, r5
 8008a04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008a08:	ed95 7b00 	vldr	d7, [r5]
 8008a0c:	ec49 8b16 	vmov	d6, r8, r9
 8008a10:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a14:	e7d8      	b.n	80089c8 <_strtod_l+0x3f0>
 8008a16:	9907      	ldr	r1, [sp, #28]
 8008a18:	1a9a      	subs	r2, r3, r2
 8008a1a:	440a      	add	r2, r1
 8008a1c:	2a00      	cmp	r2, #0
 8008a1e:	dd6f      	ble.n	8008b00 <_strtod_l+0x528>
 8008a20:	f012 000f 	ands.w	r0, r2, #15
 8008a24:	d00a      	beq.n	8008a3c <_strtod_l+0x464>
 8008a26:	494b      	ldr	r1, [pc, #300]	; (8008b54 <_strtod_l+0x57c>)
 8008a28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008a2c:	ed91 7b00 	vldr	d7, [r1]
 8008a30:	ec49 8b16 	vmov	d6, r8, r9
 8008a34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a38:	ec59 8b17 	vmov	r8, r9, d7
 8008a3c:	f032 020f 	bics.w	r2, r2, #15
 8008a40:	d04f      	beq.n	8008ae2 <_strtod_l+0x50a>
 8008a42:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008a46:	dd22      	ble.n	8008a8e <_strtod_l+0x4b6>
 8008a48:	2500      	movs	r5, #0
 8008a4a:	462e      	mov	r6, r5
 8008a4c:	9506      	str	r5, [sp, #24]
 8008a4e:	462f      	mov	r7, r5
 8008a50:	2322      	movs	r3, #34	; 0x22
 8008a52:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008b60 <_strtod_l+0x588>
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	f04f 0800 	mov.w	r8, #0
 8008a5c:	9b06      	ldr	r3, [sp, #24]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f43f adfe 	beq.w	8008660 <_strtod_l+0x88>
 8008a64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 fdc2 	bl	800a5f0 <_Bfree>
 8008a6c:	4639      	mov	r1, r7
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f001 fdbe 	bl	800a5f0 <_Bfree>
 8008a74:	4631      	mov	r1, r6
 8008a76:	4620      	mov	r0, r4
 8008a78:	f001 fdba 	bl	800a5f0 <_Bfree>
 8008a7c:	9906      	ldr	r1, [sp, #24]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	f001 fdb6 	bl	800a5f0 <_Bfree>
 8008a84:	4629      	mov	r1, r5
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 fdb2 	bl	800a5f0 <_Bfree>
 8008a8c:	e5e8      	b.n	8008660 <_strtod_l+0x88>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	ec49 8b17 	vmov	d7, r8, r9
 8008a94:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008b58 <_strtod_l+0x580>
 8008a98:	1112      	asrs	r2, r2, #4
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	2a01      	cmp	r2, #1
 8008a9e:	dc23      	bgt.n	8008ae8 <_strtod_l+0x510>
 8008aa0:	b108      	cbz	r0, 8008aa6 <_strtod_l+0x4ce>
 8008aa2:	ec59 8b17 	vmov	r8, r9, d7
 8008aa6:	4a2c      	ldr	r2, [pc, #176]	; (8008b58 <_strtod_l+0x580>)
 8008aa8:	482c      	ldr	r0, [pc, #176]	; (8008b5c <_strtod_l+0x584>)
 8008aaa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008aae:	ed92 7b00 	vldr	d7, [r2]
 8008ab2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008ab6:	ec49 8b16 	vmov	d6, r8, r9
 8008aba:	4a29      	ldr	r2, [pc, #164]	; (8008b60 <_strtod_l+0x588>)
 8008abc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ac0:	ee17 1a90 	vmov	r1, s15
 8008ac4:	400a      	ands	r2, r1
 8008ac6:	4282      	cmp	r2, r0
 8008ac8:	ec59 8b17 	vmov	r8, r9, d7
 8008acc:	d8bc      	bhi.n	8008a48 <_strtod_l+0x470>
 8008ace:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008ad2:	4282      	cmp	r2, r0
 8008ad4:	bf86      	itte	hi
 8008ad6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008b64 <_strtod_l+0x58c>
 8008ada:	f04f 38ff 	movhi.w	r8, #4294967295
 8008ade:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	9204      	str	r2, [sp, #16]
 8008ae6:	e078      	b.n	8008bda <_strtod_l+0x602>
 8008ae8:	07d6      	lsls	r6, r2, #31
 8008aea:	d504      	bpl.n	8008af6 <_strtod_l+0x51e>
 8008aec:	ed9c 6b00 	vldr	d6, [ip]
 8008af0:	2001      	movs	r0, #1
 8008af2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008af6:	3101      	adds	r1, #1
 8008af8:	1052      	asrs	r2, r2, #1
 8008afa:	f10c 0c08 	add.w	ip, ip, #8
 8008afe:	e7cd      	b.n	8008a9c <_strtod_l+0x4c4>
 8008b00:	d0ef      	beq.n	8008ae2 <_strtod_l+0x50a>
 8008b02:	4252      	negs	r2, r2
 8008b04:	f012 000f 	ands.w	r0, r2, #15
 8008b08:	d00a      	beq.n	8008b20 <_strtod_l+0x548>
 8008b0a:	4912      	ldr	r1, [pc, #72]	; (8008b54 <_strtod_l+0x57c>)
 8008b0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008b10:	ed91 7b00 	vldr	d7, [r1]
 8008b14:	ec49 8b16 	vmov	d6, r8, r9
 8008b18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008b1c:	ec59 8b17 	vmov	r8, r9, d7
 8008b20:	1112      	asrs	r2, r2, #4
 8008b22:	d0de      	beq.n	8008ae2 <_strtod_l+0x50a>
 8008b24:	2a1f      	cmp	r2, #31
 8008b26:	dd1f      	ble.n	8008b68 <_strtod_l+0x590>
 8008b28:	2500      	movs	r5, #0
 8008b2a:	462e      	mov	r6, r5
 8008b2c:	9506      	str	r5, [sp, #24]
 8008b2e:	462f      	mov	r7, r5
 8008b30:	2322      	movs	r3, #34	; 0x22
 8008b32:	f04f 0800 	mov.w	r8, #0
 8008b36:	f04f 0900 	mov.w	r9, #0
 8008b3a:	6023      	str	r3, [r4, #0]
 8008b3c:	e78e      	b.n	8008a5c <_strtod_l+0x484>
 8008b3e:	bf00      	nop
 8008b40:	0800d011 	.word	0x0800d011
 8008b44:	0800d054 	.word	0x0800d054
 8008b48:	0800d009 	.word	0x0800d009
 8008b4c:	0800d194 	.word	0x0800d194
 8008b50:	0800d4a8 	.word	0x0800d4a8
 8008b54:	0800d388 	.word	0x0800d388
 8008b58:	0800d360 	.word	0x0800d360
 8008b5c:	7ca00000 	.word	0x7ca00000
 8008b60:	7ff00000 	.word	0x7ff00000
 8008b64:	7fefffff 	.word	0x7fefffff
 8008b68:	f012 0110 	ands.w	r1, r2, #16
 8008b6c:	bf18      	it	ne
 8008b6e:	216a      	movne	r1, #106	; 0x6a
 8008b70:	9104      	str	r1, [sp, #16]
 8008b72:	ec49 8b17 	vmov	d7, r8, r9
 8008b76:	49be      	ldr	r1, [pc, #760]	; (8008e70 <_strtod_l+0x898>)
 8008b78:	2000      	movs	r0, #0
 8008b7a:	07d6      	lsls	r6, r2, #31
 8008b7c:	d504      	bpl.n	8008b88 <_strtod_l+0x5b0>
 8008b7e:	ed91 6b00 	vldr	d6, [r1]
 8008b82:	2001      	movs	r0, #1
 8008b84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b88:	1052      	asrs	r2, r2, #1
 8008b8a:	f101 0108 	add.w	r1, r1, #8
 8008b8e:	d1f4      	bne.n	8008b7a <_strtod_l+0x5a2>
 8008b90:	b108      	cbz	r0, 8008b96 <_strtod_l+0x5be>
 8008b92:	ec59 8b17 	vmov	r8, r9, d7
 8008b96:	9a04      	ldr	r2, [sp, #16]
 8008b98:	b1c2      	cbz	r2, 8008bcc <_strtod_l+0x5f4>
 8008b9a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8008b9e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	4648      	mov	r0, r9
 8008ba6:	dd11      	ble.n	8008bcc <_strtod_l+0x5f4>
 8008ba8:	2a1f      	cmp	r2, #31
 8008baa:	f340 812e 	ble.w	8008e0a <_strtod_l+0x832>
 8008bae:	2a34      	cmp	r2, #52	; 0x34
 8008bb0:	bfde      	ittt	le
 8008bb2:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8008bb6:	f04f 32ff 	movle.w	r2, #4294967295
 8008bba:	fa02 f101 	lslle.w	r1, r2, r1
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	bfcc      	ite	gt
 8008bc4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008bc8:	ea01 0900 	andle.w	r9, r1, r0
 8008bcc:	ec49 8b17 	vmov	d7, r8, r9
 8008bd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd8:	d0a6      	beq.n	8008b28 <_strtod_l+0x550>
 8008bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bdc:	9200      	str	r2, [sp, #0]
 8008bde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008be0:	9a06      	ldr	r2, [sp, #24]
 8008be2:	4620      	mov	r0, r4
 8008be4:	f001 fd6c 	bl	800a6c0 <__s2b>
 8008be8:	9006      	str	r0, [sp, #24]
 8008bea:	2800      	cmp	r0, #0
 8008bec:	f43f af2c 	beq.w	8008a48 <_strtod_l+0x470>
 8008bf0:	9b07      	ldr	r3, [sp, #28]
 8008bf2:	1b7d      	subs	r5, r7, r5
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	bfb4      	ite	lt
 8008bf8:	462b      	movlt	r3, r5
 8008bfa:	2300      	movge	r3, #0
 8008bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfe:	9b07      	ldr	r3, [sp, #28]
 8008c00:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8008e50 <_strtod_l+0x878>
 8008c04:	ed9f ab94 	vldr	d10, [pc, #592]	; 8008e58 <_strtod_l+0x880>
 8008c08:	ed9f bb95 	vldr	d11, [pc, #596]	; 8008e60 <_strtod_l+0x888>
 8008c0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008c10:	2500      	movs	r5, #0
 8008c12:	930c      	str	r3, [sp, #48]	; 0x30
 8008c14:	462e      	mov	r6, r5
 8008c16:	9b06      	ldr	r3, [sp, #24]
 8008c18:	4620      	mov	r0, r4
 8008c1a:	6859      	ldr	r1, [r3, #4]
 8008c1c:	f001 fca8 	bl	800a570 <_Balloc>
 8008c20:	4607      	mov	r7, r0
 8008c22:	2800      	cmp	r0, #0
 8008c24:	f43f af14 	beq.w	8008a50 <_strtod_l+0x478>
 8008c28:	9b06      	ldr	r3, [sp, #24]
 8008c2a:	691a      	ldr	r2, [r3, #16]
 8008c2c:	3202      	adds	r2, #2
 8008c2e:	f103 010c 	add.w	r1, r3, #12
 8008c32:	0092      	lsls	r2, r2, #2
 8008c34:	300c      	adds	r0, #12
 8008c36:	f7fe fd3f 	bl	80076b8 <memcpy>
 8008c3a:	ec49 8b10 	vmov	d0, r8, r9
 8008c3e:	aa14      	add	r2, sp, #80	; 0x50
 8008c40:	a913      	add	r1, sp, #76	; 0x4c
 8008c42:	4620      	mov	r0, r4
 8008c44:	f002 f882 	bl	800ad4c <__d2b>
 8008c48:	ec49 8b18 	vmov	d8, r8, r9
 8008c4c:	9012      	str	r0, [sp, #72]	; 0x48
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f43f aefe 	beq.w	8008a50 <_strtod_l+0x478>
 8008c54:	2101      	movs	r1, #1
 8008c56:	4620      	mov	r0, r4
 8008c58:	f001 fdcc 	bl	800a7f4 <__i2b>
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	f43f aef6 	beq.w	8008a50 <_strtod_l+0x478>
 8008c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c66:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	bfab      	itete	ge
 8008c6c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 8008c6e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8008c70:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8008c74:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8008c78:	bfac      	ite	ge
 8008c7a:	eb03 0b02 	addge.w	fp, r3, r2
 8008c7e:	eba2 0a03 	sublt.w	sl, r2, r3
 8008c82:	9a04      	ldr	r2, [sp, #16]
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	440b      	add	r3, r1
 8008c88:	4a7a      	ldr	r2, [pc, #488]	; (8008e74 <_strtod_l+0x89c>)
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8008c92:	f280 80cd 	bge.w	8008e30 <_strtod_l+0x858>
 8008c96:	1ad2      	subs	r2, r2, r3
 8008c98:	2a1f      	cmp	r2, #31
 8008c9a:	eba1 0102 	sub.w	r1, r1, r2
 8008c9e:	f04f 0001 	mov.w	r0, #1
 8008ca2:	f300 80b9 	bgt.w	8008e18 <_strtod_l+0x840>
 8008ca6:	fa00 f302 	lsl.w	r3, r0, r2
 8008caa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cac:	2300      	movs	r3, #0
 8008cae:	930a      	str	r3, [sp, #40]	; 0x28
 8008cb0:	eb0b 0301 	add.w	r3, fp, r1
 8008cb4:	9a04      	ldr	r2, [sp, #16]
 8008cb6:	459b      	cmp	fp, r3
 8008cb8:	448a      	add	sl, r1
 8008cba:	4492      	add	sl, r2
 8008cbc:	465a      	mov	r2, fp
 8008cbe:	bfa8      	it	ge
 8008cc0:	461a      	movge	r2, r3
 8008cc2:	4552      	cmp	r2, sl
 8008cc4:	bfa8      	it	ge
 8008cc6:	4652      	movge	r2, sl
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	bfc2      	ittt	gt
 8008ccc:	1a9b      	subgt	r3, r3, r2
 8008cce:	ebaa 0a02 	subgt.w	sl, sl, r2
 8008cd2:	ebab 0b02 	subgt.w	fp, fp, r2
 8008cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cd8:	2a00      	cmp	r2, #0
 8008cda:	dd18      	ble.n	8008d0e <_strtod_l+0x736>
 8008cdc:	4631      	mov	r1, r6
 8008cde:	4620      	mov	r0, r4
 8008ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ce2:	f001 fe47 	bl	800a974 <__pow5mult>
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	f43f aeb1 	beq.w	8008a50 <_strtod_l+0x478>
 8008cee:	4601      	mov	r1, r0
 8008cf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f001 fd94 	bl	800a820 <__multiply>
 8008cf8:	900e      	str	r0, [sp, #56]	; 0x38
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f43f aea8 	beq.w	8008a50 <_strtod_l+0x478>
 8008d00:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008d02:	4620      	mov	r0, r4
 8008d04:	f001 fc74 	bl	800a5f0 <_Bfree>
 8008d08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d0c:	9212      	str	r2, [sp, #72]	; 0x48
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f300 8093 	bgt.w	8008e3a <_strtod_l+0x862>
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	dd08      	ble.n	8008d2c <_strtod_l+0x754>
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f001 fe28 	bl	800a974 <__pow5mult>
 8008d24:	4607      	mov	r7, r0
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f43f ae92 	beq.w	8008a50 <_strtod_l+0x478>
 8008d2c:	f1ba 0f00 	cmp.w	sl, #0
 8008d30:	dd08      	ble.n	8008d44 <_strtod_l+0x76c>
 8008d32:	4639      	mov	r1, r7
 8008d34:	4652      	mov	r2, sl
 8008d36:	4620      	mov	r0, r4
 8008d38:	f001 fe76 	bl	800aa28 <__lshift>
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	f43f ae86 	beq.w	8008a50 <_strtod_l+0x478>
 8008d44:	f1bb 0f00 	cmp.w	fp, #0
 8008d48:	dd08      	ble.n	8008d5c <_strtod_l+0x784>
 8008d4a:	4631      	mov	r1, r6
 8008d4c:	465a      	mov	r2, fp
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f001 fe6a 	bl	800aa28 <__lshift>
 8008d54:	4606      	mov	r6, r0
 8008d56:	2800      	cmp	r0, #0
 8008d58:	f43f ae7a 	beq.w	8008a50 <_strtod_l+0x478>
 8008d5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008d5e:	463a      	mov	r2, r7
 8008d60:	4620      	mov	r0, r4
 8008d62:	f001 feed 	bl	800ab40 <__mdiff>
 8008d66:	4605      	mov	r5, r0
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	f43f ae71 	beq.w	8008a50 <_strtod_l+0x478>
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008d74:	60c3      	str	r3, [r0, #12]
 8008d76:	4631      	mov	r1, r6
 8008d78:	f001 fec6 	bl	800ab08 <__mcmp>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	da7d      	bge.n	8008e7c <_strtod_l+0x8a4>
 8008d80:	ea5a 0308 	orrs.w	r3, sl, r8
 8008d84:	f040 80a3 	bne.w	8008ece <_strtod_l+0x8f6>
 8008d88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f040 809e 	bne.w	8008ece <_strtod_l+0x8f6>
 8008d92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d96:	0d1b      	lsrs	r3, r3, #20
 8008d98:	051b      	lsls	r3, r3, #20
 8008d9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008d9e:	f240 8096 	bls.w	8008ece <_strtod_l+0x8f6>
 8008da2:	696b      	ldr	r3, [r5, #20]
 8008da4:	b91b      	cbnz	r3, 8008dae <_strtod_l+0x7d6>
 8008da6:	692b      	ldr	r3, [r5, #16]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	f340 8090 	ble.w	8008ece <_strtod_l+0x8f6>
 8008dae:	4629      	mov	r1, r5
 8008db0:	2201      	movs	r2, #1
 8008db2:	4620      	mov	r0, r4
 8008db4:	f001 fe38 	bl	800aa28 <__lshift>
 8008db8:	4631      	mov	r1, r6
 8008dba:	4605      	mov	r5, r0
 8008dbc:	f001 fea4 	bl	800ab08 <__mcmp>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	f340 8084 	ble.w	8008ece <_strtod_l+0x8f6>
 8008dc6:	9904      	ldr	r1, [sp, #16]
 8008dc8:	4a2b      	ldr	r2, [pc, #172]	; (8008e78 <_strtod_l+0x8a0>)
 8008dca:	464b      	mov	r3, r9
 8008dcc:	2900      	cmp	r1, #0
 8008dce:	f000 809d 	beq.w	8008f0c <_strtod_l+0x934>
 8008dd2:	ea02 0109 	and.w	r1, r2, r9
 8008dd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008dda:	f300 8097 	bgt.w	8008f0c <_strtod_l+0x934>
 8008dde:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008de2:	f77f aea5 	ble.w	8008b30 <_strtod_l+0x558>
 8008de6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008e68 <_strtod_l+0x890>
 8008dea:	ec49 8b16 	vmov	d6, r8, r9
 8008dee:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008df2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008df6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	bf08      	it	eq
 8008dfe:	2322      	moveq	r3, #34	; 0x22
 8008e00:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e04:	bf08      	it	eq
 8008e06:	6023      	streq	r3, [r4, #0]
 8008e08:	e62c      	b.n	8008a64 <_strtod_l+0x48c>
 8008e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8008e12:	ea02 0808 	and.w	r8, r2, r8
 8008e16:	e6d9      	b.n	8008bcc <_strtod_l+0x5f4>
 8008e18:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008e1c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008e20:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008e24:	33e2      	adds	r3, #226	; 0xe2
 8008e26:	fa00 f303 	lsl.w	r3, r0, r3
 8008e2a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8008e2e:	e73f      	b.n	8008cb0 <_strtod_l+0x6d8>
 8008e30:	2200      	movs	r2, #0
 8008e32:	2301      	movs	r3, #1
 8008e34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008e38:	e73a      	b.n	8008cb0 <_strtod_l+0x6d8>
 8008e3a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f001 fdf2 	bl	800aa28 <__lshift>
 8008e44:	9012      	str	r0, [sp, #72]	; 0x48
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f47f af64 	bne.w	8008d14 <_strtod_l+0x73c>
 8008e4c:	e600      	b.n	8008a50 <_strtod_l+0x478>
 8008e4e:	bf00      	nop
 8008e50:	94a03595 	.word	0x94a03595
 8008e54:	3fcfffff 	.word	0x3fcfffff
 8008e58:	94a03595 	.word	0x94a03595
 8008e5c:	3fdfffff 	.word	0x3fdfffff
 8008e60:	35afe535 	.word	0x35afe535
 8008e64:	3fe00000 	.word	0x3fe00000
 8008e68:	00000000 	.word	0x00000000
 8008e6c:	39500000 	.word	0x39500000
 8008e70:	0800d068 	.word	0x0800d068
 8008e74:	fffffc02 	.word	0xfffffc02
 8008e78:	7ff00000 	.word	0x7ff00000
 8008e7c:	46cb      	mov	fp, r9
 8008e7e:	d15f      	bne.n	8008f40 <_strtod_l+0x968>
 8008e80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e84:	f1ba 0f00 	cmp.w	sl, #0
 8008e88:	d02a      	beq.n	8008ee0 <_strtod_l+0x908>
 8008e8a:	4aa7      	ldr	r2, [pc, #668]	; (8009128 <_strtod_l+0xb50>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d12b      	bne.n	8008ee8 <_strtod_l+0x910>
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	4642      	mov	r2, r8
 8008e94:	b1fb      	cbz	r3, 8008ed6 <_strtod_l+0x8fe>
 8008e96:	4ba5      	ldr	r3, [pc, #660]	; (800912c <_strtod_l+0xb54>)
 8008e98:	ea09 0303 	and.w	r3, r9, r3
 8008e9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ea4:	d81a      	bhi.n	8008edc <_strtod_l+0x904>
 8008ea6:	0d1b      	lsrs	r3, r3, #20
 8008ea8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008eac:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d119      	bne.n	8008ee8 <_strtod_l+0x910>
 8008eb4:	4b9e      	ldr	r3, [pc, #632]	; (8009130 <_strtod_l+0xb58>)
 8008eb6:	459b      	cmp	fp, r3
 8008eb8:	d102      	bne.n	8008ec0 <_strtod_l+0x8e8>
 8008eba:	3201      	adds	r2, #1
 8008ebc:	f43f adc8 	beq.w	8008a50 <_strtod_l+0x478>
 8008ec0:	4b9a      	ldr	r3, [pc, #616]	; (800912c <_strtod_l+0xb54>)
 8008ec2:	ea0b 0303 	and.w	r3, fp, r3
 8008ec6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008eca:	f04f 0800 	mov.w	r8, #0
 8008ece:	9b04      	ldr	r3, [sp, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d188      	bne.n	8008de6 <_strtod_l+0x80e>
 8008ed4:	e5c6      	b.n	8008a64 <_strtod_l+0x48c>
 8008ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eda:	e7e9      	b.n	8008eb0 <_strtod_l+0x8d8>
 8008edc:	460b      	mov	r3, r1
 8008ede:	e7e7      	b.n	8008eb0 <_strtod_l+0x8d8>
 8008ee0:	ea53 0308 	orrs.w	r3, r3, r8
 8008ee4:	f43f af6f 	beq.w	8008dc6 <_strtod_l+0x7ee>
 8008ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eea:	b1cb      	cbz	r3, 8008f20 <_strtod_l+0x948>
 8008eec:	ea13 0f0b 	tst.w	r3, fp
 8008ef0:	d0ed      	beq.n	8008ece <_strtod_l+0x8f6>
 8008ef2:	9a04      	ldr	r2, [sp, #16]
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	f1ba 0f00 	cmp.w	sl, #0
 8008efc:	d014      	beq.n	8008f28 <_strtod_l+0x950>
 8008efe:	f7ff fb51 	bl	80085a4 <sulp>
 8008f02:	ee38 7b00 	vadd.f64	d7, d8, d0
 8008f06:	ec59 8b17 	vmov	r8, r9, d7
 8008f0a:	e7e0      	b.n	8008ece <_strtod_l+0x8f6>
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008f12:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008f16:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008f1a:	f04f 38ff 	mov.w	r8, #4294967295
 8008f1e:	e7d6      	b.n	8008ece <_strtod_l+0x8f6>
 8008f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f22:	ea13 0f08 	tst.w	r3, r8
 8008f26:	e7e3      	b.n	8008ef0 <_strtod_l+0x918>
 8008f28:	f7ff fb3c 	bl	80085a4 <sulp>
 8008f2c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8008f30:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8008f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f38:	ec59 8b10 	vmov	r8, r9, d0
 8008f3c:	d1c7      	bne.n	8008ece <_strtod_l+0x8f6>
 8008f3e:	e5f7      	b.n	8008b30 <_strtod_l+0x558>
 8008f40:	4631      	mov	r1, r6
 8008f42:	4628      	mov	r0, r5
 8008f44:	f001 ff5e 	bl	800ae04 <__ratio>
 8008f48:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008f4c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f54:	d865      	bhi.n	8009022 <_strtod_l+0xa4a>
 8008f56:	f1ba 0f00 	cmp.w	sl, #0
 8008f5a:	d042      	beq.n	8008fe2 <_strtod_l+0xa0a>
 8008f5c:	4b75      	ldr	r3, [pc, #468]	; (8009134 <_strtod_l+0xb5c>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8008f64:	4871      	ldr	r0, [pc, #452]	; (800912c <_strtod_l+0xb54>)
 8008f66:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009140 <_strtod_l+0xb68>
 8008f6a:	ea0b 0100 	and.w	r1, fp, r0
 8008f6e:	4561      	cmp	r1, ip
 8008f70:	f040 808e 	bne.w	8009090 <_strtod_l+0xab8>
 8008f74:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008f78:	ec49 8b10 	vmov	d0, r8, r9
 8008f7c:	ec43 2b1c 	vmov	d12, r2, r3
 8008f80:	910a      	str	r1, [sp, #40]	; 0x28
 8008f82:	f001 fe67 	bl	800ac54 <__ulp>
 8008f86:	ec49 8b1e 	vmov	d14, r8, r9
 8008f8a:	4868      	ldr	r0, [pc, #416]	; (800912c <_strtod_l+0xb54>)
 8008f8c:	eeac eb00 	vfma.f64	d14, d12, d0
 8008f90:	ee1e 3a90 	vmov	r3, s29
 8008f94:	4a68      	ldr	r2, [pc, #416]	; (8009138 <_strtod_l+0xb60>)
 8008f96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f98:	4018      	ands	r0, r3
 8008f9a:	4290      	cmp	r0, r2
 8008f9c:	ec59 8b1e 	vmov	r8, r9, d14
 8008fa0:	d94e      	bls.n	8009040 <_strtod_l+0xa68>
 8008fa2:	ee18 3a90 	vmov	r3, s17
 8008fa6:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d104      	bne.n	8008fb8 <_strtod_l+0x9e0>
 8008fae:	ee18 3a10 	vmov	r3, s16
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	f43f ad4c 	beq.w	8008a50 <_strtod_l+0x478>
 8008fb8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009130 <_strtod_l+0xb58>
 8008fbc:	f04f 38ff 	mov.w	r8, #4294967295
 8008fc0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f001 fb14 	bl	800a5f0 <_Bfree>
 8008fc8:	4639      	mov	r1, r7
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f001 fb10 	bl	800a5f0 <_Bfree>
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f001 fb0c 	bl	800a5f0 <_Bfree>
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f001 fb08 	bl	800a5f0 <_Bfree>
 8008fe0:	e619      	b.n	8008c16 <_strtod_l+0x63e>
 8008fe2:	f1b8 0f00 	cmp.w	r8, #0
 8008fe6:	d112      	bne.n	800900e <_strtod_l+0xa36>
 8008fe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fec:	b9b3      	cbnz	r3, 800901c <_strtod_l+0xa44>
 8008fee:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008ff2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ffa:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8008ffe:	bf58      	it	pl
 8009000:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 8009004:	eeb1 7b4d 	vneg.f64	d7, d13
 8009008:	ec53 2b17 	vmov	r2, r3, d7
 800900c:	e7aa      	b.n	8008f64 <_strtod_l+0x98c>
 800900e:	f1b8 0f01 	cmp.w	r8, #1
 8009012:	d103      	bne.n	800901c <_strtod_l+0xa44>
 8009014:	f1b9 0f00 	cmp.w	r9, #0
 8009018:	f43f ad8a 	beq.w	8008b30 <_strtod_l+0x558>
 800901c:	4b47      	ldr	r3, [pc, #284]	; (800913c <_strtod_l+0xb64>)
 800901e:	2200      	movs	r2, #0
 8009020:	e79e      	b.n	8008f60 <_strtod_l+0x988>
 8009022:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009026:	ee20 db0d 	vmul.f64	d13, d0, d13
 800902a:	f1ba 0f00 	cmp.w	sl, #0
 800902e:	d104      	bne.n	800903a <_strtod_l+0xa62>
 8009030:	eeb1 7b4d 	vneg.f64	d7, d13
 8009034:	ec53 2b17 	vmov	r2, r3, d7
 8009038:	e794      	b.n	8008f64 <_strtod_l+0x98c>
 800903a:	eeb0 7b4d 	vmov.f64	d7, d13
 800903e:	e7f9      	b.n	8009034 <_strtod_l+0xa5c>
 8009040:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1ba      	bne.n	8008fc0 <_strtod_l+0x9e8>
 800904a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800904e:	0d1b      	lsrs	r3, r3, #20
 8009050:	051b      	lsls	r3, r3, #20
 8009052:	4299      	cmp	r1, r3
 8009054:	d1b4      	bne.n	8008fc0 <_strtod_l+0x9e8>
 8009056:	ec51 0b1d 	vmov	r0, r1, d13
 800905a:	f7f7 fb1d 	bl	8000698 <__aeabi_d2lz>
 800905e:	f7f7 fad5 	bl	800060c <__aeabi_l2d>
 8009062:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009066:	ec41 0b17 	vmov	d7, r0, r1
 800906a:	ea43 0308 	orr.w	r3, r3, r8
 800906e:	ea53 030a 	orrs.w	r3, r3, sl
 8009072:	ee3d db47 	vsub.f64	d13, d13, d7
 8009076:	d03c      	beq.n	80090f2 <_strtod_l+0xb1a>
 8009078:	eeb4 dbca 	vcmpe.f64	d13, d10
 800907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009080:	f53f acf0 	bmi.w	8008a64 <_strtod_l+0x48c>
 8009084:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908c:	dd98      	ble.n	8008fc0 <_strtod_l+0x9e8>
 800908e:	e4e9      	b.n	8008a64 <_strtod_l+0x48c>
 8009090:	9804      	ldr	r0, [sp, #16]
 8009092:	b1f0      	cbz	r0, 80090d2 <_strtod_l+0xafa>
 8009094:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009098:	d81b      	bhi.n	80090d2 <_strtod_l+0xafa>
 800909a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009120 <_strtod_l+0xb48>
 800909e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80090a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a6:	d811      	bhi.n	80090cc <_strtod_l+0xaf4>
 80090a8:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80090ac:	ee1d 3a10 	vmov	r3, s26
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	bf38      	it	cc
 80090b4:	2301      	movcc	r3, #1
 80090b6:	ee0d 3a10 	vmov	s26, r3
 80090ba:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80090be:	f1ba 0f00 	cmp.w	sl, #0
 80090c2:	d113      	bne.n	80090ec <_strtod_l+0xb14>
 80090c4:	eeb1 7b4d 	vneg.f64	d7, d13
 80090c8:	ec53 2b17 	vmov	r2, r3, d7
 80090cc:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80090d0:	1a43      	subs	r3, r0, r1
 80090d2:	eeb0 0b48 	vmov.f64	d0, d8
 80090d6:	ec43 2b1c 	vmov	d12, r2, r3
 80090da:	910a      	str	r1, [sp, #40]	; 0x28
 80090dc:	f001 fdba 	bl	800ac54 <__ulp>
 80090e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090e2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80090e6:	ec59 8b18 	vmov	r8, r9, d8
 80090ea:	e7ab      	b.n	8009044 <_strtod_l+0xa6c>
 80090ec:	eeb0 7b4d 	vmov.f64	d7, d13
 80090f0:	e7ea      	b.n	80090c8 <_strtod_l+0xaf0>
 80090f2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80090f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fa:	f57f af61 	bpl.w	8008fc0 <_strtod_l+0x9e8>
 80090fe:	e4b1      	b.n	8008a64 <_strtod_l+0x48c>
 8009100:	2300      	movs	r3, #0
 8009102:	9308      	str	r3, [sp, #32]
 8009104:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009106:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009108:	6013      	str	r3, [r2, #0]
 800910a:	f7ff baad 	b.w	8008668 <_strtod_l+0x90>
 800910e:	2a65      	cmp	r2, #101	; 0x65
 8009110:	f43f ab9f 	beq.w	8008852 <_strtod_l+0x27a>
 8009114:	2a45      	cmp	r2, #69	; 0x45
 8009116:	f43f ab9c 	beq.w	8008852 <_strtod_l+0x27a>
 800911a:	2101      	movs	r1, #1
 800911c:	f7ff bbd4 	b.w	80088c8 <_strtod_l+0x2f0>
 8009120:	ffc00000 	.word	0xffc00000
 8009124:	41dfffff 	.word	0x41dfffff
 8009128:	000fffff 	.word	0x000fffff
 800912c:	7ff00000 	.word	0x7ff00000
 8009130:	7fefffff 	.word	0x7fefffff
 8009134:	3ff00000 	.word	0x3ff00000
 8009138:	7c9fffff 	.word	0x7c9fffff
 800913c:	bff00000 	.word	0xbff00000
 8009140:	7fe00000 	.word	0x7fe00000

08009144 <_strtod_r>:
 8009144:	4b01      	ldr	r3, [pc, #4]	; (800914c <_strtod_r+0x8>)
 8009146:	f7ff ba47 	b.w	80085d8 <_strtod_l>
 800914a:	bf00      	nop
 800914c:	20000074 	.word	0x20000074

08009150 <_strtol_l.constprop.0>:
 8009150:	2b01      	cmp	r3, #1
 8009152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009156:	d001      	beq.n	800915c <_strtol_l.constprop.0+0xc>
 8009158:	2b24      	cmp	r3, #36	; 0x24
 800915a:	d906      	bls.n	800916a <_strtol_l.constprop.0+0x1a>
 800915c:	f7fe fa7a 	bl	8007654 <__errno>
 8009160:	2316      	movs	r3, #22
 8009162:	6003      	str	r3, [r0, #0]
 8009164:	2000      	movs	r0, #0
 8009166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800916a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009250 <_strtol_l.constprop.0+0x100>
 800916e:	460d      	mov	r5, r1
 8009170:	462e      	mov	r6, r5
 8009172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009176:	f814 700c 	ldrb.w	r7, [r4, ip]
 800917a:	f017 0708 	ands.w	r7, r7, #8
 800917e:	d1f7      	bne.n	8009170 <_strtol_l.constprop.0+0x20>
 8009180:	2c2d      	cmp	r4, #45	; 0x2d
 8009182:	d132      	bne.n	80091ea <_strtol_l.constprop.0+0x9a>
 8009184:	782c      	ldrb	r4, [r5, #0]
 8009186:	2701      	movs	r7, #1
 8009188:	1cb5      	adds	r5, r6, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d05b      	beq.n	8009246 <_strtol_l.constprop.0+0xf6>
 800918e:	2b10      	cmp	r3, #16
 8009190:	d109      	bne.n	80091a6 <_strtol_l.constprop.0+0x56>
 8009192:	2c30      	cmp	r4, #48	; 0x30
 8009194:	d107      	bne.n	80091a6 <_strtol_l.constprop.0+0x56>
 8009196:	782c      	ldrb	r4, [r5, #0]
 8009198:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800919c:	2c58      	cmp	r4, #88	; 0x58
 800919e:	d14d      	bne.n	800923c <_strtol_l.constprop.0+0xec>
 80091a0:	786c      	ldrb	r4, [r5, #1]
 80091a2:	2310      	movs	r3, #16
 80091a4:	3502      	adds	r5, #2
 80091a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80091aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80091ae:	f04f 0c00 	mov.w	ip, #0
 80091b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80091b6:	4666      	mov	r6, ip
 80091b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80091bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80091c0:	f1be 0f09 	cmp.w	lr, #9
 80091c4:	d816      	bhi.n	80091f4 <_strtol_l.constprop.0+0xa4>
 80091c6:	4674      	mov	r4, lr
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	dd24      	ble.n	8009216 <_strtol_l.constprop.0+0xc6>
 80091cc:	f1bc 0f00 	cmp.w	ip, #0
 80091d0:	db1e      	blt.n	8009210 <_strtol_l.constprop.0+0xc0>
 80091d2:	45b1      	cmp	r9, r6
 80091d4:	d31c      	bcc.n	8009210 <_strtol_l.constprop.0+0xc0>
 80091d6:	d101      	bne.n	80091dc <_strtol_l.constprop.0+0x8c>
 80091d8:	45a2      	cmp	sl, r4
 80091da:	db19      	blt.n	8009210 <_strtol_l.constprop.0+0xc0>
 80091dc:	fb06 4603 	mla	r6, r6, r3, r4
 80091e0:	f04f 0c01 	mov.w	ip, #1
 80091e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091e8:	e7e8      	b.n	80091bc <_strtol_l.constprop.0+0x6c>
 80091ea:	2c2b      	cmp	r4, #43	; 0x2b
 80091ec:	bf04      	itt	eq
 80091ee:	782c      	ldrbeq	r4, [r5, #0]
 80091f0:	1cb5      	addeq	r5, r6, #2
 80091f2:	e7ca      	b.n	800918a <_strtol_l.constprop.0+0x3a>
 80091f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80091f8:	f1be 0f19 	cmp.w	lr, #25
 80091fc:	d801      	bhi.n	8009202 <_strtol_l.constprop.0+0xb2>
 80091fe:	3c37      	subs	r4, #55	; 0x37
 8009200:	e7e2      	b.n	80091c8 <_strtol_l.constprop.0+0x78>
 8009202:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009206:	f1be 0f19 	cmp.w	lr, #25
 800920a:	d804      	bhi.n	8009216 <_strtol_l.constprop.0+0xc6>
 800920c:	3c57      	subs	r4, #87	; 0x57
 800920e:	e7db      	b.n	80091c8 <_strtol_l.constprop.0+0x78>
 8009210:	f04f 3cff 	mov.w	ip, #4294967295
 8009214:	e7e6      	b.n	80091e4 <_strtol_l.constprop.0+0x94>
 8009216:	f1bc 0f00 	cmp.w	ip, #0
 800921a:	da05      	bge.n	8009228 <_strtol_l.constprop.0+0xd8>
 800921c:	2322      	movs	r3, #34	; 0x22
 800921e:	6003      	str	r3, [r0, #0]
 8009220:	4646      	mov	r6, r8
 8009222:	b942      	cbnz	r2, 8009236 <_strtol_l.constprop.0+0xe6>
 8009224:	4630      	mov	r0, r6
 8009226:	e79e      	b.n	8009166 <_strtol_l.constprop.0+0x16>
 8009228:	b107      	cbz	r7, 800922c <_strtol_l.constprop.0+0xdc>
 800922a:	4276      	negs	r6, r6
 800922c:	2a00      	cmp	r2, #0
 800922e:	d0f9      	beq.n	8009224 <_strtol_l.constprop.0+0xd4>
 8009230:	f1bc 0f00 	cmp.w	ip, #0
 8009234:	d000      	beq.n	8009238 <_strtol_l.constprop.0+0xe8>
 8009236:	1e69      	subs	r1, r5, #1
 8009238:	6011      	str	r1, [r2, #0]
 800923a:	e7f3      	b.n	8009224 <_strtol_l.constprop.0+0xd4>
 800923c:	2430      	movs	r4, #48	; 0x30
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1b1      	bne.n	80091a6 <_strtol_l.constprop.0+0x56>
 8009242:	2308      	movs	r3, #8
 8009244:	e7af      	b.n	80091a6 <_strtol_l.constprop.0+0x56>
 8009246:	2c30      	cmp	r4, #48	; 0x30
 8009248:	d0a5      	beq.n	8009196 <_strtol_l.constprop.0+0x46>
 800924a:	230a      	movs	r3, #10
 800924c:	e7ab      	b.n	80091a6 <_strtol_l.constprop.0+0x56>
 800924e:	bf00      	nop
 8009250:	0800d091 	.word	0x0800d091

08009254 <_strtol_r>:
 8009254:	f7ff bf7c 	b.w	8009150 <_strtol_l.constprop.0>

08009258 <quorem>:
 8009258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800925c:	6903      	ldr	r3, [r0, #16]
 800925e:	690c      	ldr	r4, [r1, #16]
 8009260:	42a3      	cmp	r3, r4
 8009262:	4607      	mov	r7, r0
 8009264:	f2c0 8081 	blt.w	800936a <quorem+0x112>
 8009268:	3c01      	subs	r4, #1
 800926a:	f101 0814 	add.w	r8, r1, #20
 800926e:	f100 0514 	add.w	r5, r0, #20
 8009272:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800927c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009280:	3301      	adds	r3, #1
 8009282:	429a      	cmp	r2, r3
 8009284:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009288:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800928c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009290:	d331      	bcc.n	80092f6 <quorem+0x9e>
 8009292:	f04f 0e00 	mov.w	lr, #0
 8009296:	4640      	mov	r0, r8
 8009298:	46ac      	mov	ip, r5
 800929a:	46f2      	mov	sl, lr
 800929c:	f850 2b04 	ldr.w	r2, [r0], #4
 80092a0:	b293      	uxth	r3, r2
 80092a2:	fb06 e303 	mla	r3, r6, r3, lr
 80092a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	ebaa 0303 	sub.w	r3, sl, r3
 80092b0:	f8dc a000 	ldr.w	sl, [ip]
 80092b4:	0c12      	lsrs	r2, r2, #16
 80092b6:	fa13 f38a 	uxtah	r3, r3, sl
 80092ba:	fb06 e202 	mla	r2, r6, r2, lr
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	9b00      	ldr	r3, [sp, #0]
 80092c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092c6:	b292      	uxth	r2, r2
 80092c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80092cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80092d4:	4581      	cmp	r9, r0
 80092d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092da:	f84c 3b04 	str.w	r3, [ip], #4
 80092de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092e2:	d2db      	bcs.n	800929c <quorem+0x44>
 80092e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80092e8:	b92b      	cbnz	r3, 80092f6 <quorem+0x9e>
 80092ea:	9b01      	ldr	r3, [sp, #4]
 80092ec:	3b04      	subs	r3, #4
 80092ee:	429d      	cmp	r5, r3
 80092f0:	461a      	mov	r2, r3
 80092f2:	d32e      	bcc.n	8009352 <quorem+0xfa>
 80092f4:	613c      	str	r4, [r7, #16]
 80092f6:	4638      	mov	r0, r7
 80092f8:	f001 fc06 	bl	800ab08 <__mcmp>
 80092fc:	2800      	cmp	r0, #0
 80092fe:	db24      	blt.n	800934a <quorem+0xf2>
 8009300:	3601      	adds	r6, #1
 8009302:	4628      	mov	r0, r5
 8009304:	f04f 0c00 	mov.w	ip, #0
 8009308:	f858 2b04 	ldr.w	r2, [r8], #4
 800930c:	f8d0 e000 	ldr.w	lr, [r0]
 8009310:	b293      	uxth	r3, r2
 8009312:	ebac 0303 	sub.w	r3, ip, r3
 8009316:	0c12      	lsrs	r2, r2, #16
 8009318:	fa13 f38e 	uxtah	r3, r3, lr
 800931c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009324:	b29b      	uxth	r3, r3
 8009326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800932a:	45c1      	cmp	r9, r8
 800932c:	f840 3b04 	str.w	r3, [r0], #4
 8009330:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009334:	d2e8      	bcs.n	8009308 <quorem+0xb0>
 8009336:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800933a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800933e:	b922      	cbnz	r2, 800934a <quorem+0xf2>
 8009340:	3b04      	subs	r3, #4
 8009342:	429d      	cmp	r5, r3
 8009344:	461a      	mov	r2, r3
 8009346:	d30a      	bcc.n	800935e <quorem+0x106>
 8009348:	613c      	str	r4, [r7, #16]
 800934a:	4630      	mov	r0, r6
 800934c:	b003      	add	sp, #12
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009352:	6812      	ldr	r2, [r2, #0]
 8009354:	3b04      	subs	r3, #4
 8009356:	2a00      	cmp	r2, #0
 8009358:	d1cc      	bne.n	80092f4 <quorem+0x9c>
 800935a:	3c01      	subs	r4, #1
 800935c:	e7c7      	b.n	80092ee <quorem+0x96>
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	3b04      	subs	r3, #4
 8009362:	2a00      	cmp	r2, #0
 8009364:	d1f0      	bne.n	8009348 <quorem+0xf0>
 8009366:	3c01      	subs	r4, #1
 8009368:	e7eb      	b.n	8009342 <quorem+0xea>
 800936a:	2000      	movs	r0, #0
 800936c:	e7ee      	b.n	800934c <quorem+0xf4>
	...

08009370 <_dtoa_r>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	ed2d 8b02 	vpush	{d8}
 8009378:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800937a:	b091      	sub	sp, #68	; 0x44
 800937c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009380:	ec59 8b10 	vmov	r8, r9, d0
 8009384:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009386:	9106      	str	r1, [sp, #24]
 8009388:	4606      	mov	r6, r0
 800938a:	9208      	str	r2, [sp, #32]
 800938c:	930c      	str	r3, [sp, #48]	; 0x30
 800938e:	b975      	cbnz	r5, 80093ae <_dtoa_r+0x3e>
 8009390:	2010      	movs	r0, #16
 8009392:	f7fe f989 	bl	80076a8 <malloc>
 8009396:	4602      	mov	r2, r0
 8009398:	6270      	str	r0, [r6, #36]	; 0x24
 800939a:	b920      	cbnz	r0, 80093a6 <_dtoa_r+0x36>
 800939c:	4baa      	ldr	r3, [pc, #680]	; (8009648 <_dtoa_r+0x2d8>)
 800939e:	21ea      	movs	r1, #234	; 0xea
 80093a0:	48aa      	ldr	r0, [pc, #680]	; (800964c <_dtoa_r+0x2dc>)
 80093a2:	f001 ff3f 	bl	800b224 <__assert_func>
 80093a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093aa:	6005      	str	r5, [r0, #0]
 80093ac:	60c5      	str	r5, [r0, #12]
 80093ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80093b0:	6819      	ldr	r1, [r3, #0]
 80093b2:	b151      	cbz	r1, 80093ca <_dtoa_r+0x5a>
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	604a      	str	r2, [r1, #4]
 80093b8:	2301      	movs	r3, #1
 80093ba:	4093      	lsls	r3, r2
 80093bc:	608b      	str	r3, [r1, #8]
 80093be:	4630      	mov	r0, r6
 80093c0:	f001 f916 	bl	800a5f0 <_Bfree>
 80093c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	f1b9 0300 	subs.w	r3, r9, #0
 80093ce:	bfbb      	ittet	lt
 80093d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093d4:	9303      	strlt	r3, [sp, #12]
 80093d6:	2300      	movge	r3, #0
 80093d8:	2201      	movlt	r2, #1
 80093da:	bfac      	ite	ge
 80093dc:	6023      	strge	r3, [r4, #0]
 80093de:	6022      	strlt	r2, [r4, #0]
 80093e0:	4b9b      	ldr	r3, [pc, #620]	; (8009650 <_dtoa_r+0x2e0>)
 80093e2:	9c03      	ldr	r4, [sp, #12]
 80093e4:	43a3      	bics	r3, r4
 80093e6:	d11c      	bne.n	8009422 <_dtoa_r+0xb2>
 80093e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80093f4:	ea53 0308 	orrs.w	r3, r3, r8
 80093f8:	f000 84fd 	beq.w	8009df6 <_dtoa_r+0xa86>
 80093fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093fe:	b963      	cbnz	r3, 800941a <_dtoa_r+0xaa>
 8009400:	4b94      	ldr	r3, [pc, #592]	; (8009654 <_dtoa_r+0x2e4>)
 8009402:	e01f      	b.n	8009444 <_dtoa_r+0xd4>
 8009404:	4b94      	ldr	r3, [pc, #592]	; (8009658 <_dtoa_r+0x2e8>)
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	3308      	adds	r3, #8
 800940a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800940c:	6013      	str	r3, [r2, #0]
 800940e:	9801      	ldr	r0, [sp, #4]
 8009410:	b011      	add	sp, #68	; 0x44
 8009412:	ecbd 8b02 	vpop	{d8}
 8009416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800941a:	4b8e      	ldr	r3, [pc, #568]	; (8009654 <_dtoa_r+0x2e4>)
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	3303      	adds	r3, #3
 8009420:	e7f3      	b.n	800940a <_dtoa_r+0x9a>
 8009422:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009426:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800942a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942e:	d10b      	bne.n	8009448 <_dtoa_r+0xd8>
 8009430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009432:	2301      	movs	r3, #1
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 84d9 	beq.w	8009df0 <_dtoa_r+0xa80>
 800943e:	4887      	ldr	r0, [pc, #540]	; (800965c <_dtoa_r+0x2ec>)
 8009440:	6018      	str	r0, [r3, #0]
 8009442:	1e43      	subs	r3, r0, #1
 8009444:	9301      	str	r3, [sp, #4]
 8009446:	e7e2      	b.n	800940e <_dtoa_r+0x9e>
 8009448:	a90f      	add	r1, sp, #60	; 0x3c
 800944a:	aa0e      	add	r2, sp, #56	; 0x38
 800944c:	4630      	mov	r0, r6
 800944e:	eeb0 0b48 	vmov.f64	d0, d8
 8009452:	f001 fc7b 	bl	800ad4c <__d2b>
 8009456:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800945a:	4605      	mov	r5, r0
 800945c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800945e:	2900      	cmp	r1, #0
 8009460:	d046      	beq.n	80094f0 <_dtoa_r+0x180>
 8009462:	ee18 4a90 	vmov	r4, s17
 8009466:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800946a:	ec53 2b18 	vmov	r2, r3, d8
 800946e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009472:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009476:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800947a:	2400      	movs	r4, #0
 800947c:	ec43 2b16 	vmov	d6, r2, r3
 8009480:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009484:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009630 <_dtoa_r+0x2c0>
 8009488:	ee36 7b47 	vsub.f64	d7, d6, d7
 800948c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009638 <_dtoa_r+0x2c8>
 8009490:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009494:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009640 <_dtoa_r+0x2d0>
 8009498:	ee07 1a90 	vmov	s15, r1
 800949c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80094a0:	eeb0 7b46 	vmov.f64	d7, d6
 80094a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80094a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80094ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80094b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094b4:	ee16 ba90 	vmov	fp, s13
 80094b8:	940a      	str	r4, [sp, #40]	; 0x28
 80094ba:	d508      	bpl.n	80094ce <_dtoa_r+0x15e>
 80094bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80094c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80094c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c8:	bf18      	it	ne
 80094ca:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80094ce:	f1bb 0f16 	cmp.w	fp, #22
 80094d2:	d82f      	bhi.n	8009534 <_dtoa_r+0x1c4>
 80094d4:	4b62      	ldr	r3, [pc, #392]	; (8009660 <_dtoa_r+0x2f0>)
 80094d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80094da:	ed93 7b00 	vldr	d7, [r3]
 80094de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80094e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094e6:	d501      	bpl.n	80094ec <_dtoa_r+0x17c>
 80094e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094ec:	2300      	movs	r3, #0
 80094ee:	e022      	b.n	8009536 <_dtoa_r+0x1c6>
 80094f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094f2:	4401      	add	r1, r0
 80094f4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80094f8:	2b20      	cmp	r3, #32
 80094fa:	bfc1      	itttt	gt
 80094fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009500:	fa04 f303 	lslgt.w	r3, r4, r3
 8009504:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009508:	fa28 f804 	lsrgt.w	r8, r8, r4
 800950c:	bfd6      	itet	le
 800950e:	f1c3 0320 	rsble	r3, r3, #32
 8009512:	ea43 0808 	orrgt.w	r8, r3, r8
 8009516:	fa08 f803 	lslle.w	r8, r8, r3
 800951a:	ee07 8a90 	vmov	s15, r8
 800951e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009522:	3901      	subs	r1, #1
 8009524:	ee17 4a90 	vmov	r4, s15
 8009528:	ec53 2b17 	vmov	r2, r3, d7
 800952c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009530:	2401      	movs	r4, #1
 8009532:	e7a3      	b.n	800947c <_dtoa_r+0x10c>
 8009534:	2301      	movs	r3, #1
 8009536:	930b      	str	r3, [sp, #44]	; 0x2c
 8009538:	1a43      	subs	r3, r0, r1
 800953a:	1e5a      	subs	r2, r3, #1
 800953c:	bf45      	ittet	mi
 800953e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009542:	9304      	strmi	r3, [sp, #16]
 8009544:	2300      	movpl	r3, #0
 8009546:	2300      	movmi	r3, #0
 8009548:	9205      	str	r2, [sp, #20]
 800954a:	bf54      	ite	pl
 800954c:	9304      	strpl	r3, [sp, #16]
 800954e:	9305      	strmi	r3, [sp, #20]
 8009550:	f1bb 0f00 	cmp.w	fp, #0
 8009554:	db18      	blt.n	8009588 <_dtoa_r+0x218>
 8009556:	9b05      	ldr	r3, [sp, #20]
 8009558:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800955c:	445b      	add	r3, fp
 800955e:	9305      	str	r3, [sp, #20]
 8009560:	2300      	movs	r3, #0
 8009562:	9a06      	ldr	r2, [sp, #24]
 8009564:	2a09      	cmp	r2, #9
 8009566:	d849      	bhi.n	80095fc <_dtoa_r+0x28c>
 8009568:	2a05      	cmp	r2, #5
 800956a:	bfc4      	itt	gt
 800956c:	3a04      	subgt	r2, #4
 800956e:	9206      	strgt	r2, [sp, #24]
 8009570:	9a06      	ldr	r2, [sp, #24]
 8009572:	f1a2 0202 	sub.w	r2, r2, #2
 8009576:	bfcc      	ite	gt
 8009578:	2400      	movgt	r4, #0
 800957a:	2401      	movle	r4, #1
 800957c:	2a03      	cmp	r2, #3
 800957e:	d848      	bhi.n	8009612 <_dtoa_r+0x2a2>
 8009580:	e8df f002 	tbb	[pc, r2]
 8009584:	3a2c2e0b 	.word	0x3a2c2e0b
 8009588:	9b04      	ldr	r3, [sp, #16]
 800958a:	2200      	movs	r2, #0
 800958c:	eba3 030b 	sub.w	r3, r3, fp
 8009590:	9304      	str	r3, [sp, #16]
 8009592:	9209      	str	r2, [sp, #36]	; 0x24
 8009594:	f1cb 0300 	rsb	r3, fp, #0
 8009598:	e7e3      	b.n	8009562 <_dtoa_r+0x1f2>
 800959a:	2200      	movs	r2, #0
 800959c:	9207      	str	r2, [sp, #28]
 800959e:	9a08      	ldr	r2, [sp, #32]
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	dc39      	bgt.n	8009618 <_dtoa_r+0x2a8>
 80095a4:	f04f 0a01 	mov.w	sl, #1
 80095a8:	46d1      	mov	r9, sl
 80095aa:	4652      	mov	r2, sl
 80095ac:	f8cd a020 	str.w	sl, [sp, #32]
 80095b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80095b2:	2100      	movs	r1, #0
 80095b4:	6079      	str	r1, [r7, #4]
 80095b6:	2004      	movs	r0, #4
 80095b8:	f100 0c14 	add.w	ip, r0, #20
 80095bc:	4594      	cmp	ip, r2
 80095be:	6879      	ldr	r1, [r7, #4]
 80095c0:	d92f      	bls.n	8009622 <_dtoa_r+0x2b2>
 80095c2:	4630      	mov	r0, r6
 80095c4:	930d      	str	r3, [sp, #52]	; 0x34
 80095c6:	f000 ffd3 	bl	800a570 <_Balloc>
 80095ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095cc:	9001      	str	r0, [sp, #4]
 80095ce:	4602      	mov	r2, r0
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d149      	bne.n	8009668 <_dtoa_r+0x2f8>
 80095d4:	4b23      	ldr	r3, [pc, #140]	; (8009664 <_dtoa_r+0x2f4>)
 80095d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095da:	e6e1      	b.n	80093a0 <_dtoa_r+0x30>
 80095dc:	2201      	movs	r2, #1
 80095de:	e7dd      	b.n	800959c <_dtoa_r+0x22c>
 80095e0:	2200      	movs	r2, #0
 80095e2:	9207      	str	r2, [sp, #28]
 80095e4:	9a08      	ldr	r2, [sp, #32]
 80095e6:	eb0b 0a02 	add.w	sl, fp, r2
 80095ea:	f10a 0901 	add.w	r9, sl, #1
 80095ee:	464a      	mov	r2, r9
 80095f0:	2a01      	cmp	r2, #1
 80095f2:	bfb8      	it	lt
 80095f4:	2201      	movlt	r2, #1
 80095f6:	e7db      	b.n	80095b0 <_dtoa_r+0x240>
 80095f8:	2201      	movs	r2, #1
 80095fa:	e7f2      	b.n	80095e2 <_dtoa_r+0x272>
 80095fc:	2401      	movs	r4, #1
 80095fe:	2200      	movs	r2, #0
 8009600:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009604:	f04f 3aff 	mov.w	sl, #4294967295
 8009608:	2100      	movs	r1, #0
 800960a:	46d1      	mov	r9, sl
 800960c:	2212      	movs	r2, #18
 800960e:	9108      	str	r1, [sp, #32]
 8009610:	e7ce      	b.n	80095b0 <_dtoa_r+0x240>
 8009612:	2201      	movs	r2, #1
 8009614:	9207      	str	r2, [sp, #28]
 8009616:	e7f5      	b.n	8009604 <_dtoa_r+0x294>
 8009618:	f8dd a020 	ldr.w	sl, [sp, #32]
 800961c:	46d1      	mov	r9, sl
 800961e:	4652      	mov	r2, sl
 8009620:	e7c6      	b.n	80095b0 <_dtoa_r+0x240>
 8009622:	3101      	adds	r1, #1
 8009624:	6079      	str	r1, [r7, #4]
 8009626:	0040      	lsls	r0, r0, #1
 8009628:	e7c6      	b.n	80095b8 <_dtoa_r+0x248>
 800962a:	bf00      	nop
 800962c:	f3af 8000 	nop.w
 8009630:	636f4361 	.word	0x636f4361
 8009634:	3fd287a7 	.word	0x3fd287a7
 8009638:	8b60c8b3 	.word	0x8b60c8b3
 800963c:	3fc68a28 	.word	0x3fc68a28
 8009640:	509f79fb 	.word	0x509f79fb
 8009644:	3fd34413 	.word	0x3fd34413
 8009648:	0800d19e 	.word	0x0800d19e
 800964c:	0800d1b5 	.word	0x0800d1b5
 8009650:	7ff00000 	.word	0x7ff00000
 8009654:	0800d19a 	.word	0x0800d19a
 8009658:	0800d191 	.word	0x0800d191
 800965c:	0800d015 	.word	0x0800d015
 8009660:	0800d388 	.word	0x0800d388
 8009664:	0800d233 	.word	0x0800d233
 8009668:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800966a:	9901      	ldr	r1, [sp, #4]
 800966c:	6011      	str	r1, [r2, #0]
 800966e:	f1b9 0f0e 	cmp.w	r9, #14
 8009672:	d86c      	bhi.n	800974e <_dtoa_r+0x3de>
 8009674:	2c00      	cmp	r4, #0
 8009676:	d06a      	beq.n	800974e <_dtoa_r+0x3de>
 8009678:	f1bb 0f00 	cmp.w	fp, #0
 800967c:	f340 80a0 	ble.w	80097c0 <_dtoa_r+0x450>
 8009680:	49c1      	ldr	r1, [pc, #772]	; (8009988 <_dtoa_r+0x618>)
 8009682:	f00b 020f 	and.w	r2, fp, #15
 8009686:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800968a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800968e:	ed92 7b00 	vldr	d7, [r2]
 8009692:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009696:	f000 8087 	beq.w	80097a8 <_dtoa_r+0x438>
 800969a:	4abc      	ldr	r2, [pc, #752]	; (800998c <_dtoa_r+0x61c>)
 800969c:	ed92 6b08 	vldr	d6, [r2, #32]
 80096a0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80096a4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80096a8:	f001 010f 	and.w	r1, r1, #15
 80096ac:	2203      	movs	r2, #3
 80096ae:	48b7      	ldr	r0, [pc, #732]	; (800998c <_dtoa_r+0x61c>)
 80096b0:	2900      	cmp	r1, #0
 80096b2:	d17b      	bne.n	80097ac <_dtoa_r+0x43c>
 80096b4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80096b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80096bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096c2:	2900      	cmp	r1, #0
 80096c4:	f000 80a2 	beq.w	800980c <_dtoa_r+0x49c>
 80096c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80096cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80096d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096d8:	f140 8098 	bpl.w	800980c <_dtoa_r+0x49c>
 80096dc:	f1b9 0f00 	cmp.w	r9, #0
 80096e0:	f000 8094 	beq.w	800980c <_dtoa_r+0x49c>
 80096e4:	f1ba 0f00 	cmp.w	sl, #0
 80096e8:	dd2f      	ble.n	800974a <_dtoa_r+0x3da>
 80096ea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80096ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096f6:	f10b 37ff 	add.w	r7, fp, #4294967295
 80096fa:	3201      	adds	r2, #1
 80096fc:	4650      	mov	r0, sl
 80096fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009702:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009706:	ee07 2a90 	vmov	s15, r2
 800970a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800970e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009712:	ee15 4a90 	vmov	r4, s11
 8009716:	ec52 1b15 	vmov	r1, r2, d5
 800971a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800971e:	2800      	cmp	r0, #0
 8009720:	d177      	bne.n	8009812 <_dtoa_r+0x4a2>
 8009722:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009726:	ee36 6b47 	vsub.f64	d6, d6, d7
 800972a:	ec42 1b17 	vmov	d7, r1, r2
 800972e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009736:	f300 8263 	bgt.w	8009c00 <_dtoa_r+0x890>
 800973a:	eeb1 7b47 	vneg.f64	d7, d7
 800973e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009746:	f100 8258 	bmi.w	8009bfa <_dtoa_r+0x88a>
 800974a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800974e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009750:	2a00      	cmp	r2, #0
 8009752:	f2c0 811d 	blt.w	8009990 <_dtoa_r+0x620>
 8009756:	f1bb 0f0e 	cmp.w	fp, #14
 800975a:	f300 8119 	bgt.w	8009990 <_dtoa_r+0x620>
 800975e:	4b8a      	ldr	r3, [pc, #552]	; (8009988 <_dtoa_r+0x618>)
 8009760:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009764:	ed93 6b00 	vldr	d6, [r3]
 8009768:	9b08      	ldr	r3, [sp, #32]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f280 80b7 	bge.w	80098de <_dtoa_r+0x56e>
 8009770:	f1b9 0f00 	cmp.w	r9, #0
 8009774:	f300 80b3 	bgt.w	80098de <_dtoa_r+0x56e>
 8009778:	f040 823f 	bne.w	8009bfa <_dtoa_r+0x88a>
 800977c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009780:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009784:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009788:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800978c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009790:	464c      	mov	r4, r9
 8009792:	464f      	mov	r7, r9
 8009794:	f280 8215 	bge.w	8009bc2 <_dtoa_r+0x852>
 8009798:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800979c:	2331      	movs	r3, #49	; 0x31
 800979e:	f808 3b01 	strb.w	r3, [r8], #1
 80097a2:	f10b 0b01 	add.w	fp, fp, #1
 80097a6:	e211      	b.n	8009bcc <_dtoa_r+0x85c>
 80097a8:	2202      	movs	r2, #2
 80097aa:	e780      	b.n	80096ae <_dtoa_r+0x33e>
 80097ac:	07cc      	lsls	r4, r1, #31
 80097ae:	d504      	bpl.n	80097ba <_dtoa_r+0x44a>
 80097b0:	ed90 6b00 	vldr	d6, [r0]
 80097b4:	3201      	adds	r2, #1
 80097b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097ba:	1049      	asrs	r1, r1, #1
 80097bc:	3008      	adds	r0, #8
 80097be:	e777      	b.n	80096b0 <_dtoa_r+0x340>
 80097c0:	d022      	beq.n	8009808 <_dtoa_r+0x498>
 80097c2:	f1cb 0100 	rsb	r1, fp, #0
 80097c6:	4a70      	ldr	r2, [pc, #448]	; (8009988 <_dtoa_r+0x618>)
 80097c8:	f001 000f 	and.w	r0, r1, #15
 80097cc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80097d0:	ed92 7b00 	vldr	d7, [r2]
 80097d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80097d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097dc:	486b      	ldr	r0, [pc, #428]	; (800998c <_dtoa_r+0x61c>)
 80097de:	1109      	asrs	r1, r1, #4
 80097e0:	2400      	movs	r4, #0
 80097e2:	2202      	movs	r2, #2
 80097e4:	b929      	cbnz	r1, 80097f2 <_dtoa_r+0x482>
 80097e6:	2c00      	cmp	r4, #0
 80097e8:	f43f af6a 	beq.w	80096c0 <_dtoa_r+0x350>
 80097ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097f0:	e766      	b.n	80096c0 <_dtoa_r+0x350>
 80097f2:	07cf      	lsls	r7, r1, #31
 80097f4:	d505      	bpl.n	8009802 <_dtoa_r+0x492>
 80097f6:	ed90 6b00 	vldr	d6, [r0]
 80097fa:	3201      	adds	r2, #1
 80097fc:	2401      	movs	r4, #1
 80097fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009802:	1049      	asrs	r1, r1, #1
 8009804:	3008      	adds	r0, #8
 8009806:	e7ed      	b.n	80097e4 <_dtoa_r+0x474>
 8009808:	2202      	movs	r2, #2
 800980a:	e759      	b.n	80096c0 <_dtoa_r+0x350>
 800980c:	465f      	mov	r7, fp
 800980e:	4648      	mov	r0, r9
 8009810:	e775      	b.n	80096fe <_dtoa_r+0x38e>
 8009812:	ec42 1b17 	vmov	d7, r1, r2
 8009816:	4a5c      	ldr	r2, [pc, #368]	; (8009988 <_dtoa_r+0x618>)
 8009818:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800981c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009820:	9a01      	ldr	r2, [sp, #4]
 8009822:	1814      	adds	r4, r2, r0
 8009824:	9a07      	ldr	r2, [sp, #28]
 8009826:	b352      	cbz	r2, 800987e <_dtoa_r+0x50e>
 8009828:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800982c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009830:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009834:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009838:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800983c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009840:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009844:	ee14 2a90 	vmov	r2, s9
 8009848:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800984c:	3230      	adds	r2, #48	; 0x30
 800984e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009852:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985a:	f808 2b01 	strb.w	r2, [r8], #1
 800985e:	d439      	bmi.n	80098d4 <_dtoa_r+0x564>
 8009860:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009864:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986c:	d472      	bmi.n	8009954 <_dtoa_r+0x5e4>
 800986e:	45a0      	cmp	r8, r4
 8009870:	f43f af6b 	beq.w	800974a <_dtoa_r+0x3da>
 8009874:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009878:	ee26 6b03 	vmul.f64	d6, d6, d3
 800987c:	e7e0      	b.n	8009840 <_dtoa_r+0x4d0>
 800987e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009882:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009886:	4621      	mov	r1, r4
 8009888:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800988c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009890:	ee14 2a90 	vmov	r2, s9
 8009894:	3230      	adds	r2, #48	; 0x30
 8009896:	f808 2b01 	strb.w	r2, [r8], #1
 800989a:	45a0      	cmp	r8, r4
 800989c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80098a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80098a4:	d118      	bne.n	80098d8 <_dtoa_r+0x568>
 80098a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80098aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80098ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80098b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b6:	dc4d      	bgt.n	8009954 <_dtoa_r+0x5e4>
 80098b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80098bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c4:	f57f af41 	bpl.w	800974a <_dtoa_r+0x3da>
 80098c8:	4688      	mov	r8, r1
 80098ca:	3901      	subs	r1, #1
 80098cc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80098d0:	2b30      	cmp	r3, #48	; 0x30
 80098d2:	d0f9      	beq.n	80098c8 <_dtoa_r+0x558>
 80098d4:	46bb      	mov	fp, r7
 80098d6:	e02a      	b.n	800992e <_dtoa_r+0x5be>
 80098d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80098dc:	e7d6      	b.n	800988c <_dtoa_r+0x51c>
 80098de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80098e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80098e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80098ee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80098f2:	ee15 3a10 	vmov	r3, s10
 80098f6:	3330      	adds	r3, #48	; 0x30
 80098f8:	f808 3b01 	strb.w	r3, [r8], #1
 80098fc:	9b01      	ldr	r3, [sp, #4]
 80098fe:	eba8 0303 	sub.w	r3, r8, r3
 8009902:	4599      	cmp	r9, r3
 8009904:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009908:	eea3 7b46 	vfms.f64	d7, d3, d6
 800990c:	d133      	bne.n	8009976 <_dtoa_r+0x606>
 800990e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009912:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991a:	dc1a      	bgt.n	8009952 <_dtoa_r+0x5e2>
 800991c:	eeb4 7b46 	vcmp.f64	d7, d6
 8009920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009924:	d103      	bne.n	800992e <_dtoa_r+0x5be>
 8009926:	ee15 3a10 	vmov	r3, s10
 800992a:	07d9      	lsls	r1, r3, #31
 800992c:	d411      	bmi.n	8009952 <_dtoa_r+0x5e2>
 800992e:	4629      	mov	r1, r5
 8009930:	4630      	mov	r0, r6
 8009932:	f000 fe5d 	bl	800a5f0 <_Bfree>
 8009936:	2300      	movs	r3, #0
 8009938:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800993a:	f888 3000 	strb.w	r3, [r8]
 800993e:	f10b 0301 	add.w	r3, fp, #1
 8009942:	6013      	str	r3, [r2, #0]
 8009944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009946:	2b00      	cmp	r3, #0
 8009948:	f43f ad61 	beq.w	800940e <_dtoa_r+0x9e>
 800994c:	f8c3 8000 	str.w	r8, [r3]
 8009950:	e55d      	b.n	800940e <_dtoa_r+0x9e>
 8009952:	465f      	mov	r7, fp
 8009954:	4643      	mov	r3, r8
 8009956:	4698      	mov	r8, r3
 8009958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800995c:	2a39      	cmp	r2, #57	; 0x39
 800995e:	d106      	bne.n	800996e <_dtoa_r+0x5fe>
 8009960:	9a01      	ldr	r2, [sp, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d1f7      	bne.n	8009956 <_dtoa_r+0x5e6>
 8009966:	9901      	ldr	r1, [sp, #4]
 8009968:	2230      	movs	r2, #48	; 0x30
 800996a:	3701      	adds	r7, #1
 800996c:	700a      	strb	r2, [r1, #0]
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	3201      	adds	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	e7ae      	b.n	80098d4 <_dtoa_r+0x564>
 8009976:	ee27 7b04 	vmul.f64	d7, d7, d4
 800997a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800997e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009982:	d1b2      	bne.n	80098ea <_dtoa_r+0x57a>
 8009984:	e7d3      	b.n	800992e <_dtoa_r+0x5be>
 8009986:	bf00      	nop
 8009988:	0800d388 	.word	0x0800d388
 800998c:	0800d360 	.word	0x0800d360
 8009990:	9907      	ldr	r1, [sp, #28]
 8009992:	2900      	cmp	r1, #0
 8009994:	f000 80d0 	beq.w	8009b38 <_dtoa_r+0x7c8>
 8009998:	9906      	ldr	r1, [sp, #24]
 800999a:	2901      	cmp	r1, #1
 800999c:	f300 80b4 	bgt.w	8009b08 <_dtoa_r+0x798>
 80099a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80099a2:	2900      	cmp	r1, #0
 80099a4:	f000 80ac 	beq.w	8009b00 <_dtoa_r+0x790>
 80099a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80099ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80099b0:	461c      	mov	r4, r3
 80099b2:	930a      	str	r3, [sp, #40]	; 0x28
 80099b4:	9b04      	ldr	r3, [sp, #16]
 80099b6:	4413      	add	r3, r2
 80099b8:	9304      	str	r3, [sp, #16]
 80099ba:	9b05      	ldr	r3, [sp, #20]
 80099bc:	2101      	movs	r1, #1
 80099be:	4413      	add	r3, r2
 80099c0:	4630      	mov	r0, r6
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	f000 ff16 	bl	800a7f4 <__i2b>
 80099c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ca:	4607      	mov	r7, r0
 80099cc:	f1b8 0f00 	cmp.w	r8, #0
 80099d0:	dd0d      	ble.n	80099ee <_dtoa_r+0x67e>
 80099d2:	9a05      	ldr	r2, [sp, #20]
 80099d4:	2a00      	cmp	r2, #0
 80099d6:	dd0a      	ble.n	80099ee <_dtoa_r+0x67e>
 80099d8:	4542      	cmp	r2, r8
 80099da:	9904      	ldr	r1, [sp, #16]
 80099dc:	bfa8      	it	ge
 80099de:	4642      	movge	r2, r8
 80099e0:	1a89      	subs	r1, r1, r2
 80099e2:	9104      	str	r1, [sp, #16]
 80099e4:	9905      	ldr	r1, [sp, #20]
 80099e6:	eba8 0802 	sub.w	r8, r8, r2
 80099ea:	1a8a      	subs	r2, r1, r2
 80099ec:	9205      	str	r2, [sp, #20]
 80099ee:	b303      	cbz	r3, 8009a32 <_dtoa_r+0x6c2>
 80099f0:	9a07      	ldr	r2, [sp, #28]
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	f000 80a5 	beq.w	8009b42 <_dtoa_r+0x7d2>
 80099f8:	2c00      	cmp	r4, #0
 80099fa:	dd13      	ble.n	8009a24 <_dtoa_r+0x6b4>
 80099fc:	4639      	mov	r1, r7
 80099fe:	4622      	mov	r2, r4
 8009a00:	4630      	mov	r0, r6
 8009a02:	930d      	str	r3, [sp, #52]	; 0x34
 8009a04:	f000 ffb6 	bl	800a974 <__pow5mult>
 8009a08:	462a      	mov	r2, r5
 8009a0a:	4601      	mov	r1, r0
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f000 ff06 	bl	800a820 <__multiply>
 8009a14:	4629      	mov	r1, r5
 8009a16:	900a      	str	r0, [sp, #40]	; 0x28
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f000 fde9 	bl	800a5f0 <_Bfree>
 8009a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a22:	4615      	mov	r5, r2
 8009a24:	1b1a      	subs	r2, r3, r4
 8009a26:	d004      	beq.n	8009a32 <_dtoa_r+0x6c2>
 8009a28:	4629      	mov	r1, r5
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f000 ffa2 	bl	800a974 <__pow5mult>
 8009a30:	4605      	mov	r5, r0
 8009a32:	2101      	movs	r1, #1
 8009a34:	4630      	mov	r0, r6
 8009a36:	f000 fedd 	bl	800a7f4 <__i2b>
 8009a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	4604      	mov	r4, r0
 8009a40:	f340 8081 	ble.w	8009b46 <_dtoa_r+0x7d6>
 8009a44:	461a      	mov	r2, r3
 8009a46:	4601      	mov	r1, r0
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f000 ff93 	bl	800a974 <__pow5mult>
 8009a4e:	9b06      	ldr	r3, [sp, #24]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	4604      	mov	r4, r0
 8009a54:	dd7a      	ble.n	8009b4c <_dtoa_r+0x7dc>
 8009a56:	2300      	movs	r3, #0
 8009a58:	930a      	str	r3, [sp, #40]	; 0x28
 8009a5a:	6922      	ldr	r2, [r4, #16]
 8009a5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a60:	6910      	ldr	r0, [r2, #16]
 8009a62:	f000 fe77 	bl	800a754 <__hi0bits>
 8009a66:	f1c0 0020 	rsb	r0, r0, #32
 8009a6a:	9b05      	ldr	r3, [sp, #20]
 8009a6c:	4418      	add	r0, r3
 8009a6e:	f010 001f 	ands.w	r0, r0, #31
 8009a72:	f000 808c 	beq.w	8009b8e <_dtoa_r+0x81e>
 8009a76:	f1c0 0220 	rsb	r2, r0, #32
 8009a7a:	2a04      	cmp	r2, #4
 8009a7c:	f340 8085 	ble.w	8009b8a <_dtoa_r+0x81a>
 8009a80:	f1c0 001c 	rsb	r0, r0, #28
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	4403      	add	r3, r0
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	9b05      	ldr	r3, [sp, #20]
 8009a8c:	4403      	add	r3, r0
 8009a8e:	4480      	add	r8, r0
 8009a90:	9305      	str	r3, [sp, #20]
 8009a92:	9b04      	ldr	r3, [sp, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dd05      	ble.n	8009aa4 <_dtoa_r+0x734>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f000 ffc3 	bl	800aa28 <__lshift>
 8009aa2:	4605      	mov	r5, r0
 8009aa4:	9b05      	ldr	r3, [sp, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	dd05      	ble.n	8009ab6 <_dtoa_r+0x746>
 8009aaa:	4621      	mov	r1, r4
 8009aac:	461a      	mov	r2, r3
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f000 ffba 	bl	800aa28 <__lshift>
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d06a      	beq.n	8009b92 <_dtoa_r+0x822>
 8009abc:	4621      	mov	r1, r4
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f001 f822 	bl	800ab08 <__mcmp>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	da64      	bge.n	8009b92 <_dtoa_r+0x822>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4629      	mov	r1, r5
 8009acc:	220a      	movs	r2, #10
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f000 fdb0 	bl	800a634 <__multadd>
 8009ad4:	9b07      	ldr	r3, [sp, #28]
 8009ad6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ada:	4605      	mov	r5, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8191 	beq.w	8009e04 <_dtoa_r+0xa94>
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	220a      	movs	r2, #10
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f000 fda3 	bl	800a634 <__multadd>
 8009aee:	f1ba 0f00 	cmp.w	sl, #0
 8009af2:	4607      	mov	r7, r0
 8009af4:	f300 808d 	bgt.w	8009c12 <_dtoa_r+0x8a2>
 8009af8:	9b06      	ldr	r3, [sp, #24]
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	dc50      	bgt.n	8009ba0 <_dtoa_r+0x830>
 8009afe:	e088      	b.n	8009c12 <_dtoa_r+0x8a2>
 8009b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b06:	e751      	b.n	80099ac <_dtoa_r+0x63c>
 8009b08:	f109 34ff 	add.w	r4, r9, #4294967295
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	bfbf      	itttt	lt
 8009b10:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009b12:	1ae3      	sublt	r3, r4, r3
 8009b14:	18d2      	addlt	r2, r2, r3
 8009b16:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009b18:	bfb6      	itet	lt
 8009b1a:	4623      	movlt	r3, r4
 8009b1c:	1b1c      	subge	r4, r3, r4
 8009b1e:	2400      	movlt	r4, #0
 8009b20:	f1b9 0f00 	cmp.w	r9, #0
 8009b24:	bfb5      	itete	lt
 8009b26:	9a04      	ldrlt	r2, [sp, #16]
 8009b28:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009b2c:	eba2 0809 	sublt.w	r8, r2, r9
 8009b30:	464a      	movge	r2, r9
 8009b32:	bfb8      	it	lt
 8009b34:	2200      	movlt	r2, #0
 8009b36:	e73c      	b.n	80099b2 <_dtoa_r+0x642>
 8009b38:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009b3c:	9f07      	ldr	r7, [sp, #28]
 8009b3e:	461c      	mov	r4, r3
 8009b40:	e744      	b.n	80099cc <_dtoa_r+0x65c>
 8009b42:	461a      	mov	r2, r3
 8009b44:	e770      	b.n	8009a28 <_dtoa_r+0x6b8>
 8009b46:	9b06      	ldr	r3, [sp, #24]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	dc18      	bgt.n	8009b7e <_dtoa_r+0x80e>
 8009b4c:	9b02      	ldr	r3, [sp, #8]
 8009b4e:	b9b3      	cbnz	r3, 8009b7e <_dtoa_r+0x80e>
 8009b50:	9b03      	ldr	r3, [sp, #12]
 8009b52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009b56:	b9a2      	cbnz	r2, 8009b82 <_dtoa_r+0x812>
 8009b58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009b5c:	0d12      	lsrs	r2, r2, #20
 8009b5e:	0512      	lsls	r2, r2, #20
 8009b60:	b18a      	cbz	r2, 8009b86 <_dtoa_r+0x816>
 8009b62:	9b04      	ldr	r3, [sp, #16]
 8009b64:	3301      	adds	r3, #1
 8009b66:	9304      	str	r3, [sp, #16]
 8009b68:	9b05      	ldr	r3, [sp, #20]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	9305      	str	r3, [sp, #20]
 8009b6e:	2301      	movs	r3, #1
 8009b70:	930a      	str	r3, [sp, #40]	; 0x28
 8009b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f47f af70 	bne.w	8009a5a <_dtoa_r+0x6ea>
 8009b7a:	2001      	movs	r0, #1
 8009b7c:	e775      	b.n	8009a6a <_dtoa_r+0x6fa>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e7f6      	b.n	8009b70 <_dtoa_r+0x800>
 8009b82:	9b02      	ldr	r3, [sp, #8]
 8009b84:	e7f4      	b.n	8009b70 <_dtoa_r+0x800>
 8009b86:	920a      	str	r2, [sp, #40]	; 0x28
 8009b88:	e7f3      	b.n	8009b72 <_dtoa_r+0x802>
 8009b8a:	d082      	beq.n	8009a92 <_dtoa_r+0x722>
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	301c      	adds	r0, #28
 8009b90:	e778      	b.n	8009a84 <_dtoa_r+0x714>
 8009b92:	f1b9 0f00 	cmp.w	r9, #0
 8009b96:	dc37      	bgt.n	8009c08 <_dtoa_r+0x898>
 8009b98:	9b06      	ldr	r3, [sp, #24]
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	dd34      	ble.n	8009c08 <_dtoa_r+0x898>
 8009b9e:	46ca      	mov	sl, r9
 8009ba0:	f1ba 0f00 	cmp.w	sl, #0
 8009ba4:	d10d      	bne.n	8009bc2 <_dtoa_r+0x852>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4653      	mov	r3, sl
 8009baa:	2205      	movs	r2, #5
 8009bac:	4630      	mov	r0, r6
 8009bae:	f000 fd41 	bl	800a634 <__multadd>
 8009bb2:	4601      	mov	r1, r0
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f000 ffa6 	bl	800ab08 <__mcmp>
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f73f adeb 	bgt.w	8009798 <_dtoa_r+0x428>
 8009bc2:	9b08      	ldr	r3, [sp, #32]
 8009bc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009bc8:	ea6f 0b03 	mvn.w	fp, r3
 8009bcc:	f04f 0900 	mov.w	r9, #0
 8009bd0:	4621      	mov	r1, r4
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f000 fd0c 	bl	800a5f0 <_Bfree>
 8009bd8:	2f00      	cmp	r7, #0
 8009bda:	f43f aea8 	beq.w	800992e <_dtoa_r+0x5be>
 8009bde:	f1b9 0f00 	cmp.w	r9, #0
 8009be2:	d005      	beq.n	8009bf0 <_dtoa_r+0x880>
 8009be4:	45b9      	cmp	r9, r7
 8009be6:	d003      	beq.n	8009bf0 <_dtoa_r+0x880>
 8009be8:	4649      	mov	r1, r9
 8009bea:	4630      	mov	r0, r6
 8009bec:	f000 fd00 	bl	800a5f0 <_Bfree>
 8009bf0:	4639      	mov	r1, r7
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f000 fcfc 	bl	800a5f0 <_Bfree>
 8009bf8:	e699      	b.n	800992e <_dtoa_r+0x5be>
 8009bfa:	2400      	movs	r4, #0
 8009bfc:	4627      	mov	r7, r4
 8009bfe:	e7e0      	b.n	8009bc2 <_dtoa_r+0x852>
 8009c00:	46bb      	mov	fp, r7
 8009c02:	4604      	mov	r4, r0
 8009c04:	4607      	mov	r7, r0
 8009c06:	e5c7      	b.n	8009798 <_dtoa_r+0x428>
 8009c08:	9b07      	ldr	r3, [sp, #28]
 8009c0a:	46ca      	mov	sl, r9
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 8100 	beq.w	8009e12 <_dtoa_r+0xaa2>
 8009c12:	f1b8 0f00 	cmp.w	r8, #0
 8009c16:	dd05      	ble.n	8009c24 <_dtoa_r+0x8b4>
 8009c18:	4639      	mov	r1, r7
 8009c1a:	4642      	mov	r2, r8
 8009c1c:	4630      	mov	r0, r6
 8009c1e:	f000 ff03 	bl	800aa28 <__lshift>
 8009c22:	4607      	mov	r7, r0
 8009c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d05d      	beq.n	8009ce6 <_dtoa_r+0x976>
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f000 fc9f 	bl	800a570 <_Balloc>
 8009c32:	4680      	mov	r8, r0
 8009c34:	b928      	cbnz	r0, 8009c42 <_dtoa_r+0x8d2>
 8009c36:	4b82      	ldr	r3, [pc, #520]	; (8009e40 <_dtoa_r+0xad0>)
 8009c38:	4602      	mov	r2, r0
 8009c3a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c3e:	f7ff bbaf 	b.w	80093a0 <_dtoa_r+0x30>
 8009c42:	693a      	ldr	r2, [r7, #16]
 8009c44:	3202      	adds	r2, #2
 8009c46:	0092      	lsls	r2, r2, #2
 8009c48:	f107 010c 	add.w	r1, r7, #12
 8009c4c:	300c      	adds	r0, #12
 8009c4e:	f7fd fd33 	bl	80076b8 <memcpy>
 8009c52:	2201      	movs	r2, #1
 8009c54:	4641      	mov	r1, r8
 8009c56:	4630      	mov	r0, r6
 8009c58:	f000 fee6 	bl	800aa28 <__lshift>
 8009c5c:	9b01      	ldr	r3, [sp, #4]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	4453      	add	r3, sl
 8009c66:	9308      	str	r3, [sp, #32]
 8009c68:	9b02      	ldr	r3, [sp, #8]
 8009c6a:	f003 0301 	and.w	r3, r3, #1
 8009c6e:	46b9      	mov	r9, r7
 8009c70:	9307      	str	r3, [sp, #28]
 8009c72:	4607      	mov	r7, r0
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	4621      	mov	r1, r4
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	9302      	str	r3, [sp, #8]
 8009c7e:	f7ff faeb 	bl	8009258 <quorem>
 8009c82:	4603      	mov	r3, r0
 8009c84:	3330      	adds	r3, #48	; 0x30
 8009c86:	9005      	str	r0, [sp, #20]
 8009c88:	4649      	mov	r1, r9
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c8e:	f000 ff3b 	bl	800ab08 <__mcmp>
 8009c92:	463a      	mov	r2, r7
 8009c94:	4682      	mov	sl, r0
 8009c96:	4621      	mov	r1, r4
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f000 ff51 	bl	800ab40 <__mdiff>
 8009c9e:	68c2      	ldr	r2, [r0, #12]
 8009ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca2:	4680      	mov	r8, r0
 8009ca4:	bb0a      	cbnz	r2, 8009cea <_dtoa_r+0x97a>
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f000 ff2d 	bl	800ab08 <__mcmp>
 8009cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009cba:	f000 fc99 	bl	800a5f0 <_Bfree>
 8009cbe:	9b06      	ldr	r3, [sp, #24]
 8009cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009cc6:	ea43 0102 	orr.w	r1, r3, r2
 8009cca:	9b07      	ldr	r3, [sp, #28]
 8009ccc:	430b      	orrs	r3, r1
 8009cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd0:	d10d      	bne.n	8009cee <_dtoa_r+0x97e>
 8009cd2:	2b39      	cmp	r3, #57	; 0x39
 8009cd4:	d029      	beq.n	8009d2a <_dtoa_r+0x9ba>
 8009cd6:	f1ba 0f00 	cmp.w	sl, #0
 8009cda:	dd01      	ble.n	8009ce0 <_dtoa_r+0x970>
 8009cdc:	9b05      	ldr	r3, [sp, #20]
 8009cde:	3331      	adds	r3, #49	; 0x31
 8009ce0:	9a02      	ldr	r2, [sp, #8]
 8009ce2:	7013      	strb	r3, [r2, #0]
 8009ce4:	e774      	b.n	8009bd0 <_dtoa_r+0x860>
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	e7b8      	b.n	8009c5c <_dtoa_r+0x8ec>
 8009cea:	2201      	movs	r2, #1
 8009cec:	e7e1      	b.n	8009cb2 <_dtoa_r+0x942>
 8009cee:	f1ba 0f00 	cmp.w	sl, #0
 8009cf2:	db06      	blt.n	8009d02 <_dtoa_r+0x992>
 8009cf4:	9906      	ldr	r1, [sp, #24]
 8009cf6:	ea41 0a0a 	orr.w	sl, r1, sl
 8009cfa:	9907      	ldr	r1, [sp, #28]
 8009cfc:	ea5a 0101 	orrs.w	r1, sl, r1
 8009d00:	d120      	bne.n	8009d44 <_dtoa_r+0x9d4>
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	ddec      	ble.n	8009ce0 <_dtoa_r+0x970>
 8009d06:	4629      	mov	r1, r5
 8009d08:	2201      	movs	r2, #1
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	f000 fe8b 	bl	800aa28 <__lshift>
 8009d12:	4621      	mov	r1, r4
 8009d14:	4605      	mov	r5, r0
 8009d16:	f000 fef7 	bl	800ab08 <__mcmp>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	9b04      	ldr	r3, [sp, #16]
 8009d1e:	dc02      	bgt.n	8009d26 <_dtoa_r+0x9b6>
 8009d20:	d1de      	bne.n	8009ce0 <_dtoa_r+0x970>
 8009d22:	07da      	lsls	r2, r3, #31
 8009d24:	d5dc      	bpl.n	8009ce0 <_dtoa_r+0x970>
 8009d26:	2b39      	cmp	r3, #57	; 0x39
 8009d28:	d1d8      	bne.n	8009cdc <_dtoa_r+0x96c>
 8009d2a:	9a02      	ldr	r2, [sp, #8]
 8009d2c:	2339      	movs	r3, #57	; 0x39
 8009d2e:	7013      	strb	r3, [r2, #0]
 8009d30:	4643      	mov	r3, r8
 8009d32:	4698      	mov	r8, r3
 8009d34:	3b01      	subs	r3, #1
 8009d36:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009d3a:	2a39      	cmp	r2, #57	; 0x39
 8009d3c:	d051      	beq.n	8009de2 <_dtoa_r+0xa72>
 8009d3e:	3201      	adds	r2, #1
 8009d40:	701a      	strb	r2, [r3, #0]
 8009d42:	e745      	b.n	8009bd0 <_dtoa_r+0x860>
 8009d44:	2a00      	cmp	r2, #0
 8009d46:	dd03      	ble.n	8009d50 <_dtoa_r+0x9e0>
 8009d48:	2b39      	cmp	r3, #57	; 0x39
 8009d4a:	d0ee      	beq.n	8009d2a <_dtoa_r+0x9ba>
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	e7c7      	b.n	8009ce0 <_dtoa_r+0x970>
 8009d50:	9a04      	ldr	r2, [sp, #16]
 8009d52:	9908      	ldr	r1, [sp, #32]
 8009d54:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d58:	428a      	cmp	r2, r1
 8009d5a:	d02b      	beq.n	8009db4 <_dtoa_r+0xa44>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	2300      	movs	r3, #0
 8009d60:	220a      	movs	r2, #10
 8009d62:	4630      	mov	r0, r6
 8009d64:	f000 fc66 	bl	800a634 <__multadd>
 8009d68:	45b9      	cmp	r9, r7
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	f04f 020a 	mov.w	r2, #10
 8009d74:	4649      	mov	r1, r9
 8009d76:	4630      	mov	r0, r6
 8009d78:	d107      	bne.n	8009d8a <_dtoa_r+0xa1a>
 8009d7a:	f000 fc5b 	bl	800a634 <__multadd>
 8009d7e:	4681      	mov	r9, r0
 8009d80:	4607      	mov	r7, r0
 8009d82:	9b04      	ldr	r3, [sp, #16]
 8009d84:	3301      	adds	r3, #1
 8009d86:	9304      	str	r3, [sp, #16]
 8009d88:	e774      	b.n	8009c74 <_dtoa_r+0x904>
 8009d8a:	f000 fc53 	bl	800a634 <__multadd>
 8009d8e:	4639      	mov	r1, r7
 8009d90:	4681      	mov	r9, r0
 8009d92:	2300      	movs	r3, #0
 8009d94:	220a      	movs	r2, #10
 8009d96:	4630      	mov	r0, r6
 8009d98:	f000 fc4c 	bl	800a634 <__multadd>
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	e7f0      	b.n	8009d82 <_dtoa_r+0xa12>
 8009da0:	f1ba 0f00 	cmp.w	sl, #0
 8009da4:	9a01      	ldr	r2, [sp, #4]
 8009da6:	bfcc      	ite	gt
 8009da8:	46d0      	movgt	r8, sl
 8009daa:	f04f 0801 	movle.w	r8, #1
 8009dae:	4490      	add	r8, r2
 8009db0:	f04f 0900 	mov.w	r9, #0
 8009db4:	4629      	mov	r1, r5
 8009db6:	2201      	movs	r2, #1
 8009db8:	4630      	mov	r0, r6
 8009dba:	9302      	str	r3, [sp, #8]
 8009dbc:	f000 fe34 	bl	800aa28 <__lshift>
 8009dc0:	4621      	mov	r1, r4
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	f000 fea0 	bl	800ab08 <__mcmp>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	dcb1      	bgt.n	8009d30 <_dtoa_r+0x9c0>
 8009dcc:	d102      	bne.n	8009dd4 <_dtoa_r+0xa64>
 8009dce:	9b02      	ldr	r3, [sp, #8]
 8009dd0:	07db      	lsls	r3, r3, #31
 8009dd2:	d4ad      	bmi.n	8009d30 <_dtoa_r+0x9c0>
 8009dd4:	4643      	mov	r3, r8
 8009dd6:	4698      	mov	r8, r3
 8009dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ddc:	2a30      	cmp	r2, #48	; 0x30
 8009dde:	d0fa      	beq.n	8009dd6 <_dtoa_r+0xa66>
 8009de0:	e6f6      	b.n	8009bd0 <_dtoa_r+0x860>
 8009de2:	9a01      	ldr	r2, [sp, #4]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d1a4      	bne.n	8009d32 <_dtoa_r+0x9c2>
 8009de8:	f10b 0b01 	add.w	fp, fp, #1
 8009dec:	2331      	movs	r3, #49	; 0x31
 8009dee:	e778      	b.n	8009ce2 <_dtoa_r+0x972>
 8009df0:	4b14      	ldr	r3, [pc, #80]	; (8009e44 <_dtoa_r+0xad4>)
 8009df2:	f7ff bb27 	b.w	8009444 <_dtoa_r+0xd4>
 8009df6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f47f ab03 	bne.w	8009404 <_dtoa_r+0x94>
 8009dfe:	4b12      	ldr	r3, [pc, #72]	; (8009e48 <_dtoa_r+0xad8>)
 8009e00:	f7ff bb20 	b.w	8009444 <_dtoa_r+0xd4>
 8009e04:	f1ba 0f00 	cmp.w	sl, #0
 8009e08:	dc03      	bgt.n	8009e12 <_dtoa_r+0xaa2>
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	f73f aec7 	bgt.w	8009ba0 <_dtoa_r+0x830>
 8009e12:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e16:	4621      	mov	r1, r4
 8009e18:	4628      	mov	r0, r5
 8009e1a:	f7ff fa1d 	bl	8009258 <quorem>
 8009e1e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009e22:	f808 3b01 	strb.w	r3, [r8], #1
 8009e26:	9a01      	ldr	r2, [sp, #4]
 8009e28:	eba8 0202 	sub.w	r2, r8, r2
 8009e2c:	4592      	cmp	sl, r2
 8009e2e:	ddb7      	ble.n	8009da0 <_dtoa_r+0xa30>
 8009e30:	4629      	mov	r1, r5
 8009e32:	2300      	movs	r3, #0
 8009e34:	220a      	movs	r2, #10
 8009e36:	4630      	mov	r0, r6
 8009e38:	f000 fbfc 	bl	800a634 <__multadd>
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	e7ea      	b.n	8009e16 <_dtoa_r+0xaa6>
 8009e40:	0800d233 	.word	0x0800d233
 8009e44:	0800d014 	.word	0x0800d014
 8009e48:	0800d191 	.word	0x0800d191

08009e4c <rshift>:
 8009e4c:	6903      	ldr	r3, [r0, #16]
 8009e4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e5a:	f100 0414 	add.w	r4, r0, #20
 8009e5e:	dd45      	ble.n	8009eec <rshift+0xa0>
 8009e60:	f011 011f 	ands.w	r1, r1, #31
 8009e64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e6c:	d10c      	bne.n	8009e88 <rshift+0x3c>
 8009e6e:	f100 0710 	add.w	r7, r0, #16
 8009e72:	4629      	mov	r1, r5
 8009e74:	42b1      	cmp	r1, r6
 8009e76:	d334      	bcc.n	8009ee2 <rshift+0x96>
 8009e78:	1a9b      	subs	r3, r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	1eea      	subs	r2, r5, #3
 8009e7e:	4296      	cmp	r6, r2
 8009e80:	bf38      	it	cc
 8009e82:	2300      	movcc	r3, #0
 8009e84:	4423      	add	r3, r4
 8009e86:	e015      	b.n	8009eb4 <rshift+0x68>
 8009e88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e8c:	f1c1 0820 	rsb	r8, r1, #32
 8009e90:	40cf      	lsrs	r7, r1
 8009e92:	f105 0e04 	add.w	lr, r5, #4
 8009e96:	46a1      	mov	r9, r4
 8009e98:	4576      	cmp	r6, lr
 8009e9a:	46f4      	mov	ip, lr
 8009e9c:	d815      	bhi.n	8009eca <rshift+0x7e>
 8009e9e:	1a9a      	subs	r2, r3, r2
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	3a04      	subs	r2, #4
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	42ae      	cmp	r6, r5
 8009ea8:	bf38      	it	cc
 8009eaa:	2200      	movcc	r2, #0
 8009eac:	18a3      	adds	r3, r4, r2
 8009eae:	50a7      	str	r7, [r4, r2]
 8009eb0:	b107      	cbz	r7, 8009eb4 <rshift+0x68>
 8009eb2:	3304      	adds	r3, #4
 8009eb4:	1b1a      	subs	r2, r3, r4
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009ebc:	bf08      	it	eq
 8009ebe:	2300      	moveq	r3, #0
 8009ec0:	6102      	str	r2, [r0, #16]
 8009ec2:	bf08      	it	eq
 8009ec4:	6143      	streq	r3, [r0, #20]
 8009ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009eca:	f8dc c000 	ldr.w	ip, [ip]
 8009ece:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ed2:	ea4c 0707 	orr.w	r7, ip, r7
 8009ed6:	f849 7b04 	str.w	r7, [r9], #4
 8009eda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ede:	40cf      	lsrs	r7, r1
 8009ee0:	e7da      	b.n	8009e98 <rshift+0x4c>
 8009ee2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ee6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009eea:	e7c3      	b.n	8009e74 <rshift+0x28>
 8009eec:	4623      	mov	r3, r4
 8009eee:	e7e1      	b.n	8009eb4 <rshift+0x68>

08009ef0 <__hexdig_fun>:
 8009ef0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ef4:	2b09      	cmp	r3, #9
 8009ef6:	d802      	bhi.n	8009efe <__hexdig_fun+0xe>
 8009ef8:	3820      	subs	r0, #32
 8009efa:	b2c0      	uxtb	r0, r0
 8009efc:	4770      	bx	lr
 8009efe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009f02:	2b05      	cmp	r3, #5
 8009f04:	d801      	bhi.n	8009f0a <__hexdig_fun+0x1a>
 8009f06:	3847      	subs	r0, #71	; 0x47
 8009f08:	e7f7      	b.n	8009efa <__hexdig_fun+0xa>
 8009f0a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009f0e:	2b05      	cmp	r3, #5
 8009f10:	d801      	bhi.n	8009f16 <__hexdig_fun+0x26>
 8009f12:	3827      	subs	r0, #39	; 0x27
 8009f14:	e7f1      	b.n	8009efa <__hexdig_fun+0xa>
 8009f16:	2000      	movs	r0, #0
 8009f18:	4770      	bx	lr
	...

08009f1c <__gethex>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	ed2d 8b02 	vpush	{d8}
 8009f24:	b089      	sub	sp, #36	; 0x24
 8009f26:	ee08 0a10 	vmov	s16, r0
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	4bb4      	ldr	r3, [pc, #720]	; (800a200 <__gethex+0x2e4>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	4618      	mov	r0, r3
 8009f34:	468b      	mov	fp, r1
 8009f36:	4690      	mov	r8, r2
 8009f38:	f7f6 f982 	bl	8000240 <strlen>
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	f8db 2000 	ldr.w	r2, [fp]
 8009f42:	4403      	add	r3, r0
 8009f44:	4682      	mov	sl, r0
 8009f46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	1c93      	adds	r3, r2, #2
 8009f4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009f52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009f56:	32fe      	adds	r2, #254	; 0xfe
 8009f58:	18d1      	adds	r1, r2, r3
 8009f5a:	461f      	mov	r7, r3
 8009f5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f60:	9100      	str	r1, [sp, #0]
 8009f62:	2830      	cmp	r0, #48	; 0x30
 8009f64:	d0f8      	beq.n	8009f58 <__gethex+0x3c>
 8009f66:	f7ff ffc3 	bl	8009ef0 <__hexdig_fun>
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	d13a      	bne.n	8009fe6 <__gethex+0xca>
 8009f70:	9901      	ldr	r1, [sp, #4]
 8009f72:	4652      	mov	r2, sl
 8009f74:	4638      	mov	r0, r7
 8009f76:	f001 f933 	bl	800b1e0 <strncmp>
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	2800      	cmp	r0, #0
 8009f7e:	d168      	bne.n	800a052 <__gethex+0x136>
 8009f80:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009f84:	eb07 060a 	add.w	r6, r7, sl
 8009f88:	f7ff ffb2 	bl	8009ef0 <__hexdig_fun>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d062      	beq.n	800a056 <__gethex+0x13a>
 8009f90:	4633      	mov	r3, r6
 8009f92:	7818      	ldrb	r0, [r3, #0]
 8009f94:	2830      	cmp	r0, #48	; 0x30
 8009f96:	461f      	mov	r7, r3
 8009f98:	f103 0301 	add.w	r3, r3, #1
 8009f9c:	d0f9      	beq.n	8009f92 <__gethex+0x76>
 8009f9e:	f7ff ffa7 	bl	8009ef0 <__hexdig_fun>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	fab0 f480 	clz	r4, r0
 8009fa8:	0964      	lsrs	r4, r4, #5
 8009faa:	4635      	mov	r5, r6
 8009fac:	9300      	str	r3, [sp, #0]
 8009fae:	463a      	mov	r2, r7
 8009fb0:	4616      	mov	r6, r2
 8009fb2:	3201      	adds	r2, #1
 8009fb4:	7830      	ldrb	r0, [r6, #0]
 8009fb6:	f7ff ff9b 	bl	8009ef0 <__hexdig_fun>
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d1f8      	bne.n	8009fb0 <__gethex+0x94>
 8009fbe:	9901      	ldr	r1, [sp, #4]
 8009fc0:	4652      	mov	r2, sl
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f001 f90c 	bl	800b1e0 <strncmp>
 8009fc8:	b980      	cbnz	r0, 8009fec <__gethex+0xd0>
 8009fca:	b94d      	cbnz	r5, 8009fe0 <__gethex+0xc4>
 8009fcc:	eb06 050a 	add.w	r5, r6, sl
 8009fd0:	462a      	mov	r2, r5
 8009fd2:	4616      	mov	r6, r2
 8009fd4:	3201      	adds	r2, #1
 8009fd6:	7830      	ldrb	r0, [r6, #0]
 8009fd8:	f7ff ff8a 	bl	8009ef0 <__hexdig_fun>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d1f8      	bne.n	8009fd2 <__gethex+0xb6>
 8009fe0:	1bad      	subs	r5, r5, r6
 8009fe2:	00ad      	lsls	r5, r5, #2
 8009fe4:	e004      	b.n	8009ff0 <__gethex+0xd4>
 8009fe6:	2400      	movs	r4, #0
 8009fe8:	4625      	mov	r5, r4
 8009fea:	e7e0      	b.n	8009fae <__gethex+0x92>
 8009fec:	2d00      	cmp	r5, #0
 8009fee:	d1f7      	bne.n	8009fe0 <__gethex+0xc4>
 8009ff0:	7833      	ldrb	r3, [r6, #0]
 8009ff2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ff6:	2b50      	cmp	r3, #80	; 0x50
 8009ff8:	d13b      	bne.n	800a072 <__gethex+0x156>
 8009ffa:	7873      	ldrb	r3, [r6, #1]
 8009ffc:	2b2b      	cmp	r3, #43	; 0x2b
 8009ffe:	d02c      	beq.n	800a05a <__gethex+0x13e>
 800a000:	2b2d      	cmp	r3, #45	; 0x2d
 800a002:	d02e      	beq.n	800a062 <__gethex+0x146>
 800a004:	1c71      	adds	r1, r6, #1
 800a006:	f04f 0900 	mov.w	r9, #0
 800a00a:	7808      	ldrb	r0, [r1, #0]
 800a00c:	f7ff ff70 	bl	8009ef0 <__hexdig_fun>
 800a010:	1e43      	subs	r3, r0, #1
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b18      	cmp	r3, #24
 800a016:	d82c      	bhi.n	800a072 <__gethex+0x156>
 800a018:	f1a0 0210 	sub.w	r2, r0, #16
 800a01c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a020:	f7ff ff66 	bl	8009ef0 <__hexdig_fun>
 800a024:	1e43      	subs	r3, r0, #1
 800a026:	b2db      	uxtb	r3, r3
 800a028:	2b18      	cmp	r3, #24
 800a02a:	d91d      	bls.n	800a068 <__gethex+0x14c>
 800a02c:	f1b9 0f00 	cmp.w	r9, #0
 800a030:	d000      	beq.n	800a034 <__gethex+0x118>
 800a032:	4252      	negs	r2, r2
 800a034:	4415      	add	r5, r2
 800a036:	f8cb 1000 	str.w	r1, [fp]
 800a03a:	b1e4      	cbz	r4, 800a076 <__gethex+0x15a>
 800a03c:	9b00      	ldr	r3, [sp, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bf14      	ite	ne
 800a042:	2700      	movne	r7, #0
 800a044:	2706      	moveq	r7, #6
 800a046:	4638      	mov	r0, r7
 800a048:	b009      	add	sp, #36	; 0x24
 800a04a:	ecbd 8b02 	vpop	{d8}
 800a04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a052:	463e      	mov	r6, r7
 800a054:	4625      	mov	r5, r4
 800a056:	2401      	movs	r4, #1
 800a058:	e7ca      	b.n	8009ff0 <__gethex+0xd4>
 800a05a:	f04f 0900 	mov.w	r9, #0
 800a05e:	1cb1      	adds	r1, r6, #2
 800a060:	e7d3      	b.n	800a00a <__gethex+0xee>
 800a062:	f04f 0901 	mov.w	r9, #1
 800a066:	e7fa      	b.n	800a05e <__gethex+0x142>
 800a068:	230a      	movs	r3, #10
 800a06a:	fb03 0202 	mla	r2, r3, r2, r0
 800a06e:	3a10      	subs	r2, #16
 800a070:	e7d4      	b.n	800a01c <__gethex+0x100>
 800a072:	4631      	mov	r1, r6
 800a074:	e7df      	b.n	800a036 <__gethex+0x11a>
 800a076:	1bf3      	subs	r3, r6, r7
 800a078:	3b01      	subs	r3, #1
 800a07a:	4621      	mov	r1, r4
 800a07c:	2b07      	cmp	r3, #7
 800a07e:	dc0b      	bgt.n	800a098 <__gethex+0x17c>
 800a080:	ee18 0a10 	vmov	r0, s16
 800a084:	f000 fa74 	bl	800a570 <_Balloc>
 800a088:	4604      	mov	r4, r0
 800a08a:	b940      	cbnz	r0, 800a09e <__gethex+0x182>
 800a08c:	4b5d      	ldr	r3, [pc, #372]	; (800a204 <__gethex+0x2e8>)
 800a08e:	4602      	mov	r2, r0
 800a090:	21de      	movs	r1, #222	; 0xde
 800a092:	485d      	ldr	r0, [pc, #372]	; (800a208 <__gethex+0x2ec>)
 800a094:	f001 f8c6 	bl	800b224 <__assert_func>
 800a098:	3101      	adds	r1, #1
 800a09a:	105b      	asrs	r3, r3, #1
 800a09c:	e7ee      	b.n	800a07c <__gethex+0x160>
 800a09e:	f100 0914 	add.w	r9, r0, #20
 800a0a2:	f04f 0b00 	mov.w	fp, #0
 800a0a6:	f1ca 0301 	rsb	r3, sl, #1
 800a0aa:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0ae:	f8cd b000 	str.w	fp, [sp]
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	42b7      	cmp	r7, r6
 800a0b6:	d340      	bcc.n	800a13a <__gethex+0x21e>
 800a0b8:	9802      	ldr	r0, [sp, #8]
 800a0ba:	9b00      	ldr	r3, [sp, #0]
 800a0bc:	f840 3b04 	str.w	r3, [r0], #4
 800a0c0:	eba0 0009 	sub.w	r0, r0, r9
 800a0c4:	1080      	asrs	r0, r0, #2
 800a0c6:	0146      	lsls	r6, r0, #5
 800a0c8:	6120      	str	r0, [r4, #16]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f000 fb42 	bl	800a754 <__hi0bits>
 800a0d0:	1a30      	subs	r0, r6, r0
 800a0d2:	f8d8 6000 	ldr.w	r6, [r8]
 800a0d6:	42b0      	cmp	r0, r6
 800a0d8:	dd63      	ble.n	800a1a2 <__gethex+0x286>
 800a0da:	1b87      	subs	r7, r0, r6
 800a0dc:	4639      	mov	r1, r7
 800a0de:	4620      	mov	r0, r4
 800a0e0:	f000 fee3 	bl	800aeaa <__any_on>
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	b1a8      	cbz	r0, 800a114 <__gethex+0x1f8>
 800a0e8:	1e7b      	subs	r3, r7, #1
 800a0ea:	1159      	asrs	r1, r3, #5
 800a0ec:	f003 021f 	and.w	r2, r3, #31
 800a0f0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a0f4:	f04f 0a01 	mov.w	sl, #1
 800a0f8:	fa0a f202 	lsl.w	r2, sl, r2
 800a0fc:	420a      	tst	r2, r1
 800a0fe:	d009      	beq.n	800a114 <__gethex+0x1f8>
 800a100:	4553      	cmp	r3, sl
 800a102:	dd05      	ble.n	800a110 <__gethex+0x1f4>
 800a104:	1eb9      	subs	r1, r7, #2
 800a106:	4620      	mov	r0, r4
 800a108:	f000 fecf 	bl	800aeaa <__any_on>
 800a10c:	2800      	cmp	r0, #0
 800a10e:	d145      	bne.n	800a19c <__gethex+0x280>
 800a110:	f04f 0a02 	mov.w	sl, #2
 800a114:	4639      	mov	r1, r7
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff fe98 	bl	8009e4c <rshift>
 800a11c:	443d      	add	r5, r7
 800a11e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a122:	42ab      	cmp	r3, r5
 800a124:	da4c      	bge.n	800a1c0 <__gethex+0x2a4>
 800a126:	ee18 0a10 	vmov	r0, s16
 800a12a:	4621      	mov	r1, r4
 800a12c:	f000 fa60 	bl	800a5f0 <_Bfree>
 800a130:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a132:	2300      	movs	r3, #0
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	27a3      	movs	r7, #163	; 0xa3
 800a138:	e785      	b.n	800a046 <__gethex+0x12a>
 800a13a:	1e73      	subs	r3, r6, #1
 800a13c:	9a05      	ldr	r2, [sp, #20]
 800a13e:	9303      	str	r3, [sp, #12]
 800a140:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a144:	4293      	cmp	r3, r2
 800a146:	d019      	beq.n	800a17c <__gethex+0x260>
 800a148:	f1bb 0f20 	cmp.w	fp, #32
 800a14c:	d107      	bne.n	800a15e <__gethex+0x242>
 800a14e:	9b02      	ldr	r3, [sp, #8]
 800a150:	9a00      	ldr	r2, [sp, #0]
 800a152:	f843 2b04 	str.w	r2, [r3], #4
 800a156:	9302      	str	r3, [sp, #8]
 800a158:	2300      	movs	r3, #0
 800a15a:	9300      	str	r3, [sp, #0]
 800a15c:	469b      	mov	fp, r3
 800a15e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a162:	f7ff fec5 	bl	8009ef0 <__hexdig_fun>
 800a166:	9b00      	ldr	r3, [sp, #0]
 800a168:	f000 000f 	and.w	r0, r0, #15
 800a16c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a170:	4303      	orrs	r3, r0
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	f10b 0b04 	add.w	fp, fp, #4
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	e00d      	b.n	800a198 <__gethex+0x27c>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	9a06      	ldr	r2, [sp, #24]
 800a180:	4413      	add	r3, r2
 800a182:	42bb      	cmp	r3, r7
 800a184:	d3e0      	bcc.n	800a148 <__gethex+0x22c>
 800a186:	4618      	mov	r0, r3
 800a188:	9901      	ldr	r1, [sp, #4]
 800a18a:	9307      	str	r3, [sp, #28]
 800a18c:	4652      	mov	r2, sl
 800a18e:	f001 f827 	bl	800b1e0 <strncmp>
 800a192:	9b07      	ldr	r3, [sp, #28]
 800a194:	2800      	cmp	r0, #0
 800a196:	d1d7      	bne.n	800a148 <__gethex+0x22c>
 800a198:	461e      	mov	r6, r3
 800a19a:	e78b      	b.n	800a0b4 <__gethex+0x198>
 800a19c:	f04f 0a03 	mov.w	sl, #3
 800a1a0:	e7b8      	b.n	800a114 <__gethex+0x1f8>
 800a1a2:	da0a      	bge.n	800a1ba <__gethex+0x29e>
 800a1a4:	1a37      	subs	r7, r6, r0
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	ee18 0a10 	vmov	r0, s16
 800a1ac:	463a      	mov	r2, r7
 800a1ae:	f000 fc3b 	bl	800aa28 <__lshift>
 800a1b2:	1bed      	subs	r5, r5, r7
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	f100 0914 	add.w	r9, r0, #20
 800a1ba:	f04f 0a00 	mov.w	sl, #0
 800a1be:	e7ae      	b.n	800a11e <__gethex+0x202>
 800a1c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a1c4:	42a8      	cmp	r0, r5
 800a1c6:	dd72      	ble.n	800a2ae <__gethex+0x392>
 800a1c8:	1b45      	subs	r5, r0, r5
 800a1ca:	42ae      	cmp	r6, r5
 800a1cc:	dc36      	bgt.n	800a23c <__gethex+0x320>
 800a1ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d02a      	beq.n	800a22c <__gethex+0x310>
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d02c      	beq.n	800a234 <__gethex+0x318>
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d11c      	bne.n	800a218 <__gethex+0x2fc>
 800a1de:	42ae      	cmp	r6, r5
 800a1e0:	d11a      	bne.n	800a218 <__gethex+0x2fc>
 800a1e2:	2e01      	cmp	r6, #1
 800a1e4:	d112      	bne.n	800a20c <__gethex+0x2f0>
 800a1e6:	9a04      	ldr	r2, [sp, #16]
 800a1e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	f8c9 3000 	str.w	r3, [r9]
 800a1f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1f8:	2762      	movs	r7, #98	; 0x62
 800a1fa:	601c      	str	r4, [r3, #0]
 800a1fc:	e723      	b.n	800a046 <__gethex+0x12a>
 800a1fe:	bf00      	nop
 800a200:	0800d2cc 	.word	0x0800d2cc
 800a204:	0800d233 	.word	0x0800d233
 800a208:	0800d244 	.word	0x0800d244
 800a20c:	1e71      	subs	r1, r6, #1
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 fe4b 	bl	800aeaa <__any_on>
 800a214:	2800      	cmp	r0, #0
 800a216:	d1e6      	bne.n	800a1e6 <__gethex+0x2ca>
 800a218:	ee18 0a10 	vmov	r0, s16
 800a21c:	4621      	mov	r1, r4
 800a21e:	f000 f9e7 	bl	800a5f0 <_Bfree>
 800a222:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a224:	2300      	movs	r3, #0
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	2750      	movs	r7, #80	; 0x50
 800a22a:	e70c      	b.n	800a046 <__gethex+0x12a>
 800a22c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f2      	bne.n	800a218 <__gethex+0x2fc>
 800a232:	e7d8      	b.n	800a1e6 <__gethex+0x2ca>
 800a234:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1d5      	bne.n	800a1e6 <__gethex+0x2ca>
 800a23a:	e7ed      	b.n	800a218 <__gethex+0x2fc>
 800a23c:	1e6f      	subs	r7, r5, #1
 800a23e:	f1ba 0f00 	cmp.w	sl, #0
 800a242:	d131      	bne.n	800a2a8 <__gethex+0x38c>
 800a244:	b127      	cbz	r7, 800a250 <__gethex+0x334>
 800a246:	4639      	mov	r1, r7
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 fe2e 	bl	800aeaa <__any_on>
 800a24e:	4682      	mov	sl, r0
 800a250:	117b      	asrs	r3, r7, #5
 800a252:	2101      	movs	r1, #1
 800a254:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a258:	f007 071f 	and.w	r7, r7, #31
 800a25c:	fa01 f707 	lsl.w	r7, r1, r7
 800a260:	421f      	tst	r7, r3
 800a262:	4629      	mov	r1, r5
 800a264:	4620      	mov	r0, r4
 800a266:	bf18      	it	ne
 800a268:	f04a 0a02 	orrne.w	sl, sl, #2
 800a26c:	1b76      	subs	r6, r6, r5
 800a26e:	f7ff fded 	bl	8009e4c <rshift>
 800a272:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a276:	2702      	movs	r7, #2
 800a278:	f1ba 0f00 	cmp.w	sl, #0
 800a27c:	d048      	beq.n	800a310 <__gethex+0x3f4>
 800a27e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a282:	2b02      	cmp	r3, #2
 800a284:	d015      	beq.n	800a2b2 <__gethex+0x396>
 800a286:	2b03      	cmp	r3, #3
 800a288:	d017      	beq.n	800a2ba <__gethex+0x39e>
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d109      	bne.n	800a2a2 <__gethex+0x386>
 800a28e:	f01a 0f02 	tst.w	sl, #2
 800a292:	d006      	beq.n	800a2a2 <__gethex+0x386>
 800a294:	f8d9 0000 	ldr.w	r0, [r9]
 800a298:	ea4a 0a00 	orr.w	sl, sl, r0
 800a29c:	f01a 0f01 	tst.w	sl, #1
 800a2a0:	d10e      	bne.n	800a2c0 <__gethex+0x3a4>
 800a2a2:	f047 0710 	orr.w	r7, r7, #16
 800a2a6:	e033      	b.n	800a310 <__gethex+0x3f4>
 800a2a8:	f04f 0a01 	mov.w	sl, #1
 800a2ac:	e7d0      	b.n	800a250 <__gethex+0x334>
 800a2ae:	2701      	movs	r7, #1
 800a2b0:	e7e2      	b.n	800a278 <__gethex+0x35c>
 800a2b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2b4:	f1c3 0301 	rsb	r3, r3, #1
 800a2b8:	9315      	str	r3, [sp, #84]	; 0x54
 800a2ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d0f0      	beq.n	800a2a2 <__gethex+0x386>
 800a2c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2c4:	f104 0314 	add.w	r3, r4, #20
 800a2c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2d0:	f04f 0c00 	mov.w	ip, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2da:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2de:	d01c      	beq.n	800a31a <__gethex+0x3fe>
 800a2e0:	3201      	adds	r2, #1
 800a2e2:	6002      	str	r2, [r0, #0]
 800a2e4:	2f02      	cmp	r7, #2
 800a2e6:	f104 0314 	add.w	r3, r4, #20
 800a2ea:	d13f      	bne.n	800a36c <__gethex+0x450>
 800a2ec:	f8d8 2000 	ldr.w	r2, [r8]
 800a2f0:	3a01      	subs	r2, #1
 800a2f2:	42b2      	cmp	r2, r6
 800a2f4:	d10a      	bne.n	800a30c <__gethex+0x3f0>
 800a2f6:	1171      	asrs	r1, r6, #5
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2fe:	f006 061f 	and.w	r6, r6, #31
 800a302:	fa02 f606 	lsl.w	r6, r2, r6
 800a306:	421e      	tst	r6, r3
 800a308:	bf18      	it	ne
 800a30a:	4617      	movne	r7, r2
 800a30c:	f047 0720 	orr.w	r7, r7, #32
 800a310:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a312:	601c      	str	r4, [r3, #0]
 800a314:	9b04      	ldr	r3, [sp, #16]
 800a316:	601d      	str	r5, [r3, #0]
 800a318:	e695      	b.n	800a046 <__gethex+0x12a>
 800a31a:	4299      	cmp	r1, r3
 800a31c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a320:	d8d8      	bhi.n	800a2d4 <__gethex+0x3b8>
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	459b      	cmp	fp, r3
 800a326:	db19      	blt.n	800a35c <__gethex+0x440>
 800a328:	6861      	ldr	r1, [r4, #4]
 800a32a:	ee18 0a10 	vmov	r0, s16
 800a32e:	3101      	adds	r1, #1
 800a330:	f000 f91e 	bl	800a570 <_Balloc>
 800a334:	4681      	mov	r9, r0
 800a336:	b918      	cbnz	r0, 800a340 <__gethex+0x424>
 800a338:	4b1a      	ldr	r3, [pc, #104]	; (800a3a4 <__gethex+0x488>)
 800a33a:	4602      	mov	r2, r0
 800a33c:	2184      	movs	r1, #132	; 0x84
 800a33e:	e6a8      	b.n	800a092 <__gethex+0x176>
 800a340:	6922      	ldr	r2, [r4, #16]
 800a342:	3202      	adds	r2, #2
 800a344:	f104 010c 	add.w	r1, r4, #12
 800a348:	0092      	lsls	r2, r2, #2
 800a34a:	300c      	adds	r0, #12
 800a34c:	f7fd f9b4 	bl	80076b8 <memcpy>
 800a350:	4621      	mov	r1, r4
 800a352:	ee18 0a10 	vmov	r0, s16
 800a356:	f000 f94b 	bl	800a5f0 <_Bfree>
 800a35a:	464c      	mov	r4, r9
 800a35c:	6923      	ldr	r3, [r4, #16]
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a364:	6122      	str	r2, [r4, #16]
 800a366:	2201      	movs	r2, #1
 800a368:	615a      	str	r2, [r3, #20]
 800a36a:	e7bb      	b.n	800a2e4 <__gethex+0x3c8>
 800a36c:	6922      	ldr	r2, [r4, #16]
 800a36e:	455a      	cmp	r2, fp
 800a370:	dd0b      	ble.n	800a38a <__gethex+0x46e>
 800a372:	2101      	movs	r1, #1
 800a374:	4620      	mov	r0, r4
 800a376:	f7ff fd69 	bl	8009e4c <rshift>
 800a37a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a37e:	3501      	adds	r5, #1
 800a380:	42ab      	cmp	r3, r5
 800a382:	f6ff aed0 	blt.w	800a126 <__gethex+0x20a>
 800a386:	2701      	movs	r7, #1
 800a388:	e7c0      	b.n	800a30c <__gethex+0x3f0>
 800a38a:	f016 061f 	ands.w	r6, r6, #31
 800a38e:	d0fa      	beq.n	800a386 <__gethex+0x46a>
 800a390:	4453      	add	r3, sl
 800a392:	f1c6 0620 	rsb	r6, r6, #32
 800a396:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a39a:	f000 f9db 	bl	800a754 <__hi0bits>
 800a39e:	42b0      	cmp	r0, r6
 800a3a0:	dbe7      	blt.n	800a372 <__gethex+0x456>
 800a3a2:	e7f0      	b.n	800a386 <__gethex+0x46a>
 800a3a4:	0800d233 	.word	0x0800d233

0800a3a8 <L_shift>:
 800a3a8:	f1c2 0208 	rsb	r2, r2, #8
 800a3ac:	0092      	lsls	r2, r2, #2
 800a3ae:	b570      	push	{r4, r5, r6, lr}
 800a3b0:	f1c2 0620 	rsb	r6, r2, #32
 800a3b4:	6843      	ldr	r3, [r0, #4]
 800a3b6:	6804      	ldr	r4, [r0, #0]
 800a3b8:	fa03 f506 	lsl.w	r5, r3, r6
 800a3bc:	432c      	orrs	r4, r5
 800a3be:	40d3      	lsrs	r3, r2
 800a3c0:	6004      	str	r4, [r0, #0]
 800a3c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3c6:	4288      	cmp	r0, r1
 800a3c8:	d3f4      	bcc.n	800a3b4 <L_shift+0xc>
 800a3ca:	bd70      	pop	{r4, r5, r6, pc}

0800a3cc <__match>:
 800a3cc:	b530      	push	{r4, r5, lr}
 800a3ce:	6803      	ldr	r3, [r0, #0]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3d6:	b914      	cbnz	r4, 800a3de <__match+0x12>
 800a3d8:	6003      	str	r3, [r0, #0]
 800a3da:	2001      	movs	r0, #1
 800a3dc:	bd30      	pop	{r4, r5, pc}
 800a3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a3e6:	2d19      	cmp	r5, #25
 800a3e8:	bf98      	it	ls
 800a3ea:	3220      	addls	r2, #32
 800a3ec:	42a2      	cmp	r2, r4
 800a3ee:	d0f0      	beq.n	800a3d2 <__match+0x6>
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e7f3      	b.n	800a3dc <__match+0x10>

0800a3f4 <__hexnan>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	680b      	ldr	r3, [r1, #0]
 800a3fa:	115e      	asrs	r6, r3, #5
 800a3fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a400:	f013 031f 	ands.w	r3, r3, #31
 800a404:	b087      	sub	sp, #28
 800a406:	bf18      	it	ne
 800a408:	3604      	addne	r6, #4
 800a40a:	2500      	movs	r5, #0
 800a40c:	1f37      	subs	r7, r6, #4
 800a40e:	4690      	mov	r8, r2
 800a410:	6802      	ldr	r2, [r0, #0]
 800a412:	9301      	str	r3, [sp, #4]
 800a414:	4682      	mov	sl, r0
 800a416:	f846 5c04 	str.w	r5, [r6, #-4]
 800a41a:	46b9      	mov	r9, r7
 800a41c:	463c      	mov	r4, r7
 800a41e:	9502      	str	r5, [sp, #8]
 800a420:	46ab      	mov	fp, r5
 800a422:	7851      	ldrb	r1, [r2, #1]
 800a424:	1c53      	adds	r3, r2, #1
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	b341      	cbz	r1, 800a47c <__hexnan+0x88>
 800a42a:	4608      	mov	r0, r1
 800a42c:	9205      	str	r2, [sp, #20]
 800a42e:	9104      	str	r1, [sp, #16]
 800a430:	f7ff fd5e 	bl	8009ef0 <__hexdig_fun>
 800a434:	2800      	cmp	r0, #0
 800a436:	d14f      	bne.n	800a4d8 <__hexnan+0xe4>
 800a438:	9904      	ldr	r1, [sp, #16]
 800a43a:	9a05      	ldr	r2, [sp, #20]
 800a43c:	2920      	cmp	r1, #32
 800a43e:	d818      	bhi.n	800a472 <__hexnan+0x7e>
 800a440:	9b02      	ldr	r3, [sp, #8]
 800a442:	459b      	cmp	fp, r3
 800a444:	dd13      	ble.n	800a46e <__hexnan+0x7a>
 800a446:	454c      	cmp	r4, r9
 800a448:	d206      	bcs.n	800a458 <__hexnan+0x64>
 800a44a:	2d07      	cmp	r5, #7
 800a44c:	dc04      	bgt.n	800a458 <__hexnan+0x64>
 800a44e:	462a      	mov	r2, r5
 800a450:	4649      	mov	r1, r9
 800a452:	4620      	mov	r0, r4
 800a454:	f7ff ffa8 	bl	800a3a8 <L_shift>
 800a458:	4544      	cmp	r4, r8
 800a45a:	d950      	bls.n	800a4fe <__hexnan+0x10a>
 800a45c:	2300      	movs	r3, #0
 800a45e:	f1a4 0904 	sub.w	r9, r4, #4
 800a462:	f844 3c04 	str.w	r3, [r4, #-4]
 800a466:	f8cd b008 	str.w	fp, [sp, #8]
 800a46a:	464c      	mov	r4, r9
 800a46c:	461d      	mov	r5, r3
 800a46e:	9a03      	ldr	r2, [sp, #12]
 800a470:	e7d7      	b.n	800a422 <__hexnan+0x2e>
 800a472:	2929      	cmp	r1, #41	; 0x29
 800a474:	d156      	bne.n	800a524 <__hexnan+0x130>
 800a476:	3202      	adds	r2, #2
 800a478:	f8ca 2000 	str.w	r2, [sl]
 800a47c:	f1bb 0f00 	cmp.w	fp, #0
 800a480:	d050      	beq.n	800a524 <__hexnan+0x130>
 800a482:	454c      	cmp	r4, r9
 800a484:	d206      	bcs.n	800a494 <__hexnan+0xa0>
 800a486:	2d07      	cmp	r5, #7
 800a488:	dc04      	bgt.n	800a494 <__hexnan+0xa0>
 800a48a:	462a      	mov	r2, r5
 800a48c:	4649      	mov	r1, r9
 800a48e:	4620      	mov	r0, r4
 800a490:	f7ff ff8a 	bl	800a3a8 <L_shift>
 800a494:	4544      	cmp	r4, r8
 800a496:	d934      	bls.n	800a502 <__hexnan+0x10e>
 800a498:	f1a8 0204 	sub.w	r2, r8, #4
 800a49c:	4623      	mov	r3, r4
 800a49e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a4a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a4a6:	429f      	cmp	r7, r3
 800a4a8:	d2f9      	bcs.n	800a49e <__hexnan+0xaa>
 800a4aa:	1b3b      	subs	r3, r7, r4
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	3401      	adds	r4, #1
 800a4b4:	3e03      	subs	r6, #3
 800a4b6:	42b4      	cmp	r4, r6
 800a4b8:	bf88      	it	hi
 800a4ba:	2304      	movhi	r3, #4
 800a4bc:	4443      	add	r3, r8
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f843 2b04 	str.w	r2, [r3], #4
 800a4c4:	429f      	cmp	r7, r3
 800a4c6:	d2fb      	bcs.n	800a4c0 <__hexnan+0xcc>
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	b91b      	cbnz	r3, 800a4d4 <__hexnan+0xe0>
 800a4cc:	4547      	cmp	r7, r8
 800a4ce:	d127      	bne.n	800a520 <__hexnan+0x12c>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	603b      	str	r3, [r7, #0]
 800a4d4:	2005      	movs	r0, #5
 800a4d6:	e026      	b.n	800a526 <__hexnan+0x132>
 800a4d8:	3501      	adds	r5, #1
 800a4da:	2d08      	cmp	r5, #8
 800a4dc:	f10b 0b01 	add.w	fp, fp, #1
 800a4e0:	dd06      	ble.n	800a4f0 <__hexnan+0xfc>
 800a4e2:	4544      	cmp	r4, r8
 800a4e4:	d9c3      	bls.n	800a46e <__hexnan+0x7a>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4ec:	2501      	movs	r5, #1
 800a4ee:	3c04      	subs	r4, #4
 800a4f0:	6822      	ldr	r2, [r4, #0]
 800a4f2:	f000 000f 	and.w	r0, r0, #15
 800a4f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a4fa:	6022      	str	r2, [r4, #0]
 800a4fc:	e7b7      	b.n	800a46e <__hexnan+0x7a>
 800a4fe:	2508      	movs	r5, #8
 800a500:	e7b5      	b.n	800a46e <__hexnan+0x7a>
 800a502:	9b01      	ldr	r3, [sp, #4]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0df      	beq.n	800a4c8 <__hexnan+0xd4>
 800a508:	f04f 32ff 	mov.w	r2, #4294967295
 800a50c:	f1c3 0320 	rsb	r3, r3, #32
 800a510:	fa22 f303 	lsr.w	r3, r2, r3
 800a514:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a518:	401a      	ands	r2, r3
 800a51a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a51e:	e7d3      	b.n	800a4c8 <__hexnan+0xd4>
 800a520:	3f04      	subs	r7, #4
 800a522:	e7d1      	b.n	800a4c8 <__hexnan+0xd4>
 800a524:	2004      	movs	r0, #4
 800a526:	b007      	add	sp, #28
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a52c <_localeconv_r>:
 800a52c:	4800      	ldr	r0, [pc, #0]	; (800a530 <_localeconv_r+0x4>)
 800a52e:	4770      	bx	lr
 800a530:	20000164 	.word	0x20000164

0800a534 <__ascii_mbtowc>:
 800a534:	b082      	sub	sp, #8
 800a536:	b901      	cbnz	r1, 800a53a <__ascii_mbtowc+0x6>
 800a538:	a901      	add	r1, sp, #4
 800a53a:	b142      	cbz	r2, 800a54e <__ascii_mbtowc+0x1a>
 800a53c:	b14b      	cbz	r3, 800a552 <__ascii_mbtowc+0x1e>
 800a53e:	7813      	ldrb	r3, [r2, #0]
 800a540:	600b      	str	r3, [r1, #0]
 800a542:	7812      	ldrb	r2, [r2, #0]
 800a544:	1e10      	subs	r0, r2, #0
 800a546:	bf18      	it	ne
 800a548:	2001      	movne	r0, #1
 800a54a:	b002      	add	sp, #8
 800a54c:	4770      	bx	lr
 800a54e:	4610      	mov	r0, r2
 800a550:	e7fb      	b.n	800a54a <__ascii_mbtowc+0x16>
 800a552:	f06f 0001 	mvn.w	r0, #1
 800a556:	e7f8      	b.n	800a54a <__ascii_mbtowc+0x16>

0800a558 <__malloc_lock>:
 800a558:	4801      	ldr	r0, [pc, #4]	; (800a560 <__malloc_lock+0x8>)
 800a55a:	f7f7 bb30 	b.w	8001bbe <__retarget_lock_acquire_recursive>
 800a55e:	bf00      	nop
 800a560:	200008ec 	.word	0x200008ec

0800a564 <__malloc_unlock>:
 800a564:	4801      	ldr	r0, [pc, #4]	; (800a56c <__malloc_unlock+0x8>)
 800a566:	f7f7 bb3e 	b.w	8001be6 <__retarget_lock_release_recursive>
 800a56a:	bf00      	nop
 800a56c:	200008ec 	.word	0x200008ec

0800a570 <_Balloc>:
 800a570:	b570      	push	{r4, r5, r6, lr}
 800a572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a574:	4604      	mov	r4, r0
 800a576:	460d      	mov	r5, r1
 800a578:	b976      	cbnz	r6, 800a598 <_Balloc+0x28>
 800a57a:	2010      	movs	r0, #16
 800a57c:	f7fd f894 	bl	80076a8 <malloc>
 800a580:	4602      	mov	r2, r0
 800a582:	6260      	str	r0, [r4, #36]	; 0x24
 800a584:	b920      	cbnz	r0, 800a590 <_Balloc+0x20>
 800a586:	4b18      	ldr	r3, [pc, #96]	; (800a5e8 <_Balloc+0x78>)
 800a588:	4818      	ldr	r0, [pc, #96]	; (800a5ec <_Balloc+0x7c>)
 800a58a:	2166      	movs	r1, #102	; 0x66
 800a58c:	f000 fe4a 	bl	800b224 <__assert_func>
 800a590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a594:	6006      	str	r6, [r0, #0]
 800a596:	60c6      	str	r6, [r0, #12]
 800a598:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a59a:	68f3      	ldr	r3, [r6, #12]
 800a59c:	b183      	cbz	r3, 800a5c0 <_Balloc+0x50>
 800a59e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5a6:	b9b8      	cbnz	r0, 800a5d8 <_Balloc+0x68>
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	fa01 f605 	lsl.w	r6, r1, r5
 800a5ae:	1d72      	adds	r2, r6, #5
 800a5b0:	0092      	lsls	r2, r2, #2
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 fc9a 	bl	800aeec <_calloc_r>
 800a5b8:	b160      	cbz	r0, 800a5d4 <_Balloc+0x64>
 800a5ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5be:	e00e      	b.n	800a5de <_Balloc+0x6e>
 800a5c0:	2221      	movs	r2, #33	; 0x21
 800a5c2:	2104      	movs	r1, #4
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 fc91 	bl	800aeec <_calloc_r>
 800a5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5cc:	60f0      	str	r0, [r6, #12]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1e4      	bne.n	800a59e <_Balloc+0x2e>
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}
 800a5d8:	6802      	ldr	r2, [r0, #0]
 800a5da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a5e4:	e7f7      	b.n	800a5d6 <_Balloc+0x66>
 800a5e6:	bf00      	nop
 800a5e8:	0800d19e 	.word	0x0800d19e
 800a5ec:	0800d2e0 	.word	0x0800d2e0

0800a5f0 <_Bfree>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	b976      	cbnz	r6, 800a618 <_Bfree+0x28>
 800a5fa:	2010      	movs	r0, #16
 800a5fc:	f7fd f854 	bl	80076a8 <malloc>
 800a600:	4602      	mov	r2, r0
 800a602:	6268      	str	r0, [r5, #36]	; 0x24
 800a604:	b920      	cbnz	r0, 800a610 <_Bfree+0x20>
 800a606:	4b09      	ldr	r3, [pc, #36]	; (800a62c <_Bfree+0x3c>)
 800a608:	4809      	ldr	r0, [pc, #36]	; (800a630 <_Bfree+0x40>)
 800a60a:	218a      	movs	r1, #138	; 0x8a
 800a60c:	f000 fe0a 	bl	800b224 <__assert_func>
 800a610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a614:	6006      	str	r6, [r0, #0]
 800a616:	60c6      	str	r6, [r0, #12]
 800a618:	b13c      	cbz	r4, 800a62a <_Bfree+0x3a>
 800a61a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a61c:	6862      	ldr	r2, [r4, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a624:	6021      	str	r1, [r4, #0]
 800a626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a62a:	bd70      	pop	{r4, r5, r6, pc}
 800a62c:	0800d19e 	.word	0x0800d19e
 800a630:	0800d2e0 	.word	0x0800d2e0

0800a634 <__multadd>:
 800a634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a638:	690d      	ldr	r5, [r1, #16]
 800a63a:	4607      	mov	r7, r0
 800a63c:	460c      	mov	r4, r1
 800a63e:	461e      	mov	r6, r3
 800a640:	f101 0c14 	add.w	ip, r1, #20
 800a644:	2000      	movs	r0, #0
 800a646:	f8dc 3000 	ldr.w	r3, [ip]
 800a64a:	b299      	uxth	r1, r3
 800a64c:	fb02 6101 	mla	r1, r2, r1, r6
 800a650:	0c1e      	lsrs	r6, r3, #16
 800a652:	0c0b      	lsrs	r3, r1, #16
 800a654:	fb02 3306 	mla	r3, r2, r6, r3
 800a658:	b289      	uxth	r1, r1
 800a65a:	3001      	adds	r0, #1
 800a65c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a660:	4285      	cmp	r5, r0
 800a662:	f84c 1b04 	str.w	r1, [ip], #4
 800a666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a66a:	dcec      	bgt.n	800a646 <__multadd+0x12>
 800a66c:	b30e      	cbz	r6, 800a6b2 <__multadd+0x7e>
 800a66e:	68a3      	ldr	r3, [r4, #8]
 800a670:	42ab      	cmp	r3, r5
 800a672:	dc19      	bgt.n	800a6a8 <__multadd+0x74>
 800a674:	6861      	ldr	r1, [r4, #4]
 800a676:	4638      	mov	r0, r7
 800a678:	3101      	adds	r1, #1
 800a67a:	f7ff ff79 	bl	800a570 <_Balloc>
 800a67e:	4680      	mov	r8, r0
 800a680:	b928      	cbnz	r0, 800a68e <__multadd+0x5a>
 800a682:	4602      	mov	r2, r0
 800a684:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <__multadd+0x84>)
 800a686:	480d      	ldr	r0, [pc, #52]	; (800a6bc <__multadd+0x88>)
 800a688:	21b5      	movs	r1, #181	; 0xb5
 800a68a:	f000 fdcb 	bl	800b224 <__assert_func>
 800a68e:	6922      	ldr	r2, [r4, #16]
 800a690:	3202      	adds	r2, #2
 800a692:	f104 010c 	add.w	r1, r4, #12
 800a696:	0092      	lsls	r2, r2, #2
 800a698:	300c      	adds	r0, #12
 800a69a:	f7fd f80d 	bl	80076b8 <memcpy>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff ffa5 	bl	800a5f0 <_Bfree>
 800a6a6:	4644      	mov	r4, r8
 800a6a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6ac:	3501      	adds	r5, #1
 800a6ae:	615e      	str	r6, [r3, #20]
 800a6b0:	6125      	str	r5, [r4, #16]
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	0800d233 	.word	0x0800d233
 800a6bc:	0800d2e0 	.word	0x0800d2e0

0800a6c0 <__s2b>:
 800a6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	4615      	mov	r5, r2
 800a6c8:	461f      	mov	r7, r3
 800a6ca:	2209      	movs	r2, #9
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	db09      	blt.n	800a6f0 <__s2b+0x30>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7ff ff47 	bl	800a570 <_Balloc>
 800a6e2:	b940      	cbnz	r0, 800a6f6 <__s2b+0x36>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	4b19      	ldr	r3, [pc, #100]	; (800a74c <__s2b+0x8c>)
 800a6e8:	4819      	ldr	r0, [pc, #100]	; (800a750 <__s2b+0x90>)
 800a6ea:	21ce      	movs	r1, #206	; 0xce
 800a6ec:	f000 fd9a 	bl	800b224 <__assert_func>
 800a6f0:	0052      	lsls	r2, r2, #1
 800a6f2:	3101      	adds	r1, #1
 800a6f4:	e7f0      	b.n	800a6d8 <__s2b+0x18>
 800a6f6:	9b08      	ldr	r3, [sp, #32]
 800a6f8:	6143      	str	r3, [r0, #20]
 800a6fa:	2d09      	cmp	r5, #9
 800a6fc:	f04f 0301 	mov.w	r3, #1
 800a700:	6103      	str	r3, [r0, #16]
 800a702:	dd16      	ble.n	800a732 <__s2b+0x72>
 800a704:	f104 0909 	add.w	r9, r4, #9
 800a708:	46c8      	mov	r8, r9
 800a70a:	442c      	add	r4, r5
 800a70c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a710:	4601      	mov	r1, r0
 800a712:	3b30      	subs	r3, #48	; 0x30
 800a714:	220a      	movs	r2, #10
 800a716:	4630      	mov	r0, r6
 800a718:	f7ff ff8c 	bl	800a634 <__multadd>
 800a71c:	45a0      	cmp	r8, r4
 800a71e:	d1f5      	bne.n	800a70c <__s2b+0x4c>
 800a720:	f1a5 0408 	sub.w	r4, r5, #8
 800a724:	444c      	add	r4, r9
 800a726:	1b2d      	subs	r5, r5, r4
 800a728:	1963      	adds	r3, r4, r5
 800a72a:	42bb      	cmp	r3, r7
 800a72c:	db04      	blt.n	800a738 <__s2b+0x78>
 800a72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a732:	340a      	adds	r4, #10
 800a734:	2509      	movs	r5, #9
 800a736:	e7f6      	b.n	800a726 <__s2b+0x66>
 800a738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a73c:	4601      	mov	r1, r0
 800a73e:	3b30      	subs	r3, #48	; 0x30
 800a740:	220a      	movs	r2, #10
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff ff76 	bl	800a634 <__multadd>
 800a748:	e7ee      	b.n	800a728 <__s2b+0x68>
 800a74a:	bf00      	nop
 800a74c:	0800d233 	.word	0x0800d233
 800a750:	0800d2e0 	.word	0x0800d2e0

0800a754 <__hi0bits>:
 800a754:	0c03      	lsrs	r3, r0, #16
 800a756:	041b      	lsls	r3, r3, #16
 800a758:	b9d3      	cbnz	r3, 800a790 <__hi0bits+0x3c>
 800a75a:	0400      	lsls	r0, r0, #16
 800a75c:	2310      	movs	r3, #16
 800a75e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a762:	bf04      	itt	eq
 800a764:	0200      	lsleq	r0, r0, #8
 800a766:	3308      	addeq	r3, #8
 800a768:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a76c:	bf04      	itt	eq
 800a76e:	0100      	lsleq	r0, r0, #4
 800a770:	3304      	addeq	r3, #4
 800a772:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a776:	bf04      	itt	eq
 800a778:	0080      	lsleq	r0, r0, #2
 800a77a:	3302      	addeq	r3, #2
 800a77c:	2800      	cmp	r0, #0
 800a77e:	db05      	blt.n	800a78c <__hi0bits+0x38>
 800a780:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a784:	f103 0301 	add.w	r3, r3, #1
 800a788:	bf08      	it	eq
 800a78a:	2320      	moveq	r3, #32
 800a78c:	4618      	mov	r0, r3
 800a78e:	4770      	bx	lr
 800a790:	2300      	movs	r3, #0
 800a792:	e7e4      	b.n	800a75e <__hi0bits+0xa>

0800a794 <__lo0bits>:
 800a794:	6803      	ldr	r3, [r0, #0]
 800a796:	f013 0207 	ands.w	r2, r3, #7
 800a79a:	4601      	mov	r1, r0
 800a79c:	d00b      	beq.n	800a7b6 <__lo0bits+0x22>
 800a79e:	07da      	lsls	r2, r3, #31
 800a7a0:	d423      	bmi.n	800a7ea <__lo0bits+0x56>
 800a7a2:	0798      	lsls	r0, r3, #30
 800a7a4:	bf49      	itett	mi
 800a7a6:	085b      	lsrmi	r3, r3, #1
 800a7a8:	089b      	lsrpl	r3, r3, #2
 800a7aa:	2001      	movmi	r0, #1
 800a7ac:	600b      	strmi	r3, [r1, #0]
 800a7ae:	bf5c      	itt	pl
 800a7b0:	600b      	strpl	r3, [r1, #0]
 800a7b2:	2002      	movpl	r0, #2
 800a7b4:	4770      	bx	lr
 800a7b6:	b298      	uxth	r0, r3
 800a7b8:	b9a8      	cbnz	r0, 800a7e6 <__lo0bits+0x52>
 800a7ba:	0c1b      	lsrs	r3, r3, #16
 800a7bc:	2010      	movs	r0, #16
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	b90a      	cbnz	r2, 800a7c6 <__lo0bits+0x32>
 800a7c2:	3008      	adds	r0, #8
 800a7c4:	0a1b      	lsrs	r3, r3, #8
 800a7c6:	071a      	lsls	r2, r3, #28
 800a7c8:	bf04      	itt	eq
 800a7ca:	091b      	lsreq	r3, r3, #4
 800a7cc:	3004      	addeq	r0, #4
 800a7ce:	079a      	lsls	r2, r3, #30
 800a7d0:	bf04      	itt	eq
 800a7d2:	089b      	lsreq	r3, r3, #2
 800a7d4:	3002      	addeq	r0, #2
 800a7d6:	07da      	lsls	r2, r3, #31
 800a7d8:	d403      	bmi.n	800a7e2 <__lo0bits+0x4e>
 800a7da:	085b      	lsrs	r3, r3, #1
 800a7dc:	f100 0001 	add.w	r0, r0, #1
 800a7e0:	d005      	beq.n	800a7ee <__lo0bits+0x5a>
 800a7e2:	600b      	str	r3, [r1, #0]
 800a7e4:	4770      	bx	lr
 800a7e6:	4610      	mov	r0, r2
 800a7e8:	e7e9      	b.n	800a7be <__lo0bits+0x2a>
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	4770      	bx	lr
 800a7ee:	2020      	movs	r0, #32
 800a7f0:	4770      	bx	lr
	...

0800a7f4 <__i2b>:
 800a7f4:	b510      	push	{r4, lr}
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	2101      	movs	r1, #1
 800a7fa:	f7ff feb9 	bl	800a570 <_Balloc>
 800a7fe:	4602      	mov	r2, r0
 800a800:	b928      	cbnz	r0, 800a80e <__i2b+0x1a>
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <__i2b+0x24>)
 800a804:	4805      	ldr	r0, [pc, #20]	; (800a81c <__i2b+0x28>)
 800a806:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a80a:	f000 fd0b 	bl	800b224 <__assert_func>
 800a80e:	2301      	movs	r3, #1
 800a810:	6144      	str	r4, [r0, #20]
 800a812:	6103      	str	r3, [r0, #16]
 800a814:	bd10      	pop	{r4, pc}
 800a816:	bf00      	nop
 800a818:	0800d233 	.word	0x0800d233
 800a81c:	0800d2e0 	.word	0x0800d2e0

0800a820 <__multiply>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	4691      	mov	r9, r2
 800a826:	690a      	ldr	r2, [r1, #16]
 800a828:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	bfb8      	it	lt
 800a830:	460b      	movlt	r3, r1
 800a832:	460c      	mov	r4, r1
 800a834:	bfbc      	itt	lt
 800a836:	464c      	movlt	r4, r9
 800a838:	4699      	movlt	r9, r3
 800a83a:	6927      	ldr	r7, [r4, #16]
 800a83c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a840:	68a3      	ldr	r3, [r4, #8]
 800a842:	6861      	ldr	r1, [r4, #4]
 800a844:	eb07 060a 	add.w	r6, r7, sl
 800a848:	42b3      	cmp	r3, r6
 800a84a:	b085      	sub	sp, #20
 800a84c:	bfb8      	it	lt
 800a84e:	3101      	addlt	r1, #1
 800a850:	f7ff fe8e 	bl	800a570 <_Balloc>
 800a854:	b930      	cbnz	r0, 800a864 <__multiply+0x44>
 800a856:	4602      	mov	r2, r0
 800a858:	4b44      	ldr	r3, [pc, #272]	; (800a96c <__multiply+0x14c>)
 800a85a:	4845      	ldr	r0, [pc, #276]	; (800a970 <__multiply+0x150>)
 800a85c:	f240 115d 	movw	r1, #349	; 0x15d
 800a860:	f000 fce0 	bl	800b224 <__assert_func>
 800a864:	f100 0514 	add.w	r5, r0, #20
 800a868:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a86c:	462b      	mov	r3, r5
 800a86e:	2200      	movs	r2, #0
 800a870:	4543      	cmp	r3, r8
 800a872:	d321      	bcc.n	800a8b8 <__multiply+0x98>
 800a874:	f104 0314 	add.w	r3, r4, #20
 800a878:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a87c:	f109 0314 	add.w	r3, r9, #20
 800a880:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a884:	9202      	str	r2, [sp, #8]
 800a886:	1b3a      	subs	r2, r7, r4
 800a888:	3a15      	subs	r2, #21
 800a88a:	f022 0203 	bic.w	r2, r2, #3
 800a88e:	3204      	adds	r2, #4
 800a890:	f104 0115 	add.w	r1, r4, #21
 800a894:	428f      	cmp	r7, r1
 800a896:	bf38      	it	cc
 800a898:	2204      	movcc	r2, #4
 800a89a:	9201      	str	r2, [sp, #4]
 800a89c:	9a02      	ldr	r2, [sp, #8]
 800a89e:	9303      	str	r3, [sp, #12]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d80c      	bhi.n	800a8be <__multiply+0x9e>
 800a8a4:	2e00      	cmp	r6, #0
 800a8a6:	dd03      	ble.n	800a8b0 <__multiply+0x90>
 800a8a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d05a      	beq.n	800a966 <__multiply+0x146>
 800a8b0:	6106      	str	r6, [r0, #16]
 800a8b2:	b005      	add	sp, #20
 800a8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b8:	f843 2b04 	str.w	r2, [r3], #4
 800a8bc:	e7d8      	b.n	800a870 <__multiply+0x50>
 800a8be:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8c2:	f1ba 0f00 	cmp.w	sl, #0
 800a8c6:	d024      	beq.n	800a912 <__multiply+0xf2>
 800a8c8:	f104 0e14 	add.w	lr, r4, #20
 800a8cc:	46a9      	mov	r9, r5
 800a8ce:	f04f 0c00 	mov.w	ip, #0
 800a8d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8d6:	f8d9 1000 	ldr.w	r1, [r9]
 800a8da:	fa1f fb82 	uxth.w	fp, r2
 800a8de:	b289      	uxth	r1, r1
 800a8e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8e8:	f8d9 2000 	ldr.w	r2, [r9]
 800a8ec:	4461      	add	r1, ip
 800a8ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a8f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8fa:	b289      	uxth	r1, r1
 800a8fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a900:	4577      	cmp	r7, lr
 800a902:	f849 1b04 	str.w	r1, [r9], #4
 800a906:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a90a:	d8e2      	bhi.n	800a8d2 <__multiply+0xb2>
 800a90c:	9a01      	ldr	r2, [sp, #4]
 800a90e:	f845 c002 	str.w	ip, [r5, r2]
 800a912:	9a03      	ldr	r2, [sp, #12]
 800a914:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a918:	3304      	adds	r3, #4
 800a91a:	f1b9 0f00 	cmp.w	r9, #0
 800a91e:	d020      	beq.n	800a962 <__multiply+0x142>
 800a920:	6829      	ldr	r1, [r5, #0]
 800a922:	f104 0c14 	add.w	ip, r4, #20
 800a926:	46ae      	mov	lr, r5
 800a928:	f04f 0a00 	mov.w	sl, #0
 800a92c:	f8bc b000 	ldrh.w	fp, [ip]
 800a930:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a934:	fb09 220b 	mla	r2, r9, fp, r2
 800a938:	4492      	add	sl, r2
 800a93a:	b289      	uxth	r1, r1
 800a93c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a940:	f84e 1b04 	str.w	r1, [lr], #4
 800a944:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a948:	f8be 1000 	ldrh.w	r1, [lr]
 800a94c:	0c12      	lsrs	r2, r2, #16
 800a94e:	fb09 1102 	mla	r1, r9, r2, r1
 800a952:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a956:	4567      	cmp	r7, ip
 800a958:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a95c:	d8e6      	bhi.n	800a92c <__multiply+0x10c>
 800a95e:	9a01      	ldr	r2, [sp, #4]
 800a960:	50a9      	str	r1, [r5, r2]
 800a962:	3504      	adds	r5, #4
 800a964:	e79a      	b.n	800a89c <__multiply+0x7c>
 800a966:	3e01      	subs	r6, #1
 800a968:	e79c      	b.n	800a8a4 <__multiply+0x84>
 800a96a:	bf00      	nop
 800a96c:	0800d233 	.word	0x0800d233
 800a970:	0800d2e0 	.word	0x0800d2e0

0800a974 <__pow5mult>:
 800a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a978:	4615      	mov	r5, r2
 800a97a:	f012 0203 	ands.w	r2, r2, #3
 800a97e:	4606      	mov	r6, r0
 800a980:	460f      	mov	r7, r1
 800a982:	d007      	beq.n	800a994 <__pow5mult+0x20>
 800a984:	4c25      	ldr	r4, [pc, #148]	; (800aa1c <__pow5mult+0xa8>)
 800a986:	3a01      	subs	r2, #1
 800a988:	2300      	movs	r3, #0
 800a98a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a98e:	f7ff fe51 	bl	800a634 <__multadd>
 800a992:	4607      	mov	r7, r0
 800a994:	10ad      	asrs	r5, r5, #2
 800a996:	d03d      	beq.n	800aa14 <__pow5mult+0xa0>
 800a998:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a99a:	b97c      	cbnz	r4, 800a9bc <__pow5mult+0x48>
 800a99c:	2010      	movs	r0, #16
 800a99e:	f7fc fe83 	bl	80076a8 <malloc>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	6270      	str	r0, [r6, #36]	; 0x24
 800a9a6:	b928      	cbnz	r0, 800a9b4 <__pow5mult+0x40>
 800a9a8:	4b1d      	ldr	r3, [pc, #116]	; (800aa20 <__pow5mult+0xac>)
 800a9aa:	481e      	ldr	r0, [pc, #120]	; (800aa24 <__pow5mult+0xb0>)
 800a9ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9b0:	f000 fc38 	bl	800b224 <__assert_func>
 800a9b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9b8:	6004      	str	r4, [r0, #0]
 800a9ba:	60c4      	str	r4, [r0, #12]
 800a9bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9c4:	b94c      	cbnz	r4, 800a9da <__pow5mult+0x66>
 800a9c6:	f240 2171 	movw	r1, #625	; 0x271
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7ff ff12 	bl	800a7f4 <__i2b>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	6003      	str	r3, [r0, #0]
 800a9da:	f04f 0900 	mov.w	r9, #0
 800a9de:	07eb      	lsls	r3, r5, #31
 800a9e0:	d50a      	bpl.n	800a9f8 <__pow5mult+0x84>
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	4630      	mov	r0, r6
 800a9e8:	f7ff ff1a 	bl	800a820 <__multiply>
 800a9ec:	4639      	mov	r1, r7
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f7ff fdfd 	bl	800a5f0 <_Bfree>
 800a9f6:	4647      	mov	r7, r8
 800a9f8:	106d      	asrs	r5, r5, #1
 800a9fa:	d00b      	beq.n	800aa14 <__pow5mult+0xa0>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	b938      	cbnz	r0, 800aa10 <__pow5mult+0x9c>
 800aa00:	4622      	mov	r2, r4
 800aa02:	4621      	mov	r1, r4
 800aa04:	4630      	mov	r0, r6
 800aa06:	f7ff ff0b 	bl	800a820 <__multiply>
 800aa0a:	6020      	str	r0, [r4, #0]
 800aa0c:	f8c0 9000 	str.w	r9, [r0]
 800aa10:	4604      	mov	r4, r0
 800aa12:	e7e4      	b.n	800a9de <__pow5mult+0x6a>
 800aa14:	4638      	mov	r0, r7
 800aa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1a:	bf00      	nop
 800aa1c:	0800d450 	.word	0x0800d450
 800aa20:	0800d19e 	.word	0x0800d19e
 800aa24:	0800d2e0 	.word	0x0800d2e0

0800aa28 <__lshift>:
 800aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	6849      	ldr	r1, [r1, #4]
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa36:	68a3      	ldr	r3, [r4, #8]
 800aa38:	4607      	mov	r7, r0
 800aa3a:	4691      	mov	r9, r2
 800aa3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa40:	f108 0601 	add.w	r6, r8, #1
 800aa44:	42b3      	cmp	r3, r6
 800aa46:	db0b      	blt.n	800aa60 <__lshift+0x38>
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f7ff fd91 	bl	800a570 <_Balloc>
 800aa4e:	4605      	mov	r5, r0
 800aa50:	b948      	cbnz	r0, 800aa66 <__lshift+0x3e>
 800aa52:	4602      	mov	r2, r0
 800aa54:	4b2a      	ldr	r3, [pc, #168]	; (800ab00 <__lshift+0xd8>)
 800aa56:	482b      	ldr	r0, [pc, #172]	; (800ab04 <__lshift+0xdc>)
 800aa58:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa5c:	f000 fbe2 	bl	800b224 <__assert_func>
 800aa60:	3101      	adds	r1, #1
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	e7ee      	b.n	800aa44 <__lshift+0x1c>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f100 0114 	add.w	r1, r0, #20
 800aa6c:	f100 0210 	add.w	r2, r0, #16
 800aa70:	4618      	mov	r0, r3
 800aa72:	4553      	cmp	r3, sl
 800aa74:	db37      	blt.n	800aae6 <__lshift+0xbe>
 800aa76:	6920      	ldr	r0, [r4, #16]
 800aa78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa7c:	f104 0314 	add.w	r3, r4, #20
 800aa80:	f019 091f 	ands.w	r9, r9, #31
 800aa84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aa8c:	d02f      	beq.n	800aaee <__lshift+0xc6>
 800aa8e:	f1c9 0e20 	rsb	lr, r9, #32
 800aa92:	468a      	mov	sl, r1
 800aa94:	f04f 0c00 	mov.w	ip, #0
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	fa02 f209 	lsl.w	r2, r2, r9
 800aa9e:	ea42 020c 	orr.w	r2, r2, ip
 800aaa2:	f84a 2b04 	str.w	r2, [sl], #4
 800aaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaaa:	4298      	cmp	r0, r3
 800aaac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aab0:	d8f2      	bhi.n	800aa98 <__lshift+0x70>
 800aab2:	1b03      	subs	r3, r0, r4
 800aab4:	3b15      	subs	r3, #21
 800aab6:	f023 0303 	bic.w	r3, r3, #3
 800aaba:	3304      	adds	r3, #4
 800aabc:	f104 0215 	add.w	r2, r4, #21
 800aac0:	4290      	cmp	r0, r2
 800aac2:	bf38      	it	cc
 800aac4:	2304      	movcc	r3, #4
 800aac6:	f841 c003 	str.w	ip, [r1, r3]
 800aaca:	f1bc 0f00 	cmp.w	ip, #0
 800aace:	d001      	beq.n	800aad4 <__lshift+0xac>
 800aad0:	f108 0602 	add.w	r6, r8, #2
 800aad4:	3e01      	subs	r6, #1
 800aad6:	4638      	mov	r0, r7
 800aad8:	612e      	str	r6, [r5, #16]
 800aada:	4621      	mov	r1, r4
 800aadc:	f7ff fd88 	bl	800a5f0 <_Bfree>
 800aae0:	4628      	mov	r0, r5
 800aae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae6:	f842 0f04 	str.w	r0, [r2, #4]!
 800aaea:	3301      	adds	r3, #1
 800aaec:	e7c1      	b.n	800aa72 <__lshift+0x4a>
 800aaee:	3904      	subs	r1, #4
 800aaf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaf8:	4298      	cmp	r0, r3
 800aafa:	d8f9      	bhi.n	800aaf0 <__lshift+0xc8>
 800aafc:	e7ea      	b.n	800aad4 <__lshift+0xac>
 800aafe:	bf00      	nop
 800ab00:	0800d233 	.word	0x0800d233
 800ab04:	0800d2e0 	.word	0x0800d2e0

0800ab08 <__mcmp>:
 800ab08:	b530      	push	{r4, r5, lr}
 800ab0a:	6902      	ldr	r2, [r0, #16]
 800ab0c:	690c      	ldr	r4, [r1, #16]
 800ab0e:	1b12      	subs	r2, r2, r4
 800ab10:	d10e      	bne.n	800ab30 <__mcmp+0x28>
 800ab12:	f100 0314 	add.w	r3, r0, #20
 800ab16:	3114      	adds	r1, #20
 800ab18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab28:	42a5      	cmp	r5, r4
 800ab2a:	d003      	beq.n	800ab34 <__mcmp+0x2c>
 800ab2c:	d305      	bcc.n	800ab3a <__mcmp+0x32>
 800ab2e:	2201      	movs	r2, #1
 800ab30:	4610      	mov	r0, r2
 800ab32:	bd30      	pop	{r4, r5, pc}
 800ab34:	4283      	cmp	r3, r0
 800ab36:	d3f3      	bcc.n	800ab20 <__mcmp+0x18>
 800ab38:	e7fa      	b.n	800ab30 <__mcmp+0x28>
 800ab3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab3e:	e7f7      	b.n	800ab30 <__mcmp+0x28>

0800ab40 <__mdiff>:
 800ab40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	460c      	mov	r4, r1
 800ab46:	4606      	mov	r6, r0
 800ab48:	4611      	mov	r1, r2
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4690      	mov	r8, r2
 800ab4e:	f7ff ffdb 	bl	800ab08 <__mcmp>
 800ab52:	1e05      	subs	r5, r0, #0
 800ab54:	d110      	bne.n	800ab78 <__mdiff+0x38>
 800ab56:	4629      	mov	r1, r5
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f7ff fd09 	bl	800a570 <_Balloc>
 800ab5e:	b930      	cbnz	r0, 800ab6e <__mdiff+0x2e>
 800ab60:	4b3a      	ldr	r3, [pc, #232]	; (800ac4c <__mdiff+0x10c>)
 800ab62:	4602      	mov	r2, r0
 800ab64:	f240 2132 	movw	r1, #562	; 0x232
 800ab68:	4839      	ldr	r0, [pc, #228]	; (800ac50 <__mdiff+0x110>)
 800ab6a:	f000 fb5b 	bl	800b224 <__assert_func>
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	bfa4      	itt	ge
 800ab7a:	4643      	movge	r3, r8
 800ab7c:	46a0      	movge	r8, r4
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab84:	bfa6      	itte	ge
 800ab86:	461c      	movge	r4, r3
 800ab88:	2500      	movge	r5, #0
 800ab8a:	2501      	movlt	r5, #1
 800ab8c:	f7ff fcf0 	bl	800a570 <_Balloc>
 800ab90:	b920      	cbnz	r0, 800ab9c <__mdiff+0x5c>
 800ab92:	4b2e      	ldr	r3, [pc, #184]	; (800ac4c <__mdiff+0x10c>)
 800ab94:	4602      	mov	r2, r0
 800ab96:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab9a:	e7e5      	b.n	800ab68 <__mdiff+0x28>
 800ab9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aba0:	6926      	ldr	r6, [r4, #16]
 800aba2:	60c5      	str	r5, [r0, #12]
 800aba4:	f104 0914 	add.w	r9, r4, #20
 800aba8:	f108 0514 	add.w	r5, r8, #20
 800abac:	f100 0e14 	add.w	lr, r0, #20
 800abb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800abb8:	f108 0210 	add.w	r2, r8, #16
 800abbc:	46f2      	mov	sl, lr
 800abbe:	2100      	movs	r1, #0
 800abc0:	f859 3b04 	ldr.w	r3, [r9], #4
 800abc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800abc8:	fa1f f883 	uxth.w	r8, r3
 800abcc:	fa11 f18b 	uxtah	r1, r1, fp
 800abd0:	0c1b      	lsrs	r3, r3, #16
 800abd2:	eba1 0808 	sub.w	r8, r1, r8
 800abd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800abde:	fa1f f888 	uxth.w	r8, r8
 800abe2:	1419      	asrs	r1, r3, #16
 800abe4:	454e      	cmp	r6, r9
 800abe6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800abea:	f84a 3b04 	str.w	r3, [sl], #4
 800abee:	d8e7      	bhi.n	800abc0 <__mdiff+0x80>
 800abf0:	1b33      	subs	r3, r6, r4
 800abf2:	3b15      	subs	r3, #21
 800abf4:	f023 0303 	bic.w	r3, r3, #3
 800abf8:	3304      	adds	r3, #4
 800abfa:	3415      	adds	r4, #21
 800abfc:	42a6      	cmp	r6, r4
 800abfe:	bf38      	it	cc
 800ac00:	2304      	movcc	r3, #4
 800ac02:	441d      	add	r5, r3
 800ac04:	4473      	add	r3, lr
 800ac06:	469e      	mov	lr, r3
 800ac08:	462e      	mov	r6, r5
 800ac0a:	4566      	cmp	r6, ip
 800ac0c:	d30e      	bcc.n	800ac2c <__mdiff+0xec>
 800ac0e:	f10c 0203 	add.w	r2, ip, #3
 800ac12:	1b52      	subs	r2, r2, r5
 800ac14:	f022 0203 	bic.w	r2, r2, #3
 800ac18:	3d03      	subs	r5, #3
 800ac1a:	45ac      	cmp	ip, r5
 800ac1c:	bf38      	it	cc
 800ac1e:	2200      	movcc	r2, #0
 800ac20:	441a      	add	r2, r3
 800ac22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac26:	b17b      	cbz	r3, 800ac48 <__mdiff+0x108>
 800ac28:	6107      	str	r7, [r0, #16]
 800ac2a:	e7a3      	b.n	800ab74 <__mdiff+0x34>
 800ac2c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac30:	fa11 f288 	uxtah	r2, r1, r8
 800ac34:	1414      	asrs	r4, r2, #16
 800ac36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac3a:	b292      	uxth	r2, r2
 800ac3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac40:	f84e 2b04 	str.w	r2, [lr], #4
 800ac44:	1421      	asrs	r1, r4, #16
 800ac46:	e7e0      	b.n	800ac0a <__mdiff+0xca>
 800ac48:	3f01      	subs	r7, #1
 800ac4a:	e7ea      	b.n	800ac22 <__mdiff+0xe2>
 800ac4c:	0800d233 	.word	0x0800d233
 800ac50:	0800d2e0 	.word	0x0800d2e0

0800ac54 <__ulp>:
 800ac54:	b082      	sub	sp, #8
 800ac56:	ed8d 0b00 	vstr	d0, [sp]
 800ac5a:	9b01      	ldr	r3, [sp, #4]
 800ac5c:	4912      	ldr	r1, [pc, #72]	; (800aca8 <__ulp+0x54>)
 800ac5e:	4019      	ands	r1, r3
 800ac60:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ac64:	2900      	cmp	r1, #0
 800ac66:	dd05      	ble.n	800ac74 <__ulp+0x20>
 800ac68:	2200      	movs	r2, #0
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	ec43 2b10 	vmov	d0, r2, r3
 800ac70:	b002      	add	sp, #8
 800ac72:	4770      	bx	lr
 800ac74:	4249      	negs	r1, r1
 800ac76:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ac7a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ac7e:	f04f 0200 	mov.w	r2, #0
 800ac82:	f04f 0300 	mov.w	r3, #0
 800ac86:	da04      	bge.n	800ac92 <__ulp+0x3e>
 800ac88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ac8c:	fa41 f300 	asr.w	r3, r1, r0
 800ac90:	e7ec      	b.n	800ac6c <__ulp+0x18>
 800ac92:	f1a0 0114 	sub.w	r1, r0, #20
 800ac96:	291e      	cmp	r1, #30
 800ac98:	bfda      	itte	le
 800ac9a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ac9e:	fa20 f101 	lsrle.w	r1, r0, r1
 800aca2:	2101      	movgt	r1, #1
 800aca4:	460a      	mov	r2, r1
 800aca6:	e7e1      	b.n	800ac6c <__ulp+0x18>
 800aca8:	7ff00000 	.word	0x7ff00000

0800acac <__b2d>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	6905      	ldr	r5, [r0, #16]
 800acb0:	f100 0714 	add.w	r7, r0, #20
 800acb4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800acb8:	1f2e      	subs	r6, r5, #4
 800acba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800acbe:	4620      	mov	r0, r4
 800acc0:	f7ff fd48 	bl	800a754 <__hi0bits>
 800acc4:	f1c0 0320 	rsb	r3, r0, #32
 800acc8:	280a      	cmp	r0, #10
 800acca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ad48 <__b2d+0x9c>
 800acce:	600b      	str	r3, [r1, #0]
 800acd0:	dc14      	bgt.n	800acfc <__b2d+0x50>
 800acd2:	f1c0 0e0b 	rsb	lr, r0, #11
 800acd6:	fa24 f10e 	lsr.w	r1, r4, lr
 800acda:	42b7      	cmp	r7, r6
 800acdc:	ea41 030c 	orr.w	r3, r1, ip
 800ace0:	bf34      	ite	cc
 800ace2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ace6:	2100      	movcs	r1, #0
 800ace8:	3015      	adds	r0, #21
 800acea:	fa04 f000 	lsl.w	r0, r4, r0
 800acee:	fa21 f10e 	lsr.w	r1, r1, lr
 800acf2:	ea40 0201 	orr.w	r2, r0, r1
 800acf6:	ec43 2b10 	vmov	d0, r2, r3
 800acfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acfc:	42b7      	cmp	r7, r6
 800acfe:	bf3a      	itte	cc
 800ad00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ad04:	f1a5 0608 	subcc.w	r6, r5, #8
 800ad08:	2100      	movcs	r1, #0
 800ad0a:	380b      	subs	r0, #11
 800ad0c:	d017      	beq.n	800ad3e <__b2d+0x92>
 800ad0e:	f1c0 0c20 	rsb	ip, r0, #32
 800ad12:	fa04 f500 	lsl.w	r5, r4, r0
 800ad16:	42be      	cmp	r6, r7
 800ad18:	fa21 f40c 	lsr.w	r4, r1, ip
 800ad1c:	ea45 0504 	orr.w	r5, r5, r4
 800ad20:	bf8c      	ite	hi
 800ad22:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ad26:	2400      	movls	r4, #0
 800ad28:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ad2c:	fa01 f000 	lsl.w	r0, r1, r0
 800ad30:	fa24 f40c 	lsr.w	r4, r4, ip
 800ad34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ad38:	ea40 0204 	orr.w	r2, r0, r4
 800ad3c:	e7db      	b.n	800acf6 <__b2d+0x4a>
 800ad3e:	ea44 030c 	orr.w	r3, r4, ip
 800ad42:	460a      	mov	r2, r1
 800ad44:	e7d7      	b.n	800acf6 <__b2d+0x4a>
 800ad46:	bf00      	nop
 800ad48:	3ff00000 	.word	0x3ff00000

0800ad4c <__d2b>:
 800ad4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad50:	4689      	mov	r9, r1
 800ad52:	2101      	movs	r1, #1
 800ad54:	ec57 6b10 	vmov	r6, r7, d0
 800ad58:	4690      	mov	r8, r2
 800ad5a:	f7ff fc09 	bl	800a570 <_Balloc>
 800ad5e:	4604      	mov	r4, r0
 800ad60:	b930      	cbnz	r0, 800ad70 <__d2b+0x24>
 800ad62:	4602      	mov	r2, r0
 800ad64:	4b25      	ldr	r3, [pc, #148]	; (800adfc <__d2b+0xb0>)
 800ad66:	4826      	ldr	r0, [pc, #152]	; (800ae00 <__d2b+0xb4>)
 800ad68:	f240 310a 	movw	r1, #778	; 0x30a
 800ad6c:	f000 fa5a 	bl	800b224 <__assert_func>
 800ad70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad78:	bb35      	cbnz	r5, 800adc8 <__d2b+0x7c>
 800ad7a:	2e00      	cmp	r6, #0
 800ad7c:	9301      	str	r3, [sp, #4]
 800ad7e:	d028      	beq.n	800add2 <__d2b+0x86>
 800ad80:	4668      	mov	r0, sp
 800ad82:	9600      	str	r6, [sp, #0]
 800ad84:	f7ff fd06 	bl	800a794 <__lo0bits>
 800ad88:	9900      	ldr	r1, [sp, #0]
 800ad8a:	b300      	cbz	r0, 800adce <__d2b+0x82>
 800ad8c:	9a01      	ldr	r2, [sp, #4]
 800ad8e:	f1c0 0320 	rsb	r3, r0, #32
 800ad92:	fa02 f303 	lsl.w	r3, r2, r3
 800ad96:	430b      	orrs	r3, r1
 800ad98:	40c2      	lsrs	r2, r0
 800ad9a:	6163      	str	r3, [r4, #20]
 800ad9c:	9201      	str	r2, [sp, #4]
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	61a3      	str	r3, [r4, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bf14      	ite	ne
 800ada6:	2202      	movne	r2, #2
 800ada8:	2201      	moveq	r2, #1
 800adaa:	6122      	str	r2, [r4, #16]
 800adac:	b1d5      	cbz	r5, 800ade4 <__d2b+0x98>
 800adae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adb2:	4405      	add	r5, r0
 800adb4:	f8c9 5000 	str.w	r5, [r9]
 800adb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800adbc:	f8c8 0000 	str.w	r0, [r8]
 800adc0:	4620      	mov	r0, r4
 800adc2:	b003      	add	sp, #12
 800adc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800adcc:	e7d5      	b.n	800ad7a <__d2b+0x2e>
 800adce:	6161      	str	r1, [r4, #20]
 800add0:	e7e5      	b.n	800ad9e <__d2b+0x52>
 800add2:	a801      	add	r0, sp, #4
 800add4:	f7ff fcde 	bl	800a794 <__lo0bits>
 800add8:	9b01      	ldr	r3, [sp, #4]
 800adda:	6163      	str	r3, [r4, #20]
 800addc:	2201      	movs	r2, #1
 800adde:	6122      	str	r2, [r4, #16]
 800ade0:	3020      	adds	r0, #32
 800ade2:	e7e3      	b.n	800adac <__d2b+0x60>
 800ade4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ade8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800adec:	f8c9 0000 	str.w	r0, [r9]
 800adf0:	6918      	ldr	r0, [r3, #16]
 800adf2:	f7ff fcaf 	bl	800a754 <__hi0bits>
 800adf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adfa:	e7df      	b.n	800adbc <__d2b+0x70>
 800adfc:	0800d233 	.word	0x0800d233
 800ae00:	0800d2e0 	.word	0x0800d2e0

0800ae04 <__ratio>:
 800ae04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	4688      	mov	r8, r1
 800ae0a:	4669      	mov	r1, sp
 800ae0c:	4681      	mov	r9, r0
 800ae0e:	f7ff ff4d 	bl	800acac <__b2d>
 800ae12:	a901      	add	r1, sp, #4
 800ae14:	4640      	mov	r0, r8
 800ae16:	ec55 4b10 	vmov	r4, r5, d0
 800ae1a:	ee10 aa10 	vmov	sl, s0
 800ae1e:	f7ff ff45 	bl	800acac <__b2d>
 800ae22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae26:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ae2a:	1a59      	subs	r1, r3, r1
 800ae2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae30:	1ad3      	subs	r3, r2, r3
 800ae32:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ae36:	ec57 6b10 	vmov	r6, r7, d0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	bfd6      	itet	le
 800ae3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ae42:	462a      	movgt	r2, r5
 800ae44:	463a      	movle	r2, r7
 800ae46:	46ab      	mov	fp, r5
 800ae48:	bfd6      	itet	le
 800ae4a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ae4e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ae52:	ee00 3a90 	vmovle	s1, r3
 800ae56:	ec4b ab17 	vmov	d7, sl, fp
 800ae5a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ae5e:	b003      	add	sp, #12
 800ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae64 <__copybits>:
 800ae64:	3901      	subs	r1, #1
 800ae66:	b570      	push	{r4, r5, r6, lr}
 800ae68:	1149      	asrs	r1, r1, #5
 800ae6a:	6914      	ldr	r4, [r2, #16]
 800ae6c:	3101      	adds	r1, #1
 800ae6e:	f102 0314 	add.w	r3, r2, #20
 800ae72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ae76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ae7a:	1f05      	subs	r5, r0, #4
 800ae7c:	42a3      	cmp	r3, r4
 800ae7e:	d30c      	bcc.n	800ae9a <__copybits+0x36>
 800ae80:	1aa3      	subs	r3, r4, r2
 800ae82:	3b11      	subs	r3, #17
 800ae84:	f023 0303 	bic.w	r3, r3, #3
 800ae88:	3211      	adds	r2, #17
 800ae8a:	42a2      	cmp	r2, r4
 800ae8c:	bf88      	it	hi
 800ae8e:	2300      	movhi	r3, #0
 800ae90:	4418      	add	r0, r3
 800ae92:	2300      	movs	r3, #0
 800ae94:	4288      	cmp	r0, r1
 800ae96:	d305      	bcc.n	800aea4 <__copybits+0x40>
 800ae98:	bd70      	pop	{r4, r5, r6, pc}
 800ae9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800aea2:	e7eb      	b.n	800ae7c <__copybits+0x18>
 800aea4:	f840 3b04 	str.w	r3, [r0], #4
 800aea8:	e7f4      	b.n	800ae94 <__copybits+0x30>

0800aeaa <__any_on>:
 800aeaa:	f100 0214 	add.w	r2, r0, #20
 800aeae:	6900      	ldr	r0, [r0, #16]
 800aeb0:	114b      	asrs	r3, r1, #5
 800aeb2:	4298      	cmp	r0, r3
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	db11      	blt.n	800aedc <__any_on+0x32>
 800aeb8:	dd0a      	ble.n	800aed0 <__any_on+0x26>
 800aeba:	f011 011f 	ands.w	r1, r1, #31
 800aebe:	d007      	beq.n	800aed0 <__any_on+0x26>
 800aec0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aec4:	fa24 f001 	lsr.w	r0, r4, r1
 800aec8:	fa00 f101 	lsl.w	r1, r0, r1
 800aecc:	428c      	cmp	r4, r1
 800aece:	d10b      	bne.n	800aee8 <__any_on+0x3e>
 800aed0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d803      	bhi.n	800aee0 <__any_on+0x36>
 800aed8:	2000      	movs	r0, #0
 800aeda:	bd10      	pop	{r4, pc}
 800aedc:	4603      	mov	r3, r0
 800aede:	e7f7      	b.n	800aed0 <__any_on+0x26>
 800aee0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aee4:	2900      	cmp	r1, #0
 800aee6:	d0f5      	beq.n	800aed4 <__any_on+0x2a>
 800aee8:	2001      	movs	r0, #1
 800aeea:	e7f6      	b.n	800aeda <__any_on+0x30>

0800aeec <_calloc_r>:
 800aeec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeee:	fba1 2402 	umull	r2, r4, r1, r2
 800aef2:	b94c      	cbnz	r4, 800af08 <_calloc_r+0x1c>
 800aef4:	4611      	mov	r1, r2
 800aef6:	9201      	str	r2, [sp, #4]
 800aef8:	f7fc fc60 	bl	80077bc <_malloc_r>
 800aefc:	9a01      	ldr	r2, [sp, #4]
 800aefe:	4605      	mov	r5, r0
 800af00:	b930      	cbnz	r0, 800af10 <_calloc_r+0x24>
 800af02:	4628      	mov	r0, r5
 800af04:	b003      	add	sp, #12
 800af06:	bd30      	pop	{r4, r5, pc}
 800af08:	220c      	movs	r2, #12
 800af0a:	6002      	str	r2, [r0, #0]
 800af0c:	2500      	movs	r5, #0
 800af0e:	e7f8      	b.n	800af02 <_calloc_r+0x16>
 800af10:	4621      	mov	r1, r4
 800af12:	f7fc fbdf 	bl	80076d4 <memset>
 800af16:	e7f4      	b.n	800af02 <_calloc_r+0x16>

0800af18 <__ssputs_r>:
 800af18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af1c:	688e      	ldr	r6, [r1, #8]
 800af1e:	429e      	cmp	r6, r3
 800af20:	4682      	mov	sl, r0
 800af22:	460c      	mov	r4, r1
 800af24:	4690      	mov	r8, r2
 800af26:	461f      	mov	r7, r3
 800af28:	d838      	bhi.n	800af9c <__ssputs_r+0x84>
 800af2a:	898a      	ldrh	r2, [r1, #12]
 800af2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af30:	d032      	beq.n	800af98 <__ssputs_r+0x80>
 800af32:	6825      	ldr	r5, [r4, #0]
 800af34:	6909      	ldr	r1, [r1, #16]
 800af36:	eba5 0901 	sub.w	r9, r5, r1
 800af3a:	6965      	ldr	r5, [r4, #20]
 800af3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af44:	3301      	adds	r3, #1
 800af46:	444b      	add	r3, r9
 800af48:	106d      	asrs	r5, r5, #1
 800af4a:	429d      	cmp	r5, r3
 800af4c:	bf38      	it	cc
 800af4e:	461d      	movcc	r5, r3
 800af50:	0553      	lsls	r3, r2, #21
 800af52:	d531      	bpl.n	800afb8 <__ssputs_r+0xa0>
 800af54:	4629      	mov	r1, r5
 800af56:	f7fc fc31 	bl	80077bc <_malloc_r>
 800af5a:	4606      	mov	r6, r0
 800af5c:	b950      	cbnz	r0, 800af74 <__ssputs_r+0x5c>
 800af5e:	230c      	movs	r3, #12
 800af60:	f8ca 3000 	str.w	r3, [sl]
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af6a:	81a3      	strh	r3, [r4, #12]
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af74:	6921      	ldr	r1, [r4, #16]
 800af76:	464a      	mov	r2, r9
 800af78:	f7fc fb9e 	bl	80076b8 <memcpy>
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af86:	81a3      	strh	r3, [r4, #12]
 800af88:	6126      	str	r6, [r4, #16]
 800af8a:	6165      	str	r5, [r4, #20]
 800af8c:	444e      	add	r6, r9
 800af8e:	eba5 0509 	sub.w	r5, r5, r9
 800af92:	6026      	str	r6, [r4, #0]
 800af94:	60a5      	str	r5, [r4, #8]
 800af96:	463e      	mov	r6, r7
 800af98:	42be      	cmp	r6, r7
 800af9a:	d900      	bls.n	800af9e <__ssputs_r+0x86>
 800af9c:	463e      	mov	r6, r7
 800af9e:	6820      	ldr	r0, [r4, #0]
 800afa0:	4632      	mov	r2, r6
 800afa2:	4641      	mov	r1, r8
 800afa4:	f000 f96e 	bl	800b284 <memmove>
 800afa8:	68a3      	ldr	r3, [r4, #8]
 800afaa:	1b9b      	subs	r3, r3, r6
 800afac:	60a3      	str	r3, [r4, #8]
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	4433      	add	r3, r6
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	2000      	movs	r0, #0
 800afb6:	e7db      	b.n	800af70 <__ssputs_r+0x58>
 800afb8:	462a      	mov	r2, r5
 800afba:	f000 f97d 	bl	800b2b8 <_realloc_r>
 800afbe:	4606      	mov	r6, r0
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d1e1      	bne.n	800af88 <__ssputs_r+0x70>
 800afc4:	6921      	ldr	r1, [r4, #16]
 800afc6:	4650      	mov	r0, sl
 800afc8:	f7fc fb8c 	bl	80076e4 <_free_r>
 800afcc:	e7c7      	b.n	800af5e <__ssputs_r+0x46>
	...

0800afd0 <_svfiprintf_r>:
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	4698      	mov	r8, r3
 800afd6:	898b      	ldrh	r3, [r1, #12]
 800afd8:	061b      	lsls	r3, r3, #24
 800afda:	b09d      	sub	sp, #116	; 0x74
 800afdc:	4607      	mov	r7, r0
 800afde:	460d      	mov	r5, r1
 800afe0:	4614      	mov	r4, r2
 800afe2:	d50e      	bpl.n	800b002 <_svfiprintf_r+0x32>
 800afe4:	690b      	ldr	r3, [r1, #16]
 800afe6:	b963      	cbnz	r3, 800b002 <_svfiprintf_r+0x32>
 800afe8:	2140      	movs	r1, #64	; 0x40
 800afea:	f7fc fbe7 	bl	80077bc <_malloc_r>
 800afee:	6028      	str	r0, [r5, #0]
 800aff0:	6128      	str	r0, [r5, #16]
 800aff2:	b920      	cbnz	r0, 800affe <_svfiprintf_r+0x2e>
 800aff4:	230c      	movs	r3, #12
 800aff6:	603b      	str	r3, [r7, #0]
 800aff8:	f04f 30ff 	mov.w	r0, #4294967295
 800affc:	e0d1      	b.n	800b1a2 <_svfiprintf_r+0x1d2>
 800affe:	2340      	movs	r3, #64	; 0x40
 800b000:	616b      	str	r3, [r5, #20]
 800b002:	2300      	movs	r3, #0
 800b004:	9309      	str	r3, [sp, #36]	; 0x24
 800b006:	2320      	movs	r3, #32
 800b008:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b00c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b010:	2330      	movs	r3, #48	; 0x30
 800b012:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1bc <_svfiprintf_r+0x1ec>
 800b016:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b01a:	f04f 0901 	mov.w	r9, #1
 800b01e:	4623      	mov	r3, r4
 800b020:	469a      	mov	sl, r3
 800b022:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b026:	b10a      	cbz	r2, 800b02c <_svfiprintf_r+0x5c>
 800b028:	2a25      	cmp	r2, #37	; 0x25
 800b02a:	d1f9      	bne.n	800b020 <_svfiprintf_r+0x50>
 800b02c:	ebba 0b04 	subs.w	fp, sl, r4
 800b030:	d00b      	beq.n	800b04a <_svfiprintf_r+0x7a>
 800b032:	465b      	mov	r3, fp
 800b034:	4622      	mov	r2, r4
 800b036:	4629      	mov	r1, r5
 800b038:	4638      	mov	r0, r7
 800b03a:	f7ff ff6d 	bl	800af18 <__ssputs_r>
 800b03e:	3001      	adds	r0, #1
 800b040:	f000 80aa 	beq.w	800b198 <_svfiprintf_r+0x1c8>
 800b044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b046:	445a      	add	r2, fp
 800b048:	9209      	str	r2, [sp, #36]	; 0x24
 800b04a:	f89a 3000 	ldrb.w	r3, [sl]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f000 80a2 	beq.w	800b198 <_svfiprintf_r+0x1c8>
 800b054:	2300      	movs	r3, #0
 800b056:	f04f 32ff 	mov.w	r2, #4294967295
 800b05a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b05e:	f10a 0a01 	add.w	sl, sl, #1
 800b062:	9304      	str	r3, [sp, #16]
 800b064:	9307      	str	r3, [sp, #28]
 800b066:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b06a:	931a      	str	r3, [sp, #104]	; 0x68
 800b06c:	4654      	mov	r4, sl
 800b06e:	2205      	movs	r2, #5
 800b070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b074:	4851      	ldr	r0, [pc, #324]	; (800b1bc <_svfiprintf_r+0x1ec>)
 800b076:	f7f5 f8eb 	bl	8000250 <memchr>
 800b07a:	9a04      	ldr	r2, [sp, #16]
 800b07c:	b9d8      	cbnz	r0, 800b0b6 <_svfiprintf_r+0xe6>
 800b07e:	06d0      	lsls	r0, r2, #27
 800b080:	bf44      	itt	mi
 800b082:	2320      	movmi	r3, #32
 800b084:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b088:	0711      	lsls	r1, r2, #28
 800b08a:	bf44      	itt	mi
 800b08c:	232b      	movmi	r3, #43	; 0x2b
 800b08e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b092:	f89a 3000 	ldrb.w	r3, [sl]
 800b096:	2b2a      	cmp	r3, #42	; 0x2a
 800b098:	d015      	beq.n	800b0c6 <_svfiprintf_r+0xf6>
 800b09a:	9a07      	ldr	r2, [sp, #28]
 800b09c:	4654      	mov	r4, sl
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f04f 0c0a 	mov.w	ip, #10
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0aa:	3b30      	subs	r3, #48	; 0x30
 800b0ac:	2b09      	cmp	r3, #9
 800b0ae:	d94e      	bls.n	800b14e <_svfiprintf_r+0x17e>
 800b0b0:	b1b0      	cbz	r0, 800b0e0 <_svfiprintf_r+0x110>
 800b0b2:	9207      	str	r2, [sp, #28]
 800b0b4:	e014      	b.n	800b0e0 <_svfiprintf_r+0x110>
 800b0b6:	eba0 0308 	sub.w	r3, r0, r8
 800b0ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	9304      	str	r3, [sp, #16]
 800b0c2:	46a2      	mov	sl, r4
 800b0c4:	e7d2      	b.n	800b06c <_svfiprintf_r+0x9c>
 800b0c6:	9b03      	ldr	r3, [sp, #12]
 800b0c8:	1d19      	adds	r1, r3, #4
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	9103      	str	r1, [sp, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	bfbb      	ittet	lt
 800b0d2:	425b      	neglt	r3, r3
 800b0d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b0d8:	9307      	strge	r3, [sp, #28]
 800b0da:	9307      	strlt	r3, [sp, #28]
 800b0dc:	bfb8      	it	lt
 800b0de:	9204      	strlt	r2, [sp, #16]
 800b0e0:	7823      	ldrb	r3, [r4, #0]
 800b0e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b0e4:	d10c      	bne.n	800b100 <_svfiprintf_r+0x130>
 800b0e6:	7863      	ldrb	r3, [r4, #1]
 800b0e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ea:	d135      	bne.n	800b158 <_svfiprintf_r+0x188>
 800b0ec:	9b03      	ldr	r3, [sp, #12]
 800b0ee:	1d1a      	adds	r2, r3, #4
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	9203      	str	r2, [sp, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	bfb8      	it	lt
 800b0f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0fc:	3402      	adds	r4, #2
 800b0fe:	9305      	str	r3, [sp, #20]
 800b100:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1cc <_svfiprintf_r+0x1fc>
 800b104:	7821      	ldrb	r1, [r4, #0]
 800b106:	2203      	movs	r2, #3
 800b108:	4650      	mov	r0, sl
 800b10a:	f7f5 f8a1 	bl	8000250 <memchr>
 800b10e:	b140      	cbz	r0, 800b122 <_svfiprintf_r+0x152>
 800b110:	2340      	movs	r3, #64	; 0x40
 800b112:	eba0 000a 	sub.w	r0, r0, sl
 800b116:	fa03 f000 	lsl.w	r0, r3, r0
 800b11a:	9b04      	ldr	r3, [sp, #16]
 800b11c:	4303      	orrs	r3, r0
 800b11e:	3401      	adds	r4, #1
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b126:	4826      	ldr	r0, [pc, #152]	; (800b1c0 <_svfiprintf_r+0x1f0>)
 800b128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b12c:	2206      	movs	r2, #6
 800b12e:	f7f5 f88f 	bl	8000250 <memchr>
 800b132:	2800      	cmp	r0, #0
 800b134:	d038      	beq.n	800b1a8 <_svfiprintf_r+0x1d8>
 800b136:	4b23      	ldr	r3, [pc, #140]	; (800b1c4 <_svfiprintf_r+0x1f4>)
 800b138:	bb1b      	cbnz	r3, 800b182 <_svfiprintf_r+0x1b2>
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	3307      	adds	r3, #7
 800b13e:	f023 0307 	bic.w	r3, r3, #7
 800b142:	3308      	adds	r3, #8
 800b144:	9303      	str	r3, [sp, #12]
 800b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b148:	4433      	add	r3, r6
 800b14a:	9309      	str	r3, [sp, #36]	; 0x24
 800b14c:	e767      	b.n	800b01e <_svfiprintf_r+0x4e>
 800b14e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b152:	460c      	mov	r4, r1
 800b154:	2001      	movs	r0, #1
 800b156:	e7a5      	b.n	800b0a4 <_svfiprintf_r+0xd4>
 800b158:	2300      	movs	r3, #0
 800b15a:	3401      	adds	r4, #1
 800b15c:	9305      	str	r3, [sp, #20]
 800b15e:	4619      	mov	r1, r3
 800b160:	f04f 0c0a 	mov.w	ip, #10
 800b164:	4620      	mov	r0, r4
 800b166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b16a:	3a30      	subs	r2, #48	; 0x30
 800b16c:	2a09      	cmp	r2, #9
 800b16e:	d903      	bls.n	800b178 <_svfiprintf_r+0x1a8>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0c5      	beq.n	800b100 <_svfiprintf_r+0x130>
 800b174:	9105      	str	r1, [sp, #20]
 800b176:	e7c3      	b.n	800b100 <_svfiprintf_r+0x130>
 800b178:	fb0c 2101 	mla	r1, ip, r1, r2
 800b17c:	4604      	mov	r4, r0
 800b17e:	2301      	movs	r3, #1
 800b180:	e7f0      	b.n	800b164 <_svfiprintf_r+0x194>
 800b182:	ab03      	add	r3, sp, #12
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	462a      	mov	r2, r5
 800b188:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <_svfiprintf_r+0x1f8>)
 800b18a:	a904      	add	r1, sp, #16
 800b18c:	4638      	mov	r0, r7
 800b18e:	f7fc fc1b 	bl	80079c8 <_printf_float>
 800b192:	1c42      	adds	r2, r0, #1
 800b194:	4606      	mov	r6, r0
 800b196:	d1d6      	bne.n	800b146 <_svfiprintf_r+0x176>
 800b198:	89ab      	ldrh	r3, [r5, #12]
 800b19a:	065b      	lsls	r3, r3, #25
 800b19c:	f53f af2c 	bmi.w	800aff8 <_svfiprintf_r+0x28>
 800b1a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1a2:	b01d      	add	sp, #116	; 0x74
 800b1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a8:	ab03      	add	r3, sp, #12
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	462a      	mov	r2, r5
 800b1ae:	4b06      	ldr	r3, [pc, #24]	; (800b1c8 <_svfiprintf_r+0x1f8>)
 800b1b0:	a904      	add	r1, sp, #16
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	f7fc fe94 	bl	8007ee0 <_printf_i>
 800b1b8:	e7eb      	b.n	800b192 <_svfiprintf_r+0x1c2>
 800b1ba:	bf00      	nop
 800b1bc:	0800d45c 	.word	0x0800d45c
 800b1c0:	0800d466 	.word	0x0800d466
 800b1c4:	080079c9 	.word	0x080079c9
 800b1c8:	0800af19 	.word	0x0800af19
 800b1cc:	0800d462 	.word	0x0800d462

0800b1d0 <nan>:
 800b1d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b1d8 <nan+0x8>
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	00000000 	.word	0x00000000
 800b1dc:	7ff80000 	.word	0x7ff80000

0800b1e0 <strncmp>:
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	b17a      	cbz	r2, 800b204 <strncmp+0x24>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	3901      	subs	r1, #1
 800b1e8:	1884      	adds	r4, r0, r2
 800b1ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b1ee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b1f2:	4290      	cmp	r0, r2
 800b1f4:	d101      	bne.n	800b1fa <strncmp+0x1a>
 800b1f6:	42a3      	cmp	r3, r4
 800b1f8:	d101      	bne.n	800b1fe <strncmp+0x1e>
 800b1fa:	1a80      	subs	r0, r0, r2
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d1f3      	bne.n	800b1ea <strncmp+0xa>
 800b202:	e7fa      	b.n	800b1fa <strncmp+0x1a>
 800b204:	4610      	mov	r0, r2
 800b206:	e7f9      	b.n	800b1fc <strncmp+0x1c>

0800b208 <__ascii_wctomb>:
 800b208:	b149      	cbz	r1, 800b21e <__ascii_wctomb+0x16>
 800b20a:	2aff      	cmp	r2, #255	; 0xff
 800b20c:	bf85      	ittet	hi
 800b20e:	238a      	movhi	r3, #138	; 0x8a
 800b210:	6003      	strhi	r3, [r0, #0]
 800b212:	700a      	strbls	r2, [r1, #0]
 800b214:	f04f 30ff 	movhi.w	r0, #4294967295
 800b218:	bf98      	it	ls
 800b21a:	2001      	movls	r0, #1
 800b21c:	4770      	bx	lr
 800b21e:	4608      	mov	r0, r1
 800b220:	4770      	bx	lr
	...

0800b224 <__assert_func>:
 800b224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b226:	4614      	mov	r4, r2
 800b228:	461a      	mov	r2, r3
 800b22a:	4b09      	ldr	r3, [pc, #36]	; (800b250 <__assert_func+0x2c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4605      	mov	r5, r0
 800b230:	68d8      	ldr	r0, [r3, #12]
 800b232:	b14c      	cbz	r4, 800b248 <__assert_func+0x24>
 800b234:	4b07      	ldr	r3, [pc, #28]	; (800b254 <__assert_func+0x30>)
 800b236:	9100      	str	r1, [sp, #0]
 800b238:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b23c:	4906      	ldr	r1, [pc, #24]	; (800b258 <__assert_func+0x34>)
 800b23e:	462b      	mov	r3, r5
 800b240:	f000 f80e 	bl	800b260 <fiprintf>
 800b244:	f000 fa80 	bl	800b748 <abort>
 800b248:	4b04      	ldr	r3, [pc, #16]	; (800b25c <__assert_func+0x38>)
 800b24a:	461c      	mov	r4, r3
 800b24c:	e7f3      	b.n	800b236 <__assert_func+0x12>
 800b24e:	bf00      	nop
 800b250:	2000000c 	.word	0x2000000c
 800b254:	0800d46d 	.word	0x0800d46d
 800b258:	0800d47a 	.word	0x0800d47a
 800b25c:	0800d4a8 	.word	0x0800d4a8

0800b260 <fiprintf>:
 800b260:	b40e      	push	{r1, r2, r3}
 800b262:	b503      	push	{r0, r1, lr}
 800b264:	4601      	mov	r1, r0
 800b266:	ab03      	add	r3, sp, #12
 800b268:	4805      	ldr	r0, [pc, #20]	; (800b280 <fiprintf+0x20>)
 800b26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b26e:	6800      	ldr	r0, [r0, #0]
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	f000 f879 	bl	800b368 <_vfiprintf_r>
 800b276:	b002      	add	sp, #8
 800b278:	f85d eb04 	ldr.w	lr, [sp], #4
 800b27c:	b003      	add	sp, #12
 800b27e:	4770      	bx	lr
 800b280:	2000000c 	.word	0x2000000c

0800b284 <memmove>:
 800b284:	4288      	cmp	r0, r1
 800b286:	b510      	push	{r4, lr}
 800b288:	eb01 0402 	add.w	r4, r1, r2
 800b28c:	d902      	bls.n	800b294 <memmove+0x10>
 800b28e:	4284      	cmp	r4, r0
 800b290:	4623      	mov	r3, r4
 800b292:	d807      	bhi.n	800b2a4 <memmove+0x20>
 800b294:	1e43      	subs	r3, r0, #1
 800b296:	42a1      	cmp	r1, r4
 800b298:	d008      	beq.n	800b2ac <memmove+0x28>
 800b29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b29e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2a2:	e7f8      	b.n	800b296 <memmove+0x12>
 800b2a4:	4402      	add	r2, r0
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	428a      	cmp	r2, r1
 800b2aa:	d100      	bne.n	800b2ae <memmove+0x2a>
 800b2ac:	bd10      	pop	{r4, pc}
 800b2ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2b6:	e7f7      	b.n	800b2a8 <memmove+0x24>

0800b2b8 <_realloc_r>:
 800b2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2bc:	4680      	mov	r8, r0
 800b2be:	4614      	mov	r4, r2
 800b2c0:	460e      	mov	r6, r1
 800b2c2:	b921      	cbnz	r1, 800b2ce <_realloc_r+0x16>
 800b2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	f7fc ba77 	b.w	80077bc <_malloc_r>
 800b2ce:	b92a      	cbnz	r2, 800b2dc <_realloc_r+0x24>
 800b2d0:	f7fc fa08 	bl	80076e4 <_free_r>
 800b2d4:	4625      	mov	r5, r4
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2dc:	f000 fc58 	bl	800bb90 <_malloc_usable_size_r>
 800b2e0:	4284      	cmp	r4, r0
 800b2e2:	4607      	mov	r7, r0
 800b2e4:	d802      	bhi.n	800b2ec <_realloc_r+0x34>
 800b2e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b2ea:	d812      	bhi.n	800b312 <_realloc_r+0x5a>
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	f7fc fa64 	bl	80077bc <_malloc_r>
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	d0ed      	beq.n	800b2d6 <_realloc_r+0x1e>
 800b2fa:	42bc      	cmp	r4, r7
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4631      	mov	r1, r6
 800b300:	bf28      	it	cs
 800b302:	463a      	movcs	r2, r7
 800b304:	f7fc f9d8 	bl	80076b8 <memcpy>
 800b308:	4631      	mov	r1, r6
 800b30a:	4640      	mov	r0, r8
 800b30c:	f7fc f9ea 	bl	80076e4 <_free_r>
 800b310:	e7e1      	b.n	800b2d6 <_realloc_r+0x1e>
 800b312:	4635      	mov	r5, r6
 800b314:	e7df      	b.n	800b2d6 <_realloc_r+0x1e>

0800b316 <__sfputc_r>:
 800b316:	6893      	ldr	r3, [r2, #8]
 800b318:	3b01      	subs	r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	b410      	push	{r4}
 800b31e:	6093      	str	r3, [r2, #8]
 800b320:	da08      	bge.n	800b334 <__sfputc_r+0x1e>
 800b322:	6994      	ldr	r4, [r2, #24]
 800b324:	42a3      	cmp	r3, r4
 800b326:	db01      	blt.n	800b32c <__sfputc_r+0x16>
 800b328:	290a      	cmp	r1, #10
 800b32a:	d103      	bne.n	800b334 <__sfputc_r+0x1e>
 800b32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b330:	f000 b94a 	b.w	800b5c8 <__swbuf_r>
 800b334:	6813      	ldr	r3, [r2, #0]
 800b336:	1c58      	adds	r0, r3, #1
 800b338:	6010      	str	r0, [r2, #0]
 800b33a:	7019      	strb	r1, [r3, #0]
 800b33c:	4608      	mov	r0, r1
 800b33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <__sfputs_r>:
 800b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b346:	4606      	mov	r6, r0
 800b348:	460f      	mov	r7, r1
 800b34a:	4614      	mov	r4, r2
 800b34c:	18d5      	adds	r5, r2, r3
 800b34e:	42ac      	cmp	r4, r5
 800b350:	d101      	bne.n	800b356 <__sfputs_r+0x12>
 800b352:	2000      	movs	r0, #0
 800b354:	e007      	b.n	800b366 <__sfputs_r+0x22>
 800b356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b35a:	463a      	mov	r2, r7
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff ffda 	bl	800b316 <__sfputc_r>
 800b362:	1c43      	adds	r3, r0, #1
 800b364:	d1f3      	bne.n	800b34e <__sfputs_r+0xa>
 800b366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b368 <_vfiprintf_r>:
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	460d      	mov	r5, r1
 800b36e:	b09d      	sub	sp, #116	; 0x74
 800b370:	4614      	mov	r4, r2
 800b372:	4698      	mov	r8, r3
 800b374:	4606      	mov	r6, r0
 800b376:	b118      	cbz	r0, 800b380 <_vfiprintf_r+0x18>
 800b378:	6983      	ldr	r3, [r0, #24]
 800b37a:	b90b      	cbnz	r3, 800b380 <_vfiprintf_r+0x18>
 800b37c:	f000 fb06 	bl	800b98c <__sinit>
 800b380:	4b89      	ldr	r3, [pc, #548]	; (800b5a8 <_vfiprintf_r+0x240>)
 800b382:	429d      	cmp	r5, r3
 800b384:	d11b      	bne.n	800b3be <_vfiprintf_r+0x56>
 800b386:	6875      	ldr	r5, [r6, #4]
 800b388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b38a:	07d9      	lsls	r1, r3, #31
 800b38c:	d405      	bmi.n	800b39a <_vfiprintf_r+0x32>
 800b38e:	89ab      	ldrh	r3, [r5, #12]
 800b390:	059a      	lsls	r2, r3, #22
 800b392:	d402      	bmi.n	800b39a <_vfiprintf_r+0x32>
 800b394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b396:	f7f6 fc12 	bl	8001bbe <__retarget_lock_acquire_recursive>
 800b39a:	89ab      	ldrh	r3, [r5, #12]
 800b39c:	071b      	lsls	r3, r3, #28
 800b39e:	d501      	bpl.n	800b3a4 <_vfiprintf_r+0x3c>
 800b3a0:	692b      	ldr	r3, [r5, #16]
 800b3a2:	b9eb      	cbnz	r3, 800b3e0 <_vfiprintf_r+0x78>
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	4630      	mov	r0, r6
 800b3a8:	f000 f960 	bl	800b66c <__swsetup_r>
 800b3ac:	b1c0      	cbz	r0, 800b3e0 <_vfiprintf_r+0x78>
 800b3ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3b0:	07dc      	lsls	r4, r3, #31
 800b3b2:	d50e      	bpl.n	800b3d2 <_vfiprintf_r+0x6a>
 800b3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b8:	b01d      	add	sp, #116	; 0x74
 800b3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3be:	4b7b      	ldr	r3, [pc, #492]	; (800b5ac <_vfiprintf_r+0x244>)
 800b3c0:	429d      	cmp	r5, r3
 800b3c2:	d101      	bne.n	800b3c8 <_vfiprintf_r+0x60>
 800b3c4:	68b5      	ldr	r5, [r6, #8]
 800b3c6:	e7df      	b.n	800b388 <_vfiprintf_r+0x20>
 800b3c8:	4b79      	ldr	r3, [pc, #484]	; (800b5b0 <_vfiprintf_r+0x248>)
 800b3ca:	429d      	cmp	r5, r3
 800b3cc:	bf08      	it	eq
 800b3ce:	68f5      	ldreq	r5, [r6, #12]
 800b3d0:	e7da      	b.n	800b388 <_vfiprintf_r+0x20>
 800b3d2:	89ab      	ldrh	r3, [r5, #12]
 800b3d4:	0598      	lsls	r0, r3, #22
 800b3d6:	d4ed      	bmi.n	800b3b4 <_vfiprintf_r+0x4c>
 800b3d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3da:	f7f6 fc04 	bl	8001be6 <__retarget_lock_release_recursive>
 800b3de:	e7e9      	b.n	800b3b4 <_vfiprintf_r+0x4c>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e4:	2320      	movs	r3, #32
 800b3e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ee:	2330      	movs	r3, #48	; 0x30
 800b3f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5b4 <_vfiprintf_r+0x24c>
 800b3f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3f8:	f04f 0901 	mov.w	r9, #1
 800b3fc:	4623      	mov	r3, r4
 800b3fe:	469a      	mov	sl, r3
 800b400:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b404:	b10a      	cbz	r2, 800b40a <_vfiprintf_r+0xa2>
 800b406:	2a25      	cmp	r2, #37	; 0x25
 800b408:	d1f9      	bne.n	800b3fe <_vfiprintf_r+0x96>
 800b40a:	ebba 0b04 	subs.w	fp, sl, r4
 800b40e:	d00b      	beq.n	800b428 <_vfiprintf_r+0xc0>
 800b410:	465b      	mov	r3, fp
 800b412:	4622      	mov	r2, r4
 800b414:	4629      	mov	r1, r5
 800b416:	4630      	mov	r0, r6
 800b418:	f7ff ff94 	bl	800b344 <__sfputs_r>
 800b41c:	3001      	adds	r0, #1
 800b41e:	f000 80aa 	beq.w	800b576 <_vfiprintf_r+0x20e>
 800b422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b424:	445a      	add	r2, fp
 800b426:	9209      	str	r2, [sp, #36]	; 0x24
 800b428:	f89a 3000 	ldrb.w	r3, [sl]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 80a2 	beq.w	800b576 <_vfiprintf_r+0x20e>
 800b432:	2300      	movs	r3, #0
 800b434:	f04f 32ff 	mov.w	r2, #4294967295
 800b438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b43c:	f10a 0a01 	add.w	sl, sl, #1
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	9307      	str	r3, [sp, #28]
 800b444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b448:	931a      	str	r3, [sp, #104]	; 0x68
 800b44a:	4654      	mov	r4, sl
 800b44c:	2205      	movs	r2, #5
 800b44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b452:	4858      	ldr	r0, [pc, #352]	; (800b5b4 <_vfiprintf_r+0x24c>)
 800b454:	f7f4 fefc 	bl	8000250 <memchr>
 800b458:	9a04      	ldr	r2, [sp, #16]
 800b45a:	b9d8      	cbnz	r0, 800b494 <_vfiprintf_r+0x12c>
 800b45c:	06d1      	lsls	r1, r2, #27
 800b45e:	bf44      	itt	mi
 800b460:	2320      	movmi	r3, #32
 800b462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b466:	0713      	lsls	r3, r2, #28
 800b468:	bf44      	itt	mi
 800b46a:	232b      	movmi	r3, #43	; 0x2b
 800b46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b470:	f89a 3000 	ldrb.w	r3, [sl]
 800b474:	2b2a      	cmp	r3, #42	; 0x2a
 800b476:	d015      	beq.n	800b4a4 <_vfiprintf_r+0x13c>
 800b478:	9a07      	ldr	r2, [sp, #28]
 800b47a:	4654      	mov	r4, sl
 800b47c:	2000      	movs	r0, #0
 800b47e:	f04f 0c0a 	mov.w	ip, #10
 800b482:	4621      	mov	r1, r4
 800b484:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b488:	3b30      	subs	r3, #48	; 0x30
 800b48a:	2b09      	cmp	r3, #9
 800b48c:	d94e      	bls.n	800b52c <_vfiprintf_r+0x1c4>
 800b48e:	b1b0      	cbz	r0, 800b4be <_vfiprintf_r+0x156>
 800b490:	9207      	str	r2, [sp, #28]
 800b492:	e014      	b.n	800b4be <_vfiprintf_r+0x156>
 800b494:	eba0 0308 	sub.w	r3, r0, r8
 800b498:	fa09 f303 	lsl.w	r3, r9, r3
 800b49c:	4313      	orrs	r3, r2
 800b49e:	9304      	str	r3, [sp, #16]
 800b4a0:	46a2      	mov	sl, r4
 800b4a2:	e7d2      	b.n	800b44a <_vfiprintf_r+0xe2>
 800b4a4:	9b03      	ldr	r3, [sp, #12]
 800b4a6:	1d19      	adds	r1, r3, #4
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	9103      	str	r1, [sp, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	bfbb      	ittet	lt
 800b4b0:	425b      	neglt	r3, r3
 800b4b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b4b6:	9307      	strge	r3, [sp, #28]
 800b4b8:	9307      	strlt	r3, [sp, #28]
 800b4ba:	bfb8      	it	lt
 800b4bc:	9204      	strlt	r2, [sp, #16]
 800b4be:	7823      	ldrb	r3, [r4, #0]
 800b4c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b4c2:	d10c      	bne.n	800b4de <_vfiprintf_r+0x176>
 800b4c4:	7863      	ldrb	r3, [r4, #1]
 800b4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b4c8:	d135      	bne.n	800b536 <_vfiprintf_r+0x1ce>
 800b4ca:	9b03      	ldr	r3, [sp, #12]
 800b4cc:	1d1a      	adds	r2, r3, #4
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	9203      	str	r2, [sp, #12]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	bfb8      	it	lt
 800b4d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4da:	3402      	adds	r4, #2
 800b4dc:	9305      	str	r3, [sp, #20]
 800b4de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5c4 <_vfiprintf_r+0x25c>
 800b4e2:	7821      	ldrb	r1, [r4, #0]
 800b4e4:	2203      	movs	r2, #3
 800b4e6:	4650      	mov	r0, sl
 800b4e8:	f7f4 feb2 	bl	8000250 <memchr>
 800b4ec:	b140      	cbz	r0, 800b500 <_vfiprintf_r+0x198>
 800b4ee:	2340      	movs	r3, #64	; 0x40
 800b4f0:	eba0 000a 	sub.w	r0, r0, sl
 800b4f4:	fa03 f000 	lsl.w	r0, r3, r0
 800b4f8:	9b04      	ldr	r3, [sp, #16]
 800b4fa:	4303      	orrs	r3, r0
 800b4fc:	3401      	adds	r4, #1
 800b4fe:	9304      	str	r3, [sp, #16]
 800b500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b504:	482c      	ldr	r0, [pc, #176]	; (800b5b8 <_vfiprintf_r+0x250>)
 800b506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b50a:	2206      	movs	r2, #6
 800b50c:	f7f4 fea0 	bl	8000250 <memchr>
 800b510:	2800      	cmp	r0, #0
 800b512:	d03f      	beq.n	800b594 <_vfiprintf_r+0x22c>
 800b514:	4b29      	ldr	r3, [pc, #164]	; (800b5bc <_vfiprintf_r+0x254>)
 800b516:	bb1b      	cbnz	r3, 800b560 <_vfiprintf_r+0x1f8>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	3307      	adds	r3, #7
 800b51c:	f023 0307 	bic.w	r3, r3, #7
 800b520:	3308      	adds	r3, #8
 800b522:	9303      	str	r3, [sp, #12]
 800b524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b526:	443b      	add	r3, r7
 800b528:	9309      	str	r3, [sp, #36]	; 0x24
 800b52a:	e767      	b.n	800b3fc <_vfiprintf_r+0x94>
 800b52c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b530:	460c      	mov	r4, r1
 800b532:	2001      	movs	r0, #1
 800b534:	e7a5      	b.n	800b482 <_vfiprintf_r+0x11a>
 800b536:	2300      	movs	r3, #0
 800b538:	3401      	adds	r4, #1
 800b53a:	9305      	str	r3, [sp, #20]
 800b53c:	4619      	mov	r1, r3
 800b53e:	f04f 0c0a 	mov.w	ip, #10
 800b542:	4620      	mov	r0, r4
 800b544:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b548:	3a30      	subs	r2, #48	; 0x30
 800b54a:	2a09      	cmp	r2, #9
 800b54c:	d903      	bls.n	800b556 <_vfiprintf_r+0x1ee>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d0c5      	beq.n	800b4de <_vfiprintf_r+0x176>
 800b552:	9105      	str	r1, [sp, #20]
 800b554:	e7c3      	b.n	800b4de <_vfiprintf_r+0x176>
 800b556:	fb0c 2101 	mla	r1, ip, r1, r2
 800b55a:	4604      	mov	r4, r0
 800b55c:	2301      	movs	r3, #1
 800b55e:	e7f0      	b.n	800b542 <_vfiprintf_r+0x1da>
 800b560:	ab03      	add	r3, sp, #12
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	462a      	mov	r2, r5
 800b566:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <_vfiprintf_r+0x258>)
 800b568:	a904      	add	r1, sp, #16
 800b56a:	4630      	mov	r0, r6
 800b56c:	f7fc fa2c 	bl	80079c8 <_printf_float>
 800b570:	4607      	mov	r7, r0
 800b572:	1c78      	adds	r0, r7, #1
 800b574:	d1d6      	bne.n	800b524 <_vfiprintf_r+0x1bc>
 800b576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b578:	07d9      	lsls	r1, r3, #31
 800b57a:	d405      	bmi.n	800b588 <_vfiprintf_r+0x220>
 800b57c:	89ab      	ldrh	r3, [r5, #12]
 800b57e:	059a      	lsls	r2, r3, #22
 800b580:	d402      	bmi.n	800b588 <_vfiprintf_r+0x220>
 800b582:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b584:	f7f6 fb2f 	bl	8001be6 <__retarget_lock_release_recursive>
 800b588:	89ab      	ldrh	r3, [r5, #12]
 800b58a:	065b      	lsls	r3, r3, #25
 800b58c:	f53f af12 	bmi.w	800b3b4 <_vfiprintf_r+0x4c>
 800b590:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b592:	e711      	b.n	800b3b8 <_vfiprintf_r+0x50>
 800b594:	ab03      	add	r3, sp, #12
 800b596:	9300      	str	r3, [sp, #0]
 800b598:	462a      	mov	r2, r5
 800b59a:	4b09      	ldr	r3, [pc, #36]	; (800b5c0 <_vfiprintf_r+0x258>)
 800b59c:	a904      	add	r1, sp, #16
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f7fc fc9e 	bl	8007ee0 <_printf_i>
 800b5a4:	e7e4      	b.n	800b570 <_vfiprintf_r+0x208>
 800b5a6:	bf00      	nop
 800b5a8:	0800d4cc 	.word	0x0800d4cc
 800b5ac:	0800d4ec 	.word	0x0800d4ec
 800b5b0:	0800d4ac 	.word	0x0800d4ac
 800b5b4:	0800d45c 	.word	0x0800d45c
 800b5b8:	0800d466 	.word	0x0800d466
 800b5bc:	080079c9 	.word	0x080079c9
 800b5c0:	0800b345 	.word	0x0800b345
 800b5c4:	0800d462 	.word	0x0800d462

0800b5c8 <__swbuf_r>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	460e      	mov	r6, r1
 800b5cc:	4614      	mov	r4, r2
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	b118      	cbz	r0, 800b5da <__swbuf_r+0x12>
 800b5d2:	6983      	ldr	r3, [r0, #24]
 800b5d4:	b90b      	cbnz	r3, 800b5da <__swbuf_r+0x12>
 800b5d6:	f000 f9d9 	bl	800b98c <__sinit>
 800b5da:	4b21      	ldr	r3, [pc, #132]	; (800b660 <__swbuf_r+0x98>)
 800b5dc:	429c      	cmp	r4, r3
 800b5de:	d12b      	bne.n	800b638 <__swbuf_r+0x70>
 800b5e0:	686c      	ldr	r4, [r5, #4]
 800b5e2:	69a3      	ldr	r3, [r4, #24]
 800b5e4:	60a3      	str	r3, [r4, #8]
 800b5e6:	89a3      	ldrh	r3, [r4, #12]
 800b5e8:	071a      	lsls	r2, r3, #28
 800b5ea:	d52f      	bpl.n	800b64c <__swbuf_r+0x84>
 800b5ec:	6923      	ldr	r3, [r4, #16]
 800b5ee:	b36b      	cbz	r3, 800b64c <__swbuf_r+0x84>
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	6820      	ldr	r0, [r4, #0]
 800b5f4:	1ac0      	subs	r0, r0, r3
 800b5f6:	6963      	ldr	r3, [r4, #20]
 800b5f8:	b2f6      	uxtb	r6, r6
 800b5fa:	4283      	cmp	r3, r0
 800b5fc:	4637      	mov	r7, r6
 800b5fe:	dc04      	bgt.n	800b60a <__swbuf_r+0x42>
 800b600:	4621      	mov	r1, r4
 800b602:	4628      	mov	r0, r5
 800b604:	f000 f92e 	bl	800b864 <_fflush_r>
 800b608:	bb30      	cbnz	r0, 800b658 <__swbuf_r+0x90>
 800b60a:	68a3      	ldr	r3, [r4, #8]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	60a3      	str	r3, [r4, #8]
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	6022      	str	r2, [r4, #0]
 800b616:	701e      	strb	r6, [r3, #0]
 800b618:	6963      	ldr	r3, [r4, #20]
 800b61a:	3001      	adds	r0, #1
 800b61c:	4283      	cmp	r3, r0
 800b61e:	d004      	beq.n	800b62a <__swbuf_r+0x62>
 800b620:	89a3      	ldrh	r3, [r4, #12]
 800b622:	07db      	lsls	r3, r3, #31
 800b624:	d506      	bpl.n	800b634 <__swbuf_r+0x6c>
 800b626:	2e0a      	cmp	r6, #10
 800b628:	d104      	bne.n	800b634 <__swbuf_r+0x6c>
 800b62a:	4621      	mov	r1, r4
 800b62c:	4628      	mov	r0, r5
 800b62e:	f000 f919 	bl	800b864 <_fflush_r>
 800b632:	b988      	cbnz	r0, 800b658 <__swbuf_r+0x90>
 800b634:	4638      	mov	r0, r7
 800b636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b638:	4b0a      	ldr	r3, [pc, #40]	; (800b664 <__swbuf_r+0x9c>)
 800b63a:	429c      	cmp	r4, r3
 800b63c:	d101      	bne.n	800b642 <__swbuf_r+0x7a>
 800b63e:	68ac      	ldr	r4, [r5, #8]
 800b640:	e7cf      	b.n	800b5e2 <__swbuf_r+0x1a>
 800b642:	4b09      	ldr	r3, [pc, #36]	; (800b668 <__swbuf_r+0xa0>)
 800b644:	429c      	cmp	r4, r3
 800b646:	bf08      	it	eq
 800b648:	68ec      	ldreq	r4, [r5, #12]
 800b64a:	e7ca      	b.n	800b5e2 <__swbuf_r+0x1a>
 800b64c:	4621      	mov	r1, r4
 800b64e:	4628      	mov	r0, r5
 800b650:	f000 f80c 	bl	800b66c <__swsetup_r>
 800b654:	2800      	cmp	r0, #0
 800b656:	d0cb      	beq.n	800b5f0 <__swbuf_r+0x28>
 800b658:	f04f 37ff 	mov.w	r7, #4294967295
 800b65c:	e7ea      	b.n	800b634 <__swbuf_r+0x6c>
 800b65e:	bf00      	nop
 800b660:	0800d4cc 	.word	0x0800d4cc
 800b664:	0800d4ec 	.word	0x0800d4ec
 800b668:	0800d4ac 	.word	0x0800d4ac

0800b66c <__swsetup_r>:
 800b66c:	4b32      	ldr	r3, [pc, #200]	; (800b738 <__swsetup_r+0xcc>)
 800b66e:	b570      	push	{r4, r5, r6, lr}
 800b670:	681d      	ldr	r5, [r3, #0]
 800b672:	4606      	mov	r6, r0
 800b674:	460c      	mov	r4, r1
 800b676:	b125      	cbz	r5, 800b682 <__swsetup_r+0x16>
 800b678:	69ab      	ldr	r3, [r5, #24]
 800b67a:	b913      	cbnz	r3, 800b682 <__swsetup_r+0x16>
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 f985 	bl	800b98c <__sinit>
 800b682:	4b2e      	ldr	r3, [pc, #184]	; (800b73c <__swsetup_r+0xd0>)
 800b684:	429c      	cmp	r4, r3
 800b686:	d10f      	bne.n	800b6a8 <__swsetup_r+0x3c>
 800b688:	686c      	ldr	r4, [r5, #4]
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b690:	0719      	lsls	r1, r3, #28
 800b692:	d42c      	bmi.n	800b6ee <__swsetup_r+0x82>
 800b694:	06dd      	lsls	r5, r3, #27
 800b696:	d411      	bmi.n	800b6bc <__swsetup_r+0x50>
 800b698:	2309      	movs	r3, #9
 800b69a:	6033      	str	r3, [r6, #0]
 800b69c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6a0:	81a3      	strh	r3, [r4, #12]
 800b6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a6:	e03e      	b.n	800b726 <__swsetup_r+0xba>
 800b6a8:	4b25      	ldr	r3, [pc, #148]	; (800b740 <__swsetup_r+0xd4>)
 800b6aa:	429c      	cmp	r4, r3
 800b6ac:	d101      	bne.n	800b6b2 <__swsetup_r+0x46>
 800b6ae:	68ac      	ldr	r4, [r5, #8]
 800b6b0:	e7eb      	b.n	800b68a <__swsetup_r+0x1e>
 800b6b2:	4b24      	ldr	r3, [pc, #144]	; (800b744 <__swsetup_r+0xd8>)
 800b6b4:	429c      	cmp	r4, r3
 800b6b6:	bf08      	it	eq
 800b6b8:	68ec      	ldreq	r4, [r5, #12]
 800b6ba:	e7e6      	b.n	800b68a <__swsetup_r+0x1e>
 800b6bc:	0758      	lsls	r0, r3, #29
 800b6be:	d512      	bpl.n	800b6e6 <__swsetup_r+0x7a>
 800b6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6c2:	b141      	cbz	r1, 800b6d6 <__swsetup_r+0x6a>
 800b6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6c8:	4299      	cmp	r1, r3
 800b6ca:	d002      	beq.n	800b6d2 <__swsetup_r+0x66>
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7fc f809 	bl	80076e4 <_free_r>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	6363      	str	r3, [r4, #52]	; 0x34
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	6063      	str	r3, [r4, #4]
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	f043 0308 	orr.w	r3, r3, #8
 800b6ec:	81a3      	strh	r3, [r4, #12]
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	b94b      	cbnz	r3, 800b706 <__swsetup_r+0x9a>
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6fc:	d003      	beq.n	800b706 <__swsetup_r+0x9a>
 800b6fe:	4621      	mov	r1, r4
 800b700:	4630      	mov	r0, r6
 800b702:	f000 fa05 	bl	800bb10 <__smakebuf_r>
 800b706:	89a0      	ldrh	r0, [r4, #12]
 800b708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b70c:	f010 0301 	ands.w	r3, r0, #1
 800b710:	d00a      	beq.n	800b728 <__swsetup_r+0xbc>
 800b712:	2300      	movs	r3, #0
 800b714:	60a3      	str	r3, [r4, #8]
 800b716:	6963      	ldr	r3, [r4, #20]
 800b718:	425b      	negs	r3, r3
 800b71a:	61a3      	str	r3, [r4, #24]
 800b71c:	6923      	ldr	r3, [r4, #16]
 800b71e:	b943      	cbnz	r3, 800b732 <__swsetup_r+0xc6>
 800b720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b724:	d1ba      	bne.n	800b69c <__swsetup_r+0x30>
 800b726:	bd70      	pop	{r4, r5, r6, pc}
 800b728:	0781      	lsls	r1, r0, #30
 800b72a:	bf58      	it	pl
 800b72c:	6963      	ldrpl	r3, [r4, #20]
 800b72e:	60a3      	str	r3, [r4, #8]
 800b730:	e7f4      	b.n	800b71c <__swsetup_r+0xb0>
 800b732:	2000      	movs	r0, #0
 800b734:	e7f7      	b.n	800b726 <__swsetup_r+0xba>
 800b736:	bf00      	nop
 800b738:	2000000c 	.word	0x2000000c
 800b73c:	0800d4cc 	.word	0x0800d4cc
 800b740:	0800d4ec 	.word	0x0800d4ec
 800b744:	0800d4ac 	.word	0x0800d4ac

0800b748 <abort>:
 800b748:	b508      	push	{r3, lr}
 800b74a:	2006      	movs	r0, #6
 800b74c:	f000 fa50 	bl	800bbf0 <raise>
 800b750:	2001      	movs	r0, #1
 800b752:	f7f5 ff1b 	bl	800158c <_exit>
	...

0800b758 <__sflush_r>:
 800b758:	898a      	ldrh	r2, [r1, #12]
 800b75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b75e:	4605      	mov	r5, r0
 800b760:	0710      	lsls	r0, r2, #28
 800b762:	460c      	mov	r4, r1
 800b764:	d458      	bmi.n	800b818 <__sflush_r+0xc0>
 800b766:	684b      	ldr	r3, [r1, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dc05      	bgt.n	800b778 <__sflush_r+0x20>
 800b76c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	dc02      	bgt.n	800b778 <__sflush_r+0x20>
 800b772:	2000      	movs	r0, #0
 800b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b77a:	2e00      	cmp	r6, #0
 800b77c:	d0f9      	beq.n	800b772 <__sflush_r+0x1a>
 800b77e:	2300      	movs	r3, #0
 800b780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b784:	682f      	ldr	r7, [r5, #0]
 800b786:	602b      	str	r3, [r5, #0]
 800b788:	d032      	beq.n	800b7f0 <__sflush_r+0x98>
 800b78a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	075a      	lsls	r2, r3, #29
 800b790:	d505      	bpl.n	800b79e <__sflush_r+0x46>
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	1ac0      	subs	r0, r0, r3
 800b796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b798:	b10b      	cbz	r3, 800b79e <__sflush_r+0x46>
 800b79a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b79c:	1ac0      	subs	r0, r0, r3
 800b79e:	2300      	movs	r3, #0
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b7a4:	6a21      	ldr	r1, [r4, #32]
 800b7a6:	4628      	mov	r0, r5
 800b7a8:	47b0      	blx	r6
 800b7aa:	1c43      	adds	r3, r0, #1
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	d106      	bne.n	800b7be <__sflush_r+0x66>
 800b7b0:	6829      	ldr	r1, [r5, #0]
 800b7b2:	291d      	cmp	r1, #29
 800b7b4:	d82c      	bhi.n	800b810 <__sflush_r+0xb8>
 800b7b6:	4a2a      	ldr	r2, [pc, #168]	; (800b860 <__sflush_r+0x108>)
 800b7b8:	40ca      	lsrs	r2, r1
 800b7ba:	07d6      	lsls	r6, r2, #31
 800b7bc:	d528      	bpl.n	800b810 <__sflush_r+0xb8>
 800b7be:	2200      	movs	r2, #0
 800b7c0:	6062      	str	r2, [r4, #4]
 800b7c2:	04d9      	lsls	r1, r3, #19
 800b7c4:	6922      	ldr	r2, [r4, #16]
 800b7c6:	6022      	str	r2, [r4, #0]
 800b7c8:	d504      	bpl.n	800b7d4 <__sflush_r+0x7c>
 800b7ca:	1c42      	adds	r2, r0, #1
 800b7cc:	d101      	bne.n	800b7d2 <__sflush_r+0x7a>
 800b7ce:	682b      	ldr	r3, [r5, #0]
 800b7d0:	b903      	cbnz	r3, 800b7d4 <__sflush_r+0x7c>
 800b7d2:	6560      	str	r0, [r4, #84]	; 0x54
 800b7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7d6:	602f      	str	r7, [r5, #0]
 800b7d8:	2900      	cmp	r1, #0
 800b7da:	d0ca      	beq.n	800b772 <__sflush_r+0x1a>
 800b7dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7e0:	4299      	cmp	r1, r3
 800b7e2:	d002      	beq.n	800b7ea <__sflush_r+0x92>
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	f7fb ff7d 	bl	80076e4 <_free_r>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b7ee:	e7c1      	b.n	800b774 <__sflush_r+0x1c>
 800b7f0:	6a21      	ldr	r1, [r4, #32]
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	47b0      	blx	r6
 800b7f8:	1c41      	adds	r1, r0, #1
 800b7fa:	d1c7      	bne.n	800b78c <__sflush_r+0x34>
 800b7fc:	682b      	ldr	r3, [r5, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d0c4      	beq.n	800b78c <__sflush_r+0x34>
 800b802:	2b1d      	cmp	r3, #29
 800b804:	d001      	beq.n	800b80a <__sflush_r+0xb2>
 800b806:	2b16      	cmp	r3, #22
 800b808:	d101      	bne.n	800b80e <__sflush_r+0xb6>
 800b80a:	602f      	str	r7, [r5, #0]
 800b80c:	e7b1      	b.n	800b772 <__sflush_r+0x1a>
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	e7ad      	b.n	800b774 <__sflush_r+0x1c>
 800b818:	690f      	ldr	r7, [r1, #16]
 800b81a:	2f00      	cmp	r7, #0
 800b81c:	d0a9      	beq.n	800b772 <__sflush_r+0x1a>
 800b81e:	0793      	lsls	r3, r2, #30
 800b820:	680e      	ldr	r6, [r1, #0]
 800b822:	bf08      	it	eq
 800b824:	694b      	ldreq	r3, [r1, #20]
 800b826:	600f      	str	r7, [r1, #0]
 800b828:	bf18      	it	ne
 800b82a:	2300      	movne	r3, #0
 800b82c:	eba6 0807 	sub.w	r8, r6, r7
 800b830:	608b      	str	r3, [r1, #8]
 800b832:	f1b8 0f00 	cmp.w	r8, #0
 800b836:	dd9c      	ble.n	800b772 <__sflush_r+0x1a>
 800b838:	6a21      	ldr	r1, [r4, #32]
 800b83a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b83c:	4643      	mov	r3, r8
 800b83e:	463a      	mov	r2, r7
 800b840:	4628      	mov	r0, r5
 800b842:	47b0      	blx	r6
 800b844:	2800      	cmp	r0, #0
 800b846:	dc06      	bgt.n	800b856 <__sflush_r+0xfe>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b84e:	81a3      	strh	r3, [r4, #12]
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	e78e      	b.n	800b774 <__sflush_r+0x1c>
 800b856:	4407      	add	r7, r0
 800b858:	eba8 0800 	sub.w	r8, r8, r0
 800b85c:	e7e9      	b.n	800b832 <__sflush_r+0xda>
 800b85e:	bf00      	nop
 800b860:	20400001 	.word	0x20400001

0800b864 <_fflush_r>:
 800b864:	b538      	push	{r3, r4, r5, lr}
 800b866:	690b      	ldr	r3, [r1, #16]
 800b868:	4605      	mov	r5, r0
 800b86a:	460c      	mov	r4, r1
 800b86c:	b913      	cbnz	r3, 800b874 <_fflush_r+0x10>
 800b86e:	2500      	movs	r5, #0
 800b870:	4628      	mov	r0, r5
 800b872:	bd38      	pop	{r3, r4, r5, pc}
 800b874:	b118      	cbz	r0, 800b87e <_fflush_r+0x1a>
 800b876:	6983      	ldr	r3, [r0, #24]
 800b878:	b90b      	cbnz	r3, 800b87e <_fflush_r+0x1a>
 800b87a:	f000 f887 	bl	800b98c <__sinit>
 800b87e:	4b14      	ldr	r3, [pc, #80]	; (800b8d0 <_fflush_r+0x6c>)
 800b880:	429c      	cmp	r4, r3
 800b882:	d11b      	bne.n	800b8bc <_fflush_r+0x58>
 800b884:	686c      	ldr	r4, [r5, #4]
 800b886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0ef      	beq.n	800b86e <_fflush_r+0xa>
 800b88e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b890:	07d0      	lsls	r0, r2, #31
 800b892:	d404      	bmi.n	800b89e <_fflush_r+0x3a>
 800b894:	0599      	lsls	r1, r3, #22
 800b896:	d402      	bmi.n	800b89e <_fflush_r+0x3a>
 800b898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b89a:	f7f6 f990 	bl	8001bbe <__retarget_lock_acquire_recursive>
 800b89e:	4628      	mov	r0, r5
 800b8a0:	4621      	mov	r1, r4
 800b8a2:	f7ff ff59 	bl	800b758 <__sflush_r>
 800b8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8a8:	07da      	lsls	r2, r3, #31
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	d4e0      	bmi.n	800b870 <_fflush_r+0xc>
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	059b      	lsls	r3, r3, #22
 800b8b2:	d4dd      	bmi.n	800b870 <_fflush_r+0xc>
 800b8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8b6:	f7f6 f996 	bl	8001be6 <__retarget_lock_release_recursive>
 800b8ba:	e7d9      	b.n	800b870 <_fflush_r+0xc>
 800b8bc:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <_fflush_r+0x70>)
 800b8be:	429c      	cmp	r4, r3
 800b8c0:	d101      	bne.n	800b8c6 <_fflush_r+0x62>
 800b8c2:	68ac      	ldr	r4, [r5, #8]
 800b8c4:	e7df      	b.n	800b886 <_fflush_r+0x22>
 800b8c6:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <_fflush_r+0x74>)
 800b8c8:	429c      	cmp	r4, r3
 800b8ca:	bf08      	it	eq
 800b8cc:	68ec      	ldreq	r4, [r5, #12]
 800b8ce:	e7da      	b.n	800b886 <_fflush_r+0x22>
 800b8d0:	0800d4cc 	.word	0x0800d4cc
 800b8d4:	0800d4ec 	.word	0x0800d4ec
 800b8d8:	0800d4ac 	.word	0x0800d4ac

0800b8dc <std>:
 800b8dc:	2300      	movs	r3, #0
 800b8de:	b510      	push	{r4, lr}
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	e9c0 3300 	strd	r3, r3, [r0]
 800b8e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8ea:	6083      	str	r3, [r0, #8]
 800b8ec:	8181      	strh	r1, [r0, #12]
 800b8ee:	6643      	str	r3, [r0, #100]	; 0x64
 800b8f0:	81c2      	strh	r2, [r0, #14]
 800b8f2:	6183      	str	r3, [r0, #24]
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	2208      	movs	r2, #8
 800b8f8:	305c      	adds	r0, #92	; 0x5c
 800b8fa:	f7fb feeb 	bl	80076d4 <memset>
 800b8fe:	4b05      	ldr	r3, [pc, #20]	; (800b914 <std+0x38>)
 800b900:	6263      	str	r3, [r4, #36]	; 0x24
 800b902:	4b05      	ldr	r3, [pc, #20]	; (800b918 <std+0x3c>)
 800b904:	62a3      	str	r3, [r4, #40]	; 0x28
 800b906:	4b05      	ldr	r3, [pc, #20]	; (800b91c <std+0x40>)
 800b908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b90a:	4b05      	ldr	r3, [pc, #20]	; (800b920 <std+0x44>)
 800b90c:	6224      	str	r4, [r4, #32]
 800b90e:	6323      	str	r3, [r4, #48]	; 0x30
 800b910:	bd10      	pop	{r4, pc}
 800b912:	bf00      	nop
 800b914:	0800bc29 	.word	0x0800bc29
 800b918:	0800bc4b 	.word	0x0800bc4b
 800b91c:	0800bc83 	.word	0x0800bc83
 800b920:	0800bca7 	.word	0x0800bca7

0800b924 <_cleanup_r>:
 800b924:	4901      	ldr	r1, [pc, #4]	; (800b92c <_cleanup_r+0x8>)
 800b926:	f000 b8af 	b.w	800ba88 <_fwalk_reent>
 800b92a:	bf00      	nop
 800b92c:	0800b865 	.word	0x0800b865

0800b930 <__sfmoreglue>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	2268      	movs	r2, #104	; 0x68
 800b934:	1e4d      	subs	r5, r1, #1
 800b936:	4355      	muls	r5, r2
 800b938:	460e      	mov	r6, r1
 800b93a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b93e:	f7fb ff3d 	bl	80077bc <_malloc_r>
 800b942:	4604      	mov	r4, r0
 800b944:	b140      	cbz	r0, 800b958 <__sfmoreglue+0x28>
 800b946:	2100      	movs	r1, #0
 800b948:	e9c0 1600 	strd	r1, r6, [r0]
 800b94c:	300c      	adds	r0, #12
 800b94e:	60a0      	str	r0, [r4, #8]
 800b950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b954:	f7fb febe 	bl	80076d4 <memset>
 800b958:	4620      	mov	r0, r4
 800b95a:	bd70      	pop	{r4, r5, r6, pc}

0800b95c <__sfp_lock_acquire>:
 800b95c:	4801      	ldr	r0, [pc, #4]	; (800b964 <__sfp_lock_acquire+0x8>)
 800b95e:	f7f6 b92e 	b.w	8001bbe <__retarget_lock_acquire_recursive>
 800b962:	bf00      	nop
 800b964:	200008e8 	.word	0x200008e8

0800b968 <__sfp_lock_release>:
 800b968:	4801      	ldr	r0, [pc, #4]	; (800b970 <__sfp_lock_release+0x8>)
 800b96a:	f7f6 b93c 	b.w	8001be6 <__retarget_lock_release_recursive>
 800b96e:	bf00      	nop
 800b970:	200008e8 	.word	0x200008e8

0800b974 <__sinit_lock_acquire>:
 800b974:	4801      	ldr	r0, [pc, #4]	; (800b97c <__sinit_lock_acquire+0x8>)
 800b976:	f7f6 b922 	b.w	8001bbe <__retarget_lock_acquire_recursive>
 800b97a:	bf00      	nop
 800b97c:	200008e4 	.word	0x200008e4

0800b980 <__sinit_lock_release>:
 800b980:	4801      	ldr	r0, [pc, #4]	; (800b988 <__sinit_lock_release+0x8>)
 800b982:	f7f6 b930 	b.w	8001be6 <__retarget_lock_release_recursive>
 800b986:	bf00      	nop
 800b988:	200008e4 	.word	0x200008e4

0800b98c <__sinit>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	4604      	mov	r4, r0
 800b990:	f7ff fff0 	bl	800b974 <__sinit_lock_acquire>
 800b994:	69a3      	ldr	r3, [r4, #24]
 800b996:	b11b      	cbz	r3, 800b9a0 <__sinit+0x14>
 800b998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b99c:	f7ff bff0 	b.w	800b980 <__sinit_lock_release>
 800b9a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b9a4:	6523      	str	r3, [r4, #80]	; 0x50
 800b9a6:	4b13      	ldr	r3, [pc, #76]	; (800b9f4 <__sinit+0x68>)
 800b9a8:	4a13      	ldr	r2, [pc, #76]	; (800b9f8 <__sinit+0x6c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800b9ae:	42a3      	cmp	r3, r4
 800b9b0:	bf04      	itt	eq
 800b9b2:	2301      	moveq	r3, #1
 800b9b4:	61a3      	streq	r3, [r4, #24]
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f000 f820 	bl	800b9fc <__sfp>
 800b9bc:	6060      	str	r0, [r4, #4]
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 f81c 	bl	800b9fc <__sfp>
 800b9c4:	60a0      	str	r0, [r4, #8]
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f000 f818 	bl	800b9fc <__sfp>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	60e0      	str	r0, [r4, #12]
 800b9d0:	2104      	movs	r1, #4
 800b9d2:	6860      	ldr	r0, [r4, #4]
 800b9d4:	f7ff ff82 	bl	800b8dc <std>
 800b9d8:	68a0      	ldr	r0, [r4, #8]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	2109      	movs	r1, #9
 800b9de:	f7ff ff7d 	bl	800b8dc <std>
 800b9e2:	68e0      	ldr	r0, [r4, #12]
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	2112      	movs	r1, #18
 800b9e8:	f7ff ff78 	bl	800b8dc <std>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	61a3      	str	r3, [r4, #24]
 800b9f0:	e7d2      	b.n	800b998 <__sinit+0xc>
 800b9f2:	bf00      	nop
 800b9f4:	0800d000 	.word	0x0800d000
 800b9f8:	0800b925 	.word	0x0800b925

0800b9fc <__sfp>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	4607      	mov	r7, r0
 800ba00:	f7ff ffac 	bl	800b95c <__sfp_lock_acquire>
 800ba04:	4b1e      	ldr	r3, [pc, #120]	; (800ba80 <__sfp+0x84>)
 800ba06:	681e      	ldr	r6, [r3, #0]
 800ba08:	69b3      	ldr	r3, [r6, #24]
 800ba0a:	b913      	cbnz	r3, 800ba12 <__sfp+0x16>
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7ff ffbd 	bl	800b98c <__sinit>
 800ba12:	3648      	adds	r6, #72	; 0x48
 800ba14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	d503      	bpl.n	800ba24 <__sfp+0x28>
 800ba1c:	6833      	ldr	r3, [r6, #0]
 800ba1e:	b30b      	cbz	r3, 800ba64 <__sfp+0x68>
 800ba20:	6836      	ldr	r6, [r6, #0]
 800ba22:	e7f7      	b.n	800ba14 <__sfp+0x18>
 800ba24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ba28:	b9d5      	cbnz	r5, 800ba60 <__sfp+0x64>
 800ba2a:	4b16      	ldr	r3, [pc, #88]	; (800ba84 <__sfp+0x88>)
 800ba2c:	60e3      	str	r3, [r4, #12]
 800ba2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ba32:	6665      	str	r5, [r4, #100]	; 0x64
 800ba34:	f7f6 f89d 	bl	8001b72 <__retarget_lock_init_recursive>
 800ba38:	f7ff ff96 	bl	800b968 <__sfp_lock_release>
 800ba3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ba40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ba44:	6025      	str	r5, [r4, #0]
 800ba46:	61a5      	str	r5, [r4, #24]
 800ba48:	2208      	movs	r2, #8
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ba50:	f7fb fe40 	bl	80076d4 <memset>
 800ba54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba60:	3468      	adds	r4, #104	; 0x68
 800ba62:	e7d9      	b.n	800ba18 <__sfp+0x1c>
 800ba64:	2104      	movs	r1, #4
 800ba66:	4638      	mov	r0, r7
 800ba68:	f7ff ff62 	bl	800b930 <__sfmoreglue>
 800ba6c:	4604      	mov	r4, r0
 800ba6e:	6030      	str	r0, [r6, #0]
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d1d5      	bne.n	800ba20 <__sfp+0x24>
 800ba74:	f7ff ff78 	bl	800b968 <__sfp_lock_release>
 800ba78:	230c      	movs	r3, #12
 800ba7a:	603b      	str	r3, [r7, #0]
 800ba7c:	e7ee      	b.n	800ba5c <__sfp+0x60>
 800ba7e:	bf00      	nop
 800ba80:	0800d000 	.word	0x0800d000
 800ba84:	ffff0001 	.word	0xffff0001

0800ba88 <_fwalk_reent>:
 800ba88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	4688      	mov	r8, r1
 800ba90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba94:	2700      	movs	r7, #0
 800ba96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba9a:	f1b9 0901 	subs.w	r9, r9, #1
 800ba9e:	d505      	bpl.n	800baac <_fwalk_reent+0x24>
 800baa0:	6824      	ldr	r4, [r4, #0]
 800baa2:	2c00      	cmp	r4, #0
 800baa4:	d1f7      	bne.n	800ba96 <_fwalk_reent+0xe>
 800baa6:	4638      	mov	r0, r7
 800baa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baac:	89ab      	ldrh	r3, [r5, #12]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d907      	bls.n	800bac2 <_fwalk_reent+0x3a>
 800bab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bab6:	3301      	adds	r3, #1
 800bab8:	d003      	beq.n	800bac2 <_fwalk_reent+0x3a>
 800baba:	4629      	mov	r1, r5
 800babc:	4630      	mov	r0, r6
 800babe:	47c0      	blx	r8
 800bac0:	4307      	orrs	r7, r0
 800bac2:	3568      	adds	r5, #104	; 0x68
 800bac4:	e7e9      	b.n	800ba9a <_fwalk_reent+0x12>

0800bac6 <__swhatbuf_r>:
 800bac6:	b570      	push	{r4, r5, r6, lr}
 800bac8:	460e      	mov	r6, r1
 800baca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bace:	2900      	cmp	r1, #0
 800bad0:	b096      	sub	sp, #88	; 0x58
 800bad2:	4614      	mov	r4, r2
 800bad4:	461d      	mov	r5, r3
 800bad6:	da08      	bge.n	800baea <__swhatbuf_r+0x24>
 800bad8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	602a      	str	r2, [r5, #0]
 800bae0:	061a      	lsls	r2, r3, #24
 800bae2:	d410      	bmi.n	800bb06 <__swhatbuf_r+0x40>
 800bae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bae8:	e00e      	b.n	800bb08 <__swhatbuf_r+0x42>
 800baea:	466a      	mov	r2, sp
 800baec:	f000 f902 	bl	800bcf4 <_fstat_r>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	dbf1      	blt.n	800bad8 <__swhatbuf_r+0x12>
 800baf4:	9a01      	ldr	r2, [sp, #4]
 800baf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bafa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bafe:	425a      	negs	r2, r3
 800bb00:	415a      	adcs	r2, r3
 800bb02:	602a      	str	r2, [r5, #0]
 800bb04:	e7ee      	b.n	800bae4 <__swhatbuf_r+0x1e>
 800bb06:	2340      	movs	r3, #64	; 0x40
 800bb08:	2000      	movs	r0, #0
 800bb0a:	6023      	str	r3, [r4, #0]
 800bb0c:	b016      	add	sp, #88	; 0x58
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}

0800bb10 <__smakebuf_r>:
 800bb10:	898b      	ldrh	r3, [r1, #12]
 800bb12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb14:	079d      	lsls	r5, r3, #30
 800bb16:	4606      	mov	r6, r0
 800bb18:	460c      	mov	r4, r1
 800bb1a:	d507      	bpl.n	800bb2c <__smakebuf_r+0x1c>
 800bb1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	6123      	str	r3, [r4, #16]
 800bb24:	2301      	movs	r3, #1
 800bb26:	6163      	str	r3, [r4, #20]
 800bb28:	b002      	add	sp, #8
 800bb2a:	bd70      	pop	{r4, r5, r6, pc}
 800bb2c:	ab01      	add	r3, sp, #4
 800bb2e:	466a      	mov	r2, sp
 800bb30:	f7ff ffc9 	bl	800bac6 <__swhatbuf_r>
 800bb34:	9900      	ldr	r1, [sp, #0]
 800bb36:	4605      	mov	r5, r0
 800bb38:	4630      	mov	r0, r6
 800bb3a:	f7fb fe3f 	bl	80077bc <_malloc_r>
 800bb3e:	b948      	cbnz	r0, 800bb54 <__smakebuf_r+0x44>
 800bb40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb44:	059a      	lsls	r2, r3, #22
 800bb46:	d4ef      	bmi.n	800bb28 <__smakebuf_r+0x18>
 800bb48:	f023 0303 	bic.w	r3, r3, #3
 800bb4c:	f043 0302 	orr.w	r3, r3, #2
 800bb50:	81a3      	strh	r3, [r4, #12]
 800bb52:	e7e3      	b.n	800bb1c <__smakebuf_r+0xc>
 800bb54:	4b0d      	ldr	r3, [pc, #52]	; (800bb8c <__smakebuf_r+0x7c>)
 800bb56:	62b3      	str	r3, [r6, #40]	; 0x28
 800bb58:	89a3      	ldrh	r3, [r4, #12]
 800bb5a:	6020      	str	r0, [r4, #0]
 800bb5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb60:	81a3      	strh	r3, [r4, #12]
 800bb62:	9b00      	ldr	r3, [sp, #0]
 800bb64:	6163      	str	r3, [r4, #20]
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	6120      	str	r0, [r4, #16]
 800bb6a:	b15b      	cbz	r3, 800bb84 <__smakebuf_r+0x74>
 800bb6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb70:	4630      	mov	r0, r6
 800bb72:	f000 f8d1 	bl	800bd18 <_isatty_r>
 800bb76:	b128      	cbz	r0, 800bb84 <__smakebuf_r+0x74>
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	f043 0301 	orr.w	r3, r3, #1
 800bb82:	81a3      	strh	r3, [r4, #12]
 800bb84:	89a0      	ldrh	r0, [r4, #12]
 800bb86:	4305      	orrs	r5, r0
 800bb88:	81a5      	strh	r5, [r4, #12]
 800bb8a:	e7cd      	b.n	800bb28 <__smakebuf_r+0x18>
 800bb8c:	0800b925 	.word	0x0800b925

0800bb90 <_malloc_usable_size_r>:
 800bb90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb94:	1f18      	subs	r0, r3, #4
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	bfbc      	itt	lt
 800bb9a:	580b      	ldrlt	r3, [r1, r0]
 800bb9c:	18c0      	addlt	r0, r0, r3
 800bb9e:	4770      	bx	lr

0800bba0 <_raise_r>:
 800bba0:	291f      	cmp	r1, #31
 800bba2:	b538      	push	{r3, r4, r5, lr}
 800bba4:	4604      	mov	r4, r0
 800bba6:	460d      	mov	r5, r1
 800bba8:	d904      	bls.n	800bbb4 <_raise_r+0x14>
 800bbaa:	2316      	movs	r3, #22
 800bbac:	6003      	str	r3, [r0, #0]
 800bbae:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbb6:	b112      	cbz	r2, 800bbbe <_raise_r+0x1e>
 800bbb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbbc:	b94b      	cbnz	r3, 800bbd2 <_raise_r+0x32>
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 f830 	bl	800bc24 <_getpid_r>
 800bbc4:	462a      	mov	r2, r5
 800bbc6:	4601      	mov	r1, r0
 800bbc8:	4620      	mov	r0, r4
 800bbca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbce:	f000 b817 	b.w	800bc00 <_kill_r>
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d00a      	beq.n	800bbec <_raise_r+0x4c>
 800bbd6:	1c59      	adds	r1, r3, #1
 800bbd8:	d103      	bne.n	800bbe2 <_raise_r+0x42>
 800bbda:	2316      	movs	r3, #22
 800bbdc:	6003      	str	r3, [r0, #0]
 800bbde:	2001      	movs	r0, #1
 800bbe0:	e7e7      	b.n	800bbb2 <_raise_r+0x12>
 800bbe2:	2400      	movs	r4, #0
 800bbe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bbe8:	4628      	mov	r0, r5
 800bbea:	4798      	blx	r3
 800bbec:	2000      	movs	r0, #0
 800bbee:	e7e0      	b.n	800bbb2 <_raise_r+0x12>

0800bbf0 <raise>:
 800bbf0:	4b02      	ldr	r3, [pc, #8]	; (800bbfc <raise+0xc>)
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	f7ff bfd3 	b.w	800bba0 <_raise_r>
 800bbfa:	bf00      	nop
 800bbfc:	2000000c 	.word	0x2000000c

0800bc00 <_kill_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	4d07      	ldr	r5, [pc, #28]	; (800bc20 <_kill_r+0x20>)
 800bc04:	2300      	movs	r3, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	602b      	str	r3, [r5, #0]
 800bc0e:	f7f5 fcad 	bl	800156c <_kill>
 800bc12:	1c43      	adds	r3, r0, #1
 800bc14:	d102      	bne.n	800bc1c <_kill_r+0x1c>
 800bc16:	682b      	ldr	r3, [r5, #0]
 800bc18:	b103      	cbz	r3, 800bc1c <_kill_r+0x1c>
 800bc1a:	6023      	str	r3, [r4, #0]
 800bc1c:	bd38      	pop	{r3, r4, r5, pc}
 800bc1e:	bf00      	nop
 800bc20:	200008fc 	.word	0x200008fc

0800bc24 <_getpid_r>:
 800bc24:	f7f5 bc9a 	b.w	800155c <_getpid>

0800bc28 <__sread>:
 800bc28:	b510      	push	{r4, lr}
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc30:	f000 f894 	bl	800bd5c <_read_r>
 800bc34:	2800      	cmp	r0, #0
 800bc36:	bfab      	itete	ge
 800bc38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc3a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc3c:	181b      	addge	r3, r3, r0
 800bc3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc42:	bfac      	ite	ge
 800bc44:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc46:	81a3      	strhlt	r3, [r4, #12]
 800bc48:	bd10      	pop	{r4, pc}

0800bc4a <__swrite>:
 800bc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4e:	461f      	mov	r7, r3
 800bc50:	898b      	ldrh	r3, [r1, #12]
 800bc52:	05db      	lsls	r3, r3, #23
 800bc54:	4605      	mov	r5, r0
 800bc56:	460c      	mov	r4, r1
 800bc58:	4616      	mov	r6, r2
 800bc5a:	d505      	bpl.n	800bc68 <__swrite+0x1e>
 800bc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc60:	2302      	movs	r3, #2
 800bc62:	2200      	movs	r2, #0
 800bc64:	f000 f868 	bl	800bd38 <_lseek_r>
 800bc68:	89a3      	ldrh	r3, [r4, #12]
 800bc6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc72:	81a3      	strh	r3, [r4, #12]
 800bc74:	4632      	mov	r2, r6
 800bc76:	463b      	mov	r3, r7
 800bc78:	4628      	mov	r0, r5
 800bc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc7e:	f000 b817 	b.w	800bcb0 <_write_r>

0800bc82 <__sseek>:
 800bc82:	b510      	push	{r4, lr}
 800bc84:	460c      	mov	r4, r1
 800bc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8a:	f000 f855 	bl	800bd38 <_lseek_r>
 800bc8e:	1c43      	adds	r3, r0, #1
 800bc90:	89a3      	ldrh	r3, [r4, #12]
 800bc92:	bf15      	itete	ne
 800bc94:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc9e:	81a3      	strheq	r3, [r4, #12]
 800bca0:	bf18      	it	ne
 800bca2:	81a3      	strhne	r3, [r4, #12]
 800bca4:	bd10      	pop	{r4, pc}

0800bca6 <__sclose>:
 800bca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcaa:	f000 b813 	b.w	800bcd4 <_close_r>
	...

0800bcb0 <_write_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d07      	ldr	r5, [pc, #28]	; (800bcd0 <_write_r+0x20>)
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	4608      	mov	r0, r1
 800bcb8:	4611      	mov	r1, r2
 800bcba:	2200      	movs	r2, #0
 800bcbc:	602a      	str	r2, [r5, #0]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	f7f5 fc8b 	bl	80015da <_write>
 800bcc4:	1c43      	adds	r3, r0, #1
 800bcc6:	d102      	bne.n	800bcce <_write_r+0x1e>
 800bcc8:	682b      	ldr	r3, [r5, #0]
 800bcca:	b103      	cbz	r3, 800bcce <_write_r+0x1e>
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	200008fc 	.word	0x200008fc

0800bcd4 <_close_r>:
 800bcd4:	b538      	push	{r3, r4, r5, lr}
 800bcd6:	4d06      	ldr	r5, [pc, #24]	; (800bcf0 <_close_r+0x1c>)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4604      	mov	r4, r0
 800bcdc:	4608      	mov	r0, r1
 800bcde:	602b      	str	r3, [r5, #0]
 800bce0:	f7f5 fc97 	bl	8001612 <_close>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d102      	bne.n	800bcee <_close_r+0x1a>
 800bce8:	682b      	ldr	r3, [r5, #0]
 800bcea:	b103      	cbz	r3, 800bcee <_close_r+0x1a>
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	bd38      	pop	{r3, r4, r5, pc}
 800bcf0:	200008fc 	.word	0x200008fc

0800bcf4 <_fstat_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	; (800bd14 <_fstat_r+0x20>)
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	4611      	mov	r1, r2
 800bd00:	602b      	str	r3, [r5, #0]
 800bd02:	f7f5 fc92 	bl	800162a <_fstat>
 800bd06:	1c43      	adds	r3, r0, #1
 800bd08:	d102      	bne.n	800bd10 <_fstat_r+0x1c>
 800bd0a:	682b      	ldr	r3, [r5, #0]
 800bd0c:	b103      	cbz	r3, 800bd10 <_fstat_r+0x1c>
 800bd0e:	6023      	str	r3, [r4, #0]
 800bd10:	bd38      	pop	{r3, r4, r5, pc}
 800bd12:	bf00      	nop
 800bd14:	200008fc 	.word	0x200008fc

0800bd18 <_isatty_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	4d06      	ldr	r5, [pc, #24]	; (800bd34 <_isatty_r+0x1c>)
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	4604      	mov	r4, r0
 800bd20:	4608      	mov	r0, r1
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	f7f5 fc91 	bl	800164a <_isatty>
 800bd28:	1c43      	adds	r3, r0, #1
 800bd2a:	d102      	bne.n	800bd32 <_isatty_r+0x1a>
 800bd2c:	682b      	ldr	r3, [r5, #0]
 800bd2e:	b103      	cbz	r3, 800bd32 <_isatty_r+0x1a>
 800bd30:	6023      	str	r3, [r4, #0]
 800bd32:	bd38      	pop	{r3, r4, r5, pc}
 800bd34:	200008fc 	.word	0x200008fc

0800bd38 <_lseek_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4d07      	ldr	r5, [pc, #28]	; (800bd58 <_lseek_r+0x20>)
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	4608      	mov	r0, r1
 800bd40:	4611      	mov	r1, r2
 800bd42:	2200      	movs	r2, #0
 800bd44:	602a      	str	r2, [r5, #0]
 800bd46:	461a      	mov	r2, r3
 800bd48:	f7f5 fc8a 	bl	8001660 <_lseek>
 800bd4c:	1c43      	adds	r3, r0, #1
 800bd4e:	d102      	bne.n	800bd56 <_lseek_r+0x1e>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	b103      	cbz	r3, 800bd56 <_lseek_r+0x1e>
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	bd38      	pop	{r3, r4, r5, pc}
 800bd58:	200008fc 	.word	0x200008fc

0800bd5c <_read_r>:
 800bd5c:	b538      	push	{r3, r4, r5, lr}
 800bd5e:	4d07      	ldr	r5, [pc, #28]	; (800bd7c <_read_r+0x20>)
 800bd60:	4604      	mov	r4, r0
 800bd62:	4608      	mov	r0, r1
 800bd64:	4611      	mov	r1, r2
 800bd66:	2200      	movs	r2, #0
 800bd68:	602a      	str	r2, [r5, #0]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	f7f5 fc18 	bl	80015a0 <_read>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_read_r+0x1e>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_read_r+0x1e>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	200008fc 	.word	0x200008fc

0800bd80 <_init>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	bf00      	nop
 800bd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd86:	bc08      	pop	{r3}
 800bd88:	469e      	mov	lr, r3
 800bd8a:	4770      	bx	lr

0800bd8c <_fini>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr
