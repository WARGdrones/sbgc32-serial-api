
SBGC32_DemoLaunch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c078  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  0800c278  0800c278  0001c278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce4c  0800ce4c  00020d38  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce4c  0800ce4c  0001ce4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce54  0800ce54  00020d38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce54  0800ce54  0001ce54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce58  0800ce58  0001ce58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d38  20000000  0800ce5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b30  20000d38  0800db94  00020d38  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001868  0800db94  00021868  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020d38  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1af  00000000  00000000  00020d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a21  00000000  00000000  0003ef15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00042938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00043c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf9c  00000000  00000000  00044e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afcd  00000000  00000000  00070dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104525  00000000  00000000  0008bd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019029e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c8  00000000  00000000  001902f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000d38 	.word	0x20000d38
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c260 	.word	0x0800c260

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000d3c 	.word	0x20000d3c
 800023c:	0800c260 	.word	0x0800c260

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <MX_GPIO_Init+0x44>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_GPIO_Init+0x44>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <FormatBoardVersion>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	boardVer - BoardInfo_t.boardVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatBoardVersion (GeneralSBGC_t *generalSBGC, ui8 boardVer, char* pBuff)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	607a      	str	r2, [r7, #4]
 8000a30:	72fb      	strb	r3, [r7, #11]
	ui8 majorVer = boardVer / 10;
 8000a32:	7afb      	ldrb	r3, [r7, #11]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <FormatBoardVersion+0x48>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	08db      	lsrs	r3, r3, #3
 8000a3c:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = boardVer % 10;
 8000a3e:	7afa      	ldrb	r2, [r7, #11]
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <FormatBoardVersion+0x48>)
 8000a42:	fba3 1302 	umull	r1, r3, r3, r2
 8000a46:	08d9      	lsrs	r1, r3, #3
 8000a48:	460b      	mov	r3, r1
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	75bb      	strb	r3, [r7, #22]
	generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	699c      	ldr	r4, [r3, #24]
 8000a58:	7dfa      	ldrb	r2, [r7, #23]
 8000a5a:	7dbb      	ldrb	r3, [r7, #22]
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <FormatBoardVersion+0x4c>)
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	47a0      	blx	r4
}
 8000a62:	bf00      	nop
 8000a64:	371c      	adds	r7, #28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	cccccccd 	.word	0xcccccccd
 8000a70:	0800c278 	.word	0x0800c278

08000a74 <FormatFirmwareVersion>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	firmwareVer - BoardInfo_t.firmwareVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatFirmwareVersion (GeneralSBGC_t *generalSBGC, ui16 firmwareVer, char* pBuff)
{
 8000a74:	b590      	push	{r4, r7, lr}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af02      	add	r7, sp, #8
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	817b      	strh	r3, [r7, #10]
	ui8 majorVer = firmwareVer / 1000;
 8000a82:	897b      	ldrh	r3, [r7, #10]
 8000a84:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <FormatFirmwareVersion+0x88>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	099b      	lsrs	r3, r3, #6
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = (firmwareVer % 1000) / 10;
 8000a90:	897b      	ldrh	r3, [r7, #10]
 8000a92:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <FormatFirmwareVersion+0x88>)
 8000a94:	fba2 1203 	umull	r1, r2, r2, r3
 8000a98:	0992      	lsrs	r2, r2, #6
 8000a9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a9e:	fb01 f202 	mul.w	r2, r1, r2
 8000aa2:	1a9b      	subs	r3, r3, r2
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <FormatFirmwareVersion+0x8c>)
 8000aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	75bb      	strb	r3, [r7, #22]
	ui8 betaVer = firmwareVer % 10;
 8000ab2:	897a      	ldrh	r2, [r7, #10]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <FormatFirmwareVersion+0x8c>)
 8000ab6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aba:	08d9      	lsrs	r1, r3, #3
 8000abc:	460b      	mov	r3, r1
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	757b      	strb	r3, [r7, #21]

	if (betaVer != 0)
 8000aca:	7d7b      	ldrb	r3, [r7, #21]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d00a      	beq.n	8000ae6 <FormatFirmwareVersion+0x72>
		generalSBGC->SprintfFunc(pBuff, "%u.%ub%u", majorVer, minorVer, betaVer);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	699c      	ldr	r4, [r3, #24]
 8000ad4:	7dfa      	ldrb	r2, [r7, #23]
 8000ad6:	7db9      	ldrb	r1, [r7, #22]
 8000ad8:	7d7b      	ldrb	r3, [r7, #21]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	460b      	mov	r3, r1
 8000ade:	4909      	ldr	r1, [pc, #36]	; (8000b04 <FormatFirmwareVersion+0x90>)
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	47a0      	blx	r4

	else
		generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
}
 8000ae4:	e006      	b.n	8000af4 <FormatFirmwareVersion+0x80>
		generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	699c      	ldr	r4, [r3, #24]
 8000aea:	7dfa      	ldrb	r2, [r7, #23]
 8000aec:	7dbb      	ldrb	r3, [r7, #22]
 8000aee:	4906      	ldr	r1, [pc, #24]	; (8000b08 <FormatFirmwareVersion+0x94>)
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	47a0      	blx	r4
}
 8000af4:	bf00      	nop
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	10624dd3 	.word	0x10624dd3
 8000b00:	cccccccd 	.word	0xcccccccd
 8000b04:	0800c280 	.word	0x0800c280
 8000b08:	0800c278 	.word	0x0800c278

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b12:	f001 f854 	bl	8001bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b16:	f000 f8a1 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1a:	f7ff ff5f 	bl	80009dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b1e:	f000 fdcd 	bl	80016bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b22:	f000 fe3d 	bl	80017a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b26:	f000 fe6b 	bl	8001800 <MX_USART2_UART_Init>


	/*  - - - - - - - - - - Software Initialization - - - - - - - - - */

	/* SimpleBGC32 Init */
	SBGC32_Init(&SBGC32_Device);
 8000b2a:	4844      	ldr	r0, [pc, #272]	; (8000c3c <main+0x130>)
 8000b2c:	f004 fc86 	bl	800543c <SBGC32_Init>

	/* Control Configurations */
	ControlConfig.AxisCC[ROLL].angleLPF = 6;
 8000b30:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <main+0x134>)
 8000b32:	2206      	movs	r2, #6
 8000b34:	71da      	strb	r2, [r3, #7]
	ControlConfig.AxisCC[PITCH].angleLPF = 6;
 8000b36:	4b42      	ldr	r3, [pc, #264]	; (8000c40 <main+0x134>)
 8000b38:	2206      	movs	r2, #6
 8000b3a:	739a      	strb	r2, [r3, #14]
	ControlConfig.AxisCC[YAW].angleLPF = 7;
 8000b3c:	4b40      	ldr	r3, [pc, #256]	; (8000c40 <main+0x134>)
 8000b3e:	2207      	movs	r2, #7
 8000b40:	755a      	strb	r2, [r3, #21]

	ControlConfig.AxisCC[ROLL].angleLPF = 6;
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <main+0x134>)
 8000b44:	2206      	movs	r2, #6
 8000b46:	71da      	strb	r2, [r3, #7]
	ControlConfig.AxisCC[PITCH].speedLPF = 6;
 8000b48:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <main+0x134>)
 8000b4a:	2206      	movs	r2, #6
 8000b4c:	73da      	strb	r2, [r3, #15]
	ControlConfig.AxisCC[YAW].speedLPF = 7;
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <main+0x134>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	759a      	strb	r2, [r3, #22]
	ControlConfig.flags = RTCCF_CONTROL_CONFIG_FLAG_NO_CONFIRM;
 8000b54:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <main+0x134>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	f042 0201 	orr.w	r2, r2, #1
 8000b5c:	775a      	strb	r2, [r3, #29]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	779a      	strb	r2, [r3, #30]

	Control.controlMode[ROLL] = CtrlM_MODE_ANGLE | CtrlF_CONTROL_FLAG_TARGET_PRECISE;
 8000b62:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <main+0x138>)
 8000b64:	2222      	movs	r2, #34	; 0x22
 8000b66:	701a      	strb	r2, [r3, #0]
	Control.controlMode[PITCH] = CtrlM_MODE_ANGLE | CtrlF_CONTROL_FLAG_TARGET_PRECISE;
 8000b68:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <main+0x138>)
 8000b6a:	2222      	movs	r2, #34	; 0x22
 8000b6c:	705a      	strb	r2, [r3, #1]
	Control.controlMode[YAW] = CtrlM_MODE_ANGLE | CtrlF_CONTROL_FLAG_TARGET_PRECISE;
 8000b6e:	4b35      	ldr	r3, [pc, #212]	; (8000c44 <main+0x138>)
 8000b70:	2222      	movs	r2, #34	; 0x22
 8000b72:	709a      	strb	r2, [r3, #2]

	Control.AxisC[ROLL].angle = 0;
 8000b74:	4b33      	ldr	r3, [pc, #204]	; (8000c44 <main+0x138>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	715a      	strb	r2, [r3, #5]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	719a      	strb	r2, [r3, #6]
	Control.AxisC[PITCH].angle = 0;
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <main+0x138>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	725a      	strb	r2, [r3, #9]
 8000b84:	2200      	movs	r2, #0
 8000b86:	729a      	strb	r2, [r3, #10]
	Control.AxisC[YAW].angle = 0;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <main+0x138>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	735a      	strb	r2, [r3, #13]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	739a      	strb	r2, [r3, #14]

	Control.AxisC[PITCH].speed = SPEED_TO_VALUE(50);
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <main+0x138>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f062 0266 	orn	r2, r2, #102	; 0x66
 8000b9a:	71da      	strb	r2, [r3, #7]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f042 0201 	orr.w	r2, r2, #1
 8000ba2:	721a      	strb	r2, [r3, #8]
	Control.AxisC[YAW].speed = SPEED_TO_VALUE(50);
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <main+0x138>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f062 0266 	orn	r2, r2, #102	; 0x66
 8000bac:	72da      	strb	r2, [r3, #11]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f042 0201 	orr.w	r2, r2, #1
 8000bb4:	731a      	strb	r2, [r3, #12]

	/* Data Stream Configurations */
	DataStreamInterval.cmdID = CMD_REALTIME_DATA_CUSTOM;
 8000bb6:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <main+0x13c>)
 8000bb8:	2258      	movs	r2, #88	; 0x58
 8000bba:	701a      	strb	r2, [r3, #0]
	DataStreamInterval.intervalMs = 1000;
 8000bbc:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <main+0x13c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f062 0217 	orn	r2, r2, #23
 8000bc4:	705a      	strb	r2, [r3, #1]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f042 0203 	orr.w	r2, r2, #3
 8000bcc:	709a      	strb	r2, [r3, #2]
	DataStreamInterval.syncToData = STD_SYNC_OFF;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <main+0x13c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	72da      	strb	r2, [r3, #11]

	/* For more information see the SBGC32_RequestRealTimeDataCustom function.
	   Total packets length = 20 bytes:
	   ui16 timestampMs						 i16 [3]				i16 [3]			i16 [3] */
	ui32 DataStreamIntervalConfig = RTDCF_STATOR_ROTOR_ANGLE | RTDCF_GYRO_DATA | RTDCF_ACC_DATA;
 8000bd4:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
	memcpy(DataStreamInterval.config, &DataStreamIntervalConfig, sizeof(DataStreamIntervalConfig));
 8000bdc:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <main+0x13c>)
 8000bde:	f8c2 3003 	str.w	r3, [r2, #3]

	/* Adj Vars Setting. SBGC_ADJ_VARS_REF_INFO parameter must be SET_ON  */
	InitAdjVar(&AdjVarGeneral[0], ADJ_VAL_ACC_LIMITER_ROLL);
 8000be2:	2127      	movs	r1, #39	; 0x27
 8000be4:	4819      	ldr	r0, [pc, #100]	; (8000c4c <main+0x140>)
 8000be6:	f004 fc57 	bl	8005498 <InitAdjVar>
	InitAdjVar(&AdjVarGeneral[1], ADJ_VAL_ACC_LIMITER_PITCH);
 8000bea:	2128      	movs	r1, #40	; 0x28
 8000bec:	4818      	ldr	r0, [pc, #96]	; (8000c50 <main+0x144>)
 8000bee:	f004 fc53 	bl	8005498 <InitAdjVar>
	InitAdjVar(&AdjVarGeneral[2], ADJ_VAL_ACC_LIMITER_YAW);
 8000bf2:	2129      	movs	r1, #41	; 0x29
 8000bf4:	4817      	ldr	r0, [pc, #92]	; (8000c54 <main+0x148>)
 8000bf6:	f004 fc4f 	bl	8005498 <InitAdjVar>

	/* SBGC32_Reset(&SBGC32_Device, RF_RESTART_CONFIRMATION, 5000);
	SBGC32_CheckConfirmation(&SBGC32_Device, CMD_RESET);
	DELAY_MS_(5000); */

	PrintBoardParameters(P_CURRENT_PROFILE);
 8000bfa:	20ff      	movs	r0, #255	; 0xff
 8000bfc:	f000 f89c 	bl	8000d38 <PrintBoardParameters>

	SBGC32_ControlConfig(&SBGC32_Device, &ControlConfig);
 8000c00:	490f      	ldr	r1, [pc, #60]	; (8000c40 <main+0x134>)
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <main+0x130>)
 8000c04:	f006 fba6 	bl	8007354 <SBGC32_ControlConfig>
	SBGC32_DemoControl();
 8000c08:	f000 fa68 	bl	80010dc <SBGC32_DemoControl>

	SBGC32_RequestDataStream(&SBGC32_Device, &DataStreamInterval);
 8000c0c:	490e      	ldr	r1, [pc, #56]	; (8000c48 <main+0x13c>)
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <main+0x130>)
 8000c10:	f006 fd32 	bl	8007678 <SBGC32_RequestDataStream>

	  	/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ */
		/*                     Start Worker Cycle                     */
		/* __________________________________________________________ */

		SBGC32_ParseDataStream(&SBGC32_Device, DataStreamBuff, (SBGC_Command_t)DataStreamInterval.cmdID);
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <main+0x13c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	490f      	ldr	r1, [pc, #60]	; (8000c58 <main+0x14c>)
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <main+0x130>)
 8000c1e:	f006 fd6d 	bl	80076fc <SBGC32_ParseDataStream>
		PrintDataStream(DataStreamBuff);
 8000c22:	480d      	ldr	r0, [pc, #52]	; (8000c58 <main+0x14c>)
 8000c24:	f000 fb3a 	bl	800129c <PrintDataStream>

		DELAY_MS_(DataStreamInterval.intervalMs - 1);
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <main+0x13c>)
 8000c2a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	3b01      	subs	r3, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f001 f820 	bl	8001c78 <HAL_Delay>
		SBGC32_ParseDataStream(&SBGC32_Device, DataStreamBuff, (SBGC_Command_t)DataStreamInterval.cmdID);
 8000c38:	e7ec      	b.n	8000c14 <main+0x108>
 8000c3a:	bf00      	nop
 8000c3c:	20000d54 	.word	0x20000d54
 8000c40:	200011a8 	.word	0x200011a8
 8000c44:	20001198 	.word	0x20001198
 8000c48:	2000164c 	.word	0x2000164c
 8000c4c:	200015bc 	.word	0x200015bc
 8000c50:	200015ec 	.word	0x200015ec
 8000c54:	2000161c 	.word	0x2000161c
 8000c58:	200016d8 	.word	0x200016d8

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	; 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2234      	movs	r2, #52	; 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f006 ffa2 	bl	8007bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <SystemClock_Config+0xd4>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a2a      	ldr	r2, [pc, #168]	; (8000d30 <SystemClock_Config+0xd4>)
 8000c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <SystemClock_Config+0xd4>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <SystemClock_Config+0xd8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a25      	ldr	r2, [pc, #148]	; (8000d34 <SystemClock_Config+0xd8>)
 8000c9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b23      	ldr	r3, [pc, #140]	; (8000d34 <SystemClock_Config+0xd8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000cc8:	23d8      	movs	r3, #216	; 0xd8
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f001 fb8f 	bl	8002400 <HAL_RCC_OscConfig>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ce8:	f000 fb6c 	bl	80013c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cec:	f001 fb38 	bl	8002360 <HAL_PWREx_EnableOverDrive>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cf6:	f000 fb65 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d10:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2107      	movs	r1, #7
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fe1f 	bl	800295c <HAL_RCC_ClockConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000d24:	f000 fb4e 	bl	80013c4 <Error_Handler>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3750      	adds	r7, #80	; 0x50
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <PrintBoardParameters>:

/* USER CODE BEGIN 4 */

TxRxStatus_t PrintBoardParameters (Profile_t slot)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
    SBGC32_ReadBoardInfo(&SBGC32_Device, &BoardInfo, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	499a      	ldr	r1, [pc, #616]	; (8000fb0 <PrintBoardParameters+0x278>)
 8000d46:	489b      	ldr	r0, [pc, #620]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000d48:	f006 fdd8 	bl	80078fc <SBGC32_ReadBoardInfo>
    SBGC32_ReadBoardInfo3(&SBGC32_Device, &BoardInfo3);
 8000d4c:	499a      	ldr	r1, [pc, #616]	; (8000fb8 <PrintBoardParameters+0x280>)
 8000d4e:	4899      	ldr	r0, [pc, #612]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000d50:	f006 fe28 	bl	80079a4 <SBGC32_ReadBoardInfo3>

    SBGC32_ReadParams3(&SBGC32_Device, &MainParams3, slot);
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	461a      	mov	r2, r3
 8000d58:	4998      	ldr	r1, [pc, #608]	; (8000fbc <PrintBoardParameters+0x284>)
 8000d5a:	4896      	ldr	r0, [pc, #600]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000d5c:	f006 fb3c 	bl	80073d8 <SBGC32_ReadParams3>
    SBGC32_ReadParamsExt(&SBGC32_Device, &MainParamsExt, slot);
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4996      	ldr	r1, [pc, #600]	; (8000fc0 <PrintBoardParameters+0x288>)
 8000d66:	4893      	ldr	r0, [pc, #588]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000d68:	f006 fb8a 	bl	8007480 <SBGC32_ReadParamsExt>
    SBGC32_ReadParamsExt2(&SBGC32_Device, &MainParamsExt2, slot);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4994      	ldr	r1, [pc, #592]	; (8000fc4 <PrintBoardParameters+0x28c>)
 8000d72:	4890      	ldr	r0, [pc, #576]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000d74:	f006 fbd8 	bl	8007528 <SBGC32_ReadParamsExt2>
    SBGC32_ReadParamsExt3(&SBGC32_Device, &MainParamsExt3, slot);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4992      	ldr	r1, [pc, #584]	; (8000fc8 <PrintBoardParameters+0x290>)
 8000d7e:	488d      	ldr	r0, [pc, #564]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000d80:	f006 fc26 	bl	80075d0 <SBGC32_ReadParamsExt3>

    SBGC32_ReadRealTimeData4(&SBGC32_Device, &RealTimeData);
 8000d84:	4991      	ldr	r1, [pc, #580]	; (8000fcc <PrintBoardParameters+0x294>)
 8000d86:	488b      	ldr	r0, [pc, #556]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000d88:	f006 fd74 	bl	8007874 <SBGC32_ReadRealTimeData4>

    char boardVersionStr [4];
    char firmwareVersionStr [7];

    FormatBoardVersion(&SBGC32_Device, BoardInfo.boardVer, boardVersionStr);
 8000d8c:	4b88      	ldr	r3, [pc, #544]	; (8000fb0 <PrintBoardParameters+0x278>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	f107 0214 	add.w	r2, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4887      	ldr	r0, [pc, #540]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000d98:	f7ff fe44 	bl	8000a24 <FormatBoardVersion>
    FormatFirmwareVersion(&SBGC32_Device, BoardInfo.firmwareVer, firmwareVersionStr);
 8000d9c:	4b84      	ldr	r3, [pc, #528]	; (8000fb0 <PrintBoardParameters+0x278>)
 8000d9e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	f107 020c 	add.w	r2, r7, #12
 8000da8:	4619      	mov	r1, r3
 8000daa:	4882      	ldr	r0, [pc, #520]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000dac:	f7ff fe62 	bl	8000a74 <FormatFirmwareVersion>

    PrintMessage(&SBGC32_Device, TEXT_SIZE_((char*)"Board Version: "));
 8000db0:	220f      	movs	r2, #15
 8000db2:	4987      	ldr	r1, [pc, #540]	; (8000fd0 <PrintBoardParameters+0x298>)
 8000db4:	487f      	ldr	r0, [pc, #508]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000db6:	f006 f887 	bl	8006ec8 <PrintMessage>
    PrintMessage(&SBGC32_Device, TEXT_SIZE_(boardVersionStr));
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fa3e 	bl	8000240 <strlen>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4879      	ldr	r0, [pc, #484]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000dd0:	f006 f87a 	bl	8006ec8 <PrintMessage>
    PrintMessage(&SBGC32_Device, TEXT_SIZE_((char*)" \n"));
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	497f      	ldr	r1, [pc, #508]	; (8000fd4 <PrintBoardParameters+0x29c>)
 8000dd8:	4876      	ldr	r0, [pc, #472]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000dda:	f006 f875 	bl	8006ec8 <PrintMessage>
    PrintMessage(&SBGC32_Device, TEXT_SIZE_((char*)"Firmware Version: "));
 8000dde:	2212      	movs	r2, #18
 8000de0:	497d      	ldr	r1, [pc, #500]	; (8000fd8 <PrintBoardParameters+0x2a0>)
 8000de2:	4874      	ldr	r0, [pc, #464]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000de4:	f006 f870 	bl	8006ec8 <PrintMessage>
    PrintMessage(&SBGC32_Device, TEXT_SIZE_(firmwareVersionStr));
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fa27 	bl	8000240 <strlen>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	486d      	ldr	r0, [pc, #436]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000dfe:	f006 f863 	bl	8006ec8 <PrintMessage>
    PrintMessage(&SBGC32_Device, TEXT_SIZE_((char*)" \n"));
 8000e02:	2202      	movs	r2, #2
 8000e04:	4973      	ldr	r1, [pc, #460]	; (8000fd4 <PrintBoardParameters+0x29c>)
 8000e06:	486b      	ldr	r0, [pc, #428]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e08:	f006 f85e 	bl	8006ec8 <PrintMessage>

    PrintStructElement(&SBGC32_Device, &BoardInfo3.flashSize, "Flash Size =", _UNSIGNED_CHAR_);
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	4a73      	ldr	r2, [pc, #460]	; (8000fdc <PrintBoardParameters+0x2a4>)
 8000e10:	4973      	ldr	r1, [pc, #460]	; (8000fe0 <PrintBoardParameters+0x2a8>)
 8000e12:	4868      	ldr	r0, [pc, #416]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e14:	f006 f86e 	bl	8006ef4 <PrintStructElement>

    PrintStructElement(&SBGC32_Device, &MainParams3.profileID + 1, "Current profile #", _UNSIGNED_CHAR_);  // Note: 1 --> 5
 8000e18:	4972      	ldr	r1, [pc, #456]	; (8000fe4 <PrintBoardParameters+0x2ac>)
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	4a72      	ldr	r2, [pc, #456]	; (8000fe8 <PrintBoardParameters+0x2b0>)
 8000e1e:	4865      	ldr	r0, [pc, #404]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e20:	f006 f868 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[ROLL].p, "Roll P =", _UNSIGNED_CHAR_);
 8000e24:	2301      	movs	r3, #1
 8000e26:	4a71      	ldr	r2, [pc, #452]	; (8000fec <PrintBoardParameters+0x2b4>)
 8000e28:	496e      	ldr	r1, [pc, #440]	; (8000fe4 <PrintBoardParameters+0x2ac>)
 8000e2a:	4862      	ldr	r0, [pc, #392]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e2c:	f006 f862 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[ROLL].i, "Roll I =", _UNSIGNED_CHAR_);
 8000e30:	2301      	movs	r3, #1
 8000e32:	4a6f      	ldr	r2, [pc, #444]	; (8000ff0 <PrintBoardParameters+0x2b8>)
 8000e34:	496f      	ldr	r1, [pc, #444]	; (8000ff4 <PrintBoardParameters+0x2bc>)
 8000e36:	485f      	ldr	r0, [pc, #380]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e38:	f006 f85c 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[ROLL].d, "Roll D =", _UNSIGNED_CHAR_);
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	4a6e      	ldr	r2, [pc, #440]	; (8000ff8 <PrintBoardParameters+0x2c0>)
 8000e40:	496e      	ldr	r1, [pc, #440]	; (8000ffc <PrintBoardParameters+0x2c4>)
 8000e42:	485c      	ldr	r0, [pc, #368]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e44:	f006 f856 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[PITCH].p, "Pitch P =", _UNSIGNED_CHAR_);
 8000e48:	2301      	movs	r3, #1
 8000e4a:	4a6d      	ldr	r2, [pc, #436]	; (8001000 <PrintBoardParameters+0x2c8>)
 8000e4c:	496d      	ldr	r1, [pc, #436]	; (8001004 <PrintBoardParameters+0x2cc>)
 8000e4e:	4859      	ldr	r0, [pc, #356]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e50:	f006 f850 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[PITCH].i, "Pitch I =", _UNSIGNED_CHAR_);
 8000e54:	2301      	movs	r3, #1
 8000e56:	4a6c      	ldr	r2, [pc, #432]	; (8001008 <PrintBoardParameters+0x2d0>)
 8000e58:	496c      	ldr	r1, [pc, #432]	; (800100c <PrintBoardParameters+0x2d4>)
 8000e5a:	4856      	ldr	r0, [pc, #344]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e5c:	f006 f84a 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[PITCH].d, "Pitch D =", _UNSIGNED_CHAR_);
 8000e60:	2301      	movs	r3, #1
 8000e62:	4a6b      	ldr	r2, [pc, #428]	; (8001010 <PrintBoardParameters+0x2d8>)
 8000e64:	496b      	ldr	r1, [pc, #428]	; (8001014 <PrintBoardParameters+0x2dc>)
 8000e66:	4853      	ldr	r0, [pc, #332]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e68:	f006 f844 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[YAW].p, "Yaw P =", _UNSIGNED_CHAR_);
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	4a6a      	ldr	r2, [pc, #424]	; (8001018 <PrintBoardParameters+0x2e0>)
 8000e70:	496a      	ldr	r1, [pc, #424]	; (800101c <PrintBoardParameters+0x2e4>)
 8000e72:	4850      	ldr	r0, [pc, #320]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e74:	f006 f83e 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[YAW].i, "Yaw I =", _UNSIGNED_CHAR_);
 8000e78:	2301      	movs	r3, #1
 8000e7a:	4a69      	ldr	r2, [pc, #420]	; (8001020 <PrintBoardParameters+0x2e8>)
 8000e7c:	4969      	ldr	r1, [pc, #420]	; (8001024 <PrintBoardParameters+0x2ec>)
 8000e7e:	484d      	ldr	r0, [pc, #308]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e80:	f006 f838 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[YAW].d, "Yaw D =", _UNSIGNED_CHAR_);
 8000e84:	2301      	movs	r3, #1
 8000e86:	4a68      	ldr	r2, [pc, #416]	; (8001028 <PrintBoardParameters+0x2f0>)
 8000e88:	4968      	ldr	r1, [pc, #416]	; (800102c <PrintBoardParameters+0x2f4>)
 8000e8a:	484a      	ldr	r0, [pc, #296]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e8c:	f006 f832 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AccLimiterAll, "Acc Limiter All = ", _UNSIGNED_CHAR_);
 8000e90:	2301      	movs	r3, #1
 8000e92:	4a67      	ldr	r2, [pc, #412]	; (8001030 <PrintBoardParameters+0x2f8>)
 8000e94:	4967      	ldr	r1, [pc, #412]	; (8001034 <PrintBoardParameters+0x2fc>)
 8000e96:	4847      	ldr	r0, [pc, #284]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000e98:	f006 f82c 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisRC_MP3[ROLL].RC_MaxAngle, "RC Max Angle =", _SIGNED_SHORT_);
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	4a66      	ldr	r2, [pc, #408]	; (8001038 <PrintBoardParameters+0x300>)
 8000ea0:	4966      	ldr	r1, [pc, #408]	; (800103c <PrintBoardParameters+0x304>)
 8000ea2:	4844      	ldr	r0, [pc, #272]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000ea4:	f006 f826 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.AxisRC_MP3[YAW].RC_MinAngle, "RC Min Angle =", _SIGNED_SHORT_);
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	4a65      	ldr	r2, [pc, #404]	; (8001040 <PrintBoardParameters+0x308>)
 8000eac:	4965      	ldr	r1, [pc, #404]	; (8001044 <PrintBoardParameters+0x30c>)
 8000eae:	4841      	ldr	r0, [pc, #260]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000eb0:	f006 f820 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapROLL, "RC Map Roll =", _UNSIGNED_CHAR_);
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	4a64      	ldr	r2, [pc, #400]	; (8001048 <PrintBoardParameters+0x310>)
 8000eb8:	4964      	ldr	r1, [pc, #400]	; (800104c <PrintBoardParameters+0x314>)
 8000eba:	483e      	ldr	r0, [pc, #248]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000ebc:	f006 f81a 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapPITCH, "RC Map Pitch =", _UNSIGNED_CHAR_);
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	4a63      	ldr	r2, [pc, #396]	; (8001050 <PrintBoardParameters+0x318>)
 8000ec4:	4963      	ldr	r1, [pc, #396]	; (8001054 <PrintBoardParameters+0x31c>)
 8000ec6:	483b      	ldr	r0, [pc, #236]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000ec8:	f006 f814 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapYAW, "RC Map Yaw =", _UNSIGNED_CHAR_);
 8000ecc:	2301      	movs	r3, #1
 8000ece:	4a62      	ldr	r2, [pc, #392]	; (8001058 <PrintBoardParameters+0x320>)
 8000ed0:	4962      	ldr	r1, [pc, #392]	; (800105c <PrintBoardParameters+0x324>)
 8000ed2:	4838      	ldr	r0, [pc, #224]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000ed4:	f006 f80e 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapCmd, "RC Map Cmd =", _UNSIGNED_CHAR_);
 8000ed8:	2301      	movs	r3, #1
 8000eda:	4a61      	ldr	r2, [pc, #388]	; (8001060 <PrintBoardParameters+0x328>)
 8000edc:	4961      	ldr	r1, [pc, #388]	; (8001064 <PrintBoardParameters+0x32c>)
 8000ede:	4835      	ldr	r0, [pc, #212]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000ee0:	f006 f808 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapFC_ROLL, "RC Map FC Roll =", _UNSIGNED_CHAR_);
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	4a60      	ldr	r2, [pc, #384]	; (8001068 <PrintBoardParameters+0x330>)
 8000ee8:	4960      	ldr	r1, [pc, #384]	; (800106c <PrintBoardParameters+0x334>)
 8000eea:	4832      	ldr	r0, [pc, #200]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000eec:	f006 f802 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapFC_PITCH, "RC Map FC Pitch =", _UNSIGNED_CHAR_);
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	4a5f      	ldr	r2, [pc, #380]	; (8001070 <PrintBoardParameters+0x338>)
 8000ef4:	495f      	ldr	r1, [pc, #380]	; (8001074 <PrintBoardParameters+0x33c>)
 8000ef6:	482f      	ldr	r0, [pc, #188]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000ef8:	f005 fffc 	bl	8006ef4 <PrintStructElement>

    PrintStructElement(&SBGC32_Device, &MainParamsExt.LPF_Freq[ROLL], "LPF Frequency Roll =", _UNSIGNED_SHORT_);
 8000efc:	2303      	movs	r3, #3
 8000efe:	4a5e      	ldr	r2, [pc, #376]	; (8001078 <PrintBoardParameters+0x340>)
 8000f00:	495e      	ldr	r1, [pc, #376]	; (800107c <PrintBoardParameters+0x344>)
 8000f02:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f04:	f005 fff6 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParamsExt.LPF_Freq[PITCH], "LPF Frequency Pitch =", _UNSIGNED_SHORT_);
 8000f08:	2303      	movs	r3, #3
 8000f0a:	4a5d      	ldr	r2, [pc, #372]	; (8001080 <PrintBoardParameters+0x348>)
 8000f0c:	495d      	ldr	r1, [pc, #372]	; (8001084 <PrintBoardParameters+0x34c>)
 8000f0e:	4829      	ldr	r0, [pc, #164]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f10:	f005 fff0 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParamsExt.LPF_Freq[YAW], "LPF Frequency Yaw =", _UNSIGNED_SHORT_);
 8000f14:	2303      	movs	r3, #3
 8000f16:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <PrintBoardParameters+0x350>)
 8000f18:	495c      	ldr	r1, [pc, #368]	; (800108c <PrintBoardParameters+0x354>)
 8000f1a:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f1c:	f005 ffea 	bl	8006ef4 <PrintStructElement>

    PrintStructElement(&SBGC32_Device, &MainParamsExt2.frameIMU_LPF_Freq, "Frame IMU LPF Freq =", _UNSIGNED_CHAR_);
 8000f20:	2301      	movs	r3, #1
 8000f22:	4a5b      	ldr	r2, [pc, #364]	; (8001090 <PrintBoardParameters+0x358>)
 8000f24:	495b      	ldr	r1, [pc, #364]	; (8001094 <PrintBoardParameters+0x35c>)
 8000f26:	4823      	ldr	r0, [pc, #140]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f28:	f005 ffe4 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &MainParamsExt2.timelapseTime, "Timelapse Time =", _UNSIGNED_SHORT_);
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	4a5a      	ldr	r2, [pc, #360]	; (8001098 <PrintBoardParameters+0x360>)
 8000f30:	495a      	ldr	r1, [pc, #360]	; (800109c <PrintBoardParameters+0x364>)
 8000f32:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f34:	f005 ffde 	bl	8006ef4 <PrintStructElement>

    PrintStructElement(&SBGC32_Device, &MainParamsExt3.motorStartupDelay, "Motor Startup Delay =", _UNSIGNED_SHORT_);
 8000f38:	2303      	movs	r3, #3
 8000f3a:	4a59      	ldr	r2, [pc, #356]	; (80010a0 <PrintBoardParameters+0x368>)
 8000f3c:	4959      	ldr	r1, [pc, #356]	; (80010a4 <PrintBoardParameters+0x36c>)
 8000f3e:	481d      	ldr	r0, [pc, #116]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f40:	f005 ffd8 	bl	8006ef4 <PrintStructElement>

    PrintMessage(&SBGC32_Device, TEXT_SIZE_((char*)" \n"));
 8000f44:	2202      	movs	r2, #2
 8000f46:	4923      	ldr	r1, [pc, #140]	; (8000fd4 <PrintBoardParameters+0x29c>)
 8000f48:	481a      	ldr	r0, [pc, #104]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f4a:	f005 ffbd 	bl	8006ec8 <PrintMessage>

	PrintStructElement(&SBGC32_Device, &RealTimeData.AxisRTD[ROLL].ACC_Data, "ACC Roll =", _SIGNED_SHORT_);
 8000f4e:	2304      	movs	r3, #4
 8000f50:	4a55      	ldr	r2, [pc, #340]	; (80010a8 <PrintBoardParameters+0x370>)
 8000f52:	491e      	ldr	r1, [pc, #120]	; (8000fcc <PrintBoardParameters+0x294>)
 8000f54:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f56:	f005 ffcd 	bl	8006ef4 <PrintStructElement>
	PrintStructElement(&SBGC32_Device, &RealTimeData.AxisRTD[PITCH].ACC_Data, "ACC Pitch =", _SIGNED_SHORT_);
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	4a53      	ldr	r2, [pc, #332]	; (80010ac <PrintBoardParameters+0x374>)
 8000f5e:	4954      	ldr	r1, [pc, #336]	; (80010b0 <PrintBoardParameters+0x378>)
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f62:	f005 ffc7 	bl	8006ef4 <PrintStructElement>
	PrintStructElement(&SBGC32_Device, &RealTimeData.AxisRTD[YAW].ACC_Data, "ACC Yaw =", _SIGNED_SHORT_);
 8000f66:	2304      	movs	r3, #4
 8000f68:	4a52      	ldr	r2, [pc, #328]	; (80010b4 <PrintBoardParameters+0x37c>)
 8000f6a:	4953      	ldr	r1, [pc, #332]	; (80010b8 <PrintBoardParameters+0x380>)
 8000f6c:	4811      	ldr	r0, [pc, #68]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f6e:	f005 ffc1 	bl	8006ef4 <PrintStructElement>

    PrintStructElement(&SBGC32_Device, &RealTimeData.frameCamAngle[ROLL], "Roll Current Angle =", _SIGNED_SHORT_);
 8000f72:	2304      	movs	r3, #4
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <PrintBoardParameters+0x384>)
 8000f76:	4952      	ldr	r1, [pc, #328]	; (80010c0 <PrintBoardParameters+0x388>)
 8000f78:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f7a:	f005 ffbb 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &RealTimeData.frameCamAngle[PITCH], "Pitch Current Angle =", _SIGNED_SHORT_);
 8000f7e:	2304      	movs	r3, #4
 8000f80:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <PrintBoardParameters+0x38c>)
 8000f82:	4951      	ldr	r1, [pc, #324]	; (80010c8 <PrintBoardParameters+0x390>)
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f86:	f005 ffb5 	bl	8006ef4 <PrintStructElement>
    PrintStructElement(&SBGC32_Device, &RealTimeData.frameCamAngle[YAW], "Yaw Current Angle =", _SIGNED_SHORT_);
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <PrintBoardParameters+0x394>)
 8000f8e:	4950      	ldr	r1, [pc, #320]	; (80010d0 <PrintBoardParameters+0x398>)
 8000f90:	4808      	ldr	r0, [pc, #32]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f92:	f005 ffaf 	bl	8006ef4 <PrintStructElement>

    PrintStructElement(&SBGC32_Device, &RealTimeData.IMU_Temperature, "IMU Temperature =", _SIGNED_CHAR_);
 8000f96:	2302      	movs	r3, #2
 8000f98:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <PrintBoardParameters+0x39c>)
 8000f9a:	494f      	ldr	r1, [pc, #316]	; (80010d8 <PrintBoardParameters+0x3a0>)
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000f9e:	f005 ffa9 	bl	8006ef4 <PrintStructElement>

    return SBGC32_Device._parserCurrentStatus;
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <PrintBoardParameters+0x27c>)
 8000fa4:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200011d4 	.word	0x200011d4
 8000fb4:	20000d54 	.word	0x20000d54
 8000fb8:	200011e8 	.word	0x200011e8
 8000fbc:	20001230 	.word	0x20001230
 8000fc0:	200012b8 	.word	0x200012b8
 8000fc4:	20001320 	.word	0x20001320
 8000fc8:	200013b8 	.word	0x200013b8
 8000fcc:	20001540 	.word	0x20001540
 8000fd0:	0800c28c 	.word	0x0800c28c
 8000fd4:	0800c29c 	.word	0x0800c29c
 8000fd8:	0800c2a0 	.word	0x0800c2a0
 8000fdc:	0800c2b4 	.word	0x0800c2b4
 8000fe0:	2000120d 	.word	0x2000120d
 8000fe4:	20001231 	.word	0x20001231
 8000fe8:	0800c2c4 	.word	0x0800c2c4
 8000fec:	0800c2d8 	.word	0x0800c2d8
 8000ff0:	0800c2e4 	.word	0x0800c2e4
 8000ff4:	20001232 	.word	0x20001232
 8000ff8:	0800c2f0 	.word	0x0800c2f0
 8000ffc:	20001233 	.word	0x20001233
 8001000:	0800c2fc 	.word	0x0800c2fc
 8001004:	20001237 	.word	0x20001237
 8001008:	0800c308 	.word	0x0800c308
 800100c:	20001238 	.word	0x20001238
 8001010:	0800c314 	.word	0x0800c314
 8001014:	20001239 	.word	0x20001239
 8001018:	0800c320 	.word	0x0800c320
 800101c:	2000123d 	.word	0x2000123d
 8001020:	0800c328 	.word	0x0800c328
 8001024:	2000123e 	.word	0x2000123e
 8001028:	0800c330 	.word	0x0800c330
 800102c:	2000123f 	.word	0x2000123f
 8001030:	0800c338 	.word	0x0800c338
 8001034:	20001243 	.word	0x20001243
 8001038:	0800c34c 	.word	0x0800c34c
 800103c:	20001248 	.word	0x20001248
 8001040:	0800c35c 	.word	0x0800c35c
 8001044:	20001256 	.word	0x20001256
 8001048:	0800c36c 	.word	0x0800c36c
 800104c:	20001268 	.word	0x20001268
 8001050:	0800c37c 	.word	0x0800c37c
 8001054:	20001269 	.word	0x20001269
 8001058:	0800c38c 	.word	0x0800c38c
 800105c:	2000126a 	.word	0x2000126a
 8001060:	0800c39c 	.word	0x0800c39c
 8001064:	2000126b 	.word	0x2000126b
 8001068:	0800c3ac 	.word	0x0800c3ac
 800106c:	2000126c 	.word	0x2000126c
 8001070:	0800c3c0 	.word	0x0800c3c0
 8001074:	2000126d 	.word	0x2000126d
 8001078:	0800c3d4 	.word	0x0800c3d4
 800107c:	200012cb 	.word	0x200012cb
 8001080:	0800c3ec 	.word	0x0800c3ec
 8001084:	200012cd 	.word	0x200012cd
 8001088:	0800c404 	.word	0x0800c404
 800108c:	200012cf 	.word	0x200012cf
 8001090:	0800c418 	.word	0x0800c418
 8001094:	2000133d 	.word	0x2000133d
 8001098:	0800c430 	.word	0x0800c430
 800109c:	20001356 	.word	0x20001356
 80010a0:	0800c444 	.word	0x0800c444
 80010a4:	20001407 	.word	0x20001407
 80010a8:	0800c45c 	.word	0x0800c45c
 80010ac:	0800c468 	.word	0x0800c468
 80010b0:	20001544 	.word	0x20001544
 80010b4:	0800c474 	.word	0x0800c474
 80010b8:	20001548 	.word	0x20001548
 80010bc:	0800c480 	.word	0x0800c480
 80010c0:	2000157f 	.word	0x2000157f
 80010c4:	0800c498 	.word	0x0800c498
 80010c8:	20001581 	.word	0x20001581
 80010cc:	0800c4b0 	.word	0x0800c4b0
 80010d0:	20001583 	.word	0x20001583
 80010d4:	0800c4c4 	.word	0x0800c4c4
 80010d8:	20001594 	.word	0x20001594

080010dc <SBGC32_DemoControl>:


TxRxStatus_t SBGC32_DemoControl (void)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
	/* Getting adjvars values */
	/* Note: AdjVarGeneral.ID fields are already filled */
	SBGC32_GetAdjVarValues(&SBGC32_Device, AdjVarGeneral, countof_(AdjVarGeneral));
 80010e2:	2203      	movs	r2, #3
 80010e4:	4969      	ldr	r1, [pc, #420]	; (800128c <SBGC32_DemoControl+0x1b0>)
 80010e6:	486a      	ldr	r0, [pc, #424]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 80010e8:	f004 fb12 	bl	8005710 <SBGC32_GetAdjVarValues>

	/* Run the Demonstration Cycle */
	for (ui8 i = 0; i < 4; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	e0c1      	b.n	8001276 <SBGC32_DemoControl+0x19a>
	{
		/* Printing. SBGC_ADJ_VARS_NAMES parameter must be SET_ON */
		for (ui8 k = 0; k < countof_(AdjVarGeneral); k++)
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]
 80010f6:	e01f      	b.n	8001138 <SBGC32_DemoControl+0x5c>
			PrintStructElement(&SBGC32_Device, &AdjVarGeneral[k].value, AdjVarGeneral[k].name, AdjVarGeneral[k].varType);
 80010f8:	79ba      	ldrb	r2, [r7, #6]
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	3328      	adds	r3, #40	; 0x28
 8001104:	4a61      	ldr	r2, [pc, #388]	; (800128c <SBGC32_DemoControl+0x1b0>)
 8001106:	1899      	adds	r1, r3, r2
 8001108:	79ba      	ldrb	r2, [r7, #6]
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	011b      	lsls	r3, r3, #4
 8001112:	4a5e      	ldr	r2, [pc, #376]	; (800128c <SBGC32_DemoControl+0x1b0>)
 8001114:	4413      	add	r3, r2
 8001116:	1c58      	adds	r0, r3, #1
 8001118:	79ba      	ldrb	r2, [r7, #6]
 800111a:	4c5c      	ldr	r4, [pc, #368]	; (800128c <SBGC32_DemoControl+0x1b0>)
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	4423      	add	r3, r4
 8001126:	3324      	adds	r3, #36	; 0x24
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4602      	mov	r2, r0
 800112c:	4858      	ldr	r0, [pc, #352]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 800112e:	f005 fee1 	bl	8006ef4 <PrintStructElement>
		for (ui8 k = 0; k < countof_(AdjVarGeneral); k++)
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	3301      	adds	r3, #1
 8001136:	71bb      	strb	r3, [r7, #6]
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d9dc      	bls.n	80010f8 <SBGC32_DemoControl+0x1c>

		Control.AxisC[YAW].angle = DEGREE_TO_ANGLE_INT(50);
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 8001140:	2200      	movs	r2, #0
 8001142:	f062 021c 	orn	r2, r2, #28
 8001146:	735a      	strb	r2, [r3, #13]
 8001148:	2200      	movs	r2, #0
 800114a:	f042 0208 	orr.w	r2, r2, #8
 800114e:	739a      	strb	r2, [r3, #14]
		Control.AxisC[PITCH].angle = DEGREE_TO_ANGLE_INT(-20);
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 8001152:	2200      	movs	r2, #0
 8001154:	f042 0272 	orr.w	r2, r2, #114	; 0x72
 8001158:	725a      	strb	r2, [r3, #9]
 800115a:	2200      	movs	r2, #0
 800115c:	f062 0203 	orn	r2, r2, #3
 8001160:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC32_Device, &Control);
 8001162:	494c      	ldr	r1, [pc, #304]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 8001164:	484a      	ldr	r0, [pc, #296]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 8001166:	f006 f8c1 	bl	80072ec <SBGC32_Control>
		DELAY_MS_(5000);
 800116a:	f241 3088 	movw	r0, #5000	; 0x1388
 800116e:	f000 fd83 	bl	8001c78 <HAL_Delay>

		Control.AxisC[PITCH].angle = DEGREE_TO_ANGLE_INT(20);
 8001172:	4b48      	ldr	r3, [pc, #288]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 8001174:	2200      	movs	r2, #0
 8001176:	f062 0271 	orn	r2, r2, #113	; 0x71
 800117a:	725a      	strb	r2, [r3, #9]
 800117c:	2200      	movs	r2, #0
 800117e:	f042 0203 	orr.w	r2, r2, #3
 8001182:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC32_Device, &Control);
 8001184:	4943      	ldr	r1, [pc, #268]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 8001186:	4842      	ldr	r0, [pc, #264]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 8001188:	f006 f8b0 	bl	80072ec <SBGC32_Control>
		DELAY_MS_(5000);
 800118c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001190:	f000 fd72 	bl	8001c78 <HAL_Delay>

		Control.AxisC[YAW].angle = DEGREE_TO_ANGLE_INT(-50);
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 8001196:	2200      	movs	r2, #0
 8001198:	f042 021d 	orr.w	r2, r2, #29
 800119c:	735a      	strb	r2, [r3, #13]
 800119e:	2200      	movs	r2, #0
 80011a0:	f062 0208 	orn	r2, r2, #8
 80011a4:	739a      	strb	r2, [r3, #14]
		SBGC32_Control(&SBGC32_Device, &Control);
 80011a6:	493b      	ldr	r1, [pc, #236]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 80011a8:	4839      	ldr	r0, [pc, #228]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 80011aa:	f006 f89f 	bl	80072ec <SBGC32_Control>
		DELAY_MS_(5000);
 80011ae:	f241 3088 	movw	r0, #5000	; 0x1388
 80011b2:	f000 fd61 	bl	8001c78 <HAL_Delay>

		Control.AxisC[PITCH].angle = DEGREE_TO_ANGLE_INT(-20);
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f042 0272 	orr.w	r2, r2, #114	; 0x72
 80011be:	725a      	strb	r2, [r3, #9]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f062 0203 	orn	r2, r2, #3
 80011c6:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC32_Device, &Control);
 80011c8:	4932      	ldr	r1, [pc, #200]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 80011ca:	4831      	ldr	r0, [pc, #196]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 80011cc:	f006 f88e 	bl	80072ec <SBGC32_Control>
		DELAY_MS_(5000);
 80011d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80011d4:	f000 fd50 	bl	8001c78 <HAL_Delay>

		Control.AxisC[YAW].angle = DEGREE_TO_ANGLE_INT(0);
 80011d8:	4b2e      	ldr	r3, [pc, #184]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	735a      	strb	r2, [r3, #13]
 80011de:	2200      	movs	r2, #0
 80011e0:	739a      	strb	r2, [r3, #14]
		Control.AxisC[PITCH].angle = DEGREE_TO_ANGLE_INT(0);
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	725a      	strb	r2, [r3, #9]
 80011e8:	2200      	movs	r2, #0
 80011ea:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC32_Device, &Control);
 80011ec:	4929      	ldr	r1, [pc, #164]	; (8001294 <SBGC32_DemoControl+0x1b8>)
 80011ee:	4828      	ldr	r0, [pc, #160]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 80011f0:	f006 f87c 	bl	80072ec <SBGC32_Control>
		DELAY_MS_(5000);
 80011f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80011f8:	f000 fd3e 	bl	8001c78 <HAL_Delay>

		BeeperSettings.mode = BM_BEEPER_MODE_COMPLETE;
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <SBGC32_DemoControl+0x1bc>)
 80011fe:	2220      	movs	r2, #32
 8001200:	801a      	strh	r2, [r3, #0]
		SBGC32_PlayBeeper(&SBGC32_Device, &BeeperSettings);
 8001202:	4925      	ldr	r1, [pc, #148]	; (8001298 <SBGC32_DemoControl+0x1bc>)
 8001204:	4822      	ldr	r0, [pc, #136]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 8001206:	f006 fc11 	bl	8007a2c <SBGC32_PlayBeeper>

		/* Adjustable Variables Re-Setting */
		for (ui8 k = 0; k < countof_(AdjVarGeneral); k++)
 800120a:	2300      	movs	r3, #0
 800120c:	717b      	strb	r3, [r7, #5]
 800120e:	e027      	b.n	8001260 <SBGC32_DemoControl+0x184>
			/* Toggle Min : Max adjvars contrast */
			EditAdjVarValue(&AdjVarGeneral[k], ((i % 2 == 0) ? AdjVarGeneral[k].maxValue : AdjVarGeneral[k].minValue));
 8001210:	797a      	ldrb	r2, [r7, #5]
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4a1c      	ldr	r2, [pc, #112]	; (800128c <SBGC32_DemoControl+0x1b0>)
 800121c:	1898      	adds	r0, r3, r2
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10a      	bne.n	8001240 <SBGC32_DemoControl+0x164>
 800122a:	797a      	ldrb	r2, [r7, #5]
 800122c:	4917      	ldr	r1, [pc, #92]	; (800128c <SBGC32_DemoControl+0x1b0>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	440b      	add	r3, r1
 8001238:	3322      	adds	r3, #34	; 0x22
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	e009      	b.n	8001254 <SBGC32_DemoControl+0x178>
 8001240:	797a      	ldrb	r2, [r7, #5]
 8001242:	4912      	ldr	r1, [pc, #72]	; (800128c <SBGC32_DemoControl+0x1b0>)
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	440b      	add	r3, r1
 800124e:	3320      	adds	r3, #32
 8001250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001254:	4619      	mov	r1, r3
 8001256:	f004 f961 	bl	800551c <EditAdjVarValue>
		for (ui8 k = 0; k < countof_(AdjVarGeneral); k++)
 800125a:	797b      	ldrb	r3, [r7, #5]
 800125c:	3301      	adds	r3, #1
 800125e:	717b      	strb	r3, [r7, #5]
 8001260:	797b      	ldrb	r3, [r7, #5]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d9d4      	bls.n	8001210 <SBGC32_DemoControl+0x134>

		SBGC32_SetAdjVarValues(&SBGC32_Device, AdjVarGeneral, countof_(AdjVarGeneral));
 8001266:	2203      	movs	r2, #3
 8001268:	4908      	ldr	r1, [pc, #32]	; (800128c <SBGC32_DemoControl+0x1b0>)
 800126a:	4809      	ldr	r0, [pc, #36]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 800126c:	f004 f986 	bl	800557c <SBGC32_SetAdjVarValues>
	for (ui8 i = 0; i < 4; i++)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	3301      	adds	r3, #1
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b03      	cmp	r3, #3
 800127a:	f67f af3a 	bls.w	80010f2 <SBGC32_DemoControl+0x16>
			if (AdjVarGeneral[i].saveFlag != SAVED)
				AdjVarGeneral[i].saveFlag = SAVED; */

	/* or SBGC32_SaveAdjVarsToEEPROM(&SBGC32_Device, AdjVarGeneral, countof_(AdjVarGeneral)); */

    return SBGC32_Device._parserCurrentStatus;
 800127e:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SBGC32_DemoControl+0x1b4>)
 8001280:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	200015bc 	.word	0x200015bc
 8001290:	20000d54 	.word	0x20000d54
 8001294:	20001198 	.word	0x20001198
 8001298:	20001664 	.word	0x20001664

0800129c <PrintDataStream>:


void PrintDataStream (ui8 *pBuff)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	/* Preparing */
	ui8 BuffRPx = 2;  // ui16 timestampMs offset
 80012a4:	2302      	movs	r3, #2
 80012a6:	73fb      	strb	r3, [r7, #15]

	BuffRPx += ConvertWithPM(RealTimeDataCustom.frameCamAngle, &pBuff[BuffRPx],
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	18d1      	adds	r1, r2, r3
 80012ae:	2301      	movs	r3, #1
 80012b0:	2206      	movs	r2, #6
 80012b2:	4830      	ldr	r0, [pc, #192]	; (8001374 <PrintDataStream+0xd8>)
 80012b4:	f004 ffda 	bl	800626c <ConvertWithPM>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	4413      	add	r3, r2
 80012c0:	73fb      	strb	r3, [r7, #15]
							sizeof(RealTimeDataCustom.targetAngles), PM_DEFAULT_16BIT);
	BuffRPx += ConvertWithPM(RealTimeDataCustom.gyroData, &pBuff[BuffRPx],
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	18d1      	adds	r1, r2, r3
 80012c8:	2301      	movs	r3, #1
 80012ca:	2206      	movs	r2, #6
 80012cc:	482a      	ldr	r0, [pc, #168]	; (8001378 <PrintDataStream+0xdc>)
 80012ce:	f004 ffcd 	bl	800626c <ConvertWithPM>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	4413      	add	r3, r2
 80012da:	73fb      	strb	r3, [r7, #15]
							sizeof(RealTimeDataCustom.gyroData), PM_DEFAULT_16BIT);
	BuffRPx += ConvertWithPM(RealTimeDataCustom.ACC_Data, &pBuff[BuffRPx],
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	18d1      	adds	r1, r2, r3
 80012e2:	2301      	movs	r3, #1
 80012e4:	2206      	movs	r2, #6
 80012e6:	4825      	ldr	r0, [pc, #148]	; (800137c <PrintDataStream+0xe0>)
 80012e8:	f004 ffc0 	bl	800626c <ConvertWithPM>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	4413      	add	r3, r2
 80012f4:	73fb      	strb	r3, [r7, #15]
							sizeof(RealTimeDataCustom.ACC_Data), PM_DEFAULT_16BIT);

	/* Printing */
	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.frameCamAngle[ROLL], "Frame Camera Angle Roll =", _SIGNED_SHORT_);
 80012f6:	2304      	movs	r3, #4
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <PrintDataStream+0xe4>)
 80012fa:	491e      	ldr	r1, [pc, #120]	; (8001374 <PrintDataStream+0xd8>)
 80012fc:	4821      	ldr	r0, [pc, #132]	; (8001384 <PrintDataStream+0xe8>)
 80012fe:	f005 fdf9 	bl	8006ef4 <PrintStructElement>
	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.frameCamAngle[PITCH], "Frame Camera Angle Pitch =", _SIGNED_SHORT_);
 8001302:	2304      	movs	r3, #4
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <PrintDataStream+0xec>)
 8001306:	4921      	ldr	r1, [pc, #132]	; (800138c <PrintDataStream+0xf0>)
 8001308:	481e      	ldr	r0, [pc, #120]	; (8001384 <PrintDataStream+0xe8>)
 800130a:	f005 fdf3 	bl	8006ef4 <PrintStructElement>
	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.frameCamAngle[YAW], "Frame Camera Angle Yaw =", _SIGNED_SHORT_);
 800130e:	2304      	movs	r3, #4
 8001310:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <PrintDataStream+0xf4>)
 8001312:	4920      	ldr	r1, [pc, #128]	; (8001394 <PrintDataStream+0xf8>)
 8001314:	481b      	ldr	r0, [pc, #108]	; (8001384 <PrintDataStream+0xe8>)
 8001316:	f005 fded 	bl	8006ef4 <PrintStructElement>

	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.gyroData[ROLL], "Gyro Roll =", _SIGNED_SHORT_);
 800131a:	2304      	movs	r3, #4
 800131c:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <PrintDataStream+0xfc>)
 800131e:	4916      	ldr	r1, [pc, #88]	; (8001378 <PrintDataStream+0xdc>)
 8001320:	4818      	ldr	r0, [pc, #96]	; (8001384 <PrintDataStream+0xe8>)
 8001322:	f005 fde7 	bl	8006ef4 <PrintStructElement>
	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.gyroData[PITCH], "Gyro Pitch =", _SIGNED_SHORT_);
 8001326:	2304      	movs	r3, #4
 8001328:	4a1c      	ldr	r2, [pc, #112]	; (800139c <PrintDataStream+0x100>)
 800132a:	491d      	ldr	r1, [pc, #116]	; (80013a0 <PrintDataStream+0x104>)
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <PrintDataStream+0xe8>)
 800132e:	f005 fde1 	bl	8006ef4 <PrintStructElement>
	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.gyroData[YAW], "Gyro Yaw =", _SIGNED_SHORT_);
 8001332:	2304      	movs	r3, #4
 8001334:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <PrintDataStream+0x108>)
 8001336:	491c      	ldr	r1, [pc, #112]	; (80013a8 <PrintDataStream+0x10c>)
 8001338:	4812      	ldr	r0, [pc, #72]	; (8001384 <PrintDataStream+0xe8>)
 800133a:	f005 fddb 	bl	8006ef4 <PrintStructElement>

	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.ACC_Data[ROLL], "ACC Roll =", _SIGNED_SHORT_);
 800133e:	2304      	movs	r3, #4
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <PrintDataStream+0x110>)
 8001342:	490e      	ldr	r1, [pc, #56]	; (800137c <PrintDataStream+0xe0>)
 8001344:	480f      	ldr	r0, [pc, #60]	; (8001384 <PrintDataStream+0xe8>)
 8001346:	f005 fdd5 	bl	8006ef4 <PrintStructElement>
	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.ACC_Data[PITCH], "ACC Pitch =", _SIGNED_SHORT_);
 800134a:	2304      	movs	r3, #4
 800134c:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <PrintDataStream+0x114>)
 800134e:	4919      	ldr	r1, [pc, #100]	; (80013b4 <PrintDataStream+0x118>)
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <PrintDataStream+0xe8>)
 8001352:	f005 fdcf 	bl	8006ef4 <PrintStructElement>
	PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.ACC_Data[YAW], "ACC Yaw =", _SIGNED_SHORT_);
 8001356:	2304      	movs	r3, #4
 8001358:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <PrintDataStream+0x11c>)
 800135a:	4918      	ldr	r1, [pc, #96]	; (80013bc <PrintDataStream+0x120>)
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <PrintDataStream+0xe8>)
 800135e:	f005 fdc9 	bl	8006ef4 <PrintStructElement>

	PrintMessage(&SBGC32_Device, TEXT_SIZE_((char*)"__________________________\n\n"));
 8001362:	221c      	movs	r2, #28
 8001364:	4916      	ldr	r1, [pc, #88]	; (80013c0 <PrintDataStream+0x124>)
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <PrintDataStream+0xe8>)
 8001368:	f005 fdae 	bl	8006ec8 <PrintMessage>
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200014ac 	.word	0x200014ac
 8001378:	200014b2 	.word	0x200014b2
 800137c:	20001500 	.word	0x20001500
 8001380:	0800c4d8 	.word	0x0800c4d8
 8001384:	20000d54 	.word	0x20000d54
 8001388:	0800c4f4 	.word	0x0800c4f4
 800138c:	200014ae 	.word	0x200014ae
 8001390:	0800c510 	.word	0x0800c510
 8001394:	200014b0 	.word	0x200014b0
 8001398:	0800c52c 	.word	0x0800c52c
 800139c:	0800c538 	.word	0x0800c538
 80013a0:	200014b4 	.word	0x200014b4
 80013a4:	0800c548 	.word	0x0800c548
 80013a8:	200014b6 	.word	0x200014b6
 80013ac:	0800c45c 	.word	0x0800c45c
 80013b0:	0800c468 	.word	0x0800c468
 80013b4:	20001502 	.word	0x20001502
 80013b8:	0800c474 	.word	0x0800c474
 80013bc:	20001504 	.word	0x20001504
 80013c0:	0800c554 	.word	0x0800c554

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_MspInit+0x44>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <HAL_MspInit+0x44>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_MspInit+0x44>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x44>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x44>)
 80013f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f8:	6453      	str	r3, [r2, #68]	; 0x44
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x44>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 fbe8 	bl	8001c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/*  - - - - - TIM2 Interrupt Flags Check - - - - - */

	if (GET_FLAG_TIM_SR_UIF(SBGC_REFERENCE_TIMER) &&
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <TIM2_IRQHandler+0x34>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b01      	cmp	r3, #1
 800147c:	d10b      	bne.n	8001496 <TIM2_IRQHandler+0x2a>
		GET_FLAG_TIM_DIER_UIE(SBGC_REFERENCE_TIMER))
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <TIM2_IRQHandler+0x34>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	f003 0301 	and.w	r3, r3, #1
	if (GET_FLAG_TIM_SR_UIF(SBGC_REFERENCE_TIMER) &&
 8001488:	2b01      	cmp	r3, #1
 800148a:	d104      	bne.n	8001496 <TIM2_IRQHandler+0x2a>
		TimerDRV_CallBack(SBGC32_Device.Drv);
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <TIM2_IRQHandler+0x38>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fe39 	bl	8005108 <TimerDRV_CallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001496:	4802      	ldr	r0, [pc, #8]	; (80014a0 <TIM2_IRQHandler+0x34>)
 8001498:	f002 f93e 	bl	8003718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200016f0 	.word	0x200016f0
 80014a4:	20000d54 	.word	0x20000d54

080014a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/* - - - - - UART1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <USART1_IRQHandler+0x5c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b6:	2b40      	cmp	r3, #64	; 0x40
 80014b8:	d10b      	bne.n	80014d2 <USART1_IRQHandler+0x2a>
		GET_FLAG_UART_CR1_TCIE(SBGC_SERIAL_PORT))
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <USART1_IRQHandler+0x5c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
	if (GET_FLAG_UART_ISR_TC(SBGC_SERIAL_PORT) &&
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <USART1_IRQHandler+0x2a>
		UART_DRV_TxCallBack(SBGC32_Device.Drv);
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <USART1_IRQHandler+0x60>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fe7b 	bl	80051c8 <UART_DRV_TxCallBack>

	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <USART1_IRQHandler+0x5c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	69db      	ldr	r3, [r3, #28]
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	2b20      	cmp	r3, #32
 80014de:	d10b      	bne.n	80014f8 <USART1_IRQHandler+0x50>
		GET_FLAG_UART_CR1_RXNEIE(SBGC_SERIAL_PORT))
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <USART1_IRQHandler+0x5c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_UART_ISR_RXNE(SBGC_SERIAL_PORT) &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <USART1_IRQHandler+0x50>
		UART_DRV_RxCallBack(SBGC32_Device.Drv);
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <USART1_IRQHandler+0x60>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f003 ff24 	bl	8005340 <UART_DRV_RxCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <USART1_IRQHandler+0x5c>)
 80014fa:	f002 fde1 	bl	80040c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000173c 	.word	0x2000173c
 8001508:	20000d54 	.word	0x20000d54

0800150c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	return 1;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_kill>:

int _kill(int pid, int sig)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001526:	f006 fb05 	bl	8007b34 <__errno>
 800152a:	4603      	mov	r3, r0
 800152c:	2216      	movs	r2, #22
 800152e:	601a      	str	r2, [r3, #0]
	return -1;
 8001530:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <_exit>:

void _exit (int status)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff ffe7 	bl	800151c <_kill>
	while (1) {}		/* Make sure we hang here */
 800154e:	e7fe      	b.n	800154e <_exit+0x12>

08001550 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e00a      	b.n	8001578 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001562:	f3af 8000 	nop.w
 8001566:	4601      	mov	r1, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	b2ca      	uxtb	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf0      	blt.n	8001562 <_read+0x12>
	}

return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e009      	b.n	80015b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf1      	blt.n	800159c <_write+0x12>
	}
	return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_close>:

int _close(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
	return -1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ea:	605a      	str	r2, [r3, #4]
	return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_isatty>:

int _isatty(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	return 1;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
	return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f006 fa6a 	bl	8007b34 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20080000 	.word	0x20080000
 800168c:	00000400 	.word	0x00000400
 8001690:	200016ec 	.word	0x200016ec
 8001694:	20001868 	.word	0x20001868

08001698 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_TIM2_Init+0x98>)
 80016dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <MX_TIM2_Init+0x98>)
 80016e4:	226b      	movs	r2, #107	; 0x6b
 80016e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_TIM2_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_TIM2_Init+0x98>)
 80016f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <MX_TIM2_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_TIM2_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001702:	4814      	ldr	r0, [pc, #80]	; (8001754 <MX_TIM2_Init+0x98>)
 8001704:	f001 ff38 	bl	8003578 <HAL_TIM_Base_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800170e:	f7ff fe59 	bl	80013c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	480d      	ldr	r0, [pc, #52]	; (8001754 <MX_TIM2_Init+0x98>)
 8001720:	f002 f91a 	bl	8003958 <HAL_TIM_ConfigClockSource>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800172a:	f7ff fe4b 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800172e:	2320      	movs	r3, #32
 8001730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_TIM2_Init+0x98>)
 800173c:	f002 fb42 	bl	8003dc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001746:	f7ff fe3d 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200016f0 	.word	0x200016f0

08001758 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001768:	d113      	bne.n	8001792 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_TIM_Base_MspInit+0x44>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <HAL_TIM_Base_MspInit+0x44>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_TIM_Base_MspInit+0x44>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2105      	movs	r1, #5
 8001786:	201c      	movs	r0, #28
 8001788:	f000 fb75 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800178c:	201c      	movs	r0, #28
 800178e:	f000 fb8e 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART1_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART1_UART_Init+0x58>)
 80017e4:	f002 fb9a 	bl	8003f1c <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017ee:	f7ff fde9 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	2000173c 	.word	0x2000173c
 80017fc:	40011000 	.word	0x40011000

08001800 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_USART2_UART_Init+0x58>)
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <MX_USART2_UART_Init+0x5c>)
 8001808:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_USART2_UART_Init+0x58>)
 800180c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001810:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_USART2_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_USART2_UART_Init+0x58>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_USART2_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_USART2_UART_Init+0x58>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_USART2_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_USART2_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_USART2_UART_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_USART2_UART_Init+0x58>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_USART2_UART_Init+0x58>)
 8001844:	f002 fb6a 	bl	8003f1c <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800184e:	f7ff fdb9 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200017c4 	.word	0x200017c4
 800185c:	40004400 	.word	0x40004400

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0b0      	sub	sp, #192	; 0xc0
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2290      	movs	r2, #144	; 0x90
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f006 f997 	bl	8007bb4 <memset>
  if(uartHandle->Instance==USART1)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <HAL_UART_MspInit+0x170>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d15a      	bne.n	8001946 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001890:	2340      	movs	r3, #64	; 0x40
 8001892:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001894:	2300      	movs	r3, #0
 8001896:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4618      	mov	r0, r3
 800189e:	f001 fa43 	bl	8002d28 <HAL_RCCEx_PeriphCLKConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a8:	f7ff fd8c 	bl	80013c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ac:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b0:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6453      	str	r3, [r2, #68]	; 0x44
 80018b8:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a42      	ldr	r2, [pc, #264]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018ca:	f043 0302 	orr.w	r3, r3, #2
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b40      	ldr	r3, [pc, #256]	; (80019d4 <HAL_UART_MspInit+0x174>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80018f6:	2304      	movs	r3, #4
 80018f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001900:	4619      	mov	r1, r3
 8001902:	4835      	ldr	r0, [pc, #212]	; (80019d8 <HAL_UART_MspInit+0x178>)
 8001904:	f000 fb80 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001916:	2301      	movs	r3, #1
 8001918:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001922:	2304      	movs	r3, #4
 8001924:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800192c:	4619      	mov	r1, r3
 800192e:	482a      	ldr	r0, [pc, #168]	; (80019d8 <HAL_UART_MspInit+0x178>)
 8001930:	f000 fb6a 	bl	8002008 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2101      	movs	r1, #1
 8001938:	2025      	movs	r0, #37	; 0x25
 800193a:	f000 fa9c 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800193e:	2025      	movs	r0, #37	; 0x25
 8001940:	f000 fab5 	bl	8001eae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001944:	e03f      	b.n	80019c6 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_UART_MspInit+0x17c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d13a      	bne.n	80019c6 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001954:	2300      	movs	r3, #0
 8001956:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4618      	mov	r0, r3
 800195e:	f001 f9e3 	bl	8002d28 <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8001968:	f7ff fd2c 	bl	80013c4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0x174>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001976:	6413      	str	r3, [r2, #64]	; 0x40
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_UART_MspInit+0x174>)
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <HAL_UART_MspInit+0x174>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6313      	str	r3, [r2, #48]	; 0x30
 8001990:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_UART_MspInit+0x174>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800199c:	230c      	movs	r3, #12
 800199e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b4:	2307      	movs	r3, #7
 80019b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <HAL_UART_MspInit+0x180>)
 80019c2:	f000 fb21 	bl	8002008 <HAL_GPIO_Init>
}
 80019c6:	bf00      	nop
 80019c8:	37c0      	adds	r7, #192	; 0xc0
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40011000 	.word	0x40011000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40004400 	.word	0x40004400
 80019e0:	40020000 	.word	0x40020000

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff fe43 	bl	8001698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f006 f895 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff f879 	bl	8000b0c <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	20000d38 	.word	0x20000d38
  ldr r2, =_sidata
 8001a28:	0800ce5c 	.word	0x0800ce5c
  ldr r2, =_sbss
 8001a2c:	20000d38 	.word	0x20000d38
  ldr r4, =_ebss
 8001a30:	20001868 	.word	0x20001868

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>

08001a36 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d104      	bne.n	8001a4e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a44:	b672      	cpsid	i
}
 8001a46:	bf00      	nop
 8001a48:	f7ff fcbc 	bl	80013c4 <Error_Handler>
 8001a4c:	e7fe      	b.n	8001a4c <stm32_lock_init+0x16>
  lock->flag = 0;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	705a      	strb	r2, [r3, #1]
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a70:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7a:	b672      	cpsid	i
}
 8001a7c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a7e:	f3bf 8f4f 	dsb	sy
}
 8001a82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a84:	f3bf 8f6f 	isb	sy
}
 8001a88:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d104      	bne.n	8001a9a <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
 8001a94:	f7ff fc96 	bl	80013c4 <Error_Handler>
 8001a98:	e7fe      	b.n	8001a98 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d103      	bne.n	8001aaa <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	e008      	b.n	8001abc <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	785b      	ldrb	r3, [r3, #1]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d104      	bne.n	8001abc <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab2:	b672      	cpsid	i
}
 8001ab4:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001ab6:	f7ff fc85 	bl	80013c4 <Error_Handler>
 8001aba:	e7fe      	b.n	8001aba <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	785b      	ldrb	r3, [r3, #1]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	705a      	strb	r2, [r3, #1]
}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d104      	bne.n	8001ae8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ade:	b672      	cpsid	i
}
 8001ae0:	bf00      	nop
 8001ae2:	f7ff fc6f 	bl	80013c4 <Error_Handler>
 8001ae6:	e7fe      	b.n	8001ae6 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	785b      	ldrb	r3, [r3, #1]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001af0:	b672      	cpsid	i
}
 8001af2:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001af4:	f7ff fc66 	bl	80013c4 <Error_Handler>
 8001af8:	e7fe      	b.n	8001af8 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	785b      	ldrb	r3, [r3, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d105      	bne.n	8001b1a <stm32_lock_release+0x4a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b16:	b662      	cpsie	i
}
 8001b18:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d105      	bne.n	8001b3c <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001b30:	f006 f800 	bl	8007b34 <__errno>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2216      	movs	r2, #22
 8001b38:	601a      	str	r2, [r3, #0]
    return;
 8001b3a:	e015      	b.n	8001b68 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f006 f823 	bl	8007b88 <malloc>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff6d 	bl	8001a36 <stm32_lock_init>
    return;
 8001b5c:	e004      	b.n	8001b68 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5e:	b672      	cpsid	i
}
 8001b60:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001b62:	f7ff fc2f 	bl	80013c4 <Error_Handler>
 8001b66:	e7fe      	b.n	8001b66 <__retarget_lock_init_recursive+0x44>
}
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d104      	bne.n	8001b86 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b7c:	b672      	cpsid	i
}
 8001b7e:	bf00      	nop
 8001b80:	f7ff fc20 	bl	80013c4 <Error_Handler>
 8001b84:	e7fe      	b.n	8001b84 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff6a 	bl	8001a62 <stm32_lock_acquire>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba4:	b672      	cpsid	i
}
 8001ba6:	bf00      	nop
 8001ba8:	f7ff fc0c 	bl	80013c4 <Error_Handler>
 8001bac:	e7fe      	b.n	8001bac <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff8d 	bl	8001ad0 <stm32_lock_release>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f000 f94c 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc8:	200f      	movs	r0, #15
 8001bca:	f000 f805 	bl	8001bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bce:	f7ff fbff 	bl	80013d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x54>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_InitTick+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4619      	mov	r1, r3
 8001bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f967 	bl	8001eca <HAL_SYSTICK_Config>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00e      	b.n	8001c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b0f      	cmp	r3, #15
 8001c0a:	d80a      	bhi.n	8001c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f000 f92f 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c18:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_InitTick+0x5c>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x20>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x24>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4413      	add	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <HAL_IncTick+0x24>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20001858 	.word	0x20001858

08001c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTick;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTick+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20001858 	.word	0x20001858

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffee 	bl	8001c60 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffde 	bl	8001c60 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	05fa0000 	.word	0x05fa0000

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff29 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff3e 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff8e 	bl	8001db4 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff31 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff feb6 	bl	8001c60 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d008      	beq.n	8001f14 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e052      	b.n	8001fba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0216 	bic.w	r2, r2, #22
 8001f22:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f32:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d103      	bne.n	8001f44 <HAL_DMA_Abort+0x62>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0208 	bic.w	r2, r2, #8
 8001f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f64:	e013      	b.n	8001f8e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f66:	f7ff fe7b 	bl	8001c60 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d90c      	bls.n	8001f8e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e015      	b.n	8001fba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e4      	bne.n	8001f66 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	223f      	movs	r2, #63	; 0x3f
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d004      	beq.n	8001fe0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e00c      	b.n	8001ffa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e175      	b.n	8002314 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 8164 	bne.w	800230e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b01      	cmp	r3, #1
 8002050:	d005      	beq.n	800205e <HAL_GPIO_Init+0x56>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d130      	bne.n	80020c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0201 	and.w	r2, r3, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d017      	beq.n	80020fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80be 	beq.w	800230e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <HAL_GPIO_Init+0x324>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a65      	ldr	r2, [pc, #404]	; (800232c <HAL_GPIO_Init+0x324>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_GPIO_Init+0x324>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021aa:	4a61      	ldr	r2, [pc, #388]	; (8002330 <HAL_GPIO_Init+0x328>)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_GPIO_Init+0x32c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d037      	beq.n	8002246 <HAL_GPIO_Init+0x23e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a57      	ldr	r2, [pc, #348]	; (8002338 <HAL_GPIO_Init+0x330>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d031      	beq.n	8002242 <HAL_GPIO_Init+0x23a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a56      	ldr	r2, [pc, #344]	; (800233c <HAL_GPIO_Init+0x334>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d02b      	beq.n	800223e <HAL_GPIO_Init+0x236>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a55      	ldr	r2, [pc, #340]	; (8002340 <HAL_GPIO_Init+0x338>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d025      	beq.n	800223a <HAL_GPIO_Init+0x232>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a54      	ldr	r2, [pc, #336]	; (8002344 <HAL_GPIO_Init+0x33c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d01f      	beq.n	8002236 <HAL_GPIO_Init+0x22e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a53      	ldr	r2, [pc, #332]	; (8002348 <HAL_GPIO_Init+0x340>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d019      	beq.n	8002232 <HAL_GPIO_Init+0x22a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a52      	ldr	r2, [pc, #328]	; (800234c <HAL_GPIO_Init+0x344>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_GPIO_Init+0x226>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a51      	ldr	r2, [pc, #324]	; (8002350 <HAL_GPIO_Init+0x348>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00d      	beq.n	800222a <HAL_GPIO_Init+0x222>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a50      	ldr	r2, [pc, #320]	; (8002354 <HAL_GPIO_Init+0x34c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <HAL_GPIO_Init+0x21e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <HAL_GPIO_Init+0x350>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d101      	bne.n	8002222 <HAL_GPIO_Init+0x21a>
 800221e:	2309      	movs	r3, #9
 8002220:	e012      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002222:	230a      	movs	r3, #10
 8002224:	e010      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002226:	2308      	movs	r3, #8
 8002228:	e00e      	b.n	8002248 <HAL_GPIO_Init+0x240>
 800222a:	2307      	movs	r3, #7
 800222c:	e00c      	b.n	8002248 <HAL_GPIO_Init+0x240>
 800222e:	2306      	movs	r3, #6
 8002230:	e00a      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002232:	2305      	movs	r3, #5
 8002234:	e008      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002236:	2304      	movs	r3, #4
 8002238:	e006      	b.n	8002248 <HAL_GPIO_Init+0x240>
 800223a:	2303      	movs	r3, #3
 800223c:	e004      	b.n	8002248 <HAL_GPIO_Init+0x240>
 800223e:	2302      	movs	r3, #2
 8002240:	e002      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_GPIO_Init+0x240>
 8002246:	2300      	movs	r3, #0
 8002248:	69fa      	ldr	r2, [r7, #28]
 800224a:	f002 0203 	and.w	r2, r2, #3
 800224e:	0092      	lsls	r2, r2, #2
 8002250:	4093      	lsls	r3, r2
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002258:	4935      	ldr	r1, [pc, #212]	; (8002330 <HAL_GPIO_Init+0x328>)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	3302      	adds	r3, #2
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002266:	4b3d      	ldr	r3, [pc, #244]	; (800235c <HAL_GPIO_Init+0x354>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800228a:	4a34      	ldr	r2, [pc, #208]	; (800235c <HAL_GPIO_Init+0x354>)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002290:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_GPIO_Init+0x354>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <HAL_GPIO_Init+0x354>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ba:	4b28      	ldr	r3, [pc, #160]	; (800235c <HAL_GPIO_Init+0x354>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022de:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HAL_GPIO_Init+0x354>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022e4:	4b1d      	ldr	r3, [pc, #116]	; (800235c <HAL_GPIO_Init+0x354>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <HAL_GPIO_Init+0x354>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3301      	adds	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	f67f ae86 	bls.w	8002028 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	40013800 	.word	0x40013800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40021400 	.word	0x40021400
 800234c:	40021800 	.word	0x40021800
 8002350:	40021c00 	.word	0x40021c00
 8002354:	40022000 	.word	0x40022000
 8002358:	40022400 	.word	0x40022400
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a22      	ldr	r2, [pc, #136]	; (80023f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002382:	4b1e      	ldr	r3, [pc, #120]	; (80023fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238e:	f7ff fc67 	bl	8001c60 <HAL_GetTick>
 8002392:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002394:	e009      	b.n	80023aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002396:	f7ff fc63 	bl	8001c60 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a4:	d901      	bls.n	80023aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e022      	b.n	80023f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b6:	d1ee      	bne.n	8002396 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80023be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c4:	f7ff fc4c 	bl	8001c60 <HAL_GetTick>
 80023c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023ca:	e009      	b.n	80023e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023cc:	f7ff fc48 	bl	8001c60 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023da:	d901      	bls.n	80023e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e007      	b.n	80023f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023ec:	d1ee      	bne.n	80023cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40007000 	.word	0x40007000

08002400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002408:	2300      	movs	r3, #0
 800240a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e29b      	b.n	800294e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 8087 	beq.w	8002532 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002424:	4b96      	ldr	r3, [pc, #600]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00c      	beq.n	800244a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002430:	4b93      	ldr	r3, [pc, #588]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d112      	bne.n	8002462 <HAL_RCC_OscConfig+0x62>
 800243c:	4b90      	ldr	r3, [pc, #576]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002448:	d10b      	bne.n	8002462 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244a:	4b8d      	ldr	r3, [pc, #564]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d06c      	beq.n	8002530 <HAL_RCC_OscConfig+0x130>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d168      	bne.n	8002530 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e275      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x7a>
 800246c:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a83      	ldr	r2, [pc, #524]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e02e      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x9c>
 8002482:	4b7f      	ldr	r3, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a7e      	ldr	r2, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b7c      	ldr	r3, [pc, #496]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7b      	ldr	r2, [pc, #492]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0xc0>
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a75      	ldr	r2, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a72      	ldr	r2, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff fbbe 	bl	8001c60 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff fbba 	bl	8001c60 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e229      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xe8>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fbaa 	bl	8001c60 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fba6 	bl	8001c60 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e215      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x110>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d069      	beq.n	8002612 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b08      	cmp	r3, #8
 8002554:	d11c      	bne.n	8002590 <HAL_RCC_OscConfig+0x190>
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_RCC_OscConfig+0x17a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1e9      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	493d      	ldr	r1, [pc, #244]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	e040      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a38      	ldr	r2, [pc, #224]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff fb5c 	bl	8001c60 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ac:	f7ff fb58 	bl	8001c60 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e1c7      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4929      	ldr	r1, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]
 80025de:	e018      	b.n	8002612 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb38 	bl	8001c60 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff fb34 	bl	8001c60 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1a3      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d038      	beq.n	8002690 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262a:	4a15      	ldr	r2, [pc, #84]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7ff fb15 	bl	8001c60 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263a:	f7ff fb11 	bl	8001c60 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e180      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x23a>
 8002658:	e01a      	b.n	8002690 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265a:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 800265c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265e:	4a08      	ldr	r2, [pc, #32]	; (8002680 <HAL_RCC_OscConfig+0x280>)
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7ff fafb 	bl	8001c60 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266e:	f7ff faf7 	bl	8001c60 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d903      	bls.n	8002684 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e166      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
 8002680:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	4b92      	ldr	r3, [pc, #584]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ee      	bne.n	800266e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a4 	beq.w	80027e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269e:	4b8c      	ldr	r3, [pc, #560]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	4b89      	ldr	r3, [pc, #548]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a88      	ldr	r2, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b86      	ldr	r3, [pc, #536]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c2:	2301      	movs	r3, #1
 80026c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b83      	ldr	r3, [pc, #524]	; (80028d4 <HAL_RCC_OscConfig+0x4d4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d118      	bne.n	8002704 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026d2:	4b80      	ldr	r3, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x4d4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7f      	ldr	r2, [pc, #508]	; (80028d4 <HAL_RCC_OscConfig+0x4d4>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026de:	f7ff fabf 	bl	8001c60 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e6:	f7ff fabb 	bl	8001c60 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b64      	cmp	r3, #100	; 0x64
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e12a      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026f8:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x4d4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x31a>
 800270c:	4b70      	ldr	r3, [pc, #448]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a6f      	ldr	r2, [pc, #444]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
 8002718:	e02d      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x33c>
 8002722:	4b6b      	ldr	r3, [pc, #428]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4a6a      	ldr	r2, [pc, #424]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	6713      	str	r3, [r2, #112]	; 0x70
 800272e:	4b68      	ldr	r3, [pc, #416]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a67      	ldr	r2, [pc, #412]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002734:	f023 0304 	bic.w	r3, r3, #4
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
 800273a:	e01c      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b05      	cmp	r3, #5
 8002742:	d10c      	bne.n	800275e <HAL_RCC_OscConfig+0x35e>
 8002744:	4b62      	ldr	r3, [pc, #392]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a61      	ldr	r2, [pc, #388]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a5e      	ldr	r2, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
 800275c:	e00b      	b.n	8002776 <HAL_RCC_OscConfig+0x376>
 800275e:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a5b      	ldr	r2, [pc, #364]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002770:	f023 0304 	bic.w	r3, r3, #4
 8002774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d015      	beq.n	80027aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7ff fa6f 	bl	8001c60 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff fa6b 	bl	8001c60 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0d8      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ee      	beq.n	8002786 <HAL_RCC_OscConfig+0x386>
 80027a8:	e014      	b.n	80027d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7ff fa59 	bl	8001c60 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7ff fa55 	bl	8001c60 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e0c2      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c8:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ee      	bne.n	80027b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80ae 	beq.w	800294c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f0:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d06d      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d14b      	bne.n	800289c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002804:	4b32      	ldr	r3, [pc, #200]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800280a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800280e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002810:	f7ff fa26 	bl	8001c60 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff fa22 	bl	8001c60 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e091      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	019b      	lsls	r3, r3, #6
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	3b01      	subs	r3, #1
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	061b      	lsls	r3, r3, #24
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	071b      	lsls	r3, r3, #28
 8002862:	491b      	ldr	r1, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a18      	ldr	r2, [pc, #96]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7ff f9f4 	bl	8001c60 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7ff f9f0 	bl	8001c60 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e05f      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x47c>
 800289a:	e057      	b.n	800294c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80028a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a8:	f7ff f9da 	bl	8001c60 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff f9d6 	bl	8001c60 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e045      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_RCC_OscConfig+0x4d0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1f0      	bne.n	80028b0 <HAL_RCC_OscConfig+0x4b0>
 80028ce:	e03d      	b.n	800294c <HAL_RCC_OscConfig+0x54c>
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <HAL_RCC_OscConfig+0x558>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d030      	beq.n	8002948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d129      	bne.n	8002948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d122      	bne.n	8002948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002908:	4013      	ands	r3, r2
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800290e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002910:	4293      	cmp	r3, r2
 8002912:	d119      	bne.n	8002948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	3b01      	subs	r3, #1
 8002922:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d10f      	bne.n	8002948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d107      	bne.n	8002948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0d0      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d910      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 020f 	bic.w	r2, r3, #15
 800298a:	4965      	ldr	r1, [pc, #404]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b63      	ldr	r3, [pc, #396]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0b8      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029bc:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a58      	ldr	r2, [pc, #352]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 80029c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a52      	ldr	r2, [pc, #328]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 80029da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	494d      	ldr	r1, [pc, #308]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d040      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d115      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e07f      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e073      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06b      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3e:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 0203 	bic.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4936      	ldr	r1, [pc, #216]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7ff f906 	bl	8001c60 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7ff f902 	bl	8001c60 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e053      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 020c 	and.w	r2, r3, #12
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d1eb      	bne.n	8002a58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d210      	bcs.n	8002ab0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 020f 	bic.w	r2, r3, #15
 8002a96:	4922      	ldr	r1, [pc, #136]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e032      	b.n	8002b16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abc:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4916      	ldr	r1, [pc, #88]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	490e      	ldr	r1, [pc, #56]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aee:	f000 f821 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8002af2:	4602      	mov	r2, r0
 8002af4:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <HAL_RCC_ClockConfig+0x1c8>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	490a      	ldr	r1, [pc, #40]	; (8002b28 <HAL_RCC_ClockConfig+0x1cc>)
 8002b00:	5ccb      	ldrb	r3, [r1, r3]
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	4a09      	ldr	r2, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x1d0>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_RCC_ClockConfig+0x1d4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff f862 	bl	8001bd8 <HAL_InitTick>

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023c00 	.word	0x40023c00
 8002b24:	40023800 	.word	0x40023800
 8002b28:	0800c98c 	.word	0x0800c98c
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b38:	b090      	sub	sp, #64	; 0x40
 8002b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b40:	2300      	movs	r3, #0
 8002b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b44:	2300      	movs	r3, #0
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b4c:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 030c 	and.w	r3, r3, #12
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d00d      	beq.n	8002b74 <HAL_RCC_GetSysClockFreq+0x40>
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	f200 80a1 	bhi.w	8002ca0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_RCC_GetSysClockFreq+0x34>
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d003      	beq.n	8002b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b66:	e09b      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b6c:	e09b      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6e:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002b70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b72:	e098      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b7e:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d028      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8a:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	099b      	lsrs	r3, r3, #6
 8002b90:	2200      	movs	r2, #0
 8002b92:	623b      	str	r3, [r7, #32]
 8002b94:	627a      	str	r2, [r7, #36]	; 0x24
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002ba0:	fb03 f201 	mul.w	r2, r3, r1
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	4a43      	ldr	r2, [pc, #268]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x188>)
 8002bae:	fba0 1202 	umull	r1, r2, r0, r2
 8002bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8002bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bba:	4413      	add	r3, r2
 8002bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	61fa      	str	r2, [r7, #28]
 8002bc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002bce:	f7fd fd4b 	bl	8000668 <__aeabi_uldivmod>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bda:	e053      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bdc:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	2200      	movs	r2, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	617a      	str	r2, [r7, #20]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bee:	f04f 0b00 	mov.w	fp, #0
 8002bf2:	4652      	mov	r2, sl
 8002bf4:	465b      	mov	r3, fp
 8002bf6:	f04f 0000 	mov.w	r0, #0
 8002bfa:	f04f 0100 	mov.w	r1, #0
 8002bfe:	0159      	lsls	r1, r3, #5
 8002c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c04:	0150      	lsls	r0, r2, #5
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	ebb2 080a 	subs.w	r8, r2, sl
 8002c0e:	eb63 090b 	sbc.w	r9, r3, fp
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c26:	ebb2 0408 	subs.w	r4, r2, r8
 8002c2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	00eb      	lsls	r3, r5, #3
 8002c38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3c:	00e2      	lsls	r2, r4, #3
 8002c3e:	4614      	mov	r4, r2
 8002c40:	461d      	mov	r5, r3
 8002c42:	eb14 030a 	adds.w	r3, r4, sl
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	eb45 030b 	adc.w	r3, r5, fp
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	028b      	lsls	r3, r1, #10
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c64:	4621      	mov	r1, r4
 8002c66:	028a      	lsls	r2, r1, #10
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	60fa      	str	r2, [r7, #12]
 8002c74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c78:	f7fd fcf6 	bl	8000668 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ca2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3740      	adds	r7, #64	; 0x40
 8002cac:	46bd      	mov	sp, r7
 8002cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	017d7840 	.word	0x017d7840

08002cc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	20000000 	.word	0x20000000

08002cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cdc:	f7ff fff0 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	0800c99c 	.word	0x0800c99c

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d04:	f7ff ffdc 	bl	8002cc0 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0b5b      	lsrs	r3, r3, #13
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40023800 	.word	0x40023800
 8002d24:	0800c99c 	.word	0x0800c99c

08002d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b088      	sub	sp, #32
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d50:	4b69      	ldr	r3, [pc, #420]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a68      	ldr	r2, [pc, #416]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d5a:	6093      	str	r3, [r2, #8]
 8002d5c:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d64:	4964      	ldr	r1, [pc, #400]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d72:	2301      	movs	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d017      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d82:	4b5d      	ldr	r3, [pc, #372]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	4959      	ldr	r1, [pc, #356]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002da0:	d101      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d017      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dbe:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	494a      	ldr	r1, [pc, #296]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dea:	2301      	movs	r3, #1
 8002dec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0320 	and.w	r3, r3, #32
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 808b 	beq.w	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e0c:	4b3a      	ldr	r3, [pc, #232]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	4a39      	ldr	r2, [pc, #228]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e16:	6413      	str	r3, [r2, #64]	; 0x40
 8002e18:	4b37      	ldr	r3, [pc, #220]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a34      	ldr	r2, [pc, #208]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7fe ff16 	bl	8001c60 <HAL_GetTick>
 8002e34:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e38:	f7fe ff12 	bl	8001c60 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	; 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e38f      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e4a:	4b2c      	ldr	r3, [pc, #176]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d035      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d02e      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e74:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e96:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e9c:	4b16      	ldr	r3, [pc, #88]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d114      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe feda 	bl	8001c60 <HAL_GetTick>
 8002eac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb0:	f7fe fed6 	bl	8001c60 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e351      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0ee      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ede:	d111      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ee0:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002eee:	400b      	ands	r3, r1
 8002ef0:	4901      	ldr	r1, [pc, #4]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000
 8002f00:	0ffffcff 	.word	0x0ffffcff
 8002f04:	4bac      	ldr	r3, [pc, #688]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4aab      	ldr	r2, [pc, #684]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f0e:	6093      	str	r3, [r2, #8]
 8002f10:	4ba9      	ldr	r3, [pc, #676]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1c:	49a6      	ldr	r1, [pc, #664]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0310 	and.w	r3, r3, #16
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f2e:	4ba2      	ldr	r3, [pc, #648]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f34:	4aa0      	ldr	r2, [pc, #640]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f3e:	4b9e      	ldr	r3, [pc, #632]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f48:	499b      	ldr	r1, [pc, #620]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f5c:	4b96      	ldr	r3, [pc, #600]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f6a:	4993      	ldr	r1, [pc, #588]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f7e:	4b8e      	ldr	r3, [pc, #568]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8c:	498a      	ldr	r1, [pc, #552]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fa0:	4b85      	ldr	r3, [pc, #532]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fae:	4982      	ldr	r1, [pc, #520]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fc2:	4b7d      	ldr	r3, [pc, #500]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4979      	ldr	r1, [pc, #484]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe4:	4b74      	ldr	r3, [pc, #464]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	f023 0203 	bic.w	r2, r3, #3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	4971      	ldr	r1, [pc, #452]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003006:	4b6c      	ldr	r3, [pc, #432]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	f023 020c 	bic.w	r2, r3, #12
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003014:	4968      	ldr	r1, [pc, #416]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00a      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003028:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003036:	4960      	ldr	r1, [pc, #384]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800304a:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003058:	4957      	ldr	r1, [pc, #348]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800306c:	4b52      	ldr	r3, [pc, #328]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307a:	494f      	ldr	r1, [pc, #316]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800308e:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003094:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	4946      	ldr	r1, [pc, #280]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030b0:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	493e      	ldr	r1, [pc, #248]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e0:	4935      	ldr	r1, [pc, #212]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003102:	492d      	ldr	r1, [pc, #180]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d011      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003116:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003124:	4924      	ldr	r1, [pc, #144]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003134:	d101      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003136:	2301      	movs	r3, #1
 8003138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003146:	2301      	movs	r3, #1
 8003148:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003164:	4914      	ldr	r1, [pc, #80]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003188:	490b      	ldr	r1, [pc, #44]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00f      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ac:	4902      	ldr	r1, [pc, #8]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031b4:	e002      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80031b6:	bf00      	nop
 80031b8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031c8:	4b8a      	ldr	r3, [pc, #552]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d8:	4986      	ldr	r1, [pc, #536]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80031ec:	4b81      	ldr	r3, [pc, #516]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031fc:	497d      	ldr	r1, [pc, #500]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d006      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 80d6 	beq.w	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003218:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003224:	f7fe fd1c 	bl	8001c60 <HAL_GetTick>
 8003228:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800322c:	f7fe fd18 	bl	8001c60 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e195      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d021      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11d      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800325e:	4b65      	ldr	r3, [pc, #404]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800326c:	4b61      	ldr	r3, [pc, #388]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800326e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003272:	0e1b      	lsrs	r3, r3, #24
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	019a      	lsls	r2, r3, #6
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	041b      	lsls	r3, r3, #16
 8003284:	431a      	orrs	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	071b      	lsls	r3, r3, #28
 8003292:	4958      	ldr	r1, [pc, #352]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d02e      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032c4:	d129      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032c6:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032d4:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032da:	0f1b      	lsrs	r3, r3, #28
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	019a      	lsls	r2, r3, #6
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	071b      	lsls	r3, r3, #28
 80032fa:	493e      	ldr	r1, [pc, #248]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003302:	4b3c      	ldr	r3, [pc, #240]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003308:	f023 021f 	bic.w	r2, r3, #31
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003310:	3b01      	subs	r3, #1
 8003312:	4938      	ldr	r1, [pc, #224]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01d      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003326:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332c:	0e1b      	lsrs	r3, r3, #24
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800333a:	0f1b      	lsrs	r3, r3, #28
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	019a      	lsls	r2, r3, #6
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	431a      	orrs	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	061b      	lsls	r3, r3, #24
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	4926      	ldr	r1, [pc, #152]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d011      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	019a      	lsls	r2, r3, #6
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	041b      	lsls	r3, r3, #16
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	061b      	lsls	r3, r3, #24
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	071b      	lsls	r3, r3, #28
 800338a:	491a      	ldr	r1, [pc, #104]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003392:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003398:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800339c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339e:	f7fe fc5f 	bl	8001c60 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033a6:	f7fe fc5b 	bl	8001c60 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b64      	cmp	r3, #100	; 0x64
 80033b2:	d901      	bls.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0d8      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	f040 80ce 	bne.w	8003568 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a08      	ldr	r2, [pc, #32]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033d8:	f7fe fc42 	bl	8001c60 <HAL_GetTick>
 80033dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033de:	e00b      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033e0:	f7fe fc3e 	bl	8001c60 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d904      	bls.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e0bb      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033f8:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003404:	d0ec      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003422:	2b00      	cmp	r3, #0
 8003424:	d02e      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d12a      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800342e:	4b51      	ldr	r3, [pc, #324]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800343c:	4b4d      	ldr	r3, [pc, #308]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800343e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003442:	0f1b      	lsrs	r3, r3, #28
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	019a      	lsls	r2, r3, #6
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	061b      	lsls	r3, r3, #24
 800345c:	431a      	orrs	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	071b      	lsls	r3, r3, #28
 8003462:	4944      	ldr	r1, [pc, #272]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800346a:	4b42      	ldr	r3, [pc, #264]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800346c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003470:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	3b01      	subs	r3, #1
 800347a:	021b      	lsls	r3, r3, #8
 800347c:	493d      	ldr	r1, [pc, #244]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d022      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003498:	d11d      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	0e1b      	lsrs	r3, r3, #24
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034a8:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	0f1b      	lsrs	r3, r3, #28
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	019a      	lsls	r2, r3, #6
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	041b      	lsls	r3, r3, #16
 80034c2:	431a      	orrs	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	061b      	lsls	r3, r3, #24
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	071b      	lsls	r3, r3, #28
 80034ce:	4929      	ldr	r1, [pc, #164]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d028      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	0e1b      	lsrs	r3, r3, #24
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034f0:	4b20      	ldr	r3, [pc, #128]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	0c1b      	lsrs	r3, r3, #16
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	019a      	lsls	r2, r3, #6
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	431a      	orrs	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	071b      	lsls	r3, r3, #28
 8003516:	4917      	ldr	r1, [pc, #92]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	4911      	ldr	r1, [pc, #68]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003540:	f7fe fb8e 	bl	8001c60 <HAL_GetTick>
 8003544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003548:	f7fe fb8a 	bl	8001c60 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e007      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003566:	d1ef      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e049      	b.n	800361e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fe f8da 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 faca 	bl	8003b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d001      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e054      	b.n	80036ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a26      	ldr	r2, [pc, #152]	; (80036f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366a:	d01d      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a22      	ldr	r2, [pc, #136]	; (80036fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_TIM_Base_Start_IT+0xd8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_TIM_Base_Start_IT+0xdc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_TIM_Base_Start_IT+0xe0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1c      	ldr	r2, [pc, #112]	; (800370c <HAL_TIM_Base_Start_IT+0xe4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_TIM_Base_Start_IT+0xe8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d115      	bne.n	80036d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_TIM_Base_Start_IT+0xec>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d015      	beq.n	80036e6 <HAL_TIM_Base_Start_IT+0xbe>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c0:	d011      	beq.n	80036e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	e008      	b.n	80036e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e000      	b.n	80036e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40010000 	.word	0x40010000
 80036fc:	40000400 	.word	0x40000400
 8003700:	40000800 	.word	0x40000800
 8003704:	40000c00 	.word	0x40000c00
 8003708:	40010400 	.word	0x40010400
 800370c:	40014000 	.word	0x40014000
 8003710:	40001800 	.word	0x40001800
 8003714:	00010007 	.word	0x00010007

08003718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d122      	bne.n	8003774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b02      	cmp	r3, #2
 800373a:	d11b      	bne.n	8003774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0202 	mvn.w	r2, #2
 8003744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f9da 	bl	8003b14 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9cc 	bl	8003b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f9dd 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	2b04      	cmp	r3, #4
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b04      	cmp	r3, #4
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0204 	mvn.w	r2, #4
 8003798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9b0 	bl	8003b14 <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9a2 	bl	8003b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 f9b3 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0308 	and.w	r3, r3, #8
 80037d2:	2b08      	cmp	r3, #8
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0208 	mvn.w	r2, #8
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f986 	bl	8003b14 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f978 	bl	8003b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f989 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b10      	cmp	r3, #16
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0210 	mvn.w	r2, #16
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2208      	movs	r2, #8
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f95c 	bl	8003b14 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f94e 	bl	8003b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f95f 	bl	8003b28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b01      	cmp	r3, #1
 800387c:	d10e      	bne.n	800389c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b01      	cmp	r3, #1
 800388a:	d107      	bne.n	800389c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0201 	mvn.w	r2, #1
 8003894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f928 	bl	8003aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d10e      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d107      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fb16 	bl	8003ef4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d6:	d10e      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b80      	cmp	r3, #128	; 0x80
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fb09 	bl	8003f08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003900:	2b40      	cmp	r3, #64	; 0x40
 8003902:	d10e      	bne.n	8003922 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	2b40      	cmp	r3, #64	; 0x40
 8003910:	d107      	bne.n	8003922 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800391a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f90d 	bl	8003b3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b20      	cmp	r3, #32
 800392e:	d10e      	bne.n	800394e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b20      	cmp	r3, #32
 800393c:	d107      	bne.n	800394e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f06f 0220 	mvn.w	r2, #32
 8003946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 fac9 	bl	8003ee0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIM_ConfigClockSource+0x1c>
 8003970:	2302      	movs	r3, #2
 8003972:	e0b4      	b.n	8003ade <HAL_TIM_ConfigClockSource+0x186>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	4b56      	ldr	r3, [pc, #344]	; (8003ae8 <HAL_TIM_ConfigClockSource+0x190>)
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800399a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ac:	d03e      	beq.n	8003a2c <HAL_TIM_ConfigClockSource+0xd4>
 80039ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b2:	f200 8087 	bhi.w	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ba:	f000 8086 	beq.w	8003aca <HAL_TIM_ConfigClockSource+0x172>
 80039be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c2:	d87f      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b70      	cmp	r3, #112	; 0x70
 80039c6:	d01a      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0xa6>
 80039c8:	2b70      	cmp	r3, #112	; 0x70
 80039ca:	d87b      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b60      	cmp	r3, #96	; 0x60
 80039ce:	d050      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x11a>
 80039d0:	2b60      	cmp	r3, #96	; 0x60
 80039d2:	d877      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b50      	cmp	r3, #80	; 0x50
 80039d6:	d03c      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0xfa>
 80039d8:	2b50      	cmp	r3, #80	; 0x50
 80039da:	d873      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d058      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x13a>
 80039e0:	2b40      	cmp	r3, #64	; 0x40
 80039e2:	d86f      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b30      	cmp	r3, #48	; 0x30
 80039e6:	d064      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039e8:	2b30      	cmp	r3, #48	; 0x30
 80039ea:	d86b      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d060      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	d867      	bhi.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d05c      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d05a      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x15a>
 80039fc:	e062      	b.n	8003ac4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6899      	ldr	r1, [r3, #8]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f000 f9b9 	bl	8003d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	609a      	str	r2, [r3, #8]
      break;
 8003a2a:	e04f      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6899      	ldr	r1, [r3, #8]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f000 f9a2 	bl	8003d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a4e:	609a      	str	r2, [r3, #8]
      break;
 8003a50:	e03c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 f916 	bl	8003c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2150      	movs	r1, #80	; 0x50
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f96f 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003a70:	e02c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 f935 	bl	8003cee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2160      	movs	r1, #96	; 0x60
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f95f 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003a90:	e01c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	f000 f8f6 	bl	8003c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2140      	movs	r1, #64	; 0x40
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f94f 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003ab0:	e00c      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f000 f946 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003ac2:	e003      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e000      	b.n	8003acc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	fffeff88 	.word	0xfffeff88

08003aec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <TIM_Base_SetConfig+0x114>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d013      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b6e:	d00f      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3d      	ldr	r2, [pc, #244]	; (8003c68 <TIM_Base_SetConfig+0x118>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3c      	ldr	r2, [pc, #240]	; (8003c6c <TIM_Base_SetConfig+0x11c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d007      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a3b      	ldr	r2, [pc, #236]	; (8003c70 <TIM_Base_SetConfig+0x120>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_Base_SetConfig+0x40>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a3a      	ldr	r2, [pc, #232]	; (8003c74 <TIM_Base_SetConfig+0x124>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d108      	bne.n	8003ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a2f      	ldr	r2, [pc, #188]	; (8003c64 <TIM_Base_SetConfig+0x114>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d02b      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb0:	d027      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <TIM_Base_SetConfig+0x118>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d023      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2b      	ldr	r2, [pc, #172]	; (8003c6c <TIM_Base_SetConfig+0x11c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01f      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	; (8003c70 <TIM_Base_SetConfig+0x120>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d01b      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a29      	ldr	r2, [pc, #164]	; (8003c74 <TIM_Base_SetConfig+0x124>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d017      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a28      	ldr	r2, [pc, #160]	; (8003c78 <TIM_Base_SetConfig+0x128>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <TIM_Base_SetConfig+0x12c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00f      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <TIM_Base_SetConfig+0x130>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00b      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a25      	ldr	r2, [pc, #148]	; (8003c84 <TIM_Base_SetConfig+0x134>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a24      	ldr	r2, [pc, #144]	; (8003c88 <TIM_Base_SetConfig+0x138>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d003      	beq.n	8003c02 <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <TIM_Base_SetConfig+0x13c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d108      	bne.n	8003c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <TIM_Base_SetConfig+0x114>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_Base_SetConfig+0xf8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <TIM_Base_SetConfig+0x124>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d103      	bne.n	8003c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	615a      	str	r2, [r3, #20]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40010000 	.word	0x40010000
 8003c68:	40000400 	.word	0x40000400
 8003c6c:	40000800 	.word	0x40000800
 8003c70:	40000c00 	.word	0x40000c00
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40014400 	.word	0x40014400
 8003c80:	40014800 	.word	0x40014800
 8003c84:	40001800 	.word	0x40001800
 8003c88:	40001c00 	.word	0x40001c00
 8003c8c:	40002000 	.word	0x40002000

08003c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0201 	bic.w	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 030a 	bic.w	r3, r3, #10
 8003ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0210 	bic.w	r2, r3, #16
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f043 0307 	orr.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e06d      	b.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a30      	ldr	r2, [pc, #192]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d004      	beq.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a2f      	ldr	r2, [pc, #188]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d108      	bne.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d022      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e4e:	d01d      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1d      	ldr	r2, [pc, #116]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d018      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d013      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d009      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a16      	ldr	r2, [pc, #88]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40010400 	.word	0x40010400
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40001800 	.word	0x40001800

08003ee0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e040      	b.n	8003fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fd fc8e 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	; 0x24
 8003f48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fbc2 	bl	80046e4 <UART_SetConfig>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e022      	b.n	8003fb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fe1a 	bl	8004bac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fea1 	bl	8004cf0 <UART_CheckIdleState>
 8003fae:	4603      	mov	r3, r0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d171      	bne.n	80040b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_UART_Transmit+0x24>
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e06a      	b.n	80040b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	; 0x21
 8003fec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fee:	f7fd fe37 	bl	8001c60 <HAL_GetTick>
 8003ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400c:	d108      	bne.n	8004020 <HAL_UART_Transmit+0x68>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d104      	bne.n	8004020 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e003      	b.n	8004028 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004028:	e02c      	b.n	8004084 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 fea8 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e038      	b.n	80040b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004058:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	3302      	adds	r3, #2
 800405e:	61bb      	str	r3, [r7, #24]
 8004060:	e007      	b.n	8004072 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	781a      	ldrb	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1cc      	bne.n	800402a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2200      	movs	r2, #0
 8004098:	2140      	movs	r1, #64	; 0x40
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fe75 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e005      	b.n	80040b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
  }
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3720      	adds	r7, #32
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b0ba      	sub	sp, #232	; 0xe8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80040ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80040ee:	4013      	ands	r3, r2
 80040f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80040f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d115      	bne.n	8004128 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00f      	beq.n	8004128 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 82ac 	beq.w	8004676 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
      }
      return;
 8004126:	e2a6      	b.n	8004676 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8117 	beq.w	8004360 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800413e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004142:	4b85      	ldr	r3, [pc, #532]	; (8004358 <HAL_UART_IRQHandler+0x298>)
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 810a 	beq.w	8004360 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d011      	beq.n	800417c <HAL_UART_IRQHandler+0xbc>
 8004158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2201      	movs	r2, #1
 800416a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004172:	f043 0201 	orr.w	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d011      	beq.n	80041ac <HAL_UART_IRQHandler+0xec>
 8004188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2202      	movs	r2, #2
 800419a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a2:	f043 0204 	orr.w	r2, r3, #4
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d011      	beq.n	80041dc <HAL_UART_IRQHandler+0x11c>
 80041b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00b      	beq.n	80041dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2204      	movs	r2, #4
 80041ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d2:	f043 0202 	orr.w	r2, r3, #2
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d017      	beq.n	8004218 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00b      	beq.n	8004218 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2208      	movs	r2, #8
 8004206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420e:	f043 0208 	orr.w	r2, r3, #8
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004220:	2b00      	cmp	r3, #0
 8004222:	d012      	beq.n	800424a <HAL_UART_IRQHandler+0x18a>
 8004224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00c      	beq.n	800424a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8212 	beq.w	800467a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d005      	beq.n	80042a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800429a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d04f      	beq.n	8004342 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fe37 	bl	8004f16 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b40      	cmp	r3, #64	; 0x40
 80042b4:	d141      	bne.n	800433a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3308      	adds	r3, #8
 80042bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042c4:	e853 3f00 	ldrex	r3, [r3]
 80042c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3308      	adds	r3, #8
 80042de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1d9      	bne.n	80042b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004306:	2b00      	cmp	r3, #0
 8004308:	d013      	beq.n	8004332 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430e:	4a13      	ldr	r2, [pc, #76]	; (800435c <HAL_UART_IRQHandler+0x29c>)
 8004310:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004316:	4618      	mov	r0, r3
 8004318:	f7fd fe53 	bl	8001fc2 <HAL_DMA_Abort_IT>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800432c:	4610      	mov	r0, r2
 800432e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	e00f      	b.n	8004352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9b6 	bl	80046a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004338:	e00b      	b.n	8004352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9b2 	bl	80046a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004340:	e007      	b.n	8004352 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f9ae 	bl	80046a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004350:	e193      	b.n	800467a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004352:	bf00      	nop
    return;
 8004354:	e191      	b.n	800467a <HAL_UART_IRQHandler+0x5ba>
 8004356:	bf00      	nop
 8004358:	04000120 	.word	0x04000120
 800435c:	08004fdf 	.word	0x08004fdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 814c 	bne.w	8004602 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8145 	beq.w	8004602 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 813e 	beq.w	8004602 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2210      	movs	r2, #16
 800438c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	f040 80b6 	bne.w	800450a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8165 	beq.w	800467e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043be:	429a      	cmp	r2, r3
 80043c0:	f080 815d 	bcs.w	800467e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d8:	f000 8086 	beq.w	80044e8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004406:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800440a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004412:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800441e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1da      	bne.n	80043dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800444a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800444e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800445c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e1      	bne.n	8004426 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3308      	adds	r3, #8
 8004468:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3308      	adds	r3, #8
 8004482:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004486:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004488:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800448c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800448e:	e841 2300 	strex	r3, r2, [r1]
 8004492:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1e3      	bne.n	8004462 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044b8:	f023 0310 	bic.w	r3, r3, #16
 80044bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80044cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e4      	bne.n	80044a8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fd fcfd 	bl	8001ee2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4619      	mov	r1, r3
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8d8 	bl	80046b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004508:	e0b9      	b.n	800467e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004516:	b29b      	uxth	r3, r3
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 80ab 	beq.w	8004682 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800452c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 80a6 	beq.w	8004682 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800454a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004558:	647b      	str	r3, [r7, #68]	; 0x44
 800455a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800455e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e4      	bne.n	8004536 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3308      	adds	r3, #8
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	623b      	str	r3, [r7, #32]
   return(result);
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004590:	633a      	str	r2, [r7, #48]	; 0x30
 8004592:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e3      	bne.n	800456c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	69b9      	ldr	r1, [r7, #24]
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	617b      	str	r3, [r7, #20]
   return(result);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e4      	bne.n	80045b8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f85c 	bl	80046b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004600:	e03f      	b.n	8004682 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00e      	beq.n	800462c <HAL_UART_IRQHandler+0x56c>
 800460e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004622:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f853 	bl	80046d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800462a:	e02d      	b.n	8004688 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800462c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00e      	beq.n	8004656 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01c      	beq.n	8004686 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
    }
    return;
 8004654:	e017      	b.n	8004686 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d012      	beq.n	8004688 <HAL_UART_IRQHandler+0x5c8>
 8004662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fccb 	bl	800500a <UART_EndTransmit_IT>
    return;
 8004674:	e008      	b.n	8004688 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004676:	bf00      	nop
 8004678:	e006      	b.n	8004688 <HAL_UART_IRQHandler+0x5c8>
    return;
 800467a:	bf00      	nop
 800467c:	e004      	b.n	8004688 <HAL_UART_IRQHandler+0x5c8>
      return;
 800467e:	bf00      	nop
 8004680:	e002      	b.n	8004688 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004682:	bf00      	nop
 8004684:	e000      	b.n	8004688 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004686:	bf00      	nop
  }

}
 8004688:	37e8      	adds	r7, #232	; 0xe8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop

08004690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	460b      	mov	r3, r1
 80046c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4ba6      	ldr	r3, [pc, #664]	; (80049a8 <UART_SetConfig+0x2c4>)
 8004710:	4013      	ands	r3, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	430b      	orrs	r3, r1
 800471a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	430a      	orrs	r2, r1
 8004754:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a94      	ldr	r2, [pc, #592]	; (80049ac <UART_SetConfig+0x2c8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d120      	bne.n	80047a2 <UART_SetConfig+0xbe>
 8004760:	4b93      	ldr	r3, [pc, #588]	; (80049b0 <UART_SetConfig+0x2cc>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b03      	cmp	r3, #3
 800476c:	d816      	bhi.n	800479c <UART_SetConfig+0xb8>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0x90>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004785 	.word	0x08004785
 8004778:	08004791 	.word	0x08004791
 800477c:	0800478b 	.word	0x0800478b
 8004780:	08004797 	.word	0x08004797
 8004784:	2301      	movs	r3, #1
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e150      	b.n	8004a2c <UART_SetConfig+0x348>
 800478a:	2302      	movs	r3, #2
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e14d      	b.n	8004a2c <UART_SetConfig+0x348>
 8004790:	2304      	movs	r3, #4
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e14a      	b.n	8004a2c <UART_SetConfig+0x348>
 8004796:	2308      	movs	r3, #8
 8004798:	77fb      	strb	r3, [r7, #31]
 800479a:	e147      	b.n	8004a2c <UART_SetConfig+0x348>
 800479c:	2310      	movs	r3, #16
 800479e:	77fb      	strb	r3, [r7, #31]
 80047a0:	e144      	b.n	8004a2c <UART_SetConfig+0x348>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a83      	ldr	r2, [pc, #524]	; (80049b4 <UART_SetConfig+0x2d0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d132      	bne.n	8004812 <UART_SetConfig+0x12e>
 80047ac:	4b80      	ldr	r3, [pc, #512]	; (80049b0 <UART_SetConfig+0x2cc>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b0c      	cmp	r3, #12
 80047b8:	d828      	bhi.n	800480c <UART_SetConfig+0x128>
 80047ba:	a201      	add	r2, pc, #4	; (adr r2, 80047c0 <UART_SetConfig+0xdc>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047f5 	.word	0x080047f5
 80047c4:	0800480d 	.word	0x0800480d
 80047c8:	0800480d 	.word	0x0800480d
 80047cc:	0800480d 	.word	0x0800480d
 80047d0:	08004801 	.word	0x08004801
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	0800480d 	.word	0x0800480d
 80047dc:	0800480d 	.word	0x0800480d
 80047e0:	080047fb 	.word	0x080047fb
 80047e4:	0800480d 	.word	0x0800480d
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	0800480d 	.word	0x0800480d
 80047f0:	08004807 	.word	0x08004807
 80047f4:	2300      	movs	r3, #0
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e118      	b.n	8004a2c <UART_SetConfig+0x348>
 80047fa:	2302      	movs	r3, #2
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e115      	b.n	8004a2c <UART_SetConfig+0x348>
 8004800:	2304      	movs	r3, #4
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e112      	b.n	8004a2c <UART_SetConfig+0x348>
 8004806:	2308      	movs	r3, #8
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e10f      	b.n	8004a2c <UART_SetConfig+0x348>
 800480c:	2310      	movs	r3, #16
 800480e:	77fb      	strb	r3, [r7, #31]
 8004810:	e10c      	b.n	8004a2c <UART_SetConfig+0x348>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a68      	ldr	r2, [pc, #416]	; (80049b8 <UART_SetConfig+0x2d4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d120      	bne.n	800485e <UART_SetConfig+0x17a>
 800481c:	4b64      	ldr	r3, [pc, #400]	; (80049b0 <UART_SetConfig+0x2cc>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004826:	2b30      	cmp	r3, #48	; 0x30
 8004828:	d013      	beq.n	8004852 <UART_SetConfig+0x16e>
 800482a:	2b30      	cmp	r3, #48	; 0x30
 800482c:	d814      	bhi.n	8004858 <UART_SetConfig+0x174>
 800482e:	2b20      	cmp	r3, #32
 8004830:	d009      	beq.n	8004846 <UART_SetConfig+0x162>
 8004832:	2b20      	cmp	r3, #32
 8004834:	d810      	bhi.n	8004858 <UART_SetConfig+0x174>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <UART_SetConfig+0x15c>
 800483a:	2b10      	cmp	r3, #16
 800483c:	d006      	beq.n	800484c <UART_SetConfig+0x168>
 800483e:	e00b      	b.n	8004858 <UART_SetConfig+0x174>
 8004840:	2300      	movs	r3, #0
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e0f2      	b.n	8004a2c <UART_SetConfig+0x348>
 8004846:	2302      	movs	r3, #2
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e0ef      	b.n	8004a2c <UART_SetConfig+0x348>
 800484c:	2304      	movs	r3, #4
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e0ec      	b.n	8004a2c <UART_SetConfig+0x348>
 8004852:	2308      	movs	r3, #8
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e0e9      	b.n	8004a2c <UART_SetConfig+0x348>
 8004858:	2310      	movs	r3, #16
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e0e6      	b.n	8004a2c <UART_SetConfig+0x348>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a56      	ldr	r2, [pc, #344]	; (80049bc <UART_SetConfig+0x2d8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d120      	bne.n	80048aa <UART_SetConfig+0x1c6>
 8004868:	4b51      	ldr	r3, [pc, #324]	; (80049b0 <UART_SetConfig+0x2cc>)
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004872:	2bc0      	cmp	r3, #192	; 0xc0
 8004874:	d013      	beq.n	800489e <UART_SetConfig+0x1ba>
 8004876:	2bc0      	cmp	r3, #192	; 0xc0
 8004878:	d814      	bhi.n	80048a4 <UART_SetConfig+0x1c0>
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d009      	beq.n	8004892 <UART_SetConfig+0x1ae>
 800487e:	2b80      	cmp	r3, #128	; 0x80
 8004880:	d810      	bhi.n	80048a4 <UART_SetConfig+0x1c0>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <UART_SetConfig+0x1a8>
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d006      	beq.n	8004898 <UART_SetConfig+0x1b4>
 800488a:	e00b      	b.n	80048a4 <UART_SetConfig+0x1c0>
 800488c:	2300      	movs	r3, #0
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e0cc      	b.n	8004a2c <UART_SetConfig+0x348>
 8004892:	2302      	movs	r3, #2
 8004894:	77fb      	strb	r3, [r7, #31]
 8004896:	e0c9      	b.n	8004a2c <UART_SetConfig+0x348>
 8004898:	2304      	movs	r3, #4
 800489a:	77fb      	strb	r3, [r7, #31]
 800489c:	e0c6      	b.n	8004a2c <UART_SetConfig+0x348>
 800489e:	2308      	movs	r3, #8
 80048a0:	77fb      	strb	r3, [r7, #31]
 80048a2:	e0c3      	b.n	8004a2c <UART_SetConfig+0x348>
 80048a4:	2310      	movs	r3, #16
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e0c0      	b.n	8004a2c <UART_SetConfig+0x348>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a44      	ldr	r2, [pc, #272]	; (80049c0 <UART_SetConfig+0x2dc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d125      	bne.n	8004900 <UART_SetConfig+0x21c>
 80048b4:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <UART_SetConfig+0x2cc>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c2:	d017      	beq.n	80048f4 <UART_SetConfig+0x210>
 80048c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c8:	d817      	bhi.n	80048fa <UART_SetConfig+0x216>
 80048ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ce:	d00b      	beq.n	80048e8 <UART_SetConfig+0x204>
 80048d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d4:	d811      	bhi.n	80048fa <UART_SetConfig+0x216>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <UART_SetConfig+0x1fe>
 80048da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048de:	d006      	beq.n	80048ee <UART_SetConfig+0x20a>
 80048e0:	e00b      	b.n	80048fa <UART_SetConfig+0x216>
 80048e2:	2300      	movs	r3, #0
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e0a1      	b.n	8004a2c <UART_SetConfig+0x348>
 80048e8:	2302      	movs	r3, #2
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e09e      	b.n	8004a2c <UART_SetConfig+0x348>
 80048ee:	2304      	movs	r3, #4
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e09b      	b.n	8004a2c <UART_SetConfig+0x348>
 80048f4:	2308      	movs	r3, #8
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e098      	b.n	8004a2c <UART_SetConfig+0x348>
 80048fa:	2310      	movs	r3, #16
 80048fc:	77fb      	strb	r3, [r7, #31]
 80048fe:	e095      	b.n	8004a2c <UART_SetConfig+0x348>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2f      	ldr	r2, [pc, #188]	; (80049c4 <UART_SetConfig+0x2e0>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d125      	bne.n	8004956 <UART_SetConfig+0x272>
 800490a:	4b29      	ldr	r3, [pc, #164]	; (80049b0 <UART_SetConfig+0x2cc>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004914:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004918:	d017      	beq.n	800494a <UART_SetConfig+0x266>
 800491a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491e:	d817      	bhi.n	8004950 <UART_SetConfig+0x26c>
 8004920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004924:	d00b      	beq.n	800493e <UART_SetConfig+0x25a>
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492a:	d811      	bhi.n	8004950 <UART_SetConfig+0x26c>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <UART_SetConfig+0x254>
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004934:	d006      	beq.n	8004944 <UART_SetConfig+0x260>
 8004936:	e00b      	b.n	8004950 <UART_SetConfig+0x26c>
 8004938:	2301      	movs	r3, #1
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e076      	b.n	8004a2c <UART_SetConfig+0x348>
 800493e:	2302      	movs	r3, #2
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e073      	b.n	8004a2c <UART_SetConfig+0x348>
 8004944:	2304      	movs	r3, #4
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e070      	b.n	8004a2c <UART_SetConfig+0x348>
 800494a:	2308      	movs	r3, #8
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e06d      	b.n	8004a2c <UART_SetConfig+0x348>
 8004950:	2310      	movs	r3, #16
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e06a      	b.n	8004a2c <UART_SetConfig+0x348>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <UART_SetConfig+0x2e4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d138      	bne.n	80049d2 <UART_SetConfig+0x2ee>
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <UART_SetConfig+0x2cc>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800496a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800496e:	d017      	beq.n	80049a0 <UART_SetConfig+0x2bc>
 8004970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004974:	d82a      	bhi.n	80049cc <UART_SetConfig+0x2e8>
 8004976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800497a:	d00b      	beq.n	8004994 <UART_SetConfig+0x2b0>
 800497c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004980:	d824      	bhi.n	80049cc <UART_SetConfig+0x2e8>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <UART_SetConfig+0x2aa>
 8004986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800498a:	d006      	beq.n	800499a <UART_SetConfig+0x2b6>
 800498c:	e01e      	b.n	80049cc <UART_SetConfig+0x2e8>
 800498e:	2300      	movs	r3, #0
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e04b      	b.n	8004a2c <UART_SetConfig+0x348>
 8004994:	2302      	movs	r3, #2
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e048      	b.n	8004a2c <UART_SetConfig+0x348>
 800499a:	2304      	movs	r3, #4
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e045      	b.n	8004a2c <UART_SetConfig+0x348>
 80049a0:	2308      	movs	r3, #8
 80049a2:	77fb      	strb	r3, [r7, #31]
 80049a4:	e042      	b.n	8004a2c <UART_SetConfig+0x348>
 80049a6:	bf00      	nop
 80049a8:	efff69f3 	.word	0xefff69f3
 80049ac:	40011000 	.word	0x40011000
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40004400 	.word	0x40004400
 80049b8:	40004800 	.word	0x40004800
 80049bc:	40004c00 	.word	0x40004c00
 80049c0:	40005000 	.word	0x40005000
 80049c4:	40011400 	.word	0x40011400
 80049c8:	40007800 	.word	0x40007800
 80049cc:	2310      	movs	r3, #16
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e02c      	b.n	8004a2c <UART_SetConfig+0x348>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a72      	ldr	r2, [pc, #456]	; (8004ba0 <UART_SetConfig+0x4bc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d125      	bne.n	8004a28 <UART_SetConfig+0x344>
 80049dc:	4b71      	ldr	r3, [pc, #452]	; (8004ba4 <UART_SetConfig+0x4c0>)
 80049de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049ea:	d017      	beq.n	8004a1c <UART_SetConfig+0x338>
 80049ec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049f0:	d817      	bhi.n	8004a22 <UART_SetConfig+0x33e>
 80049f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f6:	d00b      	beq.n	8004a10 <UART_SetConfig+0x32c>
 80049f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049fc:	d811      	bhi.n	8004a22 <UART_SetConfig+0x33e>
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <UART_SetConfig+0x326>
 8004a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a06:	d006      	beq.n	8004a16 <UART_SetConfig+0x332>
 8004a08:	e00b      	b.n	8004a22 <UART_SetConfig+0x33e>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e00d      	b.n	8004a2c <UART_SetConfig+0x348>
 8004a10:	2302      	movs	r3, #2
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e00a      	b.n	8004a2c <UART_SetConfig+0x348>
 8004a16:	2304      	movs	r3, #4
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e007      	b.n	8004a2c <UART_SetConfig+0x348>
 8004a1c:	2308      	movs	r3, #8
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e004      	b.n	8004a2c <UART_SetConfig+0x348>
 8004a22:	2310      	movs	r3, #16
 8004a24:	77fb      	strb	r3, [r7, #31]
 8004a26:	e001      	b.n	8004a2c <UART_SetConfig+0x348>
 8004a28:	2310      	movs	r3, #16
 8004a2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a34:	d15b      	bne.n	8004aee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a36:	7ffb      	ldrb	r3, [r7, #31]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d828      	bhi.n	8004a8e <UART_SetConfig+0x3aa>
 8004a3c:	a201      	add	r2, pc, #4	; (adr r2, 8004a44 <UART_SetConfig+0x360>)
 8004a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a42:	bf00      	nop
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a79 	.word	0x08004a79
 8004a50:	08004a8f 	.word	0x08004a8f
 8004a54:	08004a7f 	.word	0x08004a7f
 8004a58:	08004a8f 	.word	0x08004a8f
 8004a5c:	08004a8f 	.word	0x08004a8f
 8004a60:	08004a8f 	.word	0x08004a8f
 8004a64:	08004a87 	.word	0x08004a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a68:	f7fe f936 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004a6c:	61b8      	str	r0, [r7, #24]
        break;
 8004a6e:	e013      	b.n	8004a98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a70:	f7fe f946 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8004a74:	61b8      	str	r0, [r7, #24]
        break;
 8004a76:	e00f      	b.n	8004a98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a78:	4b4b      	ldr	r3, [pc, #300]	; (8004ba8 <UART_SetConfig+0x4c4>)
 8004a7a:	61bb      	str	r3, [r7, #24]
        break;
 8004a7c:	e00c      	b.n	8004a98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a7e:	f7fe f859 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8004a82:	61b8      	str	r0, [r7, #24]
        break;
 8004a84:	e008      	b.n	8004a98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a8a:	61bb      	str	r3, [r7, #24]
        break;
 8004a8c:	e004      	b.n	8004a98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	77bb      	strb	r3, [r7, #30]
        break;
 8004a96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d074      	beq.n	8004b88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	005a      	lsls	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b0f      	cmp	r3, #15
 8004ab8:	d916      	bls.n	8004ae8 <UART_SetConfig+0x404>
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d212      	bcs.n	8004ae8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f023 030f 	bic.w	r3, r3, #15
 8004aca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	89fb      	ldrh	r3, [r7, #14]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	89fa      	ldrh	r2, [r7, #14]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	e04f      	b.n	8004b88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	77bb      	strb	r3, [r7, #30]
 8004aec:	e04c      	b.n	8004b88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aee:	7ffb      	ldrb	r3, [r7, #31]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d828      	bhi.n	8004b46 <UART_SetConfig+0x462>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x418>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b37 	.word	0x08004b37
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b47 	.word	0x08004b47
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fe f8da 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004b24:	61b8      	str	r0, [r7, #24]
        break;
 8004b26:	e013      	b.n	8004b50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fe f8ea 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	61b8      	str	r0, [r7, #24]
        break;
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <UART_SetConfig+0x4c4>)
 8004b32:	61bb      	str	r3, [r7, #24]
        break;
 8004b34:	e00c      	b.n	8004b50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fd fffd 	bl	8002b34 <HAL_RCC_GetSysClockFreq>
 8004b3a:	61b8      	str	r0, [r7, #24]
        break;
 8004b3c:	e008      	b.n	8004b50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e004      	b.n	8004b50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d018      	beq.n	8004b88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	085a      	lsrs	r2, r3, #1
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	441a      	add	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b0f      	cmp	r3, #15
 8004b6e:	d909      	bls.n	8004b84 <UART_SetConfig+0x4a0>
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b76:	d205      	bcs.n	8004b84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	e001      	b.n	8004b88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b94:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3720      	adds	r7, #32
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40007c00 	.word	0x40007c00
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	00f42400 	.word	0x00f42400

08004bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01a      	beq.n	8004cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004caa:	d10a      	bne.n	8004cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d00:	f7fc ffae 	bl	8001c60 <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d10e      	bne.n	8004d32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f831 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e027      	b.n	8004d82 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d10e      	bne.n	8004d5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f81b 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e011      	b.n	8004d82 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b09c      	sub	sp, #112	; 0x70
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	e0a7      	b.n	8004eec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	f000 80a3 	beq.w	8004eec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fc ff5b 	bl	8001c60 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x32>
 8004db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d13f      	bne.n	8004e3c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ddc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004de0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e6      	bne.n	8004dbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	663b      	str	r3, [r7, #96]	; 0x60
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e068      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d050      	beq.n	8004eec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e58:	d148      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e62:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
 8004e84:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e6      	bne.n	8004e64 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f023 0301 	bic.w	r3, r3, #1
 8004eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3308      	adds	r3, #8
 8004eb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eb6:	623a      	str	r2, [r7, #32]
 8004eb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	69f9      	ldr	r1, [r7, #28]
 8004ebc:	6a3a      	ldr	r2, [r7, #32]
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e5      	bne.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e010      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	f43f af48 	beq.w	8004d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3770      	adds	r7, #112	; 0x70
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b095      	sub	sp, #84	; 0x54
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f26:	e853 3f00 	ldrex	r3, [r3]
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004f3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e6      	bne.n	8004f1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3308      	adds	r3, #8
 8004f56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f023 0301 	bic.w	r3, r3, #1
 8004f66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e5      	bne.n	8004f50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d118      	bne.n	8004fbe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f023 0310 	bic.w	r3, r3, #16
 8004fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6979      	ldr	r1, [r7, #20]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e6      	bne.n	8004f8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004fd2:	bf00      	nop
 8004fd4:	3754      	adds	r7, #84	; 0x54
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff fb51 	bl	80046a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b088      	sub	sp, #32
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	e853 3f00 	ldrex	r3, [r3]
 800501e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	461a      	mov	r2, r3
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005034:	6979      	ldr	r1, [r7, #20]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	e841 2300 	strex	r3, r2, [r1]
 800503c:	613b      	str	r3, [r7, #16]
   return(result);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1e6      	bne.n	8005012 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff fb1d 	bl	8004690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005056:	bf00      	nop
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <DriverInit>:
 *	@param	**driver - main hardware driver object
 *	@param	*uart - user defined UART object
 *	@param	*tim - user defined timer object
 */
void DriverInit (void **driver, __UART_TYPE_DEF *uart, __TIMER_TYPE_DEF *tim)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b086      	sub	sp, #24
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	607a      	str	r2, [r7, #4]
	#if (DRV_USE_FREERTOS)
		*driver = pvPortMalloc(sizeof(Driver_t));
	#else
		*driver = malloc(sizeof(Driver_t));
 800506a:	f640 0018 	movw	r0, #2072	; 0x818
 800506e:	f002 fd8b 	bl	8007b88 <malloc>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	601a      	str	r2, [r3, #0]
	#endif

	Driver_t *drv = (Driver_t*)(*driver);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	617b      	str	r3, [r7, #20]

	#if (DRV_HAL_TIMER || DRV_LL_TIMER)
		/* Timer */
		drv->tim = tim;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	601a      	str	r2, [r3, #0]
		drv->timCount = 0;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
		xSemaphoreGive(drv->xSemaphoreTxBusy);

	#endif

    /* UART */
	drv->uart = uart;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	609a      	str	r2, [r3, #8]

		UART_DrvInit(drv);

	#endif

	ClearTxBuff(drv);
 8005092:	6978      	ldr	r0, [r7, #20]
 8005094:	f000 f8d0 	bl	8005238 <ClearTxBuff>
	ClearRxBuff(drv);
 8005098:	6978      	ldr	r0, [r7, #20]
 800509a:	f000 f99e 	bl	80053da <ClearRxBuff>

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
		/* UART Interrupts executable code */
		DISABLE_UART_CR1_TCIE(drv->uart);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b0:	601a      	str	r2, [r3, #0]
		ENABLE_UART_CR1_RXNEIE(drv->uart);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0220 	orr.w	r2, r2, #32
 80050c4:	601a      	str	r2, [r3, #0]
		DISABLE_UART_CR1_IDLEIE(drv->uart);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0210 	bic.w	r2, r2, #16
 80050d8:	601a      	str	r2, [r3, #0]
		LL_DMA_EnableStream(DMA_UART_RX, DMA_UART_RX_STREAM);

	#endif

	#if (DRV_HAL_TIMER || DRV_LL_TIMER)
		START_TIMER(drv->tim);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe faa2 	bl	8003628 <HAL_TIM_Base_Start_IT>
	#endif
}
 80050e4:	bf00      	nop
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <GetTimeMs>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Current time
 */
ui32 GetTimeMs (void *driver)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60fb      	str	r3, [r7, #12]

	#if (DRV_USE_FREERTOS)
		drv->timCount = xTaskGetTickCount();
	#endif

	return drv->timCount;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	685b      	ldr	r3, [r3, #4]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <TimerDRV_CallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void TimerDRV_CallBack (void *driver)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	605a      	str	r2, [r3, #4]

	#if (DRV_LL_TIMER)
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx overflow status (1 - ERROR | 0 - OK)
 */
ui8 UartTransmitData (void *driver, ui8 *data, ui16 size)
{
 800512a:	b480      	push	{r7}
 800512c:	b087      	sub	sp, #28
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
	Driver_t *drv = (Driver_t*)driver;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	613b      	str	r3, [r7, #16]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		/* Free space check */
		if (TX_FIFO_TOTAL_SIZE - ((drv->TxHead - drv->TxTail) & (TX_FIFO_TOTAL_SIZE - 1)) < size)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f8b3 240e 	ldrh.w	r2, [r3, #1038]	; 0x40e
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	b29b      	uxth	r3, r3
 800514c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005150:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	429a      	cmp	r2, r3
 8005158:	da01      	bge.n	800515e <UartTransmitData+0x34>
		{
			/* - - - - User TxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return 1;
 800515a:	2301      	movs	r3, #1
 800515c:	e02e      	b.n	80051bc <UartTransmitData+0x92>
		}

		ui16 count = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	82fb      	strh	r3, [r7, #22]
		while (count < size)
 8005162:	e01c      	b.n	800519e <UartTransmitData+0x74>
		{
			drv->TxBuffer[drv->TxHead++] = data[count++];
 8005164:	8afb      	ldrh	r3, [r7, #22]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	82fa      	strh	r2, [r7, #22]
 800516a:	461a      	mov	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	441a      	add	r2, r3
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8005176:	1c59      	adds	r1, r3, #1
 8005178:	b288      	uxth	r0, r1
 800517a:	6939      	ldr	r1, [r7, #16]
 800517c:	f8a1 040e 	strh.w	r0, [r1, #1038]	; 0x40e
 8005180:	4619      	mov	r1, r3
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	440b      	add	r3, r1
 8005188:	731a      	strb	r2, [r3, #12]

			if (drv->TxHead >= TX_FIFO_TOTAL_SIZE)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8005190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005194:	d303      	bcc.n	800519e <UartTransmitData+0x74>
				drv->TxHead = 0;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2200      	movs	r2, #0
 800519a:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
		while (count < size)
 800519e:	8afa      	ldrh	r2, [r7, #22]
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d3de      	bcc.n	8005164 <UartTransmitData+0x3a>
		}

		ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051b8:	601a      	str	r2, [r3, #0]

		return 0;
 80051ba:	2300      	movs	r3, #0
		LL_DMA_EnableStream(DMA_UART_TX, DMA_UART_TX_STREAM);

		return 0;

	#endif
}
 80051bc:	4618      	mov	r0, r3
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <UART_DRV_TxCallBack>:
	/**	@brief	UART transfer completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void UART_DRV_TxCallBack (void *driver)
	{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
		Driver_t *drv = (Driver_t*)driver;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

		#endif

		#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)

			WRITE_UART_BYTE(drv->uart, drv->TxBuffer[drv->TxTail++] & (ui32)0xFF);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	b291      	uxth	r1, r2
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 80051e4:	461a      	mov	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	7b1a      	ldrb	r2, [r3, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

			if (drv->TxTail == TX_FIFO_TOTAL_SIZE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80051fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fe:	d103      	bne.n	8005208 <UART_DRV_TxCallBack+0x40>
				drv->TxTail = 0;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c

			if (drv->TxTail == drv->TxHead)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8b3 340e 	ldrh.w	r3, [r3, #1038]	; 0x40e
 8005214:	429a      	cmp	r2, r3
 8005216:	d109      	bne.n	800522c <UART_DRV_TxCallBack+0x64>
			{
				DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800522a:	601a      	str	r2, [r3, #0]

				/*  - - - - - - - - - - - - - - - - - - - - - - - */
			}

		#endif
	}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void ClearTxBuff (void *driver)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART || DRV_LL_DMA_UART)

		Driver_t *drv = (Driver_t*)driver;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]

		memset(drv->TxBuffer, 0, TX_FIFO_TOTAL_SIZE);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	330c      	adds	r3, #12
 8005248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f002 fcb0 	bl	8007bb4 <memset>
		drv->TxTail = 0;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
		drv->TxHead = 0;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e

	#else
		unused_(driver);
	#endif
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <GetAvailableBytes>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 GetAvailableBytes (void *driver)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	613b      	str	r3, [r7, #16]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->RxOverflowFlag)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <GetAvailableBytes+0x1c>
			return 0xFFFF;
 8005282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005286:	e01b      	b.n	80052c0 <GetAvailableBytes+0x54>

		ui16 rxHead = drv->RxHead;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 800528e:	82fb      	strh	r3, [r7, #22]
		ui16 rxTail = drv->RxTail;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 8005296:	81fb      	strh	r3, [r7, #14]

		ui16 count = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	82bb      	strh	r3, [r7, #20]
		while (rxHead != rxTail)
 800529c:	e00b      	b.n	80052b6 <GetAvailableBytes+0x4a>
		{
			if (!rxHead)
 800529e:	8afb      	ldrh	r3, [r7, #22]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <GetAvailableBytes+0x3e>
				rxHead = RX_FIFO_TOTAL_SIZE;
 80052a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052a8:	82fb      	strh	r3, [r7, #22]

			rxHead--;
 80052aa:	8afb      	ldrh	r3, [r7, #22]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	82fb      	strh	r3, [r7, #22]
			count++;
 80052b0:	8abb      	ldrh	r3, [r7, #20]
 80052b2:	3301      	adds	r3, #1
 80052b4:	82bb      	strh	r3, [r7, #20]
		while (rxHead != rxTail)
 80052b6:	8afa      	ldrh	r2, [r7, #22]
 80052b8:	89fb      	ldrh	r3, [r7, #14]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d1ef      	bne.n	800529e <GetAvailableBytes+0x32>
		}

		return count;
 80052be:	8abb      	ldrh	r3, [r7, #20]
		/* UART DMA executable code */
		drv->RxHead = RX_FIFO_TOTAL_SIZE - GET_DMA_RX_COUNTER(DMA_UART_RX);
		return (drv->RxHead - drv->RxTail) & (RX_FIFO_TOTAL_SIZE - 1);

	#endif
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Receipt status (0 - receiving in progress | 1 - receive completed)
 */
ui8 UartReceiveByte (void *driver, ui8 *data)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
	Driver_t *drv = (Driver_t*)driver;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60fb      	str	r3, [r7, #12]

	#if (DRV_HAL_NVIC_UART || DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->RxTail == drv->RxHead)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f8b3 2810 	ldrh.w	r2, [r3, #2064]	; 0x810
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d101      	bne.n	80052ee <UartReceiveByte+0x22>
		{
			/*  - - - - User Receive-Complete Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return 1;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e022      	b.n	8005334 <UartReceiveByte+0x68>
		}

		*data = drv->RxBuffer[drv->RxTail++];
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	b291      	uxth	r1, r2
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	f8a2 1810 	strh.w	r1, [r2, #2064]	; 0x810
 80052fe:	461a      	mov	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	701a      	strb	r2, [r3, #0]

		if (drv->RxTail >= RX_FIFO_TOTAL_SIZE)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005316:	d303      	bcc.n	8005320 <UartReceiveByte+0x54>
		   drv->RxTail = 0;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810

		if (drv->RxOverflowFlag == 1)  // Reset the overflow flag
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 8005326:	2b01      	cmp	r3, #1
 8005328:	d103      	bne.n	8005332 <UartReceiveByte+0x66>
			drv->RxOverflowFlag = 0;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

		return 0;  // Rx ring buffer isn't empty
 8005332:	2300      	movs	r3, #0
		}

		return 0;

	#endif
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_DRV_RxCallBack>:
	/**	@brief	UART receive completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void UART_DRV_RxCallBack (void *driver)
	{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
		Driver_t *drv = (Driver_t*)driver;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]

		if ((drv->RxHead - drv->RxTail == RX_FIFO_TOTAL_SIZE - 1) ||
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 8005352:	461a      	mov	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <UART_DRV_RxCallBack+0x38>
			(drv->RxTail - drv->RxHead == 1))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f8b3 3810 	ldrh.w	r3, [r3, #2064]	; 0x810
 800536a:	461a      	mov	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 8005372:	1ad3      	subs	r3, r2, r3
		if ((drv->RxHead - drv->RxTail == RX_FIFO_TOTAL_SIZE - 1) ||
 8005374:	2b01      	cmp	r3, #1
 8005376:	d10d      	bne.n	8005394 <UART_DRV_RxCallBack+0x54>
		{
			/* - - - - User RxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */

			(void)READ_UART_BYTE(drv->uart);  // Prevent hardware overflow error (USART_ISR_ORE)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24

			if (drv->RxOverflowFlag == 0)  // Set the overflow flag
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3814 	ldrb.w	r3, [r3, #2068]	; 0x814
 8005386:	2b00      	cmp	r3, #0
 8005388:	d121      	bne.n	80053ce <UART_DRV_RxCallBack+0x8e>
				drv->RxOverflowFlag = 1;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814

			return;
 8005392:	e01c      	b.n	80053ce <UART_DRV_RxCallBack+0x8e>
		}

		drv->RxBuffer[drv->RxHead++] = READ_UART_BYTE(drv->uart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	b291      	uxth	r1, r2
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	f8a2 1812 	strh.w	r1, [r2, #2066]	; 0x812
 80053ac:	4619      	mov	r1, r3
 80053ae:	b2c2      	uxtb	r2, r0
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	440b      	add	r3, r1
 80053b4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410

		if (drv->RxHead >= RX_FIFO_TOTAL_SIZE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3812 	ldrh.w	r3, [r3, #2066]	; 0x812
 80053be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c2:	d305      	bcc.n	80053d0 <UART_DRV_RxCallBack+0x90>
			drv->RxHead = 0;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
 80053cc:	e000      	b.n	80053d0 <UART_DRV_RxCallBack+0x90>
			return;
 80053ce:	bf00      	nop
	}
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void ClearRxBuff (void *driver)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
	Driver_t *drv = (Driver_t*)driver;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	60fb      	str	r3, [r7, #12]

	memset(drv->RxBuffer, 0, RX_FIFO_TOTAL_SIZE);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80053ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 fbde 	bl	8007bb4 <memset>
	drv->RxTail = 0;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f8a3 2810 	strh.w	r2, [r3, #2064]	; 0x810
	drv->RxHead = 0;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f8a3 2812 	strh.w	r2, [r3, #2066]	; 0x812
	drv->RxOverflowFlag = 0;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2814 	strb.w	r2, [r3, #2068]	; 0x814
}
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UartTransmitDebugData>:
 *
 *	@param	*data - debug data
 *	@param	length - size of debug data
 */
void UartTransmitDebugData (char *data, ui16 length)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
	#if (DRV_USE_UART_DEBUG)
		#if (DRV_HAL_NVIC_UART || DRV_HAL_DMA_UART)

			/* UART HAL executable code */
			HAL_UART_Transmit(DEBUG_SERIAL_PORT, (ui8*)data, length, 100);
 8005424:	887a      	ldrh	r2, [r7, #2]
 8005426:	2364      	movs	r3, #100	; 0x64
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4803      	ldr	r0, [pc, #12]	; (8005438 <UartTransmitDebugData+0x20>)
 800542c:	f7fe fdc4 	bl	8003fb8 <HAL_UART_Transmit>
				LL_USART_TransmitData8(DEBUG_SERIAL_PORT, data[count++]);
			}

		#endif
	#endif
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	200017c4 	.word	0x200017c4

0800543c <SBGC32_Init>:
 * 	@param	*generalSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
TxRxStatus_t SBGC32_Init (GeneralSBGC_t *generalSBGC)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af04      	add	r7, sp, #16
 8005442:	6078      	str	r0, [r7, #4]
		return SBGC32_ManualInit(generalSBGC, PortTransmitData, PortReceiveByte, GetAvailableBytes,
								 PrintDebugData, GetTimeMs, sprintf, SBGC_PROTOCOL_V2);

	#elif (SBGC_USE_STM32_DRIVER)

		DriverInit(&generalSBGC->Drv, SBGC_SERIAL_PORT, SBGC_REFERENCE_TIMER);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0c      	ldr	r2, [pc, #48]	; (8005478 <SBGC32_Init+0x3c>)
 8005448:	490c      	ldr	r1, [pc, #48]	; (800547c <SBGC32_Init+0x40>)
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fe07 	bl	800505e <DriverInit>

		return SBGC32_ManualInit(generalSBGC, UartTransmitData, UartReceiveByte, GetAvailableBytes,
 8005450:	2324      	movs	r3, #36	; 0x24
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <SBGC32_Init+0x44>)
 8005456:	9302      	str	r3, [sp, #8]
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <SBGC32_Init+0x48>)
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <SBGC32_Init+0x4c>)
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <SBGC32_Init+0x50>)
 8005462:	4a0b      	ldr	r2, [pc, #44]	; (8005490 <SBGC32_Init+0x54>)
 8005464:	490b      	ldr	r1, [pc, #44]	; (8005494 <SBGC32_Init+0x58>)
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f001 f8b8 	bl	80065dc <SBGC32_ManualInit>
 800546c:	4603      	mov	r3, r0
								 UartTransmitDebugData, GetTimeMs, sprintf, SBGC_PROTOCOL_V2);

	#else
		#error "When using a custom driver, use the SBGC32_ManualInit() function!"
	#endif
}
 800546e:	4618      	mov	r0, r3
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	200016f0 	.word	0x200016f0
 800547c:	2000173c 	.word	0x2000173c
 8005480:	08008a45 	.word	0x08008a45
 8005484:	080050ed 	.word	0x080050ed
 8005488:	08005419 	.word	0x08005419
 800548c:	0800526d 	.word	0x0800526d
 8005490:	080052cd 	.word	0x080052cd
 8005494:	0800512b 	.word	0x0800512b

08005498 <InitAdjVar>:
	 *
	 *	@param 	*adjVarGeneral - general adjustable variables structure
	 *	@param	ID - adjustable variable ID
	 */
	void InitAdjVar (AdjVarGeneral_t *adjVarGeneral, AdjVarID_t ID)
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
		memset(adjVarGeneral, 0, sizeof(AdjVarGeneral_t));
 80054a4:	2230      	movs	r2, #48	; 0x30
 80054a6:	2100      	movs	r1, #0
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f002 fb83 	bl	8007bb4 <memset>

		adjVarGeneral->ID = ID;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	78fa      	ldrb	r2, [r7, #3]
 80054b2:	701a      	strb	r2, [r3, #0]

		#if (SBGC_ADJ_VARS_NAMES)
			memcpy(adjVarGeneral->name, adjVarsReferenceInfoArray[ID].name, ADJ_VAR_MAX_NAME_LENGTH);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	1c58      	adds	r0, r3, #1
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	222c      	movs	r2, #44	; 0x2c
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <InitAdjVar+0x80>)
 80054c2:	4413      	add	r3, r2
 80054c4:	3301      	adds	r3, #1
 80054c6:	221e      	movs	r2, #30
 80054c8:	4619      	mov	r1, r3
 80054ca:	f002 fb65 	bl	8007b98 <memcpy>
		#endif

		adjVarGeneral->minValue = adjVarsReferenceInfoArray[ID].minValue;
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	4a11      	ldr	r2, [pc, #68]	; (8005518 <InitAdjVar+0x80>)
 80054d2:	212c      	movs	r1, #44	; 0x2c
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	4413      	add	r3, r2
 80054da:	3320      	adds	r3, #32
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	b21a      	sxth	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	841a      	strh	r2, [r3, #32]
		adjVarGeneral->maxValue = adjVarsReferenceInfoArray[ID].maxValue;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	4a0c      	ldr	r2, [pc, #48]	; (8005518 <InitAdjVar+0x80>)
 80054e8:	212c      	movs	r1, #44	; 0x2c
 80054ea:	fb01 f303 	mul.w	r3, r1, r3
 80054ee:	4413      	add	r3, r2
 80054f0:	3324      	adds	r3, #36	; 0x24
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	b21a      	sxth	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	845a      	strh	r2, [r3, #34]	; 0x22
		adjVarGeneral->varType = adjVarsReferenceInfoArray[ID].varType;
 80054fa:	78fb      	ldrb	r3, [r7, #3]
 80054fc:	4a06      	ldr	r2, [pc, #24]	; (8005518 <InitAdjVar+0x80>)
 80054fe:	212c      	movs	r1, #44	; 0x2c
 8005500:	fb01 f303 	mul.w	r3, r1, r3
 8005504:	4413      	add	r3, r2
 8005506:	3328      	adds	r3, #40	; 0x28
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	2000000c 	.word	0x2000000c

0800551c <EditAdjVarValue>:
 *
 *	@param 	*adjVarGeneral - general adjustable variables structure
 *	@param	value - new value of adjustable variable
 */
void EditAdjVarValue (AdjVarGeneral_t *adjVarGeneral, i32 value)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
	/* Values border checking */
	value = constrain_(value, adjVarGeneral->minValue, adjVarGeneral->maxValue);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800552c:	461a      	mov	r2, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	4293      	cmp	r3, r2
 8005532:	da03      	bge.n	800553c <EditAdjVarValue+0x20>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800553a:	e007      	b.n	800554c <EditAdjVarValue+0x30>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8005542:	461a      	mov	r2, r3
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4293      	cmp	r3, r2
 8005548:	bfa8      	it	ge
 800554a:	4613      	movge	r3, r2
 800554c:	603b      	str	r3, [r7, #0]

	if (adjVarGeneral->value == value)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d00b      	beq.n	8005570 <EditAdjVarValue+0x54>
		return;

	adjVarGeneral->value = value;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	629a      	str	r2, [r3, #40]	; 0x28
	adjVarGeneral->changeFlag = CHANGED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	adjVarGeneral->saveFlag = NOT_SAVED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800556e:	e000      	b.n	8005572 <EditAdjVarValue+0x56>
		return;
 8005570:	bf00      	nop
}
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <SBGC32_SetAdjVarValues>:
 *	@param	adjVarQuan - number of adjustable variables
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_SetAdjVarValues (GeneralSBGC_t *generalSBGC, AdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b0c6      	sub	sp, #280	; 0x118
 8005580:	af00      	add	r7, sp, #0
 8005582:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800558a:	6018      	str	r0, [r3, #0]
 800558c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005590:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005594:	6019      	str	r1, [r3, #0]
 8005596:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800559a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800559e:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_SET_ADJ_VARS_VAL);
 80055a0:	f107 0310 	add.w	r3, r7, #16
 80055a4:	211f      	movs	r1, #31
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f804 	bl	80065b4 <InitCmdWrite>

	ui8 numParams = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	WriteByte(&cmd, numParams);  // temporary offset
 80055b2:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80055b6:	f107 0310 	add.w	r3, r7, #16
 80055ba:	4611      	mov	r1, r2
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 ff15 	bl	80063ec <WriteByte>

	for (ui8 i = 0; i < adjVarQuan; i++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80055c8:	e063      	b.n	8005692 <SBGC32_SetAdjVarValues+0x116>
		if (adjVarGeneral[i].changeFlag == CHANGED)
 80055ca:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80055ce:	4613      	mov	r3, r2
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	4413      	add	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	461a      	mov	r2, r3
 80055d8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4413      	add	r3, r2
 80055e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d14d      	bne.n	8005688 <SBGC32_SetAdjVarValues+0x10c>
		{
			WriteByte(&cmd, adjVarGeneral[i].ID);
 80055ec:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	461a      	mov	r2, r3
 80055fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80055fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4413      	add	r3, r2
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	f107 0310 	add.w	r3, r7, #16
 800560c:	4611      	mov	r1, r2
 800560e:	4618      	mov	r0, r3
 8005610:	f000 feec 	bl	80063ec <WriteByte>
			WriteLong(&cmd, adjVarGeneral[i].value);
 8005614:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8005618:	4613      	mov	r3, r2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4413      	add	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	461a      	mov	r2, r3
 8005622:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005626:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4413      	add	r3, r2
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	461a      	mov	r2, r3
 8005632:	f107 0310 	add.w	r3, r7, #16
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f000 ff47 	bl	80064cc <WriteLong>

			adjVarGeneral[i].changeFlag = NOT_CHANGED;
 800563e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8005642:	4613      	mov	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	4413      	add	r3, r2
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	461a      	mov	r2, r3
 800564c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005650:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4413      	add	r3, r2
 8005658:	2200      	movs	r2, #0
 800565a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			adjVarGeneral[i].saveFlag = NOT_SAVED;
 800565e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	461a      	mov	r2, r3
 800566c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005670:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4413      	add	r3, r2
 8005678:	2201      	movs	r2, #1
 800567a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			numParams++;
 800567e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005682:	3301      	adds	r3, #1
 8005684:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (ui8 i = 0; i < adjVarQuan; i++)
 8005688:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800568c:	3301      	adds	r3, #1
 800568e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005692:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005696:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800569a:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d392      	bcc.n	80055ca <SBGC32_SetAdjVarValues+0x4e>
		}

	if (numParams == 0)  // No variables changed
 80056a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d107      	bne.n	80056bc <SBGC32_SetAdjVarValues+0x140>
		return generalSBGC->_parserCurrentStatus;
 80056ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80056b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 80056ba:	e024      	b.n	8005706 <SBGC32_SetAdjVarValues+0x18a>

	cmd.payload[0] = numParams;  // re-writing numParams
 80056bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80056c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056c4:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80056c8:	705a      	strb	r2, [r3, #1]
	SBGC32_TX(generalSBGC, &cmd);
 80056ca:	f107 0210 	add.w	r2, r7, #16
 80056ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80056d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056d6:	4611      	mov	r1, r2
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	f000 fa7f 	bl	8005bdc <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 80056de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80056e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056e6:	781a      	ldrb	r2, [r3, #0]
 80056e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80056ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80056f0:	4611      	mov	r1, r2
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	f001 f940 	bl	8006978 <SBGC32_CheckConfirmation>
	return generalSBGC->_parserCurrentStatus;
 80056f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80056fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8005706:	4618      	mov	r0, r3
 8005708:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <SBGC32_GetAdjVarValues>:
 *	@param	adjVarQuan - number of adjustable variables
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_GetAdjVarValues (GeneralSBGC_t *generalSBGC, AdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b0c6      	sub	sp, #280	; 0x118
 8005714:	af00      	add	r7, sp, #0
 8005716:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800571a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800571e:	6018      	str	r0, [r3, #0]
 8005720:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005724:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005728:	6019      	str	r1, [r3, #0]
 800572a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800572e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8005732:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_GET_ADJ_VARS_VAL);
 8005734:	f107 0310 	add.w	r3, r7, #16
 8005738:	2140      	movs	r1, #64	; 0x40
 800573a:	4618      	mov	r0, r3
 800573c:	f000 ff3a 	bl	80065b4 <InitCmdWrite>

	ui8 firstGroupQuan = (adjVarQuan > 40) ? 40 : adjVarQuan;
 8005740:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005744:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b28      	cmp	r3, #40	; 0x28
 800574c:	bf28      	it	cs
 800574e:	2328      	movcs	r3, #40	; 0x28
 8005750:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

	WriteByte(&cmd, firstGroupQuan);  // numParams
 8005754:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 8005758:	f107 0310 	add.w	r3, r7, #16
 800575c:	4611      	mov	r1, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fe44 	bl	80063ec <WriteByte>

	ui8 count = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	while (count < firstGroupQuan)
 800576a:	e017      	b.n	800579c <SBGC32_GetAdjVarValues+0x8c>
		WriteByte(&cmd, adjVarGeneral[count++].ID);
 800576c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 8005776:	461a      	mov	r2, r3
 8005778:	4613      	mov	r3, r2
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	4413      	add	r3, r2
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	461a      	mov	r2, r3
 8005782:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005786:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4413      	add	r3, r2
 800578e:	781a      	ldrb	r2, [r3, #0]
 8005790:	f107 0310 	add.w	r3, r7, #16
 8005794:	4611      	mov	r1, r2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fe28 	bl	80063ec <WriteByte>
	while (count < firstGroupQuan)
 800579c:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80057a0:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d3e1      	bcc.n	800576c <SBGC32_GetAdjVarValues+0x5c>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_SET_ADJ_VARS_VAL), "Adj Var Values vol. 1:") == TX_RX_OK)
 80057a8:	f107 0110 	add.w	r1, r7, #16
 80057ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80057b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057b4:	221f      	movs	r2, #31
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	f000 fca9 	bl	800610e <SBGC32_TX_RX>
 80057bc:	4603      	mov	r3, r0
 80057be:	4619      	mov	r1, r3
 80057c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80057c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057c8:	4a66      	ldr	r2, [pc, #408]	; (8005964 <SBGC32_GetAdjVarValues+0x254>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	f001 fa66 	bl	8006c9c <CheckReceipt>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f040 80b9 	bne.w	800594a <SBGC32_GetAdjVarValues+0x23a>
	{
		SkipBytes(&cmd, 1);  // skip ui8 numParams
 80057d8:	f107 0310 	add.w	r3, r7, #16
 80057dc:	2101      	movs	r1, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fed3 	bl	800658a <SkipBytes>

		for (ui8 i = 0; i < firstGroupQuan; i++)
 80057e4:	2300      	movs	r3, #0
 80057e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80057ea:	e01f      	b.n	800582c <SBGC32_GetAdjVarValues+0x11c>
		{
			SkipBytes(&cmd, 1);  // skip ui8 ID
 80057ec:	f107 0310 	add.w	r3, r7, #16
 80057f0:	2101      	movs	r1, #1
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fec9 	bl	800658a <SkipBytes>
			adjVarGeneral[i].value = ReadLong(&cmd);
 80057f8:	f107 0310 	add.w	r3, r7, #16
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fe87 	bl	8006510 <ReadLong>
 8005802:	4601      	mov	r1, r0
 8005804:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8005808:	4613      	mov	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	4413      	add	r3, r2
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	461a      	mov	r2, r3
 8005812:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005816:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4413      	add	r3, r2
 800581e:	460a      	mov	r2, r1
 8005820:	629a      	str	r2, [r3, #40]	; 0x28
		for (ui8 i = 0; i < firstGroupQuan; i++)
 8005822:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005826:	3301      	adds	r3, #1
 8005828:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800582c:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 8005830:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8005834:	429a      	cmp	r2, r3
 8005836:	d3d9      	bcc.n	80057ec <SBGC32_GetAdjVarValues+0xdc>
		}

		if (adjVarQuan > 40)
 8005838:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800583c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b28      	cmp	r3, #40	; 0x28
 8005844:	f240 8081 	bls.w	800594a <SBGC32_GetAdjVarValues+0x23a>
		{
			InitCmdWrite(&cmd, CMD_GET_ADJ_VARS_VAL);  // command re-init
 8005848:	f107 0310 	add.w	r3, r7, #16
 800584c:	2140      	movs	r1, #64	; 0x40
 800584e:	4618      	mov	r0, r3
 8005850:	f000 feb0 	bl	80065b4 <InitCmdWrite>
			WriteByte(&cmd, adjVarQuan - 40);
 8005854:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005858:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	3b28      	subs	r3, #40	; 0x28
 8005860:	b2da      	uxtb	r2, r3
 8005862:	f107 0310 	add.w	r3, r7, #16
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fdbf 	bl	80063ec <WriteByte>

			while (count < adjVarQuan)
 800586e:	e017      	b.n	80058a0 <SBGC32_GetAdjVarValues+0x190>
				WriteByte(&cmd, adjVarGeneral[count++].ID);
 8005870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 800587a:	461a      	mov	r2, r3
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	461a      	mov	r2, r3
 8005886:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800588a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4413      	add	r3, r2
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	f107 0310 	add.w	r3, r7, #16
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f000 fda6 	bl	80063ec <WriteByte>
			while (count < adjVarQuan)
 80058a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058a4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80058a8:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d3de      	bcc.n	8005870 <SBGC32_GetAdjVarValues+0x160>

			if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_SET_ADJ_VARS_VAL), "Adj Var Values vol. 2:") == TX_RX_OK)
 80058b2:	f107 0110 	add.w	r1, r7, #16
 80058b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058be:	221f      	movs	r2, #31
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	f000 fc24 	bl	800610e <SBGC32_TX_RX>
 80058c6:	4603      	mov	r3, r0
 80058c8:	4619      	mov	r1, r3
 80058ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80058ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058d2:	4a25      	ldr	r2, [pc, #148]	; (8005968 <SBGC32_GetAdjVarValues+0x258>)
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	f001 f9e1 	bl	8006c9c <CheckReceipt>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d134      	bne.n	800594a <SBGC32_GetAdjVarValues+0x23a>
			{
				SkipBytes(&cmd, 1);  // skip ui8 numParams
 80058e0:	f107 0310 	add.w	r3, r7, #16
 80058e4:	2101      	movs	r1, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 fe4f 	bl	800658a <SkipBytes>

				for (ui8 i = 0; i < adjVarQuan - 40; i++)
 80058ec:	2300      	movs	r3, #0
 80058ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 80058f2:	e020      	b.n	8005936 <SBGC32_GetAdjVarValues+0x226>
				{
					SkipBytes(&cmd, 1);  // skip ui8 ID
 80058f4:	f107 0310 	add.w	r3, r7, #16
 80058f8:	2101      	movs	r1, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fe45 	bl	800658a <SkipBytes>
					adjVarGeneral[i + 40].value = ReadLong(&cmd);
 8005900:	f107 0310 	add.w	r3, r7, #16
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fe03 	bl	8006510 <ReadLong>
 800590a:	4601      	mov	r1, r0
 800590c:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 800591c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005920:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	4413      	add	r3, r2
 8005928:	460a      	mov	r2, r1
 800592a:	629a      	str	r2, [r3, #40]	; 0x28
				for (ui8 i = 0; i < adjVarQuan - 40; i++)
 800592c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8005930:	3301      	adds	r3, #1
 8005932:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8005936:	f897 2115 	ldrb.w	r2, [r7, #277]	; 0x115
 800593a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800593e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	3b28      	subs	r3, #40	; 0x28
 8005946:	429a      	cmp	r2, r3
 8005948:	dbd4      	blt.n	80058f4 <SBGC32_GetAdjVarValues+0x1e4>
				}
			}
		}
	}

	return generalSBGC->_parserCurrentStatus;
 800594a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800594e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8005958:	4618      	mov	r0, r3
 800595a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	0800c584 	.word	0x0800c584
 8005968:	0800c59c 	.word	0x0800c59c

0800596c <FormatBoardVersion>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	boardVer - BoardInfo_t.boardVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatBoardVersion (GeneralSBGC_t *generalSBGC, ui8 boardVer, char* pBuff)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	460b      	mov	r3, r1
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	72fb      	strb	r3, [r7, #11]
	ui8 majorVer = boardVer / 10;
 800597a:	7afb      	ldrb	r3, [r7, #11]
 800597c:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <FormatBoardVersion+0x48>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	08db      	lsrs	r3, r3, #3
 8005984:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = boardVer % 10;
 8005986:	7afa      	ldrb	r2, [r7, #11]
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <FormatBoardVersion+0x48>)
 800598a:	fba3 1302 	umull	r1, r3, r3, r2
 800598e:	08d9      	lsrs	r1, r3, #3
 8005990:	460b      	mov	r3, r1
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	75bb      	strb	r3, [r7, #22]
	generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	699c      	ldr	r4, [r3, #24]
 80059a0:	7dfa      	ldrb	r2, [r7, #23]
 80059a2:	7dbb      	ldrb	r3, [r7, #22]
 80059a4:	4904      	ldr	r1, [pc, #16]	; (80059b8 <FormatBoardVersion+0x4c>)
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	47a0      	blx	r4
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd90      	pop	{r4, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	cccccccd 	.word	0xcccccccd
 80059b8:	0800c5ec 	.word	0x0800c5ec

080059bc <FormatFirmwareVersion>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	firmwareVer - BoardInfo_t.firmwareVer
 *	@param	*pBuff - buffer to write
 */
static inline void FormatFirmwareVersion (GeneralSBGC_t *generalSBGC, ui16 firmwareVer, char* pBuff)
{
 80059bc:	b590      	push	{r4, r7, lr}
 80059be:	b089      	sub	sp, #36	; 0x24
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	460b      	mov	r3, r1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	817b      	strh	r3, [r7, #10]
	ui8 majorVer = firmwareVer / 1000;
 80059ca:	897b      	ldrh	r3, [r7, #10]
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <FormatFirmwareVersion+0x88>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	099b      	lsrs	r3, r3, #6
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = (firmwareVer % 1000) / 10;
 80059d8:	897b      	ldrh	r3, [r7, #10]
 80059da:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <FormatFirmwareVersion+0x88>)
 80059dc:	fba2 1203 	umull	r1, r2, r2, r3
 80059e0:	0992      	lsrs	r2, r2, #6
 80059e2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80059e6:	fb01 f202 	mul.w	r2, r1, r2
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <FormatFirmwareVersion+0x8c>)
 80059f0:	fba2 2303 	umull	r2, r3, r2, r3
 80059f4:	08db      	lsrs	r3, r3, #3
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	75bb      	strb	r3, [r7, #22]
	ui8 betaVer = firmwareVer % 10;
 80059fa:	897a      	ldrh	r2, [r7, #10]
 80059fc:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <FormatFirmwareVersion+0x8c>)
 80059fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005a02:	08d9      	lsrs	r1, r3, #3
 8005a04:	460b      	mov	r3, r1
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	757b      	strb	r3, [r7, #21]

	if (betaVer != 0)
 8005a12:	7d7b      	ldrb	r3, [r7, #21]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <FormatFirmwareVersion+0x72>
		generalSBGC->SprintfFunc(pBuff, "%u.%ub%u", majorVer, minorVer, betaVer);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	699c      	ldr	r4, [r3, #24]
 8005a1c:	7dfa      	ldrb	r2, [r7, #23]
 8005a1e:	7db9      	ldrb	r1, [r7, #22]
 8005a20:	7d7b      	ldrb	r3, [r7, #21]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	460b      	mov	r3, r1
 8005a26:	4909      	ldr	r1, [pc, #36]	; (8005a4c <FormatFirmwareVersion+0x90>)
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	47a0      	blx	r4

	else
		generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
}
 8005a2c:	e006      	b.n	8005a3c <FormatFirmwareVersion+0x80>
		generalSBGC->SprintfFunc(pBuff, "%u.%u", majorVer, minorVer);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	699c      	ldr	r4, [r3, #24]
 8005a32:	7dfa      	ldrb	r2, [r7, #23]
 8005a34:	7dbb      	ldrb	r3, [r7, #22]
 8005a36:	4906      	ldr	r1, [pc, #24]	; (8005a50 <FormatFirmwareVersion+0x94>)
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	47a0      	blx	r4
}
 8005a3c:	bf00      	nop
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd90      	pop	{r4, r7, pc}
 8005a44:	10624dd3 	.word	0x10624dd3
 8005a48:	cccccccd 	.word	0xcccccccd
 8005a4c:	0800c5f4 	.word	0x0800c5f4
 8005a50:	0800c5ec 	.word	0x0800c5ec

08005a54 <SaveUnexpectedCommand>:
#if (UNEXP_CMD_BUFFER)

	/**	@note	Private function
	 */
	static void SaveUnexpectedCommand (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
	{
 8005a54:	b490      	push	{r4, r7}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
			if (serialCommand->commandID == CMD_CONFIRM)
				return;

		#endif

		generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffHead++] = serialCommand->commandID;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8005a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a68:	b299      	uxth	r1, r3
 8005a6a:	1c4b      	adds	r3, r1, #1
 8005a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a70:	b298      	uxth	r0, r3
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 8005a78:	f360 0309 	bfi	r3, r0, #0, #10
 8005a7c:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781a      	ldrb	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	440b      	add	r3, r1
 8005a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffHead++] = serialCommand->payloadSize;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8005a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a96:	b299      	uxth	r1, r3
 8005a98:	1c4b      	adds	r3, r1, #1
 8005a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9e:	b298      	uxth	r0, r3
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 8005aa6:	f360 0309 	bfi	r3, r0, #0, #10
 8005aaa:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	440b      	add	r3, r1
 8005ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		for (ui16 i = 0; i < serialCommand->payloadSize; i++)
 8005abc:	2300      	movs	r3, #0
 8005abe:	81fb      	strh	r3, [r7, #14]
 8005ac0:	e01b      	b.n	8005afa <SaveUnexpectedCommand+0xa6>
			generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffHead++] = serialCommand->payload[i];
 8005ac2:	89f8      	ldrh	r0, [r7, #14]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8005aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ace:	b299      	uxth	r1, r3
 8005ad0:	1c4b      	adds	r3, r1, #1
 8005ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ad6:	b29c      	uxth	r4, r3
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 8005ade:	f364 0309 	bfi	r3, r4, #0, #10
 8005ae2:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	4403      	add	r3, r0
 8005aea:	785a      	ldrb	r2, [r3, #1]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	440b      	add	r3, r1
 8005af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		for (ui16 i = 0; i < serialCommand->payloadSize; i++)
 8005af4:	89fb      	ldrh	r3, [r7, #14]
 8005af6:	3301      	adds	r3, #1
 8005af8:	81fb      	strh	r3, [r7, #14]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	89fa      	ldrh	r2, [r7, #14]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d3dc      	bcc.n	8005ac2 <SaveUnexpectedCommand+0x6e>
	}
 8005b08:	bf00      	nop
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc90      	pop	{r4, r7}
 8005b12:	4770      	bx	lr

08005b14 <ReadUnexpectedCommand>:


	/**	@note	Private function
	 */
	static void ReadUnexpectedCommand (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
	{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
		serialCommand->commandID = generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffTail++];
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8005b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b28:	b299      	uxth	r1, r3
 8005b2a:	1c4b      	adds	r3, r1, #1
 8005b2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b30:	b298      	uxth	r0, r3
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8005b38:	f360 0309 	bfi	r3, r0, #0, #10
 8005b3c:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
 8005b40:	460a      	mov	r2, r1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4413      	add	r3, r2
 8005b46:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	701a      	strb	r2, [r3, #0]

		serialCommand->payloadSize = generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffTail++];
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8005b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b58:	b299      	uxth	r1, r3
 8005b5a:	1c4b      	adds	r3, r1, #1
 8005b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b60:	b298      	uxth	r0, r3
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8005b68:	f360 0309 	bfi	r3, r0, #0, #10
 8005b6c:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
 8005b70:	460a      	mov	r2, r1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

		for (ui16 i = 0; i < serialCommand->payloadSize; i++)
 8005b80:	2300      	movs	r3, #0
 8005b82:	81fb      	strh	r3, [r7, #14]
 8005b84:	e01c      	b.n	8005bc0 <ReadUnexpectedCommand+0xac>
			serialCommand->payload[i] = generalSBGC->_unexpectedCommandsBuff[generalSBGC->_unexpectedCommandsBuffTail++];
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8005b8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b90:	b299      	uxth	r1, r3
 8005b92:	1c4b      	adds	r3, r1, #1
 8005b94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b98:	b298      	uxth	r0, r3
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 8005ba0:	f360 0309 	bfi	r3, r0, #0, #10
 8005ba4:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
 8005ba8:	89fb      	ldrh	r3, [r7, #14]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	440a      	add	r2, r1
 8005bae:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	460a      	mov	r2, r1
 8005bb8:	705a      	strb	r2, [r3, #1]
		for (ui16 i = 0; i < serialCommand->payloadSize; i++)
 8005bba:	89fb      	ldrh	r3, [r7, #14]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	81fb      	strh	r3, [r7, #14]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	89fa      	ldrh	r2, [r7, #14]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d3db      	bcc.n	8005b86 <ReadUnexpectedCommand+0x72>
	}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <SBGC32_TX>:
 *			to be transmitted
 *
 *	@return	Transmission status
 */
TxRxStatus_t SBGC32_TX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand)
{
 8005bdc:	b590      	push	{r4, r7, lr}
 8005bde:	b0c5      	sub	sp, #276	; 0x114
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005be6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bea:	6018      	str	r0, [r3, #0]
 8005bec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bf0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bf4:	6019      	str	r1, [r3, #0]
	ui8 buff [MAX_BUFF_SIZE];
	ui32 currentTime;

	buff[0] = generalSBGC->protocolVersion;
 8005bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bfa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	7f1a      	ldrb	r2, [r3, #28]
 8005c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c0a:	701a      	strb	r2, [r3, #0]
	buff[1] = serialCommand->commandID;
 8005c0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	781a      	ldrb	r2, [r3, #0]
 8005c18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c20:	705a      	strb	r2, [r3, #1]
	buff[2] = serialCommand->payloadSize;
 8005c22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c26:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8005c30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c38:	709a      	strb	r2, [r3, #2]
	buff[3] = buff[1] + buff[2];
 8005c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c42:	785a      	ldrb	r2, [r3, #1]
 8005c44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4c:	789b      	ldrb	r3, [r3, #2]
 8005c4e:	4413      	add	r3, r2
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5a:	70da      	strb	r2, [r3, #3]

	memcpy(&buff[4], serialCommand->payload, serialCommand->payloadSize);
 8005c5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c60:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	1c59      	adds	r1, r3, #1
 8005c68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c6c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c76:	461a      	mov	r2, r3
 8005c78:	f107 0308 	add.w	r3, r7, #8
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 ff8a 	bl	8007b98 <memcpy>

	/* ui8 size = real size current serialCommand */
	ui8 size = serialCommand->payloadSize + 4 + ((generalSBGC->protocolVersion == PR2_START_CHARACTER) ? 2 : 1);
 8005c84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005c92:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005c96:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	7f12      	ldrb	r2, [r2, #28]
 8005c9e:	2a24      	cmp	r2, #36	; 0x24
 8005ca0:	d101      	bne.n	8005ca6 <SBGC32_TX+0xca>
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	e000      	b.n	8005ca8 <SBGC32_TX+0xcc>
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4413      	add	r3, r2
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	3304      	adds	r3, #4
 8005cae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	if (generalSBGC->protocolVersion == PR1_START_CHARACTER)
 8005cb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cb6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	7f1b      	ldrb	r3, [r3, #28]
 8005cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8005cc0:	d120      	bne.n	8005d04 <SBGC32_TX+0x128>
		buff[4 + serialCommand->payloadSize] = Modulo256_Calculate(serialCommand->payload, serialCommand->payloadSize);
 8005cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cc6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	1c5a      	adds	r2, r3, #1
 8005cce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cd2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005cdc:	b299      	uxth	r1, r3
 8005cde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ce2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005cec:	1d1c      	adds	r4, r3, #4
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f001 f882 	bl	8006df8 <Modulo256_Calculate>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d00:	551a      	strb	r2, [r3, r4]
 8005d02:	e035      	b.n	8005d70 <SBGC32_TX+0x194>

	else
	{
		ui16 CRC16_Res = CRC16_Calculate(&buff[1], (4 + serialCommand->payloadSize - 1));
 8005d04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3303      	adds	r3, #3
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 f890 	bl	8006e46 <CRC16_Calculate>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		buff[4 + serialCommand->payloadSize] = CRC16_Res & 0x00FF;
 8005d2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8005d40:	b2d1      	uxtb	r1, r2
 8005d42:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005d46:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005d4a:	54d1      	strb	r1, [r2, r3]
		buff[5 + serialCommand->payloadSize] = (CRC16_Res >> 8) & 0x00FF;
 8005d4c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005d50:	0a1b      	lsrs	r3, r3, #8
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8005d62:	3305      	adds	r3, #5
 8005d64:	b2d1      	uxtb	r1, r2
 8005d66:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005d6a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005d6e:	54d1      	strb	r1, [r2, r3]
	}

	currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005d70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005d80:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	4610      	mov	r0, r2
 8005d8a:	4798      	blx	r3
 8005d8c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
	while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8005d90:	e029      	b.n	8005de6 <SBGC32_TX+0x20a>
	{
		if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txTimeout)
 8005d92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005da2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	4610      	mov	r0, r2
 8005dac:	4798      	blx	r3
 8005dae:	4602      	mov	r2, r0
 8005db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d30f      	bcc.n	8005de6 <SBGC32_TX+0x20a>
		{
			generalSBGC->_txErrorsCount++;
 8005dc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	861a      	strh	r2, [r3, #48]	; 0x30
			return TX_BUFFER_OVERFLOW_ERROR;  // aka timeout error
 8005de2:	2309      	movs	r3, #9
 8005de4:	e015      	b.n	8005e12 <SBGC32_TX+0x236>
	while (generalSBGC->TxFunc(generalSBGC->Drv, buff, size))
 8005de6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8005df6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	6810      	ldr	r0, [r2, #0]
 8005dfe:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8005e02:	b292      	uxth	r2, r2
 8005e04:	f107 0108 	add.w	r1, r7, #8
 8005e08:	4798      	blx	r3
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1c0      	bne.n	8005d92 <SBGC32_TX+0x1b6>
		}
	}

	return TX_RX_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}

08005e1c <SBGC32_RX>:
 *			time for receiving one whole SerialCommand
 *
 *	@return	TX_RX_OK or last state of lastParserError variable
 */
TxRxStatus_t SBGC32_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, ui32 timeout)
{
 8005e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e20:	b08c      	sub	sp, #48	; 0x30
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	607a      	str	r2, [r7, #4]
	serialCommand->readPos = 0;  // Prepare for reading
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102

	#if (UNEXP_CMD_BUFFER)

		if (generalSBGC->_unexpectedCommandsBuffTail != generalSBGC->_unexpectedCommandsBuffHead)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8005e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8b3 3436 	ldrh.w	r3, [r3, #1078]	; 0x436
 8005e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d005      	beq.n	8005e5a <SBGC32_RX+0x3e>
		/* Read next keeping in _unexpectedCommandsBuff serial command */
		{
			ReadUnexpectedCommand(generalSBGC, serialCommand);
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f7ff fe5f 	bl	8005b14 <ReadUnexpectedCommand>
			return RX_BUFFERED_COMMAND;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e154      	b.n	8006104 <SBGC32_RX+0x2e8>
		ui8 startSim;
		ui8 headBuff [3];  /* Header buffer:
		headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */
		ui16 availableBytes;

		TxRxStatus_t lastParserError = RX_START_PARSE;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		ParserState_t parserState = STATE_IDLE;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		/* Launch timer */
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4798      	blx	r3
 8005e72:	62b8      	str	r0, [r7, #40]	; 0x28

		while (1)
		{
			switch (parserState)
 8005e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d070      	beq.n	8005f5e <SBGC32_RX+0x142>
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	f300 8132 	bgt.w	80060e6 <SBGC32_RX+0x2ca>
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	dc02      	bgt.n	8005e8c <SBGC32_RX+0x70>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	da03      	bge.n	8005e92 <SBGC32_RX+0x76>
 8005e8a:	e12c      	b.n	80060e6 <SBGC32_RX+0x2ca>
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d024      	beq.n	8005eda <SBGC32_RX+0xbe>
 8005e90:	e129      	b.n	80060e6 <SBGC32_RX+0x2ca>
			{
				/* Waiting start byte */
				case STATE_IDLE :
				case STATE_RESYNC :
				{
					if (generalSBGC->AvailableBytesFunc(generalSBGC->Drv))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	6812      	ldr	r2, [r2, #0]
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4798      	blx	r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d016      	beq.n	8005ed2 <SBGC32_RX+0xb6>
					{
						startSim = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	75fb      	strb	r3, [r7, #23]

						generalSBGC->RxFunc(generalSBGC->Drv, &startSim);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	f107 0117 	add.w	r1, r7, #23
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4798      	blx	r3

						if (startSim == generalSBGC->protocolVersion)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	7f1a      	ldrb	r2, [r3, #28]
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d103      	bne.n	8005eca <SBGC32_RX+0xae>
							parserState = STATE_CHECK_HEADER;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					}

					else
						lastParserError = RX_EMPTY_BUFF_ERROR;

					break;  // Passing to next state
 8005ec8:	e10d      	b.n	80060e6 <SBGC32_RX+0x2ca>
							lastParserError = RX_START_PARSE;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;  // Passing to next state
 8005ed0:	e109      	b.n	80060e6 <SBGC32_RX+0x2ca>
						lastParserError = RX_EMPTY_BUFF_ERROR;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					break;  // Passing to next state
 8005ed8:	e105      	b.n	80060e6 <SBGC32_RX+0x2ca>
				}

				/* Waiting whole header */
				case STATE_CHECK_HEADER :
				{
					availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4798      	blx	r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	837b      	strh	r3, [r7, #26]

					if ((availableBytes >= 3) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8005eea:	8b7b      	ldrh	r3, [r7, #26]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d91d      	bls.n	8005f2c <SBGC32_RX+0x110>
 8005ef0:	8b7b      	ldrh	r3, [r7, #26]
 8005ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d018      	beq.n	8005f2c <SBGC32_RX+0x110>
						for (ui8 i = 0; i < 3; i++)
 8005efa:	2300      	movs	r3, #0
 8005efc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005f00:	e00f      	b.n	8005f22 <SBGC32_RX+0x106>
							generalSBGC->RxFunc(generalSBGC->Drv, &headBuff[i]);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	6810      	ldr	r0, [r2, #0]
 8005f0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005f0e:	f107 0114 	add.w	r1, r7, #20
 8005f12:	440a      	add	r2, r1
 8005f14:	4611      	mov	r1, r2
 8005f16:	4798      	blx	r3
						for (ui8 i = 0; i < 3; i++)
 8005f18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8005f22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d9eb      	bls.n	8005f02 <SBGC32_RX+0xe6>
 8005f2a:	e003      	b.n	8005f34 <SBGC32_RX+0x118>

					else
					{
						lastParserError = RX_BUFFER_REALTIME_ERROR;
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						break;
 8005f32:	e0d8      	b.n	80060e6 <SBGC32_RX+0x2ca>
					}

					if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8005f34:	7d3a      	ldrb	r2, [r7, #20]
 8005f36:	7d7b      	ldrb	r3, [r7, #21]
 8005f38:	4413      	add	r3, r2
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	7dbb      	ldrb	r3, [r7, #22]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d102      	bne.n	8005f48 <SBGC32_RX+0x12c>
						(headBuff[0] == 0))
 8005f42:	7d3b      	ldrb	r3, [r7, #20]
					if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d106      	bne.n	8005f56 <SBGC32_RX+0x13a>
					{
						lastParserError = RX_HEADER_CHECKSUM_ERROR;
 8005f48:	2305      	movs	r3, #5
 8005f4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						parserState = STATE_RESYNC;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						break;
 8005f54:	e0c7      	b.n	80060e6 <SBGC32_RX+0x2ca>
					}

					parserState = STATE_CHECK_PAYLOAD;
 8005f56:	2303      	movs	r3, #3
 8005f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					break;  // Passing to next state
 8005f5c:	e0c3      	b.n	80060e6 <SBGC32_RX+0x2ca>
				}

				/* Waiting whole payload and checksum */
				case STATE_CHECK_PAYLOAD :
				{
 8005f5e:	466b      	mov	r3, sp
 8005f60:	469a      	mov	sl, r3
					ui8 checksumSize = ((generalSBGC->protocolVersion == PR2_START_CHARACTER) ? 2 : 1);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	7f1b      	ldrb	r3, [r3, #28]
 8005f66:	2b24      	cmp	r3, #36	; 0x24
 8005f68:	d101      	bne.n	8005f6e <SBGC32_RX+0x152>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e000      	b.n	8005f70 <SBGC32_RX+0x154>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					ui8 complexBuff [3 + headBuff[1] + checksumSize];  // (Header + payload + checksum) buffer
 8005f74:	7d7b      	ldrb	r3, [r7, #21]
 8005f76:	1cda      	adds	r2, r3, #3
 8005f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f7c:	18d1      	adds	r1, r2, r3
 8005f7e:	1e4b      	subs	r3, r1, #1
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	460a      	mov	r2, r1
 8005f84:	2300      	movs	r3, #0
 8005f86:	4614      	mov	r4, r2
 8005f88:	461d      	mov	r5, r3
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	00eb      	lsls	r3, r5, #3
 8005f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f98:	00e2      	lsls	r2, r4, #3
 8005f9a:	460a      	mov	r2, r1
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4690      	mov	r8, r2
 8005fa0:	4699      	mov	r9, r3
 8005fa2:	f04f 0200 	mov.w	r2, #0
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	3307      	adds	r3, #7
 8005fba:	08db      	lsrs	r3, r3, #3
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	ebad 0d03 	sub.w	sp, sp, r3
 8005fc2:	466b      	mov	r3, sp
 8005fc4:	3300      	adds	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]

					availableBytes = generalSBGC->AvailableBytesFunc(generalSBGC->Drv);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	837b      	strh	r3, [r7, #26]

					if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != RX_BUFFER_OVERFLOW_FLAG))
 8005fd8:	8b7a      	ldrh	r2, [r7, #26]
 8005fda:	7d7b      	ldrb	r3, [r7, #21]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe2:	440b      	add	r3, r1
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	db22      	blt.n	800602e <SBGC32_RX+0x212>
 8005fe8:	8b7b      	ldrh	r3, [r7, #26]
 8005fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d01d      	beq.n	800602e <SBGC32_RX+0x212>
						for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8005ff8:	e00f      	b.n	800601a <SBGC32_RX+0x1fe>
							generalSBGC->RxFunc(generalSBGC->Drv, &complexBuff[i + 3]);  // Offset from header space
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	6810      	ldr	r0, [r2, #0]
 8006002:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006006:	3203      	adds	r2, #3
 8006008:	69f9      	ldr	r1, [r7, #28]
 800600a:	440a      	add	r2, r1
 800600c:	4611      	mov	r1, r2
 800600e:	4798      	blx	r3
						for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 8006010:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006014:	3301      	adds	r3, #1
 8006016:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800601a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800601e:	7d7b      	ldrb	r3, [r7, #21]
 8006020:	4619      	mov	r1, r3
 8006022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006026:	440b      	add	r3, r1
 8006028:	429a      	cmp	r2, r3
 800602a:	dbe6      	blt.n	8005ffa <SBGC32_RX+0x1de>
 800602c:	e003      	b.n	8006036 <SBGC32_RX+0x21a>

					else
					{
						lastParserError = RX_BUFFER_REALTIME_ERROR;
 800602e:	2304      	movs	r3, #4
 8006030:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						break;
 8006034:	e056      	b.n	80060e4 <SBGC32_RX+0x2c8>
					}

					/* Checksum checking */
					if (!(checksumSize - 1))  // If SBGC_PROTOCOL_V1
 8006036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800603a:	2b01      	cmp	r3, #1
 800603c:	d115      	bne.n	800606a <SBGC32_RX+0x24e>
					{
						if (complexBuff[3 + headBuff[1]] != Modulo256_Calculate(&complexBuff[3], headBuff[1]))
 800603e:	7d7b      	ldrb	r3, [r7, #21]
 8006040:	3303      	adds	r3, #3
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	5cd6      	ldrb	r6, [r2, r3]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	3303      	adds	r3, #3
 800604a:	7d7a      	ldrb	r2, [r7, #21]
 800604c:	b292      	uxth	r2, r2
 800604e:	4611      	mov	r1, r2
 8006050:	4618      	mov	r0, r3
 8006052:	f000 fed1 	bl	8006df8 <Modulo256_Calculate>
 8006056:	4603      	mov	r3, r0
 8006058:	429e      	cmp	r6, r3
 800605a:	d031      	beq.n	80060c0 <SBGC32_RX+0x2a4>
						{
							lastParserError = RX_PAYLOAD_CHECKSUM_ERROR;
 800605c:	2306      	movs	r3, #6
 800605e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							parserState = STATE_RESYNC;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
 8006068:	e03c      	b.n	80060e4 <SBGC32_RX+0x2c8>
						}
					}

					else
					{
						memcpy(complexBuff, headBuff, 3);
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	461a      	mov	r2, r3
 800606e:	f107 0314 	add.w	r3, r7, #20
 8006072:	8819      	ldrh	r1, [r3, #0]
 8006074:	789b      	ldrb	r3, [r3, #2]
 8006076:	8011      	strh	r1, [r2, #0]
 8006078:	7093      	strb	r3, [r2, #2]
						ui16 CRC_Res = CRC16_Calculate(complexBuff, headBuff[1] + 3);
 800607a:	7d7b      	ldrb	r3, [r7, #21]
 800607c:	b29b      	uxth	r3, r3
 800607e:	3303      	adds	r3, #3
 8006080:	b29b      	uxth	r3, r3
 8006082:	4619      	mov	r1, r3
 8006084:	69f8      	ldr	r0, [r7, #28]
 8006086:	f000 fede 	bl	8006e46 <CRC16_Calculate>
 800608a:	4603      	mov	r3, r0
 800608c:	833b      	strh	r3, [r7, #24]

						if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 800608e:	8b3b      	ldrh	r3, [r7, #24]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	7d7a      	ldrb	r2, [r7, #21]
 8006094:	3203      	adds	r2, #3
 8006096:	69f9      	ldr	r1, [r7, #28]
 8006098:	5c8a      	ldrb	r2, [r1, r2]
 800609a:	4293      	cmp	r3, r2
 800609c:	d010      	beq.n	80060c0 <SBGC32_RX+0x2a4>
						   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 800609e:	8b3b      	ldrh	r3, [r7, #24]
 80060a0:	0a1b      	lsrs	r3, r3, #8
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	7d7a      	ldrb	r2, [r7, #21]
 80060a8:	3204      	adds	r2, #4
 80060aa:	69f9      	ldr	r1, [r7, #28]
 80060ac:	5c8a      	ldrb	r2, [r1, r2]
						if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d006      	beq.n	80060c0 <SBGC32_RX+0x2a4>
						{
							lastParserError = RX_PAYLOAD_CHECKSUM_ERROR;
 80060b2:	2306      	movs	r3, #6
 80060b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							parserState = STATE_RESYNC;
 80060b8:	2301      	movs	r3, #1
 80060ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							break;
 80060be:	e011      	b.n	80060e4 <SBGC32_RX+0x2c8>
						}
					}

					/* Data passed all checks. Filling the serialCommand struct */
					serialCommand->commandID = (SBGC_Command_t)headBuff[0];
 80060c0:	7d3a      	ldrb	r2, [r7, #20]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	701a      	strb	r2, [r3, #0]
					memcpy(serialCommand->payload, &complexBuff[3], headBuff[1]);
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	1c58      	adds	r0, r3, #1
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	3303      	adds	r3, #3
 80060ce:	7d7a      	ldrb	r2, [r7, #21]
 80060d0:	4619      	mov	r1, r3
 80060d2:	f001 fd61 	bl	8007b98 <memcpy>
					serialCommand->payloadSize = headBuff[1];
 80060d6:	7d7a      	ldrb	r2, [r7, #21]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101

					return TX_RX_OK;  // Incoming command was received fine
 80060de:	2300      	movs	r3, #0
 80060e0:	46d5      	mov	sp, sl
 80060e2:	e00f      	b.n	8006104 <SBGC32_RX+0x2e8>
 80060e4:	46d5      	mov	sp, sl
				}
			}

			/* Timeout checking */
			if ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) >= timeout)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	4610      	mov	r0, r2
 80060f0:	4798      	blx	r3
 80060f2:	4602      	mov	r2, r0
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	f63f aeba 	bhi.w	8005e74 <SBGC32_RX+0x58>
				return lastParserError;
 8006100:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
		}
	}
}
 8006104:	4618      	mov	r0, r3
 8006106:	3730      	adds	r7, #48	; 0x30
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800610e <SBGC32_TX_RX>:
 *	@param	cmdID - SBGC32 command identifier
 *
 *	@return	Request response result
 */
TxRxStatus_t SBGC32_TX_RX (GeneralSBGC_t *generalSBGC, SerialCommand_t *serialCommand, SBGC_Command_t cmdID)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b088      	sub	sp, #32
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	4613      	mov	r3, r2
 800611a:	71fb      	strb	r3, [r7, #7]
	/* Send request */
	if (SBGC32_TX(generalSBGC, serialCommand) != TX_RX_OK)
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff fd5c 	bl	8005bdc <SBGC32_TX>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <SBGC32_TX_RX+0x20>
		return TX_BUFFER_OVERFLOW_ERROR;
 800612a:	2309      	movs	r3, #9
 800612c:	e09a      	b.n	8006264 <SBGC32_TX_RX+0x156>

	else
	{
		#if (UNEXP_CMD_BUFFER)
			ui16 unexpCmdShiftTemp = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	83fb      	strh	r3, [r7, #30]
		#endif

		TxRxStatus_t lastParserStatus;
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	4610      	mov	r0, r2
 800613c:	4798      	blx	r3
 800613e:	61b8      	str	r0, [r7, #24]

		while (1)
		{
			lastParserStatus = SBGC32_RX(generalSBGC, serialCommand, generalSBGC->rxTimeout);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	461a      	mov	r2, r3
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fe67 	bl	8005e1c <SBGC32_RX>
 800614e:	4603      	mov	r3, r0
 8006150:	75fb      	strb	r3, [r7, #23]

			/* Has correct command parsed */
			if (((lastParserStatus == TX_RX_OK) || (lastParserStatus == RX_BUFFERED_COMMAND)) &&
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <SBGC32_TX_RX+0x50>
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d11d      	bne.n	800619a <SBGC32_TX_RX+0x8c>
			    (serialCommand->commandID == cmdID || cmdID == 0))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	781b      	ldrb	r3, [r3, #0]
			if (((lastParserStatus == TX_RX_OK) || (lastParserStatus == RX_BUFFERED_COMMAND)) &&
 8006162:	79fa      	ldrb	r2, [r7, #7]
 8006164:	429a      	cmp	r2, r3
 8006166:	d002      	beq.n	800616e <SBGC32_TX_RX+0x60>
			    (serialCommand->commandID == cmdID || cmdID == 0))
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d115      	bne.n	800619a <SBGC32_TX_RX+0x8c>
			{
				#if (UNEXP_CMD_BUFFER)
					generalSBGC->_unexpectedCommandsBuffTail -= unexpCmdShiftTemp;  // Return buffer tail
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8006174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006178:	b29b      	uxth	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	8bfb      	ldrh	r3, [r7, #30]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	b29b      	uxth	r3, r3
 8006182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006186:	b299      	uxth	r1, r3
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 800618e:	f361 0309 	bfi	r3, r1, #0, #10
 8006192:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
				#endif

				return lastParserStatus;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
 8006198:	e064      	b.n	8006264 <SBGC32_TX_RX+0x156>
			}

			#if (UNEXP_CMD_BUFFER)

				/* Has wrong command parsed */
				else if (
 800619a:	7dfb      	ldrb	r3, [r7, #23]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <SBGC32_TX_RX+0x98>
						#if (UNEXP_CMD_ALWAYS_SAVE)
							((lastParserStatus == TX_RX_OK) || (lastParserStatus == RX_BUFFERED_COMMAND)) &&
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d12d      	bne.n	8006202 <SBGC32_TX_RX+0xf4>
						#else
							(lastParserStatus == TX_RX_OK) &&
						#endif

							(serialCommand->commandID != cmdID))
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
							((lastParserStatus == TX_RX_OK) || (lastParserStatus == RX_BUFFERED_COMMAND)) &&
 80061aa:	79fa      	ldrb	r2, [r7, #7]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d028      	beq.n	8006202 <SBGC32_TX_RX+0xf4>
				{
					SaveUnexpectedCommand(generalSBGC, serialCommand);
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff fc4e 	bl	8005a54 <SaveUnexpectedCommand>

					if (lastParserStatus == RX_BUFFERED_COMMAND)
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d121      	bne.n	8006202 <SBGC32_TX_RX+0xf4>
					{
						generalSBGC->_unexpectedCommandsBuffTail += serialCommand->payloadSize + 2;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 80061c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	4413      	add	r3, r2
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3302      	adds	r3, #2
 80061da:	b29b      	uxth	r3, r3
 80061dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061e0:	b299      	uxth	r1, r3
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 80061e8:	f361 0309 	bfi	r3, r1, #0, #10
 80061ec:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
						unexpCmdShiftTemp += serialCommand->payloadSize + 2;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	8bfb      	ldrh	r3, [r7, #30]
 80061fa:	4413      	add	r3, r2
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3302      	adds	r3, #2
 8006200:	83fb      	strh	r3, [r7, #30]
				}

			#endif

			/* Timeout checking */
			if ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) >= generalSBGC->txrxTimeout)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	4610      	mov	r0, r2
 800620c:	4798      	blx	r3
 800620e:	4602      	mov	r2, r0
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	1ad2      	subs	r2, r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	429a      	cmp	r2, r3
 800621a:	d391      	bcc.n	8006140 <SBGC32_TX_RX+0x32>
			{
				generalSBGC->_missedCommandCount++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8b3 3438 	ldrh.w	r3, [r3, #1080]	; 0x438
 8006222:	3301      	adds	r3, #1
 8006224:	b29a      	uxth	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438

				#if (UNEXP_CMD_BUFFER)
					generalSBGC->_unexpectedCommandsBuffTail -= unexpCmdShiftTemp;  // Return buffer tail
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8b3 3434 	ldrh.w	r3, [r3, #1076]	; 0x434
 8006232:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006236:	b29b      	uxth	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	8bfb      	ldrh	r3, [r7, #30]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	b29b      	uxth	r3, r3
 8006240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006244:	b299      	uxth	r1, r3
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 800624c:	f361 0309 	bfi	r3, r1, #0, #10
 8006250:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
				#endif

				if (serialCommand->commandID != cmdID)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	79fa      	ldrb	r2, [r7, #7]
 800625a:	429a      	cmp	r2, r3
 800625c:	d001      	beq.n	8006262 <SBGC32_TX_RX+0x154>
					return RX_TIMEOUT_ERROR;
 800625e:	2308      	movs	r3, #8
 8006260:	e000      	b.n	8006264 <SBGC32_TX_RX+0x156>

				return lastParserStatus;
 8006262:	7dfb      	ldrb	r3, [r7, #23]
			}
		}
	}
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <ConvertWithPM>:
 *	@param	parserMap - data type required for correct parsing
 *
 *	@return	size of written data
 */
ui8 ConvertWithPM (void *pDestination, const void *pSource, ui8 size, ParserMap_t parserMap)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4611      	mov	r1, r2
 8006278:	461a      	mov	r2, r3
 800627a:	460b      	mov	r3, r1
 800627c:	71fb      	strb	r3, [r7, #7]
 800627e:	4613      	mov	r3, r2
 8006280:	71bb      	strb	r3, [r7, #6]
	if (size == 0)
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <ConvertWithPM+0x20>
		return 0;
 8006288:	2300      	movs	r3, #0
 800628a:	e00c      	b.n	80062a6 <ConvertWithPM+0x3a>

	memcpy(pDestination, pSource, size);
 800628c:	79fb      	ldrb	r3, [r7, #7]
 800628e:	461a      	mov	r2, r3
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f001 fc80 	bl	8007b98 <memcpy>
	SwapBytesInStruct((ui8*)pDestination, size, parserMap);
 8006298:	79ba      	ldrb	r2, [r7, #6]
 800629a:	79fb      	ldrb	r3, [r7, #7]
 800629c:	4619      	mov	r1, r3
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f862 	bl	8006368 <SwapBytesInStruct>
	return size;
 80062a4:	79fb      	ldrb	r3, [r7, #7]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <WriteBuff>:
 * 	@param	*buff - write data
 * 	@param	size - write data size
 * 	@param	parserMap - data type required for correct parsing
 */
void WriteBuff (SerialCommand_t *cmd, const void *buff, ui8 size, ParserMap_t parserMap)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	4611      	mov	r1, r2
 80062ba:	461a      	mov	r2, r3
 80062bc:	460b      	mov	r3, r1
 80062be:	71fb      	strb	r3, [r7, #7]
 80062c0:	4613      	mov	r3, r2
 80062c2:	71bb      	strb	r3, [r7, #6]
	if (cmd->payloadSize > MAX_BUFF_SIZE - size)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80062ca:	461a      	mov	r2, r3
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80062d2:	429a      	cmp	r2, r3
 80062d4:	dc16      	bgt.n	8006304 <WriteBuff+0x56>
		return;  // data will not fit
	
	cmd->payloadSize += ConvertWithPM(&cmd->payload[cmd->payloadSize], buff, size, parserMap);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80062dc:	461a      	mov	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	1c58      	adds	r0, r3, #1
 80062e4:	79bb      	ldrb	r3, [r7, #6]
 80062e6:	79fa      	ldrb	r2, [r7, #7]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	f7ff ffbf 	bl	800626c <ConvertWithPM>
 80062ee:	4603      	mov	r3, r0
 80062f0:	461a      	mov	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80062f8:	4413      	add	r3, r2
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8006302:	e000      	b.n	8006306 <WriteBuff+0x58>
		return;  // data will not fit
 8006304:	bf00      	nop
}
 8006306:	3710      	adds	r7, #16
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <ReadBuff>:
 *	@param	*buff - read data buffer
 *	@param	size - read data size
 *	@param	parserMap - data type required for correct parsing
 */
void ReadBuff (SerialCommand_t *cmd, void *buff, ui8 size, ParserMap_t parserMap)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4611      	mov	r1, r2
 8006318:	461a      	mov	r2, r3
 800631a:	460b      	mov	r3, r1
 800631c:	71fb      	strb	r3, [r7, #7]
 800631e:	4613      	mov	r3, r2
 8006320:	71bb      	strb	r3, [r7, #6]
	if (size > (MAX_BUFF_SIZE - cmd->readPos))
 8006322:	79fa      	ldrb	r2, [r7, #7]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800632a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800632e:	429a      	cmp	r2, r3
 8006330:	dc16      	bgt.n	8006360 <ReadBuff+0x54>
		return;  // data will not fit
	
	cmd->readPos += ConvertWithPM(buff, &cmd->payload[cmd->readPos], size, parserMap);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006338:	461a      	mov	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	1c59      	adds	r1, r3, #1
 8006340:	79bb      	ldrb	r3, [r7, #6]
 8006342:	79fa      	ldrb	r2, [r7, #7]
 8006344:	68b8      	ldr	r0, [r7, #8]
 8006346:	f7ff ff91 	bl	800626c <ConvertWithPM>
 800634a:	4603      	mov	r3, r0
 800634c:	461a      	mov	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006354:	4413      	add	r3, r2
 8006356:	b2da      	uxtb	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
 800635e:	e000      	b.n	8006362 <ReadBuff+0x56>
		return;  // data will not fit
 8006360:	bf00      	nop
}
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <SwapBytesInStruct>:
 *	@param 	*structure - structure buffer to bytes rearrange
 *	@param	size - structure buffer size
 *	@param	parserMap - data type required for correct parsing
 */
void SwapBytesInStruct (ui8 *structure, ui8 size, ParserMap_t parserMap)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
 8006374:	4613      	mov	r3, r2
 8006376:	70bb      	strb	r3, [r7, #2]
		unused_(structure);
		unused_(size);
		unused_(parserMap);

	#endif
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
void ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	2b04      	cmp	r3, #4
 8006396:	d80b      	bhi.n	80063b0 <ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	2b03      	cmp	r3, #3
 800639c:	d101      	bne.n	80063a2 <ToLittleEndian+0x1e>
 800639e:	2304      	movs	r3, #4
 80063a0:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 80063a2:	79fb      	ldrb	r3, [r7, #7]
 80063a4:	461a      	mov	r2, r3
 80063a6:	68f9      	ldr	r1, [r7, #12]
 80063a8:	68b8      	ldr	r0, [r7, #8]
 80063aa:	f001 fbf5 	bl	8007b98 <memcpy>
 80063ae:	e000      	b.n	80063b2 <ToLittleEndian+0x2e>
	if (size > 4) return;
 80063b0:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
void FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80063c6:	79fb      	ldrb	r3, [r7, #7]
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d80b      	bhi.n	80063e4 <FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d101      	bne.n	80063d6 <FromLittleEndian+0x1e>
 80063d2:	2304      	movs	r3, #4
 80063d4:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	461a      	mov	r2, r3
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f001 fbdb 	bl	8007b98 <memcpy>
 80063e2:	e000      	b.n	80063e6 <FromLittleEndian+0x2e>
	if (size > 4) return;
 80063e4:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <WriteByte>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	byte - byte to write
 */
void WriteByte (SerialCommand_t *cmd, const ui8 byte)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	70fb      	strb	r3, [r7, #3]
	if (cmd->payloadSize < MAX_BUFF_SIZE)
		cmd->payload[cmd->payloadSize++] = byte;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	b2d1      	uxtb	r1, r2
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	f882 1101 	strb.w	r1, [r2, #257]	; 0x101
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	78fa      	ldrb	r2, [r7, #3]
 8006410:	705a      	strb	r2, [r3, #1]
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <ReadByte>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Byte read
 */
ui8 ReadByte (SerialCommand_t *cmd)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
	return cmd->payload[cmd->readPos++];
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	b2d1      	uxtb	r1, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	f882 1102 	strb.w	r1, [r2, #258]	; 0x102
 8006436:	461a      	mov	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4413      	add	r3, r2
 800643c:	785b      	ldrb	r3, [r3, #1]
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <WriteWord>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	word - two bytes to write
 */
void WriteWord (SerialCommand_t *cmd, const ui16 word)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	807b      	strh	r3, [r7, #2]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 2)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800645c:	2bff      	cmp	r3, #255	; 0xff
 800645e:	d013      	beq.n	8006488 <WriteWord+0x3e>
	{
		ToLittleEndian(&word, &cmd->payload[cmd->payloadSize], 2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4413      	add	r3, r2
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	1cbb      	adds	r3, r7, #2
 8006470:	2202      	movs	r2, #2
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff ff86 	bl	8006384 <ToLittleEndian>
		cmd->payloadSize += 2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800647e:	3302      	adds	r3, #2
 8006480:	b2da      	uxtb	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <ReadWord>:
 *	@param 	*cmd - SerialCommand
 *
 *	@return	Word read
 */
ui16 ReadWord (SerialCommand_t *cmd)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	ui16 word;
	FromLittleEndian(&word, &cmd->payload[cmd->readPos], 2);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800649e:	461a      	mov	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	1c59      	adds	r1, r3, #1
 80064a6:	f107 030e 	add.w	r3, r7, #14
 80064aa:	2202      	movs	r2, #2
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff ff83 	bl	80063b8 <FromLittleEndian>
	cmd->readPos += 2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 80064b8:	3302      	adds	r3, #2
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return word;
 80064c2:	89fb      	ldrh	r3, [r7, #14]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <WriteLong>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	dword - four bytes to write
 */
void WriteLong (SerialCommand_t *cmd, const ui32 dword)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
	if (cmd->payloadSize <= MAX_BUFF_SIZE - 4)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80064dc:	2bfc      	cmp	r3, #252	; 0xfc
 80064de:	d813      	bhi.n	8006508 <WriteLong+0x3c>
	{
		ToLittleEndian(&dword, &cmd->payload[cmd->payloadSize], 4);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80064e6:	461a      	mov	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4413      	add	r3, r2
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	463b      	mov	r3, r7
 80064f0:	2204      	movs	r2, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff ff46 	bl	8006384 <ToLittleEndian>
		cmd->payloadSize += 4;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 80064fe:	3304      	adds	r3, #4
 8006500:	b2da      	uxtb	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	}
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <ReadLong>:
 *	@param	*cmd - SerialCommand
 *
 *	@return	Long read
 */
ui32 ReadLong (SerialCommand_t *cmd)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	ui32 dword;
	FromLittleEndian(&dword, &cmd->payload[cmd->readPos], 4);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	f107 030c 	add.w	r3, r7, #12
 800652a:	2204      	movs	r2, #4
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff ff43 	bl	80063b8 <FromLittleEndian>
	cmd->readPos += 4;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8006538:	3304      	adds	r3, #4
 800653a:	b2da      	uxtb	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	return dword;
 8006542:	68fb      	ldr	r3, [r7, #12]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <WriteEmptyBuff>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	size - size of filled with zeros data
 */
void WriteEmptyBuff (SerialCommand_t *cmd, ui8 size)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	70fb      	strb	r3, [r7, #3]
	memset(&cmd->payload[cmd->payloadSize], 0, size);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4413      	add	r3, r2
 8006564:	3301      	adds	r3, #1
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f001 fb22 	bl	8007bb4 <memset>
	cmd->payloadSize += size;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	4413      	add	r3, r2
 800657a:	b2da      	uxtb	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <SkipBytes>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	size - size of skipped data
 */
void SkipBytes (SerialCommand_t *cmd, ui8 size)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
	cmd->readPos += size;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 2102 	ldrb.w	r2, [r3, #258]	; 0x102
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	4413      	add	r3, r2
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <InitCmdWrite>:
 *
 *	@param	*cmd - SerialCommand
 *	@param	cmdID - SBGC32 command identifier
 */
void InitCmdWrite (SerialCommand_t *cmd, SBGC_Command_t cmdID)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	70fb      	strb	r3, [r7, #3]
	cmd->commandID = cmdID;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	701a      	strb	r2, [r3, #0]
	cmd->payloadSize = 0;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
}
 80065ce:	bf00      	nop
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <SBGC32_ManualInit>:
 */
TxRxStatus_t SBGC32_ManualInit (GeneralSBGC_t *generalSBGC, TxFunc_t TxFunc, RxFunc_t RxFunc,
								AvailableBytesFunc_t AvailableBytesFunc, TxDebugFunc_t TxDebugFunc,
								GetTimeFunc_t GetTimeFunc, SprintfFunc_t SprintfFunc,
								SBGC_ProtocolVersion_t protocolVersion)
{
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b0cb      	sub	sp, #300	; 0x12c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	f507 7494 	add.w	r4, r7, #296	; 0x128
 80065e6:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 80065ea:	6020      	str	r0, [r4, #0]
 80065ec:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80065f0:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 80065f4:	6001      	str	r1, [r0, #0]
 80065f6:	f507 7194 	add.w	r1, r7, #296	; 0x128
 80065fa:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 80065fe:	600a      	str	r2, [r1, #0]
 8006600:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006604:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8006608:	6013      	str	r3, [r2, #0]
	generalSBGC->TxFunc = TxFunc;
 800660a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800660e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006618:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	605a      	str	r2, [r3, #4]
	generalSBGC->RxFunc = RxFunc;
 8006620:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006624:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800662e:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8006632:	6812      	ldr	r2, [r2, #0]
 8006634:	609a      	str	r2, [r3, #8]
	generalSBGC->AvailableBytesFunc = AvailableBytesFunc;
 8006636:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800663a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006644:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	60da      	str	r2, [r3, #12]
	generalSBGC->TxDebugFunc = TxDebugFunc;
 800664c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006650:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800665a:	611a      	str	r2, [r3, #16]
	generalSBGC->GetTimeFunc = GetTimeFunc;
 800665c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006660:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800666a:	615a      	str	r2, [r3, #20]
	generalSBGC->SprintfFunc = SprintfFunc;
 800666c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006670:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800667a:	619a      	str	r2, [r3, #24]
	generalSBGC->protocolVersion = protocolVersion;
 800667c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006680:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800668a:	771a      	strb	r2, [r3, #28]

	generalSBGC->txTimeout = SBGC_TX_WAITING;
 800668c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006690:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2264      	movs	r2, #100	; 0x64
 8006698:	621a      	str	r2, [r3, #32]
	generalSBGC->rxTimeout = SBGC_RX_WAITING;
 800669a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800669e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24
	generalSBGC->txrxTimeout = SBGC_REQ_WAITING;
 80066aa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066b8:	629a      	str	r2, [r3, #40]	; 0x28

	generalSBGC->_txErrorsCount = 0;
 80066ba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2200      	movs	r2, #0
 80066c6:	861a      	strh	r2, [r3, #48]	; 0x30
	generalSBGC->_rxErrorsCount = 0;
 80066c8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2200      	movs	r2, #0
 80066d4:	865a      	strh	r2, [r3, #50]	; 0x32

	#if (UNEXP_CMD_BUFFER)

		generalSBGC->_unexpectedCommandsBuffTail = 0;
 80066d6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	f8b2 3434 	ldrh.w	r3, [r2, #1076]	; 0x434
 80066e4:	f36f 0309 	bfc	r3, #0, #10
 80066e8:	f8a2 3434 	strh.w	r3, [r2, #1076]	; 0x434
		generalSBGC->_unexpectedCommandsBuffHead = 0;
 80066ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80066f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	f8b2 3436 	ldrh.w	r3, [r2, #1078]	; 0x436
 80066fa:	f36f 0309 	bfc	r3, #0, #10
 80066fe:	f8a2 3436 	strh.w	r3, [r2, #1078]	; 0x436

	#endif

	generalSBGC->_missedCommandCount = 0;
 8006702:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006706:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2200      	movs	r2, #0
 800670e:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438

	/* Startup delay */
	ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8006712:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006716:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006722:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	6812      	ldr	r2, [r2, #0]
 800672a:	4610      	mov	r0, r2
 800672c:	4798      	blx	r3
 800672e:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	while ((generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime) < SBGC_STARTUP_DELAY);
 8006732:	bf00      	nop
 8006734:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006738:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8006744:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8006748:	6812      	ldr	r2, [r2, #0]
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
 8006750:	4602      	mov	r2, r0
 8006752:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800675c:	d3ea      	bcc.n	8006734 <SBGC32_ManualInit+0x158>

	/* Getting board information */
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO);
 800675e:	f107 0320 	add.w	r3, r7, #32
 8006762:	2156      	movs	r1, #86	; 0x56
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff ff25 	bl	80065b4 <InitCmdWrite>
	WriteWord(&cmd, 0);  // cfg = 0
 800676a:	f107 0320 	add.w	r3, r7, #32
 800676e:	2100      	movs	r1, #0
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fe6a 	bl	800644a <WriteWord>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO), "Board Info:") == TX_RX_OK)
 8006776:	f107 0120 	add.w	r1, r7, #32
 800677a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800677e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006782:	2256      	movs	r2, #86	; 0x56
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	f7ff fcc2 	bl	800610e <SBGC32_TX_RX>
 800678a:	4603      	mov	r3, r0
 800678c:	4619      	mov	r1, r3
 800678e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006792:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006796:	4a70      	ldr	r2, [pc, #448]	; (8006958 <SBGC32_ManualInit+0x37c>)
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	f000 fa7f 	bl	8006c9c <CheckReceipt>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d11a      	bne.n	80067da <SBGC32_ManualInit+0x1fe>
	{
		generalSBGC->_boardVersion = cmd.payload[0];
 80067a4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ac:	785a      	ldrb	r2, [r3, #1]
 80067ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80067b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		FromLittleEndian(&generalSBGC->_firmwareVersion, &cmd.payload[1], 2);
 80067bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80067c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 80067ca:	f107 0320 	add.w	r3, r7, #32
 80067ce:	3302      	adds	r3, #2
 80067d0:	2202      	movs	r2, #2
 80067d2:	4619      	mov	r1, r3
 80067d4:	f7ff fdf0 	bl	80063b8 <FromLittleEndian>
 80067d8:	e00e      	b.n	80067f8 <SBGC32_ManualInit+0x21c>
	}

	else
	{
		generalSBGC->_boardVersion = 0;
 80067da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80067de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		generalSBGC->_firmwareVersion = 0;
 80067ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80067ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	85da      	strh	r2, [r3, #46]	; 0x2e
	#if (SBGC_DEBUG_MODE)

		char boardVersionStr [5],
			 firmwareVersionStr [8];

		FormatBoardVersion(generalSBGC, generalSBGC->_boardVersion, boardVersionStr);
 80067f8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80067fc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8006806:	f107 0218 	add.w	r2, r7, #24
 800680a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800680e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	f7ff f8aa 	bl	800596c <FormatBoardVersion>
		FormatFirmwareVersion(generalSBGC, generalSBGC->_firmwareVersion, firmwareVersionStr);
 8006818:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800681c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
 8006824:	f107 0210 	add.w	r2, r7, #16
 8006828:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800682c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	f7ff f8c3 	bl	80059bc <FormatFirmwareVersion>

		PrintMessage(generalSBGC, TEXT_SIZE_(" \n"));
 8006836:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800683a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800683e:	2202      	movs	r2, #2
 8006840:	4946      	ldr	r1, [pc, #280]	; (800695c <SBGC32_ManualInit+0x380>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	f000 fb40 	bl	8006ec8 <PrintMessage>
		PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n"));
 8006848:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800684c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006850:	221f      	movs	r2, #31
 8006852:	4943      	ldr	r1, [pc, #268]	; (8006960 <SBGC32_ManualInit+0x384>)
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	f000 fb37 	bl	8006ec8 <PrintMessage>

		if (generalSBGC->_parserCurrentStatus == TX_RX_OK)
 800685a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800685e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8006868:	2b00      	cmp	r3, #0
 800686a:	d156      	bne.n	800691a <SBGC32_ManualInit+0x33e>
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("The system is ready to go!\n"));
 800686c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006870:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006874:	221b      	movs	r2, #27
 8006876:	493b      	ldr	r1, [pc, #236]	; (8006964 <SBGC32_ManualInit+0x388>)
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	f000 fb25 	bl	8006ec8 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)"Board Version: "));
 800687e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006882:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006886:	220f      	movs	r2, #15
 8006888:	4937      	ldr	r1, [pc, #220]	; (8006968 <SBGC32_ManualInit+0x38c>)
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	f000 fb1c 	bl	8006ec8 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_(boardVersionStr));
 8006890:	f107 0318 	add.w	r3, r7, #24
 8006894:	4618      	mov	r0, r3
 8006896:	f7f9 fcd3 	bl	8000240 <strlen>
 800689a:	4603      	mov	r3, r0
 800689c:	b29a      	uxth	r2, r3
 800689e:	f107 0118 	add.w	r1, r7, #24
 80068a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80068a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068aa:	6818      	ldr	r0, [r3, #0]
 80068ac:	f000 fb0c 	bl	8006ec8 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)" \n"));
 80068b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80068b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068b8:	2202      	movs	r2, #2
 80068ba:	4928      	ldr	r1, [pc, #160]	; (800695c <SBGC32_ManualInit+0x380>)
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	f000 fb03 	bl	8006ec8 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)"Firmware Version: "));
 80068c2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80068c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068ca:	2212      	movs	r2, #18
 80068cc:	4927      	ldr	r1, [pc, #156]	; (800696c <SBGC32_ManualInit+0x390>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	f000 fafa 	bl	8006ec8 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_(firmwareVersionStr));
 80068d4:	f107 0310 	add.w	r3, r7, #16
 80068d8:	4618      	mov	r0, r3
 80068da:	f7f9 fcb1 	bl	8000240 <strlen>
 80068de:	4603      	mov	r3, r0
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	f107 0110 	add.w	r1, r7, #16
 80068e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80068ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f000 faea 	bl	8006ec8 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_((char*)" \n"));
 80068f4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80068f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80068fc:	2202      	movs	r2, #2
 80068fe:	4917      	ldr	r1, [pc, #92]	; (800695c <SBGC32_ManualInit+0x380>)
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	f000 fae1 	bl	8006ec8 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\n"));
 8006906:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800690a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800690e:	2220      	movs	r2, #32
 8006910:	4917      	ldr	r1, [pc, #92]	; (8006970 <SBGC32_ManualInit+0x394>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	f000 fad8 	bl	8006ec8 <PrintMessage>
 8006918:	e011      	b.n	800693e <SBGC32_ManualInit+0x362>
		}

		else
		{
			PrintMessage(generalSBGC, TEXT_SIZE_("Communication Error!\n"));
 800691a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800691e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006922:	2215      	movs	r2, #21
 8006924:	4913      	ldr	r1, [pc, #76]	; (8006974 <SBGC32_ManualInit+0x398>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	f000 face 	bl	8006ec8 <PrintMessage>
			PrintMessage(generalSBGC, TEXT_SIZE_("******************************\n\n"));
 800692c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006930:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006934:	2220      	movs	r2, #32
 8006936:	490e      	ldr	r1, [pc, #56]	; (8006970 <SBGC32_ManualInit+0x394>)
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	f000 fac5 	bl	8006ec8 <PrintMessage>
		}

	#endif

	return generalSBGC->_parserCurrentStatus;
 800693e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8006942:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 800694c:	4618      	mov	r0, r3
 800694e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8006952:	46bd      	mov	sp, r7
 8006954:	bd90      	pop	{r4, r7, pc}
 8006956:	bf00      	nop
 8006958:	0800c600 	.word	0x0800c600
 800695c:	0800c60c 	.word	0x0800c60c
 8006960:	0800c610 	.word	0x0800c610
 8006964:	0800c630 	.word	0x0800c630
 8006968:	0800c64c 	.word	0x0800c64c
 800696c:	0800c65c 	.word	0x0800c65c
 8006970:	0800c670 	.word	0x0800c670
 8006974:	0800c694 	.word	0x0800c694

08006978 <SBGC32_CheckConfirmation>:
 *	@param	cmdID - identifier of the SerialCommand being confirmed
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_CheckConfirmation (GeneralSBGC_t *generalSBGC, SBGC_Command_t cmdID)
{
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b0cd      	sub	sp, #308	; 0x134
 800697c:	af00      	add	r7, sp, #0
 800697e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006986:	6018      	str	r0, [r3, #0]
 8006988:	460a      	mov	r2, r1
 800698a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006992:	701a      	strb	r2, [r3, #0]
	#if (SBGC_CONFIRM_CMD)

		SerialCommand_t cmd;
		TxRxStatus_t lastParserStatus;
		ui32 currentTime = generalSBGC->GetTimeFunc(generalSBGC->Drv);
 8006994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006998:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	6812      	ldr	r2, [r2, #0]
 80069ac:	4610      	mov	r0, r2
 80069ae:	4798      	blx	r3
 80069b0:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			char debugStr [30];
		#endif

		while (1)
		{
			lastParserStatus = SBGC32_RX(generalSBGC, &cmd, generalSBGC->txrxTimeout);
 80069b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069c0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80069c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	f7ff fa25 	bl	8005e1c <SBGC32_RX>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b

			if (lastParserStatus == TX_RX_OK &&
 80069d8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f040 80ab 	bne.w	8006b38 <SBGC32_CheckConfirmation+0x1c0>
				((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 80069e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ea:	781b      	ldrb	r3, [r3, #0]
			if (lastParserStatus == TX_RX_OK &&
 80069ec:	2b43      	cmp	r3, #67	; 0x43
 80069ee:	d10b      	bne.n	8006a08 <SBGC32_CheckConfirmation+0x90>
				((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 80069f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80069fe:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d007      	beq.n	8006a18 <SBGC32_CheckConfirmation+0xa0>
				(cmd.commandID == CMD_RESET)))
 8006a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a10:	781b      	ldrb	r3, [r3, #0]
				((cmd.commandID == CMD_CONFIRM && cmdID == cmd.payload[0]) ||
 8006a12:	2b72      	cmp	r3, #114	; 0x72
 8006a14:	f040 8090 	bne.w	8006b38 <SBGC32_CheckConfirmation+0x1c0>
			{
				generalSBGC->_confirmationParams.cmdID = ReadByte(&cmd);
 8006a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7ff fcfe 	bl	800641e <ReadByte>
 8006a22:	4603      	mov	r3, r0
 8006a24:	461a      	mov	r2, r3
 8006a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

				if (cmd.payloadSize == 2)
 8006a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a3c:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d10e      	bne.n	8006a62 <SBGC32_CheckConfirmation+0xea>
					generalSBGC->_confirmationParams.cmdData = ReadByte(&cmd);
 8006a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fce8 	bl	800641e <ReadByte>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
 8006a60:	e015      	b.n	8006a8e <SBGC32_CheckConfirmation+0x116>
				else if (cmd.payloadSize == 3)
 8006a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a6a:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d10d      	bne.n	8006a8e <SBGC32_CheckConfirmation+0x116>
					generalSBGC->_confirmationParams.cmdData = ReadWord(&cmd);
 8006a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fd0a 	bl	8006490 <ReadWord>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	461a      	mov	r2, r3
 8006a80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c

				#if (SBGC_DEBUG_MODE)
					/* - - - - - - - User Confirm Handler - - - - - - - - */
					if (cmd.payloadSize <= 1)
 8006a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a96:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d811      	bhi.n	8006ac2 <SBGC32_CheckConfirmation+0x14a>
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d\n", generalSBGC->_confirmationParams.cmdID);
 8006a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	f892 243b 	ldrb.w	r2, [r2, #1083]	; 0x43b
 8006ab8:	f107 0008 	add.w	r0, r7, #8
 8006abc:	4973      	ldr	r1, [pc, #460]	; (8006c8c <SBGC32_CheckConfirmation+0x314>)
 8006abe:	4798      	blx	r3
 8006ac0:	e018      	b.n	8006af4 <SBGC32_CheckConfirmation+0x17c>
					else
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d (%u)\n", generalSBGC->_confirmationParams.cmdID,
 8006ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699c      	ldr	r4, [r3, #24]
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f893 343b 	ldrb.w	r3, [r3, #1083]	; 0x43b
 8006adc:	461a      	mov	r2, r3
																					 generalSBGC->_confirmationParams.cmdData);
 8006ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 343c 	ldrh.w	r3, [r3, #1084]	; 0x43c
						generalSBGC->SprintfFunc(debugStr, "CMD_CONFIRM #%d (%u)\n", generalSBGC->_confirmationParams.cmdID,
 8006aec:	f107 0008 	add.w	r0, r7, #8
 8006af0:	4967      	ldr	r1, [pc, #412]	; (8006c90 <SBGC32_CheckConfirmation+0x318>)
 8006af2:	47a0      	blx	r4

					PrintMessage(generalSBGC, debugStr, strlen(debugStr));
 8006af4:	f107 0308 	add.w	r3, r7, #8
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7f9 fba1 	bl	8000240 <strlen>
 8006afe:	4603      	mov	r3, r0
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	f107 0108 	add.w	r1, r7, #8
 8006b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	f000 f9da 	bl	8006ec8 <PrintMessage>
					/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
				#endif

				generalSBGC->_parserCurrentStatus = lastParserStatus;
 8006b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006b22:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
				generalSBGC->_confirmationStatus = CONFIRMATION_OK;
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
				break;
 8006b36:	e09c      	b.n	8006c72 <SBGC32_CheckConfirmation+0x2fa>
			}

			else if (lastParserStatus == TX_RX_OK && (cmd.commandID == CMD_ERROR))
 8006b38:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d164      	bne.n	8006c0a <SBGC32_CheckConfirmation+0x292>
 8006b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2bff      	cmp	r3, #255	; 0xff
 8006b4c:	d15d      	bne.n	8006c0a <SBGC32_CheckConfirmation+0x292>
			{
				generalSBGC->_confirmationParams.errCode = ReadByte(&cmd);
 8006b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fc63 	bl	800641e <ReadByte>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e

				if (cmd.payloadSize > 1)
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b72:	f893 3101 	ldrb.w	r3, [r3, #257]	; 0x101
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d90c      	bls.n	8006b94 <SBGC32_CheckConfirmation+0x21c>
					ReadBuff(&cmd, &generalSBGC->_confirmationParams.errData, 4, PM_DEFAULT_8BIT);
 8006b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f203 413f 	addw	r1, r3, #1087	; 0x43f
 8006b88:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2204      	movs	r2, #4
 8006b90:	f7ff fbbc 	bl	800630c <ReadBuff>

				#if (SBGC_DEBUG_MODE)
					/* - - - - - - - - User Error Handler - - - - - - - - */
					generalSBGC->SprintfFunc(debugStr, "CMD_ERROR: #%d (%d)\n", generalSBGC->_confirmationParams.errCode,
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699c      	ldr	r4, [r3, #24]
 8006ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8006bae:	461a      	mov	r2, r3
																				generalSBGC->_confirmationParams.errData[0]);
 8006bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
					generalSBGC->SprintfFunc(debugStr, "CMD_ERROR: #%d (%d)\n", generalSBGC->_confirmationParams.errCode,
 8006bbe:	f107 0008 	add.w	r0, r7, #8
 8006bc2:	4934      	ldr	r1, [pc, #208]	; (8006c94 <SBGC32_CheckConfirmation+0x31c>)
 8006bc4:	47a0      	blx	r4

					PrintMessage(generalSBGC, debugStr, strlen(debugStr));
 8006bc6:	f107 0308 	add.w	r3, r7, #8
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7f9 fb38 	bl	8000240 <strlen>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	f107 0108 	add.w	r1, r7, #8
 8006bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	f000 f971 	bl	8006ec8 <PrintMessage>
					/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
				#endif

				generalSBGC->_parserCurrentStatus = lastParserStatus;
 8006be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8006bf4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
				generalSBGC->_confirmationStatus = CONFIRMATION_ERROR;
 8006bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
				break;
 8006c08:	e033      	b.n	8006c72 <SBGC32_CheckConfirmation+0x2fa>
			}

			if (generalSBGC->GetTimeFunc(generalSBGC->Drv) - currentTime >= generalSBGC->txrxTimeout)
 8006c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c1a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	6812      	ldr	r2, [r2, #0]
 8006c22:	4610      	mov	r0, r2
 8006c24:	4798      	blx	r3
 8006c26:	4602      	mov	r2, r0
 8006c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2c:	1ad2      	subs	r2, r2, r3
 8006c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	f4ff aeba 	bcc.w	80069b4 <SBGC32_CheckConfirmation+0x3c>
			{
				#if (SBGC_DEBUG_MODE)
					/*  - - - - - - User Wait-Error Handler - - - - - - - */
					PrintMessage(generalSBGC, TEXT_SIZE_("CONFIRM_TIMEOUT_ERROR!\n"));
 8006c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c48:	2217      	movs	r2, #23
 8006c4a:	4913      	ldr	r1, [pc, #76]	; (8006c98 <SBGC32_CheckConfirmation+0x320>)
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f000 f93b 	bl	8006ec8 <PrintMessage>
					/*  - - - - - - - - - - - - - - - - - - - - - - - - - */
				#endif

				generalSBGC->_parserCurrentStatus = RX_TIMEOUT_ERROR;
 8006c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
				generalSBGC->_confirmationStatus = CONFIRMATION_TIMEOUT;
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
			}
		}

	#endif

	return generalSBGC->_parserCurrentStatus;
 8006c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd90      	pop	{r4, r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	0800c6ac 	.word	0x0800c6ac
 8006c90:	0800c6c0 	.word	0x0800c6c0
 8006c94:	0800c6d8 	.word	0x0800c6d8
 8006c98:	0800c6f0 	.word	0x0800c6f0

08006c9c <CheckReceipt>:
 *	@param 	*message - debug info string
 *
 *	@return Communication status
 */
TxRxStatus_t CheckReceipt (GeneralSBGC_t *generalSBGC, TxRxStatus_t receiveStatus, char *message)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b094      	sub	sp, #80	; 0x50
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	72fb      	strb	r3, [r7, #11]
	generalSBGC->_parserCurrentStatus = receiveStatus;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	7afa      	ldrb	r2, [r7, #11]
 8006cae:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	if (generalSBGC->_parserCurrentStatus != TX_RX_OK)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d005      	beq.n	8006cc8 <CheckReceipt+0x2c>
		generalSBGC->_rxErrorsCount++;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	865a      	strh	r2, [r3, #50]	; 0x32

	#if (SBGC_DEBUG_MODE)

		char totalStr [60];
		ui8 pos = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		if (generalSBGC->_parserCurrentStatus != TX_RX_OK)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d044      	beq.n	8006d62 <CheckReceipt+0xc6>
		{
			/* - - - - - - - - User RX Errors Handler - - - - - - - - */
			memcpy(totalStr, TEXT_SIZE_(message));
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7f9 fab1 	bl	8000240 <strlen>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	f107 0310 	add.w	r3, r7, #16
 8006ce4:	6879      	ldr	r1, [r7, #4]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 ff56 	bl	8007b98 <memcpy>
			pos += strlen(message);
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7f9 faa7 	bl	8000240 <strlen>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive Error: "));
 8006d00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d04:	f107 0210 	add.w	r2, r7, #16
 8006d08:	4413      	add	r3, r2
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	4938      	ldr	r1, [pc, #224]	; (8006df0 <CheckReceipt+0x154>)
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 ff42 	bl	8007b98 <memcpy>
			pos += strlen(" Receive Error: ");
 8006d14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d18:	3310      	adds	r3, #16
 8006d1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pos += ConvertErrorToString(generalSBGC->_parserCurrentStatus, &totalStr[pos]);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 043a 	ldrb.w	r0, [r3, #1082]	; 0x43a
 8006d24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d28:	f107 0210 	add.w	r2, r7, #16
 8006d2c:	4413      	add	r3, r2
 8006d2e:	4619      	mov	r1, r3
 8006d30:	f000 fa52 	bl	80071d8 <ConvertErrorToString>
 8006d34:	4603      	mov	r3, r0
 8006d36:	461a      	mov	r2, r3
 8006d38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8006d42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d46:	3350      	adds	r3, #80	; 0x50
 8006d48:	443b      	add	r3, r7
 8006d4a:	220a      	movs	r2, #10
 8006d4c:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8006d50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d54:	3301      	adds	r3, #1
 8006d56:	3350      	adds	r3, #80	; 0x50
 8006d58:	443b      	add	r3, r7
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f803 2c40 	strb.w	r2, [r3, #-64]
 8006d60:	e031      	b.n	8006dc6 <CheckReceipt+0x12a>
		}

		else
		{
			/*  - - - - - - - User RX Success Handler - - - - - - - - */
			memcpy(totalStr, TEXT_SIZE_(message));
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7f9 fa6c 	bl	8000240 <strlen>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	f107 0310 	add.w	r3, r7, #16
 8006d6e:	6879      	ldr	r1, [r7, #4]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 ff11 	bl	8007b98 <memcpy>
			pos += strlen(message);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7f9 fa62 	bl	8000240 <strlen>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d84:	4413      	add	r3, r2
 8006d86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			memcpy(&totalStr[pos], TEXT_SIZE_(" Receive OK!"));
 8006d8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006d8e:	f107 0210 	add.w	r2, r7, #16
 8006d92:	4413      	add	r3, r2
 8006d94:	220c      	movs	r2, #12
 8006d96:	4917      	ldr	r1, [pc, #92]	; (8006df4 <CheckReceipt+0x158>)
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fefd 	bl	8007b98 <memcpy>
			pos += strlen(" Receive OK!");
 8006d9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006da2:	330c      	adds	r3, #12
 8006da4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			totalStr[pos] = '\n';
 8006da8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006dac:	3350      	adds	r3, #80	; 0x50
 8006dae:	443b      	add	r3, r7
 8006db0:	220a      	movs	r2, #10
 8006db2:	f803 2c40 	strb.w	r2, [r3, #-64]
			totalStr[pos + 1] = '\0';
 8006db6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006dba:	3301      	adds	r3, #1
 8006dbc:	3350      	adds	r3, #80	; 0x50
 8006dbe:	443b      	add	r3, r7
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f803 2c40 	strb.w	r2, [r3, #-64]
			/*  - - - - - - - - - - - - - - - - - - - - - - - - - - - */
		}

		PrintMessage(generalSBGC, TEXT_SIZE_(totalStr));
 8006dc6:	f107 0310 	add.w	r3, r7, #16
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7f9 fa38 	bl	8000240 <strlen>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	f107 0310 	add.w	r3, r7, #16
 8006dd8:	4619      	mov	r1, r3
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f874 	bl	8006ec8 <PrintMessage>

	#endif

	return generalSBGC->_parserCurrentStatus;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3750      	adds	r7, #80	; 0x50
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	0800c708 	.word	0x0800c708
 8006df4:	0800c71c 	.word	0x0800c71c

08006df8 <Modulo256_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui8 Modulo256_Calculate (ui8 *data, ui16 length)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	807b      	strh	r3, [r7, #2]
	i32 totalSum = 0;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]

	ui16 count = 0;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	817b      	strh	r3, [r7, #10]
	while (count < length)
 8006e0c:	e00a      	b.n	8006e24 <Modulo256_Calculate+0x2c>
		totalSum += data[count++];
 8006e0e:	897b      	ldrh	r3, [r7, #10]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	817a      	strh	r2, [r7, #10]
 8006e14:	461a      	mov	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
	while (count < length)
 8006e24:	897a      	ldrh	r2, [r7, #10]
 8006e26:	887b      	ldrh	r3, [r7, #2]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d3f0      	bcc.n	8006e0e <Modulo256_Calculate+0x16>

	return totalSum % 256;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	425a      	negs	r2, r3
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	bf58      	it	pl
 8006e36:	4253      	negpl	r3, r2
 8006e38:	b2db      	uxtb	r3, r3
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
ui16 CRC16_Calculate (ui8 *data, ui16 length)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b085      	sub	sp, #20
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	807b      	strh	r3, [r7, #2]
	ui16 CRC_Register = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	81fb      	strh	r3, [r7, #14]
	ui8 shiftRegister,
		dataBit,
		CRC_Bit;

	for (ui16 i = 0; i < length; i++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	817b      	strh	r3, [r7, #10]
 8006e5a:	e02a      	b.n	8006eb2 <CRC16_Calculate+0x6c>
	{
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	737b      	strb	r3, [r7, #13]
 8006e60:	e021      	b.n	8006ea6 <CRC16_Calculate+0x60>
		{
			dataBit = (data[i] & shiftRegister) ? 1 : 0;
 8006e62:	897b      	ldrh	r3, [r7, #10]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	7b7b      	ldrb	r3, [r7, #13]
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	bf14      	ite	ne
 8006e74:	2301      	movne	r3, #1
 8006e76:	2300      	moveq	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	727b      	strb	r3, [r7, #9]
			CRC_Bit = CRC_Register >> 15;
 8006e7c:	89fb      	ldrh	r3, [r7, #14]
 8006e7e:	0bdb      	lsrs	r3, r3, #15
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	723b      	strb	r3, [r7, #8]
			CRC_Register <<= 1;
 8006e84:	89fb      	ldrh	r3, [r7, #14]
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	81fb      	strh	r3, [r7, #14]

			if (dataBit != CRC_Bit)
 8006e8a:	7a7a      	ldrb	r2, [r7, #9]
 8006e8c:	7a3b      	ldrb	r3, [r7, #8]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d006      	beq.n	8006ea0 <CRC16_Calculate+0x5a>
				CRC_Register ^= PR2_CRC16_POLYNOM;
 8006e92:	89fb      	ldrh	r3, [r7, #14]
 8006e94:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8006e98:	f083 037a 	eor.w	r3, r3, #122	; 0x7a
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	81fb      	strh	r3, [r7, #14]
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006ea0:	7b7b      	ldrb	r3, [r7, #13]
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	737b      	strb	r3, [r7, #13]
 8006ea6:	7b7b      	ldrb	r3, [r7, #13]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1da      	bne.n	8006e62 <CRC16_Calculate+0x1c>
	for (ui16 i = 0; i < length; i++)
 8006eac:	897b      	ldrh	r3, [r7, #10]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	817b      	strh	r3, [r7, #10]
 8006eb2:	897a      	ldrh	r2, [r7, #10]
 8006eb4:	887b      	ldrh	r3, [r7, #2]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d3d0      	bcc.n	8006e5c <CRC16_Calculate+0x16>
		}
	}

	return CRC_Register;
 8006eba:	89fb      	ldrh	r3, [r7, #14]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <PrintMessage>:
 *	@param	*generalSBGC - serial connection descriptor
 *	@param	*data - printable data
 *	@param	length - printable data size
 */
void PrintMessage (GeneralSBGC_t *generalSBGC, char *data, ui16 length)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	80fb      	strh	r3, [r7, #6]
	if (generalSBGC->TxDebugFunc == NULL)  // Prevent HardFault errors
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <PrintMessage+0x24>
		return;

	generalSBGC->TxDebugFunc(data, length);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	4798      	blx	r3
 8006eea:	e000      	b.n	8006eee <PrintMessage+0x26>
		return;
 8006eec:	bf00      	nop
}
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <PrintStructElement>:
 *	@param	*pValue - printable variable
 *	@param	*str - debug info string
 *	@param	vType - type of variable
 */
void PrintStructElement (GeneralSBGC_t *generalSBGC, void *pValue, const char *str, VarType_t vType)
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b0ad      	sub	sp, #180	; 0xb4
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	70fb      	strb	r3, [r7, #3]
	char debugStr [50];

	if (!(vType & _FLAG_))
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d17b      	bne.n	8007004 <PrintStructElement+0x110>
	/* Simple values */
	{
		switch (vType)
 8006f0c:	78fb      	ldrb	r3, [r7, #3]
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	2b06      	cmp	r3, #6
 8006f12:	f200 8143 	bhi.w	800719c <PrintStructElement+0x2a8>
 8006f16:	a201      	add	r2, pc, #4	; (adr r2, 8006f1c <PrintStructElement+0x28>)
 8006f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f8d 	.word	0x08006f8d
 8006f24:	08006f55 	.word	0x08006f55
 8006f28:	08006fa9 	.word	0x08006fa9
 8006f2c:	08006f71 	.word	0x08006f71
 8006f30:	08006fc5 	.word	0x08006fc5
 8006f34:	08006fe1 	.word	0x08006fe1
		{
			case _UNSIGNED_CHAR_ :
			{
				ui8 dataTemp = *(ui8*)pValue;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
				generalSBGC->SprintfFunc(debugStr, "%s %u\n", str, dataTemp);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	699c      	ldr	r4, [r3, #24]
 8006f44:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8006f48:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	499c      	ldr	r1, [pc, #624]	; (80071c0 <PrintStructElement+0x2cc>)
 8006f50:	47a0      	blx	r4
				break;
 8006f52:	e124      	b.n	800719e <PrintStructElement+0x2aa>
			}

			case _UNSIGNED_SHORT_ :
			{
				ui16 dataTemp = *(ui16*)pValue;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
				generalSBGC->SprintfFunc(debugStr, "%s %u\n", str, dataTemp);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	699c      	ldr	r4, [r3, #24]
 8006f60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006f64:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	4995      	ldr	r1, [pc, #596]	; (80071c0 <PrintStructElement+0x2cc>)
 8006f6c:	47a0      	blx	r4
				break;
 8006f6e:	e116      	b.n	800719e <PrintStructElement+0x2aa>
			}

			case _UNSIGNED_INT_ :
			{
				ui32 dataTemp = *(ui32*)pValue;
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

				#ifdef _L32__
					generalSBGC->SprintfFunc(debugStr, "%s %u\n", str, dataTemp);
				#else
					generalSBGC->SprintfFunc(debugStr, "%s %lu\n", str, dataTemp);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	699c      	ldr	r4, [r3, #24]
 8006f7c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	498f      	ldr	r1, [pc, #572]	; (80071c4 <PrintStructElement+0x2d0>)
 8006f88:	47a0      	blx	r4
				#endif

				break;
 8006f8a:	e108      	b.n	800719e <PrintStructElement+0x2aa>
			}

			case _SIGNED_CHAR_ :
			{
				i8 dataTemp = *(i8*)pValue;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				generalSBGC->SprintfFunc(debugStr, "%s %i\n", str, dataTemp);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	699c      	ldr	r4, [r3, #24]
 8006f98:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8006f9c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	4989      	ldr	r1, [pc, #548]	; (80071c8 <PrintStructElement+0x2d4>)
 8006fa4:	47a0      	blx	r4
				break;
 8006fa6:	e0fa      	b.n	800719e <PrintStructElement+0x2aa>
			}

			case _SIGNED_SHORT_ :
			{
				i16 dataTemp = *(i16*)pValue;
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
				generalSBGC->SprintfFunc(debugStr, "%s %i\n", str, dataTemp);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	699c      	ldr	r4, [r3, #24]
 8006fb4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006fb8:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	4982      	ldr	r1, [pc, #520]	; (80071c8 <PrintStructElement+0x2d4>)
 8006fc0:	47a0      	blx	r4
				break;
 8006fc2:	e0ec      	b.n	800719e <PrintStructElement+0x2aa>
			}

			case _SIGNED_INT_ :
			{
				i32 dataTemp = *(i32*)pValue;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

				#ifdef _L32__
					generalSBGC->SprintfFunc(debugStr, "%s %i\n", str, dataTemp);
				#else
					generalSBGC->SprintfFunc(debugStr, "%s %li\n", str, dataTemp);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	699c      	ldr	r4, [r3, #24]
 8006fd0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	497c      	ldr	r1, [pc, #496]	; (80071cc <PrintStructElement+0x2d8>)
 8006fdc:	47a0      	blx	r4
				#endif

				break;
 8006fde:	e0de      	b.n	800719e <PrintStructElement+0x2aa>
			}

			case _FLOAT_ :
			{
				float dataTemp = *(float*)pValue;
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				generalSBGC->SprintfFunc(debugStr, "%s %.3f\n", str, dataTemp);  // .3f is default. May be changed
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8006ff0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006ff4:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006ff8:	ed8d 7b00 	vstr	d7, [sp]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	4974      	ldr	r1, [pc, #464]	; (80071d0 <PrintStructElement+0x2dc>)
 8007000:	4798      	blx	r3
				break;
 8007002:	e0cc      	b.n	800719e <PrintStructElement+0x2aa>
	}

	else
	/* Flags */
    {
		const char zero = '0';
 8007004:	2330      	movs	r3, #48	; 0x30
 8007006:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		const char one = '1';
 800700a:	2331      	movs	r3, #49	; 0x31
 800700c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

		switch (vType & CLEAN_TYPE_MASK)
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	2b05      	cmp	r3, #5
 8007018:	f000 8082 	beq.w	8007120 <PrintStructElement+0x22c>
 800701c:	2b05      	cmp	r3, #5
 800701e:	f300 80be 	bgt.w	800719e <PrintStructElement+0x2aa>
 8007022:	2b01      	cmp	r3, #1
 8007024:	d002      	beq.n	800702c <PrintStructElement+0x138>
 8007026:	2b03      	cmp	r3, #3
 8007028:	d03d      	beq.n	80070a6 <PrintStructElement+0x1b2>
 800702a:	e0b8      	b.n	800719e <PrintStructElement+0x2aa>
		{
			case _UNSIGNED_CHAR_ :
			{
				char flagStr [9];
				ui8 valueTemp = *(ui8*)pValue;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99

				for (ui8 i = 0; i < 8; i++)
 8007034:	2300      	movs	r3, #0
 8007036:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800703a:	e023      	b.n	8007084 <PrintStructElement+0x190>
				{
					if (valueTemp & (1 << i))
 800703c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8007040:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007044:	fa42 f303 	asr.w	r3, r2, r3
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <PrintStructElement+0x172>
						memcpy(&flagStr[7 - i], &one, 1);
 8007050:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007054:	f1c3 0307 	rsb	r3, r3, #7
 8007058:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800705c:	4413      	add	r3, r2
 800705e:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8007062:	701a      	strb	r2, [r3, #0]
 8007064:	e009      	b.n	800707a <PrintStructElement+0x186>

					else
						memcpy(&flagStr[7 - i], &zero, 1);
 8007066:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800706a:	f1c3 0307 	rsb	r3, r3, #7
 800706e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007072:	4413      	add	r3, r2
 8007074:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8007078:	701a      	strb	r2, [r3, #0]
				for (ui8 i = 0; i < 8; i++)
 800707a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800707e:	3301      	adds	r3, #1
 8007080:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007084:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007088:	2b07      	cmp	r3, #7
 800708a:	d9d7      	bls.n	800703c <PrintStructElement+0x148>
				}

				flagStr[8] = '\0';
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
				generalSBGC->SprintfFunc(debugStr, "%s %s\n", str, flagStr);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	699c      	ldr	r4, [r3, #24]
 8007096:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800709a:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	494c      	ldr	r1, [pc, #304]	; (80071d4 <PrintStructElement+0x2e0>)
 80070a2:	47a0      	blx	r4
				break;
 80070a4:	e07b      	b.n	800719e <PrintStructElement+0x2aa>
			}

			case _UNSIGNED_SHORT_ :
			{
				char flagStr [17];
				ui16 valueTemp = *(ui16*)pValue;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

				for (ui16 i = 0; i < 16; i++)
 80070ae:	2300      	movs	r3, #0
 80070b0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80070b4:	e023      	b.n	80070fe <PrintStructElement+0x20a>
				{
					if (valueTemp & (1 << i))
 80070b6:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 80070ba:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80070be:	fa42 f303 	asr.w	r3, r2, r3
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <PrintStructElement+0x1ec>
						memcpy(&flagStr[15 - i], &one, 1);
 80070ca:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80070ce:	f1c3 030f 	rsb	r3, r3, #15
 80070d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80070d6:	4413      	add	r3, r2
 80070d8:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	e009      	b.n	80070f4 <PrintStructElement+0x200>

					else
						memcpy(&flagStr[15 - i], &zero, 1);
 80070e0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80070e4:	f1c3 030f 	rsb	r3, r3, #15
 80070e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80070ec:	4413      	add	r3, r2
 80070ee:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80070f2:	701a      	strb	r2, [r3, #0]
				for (ui16 i = 0; i < 16; i++)
 80070f4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80070f8:	3301      	adds	r3, #1
 80070fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80070fe:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8007102:	2b0f      	cmp	r3, #15
 8007104:	d9d7      	bls.n	80070b6 <PrintStructElement+0x1c2>
				}

				flagStr[16] = '\0';
 8007106:	2300      	movs	r3, #0
 8007108:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				generalSBGC->SprintfFunc(debugStr, "%s %s\n", str, flagStr);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	699c      	ldr	r4, [r3, #24]
 8007110:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007114:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	492e      	ldr	r1, [pc, #184]	; (80071d4 <PrintStructElement+0x2e0>)
 800711c:	47a0      	blx	r4
				break;
 800711e:	e03e      	b.n	800719e <PrintStructElement+0x2aa>
			}

			case _UNSIGNED_INT_ :
			{
				char flagStr [33];
				ui32 valueTemp = *(ui32*)pValue;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

				for (ui32 i = 0; i < 32; i++)
 8007128:	2300      	movs	r3, #0
 800712a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800712e:	e024      	b.n	800717a <PrintStructElement+0x286>
				{
					if (valueTemp & (1 << i))
 8007130:	2201      	movs	r2, #1
 8007132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	461a      	mov	r2, r3
 800713c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <PrintStructElement+0x268>
						memcpy(&flagStr[31 - i], &one, 1);
 8007146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800714a:	f1c3 031f 	rsb	r3, r3, #31
 800714e:	f107 0210 	add.w	r2, r7, #16
 8007152:	4413      	add	r3, r2
 8007154:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e009      	b.n	8007170 <PrintStructElement+0x27c>

					else
						memcpy(&flagStr[31 - i], &zero, 1);
 800715c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007160:	f1c3 031f 	rsb	r3, r3, #31
 8007164:	f107 0210 	add.w	r2, r7, #16
 8007168:	4413      	add	r3, r2
 800716a:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800716e:	701a      	strb	r2, [r3, #0]
				for (ui32 i = 0; i < 32; i++)
 8007170:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007174:	3301      	adds	r3, #1
 8007176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800717a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800717e:	2b1f      	cmp	r3, #31
 8007180:	d9d6      	bls.n	8007130 <PrintStructElement+0x23c>
				}

				flagStr[32] = '\0';
 8007182:	2300      	movs	r3, #0
 8007184:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				generalSBGC->SprintfFunc(debugStr, "%s %s\n", str, flagStr);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	699c      	ldr	r4, [r3, #24]
 800718c:	f107 0310 	add.w	r3, r7, #16
 8007190:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	490f      	ldr	r1, [pc, #60]	; (80071d4 <PrintStructElement+0x2e0>)
 8007198:	47a0      	blx	r4
				break;
 800719a:	e000      	b.n	800719e <PrintStructElement+0x2aa>
				break;
 800719c:	bf00      	nop
			}
		}
    }

	PrintMessage(generalSBGC, TEXT_SIZE_(debugStr));
 800719e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7f9 f84c 	bl	8000240 <strlen>
 80071a8:	4603      	mov	r3, r0
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80071b0:	4619      	mov	r1, r3
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fe88 	bl	8006ec8 <PrintMessage>
}
 80071b8:	bf00      	nop
 80071ba:	37ac      	adds	r7, #172	; 0xac
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd90      	pop	{r4, r7, pc}
 80071c0:	0800c72c 	.word	0x0800c72c
 80071c4:	0800c734 	.word	0x0800c734
 80071c8:	0800c73c 	.word	0x0800c73c
 80071cc:	0800c744 	.word	0x0800c744
 80071d0:	0800c74c 	.word	0x0800c74c
 80071d4:	0800c758 	.word	0x0800c758

080071d8 <ConvertErrorToString>:
 *	@param	*str - writable buffer
 *
 *	@return	Length of a writable string
 */
ui8 ConvertErrorToString (TxRxStatus_t txRxStatus, char *str)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	6039      	str	r1, [r7, #0]
 80071e2:	71fb      	strb	r3, [r7, #7]
	switch (txRxStatus)
 80071e4:	79fb      	ldrb	r3, [r7, #7]
 80071e6:	2b0a      	cmp	r3, #10
 80071e8:	d865      	bhi.n	80072b6 <ConvertErrorToString+0xde>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <ConvertErrorToString+0x18>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	0800721d 	.word	0x0800721d
 80071f4:	0800722b 	.word	0x0800722b
 80071f8:	08007239 	.word	0x08007239
 80071fc:	08007247 	.word	0x08007247
 8007200:	08007255 	.word	0x08007255
 8007204:	08007263 	.word	0x08007263
 8007208:	08007271 	.word	0x08007271
 800720c:	0800727f 	.word	0x0800727f
 8007210:	0800728d 	.word	0x0800728d
 8007214:	0800729b 	.word	0x0800729b
 8007218:	080072a9 	.word	0x080072a9
	{
		case TX_RX_OK :
			memcpy(str, TEXT_SIZE_(nameof_(TX_RX_OK)));
 800721c:	2208      	movs	r2, #8
 800721e:	4928      	ldr	r1, [pc, #160]	; (80072c0 <ConvertErrorToString+0xe8>)
 8007220:	6838      	ldr	r0, [r7, #0]
 8007222:	f000 fcb9 	bl	8007b98 <memcpy>
			return strlen(nameof_(TX_RX_OK));
 8007226:	2308      	movs	r3, #8
 8007228:	e046      	b.n	80072b8 <ConvertErrorToString+0xe0>

					case RX_BUFFERED_COMMAND :
						memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFERED_COMMAND)));
 800722a:	2213      	movs	r2, #19
 800722c:	4925      	ldr	r1, [pc, #148]	; (80072c4 <ConvertErrorToString+0xec>)
 800722e:	6838      	ldr	r0, [r7, #0]
 8007230:	f000 fcb2 	bl	8007b98 <memcpy>
						return strlen(nameof_(RX_BUFFERED_COMMAND));
 8007234:	2313      	movs	r3, #19
 8007236:	e03f      	b.n	80072b8 <ConvertErrorToString+0xe0>

		case RX_START_PARSE :
			memcpy(str, TEXT_SIZE_(nameof_(RX_START_PARSE)));
 8007238:	220e      	movs	r2, #14
 800723a:	4923      	ldr	r1, [pc, #140]	; (80072c8 <ConvertErrorToString+0xf0>)
 800723c:	6838      	ldr	r0, [r7, #0]
 800723e:	f000 fcab 	bl	8007b98 <memcpy>
			return strlen(nameof_(RX_START_PARSE));
 8007242:	230e      	movs	r3, #14
 8007244:	e038      	b.n	80072b8 <ConvertErrorToString+0xe0>

					case RX_EMPTY_BUFF_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_EMPTY_BUFF_ERROR)));
 8007246:	2213      	movs	r2, #19
 8007248:	4920      	ldr	r1, [pc, #128]	; (80072cc <ConvertErrorToString+0xf4>)
 800724a:	6838      	ldr	r0, [r7, #0]
 800724c:	f000 fca4 	bl	8007b98 <memcpy>
						return strlen(nameof_(RX_EMPTY_BUFF_ERROR));
 8007250:	2313      	movs	r3, #19
 8007252:	e031      	b.n	80072b8 <ConvertErrorToString+0xe0>

		case RX_BUFFER_REALTIME_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFER_REALTIME_ERROR)));
 8007254:	2218      	movs	r2, #24
 8007256:	491e      	ldr	r1, [pc, #120]	; (80072d0 <ConvertErrorToString+0xf8>)
 8007258:	6838      	ldr	r0, [r7, #0]
 800725a:	f000 fc9d 	bl	8007b98 <memcpy>
			return strlen(nameof_(RX_BUFFER_REALTIME_ERROR));
 800725e:	2318      	movs	r3, #24
 8007260:	e02a      	b.n	80072b8 <ConvertErrorToString+0xe0>

					case RX_HEADER_CHECKSUM_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_HEADER_CHECKSUM_ERROR)));
 8007262:	2218      	movs	r2, #24
 8007264:	491b      	ldr	r1, [pc, #108]	; (80072d4 <ConvertErrorToString+0xfc>)
 8007266:	6838      	ldr	r0, [r7, #0]
 8007268:	f000 fc96 	bl	8007b98 <memcpy>
						return strlen(nameof_(RX_HEADER_CHECKSUM_ERROR));
 800726c:	2318      	movs	r3, #24
 800726e:	e023      	b.n	80072b8 <ConvertErrorToString+0xe0>

		case RX_PAYLOAD_CHECKSUM_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_PAYLOAD_CHECKSUM_ERROR)));
 8007270:	2219      	movs	r2, #25
 8007272:	4919      	ldr	r1, [pc, #100]	; (80072d8 <ConvertErrorToString+0x100>)
 8007274:	6838      	ldr	r0, [r7, #0]
 8007276:	f000 fc8f 	bl	8007b98 <memcpy>
			return strlen(nameof_(RX_PAYLOAD_CHECKSUM_ERROR));
 800727a:	2319      	movs	r3, #25
 800727c:	e01c      	b.n	80072b8 <ConvertErrorToString+0xe0>

					case RX_BUFFER_OVERFLOW_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(RX_BUFFER_OVERFLOW_ERROR)));
 800727e:	2218      	movs	r2, #24
 8007280:	4916      	ldr	r1, [pc, #88]	; (80072dc <ConvertErrorToString+0x104>)
 8007282:	6838      	ldr	r0, [r7, #0]
 8007284:	f000 fc88 	bl	8007b98 <memcpy>
						return strlen(nameof_(RX_BUFFER_OVERFLOW_ERROR));
 8007288:	2318      	movs	r3, #24
 800728a:	e015      	b.n	80072b8 <ConvertErrorToString+0xe0>

		case RX_TIMEOUT_ERROR :
			memcpy(str, TEXT_SIZE_(nameof_(RX_TIMEOUT_ERROR)));
 800728c:	2210      	movs	r2, #16
 800728e:	4914      	ldr	r1, [pc, #80]	; (80072e0 <ConvertErrorToString+0x108>)
 8007290:	6838      	ldr	r0, [r7, #0]
 8007292:	f000 fc81 	bl	8007b98 <memcpy>
			return strlen(nameof_(RX_TIMEOUT_ERROR));
 8007296:	2310      	movs	r3, #16
 8007298:	e00e      	b.n	80072b8 <ConvertErrorToString+0xe0>

					case TX_BUFFER_OVERFLOW_ERROR :
						memcpy(str, TEXT_SIZE_(nameof_(TX_BUFFER_OVERFLOW_ERROR)));
 800729a:	2218      	movs	r2, #24
 800729c:	4911      	ldr	r1, [pc, #68]	; (80072e4 <ConvertErrorToString+0x10c>)
 800729e:	6838      	ldr	r0, [r7, #0]
 80072a0:	f000 fc7a 	bl	8007b98 <memcpy>
						return strlen(nameof_(TX_BUFFER_OVERFLOW_ERROR));
 80072a4:	2318      	movs	r3, #24
 80072a6:	e007      	b.n	80072b8 <ConvertErrorToString+0xe0>

		case NOT_SUPPORTED_BY_FIRMWARE :
			memcpy(str, TEXT_SIZE_(nameof_(NOT_SUPPORTED_BY_FIRMWARE)));
 80072a8:	2219      	movs	r2, #25
 80072aa:	490f      	ldr	r1, [pc, #60]	; (80072e8 <ConvertErrorToString+0x110>)
 80072ac:	6838      	ldr	r0, [r7, #0]
 80072ae:	f000 fc73 	bl	8007b98 <memcpy>
			return strlen(nameof_(NOT_SUPPORTED_BY_FIRMWARE));
 80072b2:	2319      	movs	r3, #25
 80072b4:	e000      	b.n	80072b8 <ConvertErrorToString+0xe0>
	}

	return 0;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	0800c760 	.word	0x0800c760
 80072c4:	0800c76c 	.word	0x0800c76c
 80072c8:	0800c780 	.word	0x0800c780
 80072cc:	0800c790 	.word	0x0800c790
 80072d0:	0800c7a4 	.word	0x0800c7a4
 80072d4:	0800c7c0 	.word	0x0800c7c0
 80072d8:	0800c7dc 	.word	0x0800c7dc
 80072dc:	0800c7f8 	.word	0x0800c7f8
 80072e0:	0800c814 	.word	0x0800c814
 80072e4:	0800c828 	.word	0x0800c828
 80072e8:	0800c844 	.word	0x0800c844

080072ec <SBGC32_Control>:
 * 	@param 	*control - structure containing gimbal control data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_Control (GeneralSBGC_t *generalSBGC, const Control_t *control)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b0c4      	sub	sp, #272	; 0x110
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80072fa:	6018      	str	r0, [r3, #0]
 80072fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007300:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007304:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL);
 8007306:	f107 030c 	add.w	r3, r7, #12
 800730a:	2143      	movs	r1, #67	; 0x43
 800730c:	4618      	mov	r0, r3
 800730e:	f7ff f951 	bl	80065b4 <InitCmdWrite>
	WriteBuff(&cmd, control, sizeof(Control_t), PM_CONTROL);
 8007312:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007316:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 800731a:	f107 000c 	add.w	r0, r7, #12
 800731e:	230b      	movs	r3, #11
 8007320:	220f      	movs	r2, #15
 8007322:	6809      	ldr	r1, [r1, #0]
 8007324:	f7fe ffc3 	bl	80062ae <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8007328:	f107 020c 	add.w	r2, r7, #12
 800732c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007334:	4611      	mov	r1, r2
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	f7fe fc50 	bl	8005bdc <SBGC32_TX>
	/** When setting the ControlConfig_t.flags, may send confirmation */
	return generalSBGC->_parserCurrentStatus;
 800733c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007340:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 800734a:	4618      	mov	r0, r3
 800734c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <SBGC32_ControlConfig>:
 * 			control configuration data
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ControlConfig (GeneralSBGC_t *generalSBGC, const ControlConfig_t *controlConfig)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b0c4      	sub	sp, #272	; 0x110
 8007358:	af00      	add	r7, sp, #0
 800735a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800735e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007362:	6018      	str	r0, [r3, #0]
 8007364:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007368:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800736c:	6019      	str	r1, [r3, #0]
			return NOT_SUPPORTED_BY_FIRMWARE;

	#endif

	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_CONTROL_CONFIG);
 800736e:	f107 030c 	add.w	r3, r7, #12
 8007372:	215a      	movs	r1, #90	; 0x5a
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff f91d 	bl	80065b4 <InitCmdWrite>
	WriteBuff(&cmd, controlConfig, sizeof(ControlConfig_t), PM_CONTROL_CONFIG);
 800737a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800737e:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007382:	f107 000c 	add.w	r0, r7, #12
 8007386:	230c      	movs	r3, #12
 8007388:	2229      	movs	r2, #41	; 0x29
 800738a:	6809      	ldr	r1, [r1, #0]
 800738c:	f7fe ff8f 	bl	80062ae <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 8007390:	f107 020c 	add.w	r2, r7, #12
 8007394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007398:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800739c:	4611      	mov	r1, r2
 800739e:	6818      	ldr	r0, [r3, #0]
 80073a0:	f7fe fc1c 	bl	8005bdc <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 80073a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80073ac:	781a      	ldrb	r2, [r3, #0]
 80073ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073b6:	4611      	mov	r1, r2
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	f7ff fadd 	bl	8006978 <SBGC32_CheckConfirmation>
	return generalSBGC->_parserCurrentStatus;
 80073be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <SBGC32_ReadParams3>:
 *	@param 	profileN - profile slot
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadParams3 (GeneralSBGC_t *generalSBGC, MainParams3_t *mainParams3, Profile_t profileN)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b0c6      	sub	sp, #280	; 0x118
 80073dc:	af00      	add	r7, sp, #0
 80073de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80073e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073e6:	6018      	str	r0, [r3, #0]
 80073e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80073ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80073f0:	6019      	str	r1, [r3, #0]
 80073f2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80073f6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80073fa:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_READ_PARAMS_3);
 80073fc:	f107 0314 	add.w	r3, r7, #20
 8007400:	2115      	movs	r1, #21
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff f8d6 	bl	80065b4 <InitCmdWrite>
	WriteByte(&cmd, profileN);
 8007408:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800740c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007410:	781a      	ldrb	r2, [r3, #0]
 8007412:	f107 0314 	add.w	r3, r7, #20
 8007416:	4611      	mov	r1, r2
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe ffe7 	bl	80063ec <WriteByte>

	if(CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_READ_PARAMS_3), "Main Parameters 3:") == TX_RX_OK)
 800741e:	f107 0114 	add.w	r1, r7, #20
 8007422:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007426:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800742a:	2215      	movs	r2, #21
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	f7fe fe6e 	bl	800610e <SBGC32_TX_RX>
 8007432:	4603      	mov	r3, r0
 8007434:	4619      	mov	r1, r3
 8007436:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800743a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800743e:	4a0f      	ldr	r2, [pc, #60]	; (800747c <SBGC32_ReadParams3+0xa4>)
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	f7ff fc2b 	bl	8006c9c <CheckReceipt>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <SBGC32_ReadParams3+0x8a>
		ReadBuff(&cmd, mainParams3, sizeof(MainParams3_t), PM_MAIN_PARAMS_3);
 800744c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007450:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007454:	f107 0014 	add.w	r0, r7, #20
 8007458:	2312      	movs	r3, #18
 800745a:	2286      	movs	r2, #134	; 0x86
 800745c:	6809      	ldr	r1, [r1, #0]
 800745e:	f7fe ff55 	bl	800630c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 8007462:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8007470:	4618      	mov	r0, r3
 8007472:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	0800c870 	.word	0x0800c870

08007480 <SBGC32_ReadParamsExt>:
 *	@param 	profileN - profile slot
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadParamsExt (GeneralSBGC_t *generalSBGC, MainParamsExt_t *mainParamsExt, Profile_t profileN)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b0c6      	sub	sp, #280	; 0x118
 8007484:	af00      	add	r7, sp, #0
 8007486:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800748a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800748e:	6018      	str	r0, [r3, #0]
 8007490:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007494:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007498:	6019      	str	r1, [r3, #0]
 800749a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800749e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80074a2:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_READ_PARAMS_EXT);
 80074a4:	f107 0314 	add.w	r3, r7, #20
 80074a8:	2121      	movs	r1, #33	; 0x21
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7ff f882 	bl	80065b4 <InitCmdWrite>
	WriteByte(&cmd, profileN);
 80074b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80074b4:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	f107 0314 	add.w	r3, r7, #20
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe ff93 	bl	80063ec <WriteByte>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_READ_PARAMS_EXT), "Main Parameters Ext:") == TX_RX_OK)
 80074c6:	f107 0114 	add.w	r1, r7, #20
 80074ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80074ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80074d2:	2221      	movs	r2, #33	; 0x21
 80074d4:	6818      	ldr	r0, [r3, #0]
 80074d6:	f7fe fe1a 	bl	800610e <SBGC32_TX_RX>
 80074da:	4603      	mov	r3, r0
 80074dc:	4619      	mov	r1, r3
 80074de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80074e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80074e6:	4a0f      	ldr	r2, [pc, #60]	; (8007524 <SBGC32_ReadParamsExt+0xa4>)
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	f7ff fbd7 	bl	8006c9c <CheckReceipt>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <SBGC32_ReadParamsExt+0x8a>
		ReadBuff(&cmd, mainParamsExt, sizeof(MainParamsExt_t), PM_MAIN_PARAMS_EXT);
 80074f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80074f8:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80074fc:	f107 0014 	add.w	r0, r7, #20
 8007500:	2313      	movs	r3, #19
 8007502:	2268      	movs	r2, #104	; 0x68
 8007504:	6809      	ldr	r1, [r1, #0]
 8007506:	f7fe ff01 	bl	800630c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 800750a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800750e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8007518:	4618      	mov	r0, r3
 800751a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	0800c884 	.word	0x0800c884

08007528 <SBGC32_ReadParamsExt2>:
 *	@param 	profileN - profile slot
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadParamsExt2 (GeneralSBGC_t *generalSBGC, MainParamsExt2_t *mainParamsExt2, Profile_t profileN)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b0c6      	sub	sp, #280	; 0x118
 800752c:	af00      	add	r7, sp, #0
 800752e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007532:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007536:	6018      	str	r0, [r3, #0]
 8007538:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800753c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007540:	6019      	str	r1, [r3, #0]
 8007542:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007546:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800754a:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_READ_PARAMS_EXT2);
 800754c:	f107 0314 	add.w	r3, r7, #20
 8007550:	213e      	movs	r1, #62	; 0x3e
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff f82e 	bl	80065b4 <InitCmdWrite>
	WriteByte(&cmd, profileN);
 8007558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800755c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007560:	781a      	ldrb	r2, [r3, #0]
 8007562:	f107 0314 	add.w	r3, r7, #20
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7fe ff3f 	bl	80063ec <WriteByte>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_READ_PARAMS_EXT2), "Main Parameters Ext 2:") == TX_RX_OK)
 800756e:	f107 0114 	add.w	r1, r7, #20
 8007572:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007576:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800757a:	223e      	movs	r2, #62	; 0x3e
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	f7fe fdc6 	bl	800610e <SBGC32_TX_RX>
 8007582:	4603      	mov	r3, r0
 8007584:	4619      	mov	r1, r3
 8007586:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800758a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800758e:	4a0f      	ldr	r2, [pc, #60]	; (80075cc <SBGC32_ReadParamsExt2+0xa4>)
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	f7ff fb83 	bl	8006c9c <CheckReceipt>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <SBGC32_ReadParamsExt2+0x8a>
		ReadBuff(&cmd, mainParamsExt2, sizeof(MainParamsExt2_t), PM_MAIN_PARAMS_EXT_2);
 800759c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075a0:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80075a4:	f107 0014 	add.w	r0, r7, #20
 80075a8:	2314      	movs	r3, #20
 80075aa:	2297      	movs	r2, #151	; 0x97
 80075ac:	6809      	ldr	r1, [r1, #0]
 80075ae:	f7fe fead 	bl	800630c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 80075b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	0800c89c 	.word	0x0800c89c

080075d0 <SBGC32_ReadParamsExt3>:
 *	@param 	profileN - profile slot
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadParamsExt3 (GeneralSBGC_t *generalSBGC, MainParamsExt3_t *mainParamsExt3, Profile_t profileN)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b0c6      	sub	sp, #280	; 0x118
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80075de:	6018      	str	r0, [r3, #0]
 80075e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80075e8:	6019      	str	r1, [r3, #0]
 80075ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80075ee:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80075f2:	701a      	strb	r2, [r3, #0]
			return NOT_SUPPORTED_BY_FIRMWARE;

	#endif

	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_READ_PARAMS_EXT3);
 80075f4:	f107 0314 	add.w	r3, r7, #20
 80075f8:	2168      	movs	r1, #104	; 0x68
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe ffda 	bl	80065b4 <InitCmdWrite>
	WriteByte(&cmd, profileN);
 8007600:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007604:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	f107 0314 	add.w	r3, r7, #20
 800760e:	4611      	mov	r1, r2
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe feeb 	bl	80063ec <WriteByte>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_READ_PARAMS_EXT3), "Main Parameters Ext 3:") == TX_RX_OK)
 8007616:	f107 0114 	add.w	r1, r7, #20
 800761a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800761e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007622:	2268      	movs	r2, #104	; 0x68
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	f7fe fd72 	bl	800610e <SBGC32_TX_RX>
 800762a:	4603      	mov	r3, r0
 800762c:	4619      	mov	r1, r3
 800762e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007632:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007636:	4a0f      	ldr	r2, [pc, #60]	; (8007674 <SBGC32_ReadParamsExt3+0xa4>)
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	f7ff fb2f 	bl	8006c9c <CheckReceipt>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <SBGC32_ReadParamsExt3+0x8a>
		ReadBuff(&cmd, mainParamsExt3, sizeof(MainParamsExt3_t), PM_MAIN_PARAMS_EXT_3);
 8007644:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007648:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 800764c:	f107 0014 	add.w	r0, r7, #20
 8007650:	2315      	movs	r3, #21
 8007652:	22dd      	movs	r2, #221	; 0xdd
 8007654:	6809      	ldr	r1, [r1, #0]
 8007656:	f7fe fe59 	bl	800630c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 800765a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800765e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8007668:	4618      	mov	r0, r3
 800766a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	0800c8b4 	.word	0x0800c8b4

08007678 <SBGC32_RequestDataStream>:
 *			command parameters
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_RequestDataStream (GeneralSBGC_t *generalSBGC, DataStreamInterval_t *dataStreamInterval)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b0c4      	sub	sp, #272	; 0x110
 800767c:	af00      	add	r7, sp, #0
 800767e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007682:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007686:	6018      	str	r0, [r3, #0]
 8007688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800768c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007690:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_DATA_STREAM_INTERVAL);
 8007692:	f107 030c 	add.w	r3, r7, #12
 8007696:	2155      	movs	r1, #85	; 0x55
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe ff8b 	bl	80065b4 <InitCmdWrite>
	WriteBuff(&cmd, dataStreamInterval, sizeof(DataStreamInterval_t), PM_DATA_STREAM_INTERVAL);
 800769e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076a2:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80076a6:	f107 000c 	add.w	r0, r7, #12
 80076aa:	2316      	movs	r3, #22
 80076ac:	2215      	movs	r2, #21
 80076ae:	6809      	ldr	r1, [r1, #0]
 80076b0:	f7fe fdfd 	bl	80062ae <WriteBuff>
	SBGC32_TX(generalSBGC, &cmd);
 80076b4:	f107 020c 	add.w	r2, r7, #12
 80076b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076c0:	4611      	mov	r1, r2
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	f7fe fa8a 	bl	8005bdc <SBGC32_TX>
	SBGC32_CheckConfirmation(generalSBGC, cmd.commandID);
 80076c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d0:	781a      	ldrb	r2, [r3, #0]
 80076d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076da:	4611      	mov	r1, r2
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	f7ff f94b 	bl	8006978 <SBGC32_CheckConfirmation>
	return generalSBGC->_parserCurrentStatus;
 80076e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <SBGC32_ParseDataStream>:
 *			parameter, for which a response is expected
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ParseDataStream (GeneralSBGC_t *generalSBGC, void *dataStreamStruct, SBGC_Command_t cmdID)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b0c6      	sub	sp, #280	; 0x118
 8007700:	af00      	add	r7, sp, #0
 8007702:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007706:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800770a:	6018      	str	r0, [r3, #0]
 800770c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007710:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007714:	6019      	str	r1, [r3, #0]
 8007716:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800771a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800771e:	701a      	strb	r2, [r3, #0]
	SerialCommand_t cmd;
	if (CheckReceipt(generalSBGC, SBGC32_RX(generalSBGC, &cmd, generalSBGC->rxTimeout), "Data Stream:") == TX_RX_OK)
 8007720:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007724:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800772c:	f107 0114 	add.w	r1, r7, #20
 8007730:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007734:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	f7fe fb6f 	bl	8005e1c <SBGC32_RX>
 800773e:	4603      	mov	r3, r0
 8007740:	4619      	mov	r1, r3
 8007742:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007746:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800774a:	4a49      	ldr	r2, [pc, #292]	; (8007870 <SBGC32_ParseDataStream+0x174>)
 800774c:	6818      	ldr	r0, [r3, #0]
 800774e:	f7ff faa5 	bl	8006c9c <CheckReceipt>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d17c      	bne.n	8007852 <SBGC32_ParseDataStream+0x156>
	{
		switch (cmdID)
 8007758:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800775c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b66      	cmp	r3, #102	; 0x66
 8007764:	d05a      	beq.n	800781c <SBGC32_ParseDataStream+0x120>
 8007766:	2b66      	cmp	r3, #102	; 0x66
 8007768:	dc75      	bgt.n	8007856 <SBGC32_ParseDataStream+0x15a>
 800776a:	2b58      	cmp	r3, #88	; 0x58
 800776c:	d022      	beq.n	80077b4 <SBGC32_ParseDataStream+0xb8>
 800776e:	2b58      	cmp	r3, #88	; 0x58
 8007770:	dc71      	bgt.n	8007856 <SBGC32_ParseDataStream+0x15a>
 8007772:	2b38      	cmp	r3, #56	; 0x38
 8007774:	d02f      	beq.n	80077d6 <SBGC32_ParseDataStream+0xda>
 8007776:	2b38      	cmp	r3, #56	; 0x38
 8007778:	dc6d      	bgt.n	8007856 <SBGC32_ParseDataStream+0x15a>
 800777a:	2b17      	cmp	r3, #23
 800777c:	d002      	beq.n	8007784 <SBGC32_ParseDataStream+0x88>
 800777e:	2b19      	cmp	r3, #25
 8007780:	d00c      	beq.n	800779c <SBGC32_ParseDataStream+0xa0>
				ReadBuff(&cmd, dataStreamStruct, SIZEOF_EVENT, PM_DEFAULT_8BIT);
				break;
			}

						default :
							break;
 8007782:	e068      	b.n	8007856 <SBGC32_ParseDataStream+0x15a>
				ReadBuff(&cmd, dataStreamStruct, SIZEOF_REALTIME_DATA_3, PM_REALTIME_DATA_3);
 8007784:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007788:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 800778c:	f107 0014 	add.w	r0, r7, #20
 8007790:	2317      	movs	r3, #23
 8007792:	223f      	movs	r2, #63	; 0x3f
 8007794:	6809      	ldr	r1, [r1, #0]
 8007796:	f7fe fdb9 	bl	800630c <ReadBuff>
				break;
 800779a:	e05d      	b.n	8007858 <SBGC32_ParseDataStream+0x15c>
							ReadBuff(&cmd, dataStreamStruct, sizeof(RealTimeData_t), PM_REALTIME_DATA_4);
 800779c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077a0:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80077a4:	f107 0014 	add.w	r0, r7, #20
 80077a8:	2318      	movs	r3, #24
 80077aa:	227c      	movs	r2, #124	; 0x7c
 80077ac:	6809      	ldr	r1, [r1, #0]
 80077ae:	f7fe fdad 	bl	800630c <ReadBuff>
							break;
 80077b2:	e051      	b.n	8007858 <SBGC32_ParseDataStream+0x15c>
				ReadBuff(&cmd, dataStreamStruct, cmd.payloadSize, PM_DEFAULT_8BIT);
 80077b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077bc:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 80077c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077c4:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80077c8:	f107 0014 	add.w	r0, r7, #20
 80077cc:	2300      	movs	r3, #0
 80077ce:	6809      	ldr	r1, [r1, #0]
 80077d0:	f7fe fd9c 	bl	800630c <ReadBuff>
				break;
 80077d4:	e040      	b.n	8007858 <SBGC32_ParseDataStream+0x15c>
							ReadBuff(&cmd, dataStreamStruct, cmd.payloadSize, PM_DEFAULT_8BIT);
 80077d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077de:	f893 2101 	ldrb.w	r2, [r3, #257]	; 0x101
 80077e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80077e6:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80077ea:	f107 0014 	add.w	r0, r7, #20
 80077ee:	2300      	movs	r3, #0
 80077f0:	6809      	ldr	r1, [r1, #0]
 80077f2:	f7fe fd8b 	bl	800630c <ReadBuff>
							for (ui8 i = 0; i < 6; i++) ReadLong(&cmd);
 80077f6:	2300      	movs	r3, #0
 80077f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80077fc:	e009      	b.n	8007812 <SBGC32_ParseDataStream+0x116>
 80077fe:	f107 0314 	add.w	r3, r7, #20
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fe84 	bl	8006510 <ReadLong>
 8007808:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800780c:	3301      	adds	r3, #1
 800780e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007812:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007816:	2b05      	cmp	r3, #5
 8007818:	d9f1      	bls.n	80077fe <SBGC32_ParseDataStream+0x102>
							break;
 800781a:	e01d      	b.n	8007858 <SBGC32_ParseDataStream+0x15c>
				if (cmd.readPos != 0)
 800781c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007824:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
 8007828:	2b00      	cmp	r3, #0
 800782a:	d006      	beq.n	800783a <SBGC32_ParseDataStream+0x13e>
					cmd.readPos = 0;
 800782c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
				ReadBuff(&cmd, dataStreamStruct, SIZEOF_EVENT, PM_DEFAULT_8BIT);
 800783a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800783e:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007842:	f107 0014 	add.w	r0, r7, #20
 8007846:	2300      	movs	r3, #0
 8007848:	2204      	movs	r2, #4
 800784a:	6809      	ldr	r1, [r1, #0]
 800784c:	f7fe fd5e 	bl	800630c <ReadBuff>
				break;
 8007850:	e002      	b.n	8007858 <SBGC32_ParseDataStream+0x15c>
		}
	}
 8007852:	bf00      	nop
 8007854:	e000      	b.n	8007858 <SBGC32_ParseDataStream+0x15c>
							break;
 8007856:	bf00      	nop

	return generalSBGC->_parserCurrentStatus;
 8007858:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800785c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8007866:	4618      	mov	r0, r3
 8007868:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	0800c8cc 	.word	0x0800c8cc

08007874 <SBGC32_ReadRealTimeData4>:
 * 	@param 	*realTimeData - structure for storing real-time data
 *
 * 	@return Communication status
 */
TxRxStatus_t SBGC32_ReadRealTimeData4 (GeneralSBGC_t *generalSBGC, RealTimeData_t *realTimeData)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b0c4      	sub	sp, #272	; 0x110
 8007878:	af00      	add	r7, sp, #0
 800787a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800787e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007882:	6018      	str	r0, [r3, #0]
 8007884:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007888:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800788c:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_REALTIME_DATA_4);
 800788e:	f107 030c 	add.w	r3, r7, #12
 8007892:	2119      	movs	r1, #25
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe fe8d 	bl	80065b4 <InitCmdWrite>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_REALTIME_DATA_4), "Real-Time Data 4:") == TX_RX_OK)
 800789a:	f107 010c 	add.w	r1, r7, #12
 800789e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80078a6:	2219      	movs	r2, #25
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	f7fe fc30 	bl	800610e <SBGC32_TX_RX>
 80078ae:	4603      	mov	r3, r0
 80078b0:	4619      	mov	r1, r3
 80078b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80078ba:	4a0f      	ldr	r2, [pc, #60]	; (80078f8 <SBGC32_ReadRealTimeData4+0x84>)
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	f7ff f9ed 	bl	8006c9c <CheckReceipt>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10a      	bne.n	80078de <SBGC32_ReadRealTimeData4+0x6a>
		ReadBuff(&cmd, realTimeData, sizeof(RealTimeData_t), PM_REALTIME_DATA_4);
 80078c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078cc:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 80078d0:	f107 000c 	add.w	r0, r7, #12
 80078d4:	2318      	movs	r3, #24
 80078d6:	227c      	movs	r2, #124	; 0x7c
 80078d8:	6809      	ldr	r1, [r1, #0]
 80078da:	f7fe fd17 	bl	800630c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 80078de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	0800c908 	.word	0x0800c908

080078fc <SBGC32_ReadBoardInfo>:
 *	@param	cfg - configuration for this serial driver
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadBoardInfo (GeneralSBGC_t *generalSBGC, BoardInfo_t *boardInfo, ui16 cfg)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b0c6      	sub	sp, #280	; 0x118
 8007900:	af00      	add	r7, sp, #0
 8007902:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007906:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800790a:	6018      	str	r0, [r3, #0]
 800790c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007910:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007914:	6019      	str	r1, [r3, #0]
 8007916:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800791a:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 800791e:	801a      	strh	r2, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO);
 8007920:	f107 0314 	add.w	r3, r7, #20
 8007924:	2156      	movs	r1, #86	; 0x56
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fe44 	bl	80065b4 <InitCmdWrite>
	WriteWord(&cmd, cfg);
 800792c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007930:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8007934:	881a      	ldrh	r2, [r3, #0]
 8007936:	f107 0314 	add.w	r3, r7, #20
 800793a:	4611      	mov	r1, r2
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe fd84 	bl	800644a <WriteWord>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO), "Board Info:") == TX_RX_OK)
 8007942:	f107 0114 	add.w	r1, r7, #20
 8007946:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800794a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800794e:	2256      	movs	r2, #86	; 0x56
 8007950:	6818      	ldr	r0, [r3, #0]
 8007952:	f7fe fbdc 	bl	800610e <SBGC32_TX_RX>
 8007956:	4603      	mov	r3, r0
 8007958:	4619      	mov	r1, r3
 800795a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800795e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007962:	4a0f      	ldr	r2, [pc, #60]	; (80079a0 <SBGC32_ReadBoardInfo+0xa4>)
 8007964:	6818      	ldr	r0, [r3, #0]
 8007966:	f7ff f999 	bl	8006c9c <CheckReceipt>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <SBGC32_ReadBoardInfo+0x8a>
		ReadBuff(&cmd, boardInfo, sizeof(BoardInfo_t), PM_BOARD_INFO);
 8007970:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007974:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007978:	f107 0014 	add.w	r0, r7, #20
 800797c:	231b      	movs	r3, #27
 800797e:	2212      	movs	r2, #18
 8007980:	6809      	ldr	r1, [r1, #0]
 8007982:	f7fe fcc3 	bl	800630c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 8007986:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800798a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8007994:	4618      	mov	r0, r3
 8007996:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	0800c960 	.word	0x0800c960

080079a4 <SBGC32_ReadBoardInfo3>:
 *	@param	*boardInfo3 - structure storing additional board information
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_ReadBoardInfo3 (GeneralSBGC_t *generalSBGC, BoardInfo3_t *boardInfo3)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b0c4      	sub	sp, #272	; 0x110
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079b2:	6018      	str	r0, [r3, #0]
 80079b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80079bc:	6019      	str	r1, [r3, #0]
	SerialCommand_t cmd;
	InitCmdWrite(&cmd, CMD_BOARD_INFO_3);
 80079be:	f107 030c 	add.w	r3, r7, #12
 80079c2:	2114      	movs	r1, #20
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fdf5 	bl	80065b4 <InitCmdWrite>

	if (CheckReceipt(generalSBGC, SBGC32_TX_RX(generalSBGC, &cmd, CMD_BOARD_INFO_3), "Board Info 3:") == TX_RX_OK)
 80079ca:	f107 010c 	add.w	r1, r7, #12
 80079ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079d6:	2214      	movs	r2, #20
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	f7fe fb98 	bl	800610e <SBGC32_TX_RX>
 80079de:	4603      	mov	r3, r0
 80079e0:	4619      	mov	r1, r3
 80079e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80079ea:	4a0f      	ldr	r2, [pc, #60]	; (8007a28 <SBGC32_ReadBoardInfo3+0x84>)
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	f7ff f955 	bl	8006c9c <CheckReceipt>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <SBGC32_ReadBoardInfo3+0x6a>
		ReadBuff(&cmd, boardInfo3, sizeof(BoardInfo3_t), PM_BOARD_INFO_3);
 80079f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079fc:	f5a3 7188 	sub.w	r1, r3, #272	; 0x110
 8007a00:	f107 000c 	add.w	r0, r7, #12
 8007a04:	231c      	movs	r3, #28
 8007a06:	2245      	movs	r2, #69	; 0x45
 8007a08:	6809      	ldr	r1, [r1, #0]
 8007a0a:	f7fe fc7f 	bl	800630c <ReadBuff>

	return generalSBGC->_parserCurrentStatus;
 8007a0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	0800c96c 	.word	0x0800c96c

08007a2c <SBGC32_PlayBeeper>:
 *			beeper playback settings
 *
 *	@return Communication status
 */
TxRxStatus_t SBGC32_PlayBeeper (GeneralSBGC_t *generalSBGC, const BeeperSettings_t *beeperSettings)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b0c4      	sub	sp, #272	; 0x110
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007a3a:	6018      	str	r0, [r3, #0]
 8007a3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a44:	6019      	str	r1, [r3, #0]
    SerialCommand_t cmd;
    InitCmdWrite(&cmd, CMD_BEEP_SOUND);
 8007a46:	f107 030c 	add.w	r3, r7, #12
 8007a4a:	2159      	movs	r1, #89	; 0x59
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe fdb1 	bl	80065b4 <InitCmdWrite>
    WriteWord(&cmd, beeperSettings->mode);
 8007a52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a56:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	f107 030c 	add.w	r3, r7, #12
 8007a64:	4611      	mov	r1, r2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fcef 	bl	800644a <WriteWord>
    WriteByte(&cmd, beeperSettings->noteLength);
 8007a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	789a      	ldrb	r2, [r3, #2]
 8007a78:	f107 030c 	add.w	r3, r7, #12
 8007a7c:	4611      	mov	r1, r2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fcb4 	bl	80063ec <WriteByte>
    WriteByte(&cmd, beeperSettings->decayFactor);
 8007a84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	78da      	ldrb	r2, [r3, #3]
 8007a90:	f107 030c 	add.w	r3, r7, #12
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fe fca8 	bl	80063ec <WriteByte>
	WriteEmptyBuff(&cmd, 8);  // reserved[8]
 8007a9c:	f107 030c 	add.w	r3, r7, #12
 8007aa0:	2108      	movs	r1, #8
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fd52 	bl	800654c <WriteEmptyBuff>

    if (beeperSettings->mode == BM_BEEPER_MODE_CUSTOM_MELODY)
 8007aa8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007aac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aba:	d125      	bne.n	8007b08 <SBGC32_PlayBeeper+0xdc>
    	for (ui8 i = 0; i < beeperSettings->notesQuan; i++)
 8007abc:	2300      	movs	r3, #0
 8007abe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007ac2:	e016      	b.n	8007af2 <SBGC32_PlayBeeper+0xc6>
    		WriteWord(&cmd, beeperSettings->notesFreqHz[i]);
 8007ac4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007ac8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8007acc:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	4413      	add	r3, r2
 8007ad8:	889b      	ldrh	r3, [r3, #4]
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	f107 030c 	add.w	r3, r7, #12
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe fcb1 	bl	800644a <WriteWord>
    	for (ui8 i = 0; i < beeperSettings->notesQuan; i++)
 8007ae8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8007aec:	3301      	adds	r3, #1
 8007aee:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8007af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007af6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007b00:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3dd      	bcc.n	8007ac4 <SBGC32_PlayBeeper+0x98>

    SBGC32_TX(generalSBGC, &cmd);
 8007b08:	f107 020c 	add.w	r2, r7, #12
 8007b0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b14:	4611      	mov	r1, r2
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	f7fe f860 	bl	8005bdc <SBGC32_TX>
    /* no need confirmation */
    return generalSBGC->_parserCurrentStatus;
 8007b1c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b20:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000b64 	.word	0x20000b64

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	4d0d      	ldr	r5, [pc, #52]	; (8007b78 <__libc_init_array+0x38>)
 8007b44:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b46:	1b64      	subs	r4, r4, r5
 8007b48:	10a4      	asrs	r4, r4, #2
 8007b4a:	2600      	movs	r6, #0
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	4d0b      	ldr	r5, [pc, #44]	; (8007b80 <__libc_init_array+0x40>)
 8007b52:	4c0c      	ldr	r4, [pc, #48]	; (8007b84 <__libc_init_array+0x44>)
 8007b54:	f004 fb84 	bl	800c260 <_init>
 8007b58:	1b64      	subs	r4, r4, r5
 8007b5a:	10a4      	asrs	r4, r4, #2
 8007b5c:	2600      	movs	r6, #0
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	0800ce54 	.word	0x0800ce54
 8007b7c:	0800ce54 	.word	0x0800ce54
 8007b80:	0800ce54 	.word	0x0800ce54
 8007b84:	0800ce58 	.word	0x0800ce58

08007b88 <malloc>:
 8007b88:	4b02      	ldr	r3, [pc, #8]	; (8007b94 <malloc+0xc>)
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	f000 b885 	b.w	8007c9c <_malloc_r>
 8007b92:	bf00      	nop
 8007b94:	20000b64 	.word	0x20000b64

08007b98 <memcpy>:
 8007b98:	440a      	add	r2, r1
 8007b9a:	4291      	cmp	r1, r2
 8007b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ba0:	d100      	bne.n	8007ba4 <memcpy+0xc>
 8007ba2:	4770      	bx	lr
 8007ba4:	b510      	push	{r4, lr}
 8007ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bae:	4291      	cmp	r1, r2
 8007bb0:	d1f9      	bne.n	8007ba6 <memcpy+0xe>
 8007bb2:	bd10      	pop	{r4, pc}

08007bb4 <memset>:
 8007bb4:	4402      	add	r2, r0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d100      	bne.n	8007bbe <memset+0xa>
 8007bbc:	4770      	bx	lr
 8007bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007bc2:	e7f9      	b.n	8007bb8 <memset+0x4>

08007bc4 <_free_r>:
 8007bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bc6:	2900      	cmp	r1, #0
 8007bc8:	d044      	beq.n	8007c54 <_free_r+0x90>
 8007bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bce:	9001      	str	r0, [sp, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bd6:	bfb8      	it	lt
 8007bd8:	18e4      	addlt	r4, r4, r3
 8007bda:	f002 ff2d 	bl	800aa38 <__malloc_lock>
 8007bde:	4a1e      	ldr	r2, [pc, #120]	; (8007c58 <_free_r+0x94>)
 8007be0:	9801      	ldr	r0, [sp, #4]
 8007be2:	6813      	ldr	r3, [r2, #0]
 8007be4:	b933      	cbnz	r3, 8007bf4 <_free_r+0x30>
 8007be6:	6063      	str	r3, [r4, #4]
 8007be8:	6014      	str	r4, [r2, #0]
 8007bea:	b003      	add	sp, #12
 8007bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bf0:	f002 bf28 	b.w	800aa44 <__malloc_unlock>
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	d908      	bls.n	8007c0a <_free_r+0x46>
 8007bf8:	6825      	ldr	r5, [r4, #0]
 8007bfa:	1961      	adds	r1, r4, r5
 8007bfc:	428b      	cmp	r3, r1
 8007bfe:	bf01      	itttt	eq
 8007c00:	6819      	ldreq	r1, [r3, #0]
 8007c02:	685b      	ldreq	r3, [r3, #4]
 8007c04:	1949      	addeq	r1, r1, r5
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	e7ed      	b.n	8007be6 <_free_r+0x22>
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	b10b      	cbz	r3, 8007c14 <_free_r+0x50>
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	d9fa      	bls.n	8007c0a <_free_r+0x46>
 8007c14:	6811      	ldr	r1, [r2, #0]
 8007c16:	1855      	adds	r5, r2, r1
 8007c18:	42a5      	cmp	r5, r4
 8007c1a:	d10b      	bne.n	8007c34 <_free_r+0x70>
 8007c1c:	6824      	ldr	r4, [r4, #0]
 8007c1e:	4421      	add	r1, r4
 8007c20:	1854      	adds	r4, r2, r1
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	6011      	str	r1, [r2, #0]
 8007c26:	d1e0      	bne.n	8007bea <_free_r+0x26>
 8007c28:	681c      	ldr	r4, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	6053      	str	r3, [r2, #4]
 8007c2e:	4421      	add	r1, r4
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	e7da      	b.n	8007bea <_free_r+0x26>
 8007c34:	d902      	bls.n	8007c3c <_free_r+0x78>
 8007c36:	230c      	movs	r3, #12
 8007c38:	6003      	str	r3, [r0, #0]
 8007c3a:	e7d6      	b.n	8007bea <_free_r+0x26>
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	1961      	adds	r1, r4, r5
 8007c40:	428b      	cmp	r3, r1
 8007c42:	bf04      	itt	eq
 8007c44:	6819      	ldreq	r1, [r3, #0]
 8007c46:	685b      	ldreq	r3, [r3, #4]
 8007c48:	6063      	str	r3, [r4, #4]
 8007c4a:	bf04      	itt	eq
 8007c4c:	1949      	addeq	r1, r1, r5
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	6054      	str	r4, [r2, #4]
 8007c52:	e7ca      	b.n	8007bea <_free_r+0x26>
 8007c54:	b003      	add	sp, #12
 8007c56:	bd30      	pop	{r4, r5, pc}
 8007c58:	2000185c 	.word	0x2000185c

08007c5c <sbrk_aligned>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	4e0e      	ldr	r6, [pc, #56]	; (8007c98 <sbrk_aligned+0x3c>)
 8007c60:	460c      	mov	r4, r1
 8007c62:	6831      	ldr	r1, [r6, #0]
 8007c64:	4605      	mov	r5, r0
 8007c66:	b911      	cbnz	r1, 8007c6e <sbrk_aligned+0x12>
 8007c68:	f000 fed6 	bl	8008a18 <_sbrk_r>
 8007c6c:	6030      	str	r0, [r6, #0]
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	f000 fed1 	bl	8008a18 <_sbrk_r>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	d00a      	beq.n	8007c90 <sbrk_aligned+0x34>
 8007c7a:	1cc4      	adds	r4, r0, #3
 8007c7c:	f024 0403 	bic.w	r4, r4, #3
 8007c80:	42a0      	cmp	r0, r4
 8007c82:	d007      	beq.n	8007c94 <sbrk_aligned+0x38>
 8007c84:	1a21      	subs	r1, r4, r0
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 fec6 	bl	8008a18 <_sbrk_r>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d101      	bne.n	8007c94 <sbrk_aligned+0x38>
 8007c90:	f04f 34ff 	mov.w	r4, #4294967295
 8007c94:	4620      	mov	r0, r4
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	20001860 	.word	0x20001860

08007c9c <_malloc_r>:
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	1ccd      	adds	r5, r1, #3
 8007ca2:	f025 0503 	bic.w	r5, r5, #3
 8007ca6:	3508      	adds	r5, #8
 8007ca8:	2d0c      	cmp	r5, #12
 8007caa:	bf38      	it	cc
 8007cac:	250c      	movcc	r5, #12
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	db01      	blt.n	8007cb8 <_malloc_r+0x1c>
 8007cb4:	42a9      	cmp	r1, r5
 8007cb6:	d905      	bls.n	8007cc4 <_malloc_r+0x28>
 8007cb8:	230c      	movs	r3, #12
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	2600      	movs	r6, #0
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	4e2e      	ldr	r6, [pc, #184]	; (8007d80 <_malloc_r+0xe4>)
 8007cc6:	f002 feb7 	bl	800aa38 <__malloc_lock>
 8007cca:	6833      	ldr	r3, [r6, #0]
 8007ccc:	461c      	mov	r4, r3
 8007cce:	bb34      	cbnz	r4, 8007d1e <_malloc_r+0x82>
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff ffc2 	bl	8007c5c <sbrk_aligned>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	4604      	mov	r4, r0
 8007cdc:	d14d      	bne.n	8007d7a <_malloc_r+0xde>
 8007cde:	6834      	ldr	r4, [r6, #0]
 8007ce0:	4626      	mov	r6, r4
 8007ce2:	2e00      	cmp	r6, #0
 8007ce4:	d140      	bne.n	8007d68 <_malloc_r+0xcc>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4638      	mov	r0, r7
 8007cec:	eb04 0803 	add.w	r8, r4, r3
 8007cf0:	f000 fe92 	bl	8008a18 <_sbrk_r>
 8007cf4:	4580      	cmp	r8, r0
 8007cf6:	d13a      	bne.n	8007d6e <_malloc_r+0xd2>
 8007cf8:	6821      	ldr	r1, [r4, #0]
 8007cfa:	3503      	adds	r5, #3
 8007cfc:	1a6d      	subs	r5, r5, r1
 8007cfe:	f025 0503 	bic.w	r5, r5, #3
 8007d02:	3508      	adds	r5, #8
 8007d04:	2d0c      	cmp	r5, #12
 8007d06:	bf38      	it	cc
 8007d08:	250c      	movcc	r5, #12
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff ffa5 	bl	8007c5c <sbrk_aligned>
 8007d12:	3001      	adds	r0, #1
 8007d14:	d02b      	beq.n	8007d6e <_malloc_r+0xd2>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	442b      	add	r3, r5
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	e00e      	b.n	8007d3c <_malloc_r+0xa0>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	1b52      	subs	r2, r2, r5
 8007d22:	d41e      	bmi.n	8007d62 <_malloc_r+0xc6>
 8007d24:	2a0b      	cmp	r2, #11
 8007d26:	d916      	bls.n	8007d56 <_malloc_r+0xba>
 8007d28:	1961      	adds	r1, r4, r5
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	6025      	str	r5, [r4, #0]
 8007d2e:	bf18      	it	ne
 8007d30:	6059      	strne	r1, [r3, #4]
 8007d32:	6863      	ldr	r3, [r4, #4]
 8007d34:	bf08      	it	eq
 8007d36:	6031      	streq	r1, [r6, #0]
 8007d38:	5162      	str	r2, [r4, r5]
 8007d3a:	604b      	str	r3, [r1, #4]
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f104 060b 	add.w	r6, r4, #11
 8007d42:	f002 fe7f 	bl	800aa44 <__malloc_unlock>
 8007d46:	f026 0607 	bic.w	r6, r6, #7
 8007d4a:	1d23      	adds	r3, r4, #4
 8007d4c:	1af2      	subs	r2, r6, r3
 8007d4e:	d0b6      	beq.n	8007cbe <_malloc_r+0x22>
 8007d50:	1b9b      	subs	r3, r3, r6
 8007d52:	50a3      	str	r3, [r4, r2]
 8007d54:	e7b3      	b.n	8007cbe <_malloc_r+0x22>
 8007d56:	6862      	ldr	r2, [r4, #4]
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	bf0c      	ite	eq
 8007d5c:	6032      	streq	r2, [r6, #0]
 8007d5e:	605a      	strne	r2, [r3, #4]
 8007d60:	e7ec      	b.n	8007d3c <_malloc_r+0xa0>
 8007d62:	4623      	mov	r3, r4
 8007d64:	6864      	ldr	r4, [r4, #4]
 8007d66:	e7b2      	b.n	8007cce <_malloc_r+0x32>
 8007d68:	4634      	mov	r4, r6
 8007d6a:	6876      	ldr	r6, [r6, #4]
 8007d6c:	e7b9      	b.n	8007ce2 <_malloc_r+0x46>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	603b      	str	r3, [r7, #0]
 8007d72:	4638      	mov	r0, r7
 8007d74:	f002 fe66 	bl	800aa44 <__malloc_unlock>
 8007d78:	e7a1      	b.n	8007cbe <_malloc_r+0x22>
 8007d7a:	6025      	str	r5, [r4, #0]
 8007d7c:	e7de      	b.n	8007d3c <_malloc_r+0xa0>
 8007d7e:	bf00      	nop
 8007d80:	2000185c 	.word	0x2000185c

08007d84 <__cvt>:
 8007d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d86:	ed2d 8b02 	vpush	{d8}
 8007d8a:	eeb0 8b40 	vmov.f64	d8, d0
 8007d8e:	b085      	sub	sp, #20
 8007d90:	4617      	mov	r7, r2
 8007d92:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007d94:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007d96:	ee18 2a90 	vmov	r2, s17
 8007d9a:	f025 0520 	bic.w	r5, r5, #32
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	bfb6      	itet	lt
 8007da2:	222d      	movlt	r2, #45	; 0x2d
 8007da4:	2200      	movge	r2, #0
 8007da6:	eeb1 8b40 	vneglt.f64	d8, d0
 8007daa:	2d46      	cmp	r5, #70	; 0x46
 8007dac:	460c      	mov	r4, r1
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	d004      	beq.n	8007dbc <__cvt+0x38>
 8007db2:	2d45      	cmp	r5, #69	; 0x45
 8007db4:	d100      	bne.n	8007db8 <__cvt+0x34>
 8007db6:	3401      	adds	r4, #1
 8007db8:	2102      	movs	r1, #2
 8007dba:	e000      	b.n	8007dbe <__cvt+0x3a>
 8007dbc:	2103      	movs	r1, #3
 8007dbe:	ab03      	add	r3, sp, #12
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	ab02      	add	r3, sp, #8
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	4633      	mov	r3, r6
 8007dca:	eeb0 0b48 	vmov.f64	d0, d8
 8007dce:	f001 fd3f 	bl	8009850 <_dtoa_r>
 8007dd2:	2d47      	cmp	r5, #71	; 0x47
 8007dd4:	d101      	bne.n	8007dda <__cvt+0x56>
 8007dd6:	07fb      	lsls	r3, r7, #31
 8007dd8:	d51a      	bpl.n	8007e10 <__cvt+0x8c>
 8007dda:	2d46      	cmp	r5, #70	; 0x46
 8007ddc:	eb00 0204 	add.w	r2, r0, r4
 8007de0:	d10c      	bne.n	8007dfc <__cvt+0x78>
 8007de2:	7803      	ldrb	r3, [r0, #0]
 8007de4:	2b30      	cmp	r3, #48	; 0x30
 8007de6:	d107      	bne.n	8007df8 <__cvt+0x74>
 8007de8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df0:	bf1c      	itt	ne
 8007df2:	f1c4 0401 	rsbne	r4, r4, #1
 8007df6:	6034      	strne	r4, [r6, #0]
 8007df8:	6833      	ldr	r3, [r6, #0]
 8007dfa:	441a      	add	r2, r3
 8007dfc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e04:	bf08      	it	eq
 8007e06:	9203      	streq	r2, [sp, #12]
 8007e08:	2130      	movs	r1, #48	; 0x30
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d307      	bcc.n	8007e20 <__cvt+0x9c>
 8007e10:	9b03      	ldr	r3, [sp, #12]
 8007e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e14:	1a1b      	subs	r3, r3, r0
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	b005      	add	sp, #20
 8007e1a:	ecbd 8b02 	vpop	{d8}
 8007e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e20:	1c5c      	adds	r4, r3, #1
 8007e22:	9403      	str	r4, [sp, #12]
 8007e24:	7019      	strb	r1, [r3, #0]
 8007e26:	e7f0      	b.n	8007e0a <__cvt+0x86>

08007e28 <__exponent>:
 8007e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	bfb8      	it	lt
 8007e30:	4249      	neglt	r1, r1
 8007e32:	f803 2b02 	strb.w	r2, [r3], #2
 8007e36:	bfb4      	ite	lt
 8007e38:	222d      	movlt	r2, #45	; 0x2d
 8007e3a:	222b      	movge	r2, #43	; 0x2b
 8007e3c:	2909      	cmp	r1, #9
 8007e3e:	7042      	strb	r2, [r0, #1]
 8007e40:	dd2a      	ble.n	8007e98 <__exponent+0x70>
 8007e42:	f10d 0407 	add.w	r4, sp, #7
 8007e46:	46a4      	mov	ip, r4
 8007e48:	270a      	movs	r7, #10
 8007e4a:	46a6      	mov	lr, r4
 8007e4c:	460a      	mov	r2, r1
 8007e4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007e52:	fb07 1516 	mls	r5, r7, r6, r1
 8007e56:	3530      	adds	r5, #48	; 0x30
 8007e58:	2a63      	cmp	r2, #99	; 0x63
 8007e5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007e62:	4631      	mov	r1, r6
 8007e64:	dcf1      	bgt.n	8007e4a <__exponent+0x22>
 8007e66:	3130      	adds	r1, #48	; 0x30
 8007e68:	f1ae 0502 	sub.w	r5, lr, #2
 8007e6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e70:	1c44      	adds	r4, r0, #1
 8007e72:	4629      	mov	r1, r5
 8007e74:	4561      	cmp	r1, ip
 8007e76:	d30a      	bcc.n	8007e8e <__exponent+0x66>
 8007e78:	f10d 0209 	add.w	r2, sp, #9
 8007e7c:	eba2 020e 	sub.w	r2, r2, lr
 8007e80:	4565      	cmp	r5, ip
 8007e82:	bf88      	it	hi
 8007e84:	2200      	movhi	r2, #0
 8007e86:	4413      	add	r3, r2
 8007e88:	1a18      	subs	r0, r3, r0
 8007e8a:	b003      	add	sp, #12
 8007e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e96:	e7ed      	b.n	8007e74 <__exponent+0x4c>
 8007e98:	2330      	movs	r3, #48	; 0x30
 8007e9a:	3130      	adds	r1, #48	; 0x30
 8007e9c:	7083      	strb	r3, [r0, #2]
 8007e9e:	70c1      	strb	r1, [r0, #3]
 8007ea0:	1d03      	adds	r3, r0, #4
 8007ea2:	e7f1      	b.n	8007e88 <__exponent+0x60>
 8007ea4:	0000      	movs	r0, r0
	...

08007ea8 <_printf_float>:
 8007ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eac:	b08b      	sub	sp, #44	; 0x2c
 8007eae:	460c      	mov	r4, r1
 8007eb0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007eb4:	4616      	mov	r6, r2
 8007eb6:	461f      	mov	r7, r3
 8007eb8:	4605      	mov	r5, r0
 8007eba:	f002 fda7 	bl	800aa0c <_localeconv_r>
 8007ebe:	f8d0 b000 	ldr.w	fp, [r0]
 8007ec2:	4658      	mov	r0, fp
 8007ec4:	f7f8 f9bc 	bl	8000240 <strlen>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	9308      	str	r3, [sp, #32]
 8007ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	3307      	adds	r3, #7
 8007ed8:	f023 0307 	bic.w	r3, r3, #7
 8007edc:	f103 0108 	add.w	r1, r3, #8
 8007ee0:	f8c8 1000 	str.w	r1, [r8]
 8007ee4:	4682      	mov	sl, r0
 8007ee6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007eea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007eee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008150 <_printf_float+0x2a8>
 8007ef2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007ef6:	eeb0 6bc0 	vabs.f64	d6, d0
 8007efa:	eeb4 6b47 	vcmp.f64	d6, d7
 8007efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f02:	dd24      	ble.n	8007f4e <_printf_float+0xa6>
 8007f04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0c:	d502      	bpl.n	8007f14 <_printf_float+0x6c>
 8007f0e:	232d      	movs	r3, #45	; 0x2d
 8007f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f14:	4b90      	ldr	r3, [pc, #576]	; (8008158 <_printf_float+0x2b0>)
 8007f16:	4891      	ldr	r0, [pc, #580]	; (800815c <_printf_float+0x2b4>)
 8007f18:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007f1c:	bf94      	ite	ls
 8007f1e:	4698      	movls	r8, r3
 8007f20:	4680      	movhi	r8, r0
 8007f22:	2303      	movs	r3, #3
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	f022 0204 	bic.w	r2, r2, #4
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6022      	str	r2, [r4, #0]
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	9700      	str	r7, [sp, #0]
 8007f32:	4633      	mov	r3, r6
 8007f34:	aa09      	add	r2, sp, #36	; 0x24
 8007f36:	4621      	mov	r1, r4
 8007f38:	4628      	mov	r0, r5
 8007f3a:	f000 f9d3 	bl	80082e4 <_printf_common>
 8007f3e:	3001      	adds	r0, #1
 8007f40:	f040 808a 	bne.w	8008058 <_printf_float+0x1b0>
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	b00b      	add	sp, #44	; 0x2c
 8007f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f56:	d709      	bvc.n	8007f6c <_printf_float+0xc4>
 8007f58:	ee10 3a90 	vmov	r3, s1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bfbc      	itt	lt
 8007f60:	232d      	movlt	r3, #45	; 0x2d
 8007f62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f66:	487e      	ldr	r0, [pc, #504]	; (8008160 <_printf_float+0x2b8>)
 8007f68:	4b7e      	ldr	r3, [pc, #504]	; (8008164 <_printf_float+0x2bc>)
 8007f6a:	e7d5      	b.n	8007f18 <_printf_float+0x70>
 8007f6c:	6863      	ldr	r3, [r4, #4]
 8007f6e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007f72:	9104      	str	r1, [sp, #16]
 8007f74:	1c59      	adds	r1, r3, #1
 8007f76:	d13c      	bne.n	8007ff2 <_printf_float+0x14a>
 8007f78:	2306      	movs	r3, #6
 8007f7a:	6063      	str	r3, [r4, #4]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	ab08      	add	r3, sp, #32
 8007f82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007f86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f8a:	ab07      	add	r3, sp, #28
 8007f8c:	6861      	ldr	r1, [r4, #4]
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	6022      	str	r2, [r4, #0]
 8007f92:	f10d 031b 	add.w	r3, sp, #27
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7ff fef4 	bl	8007d84 <__cvt>
 8007f9c:	9b04      	ldr	r3, [sp, #16]
 8007f9e:	9907      	ldr	r1, [sp, #28]
 8007fa0:	2b47      	cmp	r3, #71	; 0x47
 8007fa2:	4680      	mov	r8, r0
 8007fa4:	d108      	bne.n	8007fb8 <_printf_float+0x110>
 8007fa6:	1cc8      	adds	r0, r1, #3
 8007fa8:	db02      	blt.n	8007fb0 <_printf_float+0x108>
 8007faa:	6863      	ldr	r3, [r4, #4]
 8007fac:	4299      	cmp	r1, r3
 8007fae:	dd41      	ble.n	8008034 <_printf_float+0x18c>
 8007fb0:	f1a9 0902 	sub.w	r9, r9, #2
 8007fb4:	fa5f f989 	uxtb.w	r9, r9
 8007fb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007fbc:	d820      	bhi.n	8008000 <_printf_float+0x158>
 8007fbe:	3901      	subs	r1, #1
 8007fc0:	464a      	mov	r2, r9
 8007fc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007fc6:	9107      	str	r1, [sp, #28]
 8007fc8:	f7ff ff2e 	bl	8007e28 <__exponent>
 8007fcc:	9a08      	ldr	r2, [sp, #32]
 8007fce:	9004      	str	r0, [sp, #16]
 8007fd0:	1813      	adds	r3, r2, r0
 8007fd2:	2a01      	cmp	r2, #1
 8007fd4:	6123      	str	r3, [r4, #16]
 8007fd6:	dc02      	bgt.n	8007fde <_printf_float+0x136>
 8007fd8:	6822      	ldr	r2, [r4, #0]
 8007fda:	07d2      	lsls	r2, r2, #31
 8007fdc:	d501      	bpl.n	8007fe2 <_printf_float+0x13a>
 8007fde:	3301      	adds	r3, #1
 8007fe0:	6123      	str	r3, [r4, #16]
 8007fe2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0a2      	beq.n	8007f30 <_printf_float+0x88>
 8007fea:	232d      	movs	r3, #45	; 0x2d
 8007fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff0:	e79e      	b.n	8007f30 <_printf_float+0x88>
 8007ff2:	9904      	ldr	r1, [sp, #16]
 8007ff4:	2947      	cmp	r1, #71	; 0x47
 8007ff6:	d1c1      	bne.n	8007f7c <_printf_float+0xd4>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d1bf      	bne.n	8007f7c <_printf_float+0xd4>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e7bc      	b.n	8007f7a <_printf_float+0xd2>
 8008000:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008004:	d118      	bne.n	8008038 <_printf_float+0x190>
 8008006:	2900      	cmp	r1, #0
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	dd0b      	ble.n	8008024 <_printf_float+0x17c>
 800800c:	6121      	str	r1, [r4, #16]
 800800e:	b913      	cbnz	r3, 8008016 <_printf_float+0x16e>
 8008010:	6822      	ldr	r2, [r4, #0]
 8008012:	07d0      	lsls	r0, r2, #31
 8008014:	d502      	bpl.n	800801c <_printf_float+0x174>
 8008016:	3301      	adds	r3, #1
 8008018:	440b      	add	r3, r1
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	2300      	movs	r3, #0
 800801e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	e7de      	b.n	8007fe2 <_printf_float+0x13a>
 8008024:	b913      	cbnz	r3, 800802c <_printf_float+0x184>
 8008026:	6822      	ldr	r2, [r4, #0]
 8008028:	07d2      	lsls	r2, r2, #31
 800802a:	d501      	bpl.n	8008030 <_printf_float+0x188>
 800802c:	3302      	adds	r3, #2
 800802e:	e7f4      	b.n	800801a <_printf_float+0x172>
 8008030:	2301      	movs	r3, #1
 8008032:	e7f2      	b.n	800801a <_printf_float+0x172>
 8008034:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008038:	9b08      	ldr	r3, [sp, #32]
 800803a:	4299      	cmp	r1, r3
 800803c:	db05      	blt.n	800804a <_printf_float+0x1a2>
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	6121      	str	r1, [r4, #16]
 8008042:	07d8      	lsls	r0, r3, #31
 8008044:	d5ea      	bpl.n	800801c <_printf_float+0x174>
 8008046:	1c4b      	adds	r3, r1, #1
 8008048:	e7e7      	b.n	800801a <_printf_float+0x172>
 800804a:	2900      	cmp	r1, #0
 800804c:	bfd4      	ite	le
 800804e:	f1c1 0202 	rsble	r2, r1, #2
 8008052:	2201      	movgt	r2, #1
 8008054:	4413      	add	r3, r2
 8008056:	e7e0      	b.n	800801a <_printf_float+0x172>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	055a      	lsls	r2, r3, #21
 800805c:	d407      	bmi.n	800806e <_printf_float+0x1c6>
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	4642      	mov	r2, r8
 8008062:	4631      	mov	r1, r6
 8008064:	4628      	mov	r0, r5
 8008066:	47b8      	blx	r7
 8008068:	3001      	adds	r0, #1
 800806a:	d12a      	bne.n	80080c2 <_printf_float+0x21a>
 800806c:	e76a      	b.n	8007f44 <_printf_float+0x9c>
 800806e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008072:	f240 80e2 	bls.w	800823a <_printf_float+0x392>
 8008076:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800807a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800807e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008082:	d133      	bne.n	80080ec <_printf_float+0x244>
 8008084:	4a38      	ldr	r2, [pc, #224]	; (8008168 <_printf_float+0x2c0>)
 8008086:	2301      	movs	r3, #1
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	47b8      	blx	r7
 800808e:	3001      	adds	r0, #1
 8008090:	f43f af58 	beq.w	8007f44 <_printf_float+0x9c>
 8008094:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008098:	429a      	cmp	r2, r3
 800809a:	db02      	blt.n	80080a2 <_printf_float+0x1fa>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	07d8      	lsls	r0, r3, #31
 80080a0:	d50f      	bpl.n	80080c2 <_printf_float+0x21a>
 80080a2:	4653      	mov	r3, sl
 80080a4:	465a      	mov	r2, fp
 80080a6:	4631      	mov	r1, r6
 80080a8:	4628      	mov	r0, r5
 80080aa:	47b8      	blx	r7
 80080ac:	3001      	adds	r0, #1
 80080ae:	f43f af49 	beq.w	8007f44 <_printf_float+0x9c>
 80080b2:	f04f 0800 	mov.w	r8, #0
 80080b6:	f104 091a 	add.w	r9, r4, #26
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	3b01      	subs	r3, #1
 80080be:	4543      	cmp	r3, r8
 80080c0:	dc09      	bgt.n	80080d6 <_printf_float+0x22e>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	079b      	lsls	r3, r3, #30
 80080c6:	f100 8108 	bmi.w	80082da <_printf_float+0x432>
 80080ca:	68e0      	ldr	r0, [r4, #12]
 80080cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ce:	4298      	cmp	r0, r3
 80080d0:	bfb8      	it	lt
 80080d2:	4618      	movlt	r0, r3
 80080d4:	e738      	b.n	8007f48 <_printf_float+0xa0>
 80080d6:	2301      	movs	r3, #1
 80080d8:	464a      	mov	r2, r9
 80080da:	4631      	mov	r1, r6
 80080dc:	4628      	mov	r0, r5
 80080de:	47b8      	blx	r7
 80080e0:	3001      	adds	r0, #1
 80080e2:	f43f af2f 	beq.w	8007f44 <_printf_float+0x9c>
 80080e6:	f108 0801 	add.w	r8, r8, #1
 80080ea:	e7e6      	b.n	80080ba <_printf_float+0x212>
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	dc3c      	bgt.n	800816c <_printf_float+0x2c4>
 80080f2:	4a1d      	ldr	r2, [pc, #116]	; (8008168 <_printf_float+0x2c0>)
 80080f4:	2301      	movs	r3, #1
 80080f6:	4631      	mov	r1, r6
 80080f8:	4628      	mov	r0, r5
 80080fa:	47b8      	blx	r7
 80080fc:	3001      	adds	r0, #1
 80080fe:	f43f af21 	beq.w	8007f44 <_printf_float+0x9c>
 8008102:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008106:	4313      	orrs	r3, r2
 8008108:	d102      	bne.n	8008110 <_printf_float+0x268>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	07d9      	lsls	r1, r3, #31
 800810e:	d5d8      	bpl.n	80080c2 <_printf_float+0x21a>
 8008110:	4653      	mov	r3, sl
 8008112:	465a      	mov	r2, fp
 8008114:	4631      	mov	r1, r6
 8008116:	4628      	mov	r0, r5
 8008118:	47b8      	blx	r7
 800811a:	3001      	adds	r0, #1
 800811c:	f43f af12 	beq.w	8007f44 <_printf_float+0x9c>
 8008120:	f04f 0900 	mov.w	r9, #0
 8008124:	f104 0a1a 	add.w	sl, r4, #26
 8008128:	9b07      	ldr	r3, [sp, #28]
 800812a:	425b      	negs	r3, r3
 800812c:	454b      	cmp	r3, r9
 800812e:	dc01      	bgt.n	8008134 <_printf_float+0x28c>
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	e795      	b.n	8008060 <_printf_float+0x1b8>
 8008134:	2301      	movs	r3, #1
 8008136:	4652      	mov	r2, sl
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	f43f af00 	beq.w	8007f44 <_printf_float+0x9c>
 8008144:	f109 0901 	add.w	r9, r9, #1
 8008148:	e7ee      	b.n	8008128 <_printf_float+0x280>
 800814a:	bf00      	nop
 800814c:	f3af 8000 	nop.w
 8008150:	ffffffff 	.word	0xffffffff
 8008154:	7fefffff 	.word	0x7fefffff
 8008158:	0800c9a8 	.word	0x0800c9a8
 800815c:	0800c9ac 	.word	0x0800c9ac
 8008160:	0800c9b4 	.word	0x0800c9b4
 8008164:	0800c9b0 	.word	0x0800c9b0
 8008168:	0800c9b8 	.word	0x0800c9b8
 800816c:	9a08      	ldr	r2, [sp, #32]
 800816e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008170:	429a      	cmp	r2, r3
 8008172:	bfa8      	it	ge
 8008174:	461a      	movge	r2, r3
 8008176:	2a00      	cmp	r2, #0
 8008178:	4691      	mov	r9, r2
 800817a:	dc38      	bgt.n	80081ee <_printf_float+0x346>
 800817c:	2300      	movs	r3, #0
 800817e:	9305      	str	r3, [sp, #20]
 8008180:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008184:	f104 021a 	add.w	r2, r4, #26
 8008188:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800818a:	9905      	ldr	r1, [sp, #20]
 800818c:	9304      	str	r3, [sp, #16]
 800818e:	eba3 0309 	sub.w	r3, r3, r9
 8008192:	428b      	cmp	r3, r1
 8008194:	dc33      	bgt.n	80081fe <_printf_float+0x356>
 8008196:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800819a:	429a      	cmp	r2, r3
 800819c:	db3c      	blt.n	8008218 <_printf_float+0x370>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	07da      	lsls	r2, r3, #31
 80081a2:	d439      	bmi.n	8008218 <_printf_float+0x370>
 80081a4:	9b08      	ldr	r3, [sp, #32]
 80081a6:	9a04      	ldr	r2, [sp, #16]
 80081a8:	9907      	ldr	r1, [sp, #28]
 80081aa:	1a9a      	subs	r2, r3, r2
 80081ac:	eba3 0901 	sub.w	r9, r3, r1
 80081b0:	4591      	cmp	r9, r2
 80081b2:	bfa8      	it	ge
 80081b4:	4691      	movge	r9, r2
 80081b6:	f1b9 0f00 	cmp.w	r9, #0
 80081ba:	dc35      	bgt.n	8008228 <_printf_float+0x380>
 80081bc:	f04f 0800 	mov.w	r8, #0
 80081c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081c4:	f104 0a1a 	add.w	sl, r4, #26
 80081c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	eba3 0309 	sub.w	r3, r3, r9
 80081d2:	4543      	cmp	r3, r8
 80081d4:	f77f af75 	ble.w	80080c2 <_printf_float+0x21a>
 80081d8:	2301      	movs	r3, #1
 80081da:	4652      	mov	r2, sl
 80081dc:	4631      	mov	r1, r6
 80081de:	4628      	mov	r0, r5
 80081e0:	47b8      	blx	r7
 80081e2:	3001      	adds	r0, #1
 80081e4:	f43f aeae 	beq.w	8007f44 <_printf_float+0x9c>
 80081e8:	f108 0801 	add.w	r8, r8, #1
 80081ec:	e7ec      	b.n	80081c8 <_printf_float+0x320>
 80081ee:	4613      	mov	r3, r2
 80081f0:	4631      	mov	r1, r6
 80081f2:	4642      	mov	r2, r8
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	d1bf      	bne.n	800817c <_printf_float+0x2d4>
 80081fc:	e6a2      	b.n	8007f44 <_printf_float+0x9c>
 80081fe:	2301      	movs	r3, #1
 8008200:	4631      	mov	r1, r6
 8008202:	4628      	mov	r0, r5
 8008204:	9204      	str	r2, [sp, #16]
 8008206:	47b8      	blx	r7
 8008208:	3001      	adds	r0, #1
 800820a:	f43f ae9b 	beq.w	8007f44 <_printf_float+0x9c>
 800820e:	9b05      	ldr	r3, [sp, #20]
 8008210:	9a04      	ldr	r2, [sp, #16]
 8008212:	3301      	adds	r3, #1
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	e7b7      	b.n	8008188 <_printf_float+0x2e0>
 8008218:	4653      	mov	r3, sl
 800821a:	465a      	mov	r2, fp
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	d1be      	bne.n	80081a4 <_printf_float+0x2fc>
 8008226:	e68d      	b.n	8007f44 <_printf_float+0x9c>
 8008228:	9a04      	ldr	r2, [sp, #16]
 800822a:	464b      	mov	r3, r9
 800822c:	4442      	add	r2, r8
 800822e:	4631      	mov	r1, r6
 8008230:	4628      	mov	r0, r5
 8008232:	47b8      	blx	r7
 8008234:	3001      	adds	r0, #1
 8008236:	d1c1      	bne.n	80081bc <_printf_float+0x314>
 8008238:	e684      	b.n	8007f44 <_printf_float+0x9c>
 800823a:	9a08      	ldr	r2, [sp, #32]
 800823c:	2a01      	cmp	r2, #1
 800823e:	dc01      	bgt.n	8008244 <_printf_float+0x39c>
 8008240:	07db      	lsls	r3, r3, #31
 8008242:	d537      	bpl.n	80082b4 <_printf_float+0x40c>
 8008244:	2301      	movs	r3, #1
 8008246:	4642      	mov	r2, r8
 8008248:	4631      	mov	r1, r6
 800824a:	4628      	mov	r0, r5
 800824c:	47b8      	blx	r7
 800824e:	3001      	adds	r0, #1
 8008250:	f43f ae78 	beq.w	8007f44 <_printf_float+0x9c>
 8008254:	4653      	mov	r3, sl
 8008256:	465a      	mov	r2, fp
 8008258:	4631      	mov	r1, r6
 800825a:	4628      	mov	r0, r5
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	f43f ae70 	beq.w	8007f44 <_printf_float+0x9c>
 8008264:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008268:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008270:	d01b      	beq.n	80082aa <_printf_float+0x402>
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	f108 0201 	add.w	r2, r8, #1
 8008278:	3b01      	subs	r3, #1
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	d10e      	bne.n	80082a2 <_printf_float+0x3fa>
 8008284:	e65e      	b.n	8007f44 <_printf_float+0x9c>
 8008286:	2301      	movs	r3, #1
 8008288:	464a      	mov	r2, r9
 800828a:	4631      	mov	r1, r6
 800828c:	4628      	mov	r0, r5
 800828e:	47b8      	blx	r7
 8008290:	3001      	adds	r0, #1
 8008292:	f43f ae57 	beq.w	8007f44 <_printf_float+0x9c>
 8008296:	f108 0801 	add.w	r8, r8, #1
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	3b01      	subs	r3, #1
 800829e:	4543      	cmp	r3, r8
 80082a0:	dcf1      	bgt.n	8008286 <_printf_float+0x3de>
 80082a2:	9b04      	ldr	r3, [sp, #16]
 80082a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80082a8:	e6db      	b.n	8008062 <_printf_float+0x1ba>
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	f104 091a 	add.w	r9, r4, #26
 80082b2:	e7f2      	b.n	800829a <_printf_float+0x3f2>
 80082b4:	2301      	movs	r3, #1
 80082b6:	4642      	mov	r2, r8
 80082b8:	e7df      	b.n	800827a <_printf_float+0x3d2>
 80082ba:	2301      	movs	r3, #1
 80082bc:	464a      	mov	r2, r9
 80082be:	4631      	mov	r1, r6
 80082c0:	4628      	mov	r0, r5
 80082c2:	47b8      	blx	r7
 80082c4:	3001      	adds	r0, #1
 80082c6:	f43f ae3d 	beq.w	8007f44 <_printf_float+0x9c>
 80082ca:	f108 0801 	add.w	r8, r8, #1
 80082ce:	68e3      	ldr	r3, [r4, #12]
 80082d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082d2:	1a5b      	subs	r3, r3, r1
 80082d4:	4543      	cmp	r3, r8
 80082d6:	dcf0      	bgt.n	80082ba <_printf_float+0x412>
 80082d8:	e6f7      	b.n	80080ca <_printf_float+0x222>
 80082da:	f04f 0800 	mov.w	r8, #0
 80082de:	f104 0919 	add.w	r9, r4, #25
 80082e2:	e7f4      	b.n	80082ce <_printf_float+0x426>

080082e4 <_printf_common>:
 80082e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082e8:	4616      	mov	r6, r2
 80082ea:	4699      	mov	r9, r3
 80082ec:	688a      	ldr	r2, [r1, #8]
 80082ee:	690b      	ldr	r3, [r1, #16]
 80082f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082f4:	4293      	cmp	r3, r2
 80082f6:	bfb8      	it	lt
 80082f8:	4613      	movlt	r3, r2
 80082fa:	6033      	str	r3, [r6, #0]
 80082fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008300:	4607      	mov	r7, r0
 8008302:	460c      	mov	r4, r1
 8008304:	b10a      	cbz	r2, 800830a <_printf_common+0x26>
 8008306:	3301      	adds	r3, #1
 8008308:	6033      	str	r3, [r6, #0]
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	0699      	lsls	r1, r3, #26
 800830e:	bf42      	ittt	mi
 8008310:	6833      	ldrmi	r3, [r6, #0]
 8008312:	3302      	addmi	r3, #2
 8008314:	6033      	strmi	r3, [r6, #0]
 8008316:	6825      	ldr	r5, [r4, #0]
 8008318:	f015 0506 	ands.w	r5, r5, #6
 800831c:	d106      	bne.n	800832c <_printf_common+0x48>
 800831e:	f104 0a19 	add.w	sl, r4, #25
 8008322:	68e3      	ldr	r3, [r4, #12]
 8008324:	6832      	ldr	r2, [r6, #0]
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	42ab      	cmp	r3, r5
 800832a:	dc26      	bgt.n	800837a <_printf_common+0x96>
 800832c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008330:	1e13      	subs	r3, r2, #0
 8008332:	6822      	ldr	r2, [r4, #0]
 8008334:	bf18      	it	ne
 8008336:	2301      	movne	r3, #1
 8008338:	0692      	lsls	r2, r2, #26
 800833a:	d42b      	bmi.n	8008394 <_printf_common+0xb0>
 800833c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008340:	4649      	mov	r1, r9
 8008342:	4638      	mov	r0, r7
 8008344:	47c0      	blx	r8
 8008346:	3001      	adds	r0, #1
 8008348:	d01e      	beq.n	8008388 <_printf_common+0xa4>
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	68e5      	ldr	r5, [r4, #12]
 800834e:	6832      	ldr	r2, [r6, #0]
 8008350:	f003 0306 	and.w	r3, r3, #6
 8008354:	2b04      	cmp	r3, #4
 8008356:	bf08      	it	eq
 8008358:	1aad      	subeq	r5, r5, r2
 800835a:	68a3      	ldr	r3, [r4, #8]
 800835c:	6922      	ldr	r2, [r4, #16]
 800835e:	bf0c      	ite	eq
 8008360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008364:	2500      	movne	r5, #0
 8008366:	4293      	cmp	r3, r2
 8008368:	bfc4      	itt	gt
 800836a:	1a9b      	subgt	r3, r3, r2
 800836c:	18ed      	addgt	r5, r5, r3
 800836e:	2600      	movs	r6, #0
 8008370:	341a      	adds	r4, #26
 8008372:	42b5      	cmp	r5, r6
 8008374:	d11a      	bne.n	80083ac <_printf_common+0xc8>
 8008376:	2000      	movs	r0, #0
 8008378:	e008      	b.n	800838c <_printf_common+0xa8>
 800837a:	2301      	movs	r3, #1
 800837c:	4652      	mov	r2, sl
 800837e:	4649      	mov	r1, r9
 8008380:	4638      	mov	r0, r7
 8008382:	47c0      	blx	r8
 8008384:	3001      	adds	r0, #1
 8008386:	d103      	bne.n	8008390 <_printf_common+0xac>
 8008388:	f04f 30ff 	mov.w	r0, #4294967295
 800838c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008390:	3501      	adds	r5, #1
 8008392:	e7c6      	b.n	8008322 <_printf_common+0x3e>
 8008394:	18e1      	adds	r1, r4, r3
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	2030      	movs	r0, #48	; 0x30
 800839a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800839e:	4422      	add	r2, r4
 80083a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083a8:	3302      	adds	r3, #2
 80083aa:	e7c7      	b.n	800833c <_printf_common+0x58>
 80083ac:	2301      	movs	r3, #1
 80083ae:	4622      	mov	r2, r4
 80083b0:	4649      	mov	r1, r9
 80083b2:	4638      	mov	r0, r7
 80083b4:	47c0      	blx	r8
 80083b6:	3001      	adds	r0, #1
 80083b8:	d0e6      	beq.n	8008388 <_printf_common+0xa4>
 80083ba:	3601      	adds	r6, #1
 80083bc:	e7d9      	b.n	8008372 <_printf_common+0x8e>
	...

080083c0 <_printf_i>:
 80083c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083c4:	7e0f      	ldrb	r7, [r1, #24]
 80083c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083c8:	2f78      	cmp	r7, #120	; 0x78
 80083ca:	4691      	mov	r9, r2
 80083cc:	4680      	mov	r8, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	469a      	mov	sl, r3
 80083d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083d6:	d807      	bhi.n	80083e8 <_printf_i+0x28>
 80083d8:	2f62      	cmp	r7, #98	; 0x62
 80083da:	d80a      	bhi.n	80083f2 <_printf_i+0x32>
 80083dc:	2f00      	cmp	r7, #0
 80083de:	f000 80d8 	beq.w	8008592 <_printf_i+0x1d2>
 80083e2:	2f58      	cmp	r7, #88	; 0x58
 80083e4:	f000 80a3 	beq.w	800852e <_printf_i+0x16e>
 80083e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083f0:	e03a      	b.n	8008468 <_printf_i+0xa8>
 80083f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083f6:	2b15      	cmp	r3, #21
 80083f8:	d8f6      	bhi.n	80083e8 <_printf_i+0x28>
 80083fa:	a101      	add	r1, pc, #4	; (adr r1, 8008400 <_printf_i+0x40>)
 80083fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008400:	08008459 	.word	0x08008459
 8008404:	0800846d 	.word	0x0800846d
 8008408:	080083e9 	.word	0x080083e9
 800840c:	080083e9 	.word	0x080083e9
 8008410:	080083e9 	.word	0x080083e9
 8008414:	080083e9 	.word	0x080083e9
 8008418:	0800846d 	.word	0x0800846d
 800841c:	080083e9 	.word	0x080083e9
 8008420:	080083e9 	.word	0x080083e9
 8008424:	080083e9 	.word	0x080083e9
 8008428:	080083e9 	.word	0x080083e9
 800842c:	08008579 	.word	0x08008579
 8008430:	0800849d 	.word	0x0800849d
 8008434:	0800855b 	.word	0x0800855b
 8008438:	080083e9 	.word	0x080083e9
 800843c:	080083e9 	.word	0x080083e9
 8008440:	0800859b 	.word	0x0800859b
 8008444:	080083e9 	.word	0x080083e9
 8008448:	0800849d 	.word	0x0800849d
 800844c:	080083e9 	.word	0x080083e9
 8008450:	080083e9 	.word	0x080083e9
 8008454:	08008563 	.word	0x08008563
 8008458:	682b      	ldr	r3, [r5, #0]
 800845a:	1d1a      	adds	r2, r3, #4
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	602a      	str	r2, [r5, #0]
 8008460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008468:	2301      	movs	r3, #1
 800846a:	e0a3      	b.n	80085b4 <_printf_i+0x1f4>
 800846c:	6820      	ldr	r0, [r4, #0]
 800846e:	6829      	ldr	r1, [r5, #0]
 8008470:	0606      	lsls	r6, r0, #24
 8008472:	f101 0304 	add.w	r3, r1, #4
 8008476:	d50a      	bpl.n	800848e <_printf_i+0xce>
 8008478:	680e      	ldr	r6, [r1, #0]
 800847a:	602b      	str	r3, [r5, #0]
 800847c:	2e00      	cmp	r6, #0
 800847e:	da03      	bge.n	8008488 <_printf_i+0xc8>
 8008480:	232d      	movs	r3, #45	; 0x2d
 8008482:	4276      	negs	r6, r6
 8008484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008488:	485e      	ldr	r0, [pc, #376]	; (8008604 <_printf_i+0x244>)
 800848a:	230a      	movs	r3, #10
 800848c:	e019      	b.n	80084c2 <_printf_i+0x102>
 800848e:	680e      	ldr	r6, [r1, #0]
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008496:	bf18      	it	ne
 8008498:	b236      	sxthne	r6, r6
 800849a:	e7ef      	b.n	800847c <_printf_i+0xbc>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	6820      	ldr	r0, [r4, #0]
 80084a0:	1d19      	adds	r1, r3, #4
 80084a2:	6029      	str	r1, [r5, #0]
 80084a4:	0601      	lsls	r1, r0, #24
 80084a6:	d501      	bpl.n	80084ac <_printf_i+0xec>
 80084a8:	681e      	ldr	r6, [r3, #0]
 80084aa:	e002      	b.n	80084b2 <_printf_i+0xf2>
 80084ac:	0646      	lsls	r6, r0, #25
 80084ae:	d5fb      	bpl.n	80084a8 <_printf_i+0xe8>
 80084b0:	881e      	ldrh	r6, [r3, #0]
 80084b2:	4854      	ldr	r0, [pc, #336]	; (8008604 <_printf_i+0x244>)
 80084b4:	2f6f      	cmp	r7, #111	; 0x6f
 80084b6:	bf0c      	ite	eq
 80084b8:	2308      	moveq	r3, #8
 80084ba:	230a      	movne	r3, #10
 80084bc:	2100      	movs	r1, #0
 80084be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084c2:	6865      	ldr	r5, [r4, #4]
 80084c4:	60a5      	str	r5, [r4, #8]
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	bfa2      	ittt	ge
 80084ca:	6821      	ldrge	r1, [r4, #0]
 80084cc:	f021 0104 	bicge.w	r1, r1, #4
 80084d0:	6021      	strge	r1, [r4, #0]
 80084d2:	b90e      	cbnz	r6, 80084d8 <_printf_i+0x118>
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	d04d      	beq.n	8008574 <_printf_i+0x1b4>
 80084d8:	4615      	mov	r5, r2
 80084da:	fbb6 f1f3 	udiv	r1, r6, r3
 80084de:	fb03 6711 	mls	r7, r3, r1, r6
 80084e2:	5dc7      	ldrb	r7, [r0, r7]
 80084e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084e8:	4637      	mov	r7, r6
 80084ea:	42bb      	cmp	r3, r7
 80084ec:	460e      	mov	r6, r1
 80084ee:	d9f4      	bls.n	80084da <_printf_i+0x11a>
 80084f0:	2b08      	cmp	r3, #8
 80084f2:	d10b      	bne.n	800850c <_printf_i+0x14c>
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	07de      	lsls	r6, r3, #31
 80084f8:	d508      	bpl.n	800850c <_printf_i+0x14c>
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	6861      	ldr	r1, [r4, #4]
 80084fe:	4299      	cmp	r1, r3
 8008500:	bfde      	ittt	le
 8008502:	2330      	movle	r3, #48	; 0x30
 8008504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800850c:	1b52      	subs	r2, r2, r5
 800850e:	6122      	str	r2, [r4, #16]
 8008510:	f8cd a000 	str.w	sl, [sp]
 8008514:	464b      	mov	r3, r9
 8008516:	aa03      	add	r2, sp, #12
 8008518:	4621      	mov	r1, r4
 800851a:	4640      	mov	r0, r8
 800851c:	f7ff fee2 	bl	80082e4 <_printf_common>
 8008520:	3001      	adds	r0, #1
 8008522:	d14c      	bne.n	80085be <_printf_i+0x1fe>
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	b004      	add	sp, #16
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	4835      	ldr	r0, [pc, #212]	; (8008604 <_printf_i+0x244>)
 8008530:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008534:	6829      	ldr	r1, [r5, #0]
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f851 6b04 	ldr.w	r6, [r1], #4
 800853c:	6029      	str	r1, [r5, #0]
 800853e:	061d      	lsls	r5, r3, #24
 8008540:	d514      	bpl.n	800856c <_printf_i+0x1ac>
 8008542:	07df      	lsls	r7, r3, #31
 8008544:	bf44      	itt	mi
 8008546:	f043 0320 	orrmi.w	r3, r3, #32
 800854a:	6023      	strmi	r3, [r4, #0]
 800854c:	b91e      	cbnz	r6, 8008556 <_printf_i+0x196>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	f023 0320 	bic.w	r3, r3, #32
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	2310      	movs	r3, #16
 8008558:	e7b0      	b.n	80084bc <_printf_i+0xfc>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	f043 0320 	orr.w	r3, r3, #32
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	2378      	movs	r3, #120	; 0x78
 8008564:	4828      	ldr	r0, [pc, #160]	; (8008608 <_printf_i+0x248>)
 8008566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800856a:	e7e3      	b.n	8008534 <_printf_i+0x174>
 800856c:	0659      	lsls	r1, r3, #25
 800856e:	bf48      	it	mi
 8008570:	b2b6      	uxthmi	r6, r6
 8008572:	e7e6      	b.n	8008542 <_printf_i+0x182>
 8008574:	4615      	mov	r5, r2
 8008576:	e7bb      	b.n	80084f0 <_printf_i+0x130>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	6826      	ldr	r6, [r4, #0]
 800857c:	6961      	ldr	r1, [r4, #20]
 800857e:	1d18      	adds	r0, r3, #4
 8008580:	6028      	str	r0, [r5, #0]
 8008582:	0635      	lsls	r5, r6, #24
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	d501      	bpl.n	800858c <_printf_i+0x1cc>
 8008588:	6019      	str	r1, [r3, #0]
 800858a:	e002      	b.n	8008592 <_printf_i+0x1d2>
 800858c:	0670      	lsls	r0, r6, #25
 800858e:	d5fb      	bpl.n	8008588 <_printf_i+0x1c8>
 8008590:	8019      	strh	r1, [r3, #0]
 8008592:	2300      	movs	r3, #0
 8008594:	6123      	str	r3, [r4, #16]
 8008596:	4615      	mov	r5, r2
 8008598:	e7ba      	b.n	8008510 <_printf_i+0x150>
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	1d1a      	adds	r2, r3, #4
 800859e:	602a      	str	r2, [r5, #0]
 80085a0:	681d      	ldr	r5, [r3, #0]
 80085a2:	6862      	ldr	r2, [r4, #4]
 80085a4:	2100      	movs	r1, #0
 80085a6:	4628      	mov	r0, r5
 80085a8:	f7f7 fe52 	bl	8000250 <memchr>
 80085ac:	b108      	cbz	r0, 80085b2 <_printf_i+0x1f2>
 80085ae:	1b40      	subs	r0, r0, r5
 80085b0:	6060      	str	r0, [r4, #4]
 80085b2:	6863      	ldr	r3, [r4, #4]
 80085b4:	6123      	str	r3, [r4, #16]
 80085b6:	2300      	movs	r3, #0
 80085b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085bc:	e7a8      	b.n	8008510 <_printf_i+0x150>
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	462a      	mov	r2, r5
 80085c2:	4649      	mov	r1, r9
 80085c4:	4640      	mov	r0, r8
 80085c6:	47d0      	blx	sl
 80085c8:	3001      	adds	r0, #1
 80085ca:	d0ab      	beq.n	8008524 <_printf_i+0x164>
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	079b      	lsls	r3, r3, #30
 80085d0:	d413      	bmi.n	80085fa <_printf_i+0x23a>
 80085d2:	68e0      	ldr	r0, [r4, #12]
 80085d4:	9b03      	ldr	r3, [sp, #12]
 80085d6:	4298      	cmp	r0, r3
 80085d8:	bfb8      	it	lt
 80085da:	4618      	movlt	r0, r3
 80085dc:	e7a4      	b.n	8008528 <_printf_i+0x168>
 80085de:	2301      	movs	r3, #1
 80085e0:	4632      	mov	r2, r6
 80085e2:	4649      	mov	r1, r9
 80085e4:	4640      	mov	r0, r8
 80085e6:	47d0      	blx	sl
 80085e8:	3001      	adds	r0, #1
 80085ea:	d09b      	beq.n	8008524 <_printf_i+0x164>
 80085ec:	3501      	adds	r5, #1
 80085ee:	68e3      	ldr	r3, [r4, #12]
 80085f0:	9903      	ldr	r1, [sp, #12]
 80085f2:	1a5b      	subs	r3, r3, r1
 80085f4:	42ab      	cmp	r3, r5
 80085f6:	dcf2      	bgt.n	80085de <_printf_i+0x21e>
 80085f8:	e7eb      	b.n	80085d2 <_printf_i+0x212>
 80085fa:	2500      	movs	r5, #0
 80085fc:	f104 0619 	add.w	r6, r4, #25
 8008600:	e7f5      	b.n	80085ee <_printf_i+0x22e>
 8008602:	bf00      	nop
 8008604:	0800c9ba 	.word	0x0800c9ba
 8008608:	0800c9cb 	.word	0x0800c9cb

0800860c <_scanf_float>:
 800860c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008610:	b087      	sub	sp, #28
 8008612:	4617      	mov	r7, r2
 8008614:	9303      	str	r3, [sp, #12]
 8008616:	688b      	ldr	r3, [r1, #8]
 8008618:	1e5a      	subs	r2, r3, #1
 800861a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800861e:	bf83      	ittte	hi
 8008620:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008624:	195b      	addhi	r3, r3, r5
 8008626:	9302      	strhi	r3, [sp, #8]
 8008628:	2300      	movls	r3, #0
 800862a:	bf86      	itte	hi
 800862c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008630:	608b      	strhi	r3, [r1, #8]
 8008632:	9302      	strls	r3, [sp, #8]
 8008634:	680b      	ldr	r3, [r1, #0]
 8008636:	468b      	mov	fp, r1
 8008638:	2500      	movs	r5, #0
 800863a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800863e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008642:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008646:	4680      	mov	r8, r0
 8008648:	460c      	mov	r4, r1
 800864a:	465e      	mov	r6, fp
 800864c:	46aa      	mov	sl, r5
 800864e:	46a9      	mov	r9, r5
 8008650:	9501      	str	r5, [sp, #4]
 8008652:	68a2      	ldr	r2, [r4, #8]
 8008654:	b152      	cbz	r2, 800866c <_scanf_float+0x60>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b4e      	cmp	r3, #78	; 0x4e
 800865c:	d864      	bhi.n	8008728 <_scanf_float+0x11c>
 800865e:	2b40      	cmp	r3, #64	; 0x40
 8008660:	d83c      	bhi.n	80086dc <_scanf_float+0xd0>
 8008662:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008666:	b2c8      	uxtb	r0, r1
 8008668:	280e      	cmp	r0, #14
 800866a:	d93a      	bls.n	80086e2 <_scanf_float+0xd6>
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	d003      	beq.n	800867a <_scanf_float+0x6e>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800867e:	f1ba 0f01 	cmp.w	sl, #1
 8008682:	f200 8113 	bhi.w	80088ac <_scanf_float+0x2a0>
 8008686:	455e      	cmp	r6, fp
 8008688:	f200 8105 	bhi.w	8008896 <_scanf_float+0x28a>
 800868c:	2501      	movs	r5, #1
 800868e:	4628      	mov	r0, r5
 8008690:	b007      	add	sp, #28
 8008692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008696:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800869a:	2a0d      	cmp	r2, #13
 800869c:	d8e6      	bhi.n	800866c <_scanf_float+0x60>
 800869e:	a101      	add	r1, pc, #4	; (adr r1, 80086a4 <_scanf_float+0x98>)
 80086a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086a4:	080087e3 	.word	0x080087e3
 80086a8:	0800866d 	.word	0x0800866d
 80086ac:	0800866d 	.word	0x0800866d
 80086b0:	0800866d 	.word	0x0800866d
 80086b4:	08008843 	.word	0x08008843
 80086b8:	0800881b 	.word	0x0800881b
 80086bc:	0800866d 	.word	0x0800866d
 80086c0:	0800866d 	.word	0x0800866d
 80086c4:	080087f1 	.word	0x080087f1
 80086c8:	0800866d 	.word	0x0800866d
 80086cc:	0800866d 	.word	0x0800866d
 80086d0:	0800866d 	.word	0x0800866d
 80086d4:	0800866d 	.word	0x0800866d
 80086d8:	080087a9 	.word	0x080087a9
 80086dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80086e0:	e7db      	b.n	800869a <_scanf_float+0x8e>
 80086e2:	290e      	cmp	r1, #14
 80086e4:	d8c2      	bhi.n	800866c <_scanf_float+0x60>
 80086e6:	a001      	add	r0, pc, #4	; (adr r0, 80086ec <_scanf_float+0xe0>)
 80086e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80086ec:	0800879b 	.word	0x0800879b
 80086f0:	0800866d 	.word	0x0800866d
 80086f4:	0800879b 	.word	0x0800879b
 80086f8:	0800882f 	.word	0x0800882f
 80086fc:	0800866d 	.word	0x0800866d
 8008700:	08008749 	.word	0x08008749
 8008704:	08008785 	.word	0x08008785
 8008708:	08008785 	.word	0x08008785
 800870c:	08008785 	.word	0x08008785
 8008710:	08008785 	.word	0x08008785
 8008714:	08008785 	.word	0x08008785
 8008718:	08008785 	.word	0x08008785
 800871c:	08008785 	.word	0x08008785
 8008720:	08008785 	.word	0x08008785
 8008724:	08008785 	.word	0x08008785
 8008728:	2b6e      	cmp	r3, #110	; 0x6e
 800872a:	d809      	bhi.n	8008740 <_scanf_float+0x134>
 800872c:	2b60      	cmp	r3, #96	; 0x60
 800872e:	d8b2      	bhi.n	8008696 <_scanf_float+0x8a>
 8008730:	2b54      	cmp	r3, #84	; 0x54
 8008732:	d077      	beq.n	8008824 <_scanf_float+0x218>
 8008734:	2b59      	cmp	r3, #89	; 0x59
 8008736:	d199      	bne.n	800866c <_scanf_float+0x60>
 8008738:	2d07      	cmp	r5, #7
 800873a:	d197      	bne.n	800866c <_scanf_float+0x60>
 800873c:	2508      	movs	r5, #8
 800873e:	e029      	b.n	8008794 <_scanf_float+0x188>
 8008740:	2b74      	cmp	r3, #116	; 0x74
 8008742:	d06f      	beq.n	8008824 <_scanf_float+0x218>
 8008744:	2b79      	cmp	r3, #121	; 0x79
 8008746:	e7f6      	b.n	8008736 <_scanf_float+0x12a>
 8008748:	6821      	ldr	r1, [r4, #0]
 800874a:	05c8      	lsls	r0, r1, #23
 800874c:	d51a      	bpl.n	8008784 <_scanf_float+0x178>
 800874e:	9b02      	ldr	r3, [sp, #8]
 8008750:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008754:	6021      	str	r1, [r4, #0]
 8008756:	f109 0901 	add.w	r9, r9, #1
 800875a:	b11b      	cbz	r3, 8008764 <_scanf_float+0x158>
 800875c:	3b01      	subs	r3, #1
 800875e:	3201      	adds	r2, #1
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	60a2      	str	r2, [r4, #8]
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	3b01      	subs	r3, #1
 8008768:	60a3      	str	r3, [r4, #8]
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	3301      	adds	r3, #1
 800876e:	6123      	str	r3, [r4, #16]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	3b01      	subs	r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	607b      	str	r3, [r7, #4]
 8008778:	f340 8084 	ble.w	8008884 <_scanf_float+0x278>
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	3301      	adds	r3, #1
 8008780:	603b      	str	r3, [r7, #0]
 8008782:	e766      	b.n	8008652 <_scanf_float+0x46>
 8008784:	eb1a 0f05 	cmn.w	sl, r5
 8008788:	f47f af70 	bne.w	800866c <_scanf_float+0x60>
 800878c:	6822      	ldr	r2, [r4, #0]
 800878e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008792:	6022      	str	r2, [r4, #0]
 8008794:	f806 3b01 	strb.w	r3, [r6], #1
 8008798:	e7e4      	b.n	8008764 <_scanf_float+0x158>
 800879a:	6822      	ldr	r2, [r4, #0]
 800879c:	0610      	lsls	r0, r2, #24
 800879e:	f57f af65 	bpl.w	800866c <_scanf_float+0x60>
 80087a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087a6:	e7f4      	b.n	8008792 <_scanf_float+0x186>
 80087a8:	f1ba 0f00 	cmp.w	sl, #0
 80087ac:	d10e      	bne.n	80087cc <_scanf_float+0x1c0>
 80087ae:	f1b9 0f00 	cmp.w	r9, #0
 80087b2:	d10e      	bne.n	80087d2 <_scanf_float+0x1c6>
 80087b4:	6822      	ldr	r2, [r4, #0]
 80087b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80087ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80087be:	d108      	bne.n	80087d2 <_scanf_float+0x1c6>
 80087c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80087c4:	6022      	str	r2, [r4, #0]
 80087c6:	f04f 0a01 	mov.w	sl, #1
 80087ca:	e7e3      	b.n	8008794 <_scanf_float+0x188>
 80087cc:	f1ba 0f02 	cmp.w	sl, #2
 80087d0:	d055      	beq.n	800887e <_scanf_float+0x272>
 80087d2:	2d01      	cmp	r5, #1
 80087d4:	d002      	beq.n	80087dc <_scanf_float+0x1d0>
 80087d6:	2d04      	cmp	r5, #4
 80087d8:	f47f af48 	bne.w	800866c <_scanf_float+0x60>
 80087dc:	3501      	adds	r5, #1
 80087de:	b2ed      	uxtb	r5, r5
 80087e0:	e7d8      	b.n	8008794 <_scanf_float+0x188>
 80087e2:	f1ba 0f01 	cmp.w	sl, #1
 80087e6:	f47f af41 	bne.w	800866c <_scanf_float+0x60>
 80087ea:	f04f 0a02 	mov.w	sl, #2
 80087ee:	e7d1      	b.n	8008794 <_scanf_float+0x188>
 80087f0:	b97d      	cbnz	r5, 8008812 <_scanf_float+0x206>
 80087f2:	f1b9 0f00 	cmp.w	r9, #0
 80087f6:	f47f af3c 	bne.w	8008672 <_scanf_float+0x66>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008800:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008804:	f47f af39 	bne.w	800867a <_scanf_float+0x6e>
 8008808:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800880c:	6022      	str	r2, [r4, #0]
 800880e:	2501      	movs	r5, #1
 8008810:	e7c0      	b.n	8008794 <_scanf_float+0x188>
 8008812:	2d03      	cmp	r5, #3
 8008814:	d0e2      	beq.n	80087dc <_scanf_float+0x1d0>
 8008816:	2d05      	cmp	r5, #5
 8008818:	e7de      	b.n	80087d8 <_scanf_float+0x1cc>
 800881a:	2d02      	cmp	r5, #2
 800881c:	f47f af26 	bne.w	800866c <_scanf_float+0x60>
 8008820:	2503      	movs	r5, #3
 8008822:	e7b7      	b.n	8008794 <_scanf_float+0x188>
 8008824:	2d06      	cmp	r5, #6
 8008826:	f47f af21 	bne.w	800866c <_scanf_float+0x60>
 800882a:	2507      	movs	r5, #7
 800882c:	e7b2      	b.n	8008794 <_scanf_float+0x188>
 800882e:	6822      	ldr	r2, [r4, #0]
 8008830:	0591      	lsls	r1, r2, #22
 8008832:	f57f af1b 	bpl.w	800866c <_scanf_float+0x60>
 8008836:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800883a:	6022      	str	r2, [r4, #0]
 800883c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008840:	e7a8      	b.n	8008794 <_scanf_float+0x188>
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008848:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800884c:	d006      	beq.n	800885c <_scanf_float+0x250>
 800884e:	0550      	lsls	r0, r2, #21
 8008850:	f57f af0c 	bpl.w	800866c <_scanf_float+0x60>
 8008854:	f1b9 0f00 	cmp.w	r9, #0
 8008858:	f43f af0f 	beq.w	800867a <_scanf_float+0x6e>
 800885c:	0591      	lsls	r1, r2, #22
 800885e:	bf58      	it	pl
 8008860:	9901      	ldrpl	r1, [sp, #4]
 8008862:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008866:	bf58      	it	pl
 8008868:	eba9 0101 	subpl.w	r1, r9, r1
 800886c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008870:	bf58      	it	pl
 8008872:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008876:	6022      	str	r2, [r4, #0]
 8008878:	f04f 0900 	mov.w	r9, #0
 800887c:	e78a      	b.n	8008794 <_scanf_float+0x188>
 800887e:	f04f 0a03 	mov.w	sl, #3
 8008882:	e787      	b.n	8008794 <_scanf_float+0x188>
 8008884:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008888:	4639      	mov	r1, r7
 800888a:	4640      	mov	r0, r8
 800888c:	4798      	blx	r3
 800888e:	2800      	cmp	r0, #0
 8008890:	f43f aedf 	beq.w	8008652 <_scanf_float+0x46>
 8008894:	e6ea      	b.n	800866c <_scanf_float+0x60>
 8008896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800889a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800889e:	463a      	mov	r2, r7
 80088a0:	4640      	mov	r0, r8
 80088a2:	4798      	blx	r3
 80088a4:	6923      	ldr	r3, [r4, #16]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	6123      	str	r3, [r4, #16]
 80088aa:	e6ec      	b.n	8008686 <_scanf_float+0x7a>
 80088ac:	1e6b      	subs	r3, r5, #1
 80088ae:	2b06      	cmp	r3, #6
 80088b0:	d825      	bhi.n	80088fe <_scanf_float+0x2f2>
 80088b2:	2d02      	cmp	r5, #2
 80088b4:	d836      	bhi.n	8008924 <_scanf_float+0x318>
 80088b6:	455e      	cmp	r6, fp
 80088b8:	f67f aee8 	bls.w	800868c <_scanf_float+0x80>
 80088bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80088c4:	463a      	mov	r2, r7
 80088c6:	4640      	mov	r0, r8
 80088c8:	4798      	blx	r3
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	3b01      	subs	r3, #1
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	e7f1      	b.n	80088b6 <_scanf_float+0x2aa>
 80088d2:	9802      	ldr	r0, [sp, #8]
 80088d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80088dc:	9002      	str	r0, [sp, #8]
 80088de:	463a      	mov	r2, r7
 80088e0:	4640      	mov	r0, r8
 80088e2:	4798      	blx	r3
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088ee:	fa5f fa8a 	uxtb.w	sl, sl
 80088f2:	f1ba 0f02 	cmp.w	sl, #2
 80088f6:	d1ec      	bne.n	80088d2 <_scanf_float+0x2c6>
 80088f8:	3d03      	subs	r5, #3
 80088fa:	b2ed      	uxtb	r5, r5
 80088fc:	1b76      	subs	r6, r6, r5
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	05da      	lsls	r2, r3, #23
 8008902:	d52f      	bpl.n	8008964 <_scanf_float+0x358>
 8008904:	055b      	lsls	r3, r3, #21
 8008906:	d510      	bpl.n	800892a <_scanf_float+0x31e>
 8008908:	455e      	cmp	r6, fp
 800890a:	f67f aebf 	bls.w	800868c <_scanf_float+0x80>
 800890e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008912:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008916:	463a      	mov	r2, r7
 8008918:	4640      	mov	r0, r8
 800891a:	4798      	blx	r3
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	3b01      	subs	r3, #1
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	e7f1      	b.n	8008908 <_scanf_float+0x2fc>
 8008924:	46aa      	mov	sl, r5
 8008926:	9602      	str	r6, [sp, #8]
 8008928:	e7df      	b.n	80088ea <_scanf_float+0x2de>
 800892a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	2965      	cmp	r1, #101	; 0x65
 8008932:	f103 33ff 	add.w	r3, r3, #4294967295
 8008936:	f106 35ff 	add.w	r5, r6, #4294967295
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	d00c      	beq.n	8008958 <_scanf_float+0x34c>
 800893e:	2945      	cmp	r1, #69	; 0x45
 8008940:	d00a      	beq.n	8008958 <_scanf_float+0x34c>
 8008942:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008946:	463a      	mov	r2, r7
 8008948:	4640      	mov	r0, r8
 800894a:	4798      	blx	r3
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008952:	3b01      	subs	r3, #1
 8008954:	1eb5      	subs	r5, r6, #2
 8008956:	6123      	str	r3, [r4, #16]
 8008958:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800895c:	463a      	mov	r2, r7
 800895e:	4640      	mov	r0, r8
 8008960:	4798      	blx	r3
 8008962:	462e      	mov	r6, r5
 8008964:	6825      	ldr	r5, [r4, #0]
 8008966:	f015 0510 	ands.w	r5, r5, #16
 800896a:	d14e      	bne.n	8008a0a <_scanf_float+0x3fe>
 800896c:	7035      	strb	r5, [r6, #0]
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008978:	d119      	bne.n	80089ae <_scanf_float+0x3a2>
 800897a:	9b01      	ldr	r3, [sp, #4]
 800897c:	454b      	cmp	r3, r9
 800897e:	eba3 0209 	sub.w	r2, r3, r9
 8008982:	d121      	bne.n	80089c8 <_scanf_float+0x3bc>
 8008984:	2200      	movs	r2, #0
 8008986:	4659      	mov	r1, fp
 8008988:	4640      	mov	r0, r8
 800898a:	f000 fe4b 	bl	8009624 <_strtod_r>
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	9b03      	ldr	r3, [sp, #12]
 8008992:	f012 0f02 	tst.w	r2, #2
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	d021      	beq.n	80089de <_scanf_float+0x3d2>
 800899a:	9903      	ldr	r1, [sp, #12]
 800899c:	1d1a      	adds	r2, r3, #4
 800899e:	600a      	str	r2, [r1, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	ed83 0b00 	vstr	d0, [r3]
 80089a6:	68e3      	ldr	r3, [r4, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	60e3      	str	r3, [r4, #12]
 80089ac:	e66f      	b.n	800868e <_scanf_float+0x82>
 80089ae:	9b04      	ldr	r3, [sp, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0e7      	beq.n	8008984 <_scanf_float+0x378>
 80089b4:	9905      	ldr	r1, [sp, #20]
 80089b6:	230a      	movs	r3, #10
 80089b8:	462a      	mov	r2, r5
 80089ba:	3101      	adds	r1, #1
 80089bc:	4640      	mov	r0, r8
 80089be:	f000 feb9 	bl	8009734 <_strtol_r>
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	9e05      	ldr	r6, [sp, #20]
 80089c6:	1ac2      	subs	r2, r0, r3
 80089c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80089cc:	429e      	cmp	r6, r3
 80089ce:	bf28      	it	cs
 80089d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80089d4:	490e      	ldr	r1, [pc, #56]	; (8008a10 <_scanf_float+0x404>)
 80089d6:	4630      	mov	r0, r6
 80089d8:	f000 f834 	bl	8008a44 <siprintf>
 80089dc:	e7d2      	b.n	8008984 <_scanf_float+0x378>
 80089de:	9903      	ldr	r1, [sp, #12]
 80089e0:	f012 0f04 	tst.w	r2, #4
 80089e4:	f103 0204 	add.w	r2, r3, #4
 80089e8:	600a      	str	r2, [r1, #0]
 80089ea:	d1d9      	bne.n	80089a0 <_scanf_float+0x394>
 80089ec:	eeb4 0b40 	vcmp.f64	d0, d0
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	681e      	ldr	r6, [r3, #0]
 80089f6:	d705      	bvc.n	8008a04 <_scanf_float+0x3f8>
 80089f8:	4806      	ldr	r0, [pc, #24]	; (8008a14 <_scanf_float+0x408>)
 80089fa:	f000 f81d 	bl	8008a38 <nanf>
 80089fe:	ed86 0a00 	vstr	s0, [r6]
 8008a02:	e7d0      	b.n	80089a6 <_scanf_float+0x39a>
 8008a04:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008a08:	e7f9      	b.n	80089fe <_scanf_float+0x3f2>
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	e63f      	b.n	800868e <_scanf_float+0x82>
 8008a0e:	bf00      	nop
 8008a10:	0800c9dc 	.word	0x0800c9dc
 8008a14:	0800cde8 	.word	0x0800cde8

08008a18 <_sbrk_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d06      	ldr	r5, [pc, #24]	; (8008a34 <_sbrk_r+0x1c>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	602b      	str	r3, [r5, #0]
 8008a24:	f7f8 fe02 	bl	800162c <_sbrk>
 8008a28:	1c43      	adds	r3, r0, #1
 8008a2a:	d102      	bne.n	8008a32 <_sbrk_r+0x1a>
 8008a2c:	682b      	ldr	r3, [r5, #0]
 8008a2e:	b103      	cbz	r3, 8008a32 <_sbrk_r+0x1a>
 8008a30:	6023      	str	r3, [r4, #0]
 8008a32:	bd38      	pop	{r3, r4, r5, pc}
 8008a34:	20001864 	.word	0x20001864

08008a38 <nanf>:
 8008a38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a40 <nanf+0x8>
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	7fc00000 	.word	0x7fc00000

08008a44 <siprintf>:
 8008a44:	b40e      	push	{r1, r2, r3}
 8008a46:	b500      	push	{lr}
 8008a48:	b09c      	sub	sp, #112	; 0x70
 8008a4a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a4c:	9002      	str	r0, [sp, #8]
 8008a4e:	9006      	str	r0, [sp, #24]
 8008a50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a54:	4809      	ldr	r0, [pc, #36]	; (8008a7c <siprintf+0x38>)
 8008a56:	9107      	str	r1, [sp, #28]
 8008a58:	9104      	str	r1, [sp, #16]
 8008a5a:	4909      	ldr	r1, [pc, #36]	; (8008a80 <siprintf+0x3c>)
 8008a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a60:	9105      	str	r1, [sp, #20]
 8008a62:	6800      	ldr	r0, [r0, #0]
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	a902      	add	r1, sp, #8
 8008a68:	f002 fd22 	bl	800b4b0 <_svfiprintf_r>
 8008a6c:	9b02      	ldr	r3, [sp, #8]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	b01c      	add	sp, #112	; 0x70
 8008a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a78:	b003      	add	sp, #12
 8008a7a:	4770      	bx	lr
 8008a7c:	20000b64 	.word	0x20000b64
 8008a80:	ffff0208 	.word	0xffff0208

08008a84 <sulp>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	4616      	mov	r6, r2
 8008a8c:	ec45 4b10 	vmov	d0, r4, r5
 8008a90:	f002 fb50 	bl	800b134 <__ulp>
 8008a94:	b17e      	cbz	r6, 8008ab6 <sulp+0x32>
 8008a96:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	dd09      	ble.n	8008ab6 <sulp+0x32>
 8008aa2:	051b      	lsls	r3, r3, #20
 8008aa4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008aae:	ec41 0b17 	vmov	d7, r0, r1
 8008ab2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}

08008ab8 <_strtod_l>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	ed2d 8b0e 	vpush	{d8-d14}
 8008ac0:	b097      	sub	sp, #92	; 0x5c
 8008ac2:	461f      	mov	r7, r3
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	9312      	str	r3, [sp, #72]	; 0x48
 8008ac8:	4ba1      	ldr	r3, [pc, #644]	; (8008d50 <_strtod_l+0x298>)
 8008aca:	920d      	str	r2, [sp, #52]	; 0x34
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	9307      	str	r3, [sp, #28]
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	468b      	mov	fp, r1
 8008ad6:	f7f7 fbb3 	bl	8000240 <strlen>
 8008ada:	f04f 0800 	mov.w	r8, #0
 8008ade:	4605      	mov	r5, r0
 8008ae0:	f04f 0900 	mov.w	r9, #0
 8008ae4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008ae8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008aea:	7813      	ldrb	r3, [r2, #0]
 8008aec:	2b2b      	cmp	r3, #43	; 0x2b
 8008aee:	d04d      	beq.n	8008b8c <_strtod_l+0xd4>
 8008af0:	d83a      	bhi.n	8008b68 <_strtod_l+0xb0>
 8008af2:	2b0d      	cmp	r3, #13
 8008af4:	d833      	bhi.n	8008b5e <_strtod_l+0xa6>
 8008af6:	2b08      	cmp	r3, #8
 8008af8:	d833      	bhi.n	8008b62 <_strtod_l+0xaa>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d03d      	beq.n	8008b7a <_strtod_l+0xc2>
 8008afe:	2300      	movs	r3, #0
 8008b00:	9308      	str	r3, [sp, #32]
 8008b02:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008b04:	7833      	ldrb	r3, [r6, #0]
 8008b06:	2b30      	cmp	r3, #48	; 0x30
 8008b08:	f040 80b0 	bne.w	8008c6c <_strtod_l+0x1b4>
 8008b0c:	7873      	ldrb	r3, [r6, #1]
 8008b0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008b12:	2b58      	cmp	r3, #88	; 0x58
 8008b14:	d167      	bne.n	8008be6 <_strtod_l+0x12e>
 8008b16:	9b08      	ldr	r3, [sp, #32]
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	ab12      	add	r3, sp, #72	; 0x48
 8008b1c:	9702      	str	r7, [sp, #8]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	4a8c      	ldr	r2, [pc, #560]	; (8008d54 <_strtod_l+0x29c>)
 8008b22:	ab13      	add	r3, sp, #76	; 0x4c
 8008b24:	a911      	add	r1, sp, #68	; 0x44
 8008b26:	4620      	mov	r0, r4
 8008b28:	f001 fc68 	bl	800a3fc <__gethex>
 8008b2c:	f010 0507 	ands.w	r5, r0, #7
 8008b30:	4607      	mov	r7, r0
 8008b32:	d005      	beq.n	8008b40 <_strtod_l+0x88>
 8008b34:	2d06      	cmp	r5, #6
 8008b36:	d12b      	bne.n	8008b90 <_strtod_l+0xd8>
 8008b38:	3601      	adds	r6, #1
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9611      	str	r6, [sp, #68]	; 0x44
 8008b3e:	9308      	str	r3, [sp, #32]
 8008b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f040 854e 	bne.w	80095e4 <_strtod_l+0xb2c>
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	b1e3      	cbz	r3, 8008b86 <_strtod_l+0xce>
 8008b4c:	ec49 8b17 	vmov	d7, r8, r9
 8008b50:	eeb1 0b47 	vneg.f64	d0, d7
 8008b54:	b017      	add	sp, #92	; 0x5c
 8008b56:	ecbd 8b0e 	vpop	{d8-d14}
 8008b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5e:	2b20      	cmp	r3, #32
 8008b60:	d1cd      	bne.n	8008afe <_strtod_l+0x46>
 8008b62:	3201      	adds	r2, #1
 8008b64:	9211      	str	r2, [sp, #68]	; 0x44
 8008b66:	e7bf      	b.n	8008ae8 <_strtod_l+0x30>
 8008b68:	2b2d      	cmp	r3, #45	; 0x2d
 8008b6a:	d1c8      	bne.n	8008afe <_strtod_l+0x46>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	9308      	str	r3, [sp, #32]
 8008b70:	1c53      	adds	r3, r2, #1
 8008b72:	9311      	str	r3, [sp, #68]	; 0x44
 8008b74:	7853      	ldrb	r3, [r2, #1]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1c3      	bne.n	8008b02 <_strtod_l+0x4a>
 8008b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b7c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f040 852d 	bne.w	80095e0 <_strtod_l+0xb28>
 8008b86:	ec49 8b10 	vmov	d0, r8, r9
 8008b8a:	e7e3      	b.n	8008b54 <_strtod_l+0x9c>
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e7ee      	b.n	8008b6e <_strtod_l+0xb6>
 8008b90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b92:	b13a      	cbz	r2, 8008ba4 <_strtod_l+0xec>
 8008b94:	2135      	movs	r1, #53	; 0x35
 8008b96:	a814      	add	r0, sp, #80	; 0x50
 8008b98:	f002 fbd4 	bl	800b344 <__copybits>
 8008b9c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f001 ff96 	bl	800aad0 <_Bfree>
 8008ba4:	3d01      	subs	r5, #1
 8008ba6:	2d04      	cmp	r5, #4
 8008ba8:	d806      	bhi.n	8008bb8 <_strtod_l+0x100>
 8008baa:	e8df f005 	tbb	[pc, r5]
 8008bae:	030a      	.short	0x030a
 8008bb0:	1714      	.short	0x1714
 8008bb2:	0a          	.byte	0x0a
 8008bb3:	00          	.byte	0x00
 8008bb4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008bb8:	073f      	lsls	r7, r7, #28
 8008bba:	d5c1      	bpl.n	8008b40 <_strtod_l+0x88>
 8008bbc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008bc0:	e7be      	b.n	8008b40 <_strtod_l+0x88>
 8008bc2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008bc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008bc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008bcc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008bd0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008bd4:	e7f0      	b.n	8008bb8 <_strtod_l+0x100>
 8008bd6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008d58 <_strtod_l+0x2a0>
 8008bda:	e7ed      	b.n	8008bb8 <_strtod_l+0x100>
 8008bdc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008be0:	f04f 38ff 	mov.w	r8, #4294967295
 8008be4:	e7e8      	b.n	8008bb8 <_strtod_l+0x100>
 8008be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	9211      	str	r2, [sp, #68]	; 0x44
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	2b30      	cmp	r3, #48	; 0x30
 8008bf0:	d0f9      	beq.n	8008be6 <_strtod_l+0x12e>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0a4      	beq.n	8008b40 <_strtod_l+0x88>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f04f 0a00 	mov.w	sl, #0
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c00:	930a      	str	r3, [sp, #40]	; 0x28
 8008c02:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008c06:	f8cd a018 	str.w	sl, [sp, #24]
 8008c0a:	220a      	movs	r2, #10
 8008c0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008c0e:	7807      	ldrb	r7, [r0, #0]
 8008c10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008c14:	b2d9      	uxtb	r1, r3
 8008c16:	2909      	cmp	r1, #9
 8008c18:	d92a      	bls.n	8008c70 <_strtod_l+0x1b8>
 8008c1a:	9907      	ldr	r1, [sp, #28]
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	f002 fd4f 	bl	800b6c0 <strncmp>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d033      	beq.n	8008c8e <_strtod_l+0x1d6>
 8008c26:	2000      	movs	r0, #0
 8008c28:	9b06      	ldr	r3, [sp, #24]
 8008c2a:	463a      	mov	r2, r7
 8008c2c:	4601      	mov	r1, r0
 8008c2e:	4607      	mov	r7, r0
 8008c30:	2a65      	cmp	r2, #101	; 0x65
 8008c32:	d001      	beq.n	8008c38 <_strtod_l+0x180>
 8008c34:	2a45      	cmp	r2, #69	; 0x45
 8008c36:	d117      	bne.n	8008c68 <_strtod_l+0x1b0>
 8008c38:	b91b      	cbnz	r3, 8008c42 <_strtod_l+0x18a>
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	4303      	orrs	r3, r0
 8008c3e:	d09c      	beq.n	8008b7a <_strtod_l+0xc2>
 8008c40:	2300      	movs	r3, #0
 8008c42:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008c46:	f10b 0201 	add.w	r2, fp, #1
 8008c4a:	9211      	str	r2, [sp, #68]	; 0x44
 8008c4c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008c50:	2a2b      	cmp	r2, #43	; 0x2b
 8008c52:	d071      	beq.n	8008d38 <_strtod_l+0x280>
 8008c54:	2a2d      	cmp	r2, #45	; 0x2d
 8008c56:	d077      	beq.n	8008d48 <_strtod_l+0x290>
 8008c58:	f04f 0e00 	mov.w	lr, #0
 8008c5c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008c60:	2d09      	cmp	r5, #9
 8008c62:	d97f      	bls.n	8008d64 <_strtod_l+0x2ac>
 8008c64:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008c68:	2500      	movs	r5, #0
 8008c6a:	e09b      	b.n	8008da4 <_strtod_l+0x2ec>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	e7c3      	b.n	8008bf8 <_strtod_l+0x140>
 8008c70:	9906      	ldr	r1, [sp, #24]
 8008c72:	2908      	cmp	r1, #8
 8008c74:	bfdd      	ittte	le
 8008c76:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008c78:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c7c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008c7e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008c82:	9b06      	ldr	r3, [sp, #24]
 8008c84:	3001      	adds	r0, #1
 8008c86:	3301      	adds	r3, #1
 8008c88:	9306      	str	r3, [sp, #24]
 8008c8a:	9011      	str	r0, [sp, #68]	; 0x44
 8008c8c:	e7be      	b.n	8008c0c <_strtod_l+0x154>
 8008c8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c90:	195a      	adds	r2, r3, r5
 8008c92:	9211      	str	r2, [sp, #68]	; 0x44
 8008c94:	5d5a      	ldrb	r2, [r3, r5]
 8008c96:	9b06      	ldr	r3, [sp, #24]
 8008c98:	b3a3      	cbz	r3, 8008d04 <_strtod_l+0x24c>
 8008c9a:	4607      	mov	r7, r0
 8008c9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008ca0:	2909      	cmp	r1, #9
 8008ca2:	d912      	bls.n	8008cca <_strtod_l+0x212>
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	e7c3      	b.n	8008c30 <_strtod_l+0x178>
 8008ca8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	9211      	str	r2, [sp, #68]	; 0x44
 8008cae:	785a      	ldrb	r2, [r3, #1]
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	2a30      	cmp	r2, #48	; 0x30
 8008cb4:	d0f8      	beq.n	8008ca8 <_strtod_l+0x1f0>
 8008cb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	f200 8497 	bhi.w	80095ee <_strtod_l+0xb36>
 8008cc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	4603      	mov	r3, r0
 8008cca:	3a30      	subs	r2, #48	; 0x30
 8008ccc:	f100 0101 	add.w	r1, r0, #1
 8008cd0:	d012      	beq.n	8008cf8 <_strtod_l+0x240>
 8008cd2:	440f      	add	r7, r1
 8008cd4:	eb00 0c03 	add.w	ip, r0, r3
 8008cd8:	4619      	mov	r1, r3
 8008cda:	250a      	movs	r5, #10
 8008cdc:	4561      	cmp	r1, ip
 8008cde:	d113      	bne.n	8008d08 <_strtod_l+0x250>
 8008ce0:	1819      	adds	r1, r3, r0
 8008ce2:	2908      	cmp	r1, #8
 8008ce4:	f103 0301 	add.w	r3, r3, #1
 8008ce8:	4403      	add	r3, r0
 8008cea:	dc1c      	bgt.n	8008d26 <_strtod_l+0x26e>
 8008cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cee:	210a      	movs	r1, #10
 8008cf0:	fb01 2200 	mla	r2, r1, r0, r2
 8008cf4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008cfa:	1c50      	adds	r0, r2, #1
 8008cfc:	9011      	str	r0, [sp, #68]	; 0x44
 8008cfe:	7852      	ldrb	r2, [r2, #1]
 8008d00:	4608      	mov	r0, r1
 8008d02:	e7cb      	b.n	8008c9c <_strtod_l+0x1e4>
 8008d04:	9806      	ldr	r0, [sp, #24]
 8008d06:	e7d4      	b.n	8008cb2 <_strtod_l+0x1fa>
 8008d08:	2908      	cmp	r1, #8
 8008d0a:	dc04      	bgt.n	8008d16 <_strtod_l+0x25e>
 8008d0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008d0e:	436e      	muls	r6, r5
 8008d10:	9609      	str	r6, [sp, #36]	; 0x24
 8008d12:	3101      	adds	r1, #1
 8008d14:	e7e2      	b.n	8008cdc <_strtod_l+0x224>
 8008d16:	f101 0e01 	add.w	lr, r1, #1
 8008d1a:	f1be 0f10 	cmp.w	lr, #16
 8008d1e:	bfd8      	it	le
 8008d20:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008d24:	e7f5      	b.n	8008d12 <_strtod_l+0x25a>
 8008d26:	2b10      	cmp	r3, #16
 8008d28:	bfdc      	itt	le
 8008d2a:	210a      	movle	r1, #10
 8008d2c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008d30:	e7e1      	b.n	8008cf6 <_strtod_l+0x23e>
 8008d32:	2700      	movs	r7, #0
 8008d34:	2101      	movs	r1, #1
 8008d36:	e780      	b.n	8008c3a <_strtod_l+0x182>
 8008d38:	f04f 0e00 	mov.w	lr, #0
 8008d3c:	f10b 0202 	add.w	r2, fp, #2
 8008d40:	9211      	str	r2, [sp, #68]	; 0x44
 8008d42:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008d46:	e789      	b.n	8008c5c <_strtod_l+0x1a4>
 8008d48:	f04f 0e01 	mov.w	lr, #1
 8008d4c:	e7f6      	b.n	8008d3c <_strtod_l+0x284>
 8008d4e:	bf00      	nop
 8008d50:	0800cc30 	.word	0x0800cc30
 8008d54:	0800c9e4 	.word	0x0800c9e4
 8008d58:	7ff00000 	.word	0x7ff00000
 8008d5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d5e:	1c55      	adds	r5, r2, #1
 8008d60:	9511      	str	r5, [sp, #68]	; 0x44
 8008d62:	7852      	ldrb	r2, [r2, #1]
 8008d64:	2a30      	cmp	r2, #48	; 0x30
 8008d66:	d0f9      	beq.n	8008d5c <_strtod_l+0x2a4>
 8008d68:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008d6c:	2d08      	cmp	r5, #8
 8008d6e:	f63f af7b 	bhi.w	8008c68 <_strtod_l+0x1b0>
 8008d72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d78:	9207      	str	r2, [sp, #28]
 8008d7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008d7c:	1c55      	adds	r5, r2, #1
 8008d7e:	9511      	str	r5, [sp, #68]	; 0x44
 8008d80:	7852      	ldrb	r2, [r2, #1]
 8008d82:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008d86:	2e09      	cmp	r6, #9
 8008d88:	d937      	bls.n	8008dfa <_strtod_l+0x342>
 8008d8a:	9e07      	ldr	r6, [sp, #28]
 8008d8c:	1bad      	subs	r5, r5, r6
 8008d8e:	2d08      	cmp	r5, #8
 8008d90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008d94:	dc02      	bgt.n	8008d9c <_strtod_l+0x2e4>
 8008d96:	4565      	cmp	r5, ip
 8008d98:	bfa8      	it	ge
 8008d9a:	4665      	movge	r5, ip
 8008d9c:	f1be 0f00 	cmp.w	lr, #0
 8008da0:	d000      	beq.n	8008da4 <_strtod_l+0x2ec>
 8008da2:	426d      	negs	r5, r5
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d14d      	bne.n	8008e44 <_strtod_l+0x38c>
 8008da8:	9b04      	ldr	r3, [sp, #16]
 8008daa:	4303      	orrs	r3, r0
 8008dac:	f47f aec8 	bne.w	8008b40 <_strtod_l+0x88>
 8008db0:	2900      	cmp	r1, #0
 8008db2:	f47f aee2 	bne.w	8008b7a <_strtod_l+0xc2>
 8008db6:	2a69      	cmp	r2, #105	; 0x69
 8008db8:	d027      	beq.n	8008e0a <_strtod_l+0x352>
 8008dba:	dc24      	bgt.n	8008e06 <_strtod_l+0x34e>
 8008dbc:	2a49      	cmp	r2, #73	; 0x49
 8008dbe:	d024      	beq.n	8008e0a <_strtod_l+0x352>
 8008dc0:	2a4e      	cmp	r2, #78	; 0x4e
 8008dc2:	f47f aeda 	bne.w	8008b7a <_strtod_l+0xc2>
 8008dc6:	4996      	ldr	r1, [pc, #600]	; (8009020 <_strtod_l+0x568>)
 8008dc8:	a811      	add	r0, sp, #68	; 0x44
 8008dca:	f001 fd6f 	bl	800a8ac <__match>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	f43f aed3 	beq.w	8008b7a <_strtod_l+0xc2>
 8008dd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b28      	cmp	r3, #40	; 0x28
 8008dda:	d12d      	bne.n	8008e38 <_strtod_l+0x380>
 8008ddc:	4991      	ldr	r1, [pc, #580]	; (8009024 <_strtod_l+0x56c>)
 8008dde:	aa14      	add	r2, sp, #80	; 0x50
 8008de0:	a811      	add	r0, sp, #68	; 0x44
 8008de2:	f001 fd77 	bl	800a8d4 <__hexnan>
 8008de6:	2805      	cmp	r0, #5
 8008de8:	d126      	bne.n	8008e38 <_strtod_l+0x380>
 8008dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dec:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008df0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008df4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008df8:	e6a2      	b.n	8008b40 <_strtod_l+0x88>
 8008dfa:	250a      	movs	r5, #10
 8008dfc:	fb05 250c 	mla	r5, r5, ip, r2
 8008e00:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008e04:	e7b9      	b.n	8008d7a <_strtod_l+0x2c2>
 8008e06:	2a6e      	cmp	r2, #110	; 0x6e
 8008e08:	e7db      	b.n	8008dc2 <_strtod_l+0x30a>
 8008e0a:	4987      	ldr	r1, [pc, #540]	; (8009028 <_strtod_l+0x570>)
 8008e0c:	a811      	add	r0, sp, #68	; 0x44
 8008e0e:	f001 fd4d 	bl	800a8ac <__match>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	f43f aeb1 	beq.w	8008b7a <_strtod_l+0xc2>
 8008e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e1a:	4984      	ldr	r1, [pc, #528]	; (800902c <_strtod_l+0x574>)
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	a811      	add	r0, sp, #68	; 0x44
 8008e20:	9311      	str	r3, [sp, #68]	; 0x44
 8008e22:	f001 fd43 	bl	800a8ac <__match>
 8008e26:	b910      	cbnz	r0, 8008e2e <_strtod_l+0x376>
 8008e28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	9311      	str	r3, [sp, #68]	; 0x44
 8008e2e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009040 <_strtod_l+0x588>
 8008e32:	f04f 0800 	mov.w	r8, #0
 8008e36:	e683      	b.n	8008b40 <_strtod_l+0x88>
 8008e38:	487d      	ldr	r0, [pc, #500]	; (8009030 <_strtod_l+0x578>)
 8008e3a:	f002 fc39 	bl	800b6b0 <nan>
 8008e3e:	ec59 8b10 	vmov	r8, r9, d0
 8008e42:	e67d      	b.n	8008b40 <_strtod_l+0x88>
 8008e44:	1bea      	subs	r2, r5, r7
 8008e46:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008e4a:	9207      	str	r2, [sp, #28]
 8008e4c:	9a06      	ldr	r2, [sp, #24]
 8008e4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	bf08      	it	eq
 8008e56:	461a      	moveq	r2, r3
 8008e58:	2b10      	cmp	r3, #16
 8008e5a:	9206      	str	r2, [sp, #24]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	bfa8      	it	ge
 8008e60:	2210      	movge	r2, #16
 8008e62:	2b09      	cmp	r3, #9
 8008e64:	ec59 8b17 	vmov	r8, r9, d7
 8008e68:	dd0c      	ble.n	8008e84 <_strtod_l+0x3cc>
 8008e6a:	4972      	ldr	r1, [pc, #456]	; (8009034 <_strtod_l+0x57c>)
 8008e6c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008e70:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008e74:	ee06 aa90 	vmov	s13, sl
 8008e78:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008e7c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008e80:	ec59 8b16 	vmov	r8, r9, d6
 8008e84:	2b0f      	cmp	r3, #15
 8008e86:	dc36      	bgt.n	8008ef6 <_strtod_l+0x43e>
 8008e88:	9907      	ldr	r1, [sp, #28]
 8008e8a:	2900      	cmp	r1, #0
 8008e8c:	f43f ae58 	beq.w	8008b40 <_strtod_l+0x88>
 8008e90:	dd23      	ble.n	8008eda <_strtod_l+0x422>
 8008e92:	2916      	cmp	r1, #22
 8008e94:	dc0b      	bgt.n	8008eae <_strtod_l+0x3f6>
 8008e96:	4b67      	ldr	r3, [pc, #412]	; (8009034 <_strtod_l+0x57c>)
 8008e98:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008e9c:	ed93 7b00 	vldr	d7, [r3]
 8008ea0:	ec49 8b16 	vmov	d6, r8, r9
 8008ea4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ea8:	ec59 8b17 	vmov	r8, r9, d7
 8008eac:	e648      	b.n	8008b40 <_strtod_l+0x88>
 8008eae:	9807      	ldr	r0, [sp, #28]
 8008eb0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008eb4:	4281      	cmp	r1, r0
 8008eb6:	db1e      	blt.n	8008ef6 <_strtod_l+0x43e>
 8008eb8:	4a5e      	ldr	r2, [pc, #376]	; (8009034 <_strtod_l+0x57c>)
 8008eba:	f1c3 030f 	rsb	r3, r3, #15
 8008ebe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008ec2:	ed91 7b00 	vldr	d7, [r1]
 8008ec6:	ec49 8b16 	vmov	d6, r8, r9
 8008eca:	1ac3      	subs	r3, r0, r3
 8008ecc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008ed0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ed4:	ed92 6b00 	vldr	d6, [r2]
 8008ed8:	e7e4      	b.n	8008ea4 <_strtod_l+0x3ec>
 8008eda:	9907      	ldr	r1, [sp, #28]
 8008edc:	3116      	adds	r1, #22
 8008ede:	db0a      	blt.n	8008ef6 <_strtod_l+0x43e>
 8008ee0:	4b54      	ldr	r3, [pc, #336]	; (8009034 <_strtod_l+0x57c>)
 8008ee2:	1b7d      	subs	r5, r7, r5
 8008ee4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008ee8:	ed95 7b00 	vldr	d7, [r5]
 8008eec:	ec49 8b16 	vmov	d6, r8, r9
 8008ef0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008ef4:	e7d8      	b.n	8008ea8 <_strtod_l+0x3f0>
 8008ef6:	9907      	ldr	r1, [sp, #28]
 8008ef8:	1a9a      	subs	r2, r3, r2
 8008efa:	440a      	add	r2, r1
 8008efc:	2a00      	cmp	r2, #0
 8008efe:	dd6f      	ble.n	8008fe0 <_strtod_l+0x528>
 8008f00:	f012 000f 	ands.w	r0, r2, #15
 8008f04:	d00a      	beq.n	8008f1c <_strtod_l+0x464>
 8008f06:	494b      	ldr	r1, [pc, #300]	; (8009034 <_strtod_l+0x57c>)
 8008f08:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008f0c:	ed91 7b00 	vldr	d7, [r1]
 8008f10:	ec49 8b16 	vmov	d6, r8, r9
 8008f14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f18:	ec59 8b17 	vmov	r8, r9, d7
 8008f1c:	f032 020f 	bics.w	r2, r2, #15
 8008f20:	d04f      	beq.n	8008fc2 <_strtod_l+0x50a>
 8008f22:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008f26:	dd22      	ble.n	8008f6e <_strtod_l+0x4b6>
 8008f28:	2500      	movs	r5, #0
 8008f2a:	462e      	mov	r6, r5
 8008f2c:	9506      	str	r5, [sp, #24]
 8008f2e:	462f      	mov	r7, r5
 8008f30:	2322      	movs	r3, #34	; 0x22
 8008f32:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009040 <_strtod_l+0x588>
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	f04f 0800 	mov.w	r8, #0
 8008f3c:	9b06      	ldr	r3, [sp, #24]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f43f adfe 	beq.w	8008b40 <_strtod_l+0x88>
 8008f44:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008f46:	4620      	mov	r0, r4
 8008f48:	f001 fdc2 	bl	800aad0 <_Bfree>
 8008f4c:	4639      	mov	r1, r7
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f001 fdbe 	bl	800aad0 <_Bfree>
 8008f54:	4631      	mov	r1, r6
 8008f56:	4620      	mov	r0, r4
 8008f58:	f001 fdba 	bl	800aad0 <_Bfree>
 8008f5c:	9906      	ldr	r1, [sp, #24]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f001 fdb6 	bl	800aad0 <_Bfree>
 8008f64:	4629      	mov	r1, r5
 8008f66:	4620      	mov	r0, r4
 8008f68:	f001 fdb2 	bl	800aad0 <_Bfree>
 8008f6c:	e5e8      	b.n	8008b40 <_strtod_l+0x88>
 8008f6e:	2000      	movs	r0, #0
 8008f70:	ec49 8b17 	vmov	d7, r8, r9
 8008f74:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009038 <_strtod_l+0x580>
 8008f78:	1112      	asrs	r2, r2, #4
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	2a01      	cmp	r2, #1
 8008f7e:	dc23      	bgt.n	8008fc8 <_strtod_l+0x510>
 8008f80:	b108      	cbz	r0, 8008f86 <_strtod_l+0x4ce>
 8008f82:	ec59 8b17 	vmov	r8, r9, d7
 8008f86:	4a2c      	ldr	r2, [pc, #176]	; (8009038 <_strtod_l+0x580>)
 8008f88:	482c      	ldr	r0, [pc, #176]	; (800903c <_strtod_l+0x584>)
 8008f8a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008f8e:	ed92 7b00 	vldr	d7, [r2]
 8008f92:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008f96:	ec49 8b16 	vmov	d6, r8, r9
 8008f9a:	4a29      	ldr	r2, [pc, #164]	; (8009040 <_strtod_l+0x588>)
 8008f9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fa0:	ee17 1a90 	vmov	r1, s15
 8008fa4:	400a      	ands	r2, r1
 8008fa6:	4282      	cmp	r2, r0
 8008fa8:	ec59 8b17 	vmov	r8, r9, d7
 8008fac:	d8bc      	bhi.n	8008f28 <_strtod_l+0x470>
 8008fae:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8008fb2:	4282      	cmp	r2, r0
 8008fb4:	bf86      	itte	hi
 8008fb6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009044 <_strtod_l+0x58c>
 8008fba:	f04f 38ff 	movhi.w	r8, #4294967295
 8008fbe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	9204      	str	r2, [sp, #16]
 8008fc6:	e078      	b.n	80090ba <_strtod_l+0x602>
 8008fc8:	07d6      	lsls	r6, r2, #31
 8008fca:	d504      	bpl.n	8008fd6 <_strtod_l+0x51e>
 8008fcc:	ed9c 6b00 	vldr	d6, [ip]
 8008fd0:	2001      	movs	r0, #1
 8008fd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fd6:	3101      	adds	r1, #1
 8008fd8:	1052      	asrs	r2, r2, #1
 8008fda:	f10c 0c08 	add.w	ip, ip, #8
 8008fde:	e7cd      	b.n	8008f7c <_strtod_l+0x4c4>
 8008fe0:	d0ef      	beq.n	8008fc2 <_strtod_l+0x50a>
 8008fe2:	4252      	negs	r2, r2
 8008fe4:	f012 000f 	ands.w	r0, r2, #15
 8008fe8:	d00a      	beq.n	8009000 <_strtod_l+0x548>
 8008fea:	4912      	ldr	r1, [pc, #72]	; (8009034 <_strtod_l+0x57c>)
 8008fec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008ff0:	ed91 7b00 	vldr	d7, [r1]
 8008ff4:	ec49 8b16 	vmov	d6, r8, r9
 8008ff8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008ffc:	ec59 8b17 	vmov	r8, r9, d7
 8009000:	1112      	asrs	r2, r2, #4
 8009002:	d0de      	beq.n	8008fc2 <_strtod_l+0x50a>
 8009004:	2a1f      	cmp	r2, #31
 8009006:	dd1f      	ble.n	8009048 <_strtod_l+0x590>
 8009008:	2500      	movs	r5, #0
 800900a:	462e      	mov	r6, r5
 800900c:	9506      	str	r5, [sp, #24]
 800900e:	462f      	mov	r7, r5
 8009010:	2322      	movs	r3, #34	; 0x22
 8009012:	f04f 0800 	mov.w	r8, #0
 8009016:	f04f 0900 	mov.w	r9, #0
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	e78e      	b.n	8008f3c <_strtod_l+0x484>
 800901e:	bf00      	nop
 8009020:	0800c9b5 	.word	0x0800c9b5
 8009024:	0800c9f8 	.word	0x0800c9f8
 8009028:	0800c9ad 	.word	0x0800c9ad
 800902c:	0800cb3c 	.word	0x0800cb3c
 8009030:	0800cde8 	.word	0x0800cde8
 8009034:	0800ccc8 	.word	0x0800ccc8
 8009038:	0800cca0 	.word	0x0800cca0
 800903c:	7ca00000 	.word	0x7ca00000
 8009040:	7ff00000 	.word	0x7ff00000
 8009044:	7fefffff 	.word	0x7fefffff
 8009048:	f012 0110 	ands.w	r1, r2, #16
 800904c:	bf18      	it	ne
 800904e:	216a      	movne	r1, #106	; 0x6a
 8009050:	9104      	str	r1, [sp, #16]
 8009052:	ec49 8b17 	vmov	d7, r8, r9
 8009056:	49be      	ldr	r1, [pc, #760]	; (8009350 <_strtod_l+0x898>)
 8009058:	2000      	movs	r0, #0
 800905a:	07d6      	lsls	r6, r2, #31
 800905c:	d504      	bpl.n	8009068 <_strtod_l+0x5b0>
 800905e:	ed91 6b00 	vldr	d6, [r1]
 8009062:	2001      	movs	r0, #1
 8009064:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009068:	1052      	asrs	r2, r2, #1
 800906a:	f101 0108 	add.w	r1, r1, #8
 800906e:	d1f4      	bne.n	800905a <_strtod_l+0x5a2>
 8009070:	b108      	cbz	r0, 8009076 <_strtod_l+0x5be>
 8009072:	ec59 8b17 	vmov	r8, r9, d7
 8009076:	9a04      	ldr	r2, [sp, #16]
 8009078:	b1c2      	cbz	r2, 80090ac <_strtod_l+0x5f4>
 800907a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800907e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009082:	2a00      	cmp	r2, #0
 8009084:	4648      	mov	r0, r9
 8009086:	dd11      	ble.n	80090ac <_strtod_l+0x5f4>
 8009088:	2a1f      	cmp	r2, #31
 800908a:	f340 812e 	ble.w	80092ea <_strtod_l+0x832>
 800908e:	2a34      	cmp	r2, #52	; 0x34
 8009090:	bfde      	ittt	le
 8009092:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009096:	f04f 32ff 	movle.w	r2, #4294967295
 800909a:	fa02 f101 	lslle.w	r1, r2, r1
 800909e:	f04f 0800 	mov.w	r8, #0
 80090a2:	bfcc      	ite	gt
 80090a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80090a8:	ea01 0900 	andle.w	r9, r1, r0
 80090ac:	ec49 8b17 	vmov	d7, r8, r9
 80090b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b8:	d0a6      	beq.n	8009008 <_strtod_l+0x550>
 80090ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090bc:	9200      	str	r2, [sp, #0]
 80090be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80090c0:	9a06      	ldr	r2, [sp, #24]
 80090c2:	4620      	mov	r0, r4
 80090c4:	f001 fd6c 	bl	800aba0 <__s2b>
 80090c8:	9006      	str	r0, [sp, #24]
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f43f af2c 	beq.w	8008f28 <_strtod_l+0x470>
 80090d0:	9b07      	ldr	r3, [sp, #28]
 80090d2:	1b7d      	subs	r5, r7, r5
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	bfb4      	ite	lt
 80090d8:	462b      	movlt	r3, r5
 80090da:	2300      	movge	r3, #0
 80090dc:	9309      	str	r3, [sp, #36]	; 0x24
 80090de:	9b07      	ldr	r3, [sp, #28]
 80090e0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 8009330 <_strtod_l+0x878>
 80090e4:	ed9f ab94 	vldr	d10, [pc, #592]	; 8009338 <_strtod_l+0x880>
 80090e8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009340 <_strtod_l+0x888>
 80090ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80090f0:	2500      	movs	r5, #0
 80090f2:	930c      	str	r3, [sp, #48]	; 0x30
 80090f4:	462e      	mov	r6, r5
 80090f6:	9b06      	ldr	r3, [sp, #24]
 80090f8:	4620      	mov	r0, r4
 80090fa:	6859      	ldr	r1, [r3, #4]
 80090fc:	f001 fca8 	bl	800aa50 <_Balloc>
 8009100:	4607      	mov	r7, r0
 8009102:	2800      	cmp	r0, #0
 8009104:	f43f af14 	beq.w	8008f30 <_strtod_l+0x478>
 8009108:	9b06      	ldr	r3, [sp, #24]
 800910a:	691a      	ldr	r2, [r3, #16]
 800910c:	3202      	adds	r2, #2
 800910e:	f103 010c 	add.w	r1, r3, #12
 8009112:	0092      	lsls	r2, r2, #2
 8009114:	300c      	adds	r0, #12
 8009116:	f7fe fd3f 	bl	8007b98 <memcpy>
 800911a:	ec49 8b10 	vmov	d0, r8, r9
 800911e:	aa14      	add	r2, sp, #80	; 0x50
 8009120:	a913      	add	r1, sp, #76	; 0x4c
 8009122:	4620      	mov	r0, r4
 8009124:	f002 f882 	bl	800b22c <__d2b>
 8009128:	ec49 8b18 	vmov	d8, r8, r9
 800912c:	9012      	str	r0, [sp, #72]	; 0x48
 800912e:	2800      	cmp	r0, #0
 8009130:	f43f aefe 	beq.w	8008f30 <_strtod_l+0x478>
 8009134:	2101      	movs	r1, #1
 8009136:	4620      	mov	r0, r4
 8009138:	f001 fdcc 	bl	800acd4 <__i2b>
 800913c:	4606      	mov	r6, r0
 800913e:	2800      	cmp	r0, #0
 8009140:	f43f aef6 	beq.w	8008f30 <_strtod_l+0x478>
 8009144:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009146:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfab      	itete	ge
 800914c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800914e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009150:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009154:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009158:	bfac      	ite	ge
 800915a:	eb03 0b02 	addge.w	fp, r3, r2
 800915e:	eba2 0a03 	sublt.w	sl, r2, r3
 8009162:	9a04      	ldr	r2, [sp, #16]
 8009164:	1a9b      	subs	r3, r3, r2
 8009166:	440b      	add	r3, r1
 8009168:	4a7a      	ldr	r2, [pc, #488]	; (8009354 <_strtod_l+0x89c>)
 800916a:	3b01      	subs	r3, #1
 800916c:	4293      	cmp	r3, r2
 800916e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009172:	f280 80cd 	bge.w	8009310 <_strtod_l+0x858>
 8009176:	1ad2      	subs	r2, r2, r3
 8009178:	2a1f      	cmp	r2, #31
 800917a:	eba1 0102 	sub.w	r1, r1, r2
 800917e:	f04f 0001 	mov.w	r0, #1
 8009182:	f300 80b9 	bgt.w	80092f8 <_strtod_l+0x840>
 8009186:	fa00 f302 	lsl.w	r3, r0, r2
 800918a:	930b      	str	r3, [sp, #44]	; 0x2c
 800918c:	2300      	movs	r3, #0
 800918e:	930a      	str	r3, [sp, #40]	; 0x28
 8009190:	eb0b 0301 	add.w	r3, fp, r1
 8009194:	9a04      	ldr	r2, [sp, #16]
 8009196:	459b      	cmp	fp, r3
 8009198:	448a      	add	sl, r1
 800919a:	4492      	add	sl, r2
 800919c:	465a      	mov	r2, fp
 800919e:	bfa8      	it	ge
 80091a0:	461a      	movge	r2, r3
 80091a2:	4552      	cmp	r2, sl
 80091a4:	bfa8      	it	ge
 80091a6:	4652      	movge	r2, sl
 80091a8:	2a00      	cmp	r2, #0
 80091aa:	bfc2      	ittt	gt
 80091ac:	1a9b      	subgt	r3, r3, r2
 80091ae:	ebaa 0a02 	subgt.w	sl, sl, r2
 80091b2:	ebab 0b02 	subgt.w	fp, fp, r2
 80091b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091b8:	2a00      	cmp	r2, #0
 80091ba:	dd18      	ble.n	80091ee <_strtod_l+0x736>
 80091bc:	4631      	mov	r1, r6
 80091be:	4620      	mov	r0, r4
 80091c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80091c2:	f001 fe47 	bl	800ae54 <__pow5mult>
 80091c6:	4606      	mov	r6, r0
 80091c8:	2800      	cmp	r0, #0
 80091ca:	f43f aeb1 	beq.w	8008f30 <_strtod_l+0x478>
 80091ce:	4601      	mov	r1, r0
 80091d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091d2:	4620      	mov	r0, r4
 80091d4:	f001 fd94 	bl	800ad00 <__multiply>
 80091d8:	900e      	str	r0, [sp, #56]	; 0x38
 80091da:	2800      	cmp	r0, #0
 80091dc:	f43f aea8 	beq.w	8008f30 <_strtod_l+0x478>
 80091e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80091e2:	4620      	mov	r0, r4
 80091e4:	f001 fc74 	bl	800aad0 <_Bfree>
 80091e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091ec:	9212      	str	r2, [sp, #72]	; 0x48
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f300 8093 	bgt.w	800931a <_strtod_l+0x862>
 80091f4:	9b07      	ldr	r3, [sp, #28]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	dd08      	ble.n	800920c <_strtod_l+0x754>
 80091fa:	4639      	mov	r1, r7
 80091fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091fe:	4620      	mov	r0, r4
 8009200:	f001 fe28 	bl	800ae54 <__pow5mult>
 8009204:	4607      	mov	r7, r0
 8009206:	2800      	cmp	r0, #0
 8009208:	f43f ae92 	beq.w	8008f30 <_strtod_l+0x478>
 800920c:	f1ba 0f00 	cmp.w	sl, #0
 8009210:	dd08      	ble.n	8009224 <_strtod_l+0x76c>
 8009212:	4639      	mov	r1, r7
 8009214:	4652      	mov	r2, sl
 8009216:	4620      	mov	r0, r4
 8009218:	f001 fe76 	bl	800af08 <__lshift>
 800921c:	4607      	mov	r7, r0
 800921e:	2800      	cmp	r0, #0
 8009220:	f43f ae86 	beq.w	8008f30 <_strtod_l+0x478>
 8009224:	f1bb 0f00 	cmp.w	fp, #0
 8009228:	dd08      	ble.n	800923c <_strtod_l+0x784>
 800922a:	4631      	mov	r1, r6
 800922c:	465a      	mov	r2, fp
 800922e:	4620      	mov	r0, r4
 8009230:	f001 fe6a 	bl	800af08 <__lshift>
 8009234:	4606      	mov	r6, r0
 8009236:	2800      	cmp	r0, #0
 8009238:	f43f ae7a 	beq.w	8008f30 <_strtod_l+0x478>
 800923c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800923e:	463a      	mov	r2, r7
 8009240:	4620      	mov	r0, r4
 8009242:	f001 feed 	bl	800b020 <__mdiff>
 8009246:	4605      	mov	r5, r0
 8009248:	2800      	cmp	r0, #0
 800924a:	f43f ae71 	beq.w	8008f30 <_strtod_l+0x478>
 800924e:	2300      	movs	r3, #0
 8009250:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009254:	60c3      	str	r3, [r0, #12]
 8009256:	4631      	mov	r1, r6
 8009258:	f001 fec6 	bl	800afe8 <__mcmp>
 800925c:	2800      	cmp	r0, #0
 800925e:	da7d      	bge.n	800935c <_strtod_l+0x8a4>
 8009260:	ea5a 0308 	orrs.w	r3, sl, r8
 8009264:	f040 80a3 	bne.w	80093ae <_strtod_l+0x8f6>
 8009268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800926c:	2b00      	cmp	r3, #0
 800926e:	f040 809e 	bne.w	80093ae <_strtod_l+0x8f6>
 8009272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009276:	0d1b      	lsrs	r3, r3, #20
 8009278:	051b      	lsls	r3, r3, #20
 800927a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800927e:	f240 8096 	bls.w	80093ae <_strtod_l+0x8f6>
 8009282:	696b      	ldr	r3, [r5, #20]
 8009284:	b91b      	cbnz	r3, 800928e <_strtod_l+0x7d6>
 8009286:	692b      	ldr	r3, [r5, #16]
 8009288:	2b01      	cmp	r3, #1
 800928a:	f340 8090 	ble.w	80093ae <_strtod_l+0x8f6>
 800928e:	4629      	mov	r1, r5
 8009290:	2201      	movs	r2, #1
 8009292:	4620      	mov	r0, r4
 8009294:	f001 fe38 	bl	800af08 <__lshift>
 8009298:	4631      	mov	r1, r6
 800929a:	4605      	mov	r5, r0
 800929c:	f001 fea4 	bl	800afe8 <__mcmp>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	f340 8084 	ble.w	80093ae <_strtod_l+0x8f6>
 80092a6:	9904      	ldr	r1, [sp, #16]
 80092a8:	4a2b      	ldr	r2, [pc, #172]	; (8009358 <_strtod_l+0x8a0>)
 80092aa:	464b      	mov	r3, r9
 80092ac:	2900      	cmp	r1, #0
 80092ae:	f000 809d 	beq.w	80093ec <_strtod_l+0x934>
 80092b2:	ea02 0109 	and.w	r1, r2, r9
 80092b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80092ba:	f300 8097 	bgt.w	80093ec <_strtod_l+0x934>
 80092be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80092c2:	f77f aea5 	ble.w	8009010 <_strtod_l+0x558>
 80092c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009348 <_strtod_l+0x890>
 80092ca:	ec49 8b16 	vmov	d6, r8, r9
 80092ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80092d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80092d6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80092da:	4313      	orrs	r3, r2
 80092dc:	bf08      	it	eq
 80092de:	2322      	moveq	r3, #34	; 0x22
 80092e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80092e4:	bf08      	it	eq
 80092e6:	6023      	streq	r3, [r4, #0]
 80092e8:	e62c      	b.n	8008f44 <_strtod_l+0x48c>
 80092ea:	f04f 31ff 	mov.w	r1, #4294967295
 80092ee:	fa01 f202 	lsl.w	r2, r1, r2
 80092f2:	ea02 0808 	and.w	r8, r2, r8
 80092f6:	e6d9      	b.n	80090ac <_strtod_l+0x5f4>
 80092f8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80092fc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009300:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009304:	33e2      	adds	r3, #226	; 0xe2
 8009306:	fa00 f303 	lsl.w	r3, r0, r3
 800930a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800930e:	e73f      	b.n	8009190 <_strtod_l+0x6d8>
 8009310:	2200      	movs	r2, #0
 8009312:	2301      	movs	r3, #1
 8009314:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009318:	e73a      	b.n	8009190 <_strtod_l+0x6d8>
 800931a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800931c:	461a      	mov	r2, r3
 800931e:	4620      	mov	r0, r4
 8009320:	f001 fdf2 	bl	800af08 <__lshift>
 8009324:	9012      	str	r0, [sp, #72]	; 0x48
 8009326:	2800      	cmp	r0, #0
 8009328:	f47f af64 	bne.w	80091f4 <_strtod_l+0x73c>
 800932c:	e600      	b.n	8008f30 <_strtod_l+0x478>
 800932e:	bf00      	nop
 8009330:	94a03595 	.word	0x94a03595
 8009334:	3fcfffff 	.word	0x3fcfffff
 8009338:	94a03595 	.word	0x94a03595
 800933c:	3fdfffff 	.word	0x3fdfffff
 8009340:	35afe535 	.word	0x35afe535
 8009344:	3fe00000 	.word	0x3fe00000
 8009348:	00000000 	.word	0x00000000
 800934c:	39500000 	.word	0x39500000
 8009350:	0800ca10 	.word	0x0800ca10
 8009354:	fffffc02 	.word	0xfffffc02
 8009358:	7ff00000 	.word	0x7ff00000
 800935c:	46cb      	mov	fp, r9
 800935e:	d15f      	bne.n	8009420 <_strtod_l+0x968>
 8009360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009364:	f1ba 0f00 	cmp.w	sl, #0
 8009368:	d02a      	beq.n	80093c0 <_strtod_l+0x908>
 800936a:	4aa7      	ldr	r2, [pc, #668]	; (8009608 <_strtod_l+0xb50>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d12b      	bne.n	80093c8 <_strtod_l+0x910>
 8009370:	9b04      	ldr	r3, [sp, #16]
 8009372:	4642      	mov	r2, r8
 8009374:	b1fb      	cbz	r3, 80093b6 <_strtod_l+0x8fe>
 8009376:	4ba5      	ldr	r3, [pc, #660]	; (800960c <_strtod_l+0xb54>)
 8009378:	ea09 0303 	and.w	r3, r9, r3
 800937c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009380:	f04f 31ff 	mov.w	r1, #4294967295
 8009384:	d81a      	bhi.n	80093bc <_strtod_l+0x904>
 8009386:	0d1b      	lsrs	r3, r3, #20
 8009388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800938c:	fa01 f303 	lsl.w	r3, r1, r3
 8009390:	429a      	cmp	r2, r3
 8009392:	d119      	bne.n	80093c8 <_strtod_l+0x910>
 8009394:	4b9e      	ldr	r3, [pc, #632]	; (8009610 <_strtod_l+0xb58>)
 8009396:	459b      	cmp	fp, r3
 8009398:	d102      	bne.n	80093a0 <_strtod_l+0x8e8>
 800939a:	3201      	adds	r2, #1
 800939c:	f43f adc8 	beq.w	8008f30 <_strtod_l+0x478>
 80093a0:	4b9a      	ldr	r3, [pc, #616]	; (800960c <_strtod_l+0xb54>)
 80093a2:	ea0b 0303 	and.w	r3, fp, r3
 80093a6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	9b04      	ldr	r3, [sp, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d188      	bne.n	80092c6 <_strtod_l+0x80e>
 80093b4:	e5c6      	b.n	8008f44 <_strtod_l+0x48c>
 80093b6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ba:	e7e9      	b.n	8009390 <_strtod_l+0x8d8>
 80093bc:	460b      	mov	r3, r1
 80093be:	e7e7      	b.n	8009390 <_strtod_l+0x8d8>
 80093c0:	ea53 0308 	orrs.w	r3, r3, r8
 80093c4:	f43f af6f 	beq.w	80092a6 <_strtod_l+0x7ee>
 80093c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ca:	b1cb      	cbz	r3, 8009400 <_strtod_l+0x948>
 80093cc:	ea13 0f0b 	tst.w	r3, fp
 80093d0:	d0ed      	beq.n	80093ae <_strtod_l+0x8f6>
 80093d2:	9a04      	ldr	r2, [sp, #16]
 80093d4:	4640      	mov	r0, r8
 80093d6:	4649      	mov	r1, r9
 80093d8:	f1ba 0f00 	cmp.w	sl, #0
 80093dc:	d014      	beq.n	8009408 <_strtod_l+0x950>
 80093de:	f7ff fb51 	bl	8008a84 <sulp>
 80093e2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80093e6:	ec59 8b17 	vmov	r8, r9, d7
 80093ea:	e7e0      	b.n	80093ae <_strtod_l+0x8f6>
 80093ec:	4013      	ands	r3, r2
 80093ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80093f2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80093f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80093fa:	f04f 38ff 	mov.w	r8, #4294967295
 80093fe:	e7d6      	b.n	80093ae <_strtod_l+0x8f6>
 8009400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009402:	ea13 0f08 	tst.w	r3, r8
 8009406:	e7e3      	b.n	80093d0 <_strtod_l+0x918>
 8009408:	f7ff fb3c 	bl	8008a84 <sulp>
 800940c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8009410:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009418:	ec59 8b10 	vmov	r8, r9, d0
 800941c:	d1c7      	bne.n	80093ae <_strtod_l+0x8f6>
 800941e:	e5f7      	b.n	8009010 <_strtod_l+0x558>
 8009420:	4631      	mov	r1, r6
 8009422:	4628      	mov	r0, r5
 8009424:	f001 ff5e 	bl	800b2e4 <__ratio>
 8009428:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800942c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009434:	d865      	bhi.n	8009502 <_strtod_l+0xa4a>
 8009436:	f1ba 0f00 	cmp.w	sl, #0
 800943a:	d042      	beq.n	80094c2 <_strtod_l+0xa0a>
 800943c:	4b75      	ldr	r3, [pc, #468]	; (8009614 <_strtod_l+0xb5c>)
 800943e:	2200      	movs	r2, #0
 8009440:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009444:	4871      	ldr	r0, [pc, #452]	; (800960c <_strtod_l+0xb54>)
 8009446:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8009620 <_strtod_l+0xb68>
 800944a:	ea0b 0100 	and.w	r1, fp, r0
 800944e:	4561      	cmp	r1, ip
 8009450:	f040 808e 	bne.w	8009570 <_strtod_l+0xab8>
 8009454:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009458:	ec49 8b10 	vmov	d0, r8, r9
 800945c:	ec43 2b1c 	vmov	d12, r2, r3
 8009460:	910a      	str	r1, [sp, #40]	; 0x28
 8009462:	f001 fe67 	bl	800b134 <__ulp>
 8009466:	ec49 8b1e 	vmov	d14, r8, r9
 800946a:	4868      	ldr	r0, [pc, #416]	; (800960c <_strtod_l+0xb54>)
 800946c:	eeac eb00 	vfma.f64	d14, d12, d0
 8009470:	ee1e 3a90 	vmov	r3, s29
 8009474:	4a68      	ldr	r2, [pc, #416]	; (8009618 <_strtod_l+0xb60>)
 8009476:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009478:	4018      	ands	r0, r3
 800947a:	4290      	cmp	r0, r2
 800947c:	ec59 8b1e 	vmov	r8, r9, d14
 8009480:	d94e      	bls.n	8009520 <_strtod_l+0xa68>
 8009482:	ee18 3a90 	vmov	r3, s17
 8009486:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800948a:	4293      	cmp	r3, r2
 800948c:	d104      	bne.n	8009498 <_strtod_l+0x9e0>
 800948e:	ee18 3a10 	vmov	r3, s16
 8009492:	3301      	adds	r3, #1
 8009494:	f43f ad4c 	beq.w	8008f30 <_strtod_l+0x478>
 8009498:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009610 <_strtod_l+0xb58>
 800949c:	f04f 38ff 	mov.w	r8, #4294967295
 80094a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80094a2:	4620      	mov	r0, r4
 80094a4:	f001 fb14 	bl	800aad0 <_Bfree>
 80094a8:	4639      	mov	r1, r7
 80094aa:	4620      	mov	r0, r4
 80094ac:	f001 fb10 	bl	800aad0 <_Bfree>
 80094b0:	4631      	mov	r1, r6
 80094b2:	4620      	mov	r0, r4
 80094b4:	f001 fb0c 	bl	800aad0 <_Bfree>
 80094b8:	4629      	mov	r1, r5
 80094ba:	4620      	mov	r0, r4
 80094bc:	f001 fb08 	bl	800aad0 <_Bfree>
 80094c0:	e619      	b.n	80090f6 <_strtod_l+0x63e>
 80094c2:	f1b8 0f00 	cmp.w	r8, #0
 80094c6:	d112      	bne.n	80094ee <_strtod_l+0xa36>
 80094c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094cc:	b9b3      	cbnz	r3, 80094fc <_strtod_l+0xa44>
 80094ce:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80094d2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80094d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094da:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80094de:	bf58      	it	pl
 80094e0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80094e4:	eeb1 7b4d 	vneg.f64	d7, d13
 80094e8:	ec53 2b17 	vmov	r2, r3, d7
 80094ec:	e7aa      	b.n	8009444 <_strtod_l+0x98c>
 80094ee:	f1b8 0f01 	cmp.w	r8, #1
 80094f2:	d103      	bne.n	80094fc <_strtod_l+0xa44>
 80094f4:	f1b9 0f00 	cmp.w	r9, #0
 80094f8:	f43f ad8a 	beq.w	8009010 <_strtod_l+0x558>
 80094fc:	4b47      	ldr	r3, [pc, #284]	; (800961c <_strtod_l+0xb64>)
 80094fe:	2200      	movs	r2, #0
 8009500:	e79e      	b.n	8009440 <_strtod_l+0x988>
 8009502:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8009506:	ee20 db0d 	vmul.f64	d13, d0, d13
 800950a:	f1ba 0f00 	cmp.w	sl, #0
 800950e:	d104      	bne.n	800951a <_strtod_l+0xa62>
 8009510:	eeb1 7b4d 	vneg.f64	d7, d13
 8009514:	ec53 2b17 	vmov	r2, r3, d7
 8009518:	e794      	b.n	8009444 <_strtod_l+0x98c>
 800951a:	eeb0 7b4d 	vmov.f64	d7, d13
 800951e:	e7f9      	b.n	8009514 <_strtod_l+0xa5c>
 8009520:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009524:	9b04      	ldr	r3, [sp, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1ba      	bne.n	80094a0 <_strtod_l+0x9e8>
 800952a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800952e:	0d1b      	lsrs	r3, r3, #20
 8009530:	051b      	lsls	r3, r3, #20
 8009532:	4299      	cmp	r1, r3
 8009534:	d1b4      	bne.n	80094a0 <_strtod_l+0x9e8>
 8009536:	ec51 0b1d 	vmov	r0, r1, d13
 800953a:	f7f7 f8ad 	bl	8000698 <__aeabi_d2lz>
 800953e:	f7f7 f865 	bl	800060c <__aeabi_l2d>
 8009542:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009546:	ec41 0b17 	vmov	d7, r0, r1
 800954a:	ea43 0308 	orr.w	r3, r3, r8
 800954e:	ea53 030a 	orrs.w	r3, r3, sl
 8009552:	ee3d db47 	vsub.f64	d13, d13, d7
 8009556:	d03c      	beq.n	80095d2 <_strtod_l+0xb1a>
 8009558:	eeb4 dbca 	vcmpe.f64	d13, d10
 800955c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009560:	f53f acf0 	bmi.w	8008f44 <_strtod_l+0x48c>
 8009564:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	dd98      	ble.n	80094a0 <_strtod_l+0x9e8>
 800956e:	e4e9      	b.n	8008f44 <_strtod_l+0x48c>
 8009570:	9804      	ldr	r0, [sp, #16]
 8009572:	b1f0      	cbz	r0, 80095b2 <_strtod_l+0xafa>
 8009574:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009578:	d81b      	bhi.n	80095b2 <_strtod_l+0xafa>
 800957a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8009600 <_strtod_l+0xb48>
 800957e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009586:	d811      	bhi.n	80095ac <_strtod_l+0xaf4>
 8009588:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800958c:	ee1d 3a10 	vmov	r3, s26
 8009590:	2b01      	cmp	r3, #1
 8009592:	bf38      	it	cc
 8009594:	2301      	movcc	r3, #1
 8009596:	ee0d 3a10 	vmov	s26, r3
 800959a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800959e:	f1ba 0f00 	cmp.w	sl, #0
 80095a2:	d113      	bne.n	80095cc <_strtod_l+0xb14>
 80095a4:	eeb1 7b4d 	vneg.f64	d7, d13
 80095a8:	ec53 2b17 	vmov	r2, r3, d7
 80095ac:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 80095b0:	1a43      	subs	r3, r0, r1
 80095b2:	eeb0 0b48 	vmov.f64	d0, d8
 80095b6:	ec43 2b1c 	vmov	d12, r2, r3
 80095ba:	910a      	str	r1, [sp, #40]	; 0x28
 80095bc:	f001 fdba 	bl	800b134 <__ulp>
 80095c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80095c2:	eeac 8b00 	vfma.f64	d8, d12, d0
 80095c6:	ec59 8b18 	vmov	r8, r9, d8
 80095ca:	e7ab      	b.n	8009524 <_strtod_l+0xa6c>
 80095cc:	eeb0 7b4d 	vmov.f64	d7, d13
 80095d0:	e7ea      	b.n	80095a8 <_strtod_l+0xaf0>
 80095d2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 80095d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095da:	f57f af61 	bpl.w	80094a0 <_strtod_l+0x9e8>
 80095de:	e4b1      	b.n	8008f44 <_strtod_l+0x48c>
 80095e0:	2300      	movs	r3, #0
 80095e2:	9308      	str	r3, [sp, #32]
 80095e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	f7ff baad 	b.w	8008b48 <_strtod_l+0x90>
 80095ee:	2a65      	cmp	r2, #101	; 0x65
 80095f0:	f43f ab9f 	beq.w	8008d32 <_strtod_l+0x27a>
 80095f4:	2a45      	cmp	r2, #69	; 0x45
 80095f6:	f43f ab9c 	beq.w	8008d32 <_strtod_l+0x27a>
 80095fa:	2101      	movs	r1, #1
 80095fc:	f7ff bbd4 	b.w	8008da8 <_strtod_l+0x2f0>
 8009600:	ffc00000 	.word	0xffc00000
 8009604:	41dfffff 	.word	0x41dfffff
 8009608:	000fffff 	.word	0x000fffff
 800960c:	7ff00000 	.word	0x7ff00000
 8009610:	7fefffff 	.word	0x7fefffff
 8009614:	3ff00000 	.word	0x3ff00000
 8009618:	7c9fffff 	.word	0x7c9fffff
 800961c:	bff00000 	.word	0xbff00000
 8009620:	7fe00000 	.word	0x7fe00000

08009624 <_strtod_r>:
 8009624:	4b01      	ldr	r3, [pc, #4]	; (800962c <_strtod_r+0x8>)
 8009626:	f7ff ba47 	b.w	8008ab8 <_strtod_l>
 800962a:	bf00      	nop
 800962c:	20000bcc 	.word	0x20000bcc

08009630 <_strtol_l.constprop.0>:
 8009630:	2b01      	cmp	r3, #1
 8009632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009636:	d001      	beq.n	800963c <_strtol_l.constprop.0+0xc>
 8009638:	2b24      	cmp	r3, #36	; 0x24
 800963a:	d906      	bls.n	800964a <_strtol_l.constprop.0+0x1a>
 800963c:	f7fe fa7a 	bl	8007b34 <__errno>
 8009640:	2316      	movs	r3, #22
 8009642:	6003      	str	r3, [r0, #0]
 8009644:	2000      	movs	r0, #0
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009730 <_strtol_l.constprop.0+0x100>
 800964e:	460d      	mov	r5, r1
 8009650:	462e      	mov	r6, r5
 8009652:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009656:	f814 700c 	ldrb.w	r7, [r4, ip]
 800965a:	f017 0708 	ands.w	r7, r7, #8
 800965e:	d1f7      	bne.n	8009650 <_strtol_l.constprop.0+0x20>
 8009660:	2c2d      	cmp	r4, #45	; 0x2d
 8009662:	d132      	bne.n	80096ca <_strtol_l.constprop.0+0x9a>
 8009664:	782c      	ldrb	r4, [r5, #0]
 8009666:	2701      	movs	r7, #1
 8009668:	1cb5      	adds	r5, r6, #2
 800966a:	2b00      	cmp	r3, #0
 800966c:	d05b      	beq.n	8009726 <_strtol_l.constprop.0+0xf6>
 800966e:	2b10      	cmp	r3, #16
 8009670:	d109      	bne.n	8009686 <_strtol_l.constprop.0+0x56>
 8009672:	2c30      	cmp	r4, #48	; 0x30
 8009674:	d107      	bne.n	8009686 <_strtol_l.constprop.0+0x56>
 8009676:	782c      	ldrb	r4, [r5, #0]
 8009678:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800967c:	2c58      	cmp	r4, #88	; 0x58
 800967e:	d14d      	bne.n	800971c <_strtol_l.constprop.0+0xec>
 8009680:	786c      	ldrb	r4, [r5, #1]
 8009682:	2310      	movs	r3, #16
 8009684:	3502      	adds	r5, #2
 8009686:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800968a:	f108 38ff 	add.w	r8, r8, #4294967295
 800968e:	f04f 0c00 	mov.w	ip, #0
 8009692:	fbb8 f9f3 	udiv	r9, r8, r3
 8009696:	4666      	mov	r6, ip
 8009698:	fb03 8a19 	mls	sl, r3, r9, r8
 800969c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80096a0:	f1be 0f09 	cmp.w	lr, #9
 80096a4:	d816      	bhi.n	80096d4 <_strtol_l.constprop.0+0xa4>
 80096a6:	4674      	mov	r4, lr
 80096a8:	42a3      	cmp	r3, r4
 80096aa:	dd24      	ble.n	80096f6 <_strtol_l.constprop.0+0xc6>
 80096ac:	f1bc 0f00 	cmp.w	ip, #0
 80096b0:	db1e      	blt.n	80096f0 <_strtol_l.constprop.0+0xc0>
 80096b2:	45b1      	cmp	r9, r6
 80096b4:	d31c      	bcc.n	80096f0 <_strtol_l.constprop.0+0xc0>
 80096b6:	d101      	bne.n	80096bc <_strtol_l.constprop.0+0x8c>
 80096b8:	45a2      	cmp	sl, r4
 80096ba:	db19      	blt.n	80096f0 <_strtol_l.constprop.0+0xc0>
 80096bc:	fb06 4603 	mla	r6, r6, r3, r4
 80096c0:	f04f 0c01 	mov.w	ip, #1
 80096c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096c8:	e7e8      	b.n	800969c <_strtol_l.constprop.0+0x6c>
 80096ca:	2c2b      	cmp	r4, #43	; 0x2b
 80096cc:	bf04      	itt	eq
 80096ce:	782c      	ldrbeq	r4, [r5, #0]
 80096d0:	1cb5      	addeq	r5, r6, #2
 80096d2:	e7ca      	b.n	800966a <_strtol_l.constprop.0+0x3a>
 80096d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80096d8:	f1be 0f19 	cmp.w	lr, #25
 80096dc:	d801      	bhi.n	80096e2 <_strtol_l.constprop.0+0xb2>
 80096de:	3c37      	subs	r4, #55	; 0x37
 80096e0:	e7e2      	b.n	80096a8 <_strtol_l.constprop.0+0x78>
 80096e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80096e6:	f1be 0f19 	cmp.w	lr, #25
 80096ea:	d804      	bhi.n	80096f6 <_strtol_l.constprop.0+0xc6>
 80096ec:	3c57      	subs	r4, #87	; 0x57
 80096ee:	e7db      	b.n	80096a8 <_strtol_l.constprop.0+0x78>
 80096f0:	f04f 3cff 	mov.w	ip, #4294967295
 80096f4:	e7e6      	b.n	80096c4 <_strtol_l.constprop.0+0x94>
 80096f6:	f1bc 0f00 	cmp.w	ip, #0
 80096fa:	da05      	bge.n	8009708 <_strtol_l.constprop.0+0xd8>
 80096fc:	2322      	movs	r3, #34	; 0x22
 80096fe:	6003      	str	r3, [r0, #0]
 8009700:	4646      	mov	r6, r8
 8009702:	b942      	cbnz	r2, 8009716 <_strtol_l.constprop.0+0xe6>
 8009704:	4630      	mov	r0, r6
 8009706:	e79e      	b.n	8009646 <_strtol_l.constprop.0+0x16>
 8009708:	b107      	cbz	r7, 800970c <_strtol_l.constprop.0+0xdc>
 800970a:	4276      	negs	r6, r6
 800970c:	2a00      	cmp	r2, #0
 800970e:	d0f9      	beq.n	8009704 <_strtol_l.constprop.0+0xd4>
 8009710:	f1bc 0f00 	cmp.w	ip, #0
 8009714:	d000      	beq.n	8009718 <_strtol_l.constprop.0+0xe8>
 8009716:	1e69      	subs	r1, r5, #1
 8009718:	6011      	str	r1, [r2, #0]
 800971a:	e7f3      	b.n	8009704 <_strtol_l.constprop.0+0xd4>
 800971c:	2430      	movs	r4, #48	; 0x30
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1b1      	bne.n	8009686 <_strtol_l.constprop.0+0x56>
 8009722:	2308      	movs	r3, #8
 8009724:	e7af      	b.n	8009686 <_strtol_l.constprop.0+0x56>
 8009726:	2c30      	cmp	r4, #48	; 0x30
 8009728:	d0a5      	beq.n	8009676 <_strtol_l.constprop.0+0x46>
 800972a:	230a      	movs	r3, #10
 800972c:	e7ab      	b.n	8009686 <_strtol_l.constprop.0+0x56>
 800972e:	bf00      	nop
 8009730:	0800ca39 	.word	0x0800ca39

08009734 <_strtol_r>:
 8009734:	f7ff bf7c 	b.w	8009630 <_strtol_l.constprop.0>

08009738 <quorem>:
 8009738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	6903      	ldr	r3, [r0, #16]
 800973e:	690c      	ldr	r4, [r1, #16]
 8009740:	42a3      	cmp	r3, r4
 8009742:	4607      	mov	r7, r0
 8009744:	f2c0 8081 	blt.w	800984a <quorem+0x112>
 8009748:	3c01      	subs	r4, #1
 800974a:	f101 0814 	add.w	r8, r1, #20
 800974e:	f100 0514 	add.w	r5, r0, #20
 8009752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800975c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009760:	3301      	adds	r3, #1
 8009762:	429a      	cmp	r2, r3
 8009764:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009768:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800976c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009770:	d331      	bcc.n	80097d6 <quorem+0x9e>
 8009772:	f04f 0e00 	mov.w	lr, #0
 8009776:	4640      	mov	r0, r8
 8009778:	46ac      	mov	ip, r5
 800977a:	46f2      	mov	sl, lr
 800977c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009780:	b293      	uxth	r3, r2
 8009782:	fb06 e303 	mla	r3, r6, r3, lr
 8009786:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800978a:	b29b      	uxth	r3, r3
 800978c:	ebaa 0303 	sub.w	r3, sl, r3
 8009790:	f8dc a000 	ldr.w	sl, [ip]
 8009794:	0c12      	lsrs	r2, r2, #16
 8009796:	fa13 f38a 	uxtah	r3, r3, sl
 800979a:	fb06 e202 	mla	r2, r6, r2, lr
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	9b00      	ldr	r3, [sp, #0]
 80097a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097a6:	b292      	uxth	r2, r2
 80097a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80097ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80097b4:	4581      	cmp	r9, r0
 80097b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ba:	f84c 3b04 	str.w	r3, [ip], #4
 80097be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097c2:	d2db      	bcs.n	800977c <quorem+0x44>
 80097c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80097c8:	b92b      	cbnz	r3, 80097d6 <quorem+0x9e>
 80097ca:	9b01      	ldr	r3, [sp, #4]
 80097cc:	3b04      	subs	r3, #4
 80097ce:	429d      	cmp	r5, r3
 80097d0:	461a      	mov	r2, r3
 80097d2:	d32e      	bcc.n	8009832 <quorem+0xfa>
 80097d4:	613c      	str	r4, [r7, #16]
 80097d6:	4638      	mov	r0, r7
 80097d8:	f001 fc06 	bl	800afe8 <__mcmp>
 80097dc:	2800      	cmp	r0, #0
 80097de:	db24      	blt.n	800982a <quorem+0xf2>
 80097e0:	3601      	adds	r6, #1
 80097e2:	4628      	mov	r0, r5
 80097e4:	f04f 0c00 	mov.w	ip, #0
 80097e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80097ec:	f8d0 e000 	ldr.w	lr, [r0]
 80097f0:	b293      	uxth	r3, r2
 80097f2:	ebac 0303 	sub.w	r3, ip, r3
 80097f6:	0c12      	lsrs	r2, r2, #16
 80097f8:	fa13 f38e 	uxtah	r3, r3, lr
 80097fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009800:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009804:	b29b      	uxth	r3, r3
 8009806:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800980a:	45c1      	cmp	r9, r8
 800980c:	f840 3b04 	str.w	r3, [r0], #4
 8009810:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009814:	d2e8      	bcs.n	80097e8 <quorem+0xb0>
 8009816:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800981a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800981e:	b922      	cbnz	r2, 800982a <quorem+0xf2>
 8009820:	3b04      	subs	r3, #4
 8009822:	429d      	cmp	r5, r3
 8009824:	461a      	mov	r2, r3
 8009826:	d30a      	bcc.n	800983e <quorem+0x106>
 8009828:	613c      	str	r4, [r7, #16]
 800982a:	4630      	mov	r0, r6
 800982c:	b003      	add	sp, #12
 800982e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009832:	6812      	ldr	r2, [r2, #0]
 8009834:	3b04      	subs	r3, #4
 8009836:	2a00      	cmp	r2, #0
 8009838:	d1cc      	bne.n	80097d4 <quorem+0x9c>
 800983a:	3c01      	subs	r4, #1
 800983c:	e7c7      	b.n	80097ce <quorem+0x96>
 800983e:	6812      	ldr	r2, [r2, #0]
 8009840:	3b04      	subs	r3, #4
 8009842:	2a00      	cmp	r2, #0
 8009844:	d1f0      	bne.n	8009828 <quorem+0xf0>
 8009846:	3c01      	subs	r4, #1
 8009848:	e7eb      	b.n	8009822 <quorem+0xea>
 800984a:	2000      	movs	r0, #0
 800984c:	e7ee      	b.n	800982c <quorem+0xf4>
	...

08009850 <_dtoa_r>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	ed2d 8b02 	vpush	{d8}
 8009858:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800985a:	b091      	sub	sp, #68	; 0x44
 800985c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009860:	ec59 8b10 	vmov	r8, r9, d0
 8009864:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009866:	9106      	str	r1, [sp, #24]
 8009868:	4606      	mov	r6, r0
 800986a:	9208      	str	r2, [sp, #32]
 800986c:	930c      	str	r3, [sp, #48]	; 0x30
 800986e:	b975      	cbnz	r5, 800988e <_dtoa_r+0x3e>
 8009870:	2010      	movs	r0, #16
 8009872:	f7fe f989 	bl	8007b88 <malloc>
 8009876:	4602      	mov	r2, r0
 8009878:	6270      	str	r0, [r6, #36]	; 0x24
 800987a:	b920      	cbnz	r0, 8009886 <_dtoa_r+0x36>
 800987c:	4baa      	ldr	r3, [pc, #680]	; (8009b28 <_dtoa_r+0x2d8>)
 800987e:	21ea      	movs	r1, #234	; 0xea
 8009880:	48aa      	ldr	r0, [pc, #680]	; (8009b2c <_dtoa_r+0x2dc>)
 8009882:	f001 ff3f 	bl	800b704 <__assert_func>
 8009886:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800988a:	6005      	str	r5, [r0, #0]
 800988c:	60c5      	str	r5, [r0, #12]
 800988e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009890:	6819      	ldr	r1, [r3, #0]
 8009892:	b151      	cbz	r1, 80098aa <_dtoa_r+0x5a>
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	604a      	str	r2, [r1, #4]
 8009898:	2301      	movs	r3, #1
 800989a:	4093      	lsls	r3, r2
 800989c:	608b      	str	r3, [r1, #8]
 800989e:	4630      	mov	r0, r6
 80098a0:	f001 f916 	bl	800aad0 <_Bfree>
 80098a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	f1b9 0300 	subs.w	r3, r9, #0
 80098ae:	bfbb      	ittet	lt
 80098b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098b4:	9303      	strlt	r3, [sp, #12]
 80098b6:	2300      	movge	r3, #0
 80098b8:	2201      	movlt	r2, #1
 80098ba:	bfac      	ite	ge
 80098bc:	6023      	strge	r3, [r4, #0]
 80098be:	6022      	strlt	r2, [r4, #0]
 80098c0:	4b9b      	ldr	r3, [pc, #620]	; (8009b30 <_dtoa_r+0x2e0>)
 80098c2:	9c03      	ldr	r4, [sp, #12]
 80098c4:	43a3      	bics	r3, r4
 80098c6:	d11c      	bne.n	8009902 <_dtoa_r+0xb2>
 80098c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80098d4:	ea53 0308 	orrs.w	r3, r3, r8
 80098d8:	f000 84fd 	beq.w	800a2d6 <_dtoa_r+0xa86>
 80098dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098de:	b963      	cbnz	r3, 80098fa <_dtoa_r+0xaa>
 80098e0:	4b94      	ldr	r3, [pc, #592]	; (8009b34 <_dtoa_r+0x2e4>)
 80098e2:	e01f      	b.n	8009924 <_dtoa_r+0xd4>
 80098e4:	4b94      	ldr	r3, [pc, #592]	; (8009b38 <_dtoa_r+0x2e8>)
 80098e6:	9301      	str	r3, [sp, #4]
 80098e8:	3308      	adds	r3, #8
 80098ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	9801      	ldr	r0, [sp, #4]
 80098f0:	b011      	add	sp, #68	; 0x44
 80098f2:	ecbd 8b02 	vpop	{d8}
 80098f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fa:	4b8e      	ldr	r3, [pc, #568]	; (8009b34 <_dtoa_r+0x2e4>)
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	3303      	adds	r3, #3
 8009900:	e7f3      	b.n	80098ea <_dtoa_r+0x9a>
 8009902:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009906:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800990a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990e:	d10b      	bne.n	8009928 <_dtoa_r+0xd8>
 8009910:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009912:	2301      	movs	r3, #1
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 84d9 	beq.w	800a2d0 <_dtoa_r+0xa80>
 800991e:	4887      	ldr	r0, [pc, #540]	; (8009b3c <_dtoa_r+0x2ec>)
 8009920:	6018      	str	r0, [r3, #0]
 8009922:	1e43      	subs	r3, r0, #1
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	e7e2      	b.n	80098ee <_dtoa_r+0x9e>
 8009928:	a90f      	add	r1, sp, #60	; 0x3c
 800992a:	aa0e      	add	r2, sp, #56	; 0x38
 800992c:	4630      	mov	r0, r6
 800992e:	eeb0 0b48 	vmov.f64	d0, d8
 8009932:	f001 fc7b 	bl	800b22c <__d2b>
 8009936:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800993a:	4605      	mov	r5, r0
 800993c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800993e:	2900      	cmp	r1, #0
 8009940:	d046      	beq.n	80099d0 <_dtoa_r+0x180>
 8009942:	ee18 4a90 	vmov	r4, s17
 8009946:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800994a:	ec53 2b18 	vmov	r2, r3, d8
 800994e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009952:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009956:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800995a:	2400      	movs	r4, #0
 800995c:	ec43 2b16 	vmov	d6, r2, r3
 8009960:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009964:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009b10 <_dtoa_r+0x2c0>
 8009968:	ee36 7b47 	vsub.f64	d7, d6, d7
 800996c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009b18 <_dtoa_r+0x2c8>
 8009970:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009974:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009b20 <_dtoa_r+0x2d0>
 8009978:	ee07 1a90 	vmov	s15, r1
 800997c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009980:	eeb0 7b46 	vmov.f64	d7, d6
 8009984:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009988:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800998c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009994:	ee16 ba90 	vmov	fp, s13
 8009998:	940a      	str	r4, [sp, #40]	; 0x28
 800999a:	d508      	bpl.n	80099ae <_dtoa_r+0x15e>
 800999c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80099a0:	eeb4 6b47 	vcmp.f64	d6, d7
 80099a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a8:	bf18      	it	ne
 80099aa:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80099ae:	f1bb 0f16 	cmp.w	fp, #22
 80099b2:	d82f      	bhi.n	8009a14 <_dtoa_r+0x1c4>
 80099b4:	4b62      	ldr	r3, [pc, #392]	; (8009b40 <_dtoa_r+0x2f0>)
 80099b6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099ba:	ed93 7b00 	vldr	d7, [r3]
 80099be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80099c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c6:	d501      	bpl.n	80099cc <_dtoa_r+0x17c>
 80099c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099cc:	2300      	movs	r3, #0
 80099ce:	e022      	b.n	8009a16 <_dtoa_r+0x1c6>
 80099d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80099d2:	4401      	add	r1, r0
 80099d4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80099d8:	2b20      	cmp	r3, #32
 80099da:	bfc1      	itttt	gt
 80099dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099e0:	fa04 f303 	lslgt.w	r3, r4, r3
 80099e4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80099e8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80099ec:	bfd6      	itet	le
 80099ee:	f1c3 0320 	rsble	r3, r3, #32
 80099f2:	ea43 0808 	orrgt.w	r8, r3, r8
 80099f6:	fa08 f803 	lslle.w	r8, r8, r3
 80099fa:	ee07 8a90 	vmov	s15, r8
 80099fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009a02:	3901      	subs	r1, #1
 8009a04:	ee17 4a90 	vmov	r4, s15
 8009a08:	ec53 2b17 	vmov	r2, r3, d7
 8009a0c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009a10:	2401      	movs	r4, #1
 8009a12:	e7a3      	b.n	800995c <_dtoa_r+0x10c>
 8009a14:	2301      	movs	r3, #1
 8009a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a18:	1a43      	subs	r3, r0, r1
 8009a1a:	1e5a      	subs	r2, r3, #1
 8009a1c:	bf45      	ittet	mi
 8009a1e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a22:	9304      	strmi	r3, [sp, #16]
 8009a24:	2300      	movpl	r3, #0
 8009a26:	2300      	movmi	r3, #0
 8009a28:	9205      	str	r2, [sp, #20]
 8009a2a:	bf54      	ite	pl
 8009a2c:	9304      	strpl	r3, [sp, #16]
 8009a2e:	9305      	strmi	r3, [sp, #20]
 8009a30:	f1bb 0f00 	cmp.w	fp, #0
 8009a34:	db18      	blt.n	8009a68 <_dtoa_r+0x218>
 8009a36:	9b05      	ldr	r3, [sp, #20]
 8009a38:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009a3c:	445b      	add	r3, fp
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	2300      	movs	r3, #0
 8009a42:	9a06      	ldr	r2, [sp, #24]
 8009a44:	2a09      	cmp	r2, #9
 8009a46:	d849      	bhi.n	8009adc <_dtoa_r+0x28c>
 8009a48:	2a05      	cmp	r2, #5
 8009a4a:	bfc4      	itt	gt
 8009a4c:	3a04      	subgt	r2, #4
 8009a4e:	9206      	strgt	r2, [sp, #24]
 8009a50:	9a06      	ldr	r2, [sp, #24]
 8009a52:	f1a2 0202 	sub.w	r2, r2, #2
 8009a56:	bfcc      	ite	gt
 8009a58:	2400      	movgt	r4, #0
 8009a5a:	2401      	movle	r4, #1
 8009a5c:	2a03      	cmp	r2, #3
 8009a5e:	d848      	bhi.n	8009af2 <_dtoa_r+0x2a2>
 8009a60:	e8df f002 	tbb	[pc, r2]
 8009a64:	3a2c2e0b 	.word	0x3a2c2e0b
 8009a68:	9b04      	ldr	r3, [sp, #16]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	eba3 030b 	sub.w	r3, r3, fp
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	9209      	str	r2, [sp, #36]	; 0x24
 8009a74:	f1cb 0300 	rsb	r3, fp, #0
 8009a78:	e7e3      	b.n	8009a42 <_dtoa_r+0x1f2>
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	9207      	str	r2, [sp, #28]
 8009a7e:	9a08      	ldr	r2, [sp, #32]
 8009a80:	2a00      	cmp	r2, #0
 8009a82:	dc39      	bgt.n	8009af8 <_dtoa_r+0x2a8>
 8009a84:	f04f 0a01 	mov.w	sl, #1
 8009a88:	46d1      	mov	r9, sl
 8009a8a:	4652      	mov	r2, sl
 8009a8c:	f8cd a020 	str.w	sl, [sp, #32]
 8009a90:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009a92:	2100      	movs	r1, #0
 8009a94:	6079      	str	r1, [r7, #4]
 8009a96:	2004      	movs	r0, #4
 8009a98:	f100 0c14 	add.w	ip, r0, #20
 8009a9c:	4594      	cmp	ip, r2
 8009a9e:	6879      	ldr	r1, [r7, #4]
 8009aa0:	d92f      	bls.n	8009b02 <_dtoa_r+0x2b2>
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	930d      	str	r3, [sp, #52]	; 0x34
 8009aa6:	f000 ffd3 	bl	800aa50 <_Balloc>
 8009aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aac:	9001      	str	r0, [sp, #4]
 8009aae:	4602      	mov	r2, r0
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d149      	bne.n	8009b48 <_dtoa_r+0x2f8>
 8009ab4:	4b23      	ldr	r3, [pc, #140]	; (8009b44 <_dtoa_r+0x2f4>)
 8009ab6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009aba:	e6e1      	b.n	8009880 <_dtoa_r+0x30>
 8009abc:	2201      	movs	r2, #1
 8009abe:	e7dd      	b.n	8009a7c <_dtoa_r+0x22c>
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	9207      	str	r2, [sp, #28]
 8009ac4:	9a08      	ldr	r2, [sp, #32]
 8009ac6:	eb0b 0a02 	add.w	sl, fp, r2
 8009aca:	f10a 0901 	add.w	r9, sl, #1
 8009ace:	464a      	mov	r2, r9
 8009ad0:	2a01      	cmp	r2, #1
 8009ad2:	bfb8      	it	lt
 8009ad4:	2201      	movlt	r2, #1
 8009ad6:	e7db      	b.n	8009a90 <_dtoa_r+0x240>
 8009ad8:	2201      	movs	r2, #1
 8009ada:	e7f2      	b.n	8009ac2 <_dtoa_r+0x272>
 8009adc:	2401      	movs	r4, #1
 8009ade:	2200      	movs	r2, #0
 8009ae0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009ae4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ae8:	2100      	movs	r1, #0
 8009aea:	46d1      	mov	r9, sl
 8009aec:	2212      	movs	r2, #18
 8009aee:	9108      	str	r1, [sp, #32]
 8009af0:	e7ce      	b.n	8009a90 <_dtoa_r+0x240>
 8009af2:	2201      	movs	r2, #1
 8009af4:	9207      	str	r2, [sp, #28]
 8009af6:	e7f5      	b.n	8009ae4 <_dtoa_r+0x294>
 8009af8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009afc:	46d1      	mov	r9, sl
 8009afe:	4652      	mov	r2, sl
 8009b00:	e7c6      	b.n	8009a90 <_dtoa_r+0x240>
 8009b02:	3101      	adds	r1, #1
 8009b04:	6079      	str	r1, [r7, #4]
 8009b06:	0040      	lsls	r0, r0, #1
 8009b08:	e7c6      	b.n	8009a98 <_dtoa_r+0x248>
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w
 8009b10:	636f4361 	.word	0x636f4361
 8009b14:	3fd287a7 	.word	0x3fd287a7
 8009b18:	8b60c8b3 	.word	0x8b60c8b3
 8009b1c:	3fc68a28 	.word	0x3fc68a28
 8009b20:	509f79fb 	.word	0x509f79fb
 8009b24:	3fd34413 	.word	0x3fd34413
 8009b28:	0800cb46 	.word	0x0800cb46
 8009b2c:	0800cb5d 	.word	0x0800cb5d
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	0800cb42 	.word	0x0800cb42
 8009b38:	0800cb39 	.word	0x0800cb39
 8009b3c:	0800c9b9 	.word	0x0800c9b9
 8009b40:	0800ccc8 	.word	0x0800ccc8
 8009b44:	0800cbb8 	.word	0x0800cbb8
 8009b48:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009b4a:	9901      	ldr	r1, [sp, #4]
 8009b4c:	6011      	str	r1, [r2, #0]
 8009b4e:	f1b9 0f0e 	cmp.w	r9, #14
 8009b52:	d86c      	bhi.n	8009c2e <_dtoa_r+0x3de>
 8009b54:	2c00      	cmp	r4, #0
 8009b56:	d06a      	beq.n	8009c2e <_dtoa_r+0x3de>
 8009b58:	f1bb 0f00 	cmp.w	fp, #0
 8009b5c:	f340 80a0 	ble.w	8009ca0 <_dtoa_r+0x450>
 8009b60:	49c1      	ldr	r1, [pc, #772]	; (8009e68 <_dtoa_r+0x618>)
 8009b62:	f00b 020f 	and.w	r2, fp, #15
 8009b66:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009b6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b6e:	ed92 7b00 	vldr	d7, [r2]
 8009b72:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009b76:	f000 8087 	beq.w	8009c88 <_dtoa_r+0x438>
 8009b7a:	4abc      	ldr	r2, [pc, #752]	; (8009e6c <_dtoa_r+0x61c>)
 8009b7c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009b80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009b84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009b88:	f001 010f 	and.w	r1, r1, #15
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	48b7      	ldr	r0, [pc, #732]	; (8009e6c <_dtoa_r+0x61c>)
 8009b90:	2900      	cmp	r1, #0
 8009b92:	d17b      	bne.n	8009c8c <_dtoa_r+0x43c>
 8009b94:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ba2:	2900      	cmp	r1, #0
 8009ba4:	f000 80a2 	beq.w	8009cec <_dtoa_r+0x49c>
 8009ba8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009bac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb8:	f140 8098 	bpl.w	8009cec <_dtoa_r+0x49c>
 8009bbc:	f1b9 0f00 	cmp.w	r9, #0
 8009bc0:	f000 8094 	beq.w	8009cec <_dtoa_r+0x49c>
 8009bc4:	f1ba 0f00 	cmp.w	sl, #0
 8009bc8:	dd2f      	ble.n	8009c2a <_dtoa_r+0x3da>
 8009bca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bd6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009bda:	3201      	adds	r2, #1
 8009bdc:	4650      	mov	r0, sl
 8009bde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009be2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009be6:	ee07 2a90 	vmov	s15, r2
 8009bea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009bee:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009bf2:	ee15 4a90 	vmov	r4, s11
 8009bf6:	ec52 1b15 	vmov	r1, r2, d5
 8009bfa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d177      	bne.n	8009cf2 <_dtoa_r+0x4a2>
 8009c02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009c0a:	ec42 1b17 	vmov	d7, r1, r2
 8009c0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	f300 8263 	bgt.w	800a0e0 <_dtoa_r+0x890>
 8009c1a:	eeb1 7b47 	vneg.f64	d7, d7
 8009c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c26:	f100 8258 	bmi.w	800a0da <_dtoa_r+0x88a>
 8009c2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	f2c0 811d 	blt.w	8009e70 <_dtoa_r+0x620>
 8009c36:	f1bb 0f0e 	cmp.w	fp, #14
 8009c3a:	f300 8119 	bgt.w	8009e70 <_dtoa_r+0x620>
 8009c3e:	4b8a      	ldr	r3, [pc, #552]	; (8009e68 <_dtoa_r+0x618>)
 8009c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c44:	ed93 6b00 	vldr	d6, [r3]
 8009c48:	9b08      	ldr	r3, [sp, #32]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f280 80b7 	bge.w	8009dbe <_dtoa_r+0x56e>
 8009c50:	f1b9 0f00 	cmp.w	r9, #0
 8009c54:	f300 80b3 	bgt.w	8009dbe <_dtoa_r+0x56e>
 8009c58:	f040 823f 	bne.w	800a0da <_dtoa_r+0x88a>
 8009c5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c70:	464c      	mov	r4, r9
 8009c72:	464f      	mov	r7, r9
 8009c74:	f280 8215 	bge.w	800a0a2 <_dtoa_r+0x852>
 8009c78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c7c:	2331      	movs	r3, #49	; 0x31
 8009c7e:	f808 3b01 	strb.w	r3, [r8], #1
 8009c82:	f10b 0b01 	add.w	fp, fp, #1
 8009c86:	e211      	b.n	800a0ac <_dtoa_r+0x85c>
 8009c88:	2202      	movs	r2, #2
 8009c8a:	e780      	b.n	8009b8e <_dtoa_r+0x33e>
 8009c8c:	07cc      	lsls	r4, r1, #31
 8009c8e:	d504      	bpl.n	8009c9a <_dtoa_r+0x44a>
 8009c90:	ed90 6b00 	vldr	d6, [r0]
 8009c94:	3201      	adds	r2, #1
 8009c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c9a:	1049      	asrs	r1, r1, #1
 8009c9c:	3008      	adds	r0, #8
 8009c9e:	e777      	b.n	8009b90 <_dtoa_r+0x340>
 8009ca0:	d022      	beq.n	8009ce8 <_dtoa_r+0x498>
 8009ca2:	f1cb 0100 	rsb	r1, fp, #0
 8009ca6:	4a70      	ldr	r2, [pc, #448]	; (8009e68 <_dtoa_r+0x618>)
 8009ca8:	f001 000f 	and.w	r0, r1, #15
 8009cac:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009cb0:	ed92 7b00 	vldr	d7, [r2]
 8009cb4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cbc:	486b      	ldr	r0, [pc, #428]	; (8009e6c <_dtoa_r+0x61c>)
 8009cbe:	1109      	asrs	r1, r1, #4
 8009cc0:	2400      	movs	r4, #0
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	b929      	cbnz	r1, 8009cd2 <_dtoa_r+0x482>
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	f43f af6a 	beq.w	8009ba0 <_dtoa_r+0x350>
 8009ccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cd0:	e766      	b.n	8009ba0 <_dtoa_r+0x350>
 8009cd2:	07cf      	lsls	r7, r1, #31
 8009cd4:	d505      	bpl.n	8009ce2 <_dtoa_r+0x492>
 8009cd6:	ed90 6b00 	vldr	d6, [r0]
 8009cda:	3201      	adds	r2, #1
 8009cdc:	2401      	movs	r4, #1
 8009cde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ce2:	1049      	asrs	r1, r1, #1
 8009ce4:	3008      	adds	r0, #8
 8009ce6:	e7ed      	b.n	8009cc4 <_dtoa_r+0x474>
 8009ce8:	2202      	movs	r2, #2
 8009cea:	e759      	b.n	8009ba0 <_dtoa_r+0x350>
 8009cec:	465f      	mov	r7, fp
 8009cee:	4648      	mov	r0, r9
 8009cf0:	e775      	b.n	8009bde <_dtoa_r+0x38e>
 8009cf2:	ec42 1b17 	vmov	d7, r1, r2
 8009cf6:	4a5c      	ldr	r2, [pc, #368]	; (8009e68 <_dtoa_r+0x618>)
 8009cf8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009cfc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009d00:	9a01      	ldr	r2, [sp, #4]
 8009d02:	1814      	adds	r4, r2, r0
 8009d04:	9a07      	ldr	r2, [sp, #28]
 8009d06:	b352      	cbz	r2, 8009d5e <_dtoa_r+0x50e>
 8009d08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009d0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009d10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d14:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009d18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009d1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d24:	ee14 2a90 	vmov	r2, s9
 8009d28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d2c:	3230      	adds	r2, #48	; 0x30
 8009d2e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3a:	f808 2b01 	strb.w	r2, [r8], #1
 8009d3e:	d439      	bmi.n	8009db4 <_dtoa_r+0x564>
 8009d40:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009d44:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4c:	d472      	bmi.n	8009e34 <_dtoa_r+0x5e4>
 8009d4e:	45a0      	cmp	r8, r4
 8009d50:	f43f af6b 	beq.w	8009c2a <_dtoa_r+0x3da>
 8009d54:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009d58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d5c:	e7e0      	b.n	8009d20 <_dtoa_r+0x4d0>
 8009d5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d62:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d66:	4621      	mov	r1, r4
 8009d68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009d6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d70:	ee14 2a90 	vmov	r2, s9
 8009d74:	3230      	adds	r2, #48	; 0x30
 8009d76:	f808 2b01 	strb.w	r2, [r8], #1
 8009d7a:	45a0      	cmp	r8, r4
 8009d7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d84:	d118      	bne.n	8009db8 <_dtoa_r+0x568>
 8009d86:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009d8a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009d8e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d96:	dc4d      	bgt.n	8009e34 <_dtoa_r+0x5e4>
 8009d98:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da4:	f57f af41 	bpl.w	8009c2a <_dtoa_r+0x3da>
 8009da8:	4688      	mov	r8, r1
 8009daa:	3901      	subs	r1, #1
 8009dac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009db0:	2b30      	cmp	r3, #48	; 0x30
 8009db2:	d0f9      	beq.n	8009da8 <_dtoa_r+0x558>
 8009db4:	46bb      	mov	fp, r7
 8009db6:	e02a      	b.n	8009e0e <_dtoa_r+0x5be>
 8009db8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009dbc:	e7d6      	b.n	8009d6c <_dtoa_r+0x51c>
 8009dbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dc2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009dc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009dca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009dce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009dd2:	ee15 3a10 	vmov	r3, s10
 8009dd6:	3330      	adds	r3, #48	; 0x30
 8009dd8:	f808 3b01 	strb.w	r3, [r8], #1
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	eba8 0303 	sub.w	r3, r8, r3
 8009de2:	4599      	cmp	r9, r3
 8009de4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009de8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009dec:	d133      	bne.n	8009e56 <_dtoa_r+0x606>
 8009dee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009df2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfa:	dc1a      	bgt.n	8009e32 <_dtoa_r+0x5e2>
 8009dfc:	eeb4 7b46 	vcmp.f64	d7, d6
 8009e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e04:	d103      	bne.n	8009e0e <_dtoa_r+0x5be>
 8009e06:	ee15 3a10 	vmov	r3, s10
 8009e0a:	07d9      	lsls	r1, r3, #31
 8009e0c:	d411      	bmi.n	8009e32 <_dtoa_r+0x5e2>
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4630      	mov	r0, r6
 8009e12:	f000 fe5d 	bl	800aad0 <_Bfree>
 8009e16:	2300      	movs	r3, #0
 8009e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e1a:	f888 3000 	strb.w	r3, [r8]
 8009e1e:	f10b 0301 	add.w	r3, fp, #1
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f43f ad61 	beq.w	80098ee <_dtoa_r+0x9e>
 8009e2c:	f8c3 8000 	str.w	r8, [r3]
 8009e30:	e55d      	b.n	80098ee <_dtoa_r+0x9e>
 8009e32:	465f      	mov	r7, fp
 8009e34:	4643      	mov	r3, r8
 8009e36:	4698      	mov	r8, r3
 8009e38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e3c:	2a39      	cmp	r2, #57	; 0x39
 8009e3e:	d106      	bne.n	8009e4e <_dtoa_r+0x5fe>
 8009e40:	9a01      	ldr	r2, [sp, #4]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d1f7      	bne.n	8009e36 <_dtoa_r+0x5e6>
 8009e46:	9901      	ldr	r1, [sp, #4]
 8009e48:	2230      	movs	r2, #48	; 0x30
 8009e4a:	3701      	adds	r7, #1
 8009e4c:	700a      	strb	r2, [r1, #0]
 8009e4e:	781a      	ldrb	r2, [r3, #0]
 8009e50:	3201      	adds	r2, #1
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	e7ae      	b.n	8009db4 <_dtoa_r+0x564>
 8009e56:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	d1b2      	bne.n	8009dca <_dtoa_r+0x57a>
 8009e64:	e7d3      	b.n	8009e0e <_dtoa_r+0x5be>
 8009e66:	bf00      	nop
 8009e68:	0800ccc8 	.word	0x0800ccc8
 8009e6c:	0800cca0 	.word	0x0800cca0
 8009e70:	9907      	ldr	r1, [sp, #28]
 8009e72:	2900      	cmp	r1, #0
 8009e74:	f000 80d0 	beq.w	800a018 <_dtoa_r+0x7c8>
 8009e78:	9906      	ldr	r1, [sp, #24]
 8009e7a:	2901      	cmp	r1, #1
 8009e7c:	f300 80b4 	bgt.w	8009fe8 <_dtoa_r+0x798>
 8009e80:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e82:	2900      	cmp	r1, #0
 8009e84:	f000 80ac 	beq.w	8009fe0 <_dtoa_r+0x790>
 8009e88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009e90:	461c      	mov	r4, r3
 8009e92:	930a      	str	r3, [sp, #40]	; 0x28
 8009e94:	9b04      	ldr	r3, [sp, #16]
 8009e96:	4413      	add	r3, r2
 8009e98:	9304      	str	r3, [sp, #16]
 8009e9a:	9b05      	ldr	r3, [sp, #20]
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	4413      	add	r3, r2
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	f000 ff16 	bl	800acd4 <__i2b>
 8009ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eaa:	4607      	mov	r7, r0
 8009eac:	f1b8 0f00 	cmp.w	r8, #0
 8009eb0:	dd0d      	ble.n	8009ece <_dtoa_r+0x67e>
 8009eb2:	9a05      	ldr	r2, [sp, #20]
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	dd0a      	ble.n	8009ece <_dtoa_r+0x67e>
 8009eb8:	4542      	cmp	r2, r8
 8009eba:	9904      	ldr	r1, [sp, #16]
 8009ebc:	bfa8      	it	ge
 8009ebe:	4642      	movge	r2, r8
 8009ec0:	1a89      	subs	r1, r1, r2
 8009ec2:	9104      	str	r1, [sp, #16]
 8009ec4:	9905      	ldr	r1, [sp, #20]
 8009ec6:	eba8 0802 	sub.w	r8, r8, r2
 8009eca:	1a8a      	subs	r2, r1, r2
 8009ecc:	9205      	str	r2, [sp, #20]
 8009ece:	b303      	cbz	r3, 8009f12 <_dtoa_r+0x6c2>
 8009ed0:	9a07      	ldr	r2, [sp, #28]
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	f000 80a5 	beq.w	800a022 <_dtoa_r+0x7d2>
 8009ed8:	2c00      	cmp	r4, #0
 8009eda:	dd13      	ble.n	8009f04 <_dtoa_r+0x6b4>
 8009edc:	4639      	mov	r1, r7
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ee4:	f000 ffb6 	bl	800ae54 <__pow5mult>
 8009ee8:	462a      	mov	r2, r5
 8009eea:	4601      	mov	r1, r0
 8009eec:	4607      	mov	r7, r0
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f000 ff06 	bl	800ad00 <__multiply>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	900a      	str	r0, [sp, #40]	; 0x28
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 fde9 	bl	800aad0 <_Bfree>
 8009efe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f02:	4615      	mov	r5, r2
 8009f04:	1b1a      	subs	r2, r3, r4
 8009f06:	d004      	beq.n	8009f12 <_dtoa_r+0x6c2>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f000 ffa2 	bl	800ae54 <__pow5mult>
 8009f10:	4605      	mov	r5, r0
 8009f12:	2101      	movs	r1, #1
 8009f14:	4630      	mov	r0, r6
 8009f16:	f000 fedd 	bl	800acd4 <__i2b>
 8009f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	f340 8081 	ble.w	800a026 <_dtoa_r+0x7d6>
 8009f24:	461a      	mov	r2, r3
 8009f26:	4601      	mov	r1, r0
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 ff93 	bl	800ae54 <__pow5mult>
 8009f2e:	9b06      	ldr	r3, [sp, #24]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	4604      	mov	r4, r0
 8009f34:	dd7a      	ble.n	800a02c <_dtoa_r+0x7dc>
 8009f36:	2300      	movs	r3, #0
 8009f38:	930a      	str	r3, [sp, #40]	; 0x28
 8009f3a:	6922      	ldr	r2, [r4, #16]
 8009f3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009f40:	6910      	ldr	r0, [r2, #16]
 8009f42:	f000 fe77 	bl	800ac34 <__hi0bits>
 8009f46:	f1c0 0020 	rsb	r0, r0, #32
 8009f4a:	9b05      	ldr	r3, [sp, #20]
 8009f4c:	4418      	add	r0, r3
 8009f4e:	f010 001f 	ands.w	r0, r0, #31
 8009f52:	f000 808c 	beq.w	800a06e <_dtoa_r+0x81e>
 8009f56:	f1c0 0220 	rsb	r2, r0, #32
 8009f5a:	2a04      	cmp	r2, #4
 8009f5c:	f340 8085 	ble.w	800a06a <_dtoa_r+0x81a>
 8009f60:	f1c0 001c 	rsb	r0, r0, #28
 8009f64:	9b04      	ldr	r3, [sp, #16]
 8009f66:	4403      	add	r3, r0
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	4403      	add	r3, r0
 8009f6e:	4480      	add	r8, r0
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	9b04      	ldr	r3, [sp, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dd05      	ble.n	8009f84 <_dtoa_r+0x734>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f000 ffc3 	bl	800af08 <__lshift>
 8009f82:	4605      	mov	r5, r0
 8009f84:	9b05      	ldr	r3, [sp, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd05      	ble.n	8009f96 <_dtoa_r+0x746>
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f000 ffba 	bl	800af08 <__lshift>
 8009f94:	4604      	mov	r4, r0
 8009f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d06a      	beq.n	800a072 <_dtoa_r+0x822>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f001 f822 	bl	800afe8 <__mcmp>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	da64      	bge.n	800a072 <_dtoa_r+0x822>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	4629      	mov	r1, r5
 8009fac:	220a      	movs	r2, #10
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f000 fdb0 	bl	800ab14 <__multadd>
 8009fb4:	9b07      	ldr	r3, [sp, #28]
 8009fb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fba:	4605      	mov	r5, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 8191 	beq.w	800a2e4 <_dtoa_r+0xa94>
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	220a      	movs	r2, #10
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f000 fda3 	bl	800ab14 <__multadd>
 8009fce:	f1ba 0f00 	cmp.w	sl, #0
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	f300 808d 	bgt.w	800a0f2 <_dtoa_r+0x8a2>
 8009fd8:	9b06      	ldr	r3, [sp, #24]
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	dc50      	bgt.n	800a080 <_dtoa_r+0x830>
 8009fde:	e088      	b.n	800a0f2 <_dtoa_r+0x8a2>
 8009fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fe2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009fe6:	e751      	b.n	8009e8c <_dtoa_r+0x63c>
 8009fe8:	f109 34ff 	add.w	r4, r9, #4294967295
 8009fec:	42a3      	cmp	r3, r4
 8009fee:	bfbf      	itttt	lt
 8009ff0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8009ff2:	1ae3      	sublt	r3, r4, r3
 8009ff4:	18d2      	addlt	r2, r2, r3
 8009ff6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8009ff8:	bfb6      	itet	lt
 8009ffa:	4623      	movlt	r3, r4
 8009ffc:	1b1c      	subge	r4, r3, r4
 8009ffe:	2400      	movlt	r4, #0
 800a000:	f1b9 0f00 	cmp.w	r9, #0
 800a004:	bfb5      	itete	lt
 800a006:	9a04      	ldrlt	r2, [sp, #16]
 800a008:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a00c:	eba2 0809 	sublt.w	r8, r2, r9
 800a010:	464a      	movge	r2, r9
 800a012:	bfb8      	it	lt
 800a014:	2200      	movlt	r2, #0
 800a016:	e73c      	b.n	8009e92 <_dtoa_r+0x642>
 800a018:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a01c:	9f07      	ldr	r7, [sp, #28]
 800a01e:	461c      	mov	r4, r3
 800a020:	e744      	b.n	8009eac <_dtoa_r+0x65c>
 800a022:	461a      	mov	r2, r3
 800a024:	e770      	b.n	8009f08 <_dtoa_r+0x6b8>
 800a026:	9b06      	ldr	r3, [sp, #24]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	dc18      	bgt.n	800a05e <_dtoa_r+0x80e>
 800a02c:	9b02      	ldr	r3, [sp, #8]
 800a02e:	b9b3      	cbnz	r3, 800a05e <_dtoa_r+0x80e>
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a036:	b9a2      	cbnz	r2, 800a062 <_dtoa_r+0x812>
 800a038:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a03c:	0d12      	lsrs	r2, r2, #20
 800a03e:	0512      	lsls	r2, r2, #20
 800a040:	b18a      	cbz	r2, 800a066 <_dtoa_r+0x816>
 800a042:	9b04      	ldr	r3, [sp, #16]
 800a044:	3301      	adds	r3, #1
 800a046:	9304      	str	r3, [sp, #16]
 800a048:	9b05      	ldr	r3, [sp, #20]
 800a04a:	3301      	adds	r3, #1
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	2301      	movs	r3, #1
 800a050:	930a      	str	r3, [sp, #40]	; 0x28
 800a052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	f47f af70 	bne.w	8009f3a <_dtoa_r+0x6ea>
 800a05a:	2001      	movs	r0, #1
 800a05c:	e775      	b.n	8009f4a <_dtoa_r+0x6fa>
 800a05e:	2300      	movs	r3, #0
 800a060:	e7f6      	b.n	800a050 <_dtoa_r+0x800>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	e7f4      	b.n	800a050 <_dtoa_r+0x800>
 800a066:	920a      	str	r2, [sp, #40]	; 0x28
 800a068:	e7f3      	b.n	800a052 <_dtoa_r+0x802>
 800a06a:	d082      	beq.n	8009f72 <_dtoa_r+0x722>
 800a06c:	4610      	mov	r0, r2
 800a06e:	301c      	adds	r0, #28
 800a070:	e778      	b.n	8009f64 <_dtoa_r+0x714>
 800a072:	f1b9 0f00 	cmp.w	r9, #0
 800a076:	dc37      	bgt.n	800a0e8 <_dtoa_r+0x898>
 800a078:	9b06      	ldr	r3, [sp, #24]
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	dd34      	ble.n	800a0e8 <_dtoa_r+0x898>
 800a07e:	46ca      	mov	sl, r9
 800a080:	f1ba 0f00 	cmp.w	sl, #0
 800a084:	d10d      	bne.n	800a0a2 <_dtoa_r+0x852>
 800a086:	4621      	mov	r1, r4
 800a088:	4653      	mov	r3, sl
 800a08a:	2205      	movs	r2, #5
 800a08c:	4630      	mov	r0, r6
 800a08e:	f000 fd41 	bl	800ab14 <__multadd>
 800a092:	4601      	mov	r1, r0
 800a094:	4604      	mov	r4, r0
 800a096:	4628      	mov	r0, r5
 800a098:	f000 ffa6 	bl	800afe8 <__mcmp>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f73f adeb 	bgt.w	8009c78 <_dtoa_r+0x428>
 800a0a2:	9b08      	ldr	r3, [sp, #32]
 800a0a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0a8:	ea6f 0b03 	mvn.w	fp, r3
 800a0ac:	f04f 0900 	mov.w	r9, #0
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f000 fd0c 	bl	800aad0 <_Bfree>
 800a0b8:	2f00      	cmp	r7, #0
 800a0ba:	f43f aea8 	beq.w	8009e0e <_dtoa_r+0x5be>
 800a0be:	f1b9 0f00 	cmp.w	r9, #0
 800a0c2:	d005      	beq.n	800a0d0 <_dtoa_r+0x880>
 800a0c4:	45b9      	cmp	r9, r7
 800a0c6:	d003      	beq.n	800a0d0 <_dtoa_r+0x880>
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 fd00 	bl	800aad0 <_Bfree>
 800a0d0:	4639      	mov	r1, r7
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f000 fcfc 	bl	800aad0 <_Bfree>
 800a0d8:	e699      	b.n	8009e0e <_dtoa_r+0x5be>
 800a0da:	2400      	movs	r4, #0
 800a0dc:	4627      	mov	r7, r4
 800a0de:	e7e0      	b.n	800a0a2 <_dtoa_r+0x852>
 800a0e0:	46bb      	mov	fp, r7
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	4607      	mov	r7, r0
 800a0e6:	e5c7      	b.n	8009c78 <_dtoa_r+0x428>
 800a0e8:	9b07      	ldr	r3, [sp, #28]
 800a0ea:	46ca      	mov	sl, r9
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 8100 	beq.w	800a2f2 <_dtoa_r+0xaa2>
 800a0f2:	f1b8 0f00 	cmp.w	r8, #0
 800a0f6:	dd05      	ble.n	800a104 <_dtoa_r+0x8b4>
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f000 ff03 	bl	800af08 <__lshift>
 800a102:	4607      	mov	r7, r0
 800a104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a106:	2b00      	cmp	r3, #0
 800a108:	d05d      	beq.n	800a1c6 <_dtoa_r+0x976>
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	4630      	mov	r0, r6
 800a10e:	f000 fc9f 	bl	800aa50 <_Balloc>
 800a112:	4680      	mov	r8, r0
 800a114:	b928      	cbnz	r0, 800a122 <_dtoa_r+0x8d2>
 800a116:	4b82      	ldr	r3, [pc, #520]	; (800a320 <_dtoa_r+0xad0>)
 800a118:	4602      	mov	r2, r0
 800a11a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a11e:	f7ff bbaf 	b.w	8009880 <_dtoa_r+0x30>
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	3202      	adds	r2, #2
 800a126:	0092      	lsls	r2, r2, #2
 800a128:	f107 010c 	add.w	r1, r7, #12
 800a12c:	300c      	adds	r0, #12
 800a12e:	f7fd fd33 	bl	8007b98 <memcpy>
 800a132:	2201      	movs	r2, #1
 800a134:	4641      	mov	r1, r8
 800a136:	4630      	mov	r0, r6
 800a138:	f000 fee6 	bl	800af08 <__lshift>
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	3301      	adds	r3, #1
 800a140:	9304      	str	r3, [sp, #16]
 800a142:	9b01      	ldr	r3, [sp, #4]
 800a144:	4453      	add	r3, sl
 800a146:	9308      	str	r3, [sp, #32]
 800a148:	9b02      	ldr	r3, [sp, #8]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	46b9      	mov	r9, r7
 800a150:	9307      	str	r3, [sp, #28]
 800a152:	4607      	mov	r7, r0
 800a154:	9b04      	ldr	r3, [sp, #16]
 800a156:	4621      	mov	r1, r4
 800a158:	3b01      	subs	r3, #1
 800a15a:	4628      	mov	r0, r5
 800a15c:	9302      	str	r3, [sp, #8]
 800a15e:	f7ff faeb 	bl	8009738 <quorem>
 800a162:	4603      	mov	r3, r0
 800a164:	3330      	adds	r3, #48	; 0x30
 800a166:	9005      	str	r0, [sp, #20]
 800a168:	4649      	mov	r1, r9
 800a16a:	4628      	mov	r0, r5
 800a16c:	9309      	str	r3, [sp, #36]	; 0x24
 800a16e:	f000 ff3b 	bl	800afe8 <__mcmp>
 800a172:	463a      	mov	r2, r7
 800a174:	4682      	mov	sl, r0
 800a176:	4621      	mov	r1, r4
 800a178:	4630      	mov	r0, r6
 800a17a:	f000 ff51 	bl	800b020 <__mdiff>
 800a17e:	68c2      	ldr	r2, [r0, #12]
 800a180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a182:	4680      	mov	r8, r0
 800a184:	bb0a      	cbnz	r2, 800a1ca <_dtoa_r+0x97a>
 800a186:	4601      	mov	r1, r0
 800a188:	4628      	mov	r0, r5
 800a18a:	f000 ff2d 	bl	800afe8 <__mcmp>
 800a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a190:	4602      	mov	r2, r0
 800a192:	4641      	mov	r1, r8
 800a194:	4630      	mov	r0, r6
 800a196:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a19a:	f000 fc99 	bl	800aad0 <_Bfree>
 800a19e:	9b06      	ldr	r3, [sp, #24]
 800a1a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1a2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a1a6:	ea43 0102 	orr.w	r1, r3, r2
 800a1aa:	9b07      	ldr	r3, [sp, #28]
 800a1ac:	430b      	orrs	r3, r1
 800a1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b0:	d10d      	bne.n	800a1ce <_dtoa_r+0x97e>
 800a1b2:	2b39      	cmp	r3, #57	; 0x39
 800a1b4:	d029      	beq.n	800a20a <_dtoa_r+0x9ba>
 800a1b6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ba:	dd01      	ble.n	800a1c0 <_dtoa_r+0x970>
 800a1bc:	9b05      	ldr	r3, [sp, #20]
 800a1be:	3331      	adds	r3, #49	; 0x31
 800a1c0:	9a02      	ldr	r2, [sp, #8]
 800a1c2:	7013      	strb	r3, [r2, #0]
 800a1c4:	e774      	b.n	800a0b0 <_dtoa_r+0x860>
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	e7b8      	b.n	800a13c <_dtoa_r+0x8ec>
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	e7e1      	b.n	800a192 <_dtoa_r+0x942>
 800a1ce:	f1ba 0f00 	cmp.w	sl, #0
 800a1d2:	db06      	blt.n	800a1e2 <_dtoa_r+0x992>
 800a1d4:	9906      	ldr	r1, [sp, #24]
 800a1d6:	ea41 0a0a 	orr.w	sl, r1, sl
 800a1da:	9907      	ldr	r1, [sp, #28]
 800a1dc:	ea5a 0101 	orrs.w	r1, sl, r1
 800a1e0:	d120      	bne.n	800a224 <_dtoa_r+0x9d4>
 800a1e2:	2a00      	cmp	r2, #0
 800a1e4:	ddec      	ble.n	800a1c0 <_dtoa_r+0x970>
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	9304      	str	r3, [sp, #16]
 800a1ee:	f000 fe8b 	bl	800af08 <__lshift>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4605      	mov	r5, r0
 800a1f6:	f000 fef7 	bl	800afe8 <__mcmp>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	dc02      	bgt.n	800a206 <_dtoa_r+0x9b6>
 800a200:	d1de      	bne.n	800a1c0 <_dtoa_r+0x970>
 800a202:	07da      	lsls	r2, r3, #31
 800a204:	d5dc      	bpl.n	800a1c0 <_dtoa_r+0x970>
 800a206:	2b39      	cmp	r3, #57	; 0x39
 800a208:	d1d8      	bne.n	800a1bc <_dtoa_r+0x96c>
 800a20a:	9a02      	ldr	r2, [sp, #8]
 800a20c:	2339      	movs	r3, #57	; 0x39
 800a20e:	7013      	strb	r3, [r2, #0]
 800a210:	4643      	mov	r3, r8
 800a212:	4698      	mov	r8, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a21a:	2a39      	cmp	r2, #57	; 0x39
 800a21c:	d051      	beq.n	800a2c2 <_dtoa_r+0xa72>
 800a21e:	3201      	adds	r2, #1
 800a220:	701a      	strb	r2, [r3, #0]
 800a222:	e745      	b.n	800a0b0 <_dtoa_r+0x860>
 800a224:	2a00      	cmp	r2, #0
 800a226:	dd03      	ble.n	800a230 <_dtoa_r+0x9e0>
 800a228:	2b39      	cmp	r3, #57	; 0x39
 800a22a:	d0ee      	beq.n	800a20a <_dtoa_r+0x9ba>
 800a22c:	3301      	adds	r3, #1
 800a22e:	e7c7      	b.n	800a1c0 <_dtoa_r+0x970>
 800a230:	9a04      	ldr	r2, [sp, #16]
 800a232:	9908      	ldr	r1, [sp, #32]
 800a234:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a238:	428a      	cmp	r2, r1
 800a23a:	d02b      	beq.n	800a294 <_dtoa_r+0xa44>
 800a23c:	4629      	mov	r1, r5
 800a23e:	2300      	movs	r3, #0
 800a240:	220a      	movs	r2, #10
 800a242:	4630      	mov	r0, r6
 800a244:	f000 fc66 	bl	800ab14 <__multadd>
 800a248:	45b9      	cmp	r9, r7
 800a24a:	4605      	mov	r5, r0
 800a24c:	f04f 0300 	mov.w	r3, #0
 800a250:	f04f 020a 	mov.w	r2, #10
 800a254:	4649      	mov	r1, r9
 800a256:	4630      	mov	r0, r6
 800a258:	d107      	bne.n	800a26a <_dtoa_r+0xa1a>
 800a25a:	f000 fc5b 	bl	800ab14 <__multadd>
 800a25e:	4681      	mov	r9, r0
 800a260:	4607      	mov	r7, r0
 800a262:	9b04      	ldr	r3, [sp, #16]
 800a264:	3301      	adds	r3, #1
 800a266:	9304      	str	r3, [sp, #16]
 800a268:	e774      	b.n	800a154 <_dtoa_r+0x904>
 800a26a:	f000 fc53 	bl	800ab14 <__multadd>
 800a26e:	4639      	mov	r1, r7
 800a270:	4681      	mov	r9, r0
 800a272:	2300      	movs	r3, #0
 800a274:	220a      	movs	r2, #10
 800a276:	4630      	mov	r0, r6
 800a278:	f000 fc4c 	bl	800ab14 <__multadd>
 800a27c:	4607      	mov	r7, r0
 800a27e:	e7f0      	b.n	800a262 <_dtoa_r+0xa12>
 800a280:	f1ba 0f00 	cmp.w	sl, #0
 800a284:	9a01      	ldr	r2, [sp, #4]
 800a286:	bfcc      	ite	gt
 800a288:	46d0      	movgt	r8, sl
 800a28a:	f04f 0801 	movle.w	r8, #1
 800a28e:	4490      	add	r8, r2
 800a290:	f04f 0900 	mov.w	r9, #0
 800a294:	4629      	mov	r1, r5
 800a296:	2201      	movs	r2, #1
 800a298:	4630      	mov	r0, r6
 800a29a:	9302      	str	r3, [sp, #8]
 800a29c:	f000 fe34 	bl	800af08 <__lshift>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	f000 fea0 	bl	800afe8 <__mcmp>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	dcb1      	bgt.n	800a210 <_dtoa_r+0x9c0>
 800a2ac:	d102      	bne.n	800a2b4 <_dtoa_r+0xa64>
 800a2ae:	9b02      	ldr	r3, [sp, #8]
 800a2b0:	07db      	lsls	r3, r3, #31
 800a2b2:	d4ad      	bmi.n	800a210 <_dtoa_r+0x9c0>
 800a2b4:	4643      	mov	r3, r8
 800a2b6:	4698      	mov	r8, r3
 800a2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2bc:	2a30      	cmp	r2, #48	; 0x30
 800a2be:	d0fa      	beq.n	800a2b6 <_dtoa_r+0xa66>
 800a2c0:	e6f6      	b.n	800a0b0 <_dtoa_r+0x860>
 800a2c2:	9a01      	ldr	r2, [sp, #4]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d1a4      	bne.n	800a212 <_dtoa_r+0x9c2>
 800a2c8:	f10b 0b01 	add.w	fp, fp, #1
 800a2cc:	2331      	movs	r3, #49	; 0x31
 800a2ce:	e778      	b.n	800a1c2 <_dtoa_r+0x972>
 800a2d0:	4b14      	ldr	r3, [pc, #80]	; (800a324 <_dtoa_r+0xad4>)
 800a2d2:	f7ff bb27 	b.w	8009924 <_dtoa_r+0xd4>
 800a2d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f47f ab03 	bne.w	80098e4 <_dtoa_r+0x94>
 800a2de:	4b12      	ldr	r3, [pc, #72]	; (800a328 <_dtoa_r+0xad8>)
 800a2e0:	f7ff bb20 	b.w	8009924 <_dtoa_r+0xd4>
 800a2e4:	f1ba 0f00 	cmp.w	sl, #0
 800a2e8:	dc03      	bgt.n	800a2f2 <_dtoa_r+0xaa2>
 800a2ea:	9b06      	ldr	r3, [sp, #24]
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	f73f aec7 	bgt.w	800a080 <_dtoa_r+0x830>
 800a2f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7ff fa1d 	bl	8009738 <quorem>
 800a2fe:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a302:	f808 3b01 	strb.w	r3, [r8], #1
 800a306:	9a01      	ldr	r2, [sp, #4]
 800a308:	eba8 0202 	sub.w	r2, r8, r2
 800a30c:	4592      	cmp	sl, r2
 800a30e:	ddb7      	ble.n	800a280 <_dtoa_r+0xa30>
 800a310:	4629      	mov	r1, r5
 800a312:	2300      	movs	r3, #0
 800a314:	220a      	movs	r2, #10
 800a316:	4630      	mov	r0, r6
 800a318:	f000 fbfc 	bl	800ab14 <__multadd>
 800a31c:	4605      	mov	r5, r0
 800a31e:	e7ea      	b.n	800a2f6 <_dtoa_r+0xaa6>
 800a320:	0800cbb8 	.word	0x0800cbb8
 800a324:	0800c9b8 	.word	0x0800c9b8
 800a328:	0800cb39 	.word	0x0800cb39

0800a32c <rshift>:
 800a32c:	6903      	ldr	r3, [r0, #16]
 800a32e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a332:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a336:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a33a:	f100 0414 	add.w	r4, r0, #20
 800a33e:	dd45      	ble.n	800a3cc <rshift+0xa0>
 800a340:	f011 011f 	ands.w	r1, r1, #31
 800a344:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a348:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a34c:	d10c      	bne.n	800a368 <rshift+0x3c>
 800a34e:	f100 0710 	add.w	r7, r0, #16
 800a352:	4629      	mov	r1, r5
 800a354:	42b1      	cmp	r1, r6
 800a356:	d334      	bcc.n	800a3c2 <rshift+0x96>
 800a358:	1a9b      	subs	r3, r3, r2
 800a35a:	009b      	lsls	r3, r3, #2
 800a35c:	1eea      	subs	r2, r5, #3
 800a35e:	4296      	cmp	r6, r2
 800a360:	bf38      	it	cc
 800a362:	2300      	movcc	r3, #0
 800a364:	4423      	add	r3, r4
 800a366:	e015      	b.n	800a394 <rshift+0x68>
 800a368:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a36c:	f1c1 0820 	rsb	r8, r1, #32
 800a370:	40cf      	lsrs	r7, r1
 800a372:	f105 0e04 	add.w	lr, r5, #4
 800a376:	46a1      	mov	r9, r4
 800a378:	4576      	cmp	r6, lr
 800a37a:	46f4      	mov	ip, lr
 800a37c:	d815      	bhi.n	800a3aa <rshift+0x7e>
 800a37e:	1a9a      	subs	r2, r3, r2
 800a380:	0092      	lsls	r2, r2, #2
 800a382:	3a04      	subs	r2, #4
 800a384:	3501      	adds	r5, #1
 800a386:	42ae      	cmp	r6, r5
 800a388:	bf38      	it	cc
 800a38a:	2200      	movcc	r2, #0
 800a38c:	18a3      	adds	r3, r4, r2
 800a38e:	50a7      	str	r7, [r4, r2]
 800a390:	b107      	cbz	r7, 800a394 <rshift+0x68>
 800a392:	3304      	adds	r3, #4
 800a394:	1b1a      	subs	r2, r3, r4
 800a396:	42a3      	cmp	r3, r4
 800a398:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a39c:	bf08      	it	eq
 800a39e:	2300      	moveq	r3, #0
 800a3a0:	6102      	str	r2, [r0, #16]
 800a3a2:	bf08      	it	eq
 800a3a4:	6143      	streq	r3, [r0, #20]
 800a3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3aa:	f8dc c000 	ldr.w	ip, [ip]
 800a3ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3b2:	ea4c 0707 	orr.w	r7, ip, r7
 800a3b6:	f849 7b04 	str.w	r7, [r9], #4
 800a3ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3be:	40cf      	lsrs	r7, r1
 800a3c0:	e7da      	b.n	800a378 <rshift+0x4c>
 800a3c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3ca:	e7c3      	b.n	800a354 <rshift+0x28>
 800a3cc:	4623      	mov	r3, r4
 800a3ce:	e7e1      	b.n	800a394 <rshift+0x68>

0800a3d0 <__hexdig_fun>:
 800a3d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3d4:	2b09      	cmp	r3, #9
 800a3d6:	d802      	bhi.n	800a3de <__hexdig_fun+0xe>
 800a3d8:	3820      	subs	r0, #32
 800a3da:	b2c0      	uxtb	r0, r0
 800a3dc:	4770      	bx	lr
 800a3de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	d801      	bhi.n	800a3ea <__hexdig_fun+0x1a>
 800a3e6:	3847      	subs	r0, #71	; 0x47
 800a3e8:	e7f7      	b.n	800a3da <__hexdig_fun+0xa>
 800a3ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3ee:	2b05      	cmp	r3, #5
 800a3f0:	d801      	bhi.n	800a3f6 <__hexdig_fun+0x26>
 800a3f2:	3827      	subs	r0, #39	; 0x27
 800a3f4:	e7f1      	b.n	800a3da <__hexdig_fun+0xa>
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	4770      	bx	lr
	...

0800a3fc <__gethex>:
 800a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a400:	ed2d 8b02 	vpush	{d8}
 800a404:	b089      	sub	sp, #36	; 0x24
 800a406:	ee08 0a10 	vmov	s16, r0
 800a40a:	9304      	str	r3, [sp, #16]
 800a40c:	4bb4      	ldr	r3, [pc, #720]	; (800a6e0 <__gethex+0x2e4>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	4618      	mov	r0, r3
 800a414:	468b      	mov	fp, r1
 800a416:	4690      	mov	r8, r2
 800a418:	f7f5 ff12 	bl	8000240 <strlen>
 800a41c:	9b01      	ldr	r3, [sp, #4]
 800a41e:	f8db 2000 	ldr.w	r2, [fp]
 800a422:	4403      	add	r3, r0
 800a424:	4682      	mov	sl, r0
 800a426:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	1c93      	adds	r3, r2, #2
 800a42e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a432:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a436:	32fe      	adds	r2, #254	; 0xfe
 800a438:	18d1      	adds	r1, r2, r3
 800a43a:	461f      	mov	r7, r3
 800a43c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a440:	9100      	str	r1, [sp, #0]
 800a442:	2830      	cmp	r0, #48	; 0x30
 800a444:	d0f8      	beq.n	800a438 <__gethex+0x3c>
 800a446:	f7ff ffc3 	bl	800a3d0 <__hexdig_fun>
 800a44a:	4604      	mov	r4, r0
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d13a      	bne.n	800a4c6 <__gethex+0xca>
 800a450:	9901      	ldr	r1, [sp, #4]
 800a452:	4652      	mov	r2, sl
 800a454:	4638      	mov	r0, r7
 800a456:	f001 f933 	bl	800b6c0 <strncmp>
 800a45a:	4605      	mov	r5, r0
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d168      	bne.n	800a532 <__gethex+0x136>
 800a460:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a464:	eb07 060a 	add.w	r6, r7, sl
 800a468:	f7ff ffb2 	bl	800a3d0 <__hexdig_fun>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d062      	beq.n	800a536 <__gethex+0x13a>
 800a470:	4633      	mov	r3, r6
 800a472:	7818      	ldrb	r0, [r3, #0]
 800a474:	2830      	cmp	r0, #48	; 0x30
 800a476:	461f      	mov	r7, r3
 800a478:	f103 0301 	add.w	r3, r3, #1
 800a47c:	d0f9      	beq.n	800a472 <__gethex+0x76>
 800a47e:	f7ff ffa7 	bl	800a3d0 <__hexdig_fun>
 800a482:	2301      	movs	r3, #1
 800a484:	fab0 f480 	clz	r4, r0
 800a488:	0964      	lsrs	r4, r4, #5
 800a48a:	4635      	mov	r5, r6
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	463a      	mov	r2, r7
 800a490:	4616      	mov	r6, r2
 800a492:	3201      	adds	r2, #1
 800a494:	7830      	ldrb	r0, [r6, #0]
 800a496:	f7ff ff9b 	bl	800a3d0 <__hexdig_fun>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d1f8      	bne.n	800a490 <__gethex+0x94>
 800a49e:	9901      	ldr	r1, [sp, #4]
 800a4a0:	4652      	mov	r2, sl
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f001 f90c 	bl	800b6c0 <strncmp>
 800a4a8:	b980      	cbnz	r0, 800a4cc <__gethex+0xd0>
 800a4aa:	b94d      	cbnz	r5, 800a4c0 <__gethex+0xc4>
 800a4ac:	eb06 050a 	add.w	r5, r6, sl
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4616      	mov	r6, r2
 800a4b4:	3201      	adds	r2, #1
 800a4b6:	7830      	ldrb	r0, [r6, #0]
 800a4b8:	f7ff ff8a 	bl	800a3d0 <__hexdig_fun>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d1f8      	bne.n	800a4b2 <__gethex+0xb6>
 800a4c0:	1bad      	subs	r5, r5, r6
 800a4c2:	00ad      	lsls	r5, r5, #2
 800a4c4:	e004      	b.n	800a4d0 <__gethex+0xd4>
 800a4c6:	2400      	movs	r4, #0
 800a4c8:	4625      	mov	r5, r4
 800a4ca:	e7e0      	b.n	800a48e <__gethex+0x92>
 800a4cc:	2d00      	cmp	r5, #0
 800a4ce:	d1f7      	bne.n	800a4c0 <__gethex+0xc4>
 800a4d0:	7833      	ldrb	r3, [r6, #0]
 800a4d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4d6:	2b50      	cmp	r3, #80	; 0x50
 800a4d8:	d13b      	bne.n	800a552 <__gethex+0x156>
 800a4da:	7873      	ldrb	r3, [r6, #1]
 800a4dc:	2b2b      	cmp	r3, #43	; 0x2b
 800a4de:	d02c      	beq.n	800a53a <__gethex+0x13e>
 800a4e0:	2b2d      	cmp	r3, #45	; 0x2d
 800a4e2:	d02e      	beq.n	800a542 <__gethex+0x146>
 800a4e4:	1c71      	adds	r1, r6, #1
 800a4e6:	f04f 0900 	mov.w	r9, #0
 800a4ea:	7808      	ldrb	r0, [r1, #0]
 800a4ec:	f7ff ff70 	bl	800a3d0 <__hexdig_fun>
 800a4f0:	1e43      	subs	r3, r0, #1
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b18      	cmp	r3, #24
 800a4f6:	d82c      	bhi.n	800a552 <__gethex+0x156>
 800a4f8:	f1a0 0210 	sub.w	r2, r0, #16
 800a4fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a500:	f7ff ff66 	bl	800a3d0 <__hexdig_fun>
 800a504:	1e43      	subs	r3, r0, #1
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b18      	cmp	r3, #24
 800a50a:	d91d      	bls.n	800a548 <__gethex+0x14c>
 800a50c:	f1b9 0f00 	cmp.w	r9, #0
 800a510:	d000      	beq.n	800a514 <__gethex+0x118>
 800a512:	4252      	negs	r2, r2
 800a514:	4415      	add	r5, r2
 800a516:	f8cb 1000 	str.w	r1, [fp]
 800a51a:	b1e4      	cbz	r4, 800a556 <__gethex+0x15a>
 800a51c:	9b00      	ldr	r3, [sp, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bf14      	ite	ne
 800a522:	2700      	movne	r7, #0
 800a524:	2706      	moveq	r7, #6
 800a526:	4638      	mov	r0, r7
 800a528:	b009      	add	sp, #36	; 0x24
 800a52a:	ecbd 8b02 	vpop	{d8}
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	463e      	mov	r6, r7
 800a534:	4625      	mov	r5, r4
 800a536:	2401      	movs	r4, #1
 800a538:	e7ca      	b.n	800a4d0 <__gethex+0xd4>
 800a53a:	f04f 0900 	mov.w	r9, #0
 800a53e:	1cb1      	adds	r1, r6, #2
 800a540:	e7d3      	b.n	800a4ea <__gethex+0xee>
 800a542:	f04f 0901 	mov.w	r9, #1
 800a546:	e7fa      	b.n	800a53e <__gethex+0x142>
 800a548:	230a      	movs	r3, #10
 800a54a:	fb03 0202 	mla	r2, r3, r2, r0
 800a54e:	3a10      	subs	r2, #16
 800a550:	e7d4      	b.n	800a4fc <__gethex+0x100>
 800a552:	4631      	mov	r1, r6
 800a554:	e7df      	b.n	800a516 <__gethex+0x11a>
 800a556:	1bf3      	subs	r3, r6, r7
 800a558:	3b01      	subs	r3, #1
 800a55a:	4621      	mov	r1, r4
 800a55c:	2b07      	cmp	r3, #7
 800a55e:	dc0b      	bgt.n	800a578 <__gethex+0x17c>
 800a560:	ee18 0a10 	vmov	r0, s16
 800a564:	f000 fa74 	bl	800aa50 <_Balloc>
 800a568:	4604      	mov	r4, r0
 800a56a:	b940      	cbnz	r0, 800a57e <__gethex+0x182>
 800a56c:	4b5d      	ldr	r3, [pc, #372]	; (800a6e4 <__gethex+0x2e8>)
 800a56e:	4602      	mov	r2, r0
 800a570:	21de      	movs	r1, #222	; 0xde
 800a572:	485d      	ldr	r0, [pc, #372]	; (800a6e8 <__gethex+0x2ec>)
 800a574:	f001 f8c6 	bl	800b704 <__assert_func>
 800a578:	3101      	adds	r1, #1
 800a57a:	105b      	asrs	r3, r3, #1
 800a57c:	e7ee      	b.n	800a55c <__gethex+0x160>
 800a57e:	f100 0914 	add.w	r9, r0, #20
 800a582:	f04f 0b00 	mov.w	fp, #0
 800a586:	f1ca 0301 	rsb	r3, sl, #1
 800a58a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a58e:	f8cd b000 	str.w	fp, [sp]
 800a592:	9306      	str	r3, [sp, #24]
 800a594:	42b7      	cmp	r7, r6
 800a596:	d340      	bcc.n	800a61a <__gethex+0x21e>
 800a598:	9802      	ldr	r0, [sp, #8]
 800a59a:	9b00      	ldr	r3, [sp, #0]
 800a59c:	f840 3b04 	str.w	r3, [r0], #4
 800a5a0:	eba0 0009 	sub.w	r0, r0, r9
 800a5a4:	1080      	asrs	r0, r0, #2
 800a5a6:	0146      	lsls	r6, r0, #5
 800a5a8:	6120      	str	r0, [r4, #16]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fb42 	bl	800ac34 <__hi0bits>
 800a5b0:	1a30      	subs	r0, r6, r0
 800a5b2:	f8d8 6000 	ldr.w	r6, [r8]
 800a5b6:	42b0      	cmp	r0, r6
 800a5b8:	dd63      	ble.n	800a682 <__gethex+0x286>
 800a5ba:	1b87      	subs	r7, r0, r6
 800a5bc:	4639      	mov	r1, r7
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f000 fee3 	bl	800b38a <__any_on>
 800a5c4:	4682      	mov	sl, r0
 800a5c6:	b1a8      	cbz	r0, 800a5f4 <__gethex+0x1f8>
 800a5c8:	1e7b      	subs	r3, r7, #1
 800a5ca:	1159      	asrs	r1, r3, #5
 800a5cc:	f003 021f 	and.w	r2, r3, #31
 800a5d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5d4:	f04f 0a01 	mov.w	sl, #1
 800a5d8:	fa0a f202 	lsl.w	r2, sl, r2
 800a5dc:	420a      	tst	r2, r1
 800a5de:	d009      	beq.n	800a5f4 <__gethex+0x1f8>
 800a5e0:	4553      	cmp	r3, sl
 800a5e2:	dd05      	ble.n	800a5f0 <__gethex+0x1f4>
 800a5e4:	1eb9      	subs	r1, r7, #2
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f000 fecf 	bl	800b38a <__any_on>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d145      	bne.n	800a67c <__gethex+0x280>
 800a5f0:	f04f 0a02 	mov.w	sl, #2
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f7ff fe98 	bl	800a32c <rshift>
 800a5fc:	443d      	add	r5, r7
 800a5fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a602:	42ab      	cmp	r3, r5
 800a604:	da4c      	bge.n	800a6a0 <__gethex+0x2a4>
 800a606:	ee18 0a10 	vmov	r0, s16
 800a60a:	4621      	mov	r1, r4
 800a60c:	f000 fa60 	bl	800aad0 <_Bfree>
 800a610:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a612:	2300      	movs	r3, #0
 800a614:	6013      	str	r3, [r2, #0]
 800a616:	27a3      	movs	r7, #163	; 0xa3
 800a618:	e785      	b.n	800a526 <__gethex+0x12a>
 800a61a:	1e73      	subs	r3, r6, #1
 800a61c:	9a05      	ldr	r2, [sp, #20]
 800a61e:	9303      	str	r3, [sp, #12]
 800a620:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a624:	4293      	cmp	r3, r2
 800a626:	d019      	beq.n	800a65c <__gethex+0x260>
 800a628:	f1bb 0f20 	cmp.w	fp, #32
 800a62c:	d107      	bne.n	800a63e <__gethex+0x242>
 800a62e:	9b02      	ldr	r3, [sp, #8]
 800a630:	9a00      	ldr	r2, [sp, #0]
 800a632:	f843 2b04 	str.w	r2, [r3], #4
 800a636:	9302      	str	r3, [sp, #8]
 800a638:	2300      	movs	r3, #0
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	469b      	mov	fp, r3
 800a63e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a642:	f7ff fec5 	bl	800a3d0 <__hexdig_fun>
 800a646:	9b00      	ldr	r3, [sp, #0]
 800a648:	f000 000f 	and.w	r0, r0, #15
 800a64c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a650:	4303      	orrs	r3, r0
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	f10b 0b04 	add.w	fp, fp, #4
 800a658:	9b03      	ldr	r3, [sp, #12]
 800a65a:	e00d      	b.n	800a678 <__gethex+0x27c>
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	9a06      	ldr	r2, [sp, #24]
 800a660:	4413      	add	r3, r2
 800a662:	42bb      	cmp	r3, r7
 800a664:	d3e0      	bcc.n	800a628 <__gethex+0x22c>
 800a666:	4618      	mov	r0, r3
 800a668:	9901      	ldr	r1, [sp, #4]
 800a66a:	9307      	str	r3, [sp, #28]
 800a66c:	4652      	mov	r2, sl
 800a66e:	f001 f827 	bl	800b6c0 <strncmp>
 800a672:	9b07      	ldr	r3, [sp, #28]
 800a674:	2800      	cmp	r0, #0
 800a676:	d1d7      	bne.n	800a628 <__gethex+0x22c>
 800a678:	461e      	mov	r6, r3
 800a67a:	e78b      	b.n	800a594 <__gethex+0x198>
 800a67c:	f04f 0a03 	mov.w	sl, #3
 800a680:	e7b8      	b.n	800a5f4 <__gethex+0x1f8>
 800a682:	da0a      	bge.n	800a69a <__gethex+0x29e>
 800a684:	1a37      	subs	r7, r6, r0
 800a686:	4621      	mov	r1, r4
 800a688:	ee18 0a10 	vmov	r0, s16
 800a68c:	463a      	mov	r2, r7
 800a68e:	f000 fc3b 	bl	800af08 <__lshift>
 800a692:	1bed      	subs	r5, r5, r7
 800a694:	4604      	mov	r4, r0
 800a696:	f100 0914 	add.w	r9, r0, #20
 800a69a:	f04f 0a00 	mov.w	sl, #0
 800a69e:	e7ae      	b.n	800a5fe <__gethex+0x202>
 800a6a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a6a4:	42a8      	cmp	r0, r5
 800a6a6:	dd72      	ble.n	800a78e <__gethex+0x392>
 800a6a8:	1b45      	subs	r5, r0, r5
 800a6aa:	42ae      	cmp	r6, r5
 800a6ac:	dc36      	bgt.n	800a71c <__gethex+0x320>
 800a6ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d02a      	beq.n	800a70c <__gethex+0x310>
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d02c      	beq.n	800a714 <__gethex+0x318>
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d11c      	bne.n	800a6f8 <__gethex+0x2fc>
 800a6be:	42ae      	cmp	r6, r5
 800a6c0:	d11a      	bne.n	800a6f8 <__gethex+0x2fc>
 800a6c2:	2e01      	cmp	r6, #1
 800a6c4:	d112      	bne.n	800a6ec <__gethex+0x2f0>
 800a6c6:	9a04      	ldr	r2, [sp, #16]
 800a6c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6cc:	6013      	str	r3, [r2, #0]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	f8c9 3000 	str.w	r3, [r9]
 800a6d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6d8:	2762      	movs	r7, #98	; 0x62
 800a6da:	601c      	str	r4, [r3, #0]
 800a6dc:	e723      	b.n	800a526 <__gethex+0x12a>
 800a6de:	bf00      	nop
 800a6e0:	0800cc30 	.word	0x0800cc30
 800a6e4:	0800cbb8 	.word	0x0800cbb8
 800a6e8:	0800cbc9 	.word	0x0800cbc9
 800a6ec:	1e71      	subs	r1, r6, #1
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 fe4b 	bl	800b38a <__any_on>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1e6      	bne.n	800a6c6 <__gethex+0x2ca>
 800a6f8:	ee18 0a10 	vmov	r0, s16
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f000 f9e7 	bl	800aad0 <_Bfree>
 800a702:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a704:	2300      	movs	r3, #0
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	2750      	movs	r7, #80	; 0x50
 800a70a:	e70c      	b.n	800a526 <__gethex+0x12a>
 800a70c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f2      	bne.n	800a6f8 <__gethex+0x2fc>
 800a712:	e7d8      	b.n	800a6c6 <__gethex+0x2ca>
 800a714:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1d5      	bne.n	800a6c6 <__gethex+0x2ca>
 800a71a:	e7ed      	b.n	800a6f8 <__gethex+0x2fc>
 800a71c:	1e6f      	subs	r7, r5, #1
 800a71e:	f1ba 0f00 	cmp.w	sl, #0
 800a722:	d131      	bne.n	800a788 <__gethex+0x38c>
 800a724:	b127      	cbz	r7, 800a730 <__gethex+0x334>
 800a726:	4639      	mov	r1, r7
 800a728:	4620      	mov	r0, r4
 800a72a:	f000 fe2e 	bl	800b38a <__any_on>
 800a72e:	4682      	mov	sl, r0
 800a730:	117b      	asrs	r3, r7, #5
 800a732:	2101      	movs	r1, #1
 800a734:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a738:	f007 071f 	and.w	r7, r7, #31
 800a73c:	fa01 f707 	lsl.w	r7, r1, r7
 800a740:	421f      	tst	r7, r3
 800a742:	4629      	mov	r1, r5
 800a744:	4620      	mov	r0, r4
 800a746:	bf18      	it	ne
 800a748:	f04a 0a02 	orrne.w	sl, sl, #2
 800a74c:	1b76      	subs	r6, r6, r5
 800a74e:	f7ff fded 	bl	800a32c <rshift>
 800a752:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a756:	2702      	movs	r7, #2
 800a758:	f1ba 0f00 	cmp.w	sl, #0
 800a75c:	d048      	beq.n	800a7f0 <__gethex+0x3f4>
 800a75e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d015      	beq.n	800a792 <__gethex+0x396>
 800a766:	2b03      	cmp	r3, #3
 800a768:	d017      	beq.n	800a79a <__gethex+0x39e>
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d109      	bne.n	800a782 <__gethex+0x386>
 800a76e:	f01a 0f02 	tst.w	sl, #2
 800a772:	d006      	beq.n	800a782 <__gethex+0x386>
 800a774:	f8d9 0000 	ldr.w	r0, [r9]
 800a778:	ea4a 0a00 	orr.w	sl, sl, r0
 800a77c:	f01a 0f01 	tst.w	sl, #1
 800a780:	d10e      	bne.n	800a7a0 <__gethex+0x3a4>
 800a782:	f047 0710 	orr.w	r7, r7, #16
 800a786:	e033      	b.n	800a7f0 <__gethex+0x3f4>
 800a788:	f04f 0a01 	mov.w	sl, #1
 800a78c:	e7d0      	b.n	800a730 <__gethex+0x334>
 800a78e:	2701      	movs	r7, #1
 800a790:	e7e2      	b.n	800a758 <__gethex+0x35c>
 800a792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a794:	f1c3 0301 	rsb	r3, r3, #1
 800a798:	9315      	str	r3, [sp, #84]	; 0x54
 800a79a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d0f0      	beq.n	800a782 <__gethex+0x386>
 800a7a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7a4:	f104 0314 	add.w	r3, r4, #20
 800a7a8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7ac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7b0:	f04f 0c00 	mov.w	ip, #0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ba:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7be:	d01c      	beq.n	800a7fa <__gethex+0x3fe>
 800a7c0:	3201      	adds	r2, #1
 800a7c2:	6002      	str	r2, [r0, #0]
 800a7c4:	2f02      	cmp	r7, #2
 800a7c6:	f104 0314 	add.w	r3, r4, #20
 800a7ca:	d13f      	bne.n	800a84c <__gethex+0x450>
 800a7cc:	f8d8 2000 	ldr.w	r2, [r8]
 800a7d0:	3a01      	subs	r2, #1
 800a7d2:	42b2      	cmp	r2, r6
 800a7d4:	d10a      	bne.n	800a7ec <__gethex+0x3f0>
 800a7d6:	1171      	asrs	r1, r6, #5
 800a7d8:	2201      	movs	r2, #1
 800a7da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7de:	f006 061f 	and.w	r6, r6, #31
 800a7e2:	fa02 f606 	lsl.w	r6, r2, r6
 800a7e6:	421e      	tst	r6, r3
 800a7e8:	bf18      	it	ne
 800a7ea:	4617      	movne	r7, r2
 800a7ec:	f047 0720 	orr.w	r7, r7, #32
 800a7f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7f2:	601c      	str	r4, [r3, #0]
 800a7f4:	9b04      	ldr	r3, [sp, #16]
 800a7f6:	601d      	str	r5, [r3, #0]
 800a7f8:	e695      	b.n	800a526 <__gethex+0x12a>
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a800:	d8d8      	bhi.n	800a7b4 <__gethex+0x3b8>
 800a802:	68a3      	ldr	r3, [r4, #8]
 800a804:	459b      	cmp	fp, r3
 800a806:	db19      	blt.n	800a83c <__gethex+0x440>
 800a808:	6861      	ldr	r1, [r4, #4]
 800a80a:	ee18 0a10 	vmov	r0, s16
 800a80e:	3101      	adds	r1, #1
 800a810:	f000 f91e 	bl	800aa50 <_Balloc>
 800a814:	4681      	mov	r9, r0
 800a816:	b918      	cbnz	r0, 800a820 <__gethex+0x424>
 800a818:	4b1a      	ldr	r3, [pc, #104]	; (800a884 <__gethex+0x488>)
 800a81a:	4602      	mov	r2, r0
 800a81c:	2184      	movs	r1, #132	; 0x84
 800a81e:	e6a8      	b.n	800a572 <__gethex+0x176>
 800a820:	6922      	ldr	r2, [r4, #16]
 800a822:	3202      	adds	r2, #2
 800a824:	f104 010c 	add.w	r1, r4, #12
 800a828:	0092      	lsls	r2, r2, #2
 800a82a:	300c      	adds	r0, #12
 800a82c:	f7fd f9b4 	bl	8007b98 <memcpy>
 800a830:	4621      	mov	r1, r4
 800a832:	ee18 0a10 	vmov	r0, s16
 800a836:	f000 f94b 	bl	800aad0 <_Bfree>
 800a83a:	464c      	mov	r4, r9
 800a83c:	6923      	ldr	r3, [r4, #16]
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a844:	6122      	str	r2, [r4, #16]
 800a846:	2201      	movs	r2, #1
 800a848:	615a      	str	r2, [r3, #20]
 800a84a:	e7bb      	b.n	800a7c4 <__gethex+0x3c8>
 800a84c:	6922      	ldr	r2, [r4, #16]
 800a84e:	455a      	cmp	r2, fp
 800a850:	dd0b      	ble.n	800a86a <__gethex+0x46e>
 800a852:	2101      	movs	r1, #1
 800a854:	4620      	mov	r0, r4
 800a856:	f7ff fd69 	bl	800a32c <rshift>
 800a85a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a85e:	3501      	adds	r5, #1
 800a860:	42ab      	cmp	r3, r5
 800a862:	f6ff aed0 	blt.w	800a606 <__gethex+0x20a>
 800a866:	2701      	movs	r7, #1
 800a868:	e7c0      	b.n	800a7ec <__gethex+0x3f0>
 800a86a:	f016 061f 	ands.w	r6, r6, #31
 800a86e:	d0fa      	beq.n	800a866 <__gethex+0x46a>
 800a870:	4453      	add	r3, sl
 800a872:	f1c6 0620 	rsb	r6, r6, #32
 800a876:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a87a:	f000 f9db 	bl	800ac34 <__hi0bits>
 800a87e:	42b0      	cmp	r0, r6
 800a880:	dbe7      	blt.n	800a852 <__gethex+0x456>
 800a882:	e7f0      	b.n	800a866 <__gethex+0x46a>
 800a884:	0800cbb8 	.word	0x0800cbb8

0800a888 <L_shift>:
 800a888:	f1c2 0208 	rsb	r2, r2, #8
 800a88c:	0092      	lsls	r2, r2, #2
 800a88e:	b570      	push	{r4, r5, r6, lr}
 800a890:	f1c2 0620 	rsb	r6, r2, #32
 800a894:	6843      	ldr	r3, [r0, #4]
 800a896:	6804      	ldr	r4, [r0, #0]
 800a898:	fa03 f506 	lsl.w	r5, r3, r6
 800a89c:	432c      	orrs	r4, r5
 800a89e:	40d3      	lsrs	r3, r2
 800a8a0:	6004      	str	r4, [r0, #0]
 800a8a2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8a6:	4288      	cmp	r0, r1
 800a8a8:	d3f4      	bcc.n	800a894 <L_shift+0xc>
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}

0800a8ac <__match>:
 800a8ac:	b530      	push	{r4, r5, lr}
 800a8ae:	6803      	ldr	r3, [r0, #0]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8b6:	b914      	cbnz	r4, 800a8be <__match+0x12>
 800a8b8:	6003      	str	r3, [r0, #0]
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	bd30      	pop	{r4, r5, pc}
 800a8be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a8c6:	2d19      	cmp	r5, #25
 800a8c8:	bf98      	it	ls
 800a8ca:	3220      	addls	r2, #32
 800a8cc:	42a2      	cmp	r2, r4
 800a8ce:	d0f0      	beq.n	800a8b2 <__match+0x6>
 800a8d0:	2000      	movs	r0, #0
 800a8d2:	e7f3      	b.n	800a8bc <__match+0x10>

0800a8d4 <__hexnan>:
 800a8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	680b      	ldr	r3, [r1, #0]
 800a8da:	115e      	asrs	r6, r3, #5
 800a8dc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8e0:	f013 031f 	ands.w	r3, r3, #31
 800a8e4:	b087      	sub	sp, #28
 800a8e6:	bf18      	it	ne
 800a8e8:	3604      	addne	r6, #4
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	1f37      	subs	r7, r6, #4
 800a8ee:	4690      	mov	r8, r2
 800a8f0:	6802      	ldr	r2, [r0, #0]
 800a8f2:	9301      	str	r3, [sp, #4]
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8fa:	46b9      	mov	r9, r7
 800a8fc:	463c      	mov	r4, r7
 800a8fe:	9502      	str	r5, [sp, #8]
 800a900:	46ab      	mov	fp, r5
 800a902:	7851      	ldrb	r1, [r2, #1]
 800a904:	1c53      	adds	r3, r2, #1
 800a906:	9303      	str	r3, [sp, #12]
 800a908:	b341      	cbz	r1, 800a95c <__hexnan+0x88>
 800a90a:	4608      	mov	r0, r1
 800a90c:	9205      	str	r2, [sp, #20]
 800a90e:	9104      	str	r1, [sp, #16]
 800a910:	f7ff fd5e 	bl	800a3d0 <__hexdig_fun>
 800a914:	2800      	cmp	r0, #0
 800a916:	d14f      	bne.n	800a9b8 <__hexnan+0xe4>
 800a918:	9904      	ldr	r1, [sp, #16]
 800a91a:	9a05      	ldr	r2, [sp, #20]
 800a91c:	2920      	cmp	r1, #32
 800a91e:	d818      	bhi.n	800a952 <__hexnan+0x7e>
 800a920:	9b02      	ldr	r3, [sp, #8]
 800a922:	459b      	cmp	fp, r3
 800a924:	dd13      	ble.n	800a94e <__hexnan+0x7a>
 800a926:	454c      	cmp	r4, r9
 800a928:	d206      	bcs.n	800a938 <__hexnan+0x64>
 800a92a:	2d07      	cmp	r5, #7
 800a92c:	dc04      	bgt.n	800a938 <__hexnan+0x64>
 800a92e:	462a      	mov	r2, r5
 800a930:	4649      	mov	r1, r9
 800a932:	4620      	mov	r0, r4
 800a934:	f7ff ffa8 	bl	800a888 <L_shift>
 800a938:	4544      	cmp	r4, r8
 800a93a:	d950      	bls.n	800a9de <__hexnan+0x10a>
 800a93c:	2300      	movs	r3, #0
 800a93e:	f1a4 0904 	sub.w	r9, r4, #4
 800a942:	f844 3c04 	str.w	r3, [r4, #-4]
 800a946:	f8cd b008 	str.w	fp, [sp, #8]
 800a94a:	464c      	mov	r4, r9
 800a94c:	461d      	mov	r5, r3
 800a94e:	9a03      	ldr	r2, [sp, #12]
 800a950:	e7d7      	b.n	800a902 <__hexnan+0x2e>
 800a952:	2929      	cmp	r1, #41	; 0x29
 800a954:	d156      	bne.n	800aa04 <__hexnan+0x130>
 800a956:	3202      	adds	r2, #2
 800a958:	f8ca 2000 	str.w	r2, [sl]
 800a95c:	f1bb 0f00 	cmp.w	fp, #0
 800a960:	d050      	beq.n	800aa04 <__hexnan+0x130>
 800a962:	454c      	cmp	r4, r9
 800a964:	d206      	bcs.n	800a974 <__hexnan+0xa0>
 800a966:	2d07      	cmp	r5, #7
 800a968:	dc04      	bgt.n	800a974 <__hexnan+0xa0>
 800a96a:	462a      	mov	r2, r5
 800a96c:	4649      	mov	r1, r9
 800a96e:	4620      	mov	r0, r4
 800a970:	f7ff ff8a 	bl	800a888 <L_shift>
 800a974:	4544      	cmp	r4, r8
 800a976:	d934      	bls.n	800a9e2 <__hexnan+0x10e>
 800a978:	f1a8 0204 	sub.w	r2, r8, #4
 800a97c:	4623      	mov	r3, r4
 800a97e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a982:	f842 1f04 	str.w	r1, [r2, #4]!
 800a986:	429f      	cmp	r7, r3
 800a988:	d2f9      	bcs.n	800a97e <__hexnan+0xaa>
 800a98a:	1b3b      	subs	r3, r7, r4
 800a98c:	f023 0303 	bic.w	r3, r3, #3
 800a990:	3304      	adds	r3, #4
 800a992:	3401      	adds	r4, #1
 800a994:	3e03      	subs	r6, #3
 800a996:	42b4      	cmp	r4, r6
 800a998:	bf88      	it	hi
 800a99a:	2304      	movhi	r3, #4
 800a99c:	4443      	add	r3, r8
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f843 2b04 	str.w	r2, [r3], #4
 800a9a4:	429f      	cmp	r7, r3
 800a9a6:	d2fb      	bcs.n	800a9a0 <__hexnan+0xcc>
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	b91b      	cbnz	r3, 800a9b4 <__hexnan+0xe0>
 800a9ac:	4547      	cmp	r7, r8
 800a9ae:	d127      	bne.n	800aa00 <__hexnan+0x12c>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	603b      	str	r3, [r7, #0]
 800a9b4:	2005      	movs	r0, #5
 800a9b6:	e026      	b.n	800aa06 <__hexnan+0x132>
 800a9b8:	3501      	adds	r5, #1
 800a9ba:	2d08      	cmp	r5, #8
 800a9bc:	f10b 0b01 	add.w	fp, fp, #1
 800a9c0:	dd06      	ble.n	800a9d0 <__hexnan+0xfc>
 800a9c2:	4544      	cmp	r4, r8
 800a9c4:	d9c3      	bls.n	800a94e <__hexnan+0x7a>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9cc:	2501      	movs	r5, #1
 800a9ce:	3c04      	subs	r4, #4
 800a9d0:	6822      	ldr	r2, [r4, #0]
 800a9d2:	f000 000f 	and.w	r0, r0, #15
 800a9d6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a9da:	6022      	str	r2, [r4, #0]
 800a9dc:	e7b7      	b.n	800a94e <__hexnan+0x7a>
 800a9de:	2508      	movs	r5, #8
 800a9e0:	e7b5      	b.n	800a94e <__hexnan+0x7a>
 800a9e2:	9b01      	ldr	r3, [sp, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0df      	beq.n	800a9a8 <__hexnan+0xd4>
 800a9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ec:	f1c3 0320 	rsb	r3, r3, #32
 800a9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9f8:	401a      	ands	r2, r3
 800a9fa:	f846 2c04 	str.w	r2, [r6, #-4]
 800a9fe:	e7d3      	b.n	800a9a8 <__hexnan+0xd4>
 800aa00:	3f04      	subs	r7, #4
 800aa02:	e7d1      	b.n	800a9a8 <__hexnan+0xd4>
 800aa04:	2004      	movs	r0, #4
 800aa06:	b007      	add	sp, #28
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa0c <_localeconv_r>:
 800aa0c:	4800      	ldr	r0, [pc, #0]	; (800aa10 <_localeconv_r+0x4>)
 800aa0e:	4770      	bx	lr
 800aa10:	20000cbc 	.word	0x20000cbc

0800aa14 <__ascii_mbtowc>:
 800aa14:	b082      	sub	sp, #8
 800aa16:	b901      	cbnz	r1, 800aa1a <__ascii_mbtowc+0x6>
 800aa18:	a901      	add	r1, sp, #4
 800aa1a:	b142      	cbz	r2, 800aa2e <__ascii_mbtowc+0x1a>
 800aa1c:	b14b      	cbz	r3, 800aa32 <__ascii_mbtowc+0x1e>
 800aa1e:	7813      	ldrb	r3, [r2, #0]
 800aa20:	600b      	str	r3, [r1, #0]
 800aa22:	7812      	ldrb	r2, [r2, #0]
 800aa24:	1e10      	subs	r0, r2, #0
 800aa26:	bf18      	it	ne
 800aa28:	2001      	movne	r0, #1
 800aa2a:	b002      	add	sp, #8
 800aa2c:	4770      	bx	lr
 800aa2e:	4610      	mov	r0, r2
 800aa30:	e7fb      	b.n	800aa2a <__ascii_mbtowc+0x16>
 800aa32:	f06f 0001 	mvn.w	r0, #1
 800aa36:	e7f8      	b.n	800aa2a <__ascii_mbtowc+0x16>

0800aa38 <__malloc_lock>:
 800aa38:	4801      	ldr	r0, [pc, #4]	; (800aa40 <__malloc_lock+0x8>)
 800aa3a:	f7f7 b898 	b.w	8001b6e <__retarget_lock_acquire_recursive>
 800aa3e:	bf00      	nop
 800aa40:	20001854 	.word	0x20001854

0800aa44 <__malloc_unlock>:
 800aa44:	4801      	ldr	r0, [pc, #4]	; (800aa4c <__malloc_unlock+0x8>)
 800aa46:	f7f7 b8a6 	b.w	8001b96 <__retarget_lock_release_recursive>
 800aa4a:	bf00      	nop
 800aa4c:	20001854 	.word	0x20001854

0800aa50 <_Balloc>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa54:	4604      	mov	r4, r0
 800aa56:	460d      	mov	r5, r1
 800aa58:	b976      	cbnz	r6, 800aa78 <_Balloc+0x28>
 800aa5a:	2010      	movs	r0, #16
 800aa5c:	f7fd f894 	bl	8007b88 <malloc>
 800aa60:	4602      	mov	r2, r0
 800aa62:	6260      	str	r0, [r4, #36]	; 0x24
 800aa64:	b920      	cbnz	r0, 800aa70 <_Balloc+0x20>
 800aa66:	4b18      	ldr	r3, [pc, #96]	; (800aac8 <_Balloc+0x78>)
 800aa68:	4818      	ldr	r0, [pc, #96]	; (800aacc <_Balloc+0x7c>)
 800aa6a:	2166      	movs	r1, #102	; 0x66
 800aa6c:	f000 fe4a 	bl	800b704 <__assert_func>
 800aa70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa74:	6006      	str	r6, [r0, #0]
 800aa76:	60c6      	str	r6, [r0, #12]
 800aa78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa7a:	68f3      	ldr	r3, [r6, #12]
 800aa7c:	b183      	cbz	r3, 800aaa0 <_Balloc+0x50>
 800aa7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa86:	b9b8      	cbnz	r0, 800aab8 <_Balloc+0x68>
 800aa88:	2101      	movs	r1, #1
 800aa8a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa8e:	1d72      	adds	r2, r6, #5
 800aa90:	0092      	lsls	r2, r2, #2
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 fc9a 	bl	800b3cc <_calloc_r>
 800aa98:	b160      	cbz	r0, 800aab4 <_Balloc+0x64>
 800aa9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa9e:	e00e      	b.n	800aabe <_Balloc+0x6e>
 800aaa0:	2221      	movs	r2, #33	; 0x21
 800aaa2:	2104      	movs	r1, #4
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f000 fc91 	bl	800b3cc <_calloc_r>
 800aaaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaac:	60f0      	str	r0, [r6, #12]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e4      	bne.n	800aa7e <_Balloc+0x2e>
 800aab4:	2000      	movs	r0, #0
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
 800aab8:	6802      	ldr	r2, [r0, #0]
 800aaba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aabe:	2300      	movs	r3, #0
 800aac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aac4:	e7f7      	b.n	800aab6 <_Balloc+0x66>
 800aac6:	bf00      	nop
 800aac8:	0800cb46 	.word	0x0800cb46
 800aacc:	0800cc44 	.word	0x0800cc44

0800aad0 <_Bfree>:
 800aad0:	b570      	push	{r4, r5, r6, lr}
 800aad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aad4:	4605      	mov	r5, r0
 800aad6:	460c      	mov	r4, r1
 800aad8:	b976      	cbnz	r6, 800aaf8 <_Bfree+0x28>
 800aada:	2010      	movs	r0, #16
 800aadc:	f7fd f854 	bl	8007b88 <malloc>
 800aae0:	4602      	mov	r2, r0
 800aae2:	6268      	str	r0, [r5, #36]	; 0x24
 800aae4:	b920      	cbnz	r0, 800aaf0 <_Bfree+0x20>
 800aae6:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <_Bfree+0x3c>)
 800aae8:	4809      	ldr	r0, [pc, #36]	; (800ab10 <_Bfree+0x40>)
 800aaea:	218a      	movs	r1, #138	; 0x8a
 800aaec:	f000 fe0a 	bl	800b704 <__assert_func>
 800aaf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaf4:	6006      	str	r6, [r0, #0]
 800aaf6:	60c6      	str	r6, [r0, #12]
 800aaf8:	b13c      	cbz	r4, 800ab0a <_Bfree+0x3a>
 800aafa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aafc:	6862      	ldr	r2, [r4, #4]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab04:	6021      	str	r1, [r4, #0]
 800ab06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	0800cb46 	.word	0x0800cb46
 800ab10:	0800cc44 	.word	0x0800cc44

0800ab14 <__multadd>:
 800ab14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab18:	690d      	ldr	r5, [r1, #16]
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	461e      	mov	r6, r3
 800ab20:	f101 0c14 	add.w	ip, r1, #20
 800ab24:	2000      	movs	r0, #0
 800ab26:	f8dc 3000 	ldr.w	r3, [ip]
 800ab2a:	b299      	uxth	r1, r3
 800ab2c:	fb02 6101 	mla	r1, r2, r1, r6
 800ab30:	0c1e      	lsrs	r6, r3, #16
 800ab32:	0c0b      	lsrs	r3, r1, #16
 800ab34:	fb02 3306 	mla	r3, r2, r6, r3
 800ab38:	b289      	uxth	r1, r1
 800ab3a:	3001      	adds	r0, #1
 800ab3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab40:	4285      	cmp	r5, r0
 800ab42:	f84c 1b04 	str.w	r1, [ip], #4
 800ab46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab4a:	dcec      	bgt.n	800ab26 <__multadd+0x12>
 800ab4c:	b30e      	cbz	r6, 800ab92 <__multadd+0x7e>
 800ab4e:	68a3      	ldr	r3, [r4, #8]
 800ab50:	42ab      	cmp	r3, r5
 800ab52:	dc19      	bgt.n	800ab88 <__multadd+0x74>
 800ab54:	6861      	ldr	r1, [r4, #4]
 800ab56:	4638      	mov	r0, r7
 800ab58:	3101      	adds	r1, #1
 800ab5a:	f7ff ff79 	bl	800aa50 <_Balloc>
 800ab5e:	4680      	mov	r8, r0
 800ab60:	b928      	cbnz	r0, 800ab6e <__multadd+0x5a>
 800ab62:	4602      	mov	r2, r0
 800ab64:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <__multadd+0x84>)
 800ab66:	480d      	ldr	r0, [pc, #52]	; (800ab9c <__multadd+0x88>)
 800ab68:	21b5      	movs	r1, #181	; 0xb5
 800ab6a:	f000 fdcb 	bl	800b704 <__assert_func>
 800ab6e:	6922      	ldr	r2, [r4, #16]
 800ab70:	3202      	adds	r2, #2
 800ab72:	f104 010c 	add.w	r1, r4, #12
 800ab76:	0092      	lsls	r2, r2, #2
 800ab78:	300c      	adds	r0, #12
 800ab7a:	f7fd f80d 	bl	8007b98 <memcpy>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4638      	mov	r0, r7
 800ab82:	f7ff ffa5 	bl	800aad0 <_Bfree>
 800ab86:	4644      	mov	r4, r8
 800ab88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	615e      	str	r6, [r3, #20]
 800ab90:	6125      	str	r5, [r4, #16]
 800ab92:	4620      	mov	r0, r4
 800ab94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab98:	0800cbb8 	.word	0x0800cbb8
 800ab9c:	0800cc44 	.word	0x0800cc44

0800aba0 <__s2b>:
 800aba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba4:	460c      	mov	r4, r1
 800aba6:	4615      	mov	r5, r2
 800aba8:	461f      	mov	r7, r3
 800abaa:	2209      	movs	r2, #9
 800abac:	3308      	adds	r3, #8
 800abae:	4606      	mov	r6, r0
 800abb0:	fb93 f3f2 	sdiv	r3, r3, r2
 800abb4:	2100      	movs	r1, #0
 800abb6:	2201      	movs	r2, #1
 800abb8:	429a      	cmp	r2, r3
 800abba:	db09      	blt.n	800abd0 <__s2b+0x30>
 800abbc:	4630      	mov	r0, r6
 800abbe:	f7ff ff47 	bl	800aa50 <_Balloc>
 800abc2:	b940      	cbnz	r0, 800abd6 <__s2b+0x36>
 800abc4:	4602      	mov	r2, r0
 800abc6:	4b19      	ldr	r3, [pc, #100]	; (800ac2c <__s2b+0x8c>)
 800abc8:	4819      	ldr	r0, [pc, #100]	; (800ac30 <__s2b+0x90>)
 800abca:	21ce      	movs	r1, #206	; 0xce
 800abcc:	f000 fd9a 	bl	800b704 <__assert_func>
 800abd0:	0052      	lsls	r2, r2, #1
 800abd2:	3101      	adds	r1, #1
 800abd4:	e7f0      	b.n	800abb8 <__s2b+0x18>
 800abd6:	9b08      	ldr	r3, [sp, #32]
 800abd8:	6143      	str	r3, [r0, #20]
 800abda:	2d09      	cmp	r5, #9
 800abdc:	f04f 0301 	mov.w	r3, #1
 800abe0:	6103      	str	r3, [r0, #16]
 800abe2:	dd16      	ble.n	800ac12 <__s2b+0x72>
 800abe4:	f104 0909 	add.w	r9, r4, #9
 800abe8:	46c8      	mov	r8, r9
 800abea:	442c      	add	r4, r5
 800abec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800abf0:	4601      	mov	r1, r0
 800abf2:	3b30      	subs	r3, #48	; 0x30
 800abf4:	220a      	movs	r2, #10
 800abf6:	4630      	mov	r0, r6
 800abf8:	f7ff ff8c 	bl	800ab14 <__multadd>
 800abfc:	45a0      	cmp	r8, r4
 800abfe:	d1f5      	bne.n	800abec <__s2b+0x4c>
 800ac00:	f1a5 0408 	sub.w	r4, r5, #8
 800ac04:	444c      	add	r4, r9
 800ac06:	1b2d      	subs	r5, r5, r4
 800ac08:	1963      	adds	r3, r4, r5
 800ac0a:	42bb      	cmp	r3, r7
 800ac0c:	db04      	blt.n	800ac18 <__s2b+0x78>
 800ac0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac12:	340a      	adds	r4, #10
 800ac14:	2509      	movs	r5, #9
 800ac16:	e7f6      	b.n	800ac06 <__s2b+0x66>
 800ac18:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac1c:	4601      	mov	r1, r0
 800ac1e:	3b30      	subs	r3, #48	; 0x30
 800ac20:	220a      	movs	r2, #10
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ff76 	bl	800ab14 <__multadd>
 800ac28:	e7ee      	b.n	800ac08 <__s2b+0x68>
 800ac2a:	bf00      	nop
 800ac2c:	0800cbb8 	.word	0x0800cbb8
 800ac30:	0800cc44 	.word	0x0800cc44

0800ac34 <__hi0bits>:
 800ac34:	0c03      	lsrs	r3, r0, #16
 800ac36:	041b      	lsls	r3, r3, #16
 800ac38:	b9d3      	cbnz	r3, 800ac70 <__hi0bits+0x3c>
 800ac3a:	0400      	lsls	r0, r0, #16
 800ac3c:	2310      	movs	r3, #16
 800ac3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac42:	bf04      	itt	eq
 800ac44:	0200      	lsleq	r0, r0, #8
 800ac46:	3308      	addeq	r3, #8
 800ac48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac4c:	bf04      	itt	eq
 800ac4e:	0100      	lsleq	r0, r0, #4
 800ac50:	3304      	addeq	r3, #4
 800ac52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac56:	bf04      	itt	eq
 800ac58:	0080      	lsleq	r0, r0, #2
 800ac5a:	3302      	addeq	r3, #2
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	db05      	blt.n	800ac6c <__hi0bits+0x38>
 800ac60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac64:	f103 0301 	add.w	r3, r3, #1
 800ac68:	bf08      	it	eq
 800ac6a:	2320      	moveq	r3, #32
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	4770      	bx	lr
 800ac70:	2300      	movs	r3, #0
 800ac72:	e7e4      	b.n	800ac3e <__hi0bits+0xa>

0800ac74 <__lo0bits>:
 800ac74:	6803      	ldr	r3, [r0, #0]
 800ac76:	f013 0207 	ands.w	r2, r3, #7
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	d00b      	beq.n	800ac96 <__lo0bits+0x22>
 800ac7e:	07da      	lsls	r2, r3, #31
 800ac80:	d423      	bmi.n	800acca <__lo0bits+0x56>
 800ac82:	0798      	lsls	r0, r3, #30
 800ac84:	bf49      	itett	mi
 800ac86:	085b      	lsrmi	r3, r3, #1
 800ac88:	089b      	lsrpl	r3, r3, #2
 800ac8a:	2001      	movmi	r0, #1
 800ac8c:	600b      	strmi	r3, [r1, #0]
 800ac8e:	bf5c      	itt	pl
 800ac90:	600b      	strpl	r3, [r1, #0]
 800ac92:	2002      	movpl	r0, #2
 800ac94:	4770      	bx	lr
 800ac96:	b298      	uxth	r0, r3
 800ac98:	b9a8      	cbnz	r0, 800acc6 <__lo0bits+0x52>
 800ac9a:	0c1b      	lsrs	r3, r3, #16
 800ac9c:	2010      	movs	r0, #16
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	b90a      	cbnz	r2, 800aca6 <__lo0bits+0x32>
 800aca2:	3008      	adds	r0, #8
 800aca4:	0a1b      	lsrs	r3, r3, #8
 800aca6:	071a      	lsls	r2, r3, #28
 800aca8:	bf04      	itt	eq
 800acaa:	091b      	lsreq	r3, r3, #4
 800acac:	3004      	addeq	r0, #4
 800acae:	079a      	lsls	r2, r3, #30
 800acb0:	bf04      	itt	eq
 800acb2:	089b      	lsreq	r3, r3, #2
 800acb4:	3002      	addeq	r0, #2
 800acb6:	07da      	lsls	r2, r3, #31
 800acb8:	d403      	bmi.n	800acc2 <__lo0bits+0x4e>
 800acba:	085b      	lsrs	r3, r3, #1
 800acbc:	f100 0001 	add.w	r0, r0, #1
 800acc0:	d005      	beq.n	800acce <__lo0bits+0x5a>
 800acc2:	600b      	str	r3, [r1, #0]
 800acc4:	4770      	bx	lr
 800acc6:	4610      	mov	r0, r2
 800acc8:	e7e9      	b.n	800ac9e <__lo0bits+0x2a>
 800acca:	2000      	movs	r0, #0
 800accc:	4770      	bx	lr
 800acce:	2020      	movs	r0, #32
 800acd0:	4770      	bx	lr
	...

0800acd4 <__i2b>:
 800acd4:	b510      	push	{r4, lr}
 800acd6:	460c      	mov	r4, r1
 800acd8:	2101      	movs	r1, #1
 800acda:	f7ff feb9 	bl	800aa50 <_Balloc>
 800acde:	4602      	mov	r2, r0
 800ace0:	b928      	cbnz	r0, 800acee <__i2b+0x1a>
 800ace2:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <__i2b+0x24>)
 800ace4:	4805      	ldr	r0, [pc, #20]	; (800acfc <__i2b+0x28>)
 800ace6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800acea:	f000 fd0b 	bl	800b704 <__assert_func>
 800acee:	2301      	movs	r3, #1
 800acf0:	6144      	str	r4, [r0, #20]
 800acf2:	6103      	str	r3, [r0, #16]
 800acf4:	bd10      	pop	{r4, pc}
 800acf6:	bf00      	nop
 800acf8:	0800cbb8 	.word	0x0800cbb8
 800acfc:	0800cc44 	.word	0x0800cc44

0800ad00 <__multiply>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	4691      	mov	r9, r2
 800ad06:	690a      	ldr	r2, [r1, #16]
 800ad08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	bfb8      	it	lt
 800ad10:	460b      	movlt	r3, r1
 800ad12:	460c      	mov	r4, r1
 800ad14:	bfbc      	itt	lt
 800ad16:	464c      	movlt	r4, r9
 800ad18:	4699      	movlt	r9, r3
 800ad1a:	6927      	ldr	r7, [r4, #16]
 800ad1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad20:	68a3      	ldr	r3, [r4, #8]
 800ad22:	6861      	ldr	r1, [r4, #4]
 800ad24:	eb07 060a 	add.w	r6, r7, sl
 800ad28:	42b3      	cmp	r3, r6
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	bfb8      	it	lt
 800ad2e:	3101      	addlt	r1, #1
 800ad30:	f7ff fe8e 	bl	800aa50 <_Balloc>
 800ad34:	b930      	cbnz	r0, 800ad44 <__multiply+0x44>
 800ad36:	4602      	mov	r2, r0
 800ad38:	4b44      	ldr	r3, [pc, #272]	; (800ae4c <__multiply+0x14c>)
 800ad3a:	4845      	ldr	r0, [pc, #276]	; (800ae50 <__multiply+0x150>)
 800ad3c:	f240 115d 	movw	r1, #349	; 0x15d
 800ad40:	f000 fce0 	bl	800b704 <__assert_func>
 800ad44:	f100 0514 	add.w	r5, r0, #20
 800ad48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad4c:	462b      	mov	r3, r5
 800ad4e:	2200      	movs	r2, #0
 800ad50:	4543      	cmp	r3, r8
 800ad52:	d321      	bcc.n	800ad98 <__multiply+0x98>
 800ad54:	f104 0314 	add.w	r3, r4, #20
 800ad58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad5c:	f109 0314 	add.w	r3, r9, #20
 800ad60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad64:	9202      	str	r2, [sp, #8]
 800ad66:	1b3a      	subs	r2, r7, r4
 800ad68:	3a15      	subs	r2, #21
 800ad6a:	f022 0203 	bic.w	r2, r2, #3
 800ad6e:	3204      	adds	r2, #4
 800ad70:	f104 0115 	add.w	r1, r4, #21
 800ad74:	428f      	cmp	r7, r1
 800ad76:	bf38      	it	cc
 800ad78:	2204      	movcc	r2, #4
 800ad7a:	9201      	str	r2, [sp, #4]
 800ad7c:	9a02      	ldr	r2, [sp, #8]
 800ad7e:	9303      	str	r3, [sp, #12]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d80c      	bhi.n	800ad9e <__multiply+0x9e>
 800ad84:	2e00      	cmp	r6, #0
 800ad86:	dd03      	ble.n	800ad90 <__multiply+0x90>
 800ad88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d05a      	beq.n	800ae46 <__multiply+0x146>
 800ad90:	6106      	str	r6, [r0, #16]
 800ad92:	b005      	add	sp, #20
 800ad94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad98:	f843 2b04 	str.w	r2, [r3], #4
 800ad9c:	e7d8      	b.n	800ad50 <__multiply+0x50>
 800ad9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ada2:	f1ba 0f00 	cmp.w	sl, #0
 800ada6:	d024      	beq.n	800adf2 <__multiply+0xf2>
 800ada8:	f104 0e14 	add.w	lr, r4, #20
 800adac:	46a9      	mov	r9, r5
 800adae:	f04f 0c00 	mov.w	ip, #0
 800adb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800adb6:	f8d9 1000 	ldr.w	r1, [r9]
 800adba:	fa1f fb82 	uxth.w	fp, r2
 800adbe:	b289      	uxth	r1, r1
 800adc0:	fb0a 110b 	mla	r1, sl, fp, r1
 800adc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800adc8:	f8d9 2000 	ldr.w	r2, [r9]
 800adcc:	4461      	add	r1, ip
 800adce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800add2:	fb0a c20b 	mla	r2, sl, fp, ip
 800add6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800adda:	b289      	uxth	r1, r1
 800addc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ade0:	4577      	cmp	r7, lr
 800ade2:	f849 1b04 	str.w	r1, [r9], #4
 800ade6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800adea:	d8e2      	bhi.n	800adb2 <__multiply+0xb2>
 800adec:	9a01      	ldr	r2, [sp, #4]
 800adee:	f845 c002 	str.w	ip, [r5, r2]
 800adf2:	9a03      	ldr	r2, [sp, #12]
 800adf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adf8:	3304      	adds	r3, #4
 800adfa:	f1b9 0f00 	cmp.w	r9, #0
 800adfe:	d020      	beq.n	800ae42 <__multiply+0x142>
 800ae00:	6829      	ldr	r1, [r5, #0]
 800ae02:	f104 0c14 	add.w	ip, r4, #20
 800ae06:	46ae      	mov	lr, r5
 800ae08:	f04f 0a00 	mov.w	sl, #0
 800ae0c:	f8bc b000 	ldrh.w	fp, [ip]
 800ae10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae14:	fb09 220b 	mla	r2, r9, fp, r2
 800ae18:	4492      	add	sl, r2
 800ae1a:	b289      	uxth	r1, r1
 800ae1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ae20:	f84e 1b04 	str.w	r1, [lr], #4
 800ae24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae28:	f8be 1000 	ldrh.w	r1, [lr]
 800ae2c:	0c12      	lsrs	r2, r2, #16
 800ae2e:	fb09 1102 	mla	r1, r9, r2, r1
 800ae32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ae36:	4567      	cmp	r7, ip
 800ae38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ae3c:	d8e6      	bhi.n	800ae0c <__multiply+0x10c>
 800ae3e:	9a01      	ldr	r2, [sp, #4]
 800ae40:	50a9      	str	r1, [r5, r2]
 800ae42:	3504      	adds	r5, #4
 800ae44:	e79a      	b.n	800ad7c <__multiply+0x7c>
 800ae46:	3e01      	subs	r6, #1
 800ae48:	e79c      	b.n	800ad84 <__multiply+0x84>
 800ae4a:	bf00      	nop
 800ae4c:	0800cbb8 	.word	0x0800cbb8
 800ae50:	0800cc44 	.word	0x0800cc44

0800ae54 <__pow5mult>:
 800ae54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae58:	4615      	mov	r5, r2
 800ae5a:	f012 0203 	ands.w	r2, r2, #3
 800ae5e:	4606      	mov	r6, r0
 800ae60:	460f      	mov	r7, r1
 800ae62:	d007      	beq.n	800ae74 <__pow5mult+0x20>
 800ae64:	4c25      	ldr	r4, [pc, #148]	; (800aefc <__pow5mult+0xa8>)
 800ae66:	3a01      	subs	r2, #1
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae6e:	f7ff fe51 	bl	800ab14 <__multadd>
 800ae72:	4607      	mov	r7, r0
 800ae74:	10ad      	asrs	r5, r5, #2
 800ae76:	d03d      	beq.n	800aef4 <__pow5mult+0xa0>
 800ae78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae7a:	b97c      	cbnz	r4, 800ae9c <__pow5mult+0x48>
 800ae7c:	2010      	movs	r0, #16
 800ae7e:	f7fc fe83 	bl	8007b88 <malloc>
 800ae82:	4602      	mov	r2, r0
 800ae84:	6270      	str	r0, [r6, #36]	; 0x24
 800ae86:	b928      	cbnz	r0, 800ae94 <__pow5mult+0x40>
 800ae88:	4b1d      	ldr	r3, [pc, #116]	; (800af00 <__pow5mult+0xac>)
 800ae8a:	481e      	ldr	r0, [pc, #120]	; (800af04 <__pow5mult+0xb0>)
 800ae8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae90:	f000 fc38 	bl	800b704 <__assert_func>
 800ae94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae98:	6004      	str	r4, [r0, #0]
 800ae9a:	60c4      	str	r4, [r0, #12]
 800ae9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aea4:	b94c      	cbnz	r4, 800aeba <__pow5mult+0x66>
 800aea6:	f240 2171 	movw	r1, #625	; 0x271
 800aeaa:	4630      	mov	r0, r6
 800aeac:	f7ff ff12 	bl	800acd4 <__i2b>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	6003      	str	r3, [r0, #0]
 800aeba:	f04f 0900 	mov.w	r9, #0
 800aebe:	07eb      	lsls	r3, r5, #31
 800aec0:	d50a      	bpl.n	800aed8 <__pow5mult+0x84>
 800aec2:	4639      	mov	r1, r7
 800aec4:	4622      	mov	r2, r4
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7ff ff1a 	bl	800ad00 <__multiply>
 800aecc:	4639      	mov	r1, r7
 800aece:	4680      	mov	r8, r0
 800aed0:	4630      	mov	r0, r6
 800aed2:	f7ff fdfd 	bl	800aad0 <_Bfree>
 800aed6:	4647      	mov	r7, r8
 800aed8:	106d      	asrs	r5, r5, #1
 800aeda:	d00b      	beq.n	800aef4 <__pow5mult+0xa0>
 800aedc:	6820      	ldr	r0, [r4, #0]
 800aede:	b938      	cbnz	r0, 800aef0 <__pow5mult+0x9c>
 800aee0:	4622      	mov	r2, r4
 800aee2:	4621      	mov	r1, r4
 800aee4:	4630      	mov	r0, r6
 800aee6:	f7ff ff0b 	bl	800ad00 <__multiply>
 800aeea:	6020      	str	r0, [r4, #0]
 800aeec:	f8c0 9000 	str.w	r9, [r0]
 800aef0:	4604      	mov	r4, r0
 800aef2:	e7e4      	b.n	800aebe <__pow5mult+0x6a>
 800aef4:	4638      	mov	r0, r7
 800aef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefa:	bf00      	nop
 800aefc:	0800cd90 	.word	0x0800cd90
 800af00:	0800cb46 	.word	0x0800cb46
 800af04:	0800cc44 	.word	0x0800cc44

0800af08 <__lshift>:
 800af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0c:	460c      	mov	r4, r1
 800af0e:	6849      	ldr	r1, [r1, #4]
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	4607      	mov	r7, r0
 800af1a:	4691      	mov	r9, r2
 800af1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af20:	f108 0601 	add.w	r6, r8, #1
 800af24:	42b3      	cmp	r3, r6
 800af26:	db0b      	blt.n	800af40 <__lshift+0x38>
 800af28:	4638      	mov	r0, r7
 800af2a:	f7ff fd91 	bl	800aa50 <_Balloc>
 800af2e:	4605      	mov	r5, r0
 800af30:	b948      	cbnz	r0, 800af46 <__lshift+0x3e>
 800af32:	4602      	mov	r2, r0
 800af34:	4b2a      	ldr	r3, [pc, #168]	; (800afe0 <__lshift+0xd8>)
 800af36:	482b      	ldr	r0, [pc, #172]	; (800afe4 <__lshift+0xdc>)
 800af38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af3c:	f000 fbe2 	bl	800b704 <__assert_func>
 800af40:	3101      	adds	r1, #1
 800af42:	005b      	lsls	r3, r3, #1
 800af44:	e7ee      	b.n	800af24 <__lshift+0x1c>
 800af46:	2300      	movs	r3, #0
 800af48:	f100 0114 	add.w	r1, r0, #20
 800af4c:	f100 0210 	add.w	r2, r0, #16
 800af50:	4618      	mov	r0, r3
 800af52:	4553      	cmp	r3, sl
 800af54:	db37      	blt.n	800afc6 <__lshift+0xbe>
 800af56:	6920      	ldr	r0, [r4, #16]
 800af58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af5c:	f104 0314 	add.w	r3, r4, #20
 800af60:	f019 091f 	ands.w	r9, r9, #31
 800af64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af6c:	d02f      	beq.n	800afce <__lshift+0xc6>
 800af6e:	f1c9 0e20 	rsb	lr, r9, #32
 800af72:	468a      	mov	sl, r1
 800af74:	f04f 0c00 	mov.w	ip, #0
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	fa02 f209 	lsl.w	r2, r2, r9
 800af7e:	ea42 020c 	orr.w	r2, r2, ip
 800af82:	f84a 2b04 	str.w	r2, [sl], #4
 800af86:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8a:	4298      	cmp	r0, r3
 800af8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af90:	d8f2      	bhi.n	800af78 <__lshift+0x70>
 800af92:	1b03      	subs	r3, r0, r4
 800af94:	3b15      	subs	r3, #21
 800af96:	f023 0303 	bic.w	r3, r3, #3
 800af9a:	3304      	adds	r3, #4
 800af9c:	f104 0215 	add.w	r2, r4, #21
 800afa0:	4290      	cmp	r0, r2
 800afa2:	bf38      	it	cc
 800afa4:	2304      	movcc	r3, #4
 800afa6:	f841 c003 	str.w	ip, [r1, r3]
 800afaa:	f1bc 0f00 	cmp.w	ip, #0
 800afae:	d001      	beq.n	800afb4 <__lshift+0xac>
 800afb0:	f108 0602 	add.w	r6, r8, #2
 800afb4:	3e01      	subs	r6, #1
 800afb6:	4638      	mov	r0, r7
 800afb8:	612e      	str	r6, [r5, #16]
 800afba:	4621      	mov	r1, r4
 800afbc:	f7ff fd88 	bl	800aad0 <_Bfree>
 800afc0:	4628      	mov	r0, r5
 800afc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800afca:	3301      	adds	r3, #1
 800afcc:	e7c1      	b.n	800af52 <__lshift+0x4a>
 800afce:	3904      	subs	r1, #4
 800afd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd4:	f841 2f04 	str.w	r2, [r1, #4]!
 800afd8:	4298      	cmp	r0, r3
 800afda:	d8f9      	bhi.n	800afd0 <__lshift+0xc8>
 800afdc:	e7ea      	b.n	800afb4 <__lshift+0xac>
 800afde:	bf00      	nop
 800afe0:	0800cbb8 	.word	0x0800cbb8
 800afe4:	0800cc44 	.word	0x0800cc44

0800afe8 <__mcmp>:
 800afe8:	b530      	push	{r4, r5, lr}
 800afea:	6902      	ldr	r2, [r0, #16]
 800afec:	690c      	ldr	r4, [r1, #16]
 800afee:	1b12      	subs	r2, r2, r4
 800aff0:	d10e      	bne.n	800b010 <__mcmp+0x28>
 800aff2:	f100 0314 	add.w	r3, r0, #20
 800aff6:	3114      	adds	r1, #20
 800aff8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800affc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b000:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b004:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b008:	42a5      	cmp	r5, r4
 800b00a:	d003      	beq.n	800b014 <__mcmp+0x2c>
 800b00c:	d305      	bcc.n	800b01a <__mcmp+0x32>
 800b00e:	2201      	movs	r2, #1
 800b010:	4610      	mov	r0, r2
 800b012:	bd30      	pop	{r4, r5, pc}
 800b014:	4283      	cmp	r3, r0
 800b016:	d3f3      	bcc.n	800b000 <__mcmp+0x18>
 800b018:	e7fa      	b.n	800b010 <__mcmp+0x28>
 800b01a:	f04f 32ff 	mov.w	r2, #4294967295
 800b01e:	e7f7      	b.n	800b010 <__mcmp+0x28>

0800b020 <__mdiff>:
 800b020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	460c      	mov	r4, r1
 800b026:	4606      	mov	r6, r0
 800b028:	4611      	mov	r1, r2
 800b02a:	4620      	mov	r0, r4
 800b02c:	4690      	mov	r8, r2
 800b02e:	f7ff ffdb 	bl	800afe8 <__mcmp>
 800b032:	1e05      	subs	r5, r0, #0
 800b034:	d110      	bne.n	800b058 <__mdiff+0x38>
 800b036:	4629      	mov	r1, r5
 800b038:	4630      	mov	r0, r6
 800b03a:	f7ff fd09 	bl	800aa50 <_Balloc>
 800b03e:	b930      	cbnz	r0, 800b04e <__mdiff+0x2e>
 800b040:	4b3a      	ldr	r3, [pc, #232]	; (800b12c <__mdiff+0x10c>)
 800b042:	4602      	mov	r2, r0
 800b044:	f240 2132 	movw	r1, #562	; 0x232
 800b048:	4839      	ldr	r0, [pc, #228]	; (800b130 <__mdiff+0x110>)
 800b04a:	f000 fb5b 	bl	800b704 <__assert_func>
 800b04e:	2301      	movs	r3, #1
 800b050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b058:	bfa4      	itt	ge
 800b05a:	4643      	movge	r3, r8
 800b05c:	46a0      	movge	r8, r4
 800b05e:	4630      	mov	r0, r6
 800b060:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b064:	bfa6      	itte	ge
 800b066:	461c      	movge	r4, r3
 800b068:	2500      	movge	r5, #0
 800b06a:	2501      	movlt	r5, #1
 800b06c:	f7ff fcf0 	bl	800aa50 <_Balloc>
 800b070:	b920      	cbnz	r0, 800b07c <__mdiff+0x5c>
 800b072:	4b2e      	ldr	r3, [pc, #184]	; (800b12c <__mdiff+0x10c>)
 800b074:	4602      	mov	r2, r0
 800b076:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b07a:	e7e5      	b.n	800b048 <__mdiff+0x28>
 800b07c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b080:	6926      	ldr	r6, [r4, #16]
 800b082:	60c5      	str	r5, [r0, #12]
 800b084:	f104 0914 	add.w	r9, r4, #20
 800b088:	f108 0514 	add.w	r5, r8, #20
 800b08c:	f100 0e14 	add.w	lr, r0, #20
 800b090:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b094:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b098:	f108 0210 	add.w	r2, r8, #16
 800b09c:	46f2      	mov	sl, lr
 800b09e:	2100      	movs	r1, #0
 800b0a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0a8:	fa1f f883 	uxth.w	r8, r3
 800b0ac:	fa11 f18b 	uxtah	r1, r1, fp
 800b0b0:	0c1b      	lsrs	r3, r3, #16
 800b0b2:	eba1 0808 	sub.w	r8, r1, r8
 800b0b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0be:	fa1f f888 	uxth.w	r8, r8
 800b0c2:	1419      	asrs	r1, r3, #16
 800b0c4:	454e      	cmp	r6, r9
 800b0c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0ca:	f84a 3b04 	str.w	r3, [sl], #4
 800b0ce:	d8e7      	bhi.n	800b0a0 <__mdiff+0x80>
 800b0d0:	1b33      	subs	r3, r6, r4
 800b0d2:	3b15      	subs	r3, #21
 800b0d4:	f023 0303 	bic.w	r3, r3, #3
 800b0d8:	3304      	adds	r3, #4
 800b0da:	3415      	adds	r4, #21
 800b0dc:	42a6      	cmp	r6, r4
 800b0de:	bf38      	it	cc
 800b0e0:	2304      	movcc	r3, #4
 800b0e2:	441d      	add	r5, r3
 800b0e4:	4473      	add	r3, lr
 800b0e6:	469e      	mov	lr, r3
 800b0e8:	462e      	mov	r6, r5
 800b0ea:	4566      	cmp	r6, ip
 800b0ec:	d30e      	bcc.n	800b10c <__mdiff+0xec>
 800b0ee:	f10c 0203 	add.w	r2, ip, #3
 800b0f2:	1b52      	subs	r2, r2, r5
 800b0f4:	f022 0203 	bic.w	r2, r2, #3
 800b0f8:	3d03      	subs	r5, #3
 800b0fa:	45ac      	cmp	ip, r5
 800b0fc:	bf38      	it	cc
 800b0fe:	2200      	movcc	r2, #0
 800b100:	441a      	add	r2, r3
 800b102:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b106:	b17b      	cbz	r3, 800b128 <__mdiff+0x108>
 800b108:	6107      	str	r7, [r0, #16]
 800b10a:	e7a3      	b.n	800b054 <__mdiff+0x34>
 800b10c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b110:	fa11 f288 	uxtah	r2, r1, r8
 800b114:	1414      	asrs	r4, r2, #16
 800b116:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b11a:	b292      	uxth	r2, r2
 800b11c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b120:	f84e 2b04 	str.w	r2, [lr], #4
 800b124:	1421      	asrs	r1, r4, #16
 800b126:	e7e0      	b.n	800b0ea <__mdiff+0xca>
 800b128:	3f01      	subs	r7, #1
 800b12a:	e7ea      	b.n	800b102 <__mdiff+0xe2>
 800b12c:	0800cbb8 	.word	0x0800cbb8
 800b130:	0800cc44 	.word	0x0800cc44

0800b134 <__ulp>:
 800b134:	b082      	sub	sp, #8
 800b136:	ed8d 0b00 	vstr	d0, [sp]
 800b13a:	9b01      	ldr	r3, [sp, #4]
 800b13c:	4912      	ldr	r1, [pc, #72]	; (800b188 <__ulp+0x54>)
 800b13e:	4019      	ands	r1, r3
 800b140:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b144:	2900      	cmp	r1, #0
 800b146:	dd05      	ble.n	800b154 <__ulp+0x20>
 800b148:	2200      	movs	r2, #0
 800b14a:	460b      	mov	r3, r1
 800b14c:	ec43 2b10 	vmov	d0, r2, r3
 800b150:	b002      	add	sp, #8
 800b152:	4770      	bx	lr
 800b154:	4249      	negs	r1, r1
 800b156:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b15a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b15e:	f04f 0200 	mov.w	r2, #0
 800b162:	f04f 0300 	mov.w	r3, #0
 800b166:	da04      	bge.n	800b172 <__ulp+0x3e>
 800b168:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b16c:	fa41 f300 	asr.w	r3, r1, r0
 800b170:	e7ec      	b.n	800b14c <__ulp+0x18>
 800b172:	f1a0 0114 	sub.w	r1, r0, #20
 800b176:	291e      	cmp	r1, #30
 800b178:	bfda      	itte	le
 800b17a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b17e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b182:	2101      	movgt	r1, #1
 800b184:	460a      	mov	r2, r1
 800b186:	e7e1      	b.n	800b14c <__ulp+0x18>
 800b188:	7ff00000 	.word	0x7ff00000

0800b18c <__b2d>:
 800b18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b18e:	6905      	ldr	r5, [r0, #16]
 800b190:	f100 0714 	add.w	r7, r0, #20
 800b194:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b198:	1f2e      	subs	r6, r5, #4
 800b19a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f7ff fd48 	bl	800ac34 <__hi0bits>
 800b1a4:	f1c0 0320 	rsb	r3, r0, #32
 800b1a8:	280a      	cmp	r0, #10
 800b1aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b228 <__b2d+0x9c>
 800b1ae:	600b      	str	r3, [r1, #0]
 800b1b0:	dc14      	bgt.n	800b1dc <__b2d+0x50>
 800b1b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800b1b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800b1ba:	42b7      	cmp	r7, r6
 800b1bc:	ea41 030c 	orr.w	r3, r1, ip
 800b1c0:	bf34      	ite	cc
 800b1c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1c6:	2100      	movcs	r1, #0
 800b1c8:	3015      	adds	r0, #21
 800b1ca:	fa04 f000 	lsl.w	r0, r4, r0
 800b1ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800b1d2:	ea40 0201 	orr.w	r2, r0, r1
 800b1d6:	ec43 2b10 	vmov	d0, r2, r3
 800b1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1dc:	42b7      	cmp	r7, r6
 800b1de:	bf3a      	itte	cc
 800b1e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1e4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b1e8:	2100      	movcs	r1, #0
 800b1ea:	380b      	subs	r0, #11
 800b1ec:	d017      	beq.n	800b21e <__b2d+0x92>
 800b1ee:	f1c0 0c20 	rsb	ip, r0, #32
 800b1f2:	fa04 f500 	lsl.w	r5, r4, r0
 800b1f6:	42be      	cmp	r6, r7
 800b1f8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b1fc:	ea45 0504 	orr.w	r5, r5, r4
 800b200:	bf8c      	ite	hi
 800b202:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b206:	2400      	movls	r4, #0
 800b208:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b20c:	fa01 f000 	lsl.w	r0, r1, r0
 800b210:	fa24 f40c 	lsr.w	r4, r4, ip
 800b214:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b218:	ea40 0204 	orr.w	r2, r0, r4
 800b21c:	e7db      	b.n	800b1d6 <__b2d+0x4a>
 800b21e:	ea44 030c 	orr.w	r3, r4, ip
 800b222:	460a      	mov	r2, r1
 800b224:	e7d7      	b.n	800b1d6 <__b2d+0x4a>
 800b226:	bf00      	nop
 800b228:	3ff00000 	.word	0x3ff00000

0800b22c <__d2b>:
 800b22c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b230:	4689      	mov	r9, r1
 800b232:	2101      	movs	r1, #1
 800b234:	ec57 6b10 	vmov	r6, r7, d0
 800b238:	4690      	mov	r8, r2
 800b23a:	f7ff fc09 	bl	800aa50 <_Balloc>
 800b23e:	4604      	mov	r4, r0
 800b240:	b930      	cbnz	r0, 800b250 <__d2b+0x24>
 800b242:	4602      	mov	r2, r0
 800b244:	4b25      	ldr	r3, [pc, #148]	; (800b2dc <__d2b+0xb0>)
 800b246:	4826      	ldr	r0, [pc, #152]	; (800b2e0 <__d2b+0xb4>)
 800b248:	f240 310a 	movw	r1, #778	; 0x30a
 800b24c:	f000 fa5a 	bl	800b704 <__assert_func>
 800b250:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b254:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b258:	bb35      	cbnz	r5, 800b2a8 <__d2b+0x7c>
 800b25a:	2e00      	cmp	r6, #0
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	d028      	beq.n	800b2b2 <__d2b+0x86>
 800b260:	4668      	mov	r0, sp
 800b262:	9600      	str	r6, [sp, #0]
 800b264:	f7ff fd06 	bl	800ac74 <__lo0bits>
 800b268:	9900      	ldr	r1, [sp, #0]
 800b26a:	b300      	cbz	r0, 800b2ae <__d2b+0x82>
 800b26c:	9a01      	ldr	r2, [sp, #4]
 800b26e:	f1c0 0320 	rsb	r3, r0, #32
 800b272:	fa02 f303 	lsl.w	r3, r2, r3
 800b276:	430b      	orrs	r3, r1
 800b278:	40c2      	lsrs	r2, r0
 800b27a:	6163      	str	r3, [r4, #20]
 800b27c:	9201      	str	r2, [sp, #4]
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	61a3      	str	r3, [r4, #24]
 800b282:	2b00      	cmp	r3, #0
 800b284:	bf14      	ite	ne
 800b286:	2202      	movne	r2, #2
 800b288:	2201      	moveq	r2, #1
 800b28a:	6122      	str	r2, [r4, #16]
 800b28c:	b1d5      	cbz	r5, 800b2c4 <__d2b+0x98>
 800b28e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b292:	4405      	add	r5, r0
 800b294:	f8c9 5000 	str.w	r5, [r9]
 800b298:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b29c:	f8c8 0000 	str.w	r0, [r8]
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	b003      	add	sp, #12
 800b2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2ac:	e7d5      	b.n	800b25a <__d2b+0x2e>
 800b2ae:	6161      	str	r1, [r4, #20]
 800b2b0:	e7e5      	b.n	800b27e <__d2b+0x52>
 800b2b2:	a801      	add	r0, sp, #4
 800b2b4:	f7ff fcde 	bl	800ac74 <__lo0bits>
 800b2b8:	9b01      	ldr	r3, [sp, #4]
 800b2ba:	6163      	str	r3, [r4, #20]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	6122      	str	r2, [r4, #16]
 800b2c0:	3020      	adds	r0, #32
 800b2c2:	e7e3      	b.n	800b28c <__d2b+0x60>
 800b2c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2cc:	f8c9 0000 	str.w	r0, [r9]
 800b2d0:	6918      	ldr	r0, [r3, #16]
 800b2d2:	f7ff fcaf 	bl	800ac34 <__hi0bits>
 800b2d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2da:	e7df      	b.n	800b29c <__d2b+0x70>
 800b2dc:	0800cbb8 	.word	0x0800cbb8
 800b2e0:	0800cc44 	.word	0x0800cc44

0800b2e4 <__ratio>:
 800b2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	4688      	mov	r8, r1
 800b2ea:	4669      	mov	r1, sp
 800b2ec:	4681      	mov	r9, r0
 800b2ee:	f7ff ff4d 	bl	800b18c <__b2d>
 800b2f2:	a901      	add	r1, sp, #4
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	ec55 4b10 	vmov	r4, r5, d0
 800b2fa:	ee10 aa10 	vmov	sl, s0
 800b2fe:	f7ff ff45 	bl	800b18c <__b2d>
 800b302:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b306:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b30a:	1a59      	subs	r1, r3, r1
 800b30c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b310:	1ad3      	subs	r3, r2, r3
 800b312:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b316:	ec57 6b10 	vmov	r6, r7, d0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfd6      	itet	le
 800b31e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b322:	462a      	movgt	r2, r5
 800b324:	463a      	movle	r2, r7
 800b326:	46ab      	mov	fp, r5
 800b328:	bfd6      	itet	le
 800b32a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b32e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b332:	ee00 3a90 	vmovle	s1, r3
 800b336:	ec4b ab17 	vmov	d7, sl, fp
 800b33a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b33e:	b003      	add	sp, #12
 800b340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b344 <__copybits>:
 800b344:	3901      	subs	r1, #1
 800b346:	b570      	push	{r4, r5, r6, lr}
 800b348:	1149      	asrs	r1, r1, #5
 800b34a:	6914      	ldr	r4, [r2, #16]
 800b34c:	3101      	adds	r1, #1
 800b34e:	f102 0314 	add.w	r3, r2, #20
 800b352:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b356:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b35a:	1f05      	subs	r5, r0, #4
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d30c      	bcc.n	800b37a <__copybits+0x36>
 800b360:	1aa3      	subs	r3, r4, r2
 800b362:	3b11      	subs	r3, #17
 800b364:	f023 0303 	bic.w	r3, r3, #3
 800b368:	3211      	adds	r2, #17
 800b36a:	42a2      	cmp	r2, r4
 800b36c:	bf88      	it	hi
 800b36e:	2300      	movhi	r3, #0
 800b370:	4418      	add	r0, r3
 800b372:	2300      	movs	r3, #0
 800b374:	4288      	cmp	r0, r1
 800b376:	d305      	bcc.n	800b384 <__copybits+0x40>
 800b378:	bd70      	pop	{r4, r5, r6, pc}
 800b37a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b37e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b382:	e7eb      	b.n	800b35c <__copybits+0x18>
 800b384:	f840 3b04 	str.w	r3, [r0], #4
 800b388:	e7f4      	b.n	800b374 <__copybits+0x30>

0800b38a <__any_on>:
 800b38a:	f100 0214 	add.w	r2, r0, #20
 800b38e:	6900      	ldr	r0, [r0, #16]
 800b390:	114b      	asrs	r3, r1, #5
 800b392:	4298      	cmp	r0, r3
 800b394:	b510      	push	{r4, lr}
 800b396:	db11      	blt.n	800b3bc <__any_on+0x32>
 800b398:	dd0a      	ble.n	800b3b0 <__any_on+0x26>
 800b39a:	f011 011f 	ands.w	r1, r1, #31
 800b39e:	d007      	beq.n	800b3b0 <__any_on+0x26>
 800b3a0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3a4:	fa24 f001 	lsr.w	r0, r4, r1
 800b3a8:	fa00 f101 	lsl.w	r1, r0, r1
 800b3ac:	428c      	cmp	r4, r1
 800b3ae:	d10b      	bne.n	800b3c8 <__any_on+0x3e>
 800b3b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d803      	bhi.n	800b3c0 <__any_on+0x36>
 800b3b8:	2000      	movs	r0, #0
 800b3ba:	bd10      	pop	{r4, pc}
 800b3bc:	4603      	mov	r3, r0
 800b3be:	e7f7      	b.n	800b3b0 <__any_on+0x26>
 800b3c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3c4:	2900      	cmp	r1, #0
 800b3c6:	d0f5      	beq.n	800b3b4 <__any_on+0x2a>
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	e7f6      	b.n	800b3ba <__any_on+0x30>

0800b3cc <_calloc_r>:
 800b3cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3ce:	fba1 2402 	umull	r2, r4, r1, r2
 800b3d2:	b94c      	cbnz	r4, 800b3e8 <_calloc_r+0x1c>
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	9201      	str	r2, [sp, #4]
 800b3d8:	f7fc fc60 	bl	8007c9c <_malloc_r>
 800b3dc:	9a01      	ldr	r2, [sp, #4]
 800b3de:	4605      	mov	r5, r0
 800b3e0:	b930      	cbnz	r0, 800b3f0 <_calloc_r+0x24>
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	b003      	add	sp, #12
 800b3e6:	bd30      	pop	{r4, r5, pc}
 800b3e8:	220c      	movs	r2, #12
 800b3ea:	6002      	str	r2, [r0, #0]
 800b3ec:	2500      	movs	r5, #0
 800b3ee:	e7f8      	b.n	800b3e2 <_calloc_r+0x16>
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	f7fc fbdf 	bl	8007bb4 <memset>
 800b3f6:	e7f4      	b.n	800b3e2 <_calloc_r+0x16>

0800b3f8 <__ssputs_r>:
 800b3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	688e      	ldr	r6, [r1, #8]
 800b3fe:	429e      	cmp	r6, r3
 800b400:	4682      	mov	sl, r0
 800b402:	460c      	mov	r4, r1
 800b404:	4690      	mov	r8, r2
 800b406:	461f      	mov	r7, r3
 800b408:	d838      	bhi.n	800b47c <__ssputs_r+0x84>
 800b40a:	898a      	ldrh	r2, [r1, #12]
 800b40c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b410:	d032      	beq.n	800b478 <__ssputs_r+0x80>
 800b412:	6825      	ldr	r5, [r4, #0]
 800b414:	6909      	ldr	r1, [r1, #16]
 800b416:	eba5 0901 	sub.w	r9, r5, r1
 800b41a:	6965      	ldr	r5, [r4, #20]
 800b41c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b420:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b424:	3301      	adds	r3, #1
 800b426:	444b      	add	r3, r9
 800b428:	106d      	asrs	r5, r5, #1
 800b42a:	429d      	cmp	r5, r3
 800b42c:	bf38      	it	cc
 800b42e:	461d      	movcc	r5, r3
 800b430:	0553      	lsls	r3, r2, #21
 800b432:	d531      	bpl.n	800b498 <__ssputs_r+0xa0>
 800b434:	4629      	mov	r1, r5
 800b436:	f7fc fc31 	bl	8007c9c <_malloc_r>
 800b43a:	4606      	mov	r6, r0
 800b43c:	b950      	cbnz	r0, 800b454 <__ssputs_r+0x5c>
 800b43e:	230c      	movs	r3, #12
 800b440:	f8ca 3000 	str.w	r3, [sl]
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	f04f 30ff 	mov.w	r0, #4294967295
 800b450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b454:	6921      	ldr	r1, [r4, #16]
 800b456:	464a      	mov	r2, r9
 800b458:	f7fc fb9e 	bl	8007b98 <memcpy>
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b466:	81a3      	strh	r3, [r4, #12]
 800b468:	6126      	str	r6, [r4, #16]
 800b46a:	6165      	str	r5, [r4, #20]
 800b46c:	444e      	add	r6, r9
 800b46e:	eba5 0509 	sub.w	r5, r5, r9
 800b472:	6026      	str	r6, [r4, #0]
 800b474:	60a5      	str	r5, [r4, #8]
 800b476:	463e      	mov	r6, r7
 800b478:	42be      	cmp	r6, r7
 800b47a:	d900      	bls.n	800b47e <__ssputs_r+0x86>
 800b47c:	463e      	mov	r6, r7
 800b47e:	6820      	ldr	r0, [r4, #0]
 800b480:	4632      	mov	r2, r6
 800b482:	4641      	mov	r1, r8
 800b484:	f000 f96e 	bl	800b764 <memmove>
 800b488:	68a3      	ldr	r3, [r4, #8]
 800b48a:	1b9b      	subs	r3, r3, r6
 800b48c:	60a3      	str	r3, [r4, #8]
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	4433      	add	r3, r6
 800b492:	6023      	str	r3, [r4, #0]
 800b494:	2000      	movs	r0, #0
 800b496:	e7db      	b.n	800b450 <__ssputs_r+0x58>
 800b498:	462a      	mov	r2, r5
 800b49a:	f000 f97d 	bl	800b798 <_realloc_r>
 800b49e:	4606      	mov	r6, r0
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d1e1      	bne.n	800b468 <__ssputs_r+0x70>
 800b4a4:	6921      	ldr	r1, [r4, #16]
 800b4a6:	4650      	mov	r0, sl
 800b4a8:	f7fc fb8c 	bl	8007bc4 <_free_r>
 800b4ac:	e7c7      	b.n	800b43e <__ssputs_r+0x46>
	...

0800b4b0 <_svfiprintf_r>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	4698      	mov	r8, r3
 800b4b6:	898b      	ldrh	r3, [r1, #12]
 800b4b8:	061b      	lsls	r3, r3, #24
 800b4ba:	b09d      	sub	sp, #116	; 0x74
 800b4bc:	4607      	mov	r7, r0
 800b4be:	460d      	mov	r5, r1
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	d50e      	bpl.n	800b4e2 <_svfiprintf_r+0x32>
 800b4c4:	690b      	ldr	r3, [r1, #16]
 800b4c6:	b963      	cbnz	r3, 800b4e2 <_svfiprintf_r+0x32>
 800b4c8:	2140      	movs	r1, #64	; 0x40
 800b4ca:	f7fc fbe7 	bl	8007c9c <_malloc_r>
 800b4ce:	6028      	str	r0, [r5, #0]
 800b4d0:	6128      	str	r0, [r5, #16]
 800b4d2:	b920      	cbnz	r0, 800b4de <_svfiprintf_r+0x2e>
 800b4d4:	230c      	movs	r3, #12
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	e0d1      	b.n	800b682 <_svfiprintf_r+0x1d2>
 800b4de:	2340      	movs	r3, #64	; 0x40
 800b4e0:	616b      	str	r3, [r5, #20]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4e6:	2320      	movs	r3, #32
 800b4e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4f0:	2330      	movs	r3, #48	; 0x30
 800b4f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b69c <_svfiprintf_r+0x1ec>
 800b4f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4fa:	f04f 0901 	mov.w	r9, #1
 800b4fe:	4623      	mov	r3, r4
 800b500:	469a      	mov	sl, r3
 800b502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b506:	b10a      	cbz	r2, 800b50c <_svfiprintf_r+0x5c>
 800b508:	2a25      	cmp	r2, #37	; 0x25
 800b50a:	d1f9      	bne.n	800b500 <_svfiprintf_r+0x50>
 800b50c:	ebba 0b04 	subs.w	fp, sl, r4
 800b510:	d00b      	beq.n	800b52a <_svfiprintf_r+0x7a>
 800b512:	465b      	mov	r3, fp
 800b514:	4622      	mov	r2, r4
 800b516:	4629      	mov	r1, r5
 800b518:	4638      	mov	r0, r7
 800b51a:	f7ff ff6d 	bl	800b3f8 <__ssputs_r>
 800b51e:	3001      	adds	r0, #1
 800b520:	f000 80aa 	beq.w	800b678 <_svfiprintf_r+0x1c8>
 800b524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b526:	445a      	add	r2, fp
 800b528:	9209      	str	r2, [sp, #36]	; 0x24
 800b52a:	f89a 3000 	ldrb.w	r3, [sl]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f000 80a2 	beq.w	800b678 <_svfiprintf_r+0x1c8>
 800b534:	2300      	movs	r3, #0
 800b536:	f04f 32ff 	mov.w	r2, #4294967295
 800b53a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b53e:	f10a 0a01 	add.w	sl, sl, #1
 800b542:	9304      	str	r3, [sp, #16]
 800b544:	9307      	str	r3, [sp, #28]
 800b546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b54a:	931a      	str	r3, [sp, #104]	; 0x68
 800b54c:	4654      	mov	r4, sl
 800b54e:	2205      	movs	r2, #5
 800b550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b554:	4851      	ldr	r0, [pc, #324]	; (800b69c <_svfiprintf_r+0x1ec>)
 800b556:	f7f4 fe7b 	bl	8000250 <memchr>
 800b55a:	9a04      	ldr	r2, [sp, #16]
 800b55c:	b9d8      	cbnz	r0, 800b596 <_svfiprintf_r+0xe6>
 800b55e:	06d0      	lsls	r0, r2, #27
 800b560:	bf44      	itt	mi
 800b562:	2320      	movmi	r3, #32
 800b564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b568:	0711      	lsls	r1, r2, #28
 800b56a:	bf44      	itt	mi
 800b56c:	232b      	movmi	r3, #43	; 0x2b
 800b56e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b572:	f89a 3000 	ldrb.w	r3, [sl]
 800b576:	2b2a      	cmp	r3, #42	; 0x2a
 800b578:	d015      	beq.n	800b5a6 <_svfiprintf_r+0xf6>
 800b57a:	9a07      	ldr	r2, [sp, #28]
 800b57c:	4654      	mov	r4, sl
 800b57e:	2000      	movs	r0, #0
 800b580:	f04f 0c0a 	mov.w	ip, #10
 800b584:	4621      	mov	r1, r4
 800b586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b58a:	3b30      	subs	r3, #48	; 0x30
 800b58c:	2b09      	cmp	r3, #9
 800b58e:	d94e      	bls.n	800b62e <_svfiprintf_r+0x17e>
 800b590:	b1b0      	cbz	r0, 800b5c0 <_svfiprintf_r+0x110>
 800b592:	9207      	str	r2, [sp, #28]
 800b594:	e014      	b.n	800b5c0 <_svfiprintf_r+0x110>
 800b596:	eba0 0308 	sub.w	r3, r0, r8
 800b59a:	fa09 f303 	lsl.w	r3, r9, r3
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	46a2      	mov	sl, r4
 800b5a4:	e7d2      	b.n	800b54c <_svfiprintf_r+0x9c>
 800b5a6:	9b03      	ldr	r3, [sp, #12]
 800b5a8:	1d19      	adds	r1, r3, #4
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	9103      	str	r1, [sp, #12]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	bfbb      	ittet	lt
 800b5b2:	425b      	neglt	r3, r3
 800b5b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b5b8:	9307      	strge	r3, [sp, #28]
 800b5ba:	9307      	strlt	r3, [sp, #28]
 800b5bc:	bfb8      	it	lt
 800b5be:	9204      	strlt	r2, [sp, #16]
 800b5c0:	7823      	ldrb	r3, [r4, #0]
 800b5c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b5c4:	d10c      	bne.n	800b5e0 <_svfiprintf_r+0x130>
 800b5c6:	7863      	ldrb	r3, [r4, #1]
 800b5c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5ca:	d135      	bne.n	800b638 <_svfiprintf_r+0x188>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	1d1a      	adds	r2, r3, #4
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	9203      	str	r2, [sp, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bfb8      	it	lt
 800b5d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5dc:	3402      	adds	r4, #2
 800b5de:	9305      	str	r3, [sp, #20]
 800b5e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6ac <_svfiprintf_r+0x1fc>
 800b5e4:	7821      	ldrb	r1, [r4, #0]
 800b5e6:	2203      	movs	r2, #3
 800b5e8:	4650      	mov	r0, sl
 800b5ea:	f7f4 fe31 	bl	8000250 <memchr>
 800b5ee:	b140      	cbz	r0, 800b602 <_svfiprintf_r+0x152>
 800b5f0:	2340      	movs	r3, #64	; 0x40
 800b5f2:	eba0 000a 	sub.w	r0, r0, sl
 800b5f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b5fa:	9b04      	ldr	r3, [sp, #16]
 800b5fc:	4303      	orrs	r3, r0
 800b5fe:	3401      	adds	r4, #1
 800b600:	9304      	str	r3, [sp, #16]
 800b602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b606:	4826      	ldr	r0, [pc, #152]	; (800b6a0 <_svfiprintf_r+0x1f0>)
 800b608:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b60c:	2206      	movs	r2, #6
 800b60e:	f7f4 fe1f 	bl	8000250 <memchr>
 800b612:	2800      	cmp	r0, #0
 800b614:	d038      	beq.n	800b688 <_svfiprintf_r+0x1d8>
 800b616:	4b23      	ldr	r3, [pc, #140]	; (800b6a4 <_svfiprintf_r+0x1f4>)
 800b618:	bb1b      	cbnz	r3, 800b662 <_svfiprintf_r+0x1b2>
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	3307      	adds	r3, #7
 800b61e:	f023 0307 	bic.w	r3, r3, #7
 800b622:	3308      	adds	r3, #8
 800b624:	9303      	str	r3, [sp, #12]
 800b626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b628:	4433      	add	r3, r6
 800b62a:	9309      	str	r3, [sp, #36]	; 0x24
 800b62c:	e767      	b.n	800b4fe <_svfiprintf_r+0x4e>
 800b62e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b632:	460c      	mov	r4, r1
 800b634:	2001      	movs	r0, #1
 800b636:	e7a5      	b.n	800b584 <_svfiprintf_r+0xd4>
 800b638:	2300      	movs	r3, #0
 800b63a:	3401      	adds	r4, #1
 800b63c:	9305      	str	r3, [sp, #20]
 800b63e:	4619      	mov	r1, r3
 800b640:	f04f 0c0a 	mov.w	ip, #10
 800b644:	4620      	mov	r0, r4
 800b646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b64a:	3a30      	subs	r2, #48	; 0x30
 800b64c:	2a09      	cmp	r2, #9
 800b64e:	d903      	bls.n	800b658 <_svfiprintf_r+0x1a8>
 800b650:	2b00      	cmp	r3, #0
 800b652:	d0c5      	beq.n	800b5e0 <_svfiprintf_r+0x130>
 800b654:	9105      	str	r1, [sp, #20]
 800b656:	e7c3      	b.n	800b5e0 <_svfiprintf_r+0x130>
 800b658:	fb0c 2101 	mla	r1, ip, r1, r2
 800b65c:	4604      	mov	r4, r0
 800b65e:	2301      	movs	r3, #1
 800b660:	e7f0      	b.n	800b644 <_svfiprintf_r+0x194>
 800b662:	ab03      	add	r3, sp, #12
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	462a      	mov	r2, r5
 800b668:	4b0f      	ldr	r3, [pc, #60]	; (800b6a8 <_svfiprintf_r+0x1f8>)
 800b66a:	a904      	add	r1, sp, #16
 800b66c:	4638      	mov	r0, r7
 800b66e:	f7fc fc1b 	bl	8007ea8 <_printf_float>
 800b672:	1c42      	adds	r2, r0, #1
 800b674:	4606      	mov	r6, r0
 800b676:	d1d6      	bne.n	800b626 <_svfiprintf_r+0x176>
 800b678:	89ab      	ldrh	r3, [r5, #12]
 800b67a:	065b      	lsls	r3, r3, #25
 800b67c:	f53f af2c 	bmi.w	800b4d8 <_svfiprintf_r+0x28>
 800b680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b682:	b01d      	add	sp, #116	; 0x74
 800b684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b688:	ab03      	add	r3, sp, #12
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	462a      	mov	r2, r5
 800b68e:	4b06      	ldr	r3, [pc, #24]	; (800b6a8 <_svfiprintf_r+0x1f8>)
 800b690:	a904      	add	r1, sp, #16
 800b692:	4638      	mov	r0, r7
 800b694:	f7fc fe94 	bl	80083c0 <_printf_i>
 800b698:	e7eb      	b.n	800b672 <_svfiprintf_r+0x1c2>
 800b69a:	bf00      	nop
 800b69c:	0800cd9c 	.word	0x0800cd9c
 800b6a0:	0800cda6 	.word	0x0800cda6
 800b6a4:	08007ea9 	.word	0x08007ea9
 800b6a8:	0800b3f9 	.word	0x0800b3f9
 800b6ac:	0800cda2 	.word	0x0800cda2

0800b6b0 <nan>:
 800b6b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b6b8 <nan+0x8>
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	00000000 	.word	0x00000000
 800b6bc:	7ff80000 	.word	0x7ff80000

0800b6c0 <strncmp>:
 800b6c0:	b510      	push	{r4, lr}
 800b6c2:	b17a      	cbz	r2, 800b6e4 <strncmp+0x24>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	3901      	subs	r1, #1
 800b6c8:	1884      	adds	r4, r0, r2
 800b6ca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b6ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b6d2:	4290      	cmp	r0, r2
 800b6d4:	d101      	bne.n	800b6da <strncmp+0x1a>
 800b6d6:	42a3      	cmp	r3, r4
 800b6d8:	d101      	bne.n	800b6de <strncmp+0x1e>
 800b6da:	1a80      	subs	r0, r0, r2
 800b6dc:	bd10      	pop	{r4, pc}
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d1f3      	bne.n	800b6ca <strncmp+0xa>
 800b6e2:	e7fa      	b.n	800b6da <strncmp+0x1a>
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	e7f9      	b.n	800b6dc <strncmp+0x1c>

0800b6e8 <__ascii_wctomb>:
 800b6e8:	b149      	cbz	r1, 800b6fe <__ascii_wctomb+0x16>
 800b6ea:	2aff      	cmp	r2, #255	; 0xff
 800b6ec:	bf85      	ittet	hi
 800b6ee:	238a      	movhi	r3, #138	; 0x8a
 800b6f0:	6003      	strhi	r3, [r0, #0]
 800b6f2:	700a      	strbls	r2, [r1, #0]
 800b6f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6f8:	bf98      	it	ls
 800b6fa:	2001      	movls	r0, #1
 800b6fc:	4770      	bx	lr
 800b6fe:	4608      	mov	r0, r1
 800b700:	4770      	bx	lr
	...

0800b704 <__assert_func>:
 800b704:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b706:	4614      	mov	r4, r2
 800b708:	461a      	mov	r2, r3
 800b70a:	4b09      	ldr	r3, [pc, #36]	; (800b730 <__assert_func+0x2c>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4605      	mov	r5, r0
 800b710:	68d8      	ldr	r0, [r3, #12]
 800b712:	b14c      	cbz	r4, 800b728 <__assert_func+0x24>
 800b714:	4b07      	ldr	r3, [pc, #28]	; (800b734 <__assert_func+0x30>)
 800b716:	9100      	str	r1, [sp, #0]
 800b718:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b71c:	4906      	ldr	r1, [pc, #24]	; (800b738 <__assert_func+0x34>)
 800b71e:	462b      	mov	r3, r5
 800b720:	f000 f80e 	bl	800b740 <fiprintf>
 800b724:	f000 fa80 	bl	800bc28 <abort>
 800b728:	4b04      	ldr	r3, [pc, #16]	; (800b73c <__assert_func+0x38>)
 800b72a:	461c      	mov	r4, r3
 800b72c:	e7f3      	b.n	800b716 <__assert_func+0x12>
 800b72e:	bf00      	nop
 800b730:	20000b64 	.word	0x20000b64
 800b734:	0800cdad 	.word	0x0800cdad
 800b738:	0800cdba 	.word	0x0800cdba
 800b73c:	0800cde8 	.word	0x0800cde8

0800b740 <fiprintf>:
 800b740:	b40e      	push	{r1, r2, r3}
 800b742:	b503      	push	{r0, r1, lr}
 800b744:	4601      	mov	r1, r0
 800b746:	ab03      	add	r3, sp, #12
 800b748:	4805      	ldr	r0, [pc, #20]	; (800b760 <fiprintf+0x20>)
 800b74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b74e:	6800      	ldr	r0, [r0, #0]
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	f000 f879 	bl	800b848 <_vfiprintf_r>
 800b756:	b002      	add	sp, #8
 800b758:	f85d eb04 	ldr.w	lr, [sp], #4
 800b75c:	b003      	add	sp, #12
 800b75e:	4770      	bx	lr
 800b760:	20000b64 	.word	0x20000b64

0800b764 <memmove>:
 800b764:	4288      	cmp	r0, r1
 800b766:	b510      	push	{r4, lr}
 800b768:	eb01 0402 	add.w	r4, r1, r2
 800b76c:	d902      	bls.n	800b774 <memmove+0x10>
 800b76e:	4284      	cmp	r4, r0
 800b770:	4623      	mov	r3, r4
 800b772:	d807      	bhi.n	800b784 <memmove+0x20>
 800b774:	1e43      	subs	r3, r0, #1
 800b776:	42a1      	cmp	r1, r4
 800b778:	d008      	beq.n	800b78c <memmove+0x28>
 800b77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b782:	e7f8      	b.n	800b776 <memmove+0x12>
 800b784:	4402      	add	r2, r0
 800b786:	4601      	mov	r1, r0
 800b788:	428a      	cmp	r2, r1
 800b78a:	d100      	bne.n	800b78e <memmove+0x2a>
 800b78c:	bd10      	pop	{r4, pc}
 800b78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b796:	e7f7      	b.n	800b788 <memmove+0x24>

0800b798 <_realloc_r>:
 800b798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b79c:	4680      	mov	r8, r0
 800b79e:	4614      	mov	r4, r2
 800b7a0:	460e      	mov	r6, r1
 800b7a2:	b921      	cbnz	r1, 800b7ae <_realloc_r+0x16>
 800b7a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	f7fc ba77 	b.w	8007c9c <_malloc_r>
 800b7ae:	b92a      	cbnz	r2, 800b7bc <_realloc_r+0x24>
 800b7b0:	f7fc fa08 	bl	8007bc4 <_free_r>
 800b7b4:	4625      	mov	r5, r4
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7bc:	f000 fc58 	bl	800c070 <_malloc_usable_size_r>
 800b7c0:	4284      	cmp	r4, r0
 800b7c2:	4607      	mov	r7, r0
 800b7c4:	d802      	bhi.n	800b7cc <_realloc_r+0x34>
 800b7c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7ca:	d812      	bhi.n	800b7f2 <_realloc_r+0x5a>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	f7fc fa64 	bl	8007c9c <_malloc_r>
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d0ed      	beq.n	800b7b6 <_realloc_r+0x1e>
 800b7da:	42bc      	cmp	r4, r7
 800b7dc:	4622      	mov	r2, r4
 800b7de:	4631      	mov	r1, r6
 800b7e0:	bf28      	it	cs
 800b7e2:	463a      	movcs	r2, r7
 800b7e4:	f7fc f9d8 	bl	8007b98 <memcpy>
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	f7fc f9ea 	bl	8007bc4 <_free_r>
 800b7f0:	e7e1      	b.n	800b7b6 <_realloc_r+0x1e>
 800b7f2:	4635      	mov	r5, r6
 800b7f4:	e7df      	b.n	800b7b6 <_realloc_r+0x1e>

0800b7f6 <__sfputc_r>:
 800b7f6:	6893      	ldr	r3, [r2, #8]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	b410      	push	{r4}
 800b7fe:	6093      	str	r3, [r2, #8]
 800b800:	da08      	bge.n	800b814 <__sfputc_r+0x1e>
 800b802:	6994      	ldr	r4, [r2, #24]
 800b804:	42a3      	cmp	r3, r4
 800b806:	db01      	blt.n	800b80c <__sfputc_r+0x16>
 800b808:	290a      	cmp	r1, #10
 800b80a:	d103      	bne.n	800b814 <__sfputc_r+0x1e>
 800b80c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b810:	f000 b94a 	b.w	800baa8 <__swbuf_r>
 800b814:	6813      	ldr	r3, [r2, #0]
 800b816:	1c58      	adds	r0, r3, #1
 800b818:	6010      	str	r0, [r2, #0]
 800b81a:	7019      	strb	r1, [r3, #0]
 800b81c:	4608      	mov	r0, r1
 800b81e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <__sfputs_r>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	4606      	mov	r6, r0
 800b828:	460f      	mov	r7, r1
 800b82a:	4614      	mov	r4, r2
 800b82c:	18d5      	adds	r5, r2, r3
 800b82e:	42ac      	cmp	r4, r5
 800b830:	d101      	bne.n	800b836 <__sfputs_r+0x12>
 800b832:	2000      	movs	r0, #0
 800b834:	e007      	b.n	800b846 <__sfputs_r+0x22>
 800b836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83a:	463a      	mov	r2, r7
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7ff ffda 	bl	800b7f6 <__sfputc_r>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d1f3      	bne.n	800b82e <__sfputs_r+0xa>
 800b846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b848 <_vfiprintf_r>:
 800b848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	460d      	mov	r5, r1
 800b84e:	b09d      	sub	sp, #116	; 0x74
 800b850:	4614      	mov	r4, r2
 800b852:	4698      	mov	r8, r3
 800b854:	4606      	mov	r6, r0
 800b856:	b118      	cbz	r0, 800b860 <_vfiprintf_r+0x18>
 800b858:	6983      	ldr	r3, [r0, #24]
 800b85a:	b90b      	cbnz	r3, 800b860 <_vfiprintf_r+0x18>
 800b85c:	f000 fb06 	bl	800be6c <__sinit>
 800b860:	4b89      	ldr	r3, [pc, #548]	; (800ba88 <_vfiprintf_r+0x240>)
 800b862:	429d      	cmp	r5, r3
 800b864:	d11b      	bne.n	800b89e <_vfiprintf_r+0x56>
 800b866:	6875      	ldr	r5, [r6, #4]
 800b868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b86a:	07d9      	lsls	r1, r3, #31
 800b86c:	d405      	bmi.n	800b87a <_vfiprintf_r+0x32>
 800b86e:	89ab      	ldrh	r3, [r5, #12]
 800b870:	059a      	lsls	r2, r3, #22
 800b872:	d402      	bmi.n	800b87a <_vfiprintf_r+0x32>
 800b874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b876:	f7f6 f97a 	bl	8001b6e <__retarget_lock_acquire_recursive>
 800b87a:	89ab      	ldrh	r3, [r5, #12]
 800b87c:	071b      	lsls	r3, r3, #28
 800b87e:	d501      	bpl.n	800b884 <_vfiprintf_r+0x3c>
 800b880:	692b      	ldr	r3, [r5, #16]
 800b882:	b9eb      	cbnz	r3, 800b8c0 <_vfiprintf_r+0x78>
 800b884:	4629      	mov	r1, r5
 800b886:	4630      	mov	r0, r6
 800b888:	f000 f960 	bl	800bb4c <__swsetup_r>
 800b88c:	b1c0      	cbz	r0, 800b8c0 <_vfiprintf_r+0x78>
 800b88e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b890:	07dc      	lsls	r4, r3, #31
 800b892:	d50e      	bpl.n	800b8b2 <_vfiprintf_r+0x6a>
 800b894:	f04f 30ff 	mov.w	r0, #4294967295
 800b898:	b01d      	add	sp, #116	; 0x74
 800b89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89e:	4b7b      	ldr	r3, [pc, #492]	; (800ba8c <_vfiprintf_r+0x244>)
 800b8a0:	429d      	cmp	r5, r3
 800b8a2:	d101      	bne.n	800b8a8 <_vfiprintf_r+0x60>
 800b8a4:	68b5      	ldr	r5, [r6, #8]
 800b8a6:	e7df      	b.n	800b868 <_vfiprintf_r+0x20>
 800b8a8:	4b79      	ldr	r3, [pc, #484]	; (800ba90 <_vfiprintf_r+0x248>)
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	bf08      	it	eq
 800b8ae:	68f5      	ldreq	r5, [r6, #12]
 800b8b0:	e7da      	b.n	800b868 <_vfiprintf_r+0x20>
 800b8b2:	89ab      	ldrh	r3, [r5, #12]
 800b8b4:	0598      	lsls	r0, r3, #22
 800b8b6:	d4ed      	bmi.n	800b894 <_vfiprintf_r+0x4c>
 800b8b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8ba:	f7f6 f96c 	bl	8001b96 <__retarget_lock_release_recursive>
 800b8be:	e7e9      	b.n	800b894 <_vfiprintf_r+0x4c>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c4:	2320      	movs	r3, #32
 800b8c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8ce:	2330      	movs	r3, #48	; 0x30
 800b8d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba94 <_vfiprintf_r+0x24c>
 800b8d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8d8:	f04f 0901 	mov.w	r9, #1
 800b8dc:	4623      	mov	r3, r4
 800b8de:	469a      	mov	sl, r3
 800b8e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8e4:	b10a      	cbz	r2, 800b8ea <_vfiprintf_r+0xa2>
 800b8e6:	2a25      	cmp	r2, #37	; 0x25
 800b8e8:	d1f9      	bne.n	800b8de <_vfiprintf_r+0x96>
 800b8ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b8ee:	d00b      	beq.n	800b908 <_vfiprintf_r+0xc0>
 800b8f0:	465b      	mov	r3, fp
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	f7ff ff94 	bl	800b824 <__sfputs_r>
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	f000 80aa 	beq.w	800ba56 <_vfiprintf_r+0x20e>
 800b902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b904:	445a      	add	r2, fp
 800b906:	9209      	str	r2, [sp, #36]	; 0x24
 800b908:	f89a 3000 	ldrb.w	r3, [sl]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 80a2 	beq.w	800ba56 <_vfiprintf_r+0x20e>
 800b912:	2300      	movs	r3, #0
 800b914:	f04f 32ff 	mov.w	r2, #4294967295
 800b918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b91c:	f10a 0a01 	add.w	sl, sl, #1
 800b920:	9304      	str	r3, [sp, #16]
 800b922:	9307      	str	r3, [sp, #28]
 800b924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b928:	931a      	str	r3, [sp, #104]	; 0x68
 800b92a:	4654      	mov	r4, sl
 800b92c:	2205      	movs	r2, #5
 800b92e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b932:	4858      	ldr	r0, [pc, #352]	; (800ba94 <_vfiprintf_r+0x24c>)
 800b934:	f7f4 fc8c 	bl	8000250 <memchr>
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	b9d8      	cbnz	r0, 800b974 <_vfiprintf_r+0x12c>
 800b93c:	06d1      	lsls	r1, r2, #27
 800b93e:	bf44      	itt	mi
 800b940:	2320      	movmi	r3, #32
 800b942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b946:	0713      	lsls	r3, r2, #28
 800b948:	bf44      	itt	mi
 800b94a:	232b      	movmi	r3, #43	; 0x2b
 800b94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b950:	f89a 3000 	ldrb.w	r3, [sl]
 800b954:	2b2a      	cmp	r3, #42	; 0x2a
 800b956:	d015      	beq.n	800b984 <_vfiprintf_r+0x13c>
 800b958:	9a07      	ldr	r2, [sp, #28]
 800b95a:	4654      	mov	r4, sl
 800b95c:	2000      	movs	r0, #0
 800b95e:	f04f 0c0a 	mov.w	ip, #10
 800b962:	4621      	mov	r1, r4
 800b964:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b968:	3b30      	subs	r3, #48	; 0x30
 800b96a:	2b09      	cmp	r3, #9
 800b96c:	d94e      	bls.n	800ba0c <_vfiprintf_r+0x1c4>
 800b96e:	b1b0      	cbz	r0, 800b99e <_vfiprintf_r+0x156>
 800b970:	9207      	str	r2, [sp, #28]
 800b972:	e014      	b.n	800b99e <_vfiprintf_r+0x156>
 800b974:	eba0 0308 	sub.w	r3, r0, r8
 800b978:	fa09 f303 	lsl.w	r3, r9, r3
 800b97c:	4313      	orrs	r3, r2
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	46a2      	mov	sl, r4
 800b982:	e7d2      	b.n	800b92a <_vfiprintf_r+0xe2>
 800b984:	9b03      	ldr	r3, [sp, #12]
 800b986:	1d19      	adds	r1, r3, #4
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	9103      	str	r1, [sp, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	bfbb      	ittet	lt
 800b990:	425b      	neglt	r3, r3
 800b992:	f042 0202 	orrlt.w	r2, r2, #2
 800b996:	9307      	strge	r3, [sp, #28]
 800b998:	9307      	strlt	r3, [sp, #28]
 800b99a:	bfb8      	it	lt
 800b99c:	9204      	strlt	r2, [sp, #16]
 800b99e:	7823      	ldrb	r3, [r4, #0]
 800b9a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b9a2:	d10c      	bne.n	800b9be <_vfiprintf_r+0x176>
 800b9a4:	7863      	ldrb	r3, [r4, #1]
 800b9a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b9a8:	d135      	bne.n	800ba16 <_vfiprintf_r+0x1ce>
 800b9aa:	9b03      	ldr	r3, [sp, #12]
 800b9ac:	1d1a      	adds	r2, r3, #4
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	9203      	str	r2, [sp, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	bfb8      	it	lt
 800b9b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9ba:	3402      	adds	r4, #2
 800b9bc:	9305      	str	r3, [sp, #20]
 800b9be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800baa4 <_vfiprintf_r+0x25c>
 800b9c2:	7821      	ldrb	r1, [r4, #0]
 800b9c4:	2203      	movs	r2, #3
 800b9c6:	4650      	mov	r0, sl
 800b9c8:	f7f4 fc42 	bl	8000250 <memchr>
 800b9cc:	b140      	cbz	r0, 800b9e0 <_vfiprintf_r+0x198>
 800b9ce:	2340      	movs	r3, #64	; 0x40
 800b9d0:	eba0 000a 	sub.w	r0, r0, sl
 800b9d4:	fa03 f000 	lsl.w	r0, r3, r0
 800b9d8:	9b04      	ldr	r3, [sp, #16]
 800b9da:	4303      	orrs	r3, r0
 800b9dc:	3401      	adds	r4, #1
 800b9de:	9304      	str	r3, [sp, #16]
 800b9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e4:	482c      	ldr	r0, [pc, #176]	; (800ba98 <_vfiprintf_r+0x250>)
 800b9e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ea:	2206      	movs	r2, #6
 800b9ec:	f7f4 fc30 	bl	8000250 <memchr>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d03f      	beq.n	800ba74 <_vfiprintf_r+0x22c>
 800b9f4:	4b29      	ldr	r3, [pc, #164]	; (800ba9c <_vfiprintf_r+0x254>)
 800b9f6:	bb1b      	cbnz	r3, 800ba40 <_vfiprintf_r+0x1f8>
 800b9f8:	9b03      	ldr	r3, [sp, #12]
 800b9fa:	3307      	adds	r3, #7
 800b9fc:	f023 0307 	bic.w	r3, r3, #7
 800ba00:	3308      	adds	r3, #8
 800ba02:	9303      	str	r3, [sp, #12]
 800ba04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba06:	443b      	add	r3, r7
 800ba08:	9309      	str	r3, [sp, #36]	; 0x24
 800ba0a:	e767      	b.n	800b8dc <_vfiprintf_r+0x94>
 800ba0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba10:	460c      	mov	r4, r1
 800ba12:	2001      	movs	r0, #1
 800ba14:	e7a5      	b.n	800b962 <_vfiprintf_r+0x11a>
 800ba16:	2300      	movs	r3, #0
 800ba18:	3401      	adds	r4, #1
 800ba1a:	9305      	str	r3, [sp, #20]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f04f 0c0a 	mov.w	ip, #10
 800ba22:	4620      	mov	r0, r4
 800ba24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba28:	3a30      	subs	r2, #48	; 0x30
 800ba2a:	2a09      	cmp	r2, #9
 800ba2c:	d903      	bls.n	800ba36 <_vfiprintf_r+0x1ee>
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0c5      	beq.n	800b9be <_vfiprintf_r+0x176>
 800ba32:	9105      	str	r1, [sp, #20]
 800ba34:	e7c3      	b.n	800b9be <_vfiprintf_r+0x176>
 800ba36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e7f0      	b.n	800ba22 <_vfiprintf_r+0x1da>
 800ba40:	ab03      	add	r3, sp, #12
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	462a      	mov	r2, r5
 800ba46:	4b16      	ldr	r3, [pc, #88]	; (800baa0 <_vfiprintf_r+0x258>)
 800ba48:	a904      	add	r1, sp, #16
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f7fc fa2c 	bl	8007ea8 <_printf_float>
 800ba50:	4607      	mov	r7, r0
 800ba52:	1c78      	adds	r0, r7, #1
 800ba54:	d1d6      	bne.n	800ba04 <_vfiprintf_r+0x1bc>
 800ba56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba58:	07d9      	lsls	r1, r3, #31
 800ba5a:	d405      	bmi.n	800ba68 <_vfiprintf_r+0x220>
 800ba5c:	89ab      	ldrh	r3, [r5, #12]
 800ba5e:	059a      	lsls	r2, r3, #22
 800ba60:	d402      	bmi.n	800ba68 <_vfiprintf_r+0x220>
 800ba62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba64:	f7f6 f897 	bl	8001b96 <__retarget_lock_release_recursive>
 800ba68:	89ab      	ldrh	r3, [r5, #12]
 800ba6a:	065b      	lsls	r3, r3, #25
 800ba6c:	f53f af12 	bmi.w	800b894 <_vfiprintf_r+0x4c>
 800ba70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba72:	e711      	b.n	800b898 <_vfiprintf_r+0x50>
 800ba74:	ab03      	add	r3, sp, #12
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	462a      	mov	r2, r5
 800ba7a:	4b09      	ldr	r3, [pc, #36]	; (800baa0 <_vfiprintf_r+0x258>)
 800ba7c:	a904      	add	r1, sp, #16
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7fc fc9e 	bl	80083c0 <_printf_i>
 800ba84:	e7e4      	b.n	800ba50 <_vfiprintf_r+0x208>
 800ba86:	bf00      	nop
 800ba88:	0800ce0c 	.word	0x0800ce0c
 800ba8c:	0800ce2c 	.word	0x0800ce2c
 800ba90:	0800cdec 	.word	0x0800cdec
 800ba94:	0800cd9c 	.word	0x0800cd9c
 800ba98:	0800cda6 	.word	0x0800cda6
 800ba9c:	08007ea9 	.word	0x08007ea9
 800baa0:	0800b825 	.word	0x0800b825
 800baa4:	0800cda2 	.word	0x0800cda2

0800baa8 <__swbuf_r>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	460e      	mov	r6, r1
 800baac:	4614      	mov	r4, r2
 800baae:	4605      	mov	r5, r0
 800bab0:	b118      	cbz	r0, 800baba <__swbuf_r+0x12>
 800bab2:	6983      	ldr	r3, [r0, #24]
 800bab4:	b90b      	cbnz	r3, 800baba <__swbuf_r+0x12>
 800bab6:	f000 f9d9 	bl	800be6c <__sinit>
 800baba:	4b21      	ldr	r3, [pc, #132]	; (800bb40 <__swbuf_r+0x98>)
 800babc:	429c      	cmp	r4, r3
 800babe:	d12b      	bne.n	800bb18 <__swbuf_r+0x70>
 800bac0:	686c      	ldr	r4, [r5, #4]
 800bac2:	69a3      	ldr	r3, [r4, #24]
 800bac4:	60a3      	str	r3, [r4, #8]
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	071a      	lsls	r2, r3, #28
 800baca:	d52f      	bpl.n	800bb2c <__swbuf_r+0x84>
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	b36b      	cbz	r3, 800bb2c <__swbuf_r+0x84>
 800bad0:	6923      	ldr	r3, [r4, #16]
 800bad2:	6820      	ldr	r0, [r4, #0]
 800bad4:	1ac0      	subs	r0, r0, r3
 800bad6:	6963      	ldr	r3, [r4, #20]
 800bad8:	b2f6      	uxtb	r6, r6
 800bada:	4283      	cmp	r3, r0
 800badc:	4637      	mov	r7, r6
 800bade:	dc04      	bgt.n	800baea <__swbuf_r+0x42>
 800bae0:	4621      	mov	r1, r4
 800bae2:	4628      	mov	r0, r5
 800bae4:	f000 f92e 	bl	800bd44 <_fflush_r>
 800bae8:	bb30      	cbnz	r0, 800bb38 <__swbuf_r+0x90>
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	3b01      	subs	r3, #1
 800baee:	60a3      	str	r3, [r4, #8]
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	1c5a      	adds	r2, r3, #1
 800baf4:	6022      	str	r2, [r4, #0]
 800baf6:	701e      	strb	r6, [r3, #0]
 800baf8:	6963      	ldr	r3, [r4, #20]
 800bafa:	3001      	adds	r0, #1
 800bafc:	4283      	cmp	r3, r0
 800bafe:	d004      	beq.n	800bb0a <__swbuf_r+0x62>
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	07db      	lsls	r3, r3, #31
 800bb04:	d506      	bpl.n	800bb14 <__swbuf_r+0x6c>
 800bb06:	2e0a      	cmp	r6, #10
 800bb08:	d104      	bne.n	800bb14 <__swbuf_r+0x6c>
 800bb0a:	4621      	mov	r1, r4
 800bb0c:	4628      	mov	r0, r5
 800bb0e:	f000 f919 	bl	800bd44 <_fflush_r>
 800bb12:	b988      	cbnz	r0, 800bb38 <__swbuf_r+0x90>
 800bb14:	4638      	mov	r0, r7
 800bb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <__swbuf_r+0x9c>)
 800bb1a:	429c      	cmp	r4, r3
 800bb1c:	d101      	bne.n	800bb22 <__swbuf_r+0x7a>
 800bb1e:	68ac      	ldr	r4, [r5, #8]
 800bb20:	e7cf      	b.n	800bac2 <__swbuf_r+0x1a>
 800bb22:	4b09      	ldr	r3, [pc, #36]	; (800bb48 <__swbuf_r+0xa0>)
 800bb24:	429c      	cmp	r4, r3
 800bb26:	bf08      	it	eq
 800bb28:	68ec      	ldreq	r4, [r5, #12]
 800bb2a:	e7ca      	b.n	800bac2 <__swbuf_r+0x1a>
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	4628      	mov	r0, r5
 800bb30:	f000 f80c 	bl	800bb4c <__swsetup_r>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	d0cb      	beq.n	800bad0 <__swbuf_r+0x28>
 800bb38:	f04f 37ff 	mov.w	r7, #4294967295
 800bb3c:	e7ea      	b.n	800bb14 <__swbuf_r+0x6c>
 800bb3e:	bf00      	nop
 800bb40:	0800ce0c 	.word	0x0800ce0c
 800bb44:	0800ce2c 	.word	0x0800ce2c
 800bb48:	0800cdec 	.word	0x0800cdec

0800bb4c <__swsetup_r>:
 800bb4c:	4b32      	ldr	r3, [pc, #200]	; (800bc18 <__swsetup_r+0xcc>)
 800bb4e:	b570      	push	{r4, r5, r6, lr}
 800bb50:	681d      	ldr	r5, [r3, #0]
 800bb52:	4606      	mov	r6, r0
 800bb54:	460c      	mov	r4, r1
 800bb56:	b125      	cbz	r5, 800bb62 <__swsetup_r+0x16>
 800bb58:	69ab      	ldr	r3, [r5, #24]
 800bb5a:	b913      	cbnz	r3, 800bb62 <__swsetup_r+0x16>
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	f000 f985 	bl	800be6c <__sinit>
 800bb62:	4b2e      	ldr	r3, [pc, #184]	; (800bc1c <__swsetup_r+0xd0>)
 800bb64:	429c      	cmp	r4, r3
 800bb66:	d10f      	bne.n	800bb88 <__swsetup_r+0x3c>
 800bb68:	686c      	ldr	r4, [r5, #4]
 800bb6a:	89a3      	ldrh	r3, [r4, #12]
 800bb6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb70:	0719      	lsls	r1, r3, #28
 800bb72:	d42c      	bmi.n	800bbce <__swsetup_r+0x82>
 800bb74:	06dd      	lsls	r5, r3, #27
 800bb76:	d411      	bmi.n	800bb9c <__swsetup_r+0x50>
 800bb78:	2309      	movs	r3, #9
 800bb7a:	6033      	str	r3, [r6, #0]
 800bb7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb80:	81a3      	strh	r3, [r4, #12]
 800bb82:	f04f 30ff 	mov.w	r0, #4294967295
 800bb86:	e03e      	b.n	800bc06 <__swsetup_r+0xba>
 800bb88:	4b25      	ldr	r3, [pc, #148]	; (800bc20 <__swsetup_r+0xd4>)
 800bb8a:	429c      	cmp	r4, r3
 800bb8c:	d101      	bne.n	800bb92 <__swsetup_r+0x46>
 800bb8e:	68ac      	ldr	r4, [r5, #8]
 800bb90:	e7eb      	b.n	800bb6a <__swsetup_r+0x1e>
 800bb92:	4b24      	ldr	r3, [pc, #144]	; (800bc24 <__swsetup_r+0xd8>)
 800bb94:	429c      	cmp	r4, r3
 800bb96:	bf08      	it	eq
 800bb98:	68ec      	ldreq	r4, [r5, #12]
 800bb9a:	e7e6      	b.n	800bb6a <__swsetup_r+0x1e>
 800bb9c:	0758      	lsls	r0, r3, #29
 800bb9e:	d512      	bpl.n	800bbc6 <__swsetup_r+0x7a>
 800bba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bba2:	b141      	cbz	r1, 800bbb6 <__swsetup_r+0x6a>
 800bba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bba8:	4299      	cmp	r1, r3
 800bbaa:	d002      	beq.n	800bbb2 <__swsetup_r+0x66>
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7fc f809 	bl	8007bc4 <_free_r>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	6363      	str	r3, [r4, #52]	; 0x34
 800bbb6:	89a3      	ldrh	r3, [r4, #12]
 800bbb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbbc:	81a3      	strh	r3, [r4, #12]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	6063      	str	r3, [r4, #4]
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	89a3      	ldrh	r3, [r4, #12]
 800bbc8:	f043 0308 	orr.w	r3, r3, #8
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	6923      	ldr	r3, [r4, #16]
 800bbd0:	b94b      	cbnz	r3, 800bbe6 <__swsetup_r+0x9a>
 800bbd2:	89a3      	ldrh	r3, [r4, #12]
 800bbd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bbd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbdc:	d003      	beq.n	800bbe6 <__swsetup_r+0x9a>
 800bbde:	4621      	mov	r1, r4
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f000 fa05 	bl	800bff0 <__smakebuf_r>
 800bbe6:	89a0      	ldrh	r0, [r4, #12]
 800bbe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbec:	f010 0301 	ands.w	r3, r0, #1
 800bbf0:	d00a      	beq.n	800bc08 <__swsetup_r+0xbc>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	60a3      	str	r3, [r4, #8]
 800bbf6:	6963      	ldr	r3, [r4, #20]
 800bbf8:	425b      	negs	r3, r3
 800bbfa:	61a3      	str	r3, [r4, #24]
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	b943      	cbnz	r3, 800bc12 <__swsetup_r+0xc6>
 800bc00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc04:	d1ba      	bne.n	800bb7c <__swsetup_r+0x30>
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	0781      	lsls	r1, r0, #30
 800bc0a:	bf58      	it	pl
 800bc0c:	6963      	ldrpl	r3, [r4, #20]
 800bc0e:	60a3      	str	r3, [r4, #8]
 800bc10:	e7f4      	b.n	800bbfc <__swsetup_r+0xb0>
 800bc12:	2000      	movs	r0, #0
 800bc14:	e7f7      	b.n	800bc06 <__swsetup_r+0xba>
 800bc16:	bf00      	nop
 800bc18:	20000b64 	.word	0x20000b64
 800bc1c:	0800ce0c 	.word	0x0800ce0c
 800bc20:	0800ce2c 	.word	0x0800ce2c
 800bc24:	0800cdec 	.word	0x0800cdec

0800bc28 <abort>:
 800bc28:	b508      	push	{r3, lr}
 800bc2a:	2006      	movs	r0, #6
 800bc2c:	f000 fa50 	bl	800c0d0 <raise>
 800bc30:	2001      	movs	r0, #1
 800bc32:	f7f5 fc83 	bl	800153c <_exit>
	...

0800bc38 <__sflush_r>:
 800bc38:	898a      	ldrh	r2, [r1, #12]
 800bc3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3e:	4605      	mov	r5, r0
 800bc40:	0710      	lsls	r0, r2, #28
 800bc42:	460c      	mov	r4, r1
 800bc44:	d458      	bmi.n	800bcf8 <__sflush_r+0xc0>
 800bc46:	684b      	ldr	r3, [r1, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dc05      	bgt.n	800bc58 <__sflush_r+0x20>
 800bc4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dc02      	bgt.n	800bc58 <__sflush_r+0x20>
 800bc52:	2000      	movs	r0, #0
 800bc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	d0f9      	beq.n	800bc52 <__sflush_r+0x1a>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc64:	682f      	ldr	r7, [r5, #0]
 800bc66:	602b      	str	r3, [r5, #0]
 800bc68:	d032      	beq.n	800bcd0 <__sflush_r+0x98>
 800bc6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	075a      	lsls	r2, r3, #29
 800bc70:	d505      	bpl.n	800bc7e <__sflush_r+0x46>
 800bc72:	6863      	ldr	r3, [r4, #4]
 800bc74:	1ac0      	subs	r0, r0, r3
 800bc76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc78:	b10b      	cbz	r3, 800bc7e <__sflush_r+0x46>
 800bc7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc7c:	1ac0      	subs	r0, r0, r3
 800bc7e:	2300      	movs	r3, #0
 800bc80:	4602      	mov	r2, r0
 800bc82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc84:	6a21      	ldr	r1, [r4, #32]
 800bc86:	4628      	mov	r0, r5
 800bc88:	47b0      	blx	r6
 800bc8a:	1c43      	adds	r3, r0, #1
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	d106      	bne.n	800bc9e <__sflush_r+0x66>
 800bc90:	6829      	ldr	r1, [r5, #0]
 800bc92:	291d      	cmp	r1, #29
 800bc94:	d82c      	bhi.n	800bcf0 <__sflush_r+0xb8>
 800bc96:	4a2a      	ldr	r2, [pc, #168]	; (800bd40 <__sflush_r+0x108>)
 800bc98:	40ca      	lsrs	r2, r1
 800bc9a:	07d6      	lsls	r6, r2, #31
 800bc9c:	d528      	bpl.n	800bcf0 <__sflush_r+0xb8>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	6062      	str	r2, [r4, #4]
 800bca2:	04d9      	lsls	r1, r3, #19
 800bca4:	6922      	ldr	r2, [r4, #16]
 800bca6:	6022      	str	r2, [r4, #0]
 800bca8:	d504      	bpl.n	800bcb4 <__sflush_r+0x7c>
 800bcaa:	1c42      	adds	r2, r0, #1
 800bcac:	d101      	bne.n	800bcb2 <__sflush_r+0x7a>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	b903      	cbnz	r3, 800bcb4 <__sflush_r+0x7c>
 800bcb2:	6560      	str	r0, [r4, #84]	; 0x54
 800bcb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcb6:	602f      	str	r7, [r5, #0]
 800bcb8:	2900      	cmp	r1, #0
 800bcba:	d0ca      	beq.n	800bc52 <__sflush_r+0x1a>
 800bcbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcc0:	4299      	cmp	r1, r3
 800bcc2:	d002      	beq.n	800bcca <__sflush_r+0x92>
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	f7fb ff7d 	bl	8007bc4 <_free_r>
 800bcca:	2000      	movs	r0, #0
 800bccc:	6360      	str	r0, [r4, #52]	; 0x34
 800bcce:	e7c1      	b.n	800bc54 <__sflush_r+0x1c>
 800bcd0:	6a21      	ldr	r1, [r4, #32]
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	47b0      	blx	r6
 800bcd8:	1c41      	adds	r1, r0, #1
 800bcda:	d1c7      	bne.n	800bc6c <__sflush_r+0x34>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d0c4      	beq.n	800bc6c <__sflush_r+0x34>
 800bce2:	2b1d      	cmp	r3, #29
 800bce4:	d001      	beq.n	800bcea <__sflush_r+0xb2>
 800bce6:	2b16      	cmp	r3, #22
 800bce8:	d101      	bne.n	800bcee <__sflush_r+0xb6>
 800bcea:	602f      	str	r7, [r5, #0]
 800bcec:	e7b1      	b.n	800bc52 <__sflush_r+0x1a>
 800bcee:	89a3      	ldrh	r3, [r4, #12]
 800bcf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf4:	81a3      	strh	r3, [r4, #12]
 800bcf6:	e7ad      	b.n	800bc54 <__sflush_r+0x1c>
 800bcf8:	690f      	ldr	r7, [r1, #16]
 800bcfa:	2f00      	cmp	r7, #0
 800bcfc:	d0a9      	beq.n	800bc52 <__sflush_r+0x1a>
 800bcfe:	0793      	lsls	r3, r2, #30
 800bd00:	680e      	ldr	r6, [r1, #0]
 800bd02:	bf08      	it	eq
 800bd04:	694b      	ldreq	r3, [r1, #20]
 800bd06:	600f      	str	r7, [r1, #0]
 800bd08:	bf18      	it	ne
 800bd0a:	2300      	movne	r3, #0
 800bd0c:	eba6 0807 	sub.w	r8, r6, r7
 800bd10:	608b      	str	r3, [r1, #8]
 800bd12:	f1b8 0f00 	cmp.w	r8, #0
 800bd16:	dd9c      	ble.n	800bc52 <__sflush_r+0x1a>
 800bd18:	6a21      	ldr	r1, [r4, #32]
 800bd1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd1c:	4643      	mov	r3, r8
 800bd1e:	463a      	mov	r2, r7
 800bd20:	4628      	mov	r0, r5
 800bd22:	47b0      	blx	r6
 800bd24:	2800      	cmp	r0, #0
 800bd26:	dc06      	bgt.n	800bd36 <__sflush_r+0xfe>
 800bd28:	89a3      	ldrh	r3, [r4, #12]
 800bd2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd2e:	81a3      	strh	r3, [r4, #12]
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295
 800bd34:	e78e      	b.n	800bc54 <__sflush_r+0x1c>
 800bd36:	4407      	add	r7, r0
 800bd38:	eba8 0800 	sub.w	r8, r8, r0
 800bd3c:	e7e9      	b.n	800bd12 <__sflush_r+0xda>
 800bd3e:	bf00      	nop
 800bd40:	20400001 	.word	0x20400001

0800bd44 <_fflush_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	690b      	ldr	r3, [r1, #16]
 800bd48:	4605      	mov	r5, r0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	b913      	cbnz	r3, 800bd54 <_fflush_r+0x10>
 800bd4e:	2500      	movs	r5, #0
 800bd50:	4628      	mov	r0, r5
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	b118      	cbz	r0, 800bd5e <_fflush_r+0x1a>
 800bd56:	6983      	ldr	r3, [r0, #24]
 800bd58:	b90b      	cbnz	r3, 800bd5e <_fflush_r+0x1a>
 800bd5a:	f000 f887 	bl	800be6c <__sinit>
 800bd5e:	4b14      	ldr	r3, [pc, #80]	; (800bdb0 <_fflush_r+0x6c>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	d11b      	bne.n	800bd9c <_fflush_r+0x58>
 800bd64:	686c      	ldr	r4, [r5, #4]
 800bd66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0ef      	beq.n	800bd4e <_fflush_r+0xa>
 800bd6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd70:	07d0      	lsls	r0, r2, #31
 800bd72:	d404      	bmi.n	800bd7e <_fflush_r+0x3a>
 800bd74:	0599      	lsls	r1, r3, #22
 800bd76:	d402      	bmi.n	800bd7e <_fflush_r+0x3a>
 800bd78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd7a:	f7f5 fef8 	bl	8001b6e <__retarget_lock_acquire_recursive>
 800bd7e:	4628      	mov	r0, r5
 800bd80:	4621      	mov	r1, r4
 800bd82:	f7ff ff59 	bl	800bc38 <__sflush_r>
 800bd86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd88:	07da      	lsls	r2, r3, #31
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	d4e0      	bmi.n	800bd50 <_fflush_r+0xc>
 800bd8e:	89a3      	ldrh	r3, [r4, #12]
 800bd90:	059b      	lsls	r3, r3, #22
 800bd92:	d4dd      	bmi.n	800bd50 <_fflush_r+0xc>
 800bd94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd96:	f7f5 fefe 	bl	8001b96 <__retarget_lock_release_recursive>
 800bd9a:	e7d9      	b.n	800bd50 <_fflush_r+0xc>
 800bd9c:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <_fflush_r+0x70>)
 800bd9e:	429c      	cmp	r4, r3
 800bda0:	d101      	bne.n	800bda6 <_fflush_r+0x62>
 800bda2:	68ac      	ldr	r4, [r5, #8]
 800bda4:	e7df      	b.n	800bd66 <_fflush_r+0x22>
 800bda6:	4b04      	ldr	r3, [pc, #16]	; (800bdb8 <_fflush_r+0x74>)
 800bda8:	429c      	cmp	r4, r3
 800bdaa:	bf08      	it	eq
 800bdac:	68ec      	ldreq	r4, [r5, #12]
 800bdae:	e7da      	b.n	800bd66 <_fflush_r+0x22>
 800bdb0:	0800ce0c 	.word	0x0800ce0c
 800bdb4:	0800ce2c 	.word	0x0800ce2c
 800bdb8:	0800cdec 	.word	0x0800cdec

0800bdbc <std>:
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	b510      	push	{r4, lr}
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	e9c0 3300 	strd	r3, r3, [r0]
 800bdc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdca:	6083      	str	r3, [r0, #8]
 800bdcc:	8181      	strh	r1, [r0, #12]
 800bdce:	6643      	str	r3, [r0, #100]	; 0x64
 800bdd0:	81c2      	strh	r2, [r0, #14]
 800bdd2:	6183      	str	r3, [r0, #24]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	2208      	movs	r2, #8
 800bdd8:	305c      	adds	r0, #92	; 0x5c
 800bdda:	f7fb feeb 	bl	8007bb4 <memset>
 800bdde:	4b05      	ldr	r3, [pc, #20]	; (800bdf4 <std+0x38>)
 800bde0:	6263      	str	r3, [r4, #36]	; 0x24
 800bde2:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <std+0x3c>)
 800bde4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bde6:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <std+0x40>)
 800bde8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdea:	4b05      	ldr	r3, [pc, #20]	; (800be00 <std+0x44>)
 800bdec:	6224      	str	r4, [r4, #32]
 800bdee:	6323      	str	r3, [r4, #48]	; 0x30
 800bdf0:	bd10      	pop	{r4, pc}
 800bdf2:	bf00      	nop
 800bdf4:	0800c109 	.word	0x0800c109
 800bdf8:	0800c12b 	.word	0x0800c12b
 800bdfc:	0800c163 	.word	0x0800c163
 800be00:	0800c187 	.word	0x0800c187

0800be04 <_cleanup_r>:
 800be04:	4901      	ldr	r1, [pc, #4]	; (800be0c <_cleanup_r+0x8>)
 800be06:	f000 b8af 	b.w	800bf68 <_fwalk_reent>
 800be0a:	bf00      	nop
 800be0c:	0800bd45 	.word	0x0800bd45

0800be10 <__sfmoreglue>:
 800be10:	b570      	push	{r4, r5, r6, lr}
 800be12:	2268      	movs	r2, #104	; 0x68
 800be14:	1e4d      	subs	r5, r1, #1
 800be16:	4355      	muls	r5, r2
 800be18:	460e      	mov	r6, r1
 800be1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be1e:	f7fb ff3d 	bl	8007c9c <_malloc_r>
 800be22:	4604      	mov	r4, r0
 800be24:	b140      	cbz	r0, 800be38 <__sfmoreglue+0x28>
 800be26:	2100      	movs	r1, #0
 800be28:	e9c0 1600 	strd	r1, r6, [r0]
 800be2c:	300c      	adds	r0, #12
 800be2e:	60a0      	str	r0, [r4, #8]
 800be30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be34:	f7fb febe 	bl	8007bb4 <memset>
 800be38:	4620      	mov	r0, r4
 800be3a:	bd70      	pop	{r4, r5, r6, pc}

0800be3c <__sfp_lock_acquire>:
 800be3c:	4801      	ldr	r0, [pc, #4]	; (800be44 <__sfp_lock_acquire+0x8>)
 800be3e:	f7f5 be96 	b.w	8001b6e <__retarget_lock_acquire_recursive>
 800be42:	bf00      	nop
 800be44:	20001850 	.word	0x20001850

0800be48 <__sfp_lock_release>:
 800be48:	4801      	ldr	r0, [pc, #4]	; (800be50 <__sfp_lock_release+0x8>)
 800be4a:	f7f5 bea4 	b.w	8001b96 <__retarget_lock_release_recursive>
 800be4e:	bf00      	nop
 800be50:	20001850 	.word	0x20001850

0800be54 <__sinit_lock_acquire>:
 800be54:	4801      	ldr	r0, [pc, #4]	; (800be5c <__sinit_lock_acquire+0x8>)
 800be56:	f7f5 be8a 	b.w	8001b6e <__retarget_lock_acquire_recursive>
 800be5a:	bf00      	nop
 800be5c:	2000184c 	.word	0x2000184c

0800be60 <__sinit_lock_release>:
 800be60:	4801      	ldr	r0, [pc, #4]	; (800be68 <__sinit_lock_release+0x8>)
 800be62:	f7f5 be98 	b.w	8001b96 <__retarget_lock_release_recursive>
 800be66:	bf00      	nop
 800be68:	2000184c 	.word	0x2000184c

0800be6c <__sinit>:
 800be6c:	b510      	push	{r4, lr}
 800be6e:	4604      	mov	r4, r0
 800be70:	f7ff fff0 	bl	800be54 <__sinit_lock_acquire>
 800be74:	69a3      	ldr	r3, [r4, #24]
 800be76:	b11b      	cbz	r3, 800be80 <__sinit+0x14>
 800be78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be7c:	f7ff bff0 	b.w	800be60 <__sinit_lock_release>
 800be80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be84:	6523      	str	r3, [r4, #80]	; 0x50
 800be86:	4b13      	ldr	r3, [pc, #76]	; (800bed4 <__sinit+0x68>)
 800be88:	4a13      	ldr	r2, [pc, #76]	; (800bed8 <__sinit+0x6c>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800be8e:	42a3      	cmp	r3, r4
 800be90:	bf04      	itt	eq
 800be92:	2301      	moveq	r3, #1
 800be94:	61a3      	streq	r3, [r4, #24]
 800be96:	4620      	mov	r0, r4
 800be98:	f000 f820 	bl	800bedc <__sfp>
 800be9c:	6060      	str	r0, [r4, #4]
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 f81c 	bl	800bedc <__sfp>
 800bea4:	60a0      	str	r0, [r4, #8]
 800bea6:	4620      	mov	r0, r4
 800bea8:	f000 f818 	bl	800bedc <__sfp>
 800beac:	2200      	movs	r2, #0
 800beae:	60e0      	str	r0, [r4, #12]
 800beb0:	2104      	movs	r1, #4
 800beb2:	6860      	ldr	r0, [r4, #4]
 800beb4:	f7ff ff82 	bl	800bdbc <std>
 800beb8:	68a0      	ldr	r0, [r4, #8]
 800beba:	2201      	movs	r2, #1
 800bebc:	2109      	movs	r1, #9
 800bebe:	f7ff ff7d 	bl	800bdbc <std>
 800bec2:	68e0      	ldr	r0, [r4, #12]
 800bec4:	2202      	movs	r2, #2
 800bec6:	2112      	movs	r1, #18
 800bec8:	f7ff ff78 	bl	800bdbc <std>
 800becc:	2301      	movs	r3, #1
 800bece:	61a3      	str	r3, [r4, #24]
 800bed0:	e7d2      	b.n	800be78 <__sinit+0xc>
 800bed2:	bf00      	nop
 800bed4:	0800c9a4 	.word	0x0800c9a4
 800bed8:	0800be05 	.word	0x0800be05

0800bedc <__sfp>:
 800bedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bede:	4607      	mov	r7, r0
 800bee0:	f7ff ffac 	bl	800be3c <__sfp_lock_acquire>
 800bee4:	4b1e      	ldr	r3, [pc, #120]	; (800bf60 <__sfp+0x84>)
 800bee6:	681e      	ldr	r6, [r3, #0]
 800bee8:	69b3      	ldr	r3, [r6, #24]
 800beea:	b913      	cbnz	r3, 800bef2 <__sfp+0x16>
 800beec:	4630      	mov	r0, r6
 800beee:	f7ff ffbd 	bl	800be6c <__sinit>
 800bef2:	3648      	adds	r6, #72	; 0x48
 800bef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bef8:	3b01      	subs	r3, #1
 800befa:	d503      	bpl.n	800bf04 <__sfp+0x28>
 800befc:	6833      	ldr	r3, [r6, #0]
 800befe:	b30b      	cbz	r3, 800bf44 <__sfp+0x68>
 800bf00:	6836      	ldr	r6, [r6, #0]
 800bf02:	e7f7      	b.n	800bef4 <__sfp+0x18>
 800bf04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf08:	b9d5      	cbnz	r5, 800bf40 <__sfp+0x64>
 800bf0a:	4b16      	ldr	r3, [pc, #88]	; (800bf64 <__sfp+0x88>)
 800bf0c:	60e3      	str	r3, [r4, #12]
 800bf0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf12:	6665      	str	r5, [r4, #100]	; 0x64
 800bf14:	f7f5 fe05 	bl	8001b22 <__retarget_lock_init_recursive>
 800bf18:	f7ff ff96 	bl	800be48 <__sfp_lock_release>
 800bf1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf24:	6025      	str	r5, [r4, #0]
 800bf26:	61a5      	str	r5, [r4, #24]
 800bf28:	2208      	movs	r2, #8
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf30:	f7fb fe40 	bl	8007bb4 <memset>
 800bf34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf40:	3468      	adds	r4, #104	; 0x68
 800bf42:	e7d9      	b.n	800bef8 <__sfp+0x1c>
 800bf44:	2104      	movs	r1, #4
 800bf46:	4638      	mov	r0, r7
 800bf48:	f7ff ff62 	bl	800be10 <__sfmoreglue>
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	6030      	str	r0, [r6, #0]
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d1d5      	bne.n	800bf00 <__sfp+0x24>
 800bf54:	f7ff ff78 	bl	800be48 <__sfp_lock_release>
 800bf58:	230c      	movs	r3, #12
 800bf5a:	603b      	str	r3, [r7, #0]
 800bf5c:	e7ee      	b.n	800bf3c <__sfp+0x60>
 800bf5e:	bf00      	nop
 800bf60:	0800c9a4 	.word	0x0800c9a4
 800bf64:	ffff0001 	.word	0xffff0001

0800bf68 <_fwalk_reent>:
 800bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	4606      	mov	r6, r0
 800bf6e:	4688      	mov	r8, r1
 800bf70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf74:	2700      	movs	r7, #0
 800bf76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf7a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf7e:	d505      	bpl.n	800bf8c <_fwalk_reent+0x24>
 800bf80:	6824      	ldr	r4, [r4, #0]
 800bf82:	2c00      	cmp	r4, #0
 800bf84:	d1f7      	bne.n	800bf76 <_fwalk_reent+0xe>
 800bf86:	4638      	mov	r0, r7
 800bf88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf8c:	89ab      	ldrh	r3, [r5, #12]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d907      	bls.n	800bfa2 <_fwalk_reent+0x3a>
 800bf92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf96:	3301      	adds	r3, #1
 800bf98:	d003      	beq.n	800bfa2 <_fwalk_reent+0x3a>
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	47c0      	blx	r8
 800bfa0:	4307      	orrs	r7, r0
 800bfa2:	3568      	adds	r5, #104	; 0x68
 800bfa4:	e7e9      	b.n	800bf7a <_fwalk_reent+0x12>

0800bfa6 <__swhatbuf_r>:
 800bfa6:	b570      	push	{r4, r5, r6, lr}
 800bfa8:	460e      	mov	r6, r1
 800bfaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	b096      	sub	sp, #88	; 0x58
 800bfb2:	4614      	mov	r4, r2
 800bfb4:	461d      	mov	r5, r3
 800bfb6:	da08      	bge.n	800bfca <__swhatbuf_r+0x24>
 800bfb8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	602a      	str	r2, [r5, #0]
 800bfc0:	061a      	lsls	r2, r3, #24
 800bfc2:	d410      	bmi.n	800bfe6 <__swhatbuf_r+0x40>
 800bfc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfc8:	e00e      	b.n	800bfe8 <__swhatbuf_r+0x42>
 800bfca:	466a      	mov	r2, sp
 800bfcc:	f000 f902 	bl	800c1d4 <_fstat_r>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	dbf1      	blt.n	800bfb8 <__swhatbuf_r+0x12>
 800bfd4:	9a01      	ldr	r2, [sp, #4]
 800bfd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bfda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bfde:	425a      	negs	r2, r3
 800bfe0:	415a      	adcs	r2, r3
 800bfe2:	602a      	str	r2, [r5, #0]
 800bfe4:	e7ee      	b.n	800bfc4 <__swhatbuf_r+0x1e>
 800bfe6:	2340      	movs	r3, #64	; 0x40
 800bfe8:	2000      	movs	r0, #0
 800bfea:	6023      	str	r3, [r4, #0]
 800bfec:	b016      	add	sp, #88	; 0x58
 800bfee:	bd70      	pop	{r4, r5, r6, pc}

0800bff0 <__smakebuf_r>:
 800bff0:	898b      	ldrh	r3, [r1, #12]
 800bff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bff4:	079d      	lsls	r5, r3, #30
 800bff6:	4606      	mov	r6, r0
 800bff8:	460c      	mov	r4, r1
 800bffa:	d507      	bpl.n	800c00c <__smakebuf_r+0x1c>
 800bffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c000:	6023      	str	r3, [r4, #0]
 800c002:	6123      	str	r3, [r4, #16]
 800c004:	2301      	movs	r3, #1
 800c006:	6163      	str	r3, [r4, #20]
 800c008:	b002      	add	sp, #8
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
 800c00c:	ab01      	add	r3, sp, #4
 800c00e:	466a      	mov	r2, sp
 800c010:	f7ff ffc9 	bl	800bfa6 <__swhatbuf_r>
 800c014:	9900      	ldr	r1, [sp, #0]
 800c016:	4605      	mov	r5, r0
 800c018:	4630      	mov	r0, r6
 800c01a:	f7fb fe3f 	bl	8007c9c <_malloc_r>
 800c01e:	b948      	cbnz	r0, 800c034 <__smakebuf_r+0x44>
 800c020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c024:	059a      	lsls	r2, r3, #22
 800c026:	d4ef      	bmi.n	800c008 <__smakebuf_r+0x18>
 800c028:	f023 0303 	bic.w	r3, r3, #3
 800c02c:	f043 0302 	orr.w	r3, r3, #2
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	e7e3      	b.n	800bffc <__smakebuf_r+0xc>
 800c034:	4b0d      	ldr	r3, [pc, #52]	; (800c06c <__smakebuf_r+0x7c>)
 800c036:	62b3      	str	r3, [r6, #40]	; 0x28
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	6020      	str	r0, [r4, #0]
 800c03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	9b00      	ldr	r3, [sp, #0]
 800c044:	6163      	str	r3, [r4, #20]
 800c046:	9b01      	ldr	r3, [sp, #4]
 800c048:	6120      	str	r0, [r4, #16]
 800c04a:	b15b      	cbz	r3, 800c064 <__smakebuf_r+0x74>
 800c04c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c050:	4630      	mov	r0, r6
 800c052:	f000 f8d1 	bl	800c1f8 <_isatty_r>
 800c056:	b128      	cbz	r0, 800c064 <__smakebuf_r+0x74>
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	f023 0303 	bic.w	r3, r3, #3
 800c05e:	f043 0301 	orr.w	r3, r3, #1
 800c062:	81a3      	strh	r3, [r4, #12]
 800c064:	89a0      	ldrh	r0, [r4, #12]
 800c066:	4305      	orrs	r5, r0
 800c068:	81a5      	strh	r5, [r4, #12]
 800c06a:	e7cd      	b.n	800c008 <__smakebuf_r+0x18>
 800c06c:	0800be05 	.word	0x0800be05

0800c070 <_malloc_usable_size_r>:
 800c070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c074:	1f18      	subs	r0, r3, #4
 800c076:	2b00      	cmp	r3, #0
 800c078:	bfbc      	itt	lt
 800c07a:	580b      	ldrlt	r3, [r1, r0]
 800c07c:	18c0      	addlt	r0, r0, r3
 800c07e:	4770      	bx	lr

0800c080 <_raise_r>:
 800c080:	291f      	cmp	r1, #31
 800c082:	b538      	push	{r3, r4, r5, lr}
 800c084:	4604      	mov	r4, r0
 800c086:	460d      	mov	r5, r1
 800c088:	d904      	bls.n	800c094 <_raise_r+0x14>
 800c08a:	2316      	movs	r3, #22
 800c08c:	6003      	str	r3, [r0, #0]
 800c08e:	f04f 30ff 	mov.w	r0, #4294967295
 800c092:	bd38      	pop	{r3, r4, r5, pc}
 800c094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c096:	b112      	cbz	r2, 800c09e <_raise_r+0x1e>
 800c098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c09c:	b94b      	cbnz	r3, 800c0b2 <_raise_r+0x32>
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 f830 	bl	800c104 <_getpid_r>
 800c0a4:	462a      	mov	r2, r5
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ae:	f000 b817 	b.w	800c0e0 <_kill_r>
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d00a      	beq.n	800c0cc <_raise_r+0x4c>
 800c0b6:	1c59      	adds	r1, r3, #1
 800c0b8:	d103      	bne.n	800c0c2 <_raise_r+0x42>
 800c0ba:	2316      	movs	r3, #22
 800c0bc:	6003      	str	r3, [r0, #0]
 800c0be:	2001      	movs	r0, #1
 800c0c0:	e7e7      	b.n	800c092 <_raise_r+0x12>
 800c0c2:	2400      	movs	r4, #0
 800c0c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	4798      	blx	r3
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	e7e0      	b.n	800c092 <_raise_r+0x12>

0800c0d0 <raise>:
 800c0d0:	4b02      	ldr	r3, [pc, #8]	; (800c0dc <raise+0xc>)
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	6818      	ldr	r0, [r3, #0]
 800c0d6:	f7ff bfd3 	b.w	800c080 <_raise_r>
 800c0da:	bf00      	nop
 800c0dc:	20000b64 	.word	0x20000b64

0800c0e0 <_kill_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d07      	ldr	r5, [pc, #28]	; (800c100 <_kill_r+0x20>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	f7f5 fa15 	bl	800151c <_kill>
 800c0f2:	1c43      	adds	r3, r0, #1
 800c0f4:	d102      	bne.n	800c0fc <_kill_r+0x1c>
 800c0f6:	682b      	ldr	r3, [r5, #0]
 800c0f8:	b103      	cbz	r3, 800c0fc <_kill_r+0x1c>
 800c0fa:	6023      	str	r3, [r4, #0]
 800c0fc:	bd38      	pop	{r3, r4, r5, pc}
 800c0fe:	bf00      	nop
 800c100:	20001864 	.word	0x20001864

0800c104 <_getpid_r>:
 800c104:	f7f5 ba02 	b.w	800150c <_getpid>

0800c108 <__sread>:
 800c108:	b510      	push	{r4, lr}
 800c10a:	460c      	mov	r4, r1
 800c10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c110:	f000 f894 	bl	800c23c <_read_r>
 800c114:	2800      	cmp	r0, #0
 800c116:	bfab      	itete	ge
 800c118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c11a:	89a3      	ldrhlt	r3, [r4, #12]
 800c11c:	181b      	addge	r3, r3, r0
 800c11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c122:	bfac      	ite	ge
 800c124:	6563      	strge	r3, [r4, #84]	; 0x54
 800c126:	81a3      	strhlt	r3, [r4, #12]
 800c128:	bd10      	pop	{r4, pc}

0800c12a <__swrite>:
 800c12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c12e:	461f      	mov	r7, r3
 800c130:	898b      	ldrh	r3, [r1, #12]
 800c132:	05db      	lsls	r3, r3, #23
 800c134:	4605      	mov	r5, r0
 800c136:	460c      	mov	r4, r1
 800c138:	4616      	mov	r6, r2
 800c13a:	d505      	bpl.n	800c148 <__swrite+0x1e>
 800c13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c140:	2302      	movs	r3, #2
 800c142:	2200      	movs	r2, #0
 800c144:	f000 f868 	bl	800c218 <_lseek_r>
 800c148:	89a3      	ldrh	r3, [r4, #12]
 800c14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c152:	81a3      	strh	r3, [r4, #12]
 800c154:	4632      	mov	r2, r6
 800c156:	463b      	mov	r3, r7
 800c158:	4628      	mov	r0, r5
 800c15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c15e:	f000 b817 	b.w	800c190 <_write_r>

0800c162 <__sseek>:
 800c162:	b510      	push	{r4, lr}
 800c164:	460c      	mov	r4, r1
 800c166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16a:	f000 f855 	bl	800c218 <_lseek_r>
 800c16e:	1c43      	adds	r3, r0, #1
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	bf15      	itete	ne
 800c174:	6560      	strne	r0, [r4, #84]	; 0x54
 800c176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c17e:	81a3      	strheq	r3, [r4, #12]
 800c180:	bf18      	it	ne
 800c182:	81a3      	strhne	r3, [r4, #12]
 800c184:	bd10      	pop	{r4, pc}

0800c186 <__sclose>:
 800c186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18a:	f000 b813 	b.w	800c1b4 <_close_r>
	...

0800c190 <_write_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d07      	ldr	r5, [pc, #28]	; (800c1b0 <_write_r+0x20>)
 800c194:	4604      	mov	r4, r0
 800c196:	4608      	mov	r0, r1
 800c198:	4611      	mov	r1, r2
 800c19a:	2200      	movs	r2, #0
 800c19c:	602a      	str	r2, [r5, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	f7f5 f9f3 	bl	800158a <_write>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d102      	bne.n	800c1ae <_write_r+0x1e>
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	b103      	cbz	r3, 800c1ae <_write_r+0x1e>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	20001864 	.word	0x20001864

0800c1b4 <_close_r>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	4d06      	ldr	r5, [pc, #24]	; (800c1d0 <_close_r+0x1c>)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	4608      	mov	r0, r1
 800c1be:	602b      	str	r3, [r5, #0]
 800c1c0:	f7f5 f9ff 	bl	80015c2 <_close>
 800c1c4:	1c43      	adds	r3, r0, #1
 800c1c6:	d102      	bne.n	800c1ce <_close_r+0x1a>
 800c1c8:	682b      	ldr	r3, [r5, #0]
 800c1ca:	b103      	cbz	r3, 800c1ce <_close_r+0x1a>
 800c1cc:	6023      	str	r3, [r4, #0]
 800c1ce:	bd38      	pop	{r3, r4, r5, pc}
 800c1d0:	20001864 	.word	0x20001864

0800c1d4 <_fstat_r>:
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4d07      	ldr	r5, [pc, #28]	; (800c1f4 <_fstat_r+0x20>)
 800c1d8:	2300      	movs	r3, #0
 800c1da:	4604      	mov	r4, r0
 800c1dc:	4608      	mov	r0, r1
 800c1de:	4611      	mov	r1, r2
 800c1e0:	602b      	str	r3, [r5, #0]
 800c1e2:	f7f5 f9fa 	bl	80015da <_fstat>
 800c1e6:	1c43      	adds	r3, r0, #1
 800c1e8:	d102      	bne.n	800c1f0 <_fstat_r+0x1c>
 800c1ea:	682b      	ldr	r3, [r5, #0]
 800c1ec:	b103      	cbz	r3, 800c1f0 <_fstat_r+0x1c>
 800c1ee:	6023      	str	r3, [r4, #0]
 800c1f0:	bd38      	pop	{r3, r4, r5, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20001864 	.word	0x20001864

0800c1f8 <_isatty_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4d06      	ldr	r5, [pc, #24]	; (800c214 <_isatty_r+0x1c>)
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	4608      	mov	r0, r1
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	f7f5 f9f9 	bl	80015fa <_isatty>
 800c208:	1c43      	adds	r3, r0, #1
 800c20a:	d102      	bne.n	800c212 <_isatty_r+0x1a>
 800c20c:	682b      	ldr	r3, [r5, #0]
 800c20e:	b103      	cbz	r3, 800c212 <_isatty_r+0x1a>
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	20001864 	.word	0x20001864

0800c218 <_lseek_r>:
 800c218:	b538      	push	{r3, r4, r5, lr}
 800c21a:	4d07      	ldr	r5, [pc, #28]	; (800c238 <_lseek_r+0x20>)
 800c21c:	4604      	mov	r4, r0
 800c21e:	4608      	mov	r0, r1
 800c220:	4611      	mov	r1, r2
 800c222:	2200      	movs	r2, #0
 800c224:	602a      	str	r2, [r5, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	f7f5 f9f2 	bl	8001610 <_lseek>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	d102      	bne.n	800c236 <_lseek_r+0x1e>
 800c230:	682b      	ldr	r3, [r5, #0]
 800c232:	b103      	cbz	r3, 800c236 <_lseek_r+0x1e>
 800c234:	6023      	str	r3, [r4, #0]
 800c236:	bd38      	pop	{r3, r4, r5, pc}
 800c238:	20001864 	.word	0x20001864

0800c23c <_read_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4d07      	ldr	r5, [pc, #28]	; (800c25c <_read_r+0x20>)
 800c240:	4604      	mov	r4, r0
 800c242:	4608      	mov	r0, r1
 800c244:	4611      	mov	r1, r2
 800c246:	2200      	movs	r2, #0
 800c248:	602a      	str	r2, [r5, #0]
 800c24a:	461a      	mov	r2, r3
 800c24c:	f7f5 f980 	bl	8001550 <_read>
 800c250:	1c43      	adds	r3, r0, #1
 800c252:	d102      	bne.n	800c25a <_read_r+0x1e>
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	b103      	cbz	r3, 800c25a <_read_r+0x1e>
 800c258:	6023      	str	r3, [r4, #0]
 800c25a:	bd38      	pop	{r3, r4, r5, pc}
 800c25c:	20001864 	.word	0x20001864

0800c260 <_init>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	bf00      	nop
 800c264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c266:	bc08      	pop	{r3}
 800c268:	469e      	mov	lr, r3
 800c26a:	4770      	bx	lr

0800c26c <_fini>:
 800c26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26e:	bf00      	nop
 800c270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c272:	bc08      	pop	{r3}
 800c274:	469e      	mov	lr, r3
 800c276:	4770      	bx	lr
